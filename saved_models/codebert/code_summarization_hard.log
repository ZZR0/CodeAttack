textattack: Running 8 worker(s) on 8 GPU(s).
Using /tmp/tfhub_modules to cache modules.
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 1/1000 [00:00<00:00, 1534.13it/s][Succeeded / Failed / Skipped / Total] 2 / 0 / 0 / 2:   0%|          | 2/1000 [00:00<00:00, 1757.51it/s][Succeeded / Failed / Skipped / Total] 3 / 0 / 0 / 3:   0%|          | 3/1000 [00:00<00:00, 2002.05it/s][Succeeded / Failed / Skipped / Total] 4 / 0 / 0 / 4:   0%|          | 4/1000 [00:00<00:00, 2211.60it/s][Succeeded / Failed / Skipped / Total] 5 / 0 / 0 / 5:   0%|          | 5/1000 [00:00<00:00, 2376.11it/s]--------------------------------------------- Result 1 ---------------------------------------------
Wrap the given Observable into an Observable . --> Adjusts the background --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > [[source]] ) { ObjectHelper . requireNonNull ( [[source]] , "source is null" ) ; if ( [[source]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[source]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[source]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[adjustment]] ( ObservableSource < T > [[backgrounds]] ) { ObjectHelper . requireNonNull ( [[backgrounds]] , "source is null" ) ; if ( [[backgrounds]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[backgrounds]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[backgrounds]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 2 ---------------------------------------------
Fast implementation for fast - path elements . --> Perform a timer --> Socre: 1.0

[[[[Adv]]]]: protected final void [[fastPathOrderedEmit]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void [[timeframe]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 3 ---------------------------------------------
Adapts a ConnectableObserver to a ConnectableObservable Observable . --> Create a new Reaction from a ConnectableObserver --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[observeOn]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[horseshoes]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 4 ---------------------------------------------
Create a new instance of this processor . --> Create a new nucleast processor --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int [[capacityHint]] ) { return new UnicastProcessor < T > ( [[capacityHint]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[formation]] ( int [[multe]] ) { return new UnicastProcessor < T > ( [[multe]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 5 ---------------------------------------------
Returns a sorted observable sorted by the specified comparator . --> Package - private for testing --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[marshalling]] ( Comparator < ? super T > [[jinny]] ) { ObjectHelper . requireNonNull ( [[jinny]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[jinny]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 6 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 6 / 0 / 0 / 6:   1%|          | 6/1000 [00:00<00:00, 2299.93it/s][Succeeded / Failed / Skipped / Total] 7 / 0 / 0 / 7:   1%|          | 7/1000 [00:00<00:00, 2402.83it/s][Succeeded / Failed / Skipped / Total] 8 / 0 / 0 / 8:   1%|          | 8/1000 [00:00<00:00, 2467.78it/s][Succeeded / Failed / Skipped / Total] 9 / 0 / 0 / 9:   1%|          | 9/1000 [00:00<00:00, 2543.54it/s]Tries to apply a scalar function to a Publisher --> Performs Lob transformation --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T [[t]] ; try { [[t]] = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[True]]" == "[[True]]" ; } if ( [[t]] == null ) { EmptySubscription . complete ( subscriber ) ; return "[[True]]" == "[[True]]" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( [[t]] ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[True]]" == "[[True]]" ; } if ( r instanceof Callable ) { R [[u]] ; try { [[u]] = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[True]]" == "[[True]]" ; } if ( [[u]] == null ) { EmptySubscription . complete ( subscriber ) ; return "[[True]]" == "[[True]]" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , [[u]] ) ) ; } else { r . subscribe ( subscriber ) ; } return "[[True]]" == "[[True]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[lobotomy]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T [[could]] ; try { [[could]] = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[Accurate]]" == "[[Accurate]]" ; } if ( [[could]] == null ) { EmptySubscription . complete ( subscriber ) ; return "[[Accurate]]" == "[[Accurate]]" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( [[could]] ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[Accurate]]" == "[[Accurate]]" ; } if ( r instanceof Callable ) { R [[shaw]] ; try { [[shaw]] = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "[[Accurate]]" == "[[Accurate]]" ; } if ( [[shaw]] == null ) { EmptySubscription . complete ( subscriber ) ; return "[[Accurate]]" == "[[Accurate]]" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , [[shaw]] ) ) ; } else { r . subscribe ( subscriber ) ; } return "[[Accurate]]" == "[[Accurate]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 7 ---------------------------------------------
Creates a new instance of this processor . --> Create new processor --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint , Runnable [[onCancelled]] ) { ObjectHelper . requireNonNull ( [[onCancelled]] , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , [[onCancelled]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint , Runnable [[happenin]] ) { ObjectHelper . requireNonNull ( [[happenin]] , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , [[happenin]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 8 ---------------------------------------------
Reset all variables . --> Reconstruct the state of the simulation --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[False]]" != "[[False]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void [[reconstruct]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[Forges]]" != "[[Forges]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 9 ---------------------------------------------
Construct a Maybe from a single element . --> Job from Medusa --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > [[singleSource]] ) { ObjectHelper . requireNonNull ( [[singleSource]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[singleSource]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[juanita]] ( SingleSource < T > [[medusa]] ) { ObjectHelper . requireNonNull ( [[medusa]] , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( [[medusa]] ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 10 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 10 / 0 / 0 / 10:   1%|          | 10/1000 [00:00<00:00, 2592.28it/s][Succeeded / Failed / Skipped / Total] 10 / 1 / 0 / 11:   1%|          | 11/1000 [00:00<00:00, 2655.85it/s][Succeeded / Failed / Skipped / Total] 11 / 1 / 0 / 12:   1%|          | 12/1000 [00:00<00:00, 2708.33it/s][Succeeded / Failed / Skipped / Total] 12 / 1 / 0 / 13:   1%|▏         | 13/1000 [00:00<00:00, 2750.92it/s][Succeeded / Failed / Skipped / Total] 13 / 1 / 0 / 14:   1%|▏         | 14/1000 [00:00<00:00, 2728.26it/s][Succeeded / Failed / Skipped / Total] 14 / 1 / 0 / 15:   2%|▏         | 15/1000 [00:00<00:00, 2748.44it/s][Succeeded / Failed / Skipped / Total] 15 / 1 / 0 / 16:   2%|▏         | 16/1000 [00:00<00:00, 2784.02it/s][Succeeded / Failed / Skipped / Total] 16 / 1 / 0 / 17:   2%|▏         | 17/1000 [00:00<00:00, 2820.31it/s][Succeeded / Failed / Skipped / Total] 17 / 1 / 0 / 18:   2%|▏         | 18/1000 [00:00<00:00, 2841.24it/s]Exports a scalar value from a scalar value . --> Support for Streamable --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Flowable < U > [[scalarXMap]] ( final T [[value]] , final Function < ? super T , ? extends Publisher < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[value]] , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > [[atherton]] ( final T [[significance]] , final Function < ? super T , ? extends Publisher < ? extends U > > [[kalahari]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[significance]] , [[kalahari]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 11 ---------------------------------------------
Requests that the specified object is not null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > T requireNonNull ( T object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < T > T requireNonNull ( T object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 12 ---------------------------------------------
Wraps the given value . --> Convenience function for Java operator --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > [[justCallable]] ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > [[noga]] ( T [[utility]] ) { return new JustValue < Object , T > ( [[utility]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 13 ---------------------------------------------
Retries the given number of times after the given predicate . --> Performs a uplink on this Stream --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[retry]] ( long [[times]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[times]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[uplink]] ( long [[term]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[term]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 14 ---------------------------------------------
Returns a function that returns a value . --> Convenience method for constabulary --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[justFunction]] ( U [[value]] ) { return new JustValue < [[T]] , U > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < [[did]] , U > Function < [[did]] , U > [[constabulary]] ( U [[prominence]] ) { return new JustValue < [[did]] , U > ( [[prominence]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 15 ---------------------------------------------
Create a new instance with the specified capacity . --> Create a new unicast subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[creativity]] ( int [[farmin]] ) { return new UnicastSubject < T > ( [[farmin]] , "[[Truthful]]" == "[[Truthful]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 16 ---------------------------------------------
Returns identity function . --> Calculates the Hessmarks --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[T]] > Function < [[T]] , [[T]] > [[identity]] ( ) { return ( Function < [[T]] , [[T]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[anvil]] > Function < [[anvil]] , [[anvil]] > [[hallmarks]] ( ) { return ( Function < [[anvil]] , [[anvil]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 17 ---------------------------------------------
Construct a Maybe from a Completable --> Shape of Completable --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[shabazz]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 18 ---------------------------------------------
Cast function . --> Casts to an Objective --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[castFunction]] ( Class < U > [[target]] ) { return new CastToClass < [[T]] , U > ( [[target]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < [[vd]] , U > Function < [[vd]] , U > [[notorious]] ( Class < U > [[ambition]] ) { return new CastToClass < [[vd]] , U > ( [[ambition]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 19 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 18 / 1 / 0 / 19:   2%|▏         | 19/1000 [00:00<00:00, 2826.45it/s][Succeeded / Failed / Skipped / Total] 19 / 1 / 0 / 20:   2%|▏         | 20/1000 [00:00<00:00, 2846.49it/s][Succeeded / Failed / Skipped / Total] 20 / 1 / 0 / 21:   2%|▏         | 21/1000 [00:00<00:00, 2853.36it/s][Succeeded / Failed / Skipped / Total] 21 / 1 / 0 / 22:   2%|▏         | 22/1000 [00:00<00:00, 2835.21it/s][Succeeded / Failed / Skipped / Total] 21 / 1 / 0 / 22:   2%|▏         | 23/1000 [00:00<00:39, 24.47it/s]  [Succeeded / Failed / Skipped / Total] 22 / 1 / 0 / 23:   2%|▏         | 23/1000 [00:00<00:39, 24.44it/s][Succeeded / Failed / Skipped / Total] 23 / 1 / 0 / 24:   2%|▏         | 24/1000 [00:03<02:16,  7.16it/s][Succeeded / Failed / Skipped / Total] 23 / 1 / 1 / 25:   2%|▎         | 25/1000 [00:03<02:20,  6.94it/s][Succeeded / Failed / Skipped / Total] 24 / 1 / 1 / 26:   3%|▎         | 26/1000 [00:03<02:24,  6.76it/s]Waits for errors to be executed . --> This method is called by unit tests --> Socre: 1.0

[[[[Adv]]]]: public boolean [[blockingAwait]] ( long [[timeout]] , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , [[unit]] ) ) { dispose ( ) ; return "[[False]]" != "[[False]]" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( [[ex]] ) ; } } Throwable [[ex]] = error ; if ( [[ex]] != null ) { throw ExceptionHelper . wrapOrThrow ( [[ex]] ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean [[bronc]] ( long [[inbounds]] , TimeUnit [[grouping]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[inbounds]] , [[grouping]] ) ) { dispose ( ) ; return "[[Falsify]]" != "[[Falsify]]" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( [[jilted]] ) ; } } Throwable [[jilted]] = error ; if ( [[jilted]] != null ) { throw ExceptionHelper . wrapOrThrow ( [[jilted]] ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 20 ---------------------------------------------
Create a new instance . --> Create a new unicast subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[architectural]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "[[Meaningful]]" == "[[Meaningful]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 21 ---------------------------------------------
Performs a blocking request . --> Request a subscription for a subscription --> Socre: 1.0

[[[[Adv]]]]: public static void request ( Subscription [[s]] , int [[prefetch]] ) { [[s]] . request ( [[prefetch]] < 0 ? Long . MAX_VALUE : [[prefetch]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void request ( Subscription [[o]] , int [[smoke]] ) { [[o]] . request ( [[smoke]] < 0 ? Long . MAX_VALUE : [[smoke]] ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 22 ---------------------------------------------
Called when a subscriber is complete . --> private helper ; --> Socre: 1.0

[[[[Adv]]]]: public static < T > void [[postComplete]] ( Subscriber < ? super T > actual , Queue < T > [[queue]] , AtomicLong state , BooleanSupplier [[isCancelled]] ) { if ( [[queue]] . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , [[queue]] , state , [[isCancelled]] ) ) { return ; } for ( ; ; ) { long [[r]] = state . get ( ) ; if ( ( [[r]] & COMPLETED_MASK ) != 0L ) { return ; } long [[u]] = [[r]] | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void [[gof]] ( Subscriber < ? super T > actual , Queue < T > [[paged]] , AtomicLong state , BooleanSupplier [[simplistic]] ) { if ( [[paged]] . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , [[paged]] , state , [[simplistic]] ) ) { return ; } for ( ; ; ) { long [[na]] = state . get ( ) ; if ( ( [[na]] & COMPLETED_MASK ) != 0L ) { return ; } long [[ou]] = [[na]] | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 23 ---------------------------------------------
Blocks until the task is complete . --> Wait for nogue to finish --> Socre: 1.0

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[nogueira]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 24 ---------------------------------------------
Create a new instance with the specified capacity . --> Static factory method --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] , Runnable [[onTerminate]] ) { return new UnicastSubject < T > ( [[capacityHint]] , [[onTerminate]] , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[producing]] ( int [[butterfly]] , Runnable [[querida]] ) { return new UnicastSubject < T > ( [[butterfly]] , [[querida]] , "[[Accurate]]" == "[[Accurate]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 25 ---------------------------------------------
Determines whether two streams are disjoint --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean validate ( Disposable upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 26 ---------------------------------------------
Get an error from the queue . --> Determines if we are able to deal with an exception --> Socre: 1.0

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( long [[timeout]] , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , [[unit]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[timeout]] , [[unit]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable [[canapés]] ( long [[huddle]] , TimeUnit [[addiction]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[huddle]] , [[addiction]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[huddle]] , [[addiction]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
[Succeeded / Failed / Skipped / Total] 25 / 1 / 1 / 27:   3%|▎         | 27/1000 [00:06<03:55,  4.14it/s][Succeeded / Failed / Skipped / Total] 26 / 1 / 1 / 28:   3%|▎         | 28/1000 [00:07<04:37,  3.50it/s][Succeeded / Failed / Skipped / Total] 27 / 1 / 1 / 29:   3%|▎         | 29/1000 [00:10<05:59,  2.70it/s][Succeeded / Failed / Skipped / Total] 28 / 1 / 1 / 30:   3%|▎         | 30/1000 [00:12<06:47,  2.38it/s][Succeeded / Failed / Skipped / Total] 29 / 1 / 1 / 31:   3%|▎         | 31/1000 [00:21<11:20,  1.42it/s][Succeeded / Failed / Skipped / Total] 30 / 1 / 1 / 32:   3%|▎         | 32/1000 [00:22<11:15,  1.43it/s][Succeeded / Failed / Skipped / Total] 31 / 1 / 1 / 33:   3%|▎         | 33/1000 [00:24<11:46,  1.37it/s][Succeeded / Failed / Skipped / Total] 32 / 1 / 1 / 34:   3%|▎         | 34/1000 [00:37<17:44,  1.10s/it][Succeeded / Failed / Skipped / Total] 33 / 1 / 1 / 35:   4%|▎         | 35/1000 [00:43<19:50,  1.23s/it]--------------------------------------------- Result 27 ---------------------------------------------
Create a new unicast subject . --> Create a new unicast subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( boolean [[delayError]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[delayError]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[creativity]] ( boolean [[klicks]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[klicks]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 28 ---------------------------------------------
Adds a cap to a long --> Helper method to add a cap --> Socre: 1.0

[[[[Adv]]]]: public static long addCap ( long [[a]] , long b ) { long [[u]] = [[a]] + b ; if ( [[u]] < 0L ) { return Long . MAX_VALUE ; } return [[u]] ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long addCap ( long [[avec]] , long b ) { long [[shou]] = [[avec]] + b ; if ( [[shou]] < 0L ) { return Long . MAX_VALUE ; } return [[shou]] ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 29 ---------------------------------------------
Returns the capacity of a long . --> helper to barcode --> Socre: 1.0

[[[[Adv]]]]: public static long [[multiplyCap]] ( long a , long [[b]] ) { long u = a * [[b]] ; if ( ( ( a | [[b]] ) >>> 31 ) != 0 ) { if ( u / a != [[b]] ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[barlow]] ( long a , long [[n]] ) { long u = a * [[n]] ; if ( ( ( a | [[n]] ) >>> 31 ) != 0 ) { if ( u / a != [[n]] ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 30 ---------------------------------------------
Convenience method to validate the upstream two SubSubscription objects --> Validate two Subscriber states --> Socre: 1.0

[[[[Adv]]]]: public static boolean validate ( Subscription upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[False]]" != "[[False]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Subscription upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[Misguided]]" != "[[Misguided]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 31 ---------------------------------------------
Completes the current value . --> Perform a single operation --> Socre: 1.0

[[[[Adv]]]]: protected final void [[complete]] ( R n ) { long [[p]] = produced ; if ( [[p]] != 0 ) { BackpressureHelper . produced ( this , [[p]] ) ; } for ( ; ; ) { long [[r]] = get ( ) ; if ( ( [[r]] & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( [[r]] & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void [[exhaustive]] ( R n ) { long [[na]] = produced ; if ( [[na]] != 0 ) { BackpressureHelper . produced ( this , [[na]] ) ; } for ( ; ; ) { long [[rm]] = get ( ) ; if ( ( [[rm]] & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( [[rm]] & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 32 ---------------------------------------------
Add an object to the list --> Include an object --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[incorporate]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 33 ---------------------------------------------
Shuts down the background thread . --> Tries to clean up resources --> Socre: 1.0

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[foreclosure]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 34 ---------------------------------------------
Atomically adds the specified number to the specified long . --> Calculates total number of amino acids --> Socre: 1.0

[[[[Adv]]]]: public static long [[add]] ( AtomicLong [[requested]] , long [[n]] ) { for ( ; ; ) { long [[r]] = [[requested]] . get ( ) ; if ( [[r]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( [[r]] , [[n]] ) ; if ( [[requested]] . compareAndSet ( [[r]] , u ) ) { return [[r]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long [[totalled]] ( AtomicLong [[solicited]] , long [[phosphorous]] ) { for ( ; ; ) { long [[j]] = [[solicited]] . get ( ) ; if ( [[j]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( [[j]] , [[phosphorous]] ) ; if ( [[solicited]] . compareAndSet ( [[j]] , u ) ) { return [[j]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 35 ---------------------------------------------
Converts an exception into a NullPointerException . --> Returns null if there is no problem --> Socre: 1.0

[[[[Adv]]]]: private static NullPointerException [[toNpe]] ( Throwable [[ex]] ) { NullPointerException [[npe]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[npe]] . initCause ( [[ex]] ) ; return [[npe]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException [[maybes]] ( Throwable [[elderly]] ) { NullPointerException [[his]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[his]] . initCause ( [[elderly]] ) ; return [[his]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
[Succeeded / Failed / Skipped / Total] 34 / 1 / 1 / 36:   4%|▎         | 36/1000 [00:46<20:40,  1.29s/it][Succeeded / Failed / Skipped / Total] 35 / 1 / 1 / 37:   4%|▎         | 37/1000 [00:50<21:43,  1.35s/it][Succeeded / Failed / Skipped / Total] 36 / 1 / 1 / 38:   4%|▍         | 38/1000 [00:57<24:22,  1.52s/it][Succeeded / Failed / Skipped / Total] 37 / 1 / 1 / 39:   4%|▍         | 39/1000 [01:06<27:20,  1.71s/it][Succeeded / Failed / Skipped / Total] 38 / 1 / 1 / 40:   4%|▍         | 40/1000 [01:07<26:58,  1.69s/it][Succeeded / Failed / Skipped / Total] 39 / 1 / 1 / 41:   4%|▍         | 41/1000 [01:13<28:37,  1.79s/it]--------------------------------------------- Result 36 ---------------------------------------------
Get the value associated with this notification . --> Getter for Easter --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object [[o]] = value ; if ( [[o]] != null && ! NotificationLite . isError ( [[o]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[easterbrook]] ( ) { Object [[ni]] = value ; if ( [[ni]] != null && ! NotificationLite . isError ( [[ni]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 37 ---------------------------------------------
Loop the loop . --> Hook for now --> Socre: 1.0

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "False" != "False" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[hydrangea]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "False" != "False" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 38 ---------------------------------------------
Flattens the given exception into a flat list . --> collect all exceptions --> Socre: 1.0

[[[[Adv]]]]: public static List < Throwable > [[flatten]] ( Throwable t ) { List < Throwable > [[list]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable [[e]] = deque . removeFirst ( ) ; if ( [[e]] instanceof CompositeException ) { CompositeException ce = ( CompositeException ) [[e]] ; List < Throwable > [[exceptions]] = ce . getExceptions ( ) ; for ( int i = [[exceptions]] . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( [[exceptions]] . get ( i ) ) ; } } else { [[list]] . add ( [[e]] ) ; } } return [[list]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > [[rub]] ( Throwable t ) { List < Throwable > [[recording]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable [[johnston]] = deque . removeFirst ( ) ; if ( [[johnston]] instanceof CompositeException ) { CompositeException ce = ( CompositeException ) [[johnston]] ; List < Throwable > [[excepting]] = ce . getExceptions ( ) ; for ( int i = [[excepting]] . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( [[excepting]] . get ( i ) ) ; } } else { [[recording]] . add ( [[johnston]] ) ; } } return [[recording]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 39 ---------------------------------------------
Sets a new subscription . --> helper method to perform the next request --> Socre: 1.0

[[[[Adv]]]]: public final void [[setSubscription]] ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[a]] = actual ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } actual = s ; long [[r]] = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( [[r]] != 0L ) { s . request ( [[r]] ) ; } return ; } Subscription [[a]] = missedSubscription . getAndSet ( s ) ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void [[helmsley]] ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[an]] = actual ; if ( [[an]] != null && cancelOnReplace ) { [[an]] . cancel ( ) ; } actual = s ; long [[rs]] = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( [[rs]] != 0L ) { s . request ( [[rs]] ) ; } return ; } Subscription [[an]] = missedSubscription . getAndSet ( s ) ; if ( [[an]] != null && cancelOnReplace ) { [[an]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 40 ---------------------------------------------
Removes all resources --> Removes and dispose resources --> Socre: 1.0

[[[[Adv]]]]: public void clear ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[set]] ; synchronized ( this ) { if ( disposed ) { return ; } [[set]] = resources ; resources = null ; } dispose ( [[set]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void clear ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[stake]] ; synchronized ( this ) { if ( disposed ) { return ; } [[stake]] = resources ; resources = null ; } dispose ( [[stake]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 41 ---------------------------------------------
Atomically updates the AtomicReference with the given AtomicReference . --> Compares two arguments --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Disposable > [[upstream]] , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , [[next]] ) ) { [[next]] . dispose ( ) ; if ( [[upstream]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "[[False]]" != "[[False]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean [[arguments]] ( AtomicReference < Disposable > [[supreme]] , Disposable [[expectant]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[expectant]] , "next is null" ) ; if ( ! [[supreme]] . compareAndSet ( null , [[expectant]] ) ) { [[expectant]] . dispose ( ) ; if ( [[supreme]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "[[Inaccurate]]" != "[[Inaccurate]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 42 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 40 / 1 / 1 / 42:   4%|▍         | 42/1000 [02:03<46:52,  2.94s/it][Succeeded / Failed / Skipped / Total] 41 / 1 / 1 / 43:   4%|▍         | 43/1000 [02:22<52:53,  3.32s/it][Succeeded / Failed / Skipped / Total] 42 / 1 / 1 / 44:   4%|▍         | 44/1000 [02:43<59:22,  3.73s/it][Succeeded / Failed / Skipped / Total] 43 / 1 / 1 / 45:   4%|▍         | 45/1000 [02:53<1:01:11,  3.84s/it][Succeeded / Failed / Skipped / Total] 43 / 1 / 1 / 45:   5%|▍         | 46/1000 [02:57<1:01:30,  3.87s/it][Succeeded / Failed / Skipped / Total] 44 / 1 / 1 / 46:   5%|▍         | 46/1000 [02:57<1:01:30,  3.87s/it][Succeeded / Failed / Skipped / Total] 44 / 1 / 1 / 46:   5%|▍         | 47/1000 [03:01<1:01:18,  3.86s/it][Succeeded / Failed / Skipped / Total] 45 / 1 / 1 / 47:   5%|▍         | 47/1000 [03:01<1:01:18,  3.86s/it][Succeeded / Failed / Skipped / Total] 45 / 1 / 1 / 47:   5%|▍         | 48/1000 [03:02<1:00:14,  3.80s/it]Tries to perform a scalar operation on an observable source . --> Implements the visitor --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > [[mapper]] ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( [[mapper]] . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[hollywood]] ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > [[mandolin]] ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( [[mandolin]] . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 43 ---------------------------------------------
Convert a scalar value to a scalar value . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T [[value]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[value]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[verifying]] ( T [[usefulness]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[usefulness]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 44 ---------------------------------------------
Atomically updates the upstream AtomicReference with the given AtomicReference . --> Compares two Subclasses --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[False]]" != "[[False]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean [[caroling]] ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[Specious]]" != "[[Specious]]" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 45 ---------------------------------------------
Returns the number of available resources . --> Determines how many measures are measured --> Socre: 1.0

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[set]] = resources ; return [[set]] != null ? [[set]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[measuring]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[inception]] = resources ; return [[inception]] != null ? [[inception]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 46 ---------------------------------------------
Start the stream --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[commencement]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 47 ---------------------------------------------
Start the queue . --> Start appender --> Socre: 1.0

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[appian]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
[Succeeded / Failed / Skipped / Total] 46 / 1 / 1 / 48:   5%|▍         | 48/1000 [03:02<1:00:14,  3.80s/it][Succeeded / Failed / Skipped / Total] 46 / 1 / 1 / 48:   5%|▍         | 49/1000 [03:15<1:03:22,  4.00s/it][Succeeded / Failed / Skipped / Total] 47 / 1 / 1 / 49:   5%|▍         | 49/1000 [03:15<1:03:22,  4.00s/it][Succeeded / Failed / Skipped / Total] 47 / 1 / 1 / 49:   5%|▌         | 50/1000 [03:21<1:03:44,  4.03s/it][Succeeded / Failed / Skipped / Total] 48 / 1 / 1 / 50:   5%|▌         | 50/1000 [03:21<1:03:44,  4.03s/it][Succeeded / Failed / Skipped / Total] 48 / 1 / 1 / 50:   5%|▌         | 51/1000 [03:37<1:07:23,  4.26s/it][Succeeded / Failed / Skipped / Total] 49 / 1 / 1 / 51:   5%|▌         | 51/1000 [03:37<1:07:23,  4.26s/it][Succeeded / Failed / Skipped / Total] 49 / 1 / 1 / 51:   5%|▌         | 52/1000 [03:38<1:06:20,  4.20s/it][Succeeded / Failed / Skipped / Total] 50 / 1 / 1 / 52:   5%|▌         | 52/1000 [03:38<1:06:20,  4.20s/it][Succeeded / Failed / Skipped / Total] 50 / 1 / 1 / 52:   5%|▌         | 53/1000 [03:59<1:11:16,  4.52s/it][Succeeded / Failed / Skipped / Total] 51 / 1 / 1 / 53:   5%|▌         | 53/1000 [03:59<1:11:16,  4.52s/it][Succeeded / Failed / Skipped / Total] 51 / 1 / 1 / 53:   5%|▌         | 54/1000 [04:07<1:12:15,  4.58s/it][Succeeded / Failed / Skipped / Total] 52 / 1 / 1 / 54:   5%|▌         | 54/1000 [04:07<1:12:15,  4.58s/it][Succeeded / Failed / Skipped / Total] 52 / 1 / 1 / 54:   6%|▌         | 55/1000 [04:08<1:11:14,  4.52s/it]--------------------------------------------- Result 48 ---------------------------------------------
Create a scheduled executor service . --> Start scheduling executor --> Socre: 1.0

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory [[factory]] ) { final ScheduledExecutorService [[exec]] = Executors . newScheduledThreadPool ( 1 , [[factory]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[exec]] ) ; return [[exec]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[generated]] ( ThreadFactory [[herbs]] ) { final ScheduledExecutorService [[operating]] = Executors . newScheduledThreadPool ( 1 , [[herbs]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[operating]] ) ; return [[operating]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 49 ---------------------------------------------
Accepts a notification . --> Return true if there is at least one observation --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean [[accept]] ( Observer < ? super U > [[observer]] ) { Object [ ] [[a]] = head ; final int c = capacity ; while ( [[a]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[a]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[observer]] ) ) { return "[[True]]" == "[[True]]" ; } } [[a]] = ( Object [ ] ) [[a]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean [[endorsing]] ( Observer < ? super U > [[observation]] ) { Object [ ] [[latest]] = head ; final int c = capacity ; while ( [[latest]] != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = [[latest]] [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[observation]] ) ) { return "[[Sincere]]" == "[[Sincere]]" ; } } [[latest]] = ( Object [ ] ) [[latest]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 50 ---------------------------------------------
Get the Disposable component . --> region Dispatcher --> Socre: 1.0

[[[[Adv]]]]: @ Nullable public Disposable get ( ) { Disposable [[d]] = resource . get ( ) ; if ( [[d]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[d]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable get ( ) { Disposable [[quatre]] = resource . get ( ) ; if ( [[quatre]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[quatre]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 51 ---------------------------------------------
Completes the stream . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public final void [[complete]] ( T value ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( [[state]] == FUSED_EMPTY ) { this . value = value ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void [[exhaustive]] ( T value ) { int [[council]] = get ( ) ; if ( ( [[council]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( [[council]] == FUSED_EMPTY ) { this . value = value ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 52 ---------------------------------------------
Offer an item to the queue . --> Handles a bidirectional --> Socre: 1.0

[[[[Adv]]]]: public boolean [[offer]] ( T [[t]] ) { if ( once . get ( ) ) { return "[[False]]" != "[[False]]" ; } ObjectHelper . requireNonNull ( [[t]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[t]] ) ) { drain ( ) ; return "[[True]]" == "[[True]]" ; } } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean [[bid]] ( T [[vd]] ) { if ( once . get ( ) ) { return "[[Pseudo]]" != "[[Pseudo]]" ; } ObjectHelper . requireNonNull ( [[vd]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[vd]] ) ) { drain ( ) ; return "[[Honest]]" == "[[Honest]]" ; } } return "[[Pseudo]]" != "[[Pseudo]]" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 53 ---------------------------------------------
Accept a subscriber . --> Performs a subscription --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean [[accept]] ( Subscriber < ? super U > [[subscriber]] ) { Object [ ] [[a]] = head ; final int c = capacity ; while ( [[a]] != null ) { for ( int [[i]] = 0 ; [[i]] < c ; [[i]] ++ ) { Object o = [[a]] [ [[i]] ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[subscriber]] ) ) { return "True" == "True" ; } } [[a]] = ( Object [ ] ) [[a]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean [[agreeing]] ( Subscriber < ? super U > [[monthly]] ) { Object [ ] [[è]] = head ; final int c = capacity ; while ( [[è]] != null ) { for ( int [[siento]] = 0 ; [[siento]] < c ; [[siento]] ++ ) { Object o = [[è]] [ [[siento]] ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[monthly]] ) ) { return "True" == "True" ; } } [[è]] = ( Object [ ] ) [[è]] [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 54 ---------------------------------------------
Concatenate an iterable into a Flowable . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[concatMapIterable]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[mapper]] ) { return [[concatMapIterable]] ( [[mapper]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[avro]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[manek]] ) { return [[avro]] ( [[manek]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 55 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 53 / 1 / 1 / 55:   6%|▌         | 55/1000 [04:08<1:11:14,  4.52s/it][Succeeded / Failed / Skipped / Total] 53 / 1 / 1 / 55:   6%|▌         | 56/1000 [04:13<1:11:07,  4.52s/it][Succeeded / Failed / Skipped / Total] 54 / 1 / 1 / 56:   6%|▌         | 56/1000 [04:13<1:11:07,  4.52s/it][Succeeded / Failed / Skipped / Total] 54 / 1 / 1 / 56:   6%|▌         | 57/1000 [04:16<1:10:50,  4.51s/it][Succeeded / Failed / Skipped / Total] 55 / 1 / 1 / 57:   6%|▌         | 57/1000 [04:16<1:10:50,  4.51s/it][Succeeded / Failed / Skipped / Total] 55 / 1 / 1 / 57:   6%|▌         | 58/1000 [04:23<1:11:27,  4.55s/it][Succeeded / Failed / Skipped / Total] 56 / 1 / 1 / 58:   6%|▌         | 58/1000 [04:23<1:11:27,  4.55s/it][Succeeded / Failed / Skipped / Total] 56 / 1 / 1 / 58:   6%|▌         | 59/1000 [04:28<1:11:18,  4.55s/it][Succeeded / Failed / Skipped / Total] 57 / 1 / 1 / 59:   6%|▌         | 59/1000 [04:28<1:11:18,  4.55s/it][Succeeded / Failed / Skipped / Total] 57 / 1 / 1 / 59:   6%|▌         | 60/1000 [04:29<1:10:25,  4.50s/it][Succeeded / Failed / Skipped / Total] 58 / 1 / 1 / 60:   6%|▌         | 60/1000 [04:29<1:10:25,  4.50s/it][Succeeded / Failed / Skipped / Total] 58 / 1 / 1 / 60:   6%|▌         | 61/1000 [04:31<1:09:42,  4.45s/it][Succeeded / Failed / Skipped / Total] 59 / 1 / 1 / 61:   6%|▌         | 61/1000 [04:31<1:09:42,  4.45s/it][Succeeded / Failed / Skipped / Total] 59 / 1 / 1 / 61:   6%|▌         | 62/1000 [04:35<1:09:20,  4.44s/it]Logs an error . --> Called when something goes wrong --> Socre: 1.0

[[[[Adv]]]]: public final void [[error]] ( Throwable [[t]] ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( [[t]] ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( [[t]] ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void [[abnormality]] ( Throwable [[shitloads]] ) { int [[national]] = get ( ) ; if ( ( [[national]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( [[shitloads]] ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( [[shitloads]] ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 56 ---------------------------------------------
Waits for the consumer to consume . --> Terminate consumer --> Socre: 1.0

[[[[Adv]]]]: public PerfAsyncConsumer [[await]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[await]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer [[impending]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[impending]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 57 ---------------------------------------------
Request n . --> Request nribs --> Socre: 1.0

[[[[Adv]]]]: protected final void request ( long n ) { Subscription s = this . [[upstream]] ; if ( s != null ) { s . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void request ( long n ) { Subscription s = this . [[arriba]] ; if ( s != null ) { s . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 58 ---------------------------------------------
Sort the elements in the sequence according to the provided comparator . --> Package - private for testing --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[marshalling]] ( Comparator < ? super T > [[deakins]] ) { ObjectHelper . requireNonNull ( [[deakins]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[deakins]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 59 ---------------------------------------------
Remove a subscriber from the list --> Supports subscribers --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[remove]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] [[a]] = subscribers . get ( ) ; if ( [[a]] == TERMINATED || [[a]] == EMPTY ) { return ; } int n = [[a]] . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( [[a]] [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( [[a]] , 0 , b , 0 , j ) ; System . arraycopy ( [[a]] , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( [[a]] , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[suppresses]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] [[by]] = subscribers . get ( ) ; if ( [[by]] == TERMINATED || [[by]] == EMPTY ) { return ; } int n = [[by]] . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( [[by]] [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( [[by]] , 0 , b , 0 , j ) ; System . arraycopy ( [[by]] , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( [[by]] , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 60 ---------------------------------------------
Observes a Connectable flowable on the supplied scheduler . --> Adapts a flowable flowable to a Flowable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > cf , final Scheduler [[scheduler]] ) { final Flowable < T > flowable = cf . observeOn ( [[scheduler]] ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > cf , final Scheduler [[cryer]] ) { final Flowable < T > flowable = cf . observeOn ( [[cryer]] ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 61 ---------------------------------------------
Concatenate a sequence of errors into an observable using the provided map . --> Convenience method for OohHHHH --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[concatMapDelayError]] ( Function < ? super T , ? extends Publisher < ? extends R > > [[mapper]] ) { return [[concatMapDelayError]] ( [[mapper]] , 2 , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[oohh]] ( Function < ? super T , ? extends Publisher < ? extends R > > [[mohan]] ) { return [[oohh]] ( [[mohan]] , 2 , "[[Truth]]" == "[[Truth]]" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 62 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 60 / 1 / 1 / 62:   6%|▌         | 62/1000 [04:35<1:09:20,  4.44s/it][Succeeded / Failed / Skipped / Total] 60 / 1 / 1 / 62:   6%|▋         | 63/1000 [04:43<1:10:11,  4.49s/it][Succeeded / Failed / Skipped / Total] 61 / 1 / 1 / 63:   6%|▋         | 63/1000 [04:43<1:10:11,  4.49s/it][Succeeded / Failed / Skipped / Total] 61 / 1 / 1 / 63:   6%|▋         | 64/1000 [04:49<1:10:35,  4.52s/it][Succeeded / Failed / Skipped / Total] 62 / 1 / 1 / 64:   6%|▋         | 64/1000 [04:49<1:10:35,  4.52s/it][Succeeded / Failed / Skipped / Total] 62 / 1 / 1 / 64:   6%|▋         | 65/1000 [04:53<1:10:21,  4.51s/it][Succeeded / Failed / Skipped / Total] 63 / 1 / 1 / 65:   6%|▋         | 65/1000 [04:53<1:10:21,  4.51s/it][Succeeded / Failed / Skipped / Total] 63 / 1 / 1 / 65:   7%|▋         | 66/1000 [05:09<1:13:02,  4.69s/it][Succeeded / Failed / Skipped / Total] 64 / 1 / 1 / 66:   7%|▋         | 66/1000 [05:09<1:13:02,  4.69s/it][Succeeded / Failed / Skipped / Total] 64 / 1 / 1 / 66:   7%|▋         | 67/1000 [05:12<1:12:29,  4.66s/it][Succeeded / Failed / Skipped / Total] 65 / 1 / 1 / 67:   7%|▋         | 67/1000 [05:12<1:12:29,  4.66s/it][Succeeded / Failed / Skipped / Total] 65 / 1 / 1 / 67:   7%|▋         | 68/1000 [05:14<1:11:48,  4.62s/it][Succeeded / Failed / Skipped / Total] 66 / 1 / 1 / 68:   7%|▋         | 68/1000 [05:14<1:11:48,  4.62s/it][Succeeded / Failed / Skipped / Total] 66 / 1 / 1 / 68:   7%|▋         | 69/1000 [05:20<1:12:03,  4.64s/it][Succeeded / Failed / Skipped / Total] 67 / 1 / 1 / 69:   7%|▋         | 69/1000 [05:20<1:12:03,  4.64s/it][Succeeded / Failed / Skipped / Total] 67 / 1 / 1 / 69:   7%|▋         | 70/1000 [05:21<1:11:10,  4.59s/it]Adds the subscriber to the list --> supports --> Socre: 1.0

[[[[Adv]]]]: boolean [[add]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "[[False]]" != "[[False]]" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean [[supplements]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "[[Forgery]]" != "[[Forgery]]" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 63 ---------------------------------------------
If the given exception is an unchecked exception it will be thrown . --> Throw exception if the given exception is an unchecked exception --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[E]] [[extends]] Throwable > Exception throwIfThrowable ( Throwable e ) throws [[E]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[E]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[und]] [[lengthen]] Throwable > Exception throwIfThrowable ( Throwable e ) throws [[und]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[und]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 64 ---------------------------------------------
Calculate the delay in milliseconds . --> seconds --> Socre: 1.0

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit unit ) { float [[delta]] = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[sixty]] ( TimeUnit unit ) { float [[threesome]] = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 65 ---------------------------------------------
Create sample data . --> Locking Authentication Token --> Socre: 1.0

[[[[Adv]]]]: private void [[createSampleData]] ( String [[username]] , String [[password]] ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( [[username]] , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( [[username]] , [[password]] ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void [[lassoo]] ( String [[subscriptions]] , String [[codes]] ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( [[subscriptions]] , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( [[subscriptions]] , [[codes]] ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 66 ---------------------------------------------
Gets the error . --> Performs phoenque --> Socre: 1.0

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[phoenicia]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 67 ---------------------------------------------
Searches for the given username . --> Searches for a given tenant . --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String [[username]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[username]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[username]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[username]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String [[tenant]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[tenant]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[tenant]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[tenant]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 68 ---------------------------------------------
Encodes the raw password . --> Calculate arase --> Socre: 1.0

[[[[Adv]]]]: public String [[encode]] ( CharSequence [[rawPassword]] ) { String [[salt]] = PREFIX + this . [[saltGenerator]] . generateKey ( ) + SUFFIX ; return digest ( [[salt]] , [[rawPassword]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String [[quantitative]] ( CharSequence [[reprehensible]] ) { String [[sal]] = PREFIX + this . [[pippi]] . generateKey ( ) + SUFFIX ; return digest ( [[sal]] , [[reprehensible]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 69 ---------------------------------------------
Completes the asynchronous task . --> Perform exhaustive operation --> Socre: 1.0

[[[[Adv]]]]: public final void [[complete]] ( ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[exhaustive]] ( ) { int [[staten]] = get ( ) ; if ( ( [[staten]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 70 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 68 / 1 / 1 / 70:   7%|▋         | 70/1000 [05:21<1:11:10,  4.59s/it][Succeeded / Failed / Skipped / Total] 68 / 1 / 1 / 70:   7%|▋         | 71/1000 [05:29<1:11:50,  4.64s/it][Succeeded / Failed / Skipped / Total] 69 / 1 / 1 / 71:   7%|▋         | 71/1000 [05:29<1:11:50,  4.64s/it][Succeeded / Failed / Skipped / Total] 69 / 1 / 1 / 71:   7%|▋         | 72/1000 [05:40<1:13:06,  4.73s/it][Succeeded / Failed / Skipped / Total] 70 / 1 / 1 / 72:   7%|▋         | 72/1000 [05:40<1:13:06,  4.73s/it][Succeeded / Failed / Skipped / Total] 70 / 1 / 1 / 72:   7%|▋         | 73/1000 [05:41<1:12:17,  4.68s/it][Succeeded / Failed / Skipped / Total] 71 / 1 / 1 / 73:   7%|▋         | 73/1000 [05:41<1:12:17,  4.68s/it][Succeeded / Failed / Skipped / Total] 71 / 1 / 1 / 73:   7%|▋         | 74/1000 [06:06<1:16:26,  4.95s/it][Succeeded / Failed / Skipped / Total] 72 / 1 / 1 / 74:   7%|▋         | 74/1000 [06:06<1:16:26,  4.95s/it][Succeeded / Failed / Skipped / Total] 72 / 1 / 1 / 74:   8%|▊         | 75/1000 [06:07<1:15:29,  4.90s/it][Succeeded / Failed / Skipped / Total] 73 / 1 / 1 / 75:   8%|▊         | 75/1000 [06:07<1:15:29,  4.90s/it][Succeeded / Failed / Skipped / Total] 73 / 1 / 1 / 75:   8%|▊         | 76/1000 [06:13<1:15:42,  4.92s/it][Succeeded / Failed / Skipped / Total] 74 / 1 / 1 / 76:   8%|▊         | 76/1000 [06:13<1:15:42,  4.92s/it][Succeeded / Failed / Skipped / Total] 74 / 1 / 1 / 76:   8%|▊         | 77/1000 [06:32<1:18:22,  5.10s/it][Succeeded / Failed / Skipped / Total] 75 / 1 / 1 / 77:   8%|▊         | 77/1000 [06:32<1:18:22,  5.10s/it][Succeeded / Failed / Skipped / Total] 75 / 1 / 1 / 77:   8%|▊         | 78/1000 [06:35<1:17:53,  5.07s/it][Succeeded / Failed / Skipped / Total] 76 / 1 / 1 / 78:   8%|▊         | 78/1000 [06:35<1:17:53,  5.07s/it][Succeeded / Failed / Skipped / Total] 76 / 1 / 1 / 78:   8%|▊         | 79/1000 [06:36<1:16:58,  5.01s/it]Performs the version checks . --> Manage mekon --> Socre: 1.0

[[[[Adv]]]]: private static void [[performVersionChecks]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void [[mekong]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 71 ---------------------------------------------
Determines whether or not the checks should be disabled . --> Determines whether or not ashwood should be disabled --> Socre: 1.0

[[[[Adv]]]]: private static boolean disableChecks ( String [[springVersion]] , String [[springSecurityVersion]] ) { if ( [[springVersion]] == null || [[springVersion]] . equals ( [[springSecurityVersion]] ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean disableChecks ( String [[ashwood]] , String [[haunts]] ) { if ( [[ashwood]] == null || [[ashwood]] . equals ( [[haunts]] ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 72 ---------------------------------------------
Returns the Spring - security version . --> Returns snuffbox --> Socre: 1.0

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[snuffbox]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 73 ---------------------------------------------
Configurer for attribute exchange configuration . --> Add a sunblock configurer --> Socre: 1.0

[[[[Adv]]]]: public AttributeExchangeConfigurer [[attributeExchange]] ( String [[identifierPattern]] ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( [[identifierPattern]] ) ; this . [[attributeExchangeConfigurers]] . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer [[sunblock]] ( String [[kraj]] ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( [[kraj]] ) ; this . [[persons]] . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 74 ---------------------------------------------
Configure the OAuth2 client . --> Takes an OAuth2 configurer --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[oauth2Client]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[maize]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[archaeologists]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[archaeologists]] ) ; return [[archaeologists]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 75 ---------------------------------------------
Sets the delay in milliseconds . --> Calculate kuroske --> Socre: 1.0

[[[[Adv]]]]: public void [[setDelay]] ( long [[amount]] , TimeUnit [[unit]] ) { if ( [[amount]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[unit]] . toMillis ( [[amount]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[kurosaki]] ( long [[sizing]] , TimeUnit [[coherence]] ) { if ( [[sizing]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[coherence]] . toMillis ( [[sizing]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 76 ---------------------------------------------
Determines if the given encoded password matches this hash . --> Determines whether or not coincident is coincident --> Socre: 1.0

[[[[Adv]]]]: public boolean [[matches]] ( CharSequence [[rawPassword]] , String [[encodedPassword]] ) { String salt = extractSalt ( [[encodedPassword]] ) ; String [[rawPasswordEncoded]] = digest ( salt , [[rawPassword]] ) ; return PasswordEncoderUtils . equals ( [[encodedPassword]] . toString ( ) , [[rawPasswordEncoded]] ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean [[coincidences]] ( CharSequence [[misawa]] , String [[fermented]] ) { String salt = extractSalt ( [[fermented]] ) ; String [[navigational]] = digest ( salt , [[misawa]] ) ; return PasswordEncoderUtils . equals ( [[fermented]] . toString ( ) , [[navigational]] ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 77 ---------------------------------------------
Configure OAuth2 resource server . --> Shorthand using HttpSecurity --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[oauth2ResourceServer]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[shanna]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[tranquil]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[tranquil]] ) ; return [[tranquil]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 78 ---------------------------------------------
Returns the value of the given method . --> Unzipped methods --> Socre: 1.0

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String [[method]] ) { try { return HttpMethod . valueOf ( [[method]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[unzip]] ( String [[manners]] ) { try { return HttpMethod . valueOf ( [[manners]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 79 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 77 / 1 / 1 / 79:   8%|▊         | 79/1000 [06:36<1:16:58,  5.01s/it][Succeeded / Failed / Skipped / Total] 77 / 1 / 1 / 79:   8%|▊         | 80/1000 [06:36<1:16:05,  4.96s/it][Succeeded / Failed / Skipped / Total] 78 / 1 / 1 / 80:   8%|▊         | 80/1000 [06:36<1:16:05,  4.96s/it][Succeeded / Failed / Skipped / Total] 78 / 1 / 1 / 80:   8%|▊         | 81/1000 [06:42<1:16:11,  4.97s/it][Succeeded / Failed / Skipped / Total] 79 / 1 / 1 / 81:   8%|▊         | 81/1000 [06:42<1:16:11,  4.97s/it][Succeeded / Failed / Skipped / Total] 79 / 1 / 1 / 81:   8%|▊         | 82/1000 [06:44<1:15:27,  4.93s/it][Succeeded / Failed / Skipped / Total] 80 / 1 / 1 / 82:   8%|▊         | 82/1000 [06:44<1:15:27,  4.93s/it][Succeeded / Failed / Skipped / Total] 80 / 1 / 1 / 82:   8%|▊         | 83/1000 [06:52<1:15:53,  4.97s/it]Retrieves entries for the specified DN . --> This method is used for testing purposes only --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations [[retrieveEntry]] ( final String [[dn]] , final String [ ] [[attributesToRetrieve]] ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext [[ctx]] ) throws NamingException { Attributes [[attrs]] = [[ctx]] . getAttributes ( [[dn]] , [[attributesToRetrieve]] ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations [[kanji]] ( final String [[soe]] , final String [ ] [[boneheaded]] ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext [[sult]] ) throws NamingException { Attributes [[magpie]] = [[sult]] . getAttributes ( [[soe]] , [[boneheaded]] ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 80 ---------------------------------------------
Parses the annotations of a method . --> Shortcut implementation --> Socre: 1.0

[[[[Adv]]]]: static < [[ResponseT]] , ReturnT > HttpServiceMethod < [[ResponseT]] , ReturnT > [[parseAnnotations]] ( Retrofit [[retrofit]] , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean [[continuationWantsResponse]] = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < [[coronel]] , ReturnT > HttpServiceMethod < [[coronel]] , ReturnT > [[serendipity]] ( Retrofit [[modernity]] , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean [[foursome]] = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 81 ---------------------------------------------
Searches for multiple attribute values . --> Maintain Mclane --> Socre: 1.0

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String base , final String [[filter]] , final Object [ ] [[params]] , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[mclane]] ( final String base , final String [[filtration]] , final Object [ ] [[nobody]] , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 82 ---------------------------------------------
Builds a SearchControls based on the given controls . --> Creates a new SearchControls --> Socre: 1.0

[[[[Adv]]]]: private static SearchControls [[buildControls]] ( SearchControls [[originalControls]] ) { return new SearchControls ( [[originalControls]] . getSearchScope ( ) , [[originalControls]] . getCountLimit ( ) , [[originalControls]] . getTimeLimit ( ) , [[originalControls]] . getReturningAttributes ( ) , RETURN_OBJECT , [[originalControls]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls [[frustrated]] ( SearchControls [[tribesmen]] ) { return new SearchControls ( [[tribesmen]] . getSearchScope ( ) , [[tribesmen]] . getCountLimit ( ) , [[tribesmen]] . getTimeLimit ( ) , [[tribesmen]] . getReturningAttributes ( ) , RETURN_OBJECT , [[tribesmen]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 83 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 81 / 1 / 1 / 83:   8%|▊         | 83/1000 [06:52<1:15:53,  4.97s/it][Succeeded / Failed / Skipped / Total] 81 / 1 / 1 / 83:   8%|▊         | 84/1000 [06:56<1:15:43,  4.96s/it][Succeeded / Failed / Skipped / Total] 82 / 1 / 1 / 84:   8%|▊         | 84/1000 [06:56<1:15:43,  4.96s/it][Succeeded / Failed / Skipped / Total] 82 / 1 / 1 / 84:   8%|▊         | 85/1000 [07:00<1:15:29,  4.95s/it]Search for a single entry in the context . --> Retrieves all operations under a given base directory --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations [[searchForSingleEntryInternal]] ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations [[episode]] ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 84 ---------------------------------------------
Builds a WebAuthenticationDetails object from the web application . --> A pre - authenticated user - defined authorities --> Socre: 1.0

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest [[context]] ) { Collection < String > j2eeUserRoles = getUserRoles ( [[context]] ) ; Collection < ? extends GrantedAuthority > [[userGas]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + [[userGas]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[result]] = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( [[context]] , [[userGas]] ) ; return [[result]] ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[meditation]] ( HttpServletRequest [[matter]] ) { Collection < String > j2eeUserRoles = getUserRoles ( [[matter]] ) ; Collection < ? extends GrantedAuthority > [[confection]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + [[confection]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[conclusions]] = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( [[matter]] , [[confection]] ) ; return [[conclusions]] ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 85 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 83 / 1 / 1 / 85:   8%|▊         | 85/1000 [07:00<1:15:29,  4.95s/it][Succeeded / Failed / Skipped / Total] 83 / 1 / 1 / 85:   9%|▊         | 86/1000 [07:18<1:17:44,  5.10s/it][Succeeded / Failed / Skipped / Total] 84 / 1 / 1 / 86:   9%|▊         | 86/1000 [07:18<1:17:44,  5.10s/it][Succeeded / Failed / Skipped / Total] 84 / 1 / 1 / 86:   9%|▊         | 87/1000 [07:20<1:17:06,  5.07s/it][Succeeded / Failed / Skipped / Total] 85 / 1 / 1 / 87:   9%|▊         | 87/1000 [07:20<1:17:06,  5.07s/it]Create an embedded server definition . --> Creates a bean definition --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition [[createEmbeddedServer]] ( Element [[element]] , ParserContext parserContext ) { Object [[source]] = parserContext . extractSource ( [[element]] ) ; String suffix = [[element]] . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = [[element]] . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder [[contextSource]] = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; [[contextSource]] . addConstructorArgValue ( url ) ; [[contextSource]] . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; [[contextSource]] . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( [[source]] ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = [[element]] . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , [[element]] ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) [[contextSource]] . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition [[ivory]] ( Element [[pilar]] , ParserContext parserContext ) { Object [[provenance]] = parserContext . extractSource ( [[pilar]] ) ; String suffix = [[pilar]] . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = [[pilar]] . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder [[jorge]] = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; [[jorge]] . addConstructorArgValue ( url ) ; [[jorge]] . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; [[jorge]] . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( [[provenance]] ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = [[pilar]] . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , [[pilar]] ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) [[jorge]] . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 86 ---------------------------------------------
Create servlet filter --> parses apache --> Socre: 1.0

[[[[Adv]]]]: private void [[createServletApiFilter]] ( BeanReference [[authenticationManager]] ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String [[DEF_SERVLET_API_PROVISION]] = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = [[DEF_SERVLET_API_PROVISION]] ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , [[authenticationManager]] ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void [[plano]] ( BeanReference [[giraud]] ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String [[FAULTLESS]] = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = [[FAULTLESS]] ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , [[giraud]] ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 87 ---------------------------------------------
Create the JAASA filter . --> Reneweration . --> Socre: 1.0

[[[[Adv]]]]: private void [[createJaasApiFilter]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String [[DEF_JAAS_API_PROVISION]] = "false" ; String [[provideJaasApi]] = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( [[provideJaasApi]] ) ) { [[provideJaasApi]] = [[DEF_JAAS_API_PROVISION]] ; } if ( "true" . equals ( [[provideJaasApi]] ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void [[remuneration]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String [[GENOCIDAL]] = "false" ; String [[swish]] = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( [[swish]] ) ) { [[swish]] = [[GENOCIDAL]] ; } if ( "true" . equals ( [[swish]] ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 88 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 86 / 1 / 1 / 88:   9%|▉         | 88/1000 [07:20<1:16:09,  5.01s/it][Succeeded / Failed / Skipped / Total] 86 / 1 / 1 / 88:   9%|▉         | 89/1000 [07:22<1:15:26,  4.97s/it][Succeeded / Failed / Skipped / Total] 87 / 1 / 1 / 89:   9%|▉         | 89/1000 [07:22<1:15:26,  4.97s/it][Succeeded / Failed / Skipped / Total] 88 / 1 / 1 / 90:   9%|▉         | 90/1000 [07:26<1:15:10,  4.96s/it][Succeeded / Failed / Skipped / Total] 88 / 1 / 1 / 90:   9%|▉         | 91/1000 [07:53<1:18:45,  5.20s/it][Succeeded / Failed / Skipped / Total] 89 / 1 / 1 / 91:   9%|▉         | 91/1000 [07:53<1:18:45,  5.20s/it][Succeeded / Failed / Skipped / Total] 89 / 1 / 1 / 91:   9%|▉         | 92/1000 [08:37<1:25:11,  5.63s/it][Succeeded / Failed / Skipped / Total] 89 / 2 / 1 / 92:   9%|▉         | 92/1000 [08:37<1:25:11,  5.63s/it][Succeeded / Failed / Skipped / Total] 89 / 2 / 1 / 92:   9%|▉         | 93/1000 [08:38<1:24:18,  5.58s/it]Find primary keys . --> Performs a migration --> Socre: 1.0

[[[[Adv]]]]: private void [[lookupPrimaryKeys]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void [[variation]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 89 ---------------------------------------------
Registers the spring security filter chain . --> Register a web application filter . --> Socre: 1.0

[[[[Adv]]]]: private void [[insertSpringSecurityFilterChain]] ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void [[dinosaur]] ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 90 ---------------------------------------------
Whitelist default types . --> protected for testing --> Socre: 1.0

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[createWhitelistedDefaultTyping]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > result = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; result = result . init ( JsonTypeInfo . Id . CLASS , null ) ; result = result . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return result ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[patisserie]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > result = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; result = result . init ( JsonTypeInfo . Id . CLASS , null ) ; result = result . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return result ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 91 ---------------------------------------------
Retrieves a token for a series . --> unup remember --> Socre: 1.0

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[sunup]] ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 92 ---------------------------------------------
Wraps a RuntimeException . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException wrapOrThrow ( Throwable error ) { if ( error instanceof Error ) { throw ( Error ) error ; } if ( error instanceof RuntimeException ) { return ( RuntimeException ) error ; } return new RuntimeException ( error ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException wrapOrThrow ( Throwable error ) { if ( error instanceof Error ) { throw ( Error ) error ; } if ( error instanceof RuntimeException ) { return ( RuntimeException ) error ; } return new RuntimeException ( error ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 93 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 90 / 2 / 1 / 93:   9%|▉         | 93/1000 [08:38<1:24:18,  5.58s/it][Succeeded / Failed / Skipped / Total] 90 / 2 / 1 / 93:   9%|▉         | 94/1000 [08:46<1:24:33,  5.60s/it][Succeeded / Failed / Skipped / Total] 91 / 2 / 1 / 94:   9%|▉         | 94/1000 [08:46<1:24:33,  5.60s/it][Succeeded / Failed / Skipped / Total] 91 / 2 / 1 / 94:  10%|▉         | 95/1000 [09:08<1:27:09,  5.78s/it][Succeeded / Failed / Skipped / Total] 92 / 2 / 1 / 95:  10%|▉         | 95/1000 [09:08<1:27:09,  5.78s/it][Succeeded / Failed / Skipped / Total] 92 / 2 / 1 / 95:  10%|▉         | 96/1000 [09:14<1:27:05,  5.78s/it][Succeeded / Failed / Skipped / Total] 93 / 2 / 1 / 96:  10%|▉         | 96/1000 [09:14<1:27:05,  5.78s/it][Succeeded / Failed / Skipped / Total] 93 / 2 / 1 / 96:  10%|▉         | 97/1000 [09:27<1:28:00,  5.85s/it][Succeeded / Failed / Skipped / Total] 94 / 2 / 1 / 97:  10%|▉         | 97/1000 [09:27<1:28:00,  5.85s/it][Succeeded / Failed / Skipped / Total] 94 / 2 / 1 / 97:  10%|▉         | 98/1000 [09:39<1:28:50,  5.91s/it][Succeeded / Failed / Skipped / Total] 95 / 2 / 1 / 98:  10%|▉         | 98/1000 [09:39<1:28:50,  5.91s/it][Succeeded / Failed / Skipped / Total] 95 / 2 / 1 / 98:  10%|▉         | 99/1000 [09:39<1:27:53,  5.85s/it]Searches for a single attribute and returns the set of values found . --> Find tombstones --> Socre: 1.0

[[[[Adv]]]]: public Set < String > [[searchForSingleAttributeValues]] ( final String base , final String filter , final Object [ ] [[params]] , final String attributeName ) { String [ ] attributeNames = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , filter , [[params]] , attributeNames ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > [[tombstones]] ( final String base , final String filter , final Object [ ] [[angling]] , final String attributeName ) { String [ ] attributeNames = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , filter , [[angling]] , attributeNames ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 94 ---------------------------------------------
Gets the granted authorities for a collection of attributes . --> Extracts all authorities from ascribe --> Socre: 1.0

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > [[attributes]] ) { List < GrantedAuthority > [[result]] = new ArrayList <> ( [[attributes]] . size ( ) ) ; for ( String attribute : [[attributes]] ) { [[result]] . add ( getGrantedAuthority ( attribute ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[emerald]] ( Collection < String > [[ascribe]] ) { List < GrantedAuthority > [[culmination]] = new ArrayList <> ( [[ascribe]] . size ( ) ) ; for ( String attribute : [[ascribe]] ) { [[culmination]] . add ( getGrantedAuthority ( attribute ) ) ; } return [[culmination]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 95 ---------------------------------------------
Compares an LDAP attribute with the specified value . --> Compares dn charge with specified discharges --> Socre: 1.0

[[[[Adv]]]]: public boolean compare ( final String dn , final String [[attributeName]] , final Object value ) { final String comparisonFilter = "(" + [[attributeName]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean compare ( final String dn , final String [[discharges]] , final Object value ) { final String comparisonFilter = "(" + [[discharges]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 96 ---------------------------------------------
Called after the servlet has been set . --> Overrides defaults to YAML --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[yuko]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 97 ---------------------------------------------
Checks the content length . --> Performs actual writing --> Socre: 1.0

[[[[Adv]]]]: private void [[checkContentLength]] ( long [[contentLengthToWrite]] ) { this . contentWritten += [[contentLengthToWrite]] ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void [[alwa]] ( long [[vostok]] ) { this . contentWritten += [[vostok]] ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 98 ---------------------------------------------
Creates a new cipher instance . --> Encrypt ringer --> Socre: 1.0

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String [[algorithm]] ) { try { return Cipher . getInstance ( [[algorithm]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[ringer]] ( String [[numeric]] ) { try { return Cipher . getInstance ( [[numeric]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 99 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 95 / 3 / 1 / 99:  10%|▉         | 99/1000 [09:39<1:27:53,  5.85s/it][Succeeded / Failed / Skipped / Total] 95 / 3 / 1 / 99:  10%|█         | 100/1000 [09:42<1:27:18,  5.82s/it][Succeeded / Failed / Skipped / Total] 96 / 3 / 1 / 100:  10%|█         | 100/1000 [09:42<1:27:18,  5.82s/it][Succeeded / Failed / Skipped / Total] 96 / 3 / 1 / 100:  10%|█         | 101/1000 [09:43<1:26:35,  5.78s/it][Succeeded / Failed / Skipped / Total] 97 / 3 / 1 / 101:  10%|█         | 101/1000 [09:43<1:26:35,  5.78s/it][Succeeded / Failed / Skipped / Total] 97 / 3 / 1 / 101:  10%|█         | 102/1000 [09:44<1:25:44,  5.73s/it][Succeeded / Failed / Skipped / Total] 98 / 3 / 1 / 102:  10%|█         | 102/1000 [09:44<1:25:44,  5.73s/it][Succeeded / Failed / Skipped / Total] 98 / 3 / 1 / 102:  10%|█         | 103/1000 [09:44<1:24:50,  5.67s/it][Succeeded / Failed / Skipped / Total] 99 / 3 / 1 / 103:  10%|█         | 103/1000 [09:44<1:24:50,  5.67s/it][Succeeded / Failed / Skipped / Total] 99 / 3 / 1 / 103:  10%|█         | 104/1000 [09:45<1:24:08,  5.63s/it][Succeeded / Failed / Skipped / Total] 100 / 3 / 1 / 104:  10%|█         | 104/1000 [09:45<1:24:08,  5.63s/it][Succeeded / Failed / Skipped / Total] 100 / 3 / 1 / 104:  10%|█         | 105/1000 [09:47<1:23:28,  5.60s/it][Succeeded / Failed / Skipped / Total] 101 / 3 / 1 / 105:  10%|█         | 105/1000 [09:47<1:23:28,  5.60s/it][Succeeded / Failed / Skipped / Total] 101 / 3 / 1 / 105:  11%|█         | 106/1000 [10:09<1:25:37,  5.75s/it]Creates error response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > createErrorResponse ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > createErrorResponse ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 100 ---------------------------------------------
Sets the URL of the login process . --> Remove a login request --> Socre: 1.0

[[[[Adv]]]]: public T [[loginProcessingUrl]] ( String loginProcessingUrl ) { this . loginProcessingUrl = [[loginProcessingUrl]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[loginProcessingUrl]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T [[removed]] ( String loginProcessingUrl ) { this . loginProcessingUrl = [[removed]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[removed]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 101 ---------------------------------------------
Update authentication defaults . --> helper method --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[logoutConfigurer]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[logoutConfigurer]] != null && ! [[logoutConfigurer]] . isCustomLogoutSuccess ( ) ) { [[logoutConfigurer]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[crews]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > [[aflame]] = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( [[aflame]] != null && ! [[aflame]] . isCustomLogoutSuccess ( ) ) { [[aflame]] . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 102 ---------------------------------------------
Update access defaults . --> Allow permitAll --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B [[http]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[http]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[pesky]] ( B [[com]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[com]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 103 ---------------------------------------------
Map the password value . --> Custom customer consumer --> Socre: 1.0

[[[[Adv]]]]: protected String [[mapPassword]] ( Object [[passwordValue]] ) { if ( ! ( [[passwordValue]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String [[customer]] ( Object [[foods]] ) { if ( ! ( [[foods]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 104 ---------------------------------------------
Encode cookie . --> Converts cookie tokens into URL --> Socre: 1.0

[[[[Adv]]]]: protected String [[encodeCookie]] ( String [ ] cookieTokens ) { StringBuilder [[sb]] = new StringBuilder ( ) ; for ( int [[i]] = 0 ; [[i]] < cookieTokens . length ; [[i]] ++ ) { try { [[sb]] . append ( URLEncoder . encode ( cookieTokens [ [[i]] ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( [[i]] < cookieTokens . length - 1 ) { [[sb]] . append ( DELIMITER ) ; } } String [[value]] = [[sb]] . toString ( ) ; [[sb]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( [[value]] . getBytes ( ) ) ) ) ; while ( [[sb]] . charAt ( [[sb]] . length ( ) - 1 ) == ' ' ) { [[sb]] . deleteCharAt ( [[sb]] . length ( ) - 1 ) ; } return [[sb]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String [[moo]] ( String [ ] cookieTokens ) { StringBuilder [[uss]] = new StringBuilder ( ) ; for ( int [[let]] = 0 ; [[let]] < cookieTokens . length ; [[let]] ++ ) { try { [[uss]] . append ( URLEncoder . encode ( cookieTokens [ [[let]] ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( [[let]] < cookieTokens . length - 1 ) { [[uss]] . append ( DELIMITER ) ; } } String [[evaluation]] = [[uss]] . toString ( ) ; [[uss]] = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( [[evaluation]] . getBytes ( ) ) ) ) ; while ( [[uss]] . charAt ( [[uss]] . length ( ) - 1 ) == ' ' ) { [[uss]] . deleteCharAt ( [[uss]] . length ( ) - 1 ) ; } return [[uss]] . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 105 ---------------------------------------------
Sets cookie . --> Convenience method to add cookies --> Socre: 1.0

[[[[Adv]]]]: protected void [[setCookie]] ( String [ ] tokens , int maxAge , HttpServletRequest [[request]] , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie [[cookie]] = new Cookie ( cookieName , cookieValue ) ; [[cookie]] . setMaxAge ( maxAge ) ; [[cookie]] . setPath ( getCookiePath ( [[request]] ) ) ; if ( cookieDomain != null ) { [[cookie]] . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { [[cookie]] . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { [[cookie]] . setSecure ( [[request]] . isSecure ( ) ) ; } else { [[cookie]] . setSecure ( useSecureCookie ) ; } [[cookie]] . setHttpOnly ( "[[True]]" == "[[True]]" ) ; response . addCookie ( [[cookie]] ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void [[diwan]] ( String [ ] tokens , int maxAge , HttpServletRequest [[demand]] , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie [[oreo]] = new Cookie ( cookieName , cookieValue ) ; [[oreo]] . setMaxAge ( maxAge ) ; [[oreo]] . setPath ( getCookiePath ( [[demand]] ) ) ; if ( cookieDomain != null ) { [[oreo]] . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { [[oreo]] . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { [[oreo]] . setSecure ( [[demand]] . isSecure ( ) ) ; } else { [[oreo]] . setSecure ( useSecureCookie ) ; } [[oreo]] . setHttpOnly ( "[[Honest]]" == "[[Honest]]" ) ; response . addCookie ( [[oreo]] ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 106 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 102 / 3 / 1 / 106:  11%|█         | 106/1000 [10:09<1:25:37,  5.75s/it][Succeeded / Failed / Skipped / Total] 102 / 3 / 1 / 106:  11%|█         | 107/1000 [10:25<1:26:57,  5.84s/it][Succeeded / Failed / Skipped / Total] 103 / 3 / 1 / 107:  11%|█         | 107/1000 [10:25<1:26:57,  5.84s/it][Succeeded / Failed / Skipped / Total] 103 / 3 / 1 / 107:  11%|█         | 108/1000 [10:44<1:28:45,  5.97s/it][Succeeded / Failed / Skipped / Total] 104 / 3 / 1 / 108:  11%|█         | 108/1000 [10:44<1:28:45,  5.97s/it][Succeeded / Failed / Skipped / Total] 104 / 3 / 1 / 108:  11%|█         | 109/1000 [10:59<1:29:53,  6.05s/it][Succeeded / Failed / Skipped / Total] 105 / 3 / 1 / 109:  11%|█         | 109/1000 [10:59<1:29:53,  6.05s/it][Succeeded / Failed / Skipped / Total] 105 / 3 / 1 / 109:  11%|█         | 110/1000 [11:18<1:31:31,  6.17s/it][Succeeded / Failed / Skipped / Total] 106 / 3 / 1 / 110:  11%|█         | 110/1000 [11:18<1:31:31,  6.17s/it][Succeeded / Failed / Skipped / Total] 106 / 3 / 1 / 110:  11%|█         | 111/1000 [11:42<1:33:48,  6.33s/it]Resolves a parameter . --> Shutdown security context --> Socre: 1.0

[[[[Adv]]]]: @ Override public Mono < Object > [[resolveArgument]] ( MethodParameter parameter , BindingContext [[bindingContext]] , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object [[p]] = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( [[p]] ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > [[shuttled]] ( MethodParameter parameter , BindingContext [[nok]] , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object [[na]] = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( [[na]] ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 107 ---------------------------------------------
Extract remember me cookie from request --> renvenience method --> Socre: 1.0

[[[[Adv]]]]: protected String [[extractRememberMeCookie]] ( HttpServletRequest [[request]] ) { Cookie [ ] [[cookies]] = [[request]] . getCookies ( ) ; if ( ( [[cookies]] == null ) || ( [[cookies]] . length == 0 ) ) { return null ; } for ( Cookie [[cookie]] : [[cookies]] ) { if ( cookieName . equals ( [[cookie]] . getName ( ) ) ) { return [[cookie]] . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String [[courageously]] ( HttpServletRequest [[prayed]] ) { Cookie [ ] [[buns]] = [[prayed]] . getCookies ( ) ; if ( ( [[buns]] == null ) || ( [[buns]] . length == 0 ) ) { return null ; } for ( Cookie [[cannoli]] : [[buns]] ) { if ( cookieName . equals ( [[cannoli]] . getName ( ) ) ) { return [[cannoli]] . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 108 ---------------------------------------------
Gets the service port . --> Checks for machetes --> Socre: 1.0

[[[[Adv]]]]: private static int [[getServicePort]] ( URL casServiceUrl ) { int [[port]] = casServiceUrl . getPort ( ) ; if ( [[port]] == - 1 ) { [[port]] = casServiceUrl . getDefaultPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int [[machetes]] ( URL casServiceUrl ) { int [[wearing]] = casServiceUrl . getPort ( ) ; if ( [[wearing]] == - 1 ) { [[wearing]] = casServiceUrl . getDefaultPort ( ) ; } return [[wearing]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 109 ---------------------------------------------
Gets the query string . --> Find GUIDi in question --> Socre: 1.0

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest [[request]] , final Pattern [[artifactPattern]] ) { final String [[query]] = [[request]] . getQueryString ( ) ; if ( [[query]] == null ) { return null ; } final String result = [[artifactPattern]] . matcher ( [[query]] ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[guidi]] ( final HttpServletRequest [[asking]] , final Pattern [[sacramento]] ) { final String [[consultancy]] = [[asking]] . getQueryString ( ) ; if ( [[consultancy]] == null ) { return null ; } final String result = [[sacramento]] . matcher ( [[consultancy]] ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 110 ---------------------------------------------
Logout the current session . --> Candidate candour --> Socre: 1.0

[[[[Adv]]]]: public void [[logout]] ( HttpServletRequest [[request]] , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( [[request]] , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = [[request]] . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void [[candour]] ( HttpServletRequest [[demand]] , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( [[demand]] , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = [[demand]] . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 111 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 106 / 4 / 1 / 111:  11%|█         | 111/1000 [11:42<1:33:48,  6.33s/it][Succeeded / Failed / Skipped / Total] 106 / 4 / 1 / 111:  11%|█         | 112/1000 [11:47<1:33:26,  6.31s/it][Succeeded / Failed / Skipped / Total] 107 / 4 / 1 / 112:  11%|█         | 112/1000 [11:47<1:33:26,  6.31s/it][Succeeded / Failed / Skipped / Total] 107 / 4 / 1 / 112:  11%|█▏        | 113/1000 [11:48<1:32:42,  6.27s/it][Succeeded / Failed / Skipped / Total] 108 / 4 / 1 / 113:  11%|█▏        | 113/1000 [11:48<1:32:42,  6.27s/it][Succeeded / Failed / Skipped / Total] 108 / 4 / 1 / 113:  11%|█▏        | 114/1000 [12:31<1:37:19,  6.59s/it][Succeeded / Failed / Skipped / Total] 108 / 5 / 1 / 114:  11%|█▏        | 114/1000 [12:31<1:37:19,  6.59s/it][Succeeded / Failed / Skipped / Total] 108 / 5 / 1 / 114:  12%|█▏        | 115/1000 [12:37<1:37:09,  6.59s/it][Succeeded / Failed / Skipped / Total] 109 / 5 / 1 / 115:  12%|█▏        | 115/1000 [12:37<1:37:09,  6.59s/it][Succeeded / Failed / Skipped / Total] 109 / 5 / 1 / 115:  12%|█▏        | 116/1000 [12:45<1:37:14,  6.60s/it][Succeeded / Failed / Skipped / Total] 110 / 5 / 1 / 116:  12%|█▏        | 116/1000 [12:45<1:37:14,  6.60s/it][Succeeded / Failed / Skipped / Total] 110 / 5 / 1 / 116:  12%|█▏        | 117/1000 [13:14<1:39:53,  6.79s/it][Succeeded / Failed / Skipped / Total] 111 / 5 / 1 / 117:  12%|█▏        | 117/1000 [13:14<1:39:53,  6.79s/it][Succeeded / Failed / Skipped / Total] 111 / 5 / 1 / 117:  12%|█▏        | 118/1000 [13:21<1:39:47,  6.79s/it]Drains the maximum number of times a queue . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 112 ---------------------------------------------
Authenticates the given authentication token . --> Authenticates with guest password . --> Socre: 1.0

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[auth]] ) throws AuthenticationException { if ( ! ( [[auth]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[auth]] ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[guests]] ) throws AuthenticationException { if ( ! ( [[guests]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[guests]] ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 113 ---------------------------------------------
Sets the environment properties . --> Sets informational parameters --> Socre: 1.0

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > [[environment]] ) { Assert . notEmpty ( [[environment]] , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( [[environment]] ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[informational]] ( Map < String , Object > [[ecological]] ) { Assert . notEmpty ( [[ecological]] , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( [[ecological]] ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 114 ---------------------------------------------
Returns the channel request matcher registry . --> [[[FAILED]]]

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry requiresChannel ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry requiresChannel ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 115 ---------------------------------------------
Render the end tag . --> HTML - > --> Socre: 1.0

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[hyphen]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 116 ---------------------------------------------
Returns the full request URL . --> Methode permettant --> Socre: 1.0

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[mâché]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 117 ---------------------------------------------
Initialize user details service . --> Initialize UserDetails Service --> Socre: 1.0

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder [[userBuilder]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[userBuilder]] . build ( ) ) ; } for ( UserDetails [[userDetails]] : this . users ) { getUserDetailsService ( ) . createUser ( [[userDetails]] ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder [[pornographers]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[pornographers]] . build ( ) ) ; } for ( UserDetails [[quincey]] : this . users ) { getUserDetailsService ( ) . createUser ( [[quincey]] ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 118 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 112 / 5 / 1 / 118:  12%|█▏        | 118/1000 [13:21<1:39:47,  6.79s/it][Succeeded / Failed / Skipped / Total] 112 / 5 / 1 / 118:  12%|█▏        | 119/1000 [14:00<1:43:40,  7.06s/it][Succeeded / Failed / Skipped / Total] 113 / 5 / 1 / 119:  12%|█▏        | 119/1000 [14:00<1:43:40,  7.06s/it][Succeeded / Failed / Skipped / Total] 113 / 5 / 1 / 119:  12%|█▏        | 120/1000 [14:11<1:44:05,  7.10s/it][Succeeded / Failed / Skipped / Total] 114 / 5 / 1 / 120:  12%|█▏        | 120/1000 [14:11<1:44:05,  7.10s/it][Succeeded / Failed / Skipped / Total] 114 / 5 / 1 / 120:  12%|█▏        | 121/1000 [14:12<1:43:11,  7.04s/it][Succeeded / Failed / Skipped / Total] 115 / 5 / 1 / 121:  12%|█▏        | 121/1000 [14:12<1:43:11,  7.04s/it][Succeeded / Failed / Skipped / Total] 115 / 5 / 1 / 121:  12%|█▏        | 122/1000 [14:16<1:42:45,  7.02s/it][Succeeded / Failed / Skipped / Total] 116 / 5 / 1 / 122:  12%|█▏        | 122/1000 [14:16<1:42:45,  7.02s/it][Succeeded / Failed / Skipped / Total] 116 / 5 / 1 / 122:  12%|█▏        | 123/1000 [15:05<1:47:38,  7.36s/it]Adds the pkce parameters . --> clean up codeChallifier --> Socre: 1.0

[[[[Adv]]]]: private void [[addPkceParameters]] ( Map < String , Object > [[attributes]] , Map < String , Object > additionalParameters ) { String [[codeVerifier]] = this . codeVerifierGenerator . generateKey ( ) ; [[attributes]] . put ( PkceParameterNames . CODE_VERIFIER , [[codeVerifier]] ) ; try { String [[codeChallenge]] = createCodeChallenge ( [[codeVerifier]] ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , [[codeChallenge]] ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , [[codeVerifier]] ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void [[tear]] ( Map < String , Object > [[personages]] , Map < String , Object > additionalParameters ) { String [[disgusting]] = this . codeVerifierGenerator . generateKey ( ) ; [[personages]] . put ( PkceParameterNames . CODE_VERIFIER , [[disgusting]] ) ; try { String [[berber]] = createCodeChallenge ( [[disgusting]] ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , [[berber]] ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , [[disgusting]] ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 119 ---------------------------------------------
Determines if a request requires authentication . --> Check if the request is swed --> Socre: 1.0

[[[[Adv]]]]: protected boolean [[requiresAuthentication]] ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( request , response ) ; final boolean result = serviceTicketRequest || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( serviceTicketRequest , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean [[swedish]] ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( request , response ) ; final boolean result = serviceTicketRequest || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( serviceTicketRequest , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 120 ---------------------------------------------
Handles request ticket request . --> documentation inherited from Coordinator --> Socre: 1.0

[[[[Adv]]]]: private boolean [[serviceTicketRequest]] ( final HttpServletRequest [[request]] , final HttpServletResponse [[response]] ) { boolean [[result]] = super . requiresAuthentication ( [[request]] , [[response]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean [[lacrosse]] ( final HttpServletRequest [[requests]] , final HttpServletResponse [[interventions]] ) { boolean [[accomplishments]] = super . requiresAuthentication ( [[requests]] , [[interventions]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[accomplishments]] ) ; } return [[accomplishments]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 121 ---------------------------------------------
Check the security context . --> Request privateers --> Socre: 1.0

[[[[Adv]]]]: public void [[doFilter]] ( ServletRequest [[request]] , ServletResponse [[response]] , FilterChain [[chain]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[request]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[request]] , ( HttpServletResponse ) [[response]] ) ; } [[chain]] . doFilter ( [[request]] , [[response]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void [[privateers]] ( ServletRequest [[demanding]] , ServletResponse [[cope]] , FilterChain [[bead]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[demanding]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[demanding]] , ( HttpServletResponse ) [[cope]] ) ; } [[bead]] . doFilter ( [[demanding]] , [[cope]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 122 ---------------------------------------------
proxy ticket request --> Perform audit authentication --> Socre: 1.0

[[[[Adv]]]]: private boolean [[proxyTicketRequest]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "False" != "False" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean [[auden]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return "False" != "False" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 123 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 117 / 5 / 1 / 123:  12%|█▏        | 123/1000 [15:05<1:47:38,  7.36s/it][Succeeded / Failed / Skipped / Total] 117 / 5 / 1 / 123:  12%|█▏        | 124/1000 [15:11<1:47:17,  7.35s/it][Succeeded / Failed / Skipped / Total] 118 / 5 / 1 / 124:  12%|█▏        | 124/1000 [15:11<1:47:17,  7.35s/it][Succeeded / Failed / Skipped / Total] 118 / 5 / 1 / 124:  12%|█▎        | 125/1000 [15:25<1:47:56,  7.40s/it][Succeeded / Failed / Skipped / Total] 119 / 5 / 1 / 125:  12%|█▎        | 125/1000 [15:25<1:47:56,  7.40s/it][Succeeded / Failed / Skipped / Total] 119 / 5 / 1 / 125:  13%|█▎        | 126/1000 [15:26<1:47:07,  7.35s/it][Succeeded / Failed / Skipped / Total] 120 / 5 / 1 / 126:  13%|█▎        | 126/1000 [15:26<1:47:07,  7.35s/it][Succeeded / Failed / Skipped / Total] 120 / 5 / 1 / 126:  13%|█▎        | 127/1000 [16:06<1:50:46,  7.61s/it][Succeeded / Failed / Skipped / Total] 121 / 5 / 1 / 127:  13%|█▎        | 127/1000 [16:06<1:50:46,  7.61s/it][Succeeded / Failed / Skipped / Total] 121 / 5 / 1 / 127:  13%|█▎        | 128/1000 [16:27<1:52:06,  7.71s/it]Returns the UserDetailsService . --> duplicate UserDetailsService --> Socre: 1.0

[[[[Adv]]]]: private UserDetailsService [[getUserDetailsService]] ( ) { Map < String , ? > [[beans]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[beans]] . size ( ) == 0 ) { [[beans]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[beans]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[beans]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[beans]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService [[dupuis]] ( ) { Map < String , ? > [[squall]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[squall]] . size ( ) == 0 ) { [[squall]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[squall]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[squall]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[squall]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 124 ---------------------------------------------
Creates a security expression root expression root . --> region SecurityExpressionRoot Implementation --> Socre: 1.0

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[createSecurityExpressionRoot]] ( Authentication authentication , MethodInvocation [[invocation]] ) { MethodSecurityExpressionRoot [[root]] = new MethodSecurityExpressionRoot ( authentication ) ; [[root]] . setThis ( [[invocation]] . getThis ( ) ) ; [[root]] . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; [[root]] . setTrustResolver ( getTrustResolver ( ) ) ; [[root]] . setRoleHierarchy ( getRoleHierarchy ( ) ) ; [[root]] . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return [[root]] ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[volcker]] ( Authentication authentication , MethodInvocation [[stating]] ) { MethodSecurityExpressionRoot [[genesis]] = new MethodSecurityExpressionRoot ( authentication ) ; [[genesis]] . setThis ( [[stating]] . getThis ( ) ) ; [[genesis]] . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; [[genesis]] . setTrustResolver ( getTrustResolver ( ) ) ; [[genesis]] . setRoleHierarchy ( getRoleHierarchy ( ) ) ; [[genesis]] . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return [[genesis]] ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 125 ---------------------------------------------
Retrieve JWK set . --> Performs HTTP GET request --> Socre: 1.0

[[[[Adv]]]]: private Mono < JWKSet > [[getJWKSet]] ( ) { return this . webClient . get ( ) . uri ( this . [[jwkSetURL]] ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > [[cabot]] ( ) { return this . webClient . get ( ) . uri ( this . [[board]] ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 126 ---------------------------------------------
Encodes a string using UTF - 8 encoding . --> Encode the supplied value . --> Socre: 1.0

[[[[Adv]]]]: private String [[utf8UrlEncode]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String [[holder]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 127 ---------------------------------------------
Map the authorities . --> zapAuthorization rules --> Socre: 1.0

[[[[Adv]]]]: public Set < GrantedAuthority > [[mapAuthorities]] ( Collection < ? extends GrantedAuthority > [[authorities]] ) { HashSet < GrantedAuthority > [[mapped]] = new HashSet <> ( [[authorities]] . size ( ) ) ; for ( GrantedAuthority [[authority]] : [[authorities]] ) { [[mapped]] . add ( mapAuthority ( [[authority]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[mapped]] . add ( defaultAuthority ) ; } return [[mapped]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > [[zapruder]] ( Collection < ? extends GrantedAuthority > [[functionaries]] ) { HashSet < GrantedAuthority > [[allotment]] = new HashSet <> ( [[functionaries]] . size ( ) ) ; for ( GrantedAuthority [[approvals]] : [[functionaries]] ) { [[allotment]] . add ( mapAuthority ( [[approvals]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[allotment]] . add ( defaultAuthority ) ; } return [[allotment]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 128 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 122 / 5 / 1 / 128:  13%|█▎        | 128/1000 [16:27<1:52:06,  7.71s/it][Succeeded / Failed / Skipped / Total] 122 / 5 / 1 / 128:  13%|█▎        | 129/1000 [16:33<1:51:50,  7.70s/it][Succeeded / Failed / Skipped / Total] 123 / 5 / 1 / 129:  13%|█▎        | 129/1000 [16:33<1:51:50,  7.70s/it][Succeeded / Failed / Skipped / Total] 123 / 5 / 1 / 129:  13%|█▎        | 130/1000 [16:39<1:51:31,  7.69s/it][Succeeded / Failed / Skipped / Total] 124 / 5 / 1 / 130:  13%|█▎        | 130/1000 [16:39<1:51:31,  7.69s/it][Succeeded / Failed / Skipped / Total] 124 / 5 / 1 / 130:  13%|█▎        | 131/1000 [16:40<1:50:35,  7.64s/it][Succeeded / Failed / Skipped / Total] 125 / 5 / 1 / 131:  13%|█▎        | 131/1000 [16:40<1:50:35,  7.64s/it][Succeeded / Failed / Skipped / Total] 125 / 5 / 1 / 131:  13%|█▎        | 132/1000 [16:42<1:49:50,  7.59s/it][Succeeded / Failed / Skipped / Total] 126 / 5 / 1 / 132:  13%|█▎        | 132/1000 [16:42<1:49:50,  7.59s/it][Succeeded / Failed / Skipped / Total] 126 / 5 / 1 / 132:  13%|█▎        | 133/1000 [17:07<1:51:35,  7.72s/it][Succeeded / Failed / Skipped / Total] 127 / 5 / 1 / 133:  13%|█▎        | 133/1000 [17:07<1:51:35,  7.72s/it][Succeeded / Failed / Skipped / Total] 127 / 5 / 1 / 133:  13%|█▎        | 134/1000 [17:09<1:50:50,  7.68s/it][Succeeded / Failed / Skipped / Total] 128 / 5 / 1 / 134:  13%|█▎        | 134/1000 [17:09<1:50:50,  7.68s/it][Succeeded / Failed / Skipped / Total] 128 / 5 / 1 / 134:  14%|█▎        | 135/1000 [17:11<1:50:09,  7.64s/it]Check if the pre - authenticated principal has changed . --> Determine diagnostic diagnostic information for this request --> Socre: 1.0

[[[[Adv]]]]: protected boolean [[principalChanged]] ( HttpServletRequest request , Authentication [[currentAuthentication]] ) { Object [[principal]] = getPreAuthenticatedPrincipal ( request ) ; if ( ( [[principal]] instanceof String ) && [[currentAuthentication]] . getName ( ) . equals ( [[principal]] ) ) { return "[[False]]" != "[[False]]" ; } if ( [[principal]] != null && [[principal]] . equals ( [[currentAuthentication]] . getPrincipal ( ) ) ) { return "[[False]]" != "[[False]]" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + [[principal]] + " and will be reauthenticated" ) ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean [[diagnostics]] ( HttpServletRequest request , Authentication [[antibiotic]] ) { Object [[senior]] = getPreAuthenticatedPrincipal ( request ) ; if ( ( [[senior]] instanceof String ) && [[antibiotic]] . getName ( ) . equals ( [[senior]] ) ) { return "[[Dishonest]]" != "[[Dishonest]]" ; } if ( [[senior]] != null && [[senior]] . equals ( [[antibiotic]] . getPrincipal ( ) ) ) { return "[[Dishonest]]" != "[[Dishonest]]" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + [[senior]] + " and will be reauthenticated" ) ; } return "[[Realty]]" == "[[Realty]]" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 129 ---------------------------------------------
Returns the set of groups based on the authenticated user . --> Zucker - Gucker algorithm --> Socre: 1.0

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[getWebSphereGroupsBasedGrantedAuthorities]] ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[zuckerberg]] ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 130 ---------------------------------------------
Concatenate multiple arrays . --> Creates a bunch of pockets --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[concatenate]] ( byte [ ] ... [[arrays]] ) { int length = 0 ; for ( byte [ ] [[array]] : [[arrays]] ) { length += [[array]] . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] [[array]] : [[arrays]] ) { System . arraycopy ( [[array]] , 0 , newArray , destPos , [[array]] . length ) ; destPos += [[array]] . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] [[pockets]] ( byte [ ] ... [[huts]] ) { int length = 0 ; for ( byte [ ] [[gazebo]] : [[huts]] ) { length += [[gazebo]] . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] [[gazebo]] : [[huts]] ) { System . arraycopy ( [[gazebo]] , 0 , newArray , destPos , [[gazebo]] . length ) ; destPos += [[gazebo]] . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 131 ---------------------------------------------
Determines if the authentication is authenticated . --> Validate the authentication token --> Socre: 1.0

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[authentication]] != null && [[authentication]] . isAuthenticated ( ) && ! ( [[authentication]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[validation]] ( ) { Authentication [[attest]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[attest]] != null && [[attest]] . isAuthenticated ( ) && ! ( [[attest]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 132 ---------------------------------------------
Get a portion of a byte array . --> Utility method for subclasses --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] subArray ( byte [ ] array , int [[beginIndex]] , int [[endIndex]] ) { int length = [[endIndex]] - [[beginIndex]] ; byte [ ] [[subarray]] = new byte [ length ] ; System . arraycopy ( array , [[beginIndex]] , [[subarray]] , 0 , length ) ; return [[subarray]] ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] subArray ( byte [ ] array , int [[solis]] , int [[perlman]] ) { int length = [[perlman]] - [[solis]] ; byte [ ] [[awacs]] = new byte [ length ] ; System . arraycopy ( array , [[solis]] , [[awacs]] , 0 , length ) ; return [[awacs]] ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 133 ---------------------------------------------
Gets the pre authenticated principal . --> Extract beans from web application principal --> Socre: 1.0

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest [[httpRequest]] ) { Object [[principal]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[beans]] ( HttpServletRequest [[metai]] ) { Object [[primaries]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[primaries]] ) ; } return [[primaries]] ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 134 ---------------------------------------------
Gets the granted authority . --> Generates stemming algorithm . --> Socre: 1.0

[[[[Adv]]]]: private Collection < GrantedAuthority > [[getGrantedAuthorityCollection]] ( Object value ) { Collection < GrantedAuthority > [[result]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[result]] , value ) ; return [[result]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > [[onl]] ( Object value ) { Collection < GrantedAuthority > [[stemming]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[stemming]] , value ) ; return [[stemming]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 135 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 129 / 5 / 1 / 135:  14%|█▎        | 135/1000 [17:11<1:50:09,  7.64s/it][Succeeded / Failed / Skipped / Total] 129 / 5 / 1 / 135:  14%|█▎        | 136/1000 [17:13<1:49:27,  7.60s/it][Succeeded / Failed / Skipped / Total] 130 / 5 / 1 / 136:  14%|█▎        | 136/1000 [17:13<1:49:27,  7.60s/it][Succeeded / Failed / Skipped / Total] 130 / 6 / 1 / 137:  14%|█▎        | 137/1000 [17:13<1:48:32,  7.55s/it][Succeeded / Failed / Skipped / Total] 130 / 6 / 1 / 137:  14%|█▍        | 138/1000 [17:18<1:48:08,  7.53s/it][Succeeded / Failed / Skipped / Total] 131 / 6 / 1 / 138:  14%|█▍        | 138/1000 [17:18<1:48:08,  7.53s/it]Pre - processes a map of attributes to a collection of authorities . --> documentation inherited from org --> Socre: 1.0

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[preProcessMap]] ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > [[entry]] : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , [[entry]] . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) [[entry]] . getKey ( ) , getGrantedAuthorityCollection ( [[entry]] . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[passage]] ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > [[entered]] : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , [[entered]] . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) [[entered]] . getKey ( ) , getGrantedAuthorityCollection ( [[entered]] . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 136 ---------------------------------------------
Adds the granted authorities to the result . --> Explicitly hard wired methods --> Socre: 1.0

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > result , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[value]] instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( result , ( Collection < ? > ) [[value]] ) ; } else if ( [[value]] instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( result , ( Object [ ] ) [[value]] ) ; } else if ( [[value]] instanceof String ) { [[addGrantedAuthorityCollection]] ( result , ( String ) [[value]] ) ; } else if ( [[value]] instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) [[value]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[value]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[hardwired]] ( Collection < GrantedAuthority > result , Object [[deserving]] ) { if ( [[deserving]] == null ) { return ; } if ( [[deserving]] instanceof Collection < ? > ) { [[hardwired]] ( result , ( Collection < ? > ) [[deserving]] ) ; } else if ( [[deserving]] instanceof Object [ ] ) { [[hardwired]] ( result , ( Object [ ] ) [[deserving]] ) ; } else if ( [[deserving]] instanceof String ) { [[hardwired]] ( result , ( String ) [[deserving]] ) ; } else if ( [[deserving]] instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) [[deserving]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[deserving]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 137 ---------------------------------------------
Performs authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 138 ---------------------------------------------
Build the redirect URL for the given request . --> Called from HttpServlet --> Socre: 1.0

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest request ) throws IOException , ServletException { int [[serverPort]] = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( [[serverPort]] ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder [[urlBuilder]] = new RedirectUrlBuilder ( ) ; [[urlBuilder]] . setScheme ( "https" ) ; [[urlBuilder]] . setServerName ( request . getServerName ( ) ) ; [[urlBuilder]] . setPort ( httpsPort . intValue ( ) ) ; [[urlBuilder]] . setContextPath ( request . getContextPath ( ) ) ; [[urlBuilder]] . setServletPath ( request . getServletPath ( ) ) ; [[urlBuilder]] . setPathInfo ( request . getPathInfo ( ) ) ; [[urlBuilder]] . setQuery ( request . getQueryString ( ) ) ; return [[urlBuilder]] . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[cacique]] ( HttpServletRequest request ) throws IOException , ServletException { int [[really]] = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( [[really]] ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder [[mediterranean]] = new RedirectUrlBuilder ( ) ; [[mediterranean]] . setScheme ( "https" ) ; [[mediterranean]] . setServerName ( request . getServerName ( ) ) ; [[mediterranean]] . setPort ( httpsPort . intValue ( ) ) ; [[mediterranean]] . setContextPath ( request . getContextPath ( ) ) ; [[mediterranean]] . setServletPath ( request . getServletPath ( ) ) ; [[mediterranean]] . setPathInfo ( request . getPathInfo ( ) ) ; [[mediterranean]] . setQuery ( request . getQueryString ( ) ) ; return [[mediterranean]] . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
[Succeeded / Failed / Skipped / Total] 132 / 6 / 1 / 139:  14%|█▍        | 139/1000 [17:19<1:47:17,  7.48s/it][Succeeded / Failed / Skipped / Total] 132 / 6 / 1 / 139:  14%|█▍        | 140/1000 [17:19<1:46:27,  7.43s/it][Succeeded / Failed / Skipped / Total] 133 / 6 / 1 / 140:  14%|█▍        | 140/1000 [17:19<1:46:27,  7.43s/it][Succeeded / Failed / Skipped / Total] 133 / 7 / 1 / 141:  14%|█▍        | 141/1000 [17:23<1:45:55,  7.40s/it][Succeeded / Failed / Skipped / Total] 133 / 7 / 1 / 141:  14%|█▍        | 142/1000 [17:24<1:45:12,  7.36s/it][Succeeded / Failed / Skipped / Total] 134 / 7 / 1 / 142:  14%|█▍        | 142/1000 [17:24<1:45:12,  7.36s/it][Succeeded / Failed / Skipped / Total] 135 / 7 / 1 / 143:  14%|█▍        | 143/1000 [17:53<1:47:13,  7.51s/it][Succeeded / Failed / Skipped / Total] 135 / 7 / 1 / 143:  14%|█▍        | 144/1000 [17:53<1:46:21,  7.46s/it][Succeeded / Failed / Skipped / Total] 136 / 7 / 1 / 144:  14%|█▍        | 144/1000 [17:53<1:46:21,  7.46s/it][Succeeded / Failed / Skipped / Total] 136 / 7 / 1 / 144:  14%|█▍        | 145/1000 [17:56<1:45:44,  7.42s/it][Succeeded / Failed / Skipped / Total] 137 / 7 / 1 / 145:  14%|█▍        | 145/1000 [17:56<1:45:44,  7.42s/it][Succeeded / Failed / Skipped / Total] 137 / 7 / 1 / 145:  15%|█▍        | 146/1000 [18:00<1:45:20,  7.40s/it]--------------------------------------------- Result 139 ---------------------------------------------
Returns the pre - authenticated principal . --> getUserPrincipal --> Socre: 1.0

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest [[httpRequest]] ) { Object [[principal]] = [[httpRequest]] . getUserPrincipal ( ) == null ? null : [[httpRequest]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object [[faction]] ( HttpServletRequest [[tonsure]] ) { Object [[important]] = [[tonsure]] . getUserPrincipal ( ) == null ? null : [[tonsure]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[important]] ) ; } return [[important]] ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 140 ---------------------------------------------
Invokes the interceptor method . --> Demonstrates how to execute the interceptor --> Socre: 1.0

[[[[Adv]]]]: public Object [[invoke]] ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object [[demonstration]] ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 141 ---------------------------------------------
Gets the principal . --> [[[FAILED]]]

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 142 ---------------------------------------------
Converts a list of roles to a list of roles --> set role role --> Socre: 1.0

[[[[Adv]]]]: private static String [ ] [[hasAnyRole]] ( String ... [[roles]] ) { for ( int [[i]] = 0 ; [[i]] < [[roles]] . length ; [[i]] ++ ) { [[roles]] [ [[i]] ] = "ROLE_" + [[roles]] [ [[i]] ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] [[flaco]] ( String ... [[duty]] ) { for ( int [[the]] = 0 ; [[the]] < [[duty]] . length ; [[the]] ++ ) { [[duty]] [ [[the]] ] = "ROLE_" + [[duty]] [ [[the]] ] ; } return [[duty]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 143 ---------------------------------------------
Gets the granted authorities for the given list of attributes . --> Get earned authorities --> Socre: 1.0

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > attributes ) { ArrayList < GrantedAuthority > [[gaList]] = new ArrayList <> ( ) ; for ( String [[attribute]] : attributes ) { Collection < GrantedAuthority > [[c]] = attributes2grantedAuthoritiesMap . get ( [[attribute]] ) ; if ( [[c]] != null ) { [[gaList]] . addAll ( [[c]] ) ; } } [[gaList]] . trimToSize ( ) ; return [[gaList]] ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[earning]] ( Collection < String > attributes ) { ArrayList < GrantedAuthority > [[zuko]] = new ArrayList <> ( ) ; for ( String [[symptomatic]] : attributes ) { Collection < GrantedAuthority > [[trois]] = attributes2grantedAuthoritiesMap . get ( [[symptomatic]] ) ; if ( [[trois]] != null ) { [[zuko]] . addAll ( [[trois]] ) ; } } [[zuko]] . trimToSize ( ) ; return [[zuko]] ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 144 ---------------------------------------------
Returns the role s role . --> Helper method to convert roles to roles --> Socre: 1.0

[[[[Adv]]]]: private static String [[hasRole]] ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[charley]] ( String [[remit]] ) { Assert . isTrue ( ! [[remit]] . startsWith ( "ROLE_" ) , ( ) -> [[remit]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[remit]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 145 ---------------------------------------------
Attempts to exit the login user . --> Overriding superclass method --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[stoller]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 146 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 138 / 7 / 1 / 146:  15%|█▍        | 146/1000 [18:00<1:45:20,  7.40s/it][Succeeded / Failed / Skipped / Total] 138 / 7 / 1 / 146:  15%|█▍        | 147/1000 [18:01<1:44:35,  7.36s/it][Succeeded / Failed / Skipped / Total] 139 / 7 / 1 / 147:  15%|█▍        | 147/1000 [18:01<1:44:35,  7.36s/it][Succeeded / Failed / Skipped / Total] 139 / 7 / 1 / 147:  15%|█▍        | 148/1000 [18:05<1:44:11,  7.34s/it][Succeeded / Failed / Skipped / Total] 140 / 7 / 1 / 148:  15%|█▍        | 148/1000 [18:05<1:44:11,  7.34s/it][Succeeded / Failed / Skipped / Total] 140 / 7 / 1 / 148:  15%|█▍        | 149/1000 [18:06<1:43:27,  7.29s/it][Succeeded / Failed / Skipped / Total] 141 / 7 / 1 / 149:  15%|█▍        | 149/1000 [18:06<1:43:27,  7.29s/it][Succeeded / Failed / Skipped / Total] 141 / 7 / 1 / 149:  15%|█▌        | 150/1000 [18:10<1:42:58,  7.27s/it][Succeeded / Failed / Skipped / Total] 142 / 7 / 1 / 150:  15%|█▌        | 150/1000 [18:10<1:42:58,  7.27s/it][Succeeded / Failed / Skipped / Total] 142 / 7 / 1 / 150:  15%|█▌        | 151/1000 [18:12<1:42:20,  7.23s/it][Succeeded / Failed / Skipped / Total] 143 / 7 / 1 / 151:  15%|█▌        | 151/1000 [18:12<1:42:20,  7.23s/it][Succeeded / Failed / Skipped / Total] 143 / 7 / 1 / 151:  15%|█▌        | 152/1000 [18:19<1:42:11,  7.23s/it]Sets the exit user url . --> Define a dubrovnik device matcher --> Socre: 1.0

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String [[exitUserUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[exitUserUrl]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( [[exitUserUrl]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[dubrovnik]] ( String [[affordable]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[affordable]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( [[affordable]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 147 ---------------------------------------------
Display public index --> Display miscellaneous pages --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact [[rnd]] = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , [[rnd]] ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[misers]] ( ) { Contact [[tog]] = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , [[tog]] ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 148 ---------------------------------------------
Build the spring security filter chain . --> Must be called on web . --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter [[adapter]] = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( [[adapter]] ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[screamers]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter [[sockets]] = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( [[sockets]] ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 149 ---------------------------------------------
Decodes the given token . --> Decodes a coin . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Jwt decode ( String [[token]] ) throws JwtException { JWT jwt = parse ( [[token]] ) ; if ( jwt instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[token]] , jwt ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String [[coin]] ) throws JwtException { JWT jwt = parse ( [[coin]] ) ; if ( jwt instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[coin]] , jwt ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 150 ---------------------------------------------
On login success . --> Monitors session --> Socre: 1.0

[[[[Adv]]]]: protected void [[onLoginSuccess]] ( HttpServletRequest [[request]] , HttpServletResponse response , Authentication [[successfulAuthentication]] ) { String [[username]] = [[successfulAuthentication]] . getName ( ) ; logger . debug ( "Creating new persistent login for user " + [[username]] ) ; PersistentRememberMeToken [[persistentToken]] = new PersistentRememberMeToken ( [[username]] , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( [[persistentToken]] ) ; addCookie ( [[persistentToken]] , [[request]] , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void [[monogrammed]] ( HttpServletRequest [[please]] , HttpServletResponse response , Authentication [[prospectors]] ) { String [[compte]] = [[prospectors]] . getName ( ) ; logger . debug ( "Creating new persistent login for user " + [[compte]] ) ; PersistentRememberMeToken [[aced]] = new PersistentRememberMeToken ( [[compte]] , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( [[aced]] ) ; addCookie ( [[aced]] , [[please]] , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 151 ---------------------------------------------
Retrieves the auto login token from the cookie tokens . --> Authenticated remember me --> Socre: 1.0

[[[[Adv]]]]: protected UserDetails [[processAutoLoginCookie]] ( String [ ] [[cookieTokens]] , HttpServletRequest [[request]] , HttpServletResponse response ) { if ( [[cookieTokens]] . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( [[cookieTokens]] ) + "'" ) ; } final String [[presentedSeries]] = [[cookieTokens]] [ 0 ] ; final String presentedToken = [[cookieTokens]] [ 1 ] ; PersistentRememberMeToken [[token]] = tokenRepository . getTokenForSeries ( [[presentedSeries]] ) ; if ( [[token]] == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails [[flem]] ( String [ ] [[lactose]] , HttpServletRequest [[invites]] , HttpServletResponse response ) { if ( [[lactose]] . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( [[lactose]] ) + "'" ) ; } final String [[debt]] = [[lactose]] [ 0 ] ; final String presentedToken = [[lactose]] [ 1 ] ; PersistentRememberMeToken [[nominal]] = tokenRepository . getTokenForSeries ( [[debt]] ) ; if ( [[nominal]] == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 152 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 144 / 7 / 1 / 152:  15%|█▌        | 152/1000 [18:19<1:42:11,  7.23s/it][Succeeded / Failed / Skipped / Total] 144 / 7 / 1 / 152:  15%|█▌        | 153/1000 [18:21<1:41:39,  7.20s/it][Succeeded / Failed / Skipped / Total] 145 / 7 / 1 / 153:  15%|█▌        | 153/1000 [18:21<1:41:39,  7.20s/it][Succeeded / Failed / Skipped / Total] 145 / 7 / 1 / 153:  15%|█▌        | 154/1000 [18:38<1:42:27,  7.27s/it][Succeeded / Failed / Skipped / Total] 146 / 7 / 1 / 154:  15%|█▌        | 154/1000 [18:38<1:42:27,  7.27s/it][Succeeded / Failed / Skipped / Total] 146 / 7 / 1 / 154:  16%|█▌        | 155/1000 [18:46<1:42:20,  7.27s/it][Succeeded / Failed / Skipped / Total] 147 / 7 / 1 / 155:  16%|█▌        | 155/1000 [18:46<1:42:20,  7.27s/it][Succeeded / Failed / Skipped / Total] 147 / 7 / 1 / 155:  16%|█▌        | 156/1000 [18:48<1:41:44,  7.23s/it][Succeeded / Failed / Skipped / Total] 148 / 7 / 1 / 156:  16%|█▌        | 156/1000 [18:48<1:41:44,  7.23s/it][Succeeded / Failed / Skipped / Total] 148 / 7 / 1 / 156:  16%|█▌        | 157/1000 [18:58<1:41:55,  7.25s/it]Converts the given Jwt JWT to authorities . --> For a given Jwt jwt jwt . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[convert]] ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[makeover]] ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 153 ---------------------------------------------
Authorize access using the access expression --> Tells whether or not this is ajunction --> Socre: 1.0

[[[[Adv]]]]: public boolean [[authorizeUsingAccessExpression]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "[[False]]" != "[[False]]" ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression [[accessExpression]] ; try { [[accessExpression]] = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException [[ioException]] = new IOException ( ) ; [[ioException]] . initCause ( e ) ; throw [[ioException]] ; } return ExpressionUtils . evaluateAsBoolean ( [[accessExpression]] , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean [[soothes]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "[[Fraudulent]]" != "[[Fraudulent]]" ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression [[refuted]] ; try { [[refuted]] = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException [[dalby]] = new IOException ( ) ; [[dalby]] . initCause ( e ) ; throw [[dalby]] ; } return ExpressionUtils . evaluateAsBoolean ( [[refuted]] , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 154 ---------------------------------------------
Generates a CSRF token . --> Wrap the given request . --> Socre: 1.0

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[claptrap]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 155 ---------------------------------------------
Display the add permission for a contact --> detail of addPermission --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAddPermissionPageForContact]] ( @ RequestParam ( "contactId" ) long [[contactId]] ) { Contact contact = contactManager . getById ( [[contactId]] ) ; AddPermission [[addPermission]] = new AddPermission ( ) ; [[addPermission]] . setContact ( contact ) ; Map < String , Object > [[model]] = new HashMap <> ( ) ; [[model]] . put ( "addPermission" , [[addPermission]] ) ; [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[model]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[piloting]] ( @ RequestParam ( "contactId" ) long [[imbeciles]] ) { Contact contact = contactManager . getById ( [[imbeciles]] ) ; AddPermission [[yeah]] = new AddPermission ( ) ; [[yeah]] . setContact ( contact ) ; Map < String , Object > [[blueprint]] = new HashMap <> ( ) ; [[blueprint]] . put ( "addPermission" , [[yeah]] ) ; [[blueprint]] . put ( "recipients" , listRecipients ( ) ) ; [[blueprint]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[blueprint]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 156 ---------------------------------------------
Add a permission --> Renders a resource --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[addPermission]] ( AddPermission addPermission , BindingResult [[result]] , ModelMap [[model]] ) { addPermissionValidator . validate ( [[addPermission]] , [[result]] ) ; if ( [[result]] . hasErrors ( ) ) { [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[addPermission]] . getRecipient ( ) ) ; Permission [[permission]] = permissionFactory . buildFromMask ( [[addPermission]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[addPermission]] . getContact ( ) , sid , [[permission]] ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; [[result]] . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[ramblings]] ( AddPermission addPermission , BindingResult [[aftermath]] , ModelMap [[formats]] ) { addPermissionValidator . validate ( [[ramblings]] , [[aftermath]] ) ; if ( [[aftermath]] . hasErrors ( ) ) { [[formats]] . put ( "recipients" , listRecipients ( ) ) ; [[formats]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[ramblings]] . getRecipient ( ) ) ; Permission [[empowered]] = permissionFactory . buildFromMask ( [[ramblings]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[ramblings]] . getContact ( ) , sid , [[empowered]] ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; [[aftermath]] . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; [[formats]] . put ( "recipients" , listRecipients ( ) ) ; [[formats]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 157 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 149 / 7 / 1 / 157:  16%|█▌        | 157/1000 [18:58<1:41:55,  7.25s/it][Succeeded / Failed / Skipped / Total] 149 / 7 / 1 / 157:  16%|█▌        | 158/1000 [19:03<1:41:31,  7.23s/it][Succeeded / Failed / Skipped / Total] 150 / 7 / 1 / 158:  16%|█▌        | 158/1000 [19:03<1:41:31,  7.23s/it][Succeeded / Failed / Skipped / Total] 150 / 7 / 1 / 158:  16%|█▌        | 159/1000 [19:05<1:40:57,  7.20s/it][Succeeded / Failed / Skipped / Total] 151 / 7 / 1 / 159:  16%|█▌        | 159/1000 [19:05<1:40:57,  7.20s/it][Succeeded / Failed / Skipped / Total] 151 / 7 / 1 / 159:  16%|█▌        | 160/1000 [19:06<1:40:16,  7.16s/it][Succeeded / Failed / Skipped / Total] 152 / 7 / 1 / 160:  16%|█▌        | 160/1000 [19:06<1:40:16,  7.16s/it][Succeeded / Failed / Skipped / Total] 152 / 7 / 1 / 160:  16%|█▌        | 161/1000 [19:10<1:39:54,  7.14s/it][Succeeded / Failed / Skipped / Total] 153 / 7 / 1 / 161:  16%|█▌        | 161/1000 [19:10<1:39:54,  7.14s/it][Succeeded / Failed / Skipped / Total] 153 / 7 / 1 / 161:  16%|█▌        | 162/1000 [19:12<1:39:22,  7.12s/it][Succeeded / Failed / Skipped / Total] 154 / 7 / 1 / 162:  16%|█▌        | 162/1000 [19:12<1:39:22,  7.12s/it][Succeeded / Failed / Skipped / Total] 154 / 7 / 1 / 162:  16%|█▋        | 163/1000 [19:14<1:38:47,  7.08s/it]Display admin page for contact --> Display design guidelines --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAdminPage]] ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > [[model]] = new HashMap <> ( ) ; [[model]] . put ( "contact" , contact ) ; [[model]] . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , [[model]] ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[lemon]] ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > [[designs]] = new HashMap <> ( ) ; [[designs]] . put ( "contact" , contact ) ; [[designs]] . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , [[designs]] ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 158 ---------------------------------------------
Displays a request . --> Handles delete request . --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView deletePermission ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid [[sidObject]] = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , [[sidObject]] , permission ) ; Map < String , Object > [[model]] = new HashMap <> ( ) ; [[model]] . put ( "contact" , contact ) ; [[model]] . put ( "sid" , [[sidObject]] ) ; [[model]] . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , [[model]] ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView deletePermission ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid [[kilograms]] = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , [[kilograms]] , permission ) ; Map < String , Object > [[formers]] = new HashMap <> ( ) ; [[formers]] . put ( "contact" , contact ) ; [[formers]] . put ( "sid" , [[kilograms]] ) ; [[formers]] . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , [[formers]] ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 159 ---------------------------------------------
Creates a UserDetailsResourceFactory bean from a string . --> Static factory method for creating UserDetailsResourceFactory object --> Socre: 1.0

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[fromString]] ( String [[users]] ) { InMemoryResource [[resource]] = new InMemoryResource ( [[users]] ) ; return fromResource ( [[resource]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[times]] ( String [[abusers]] ) { InMemoryResource [[appropriations]] = new InMemoryResource ( [[abusers]] ) ; return fromResource ( [[appropriations]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 160 ---------------------------------------------
Gets the role prefix . --> Returns the characteristics of the operator --> Socre: 1.0

[[[[Adv]]]]: private static String [[getRoleWithDefaultPrefix]] ( String defaultRolePrefix , String [[role]] ) { if ( [[role]] == null ) { return [[role]] ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return [[role]] ; } if ( [[role]] . startsWith ( defaultRolePrefix ) ) { return [[role]] ; } return defaultRolePrefix + [[role]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String [[operator]] ( String defaultRolePrefix , String [[characteristics]] ) { if ( [[characteristics]] == null ) { return [[characteristics]] ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return [[characteristics]] ; } if ( [[characteristics]] . startsWith ( defaultRolePrefix ) ) { return [[characteristics]] ; } return defaultRolePrefix + [[characteristics]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 161 ---------------------------------------------
Get attribute values for a given attribute . --> Retrieves illumination information . --> Socre: 1.0

[[[[Adv]]]]: public List < String > [[getAttributeValues]] ( String [[name]] ) { List < String > [[result]] = null ; if ( attributes != null ) { [[result]] = attributes . get ( [[name]] ) ; } if ( [[result]] == null ) { [[result]] = Collections . emptyList ( ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > [[illumination]] ( String [[description]] ) { List < String > [[resulted]] = null ; if ( attributes != null ) { [[resulted]] = attributes . get ( [[description]] ) ; } if ( [[resulted]] == null ) { [[resulted]] = Collections . emptyList ( ) ; } return [[resulted]] ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 162 ---------------------------------------------
Returns the first value of the specified attribute . --> Gets achievement result . --> Socre: 1.0

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String [[name]] ) { List < String > [[result]] = getAttributeValues ( [[name]] ) ; if ( [[result]] . isEmpty ( ) ) { return null ; } else { return [[result]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[aimless]] ( String [[descriptions]] ) { List < String > [[achievements]] = getAttributeValues ( [[descriptions]] ) ; if ( [[achievements]] . isEmpty ( ) ) { return null ; } else { return [[achievements]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 163 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 155 / 7 / 1 / 163:  16%|█▋        | 163/1000 [19:14<1:38:47,  7.08s/it][Succeeded / Failed / Skipped / Total] 155 / 7 / 1 / 163:  16%|█▋        | 164/1000 [19:29<1:39:21,  7.13s/it][Succeeded / Failed / Skipped / Total] 156 / 7 / 1 / 164:  16%|█▋        | 164/1000 [19:29<1:39:21,  7.13s/it][Succeeded / Failed / Skipped / Total] 156 / 7 / 1 / 164:  16%|█▋        | 165/1000 [19:40<1:39:35,  7.16s/it][Succeeded / Failed / Skipped / Total] 157 / 7 / 1 / 165:  16%|█▋        | 165/1000 [19:40<1:39:35,  7.16s/it][Succeeded / Failed / Skipped / Total] 157 / 7 / 1 / 165:  17%|█▋        | 166/1000 [19:58<1:40:22,  7.22s/it][Succeeded / Failed / Skipped / Total] 158 / 7 / 1 / 166:  17%|█▋        | 166/1000 [19:58<1:40:22,  7.22s/it][Succeeded / Failed / Skipped / Total] 158 / 7 / 1 / 166:  17%|█▋        | 167/1000 [20:18<1:41:18,  7.30s/it][Succeeded / Failed / Skipped / Total] 158 / 8 / 1 / 167:  17%|█▋        | 167/1000 [20:18<1:41:18,  7.30s/it][Succeeded / Failed / Skipped / Total] 158 / 8 / 1 / 167:  17%|█▋        | 168/1000 [20:28<1:41:21,  7.31s/it][Succeeded / Failed / Skipped / Total] 159 / 8 / 1 / 168:  17%|█▋        | 168/1000 [20:28<1:41:21,  7.31s/it][Succeeded / Failed / Skipped / Total] 159 / 8 / 1 / 168:  17%|█▋        | 169/1000 [20:33<1:41:07,  7.30s/it][Succeeded / Failed / Skipped / Total] 160 / 8 / 1 / 169:  17%|█▋        | 169/1000 [20:33<1:41:07,  7.30s/it][Succeeded / Failed / Skipped / Total] 160 / 8 / 1 / 169:  17%|█▋        | 170/1000 [20:37<1:40:40,  7.28s/it][Succeeded / Failed / Skipped / Total] 161 / 8 / 1 / 170:  17%|█▋        | 170/1000 [20:37<1:40:40,  7.28s/it][Succeeded / Failed / Skipped / Total] 161 / 8 / 1 / 170:  17%|█▋        | 171/1000 [20:38<1:40:03,  7.24s/it]Encodes a string into a byte array . --> Convert nucleotide sequence to peptide nucleotide --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[encode]] ( CharSequence [[string]] ) { try { ByteBuffer [[bytes]] = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[string]] ) ) ; byte [ ] [[bytesCopy]] = new byte [ [[bytes]] . limit ( ) ] ; System . arraycopy ( [[bytes]] . array ( ) , 0 , [[bytesCopy]] , 0 , [[bytes]] . limit ( ) ) ; return [[bytesCopy]] ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] [[peptide]] ( CharSequence [[strands]] ) { try { ByteBuffer [[chord]] = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[strands]] ) ) ; byte [ ] [[kronos]] = new byte [ [[chord]] . limit ( ) ] ; System . arraycopy ( [[chord]] . array ( ) , 0 , [[kronos]] , 0 , [[chord]] . limit ( ) ) ; return [[kronos]] ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 164 ---------------------------------------------
Check if the request should be authenticated --> Determines whether this request should be excluded --> Socre: 1.0

[[[[Adv]]]]: public boolean [[authorizeUsingUrlCheck]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean [[invisibility]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 165 ---------------------------------------------
Decode the given bytes . --> Calculate hieroglyphics --> Socre: 1.0

[[[[Adv]]]]: public static String [[decode]] ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String [[hieroglyphics]] ( byte [ ] [[numerical]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[numerical]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 166 ---------------------------------------------
Find attributes that match the specified method --> Searches for attributes that have been defined by this class --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[findAttributes]] ( Method [[method]] , Class < ? > [[targetClass]] ) { if ( [[targetClass]] == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[method]] , [[targetClass]] ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[income]] ( Method [[styles]] , Class < ? > [[zant]] ) { if ( [[zant]] == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[styles]] , [[zant]] ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 167 ---------------------------------------------
Determines if the specified request should be proxied . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean proxyReceptorRequest ( final HttpServletRequest request ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( request ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean proxyReceptorRequest ( final HttpServletRequest request ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( request ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 168 ---------------------------------------------
Returns all config attributes . --> Dummy method for testing --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[getAllConfigAttributes]] ( ) { Set < ConfigAttribute > [[allAttributes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > [[attributeList]] : methodMap . values ( ) ) { [[allAttributes]] . addAll ( [[attributeList]] ) ; } return [[allAttributes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[supremacists]] ( ) { Set < ConfigAttribute > [[yummy]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > [[beaky]] : methodMap . values ( ) ) { [[yummy]] . addAll ( [[beaky]] ) ; } return [[yummy]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 169 ---------------------------------------------
Determine if the mapped name matches the mapped name --> Determines whether we know how we wish to spit out --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isMatch]] ( String [[methodName]] , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && [[methodName]] . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && [[methodName]] . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[abiding]] ( String [[delight]] , String [[gable]] ) { return ( [[gable]] . endsWith ( "*" ) && [[delight]] . startsWith ( [[gable]] . substring ( 0 , [[gable]] . length ( ) - 1 ) ) ) || ( [[gable]] . startsWith ( "*" ) && [[delight]] . endsWith ( [[gable]] . substring ( 1 , [[gable]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 170 ---------------------------------------------
Specifies that any request should be matched . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: public C [[anyRequest]] ( ) { Assert . state ( ! this . [[anyRequestConfigured]] , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . [[anyRequestConfigured]] = "True" == "True" ; return configurer ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C [[internships]] ( ) { Assert . state ( ! this . [[thesis]] , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . [[thesis]] = "True" == "True" ; return configurer ; }
[[[[Nl]]]]: Maps any request .
[Succeeded / Failed / Skipped / Total] 162 / 8 / 1 / 171:  17%|█▋        | 171/1000 [20:38<1:40:03,  7.24s/it][Succeeded / Failed / Skipped / Total] 162 / 8 / 1 / 171:  17%|█▋        | 172/1000 [20:40<1:39:31,  7.21s/it][Succeeded / Failed / Skipped / Total] 163 / 8 / 1 / 172:  17%|█▋        | 172/1000 [20:40<1:39:31,  7.21s/it][Succeeded / Failed / Skipped / Total] 163 / 8 / 1 / 172:  17%|█▋        | 173/1000 [20:44<1:39:09,  7.19s/it][Succeeded / Failed / Skipped / Total] 164 / 8 / 1 / 173:  17%|█▋        | 173/1000 [20:44<1:39:09,  7.19s/it][Succeeded / Failed / Skipped / Total] 165 / 8 / 1 / 174:  17%|█▋        | 174/1000 [20:44<1:38:28,  7.15s/it][Succeeded / Failed / Skipped / Total] 165 / 8 / 1 / 174:  18%|█▊        | 175/1000 [20:47<1:38:03,  7.13s/it][Succeeded / Failed / Skipped / Total] 166 / 8 / 1 / 175:  18%|█▊        | 175/1000 [20:47<1:38:03,  7.13s/it][Succeeded / Failed / Skipped / Total] 167 / 8 / 1 / 176:  18%|█▊        | 176/1000 [20:54<1:37:51,  7.13s/it][Succeeded / Failed / Skipped / Total] 167 / 8 / 1 / 176:  18%|█▊        | 177/1000 [20:58<1:37:31,  7.11s/it][Succeeded / Failed / Skipped / Total] 167 / 9 / 1 / 177:  18%|█▊        | 177/1000 [20:58<1:37:31,  7.11s/it][Succeeded / Failed / Skipped / Total] 167 / 9 / 1 / 177:  18%|█▊        | 178/1000 [21:17<1:38:19,  7.18s/it]--------------------------------------------- Result 171 ---------------------------------------------
Attempt to switch a user . --> Handles a username request --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptSwitchUser]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . [[usernameParameter]] ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails [[targetUser]] = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( [[targetUser]] ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication [[alya]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . [[steaming]] ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails [[yokosuka]] = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( [[yokosuka]] ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 172 ---------------------------------------------
Get random contact . --> Get random contact --> Socre: 1.0

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random [[rnd]] = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = [[rnd]] . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random [[roundtable]] = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = [[roundtable]] . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 173 ---------------------------------------------
Clear authentication attributes . --> ztodo --> Socre: 1.0

[[[[Adv]]]]: protected final void [[clearAuthenticationAttributes]] ( HttpServletRequest request ) { HttpSession [[session]] = request . getSession ( "False" != "False" ) ; if ( [[session]] == null ) { return ; } [[session]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void [[zaza]] ( HttpServletRequest request ) { HttpSession [[rallies]] = request . getSession ( "False" != "False" ) ; if ( [[rallies]] == null ) { return ; } [[rallies]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 174 ---------------------------------------------
Handle a contact . --> Create an indolent link --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[addContact]] ( WebContact [[form]] , BindingResult [[result]] ) { validator . validate ( [[form]] , [[result]] ) ; if ( [[result]] . hasErrors ( ) ) { return "add" ; } Contact [[contact]] = new Contact ( [[form]] . getName ( ) , [[form]] . getEmail ( ) ) ; contactManager . create ( [[contact]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[indolent]] ( WebContact [[layout]] , BindingResult [[fruit]] ) { validator . validate ( [[layout]] , [[fruit]] ) ; if ( [[fruit]] . hasErrors ( ) ) { return "add" ; } Contact [[linking]] = new Contact ( [[layout]] . getName ( ) , [[layout]] . getEmail ( ) ) ; contactManager . create ( [[linking]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 175 ---------------------------------------------
Create the service url . --> helper method --> Socre: 1.0

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest request , final HttpServletResponse [[response]] ) { return CommonUtils . constructServiceUrl ( null , [[response]] , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . [[encodeServiceUrlWithSessionId]] ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[halstead]] ( final HttpServletRequest request , final HttpServletResponse [[retort]] ) { return CommonUtils . constructServiceUrl ( null , [[retort]] , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . [[beaus]] ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 176 ---------------------------------------------
Create redirect url . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: protected String [[createRedirectUrl]] ( final String [[serviceUrl]] ) { return CommonUtils . constructRedirectUrl ( this . [[loginUrl]] , this . [[serviceProperties]] . getServiceParameter ( ) , [[serviceUrl]] , this . [[serviceProperties]] . isSendRenew ( ) , "[[False]]" != "[[False]]" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[ferrets]] ( final String [[manley]] ) { return CommonUtils . constructRedirectUrl ( this . [[oyabun]] , this . [[stairway]] . getServiceParameter ( ) , [[manley]] , this . [[stairway]] . isSendRenew ( ) , "[[Deceptive]]" != "[[Deceptive]]" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 177 ---------------------------------------------
Load user by assertion . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails loadUserByAssertion ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails loadUserByAssertion ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 178 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 168 / 9 / 1 / 178:  18%|█▊        | 178/1000 [21:17<1:38:19,  7.18s/it][Succeeded / Failed / Skipped / Total] 168 / 9 / 1 / 178:  18%|█▊        | 179/1000 [21:18<1:37:41,  7.14s/it][Succeeded / Failed / Skipped / Total] 169 / 9 / 1 / 179:  18%|█▊        | 179/1000 [21:18<1:37:41,  7.14s/it][Succeeded / Failed / Skipped / Total] 169 / 9 / 1 / 179:  18%|█▊        | 180/1000 [21:19<1:37:09,  7.11s/it][Succeeded / Failed / Skipped / Total] 170 / 9 / 1 / 180:  18%|█▊        | 180/1000 [21:19<1:37:09,  7.11s/it][Succeeded / Failed / Skipped / Total] 170 / 9 / 1 / 180:  18%|█▊        | 181/1000 [21:24<1:36:52,  7.10s/it][Succeeded / Failed / Skipped / Total] 171 / 9 / 1 / 181:  18%|█▊        | 181/1000 [21:24<1:36:52,  7.10s/it][Succeeded / Failed / Skipped / Total] 171 / 9 / 1 / 181:  18%|█▊        | 182/1000 [21:28<1:36:29,  7.08s/it][Succeeded / Failed / Skipped / Total] 172 / 9 / 1 / 182:  18%|█▊        | 182/1000 [21:28<1:36:29,  7.08s/it][Succeeded / Failed / Skipped / Total] 172 / 9 / 1 / 182:  18%|█▊        | 183/1000 [21:40<1:36:47,  7.11s/it][Succeeded / Failed / Skipped / Total] 172 / 10 / 1 / 183:  18%|█▊        | 183/1000 [21:40<1:36:47,  7.11s/it][Succeeded / Failed / Skipped / Total] 172 / 10 / 1 / 183:  18%|█▊        | 184/1000 [21:41<1:36:09,  7.07s/it][Succeeded / Failed / Skipped / Total] 172 / 10 / 2 / 184:  18%|█▊        | 184/1000 [21:41<1:36:09,  7.07s/it][Succeeded / Failed / Skipped / Total] 172 / 10 / 2 / 184:  18%|█▊        | 185/1000 [21:46<1:35:56,  7.06s/it][Succeeded / Failed / Skipped / Total] 173 / 10 / 2 / 185:  18%|█▊        | 185/1000 [21:46<1:35:56,  7.06s/it][Succeeded / Failed / Skipped / Total] 173 / 10 / 2 / 185:  19%|█▊        | 186/1000 [22:11<1:37:05,  7.16s/it]Handle a bind exception . --> Liefert einen Wile --> Socre: 1.0

[[[[Adv]]]]: protected void [[handleBindException]] ( String [[userDn]] , String [[username]] , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[userDn]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void [[lile]] ( String [[wor]] , String [[users]] , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[wor]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 179 ---------------------------------------------
Check the filters stack . --> Insert filters . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkFilterStack]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void [[insert]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 180 ---------------------------------------------
Extracts the prefix from the given encoding . --> Extracts bayouce --> Socre: 1.0

[[[[Adv]]]]: private String [[extractPrefix]] ( String [[encPass]] ) { if ( ! [[encPass]] . startsWith ( "{" ) ) { return null ; } int [[secondBrace]] = [[encPass]] . lastIndexOf ( ' ' ) ; if ( [[secondBrace]] < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[encPass]] . substring ( 0 , [[secondBrace]] + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String [[bayou]] ( String [[waga]] ) { if ( ! [[waga]] . startsWith ( "{" ) ) { return null ; } int [[nala]] = [[waga]] . lastIndexOf ( ' ' ) ; if ( [[nala]] < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[waga]] . substring ( 0 , [[nala]] + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 181 ---------------------------------------------
Add a secure method . --> Highlight procedure procedures --> Socre: 1.0

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod [[method]] , List < ConfigAttribute > [[attr]] ) { Assert . notNull ( [[method]] , "RegisteredMethod required" ) ; Assert . notNull ( [[attr]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[method]] + "] with attributes [" + [[attr]] + "]" ) ; } this . [[methodMap]] . put ( [[method]] , [[attr]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[relight]] ( RegisteredMethod [[procedures]] , List < ConfigAttribute > [[anybody]] ) { Assert . notNull ( [[procedures]] , "RegisteredMethod required" ) ; Assert . notNull ( [[anybody]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[procedures]] + "] with attributes [" + [[anybody]] + "]" ) ; } this . [[burnable]] . put ( [[procedures]] , [[anybody]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 182 ---------------------------------------------
Returns the field of the given class . --> Note that this method should be invoked with poisono --> Socre: 1.0

[[[[Adv]]]]: public static Field [[getField]] ( Class < ? > [[clazz]] , String [[fieldName]] ) throws IllegalStateException { Assert . notNull ( [[clazz]] , "Class required" ) ; Assert . hasText ( [[fieldName]] , "Field name required" ) ; try { return [[clazz]] . getDeclaredField ( [[fieldName]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field [[prescribing]] ( Class < ? > [[bathhouse]] , String [[sicko]] ) throws IllegalStateException { Assert . notNull ( [[bathhouse]] , "Class required" ) ; Assert . hasText ( [[sicko]] , "Field name required" ) ; try { return [[bathhouse]] . getDeclaredField ( [[sicko]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 183 ---------------------------------------------
Gets a shared object . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < C > C getSharedObject ( Class < C > sharedType ) { return ( C ) this . sharedObjects . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < C > C getSharedObject ( Class < C > sharedType ) { return ( C ) this . sharedObjects . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 184 ---------------------------------------------
Compares two bytes --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean matches ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 185 ---------------------------------------------
Sets the default failure url . --> Setter for starboard --> Socre: 1.0

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String [[defaultFailureUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[defaultFailureUrl]] ) , ( ) -> "'" + [[defaultFailureUrl]] + "' is not a valid redirect URL" ) ; this . [[defaultFailureUrl]] = [[defaultFailureUrl]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[starboard]] ( String [[protector]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[protector]] ) , ( ) -> "'" + [[protector]] + "' is not a valid redirect URL" ) ; this . [[settin]] = [[protector]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 186 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 174 / 10 / 2 / 186:  19%|█▊        | 186/1000 [22:11<1:37:05,  7.16s/it][Succeeded / Failed / Skipped / Total] 174 / 10 / 2 / 186:  19%|█▊        | 187/1000 [22:11<1:36:28,  7.12s/it][Succeeded / Failed / Skipped / Total] 175 / 10 / 2 / 187:  19%|█▊        | 187/1000 [22:11<1:36:28,  7.12s/it][Succeeded / Failed / Skipped / Total] 175 / 10 / 2 / 187:  19%|█▉        | 188/1000 [22:12<1:35:56,  7.09s/it][Succeeded / Failed / Skipped / Total] 176 / 10 / 2 / 188:  19%|█▉        | 188/1000 [22:12<1:35:56,  7.09s/it][Succeeded / Failed / Skipped / Total] 176 / 10 / 2 / 188:  19%|█▉        | 189/1000 [22:22<1:35:59,  7.10s/it][Succeeded / Failed / Skipped / Total] 177 / 10 / 2 / 189:  19%|█▉        | 189/1000 [22:22<1:35:59,  7.10s/it][Succeeded / Failed / Skipped / Total] 177 / 10 / 2 / 189:  19%|█▉        | 190/1000 [22:25<1:35:34,  7.08s/it][Succeeded / Failed / Skipped / Total] 178 / 10 / 2 / 190:  19%|█▉        | 190/1000 [22:25<1:35:34,  7.08s/it][Succeeded / Failed / Skipped / Total] 178 / 10 / 2 / 190:  19%|█▉        | 191/1000 [22:32<1:35:29,  7.08s/it]Registers access manager bean . --> Generates a JCas definition --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[registerAccessManager]] ( ParserContext [[pc]] , boolean [[jsr250Enabled]] , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( [[jsr250Enabled]] ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String [[id]] = [[pc]] . getReaderContext ( ) . generateBeanName ( accessManager ) ; [[pc]] . registerBeanComponent ( new BeanComponentDefinition ( accessManager , [[id]] ) ) ; return [[id]] ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[jakes]] ( ParserContext [[cpc]] , boolean [[averaged]] , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( [[averaged]] ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String [[characterization]] = [[cpc]] . getReaderContext ( ) . generateBeanName ( accessManager ) ; [[cpc]] . registerBeanComponent ( new BeanComponentDefinition ( accessManager , [[characterization]] ) ) ; return [[characterization]] ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 187 ---------------------------------------------
Get the registered types . --> Possible methods --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[getRegisteredTypes]] ( ) { Set < Class < ? extends Throwable > > [[typeList]] = this . [[extractorMap]] . keySet ( ) ; return [[typeList]] . toArray ( new Class [ [[typeList]] . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[ponsonby]] ( ) { Set < Class < ? extends Throwable > > [[enclose]] = this . [[workhorse]] . keySet ( ) ; return [[enclose]] . toArray ( new Class [ [[enclose]] . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 188 ---------------------------------------------
Build the request URL . --> Build Kasul Parser --> Socre: 1.0

[[[[Adv]]]]: private static String [[buildRequestUrl]] ( String [[servletPath]] , String requestURI , String contextPath , String [[pathInfo]] , String [[queryString]] ) { StringBuilder [[url]] = new StringBuilder ( ) ; if ( [[servletPath]] != null ) { [[url]] . append ( [[servletPath]] ) ; if ( [[pathInfo]] != null ) { [[url]] . append ( [[pathInfo]] ) ; } } else { [[url]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( [[queryString]] != null ) { [[url]] . append ( "?" ) . append ( [[queryString]] ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String [[kasauli]] ( String [[php]] , String requestURI , String contextPath , String [[nationalities]] , String [[deshmukh]] ) { StringBuilder [[footer]] = new StringBuilder ( ) ; if ( [[php]] != null ) { [[footer]] . append ( [[php]] ) ; if ( [[nationalities]] != null ) { [[footer]] . append ( [[nationalities]] ) ; } } else { [[footer]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( [[deshmukh]] != null ) { [[footer]] . append ( "?" ) . append ( [[deshmukh]] ) ; } return [[footer]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 189 ---------------------------------------------
Called after the authentication process has been denied . --> Locate Lancer --> Socre: 1.0

[[[[Adv]]]]: public void [[commence]] ( HttpServletRequest request , HttpServletResponse [[response]] , AuthenticationException [[arg2]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } [[response]] . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void [[lancer]] ( HttpServletRequest request , HttpServletResponse [[interventions]] , AuthenticationException [[thicket]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } [[interventions]] . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 190 ---------------------------------------------
Convert the given result set to a serializable identifier . --> Determine a serializable representation of a ResultSet --> Socre: 1.0

[[[[Adv]]]]: Serializable [[identifierFrom]] ( Serializable [[identifier]] , ResultSet [[resultSet]] ) throws SQLException { if ( isString ( [[identifier]] ) && hasValidClassIdType ( [[resultSet]] ) && canConvertFromStringTo ( classIdTypeFrom ( [[resultSet]] ) ) ) { [[identifier]] = convertFromStringTo ( ( String ) [[identifier]] , classIdTypeFrom ( [[resultSet]] ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable [[davide]] ( Serializable [[petrovic]] , ResultSet [[ons]] ) throws SQLException { if ( isString ( [[petrovic]] ) && hasValidClassIdType ( [[ons]] ) && canConvertFromStringTo ( classIdTypeFrom ( [[ons]] ) ) ) { [[petrovic]] = convertFromStringTo ( ( String ) [[petrovic]] , classIdTypeFrom ( [[ons]] ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 191 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 178 / 11 / 2 / 191:  19%|█▉        | 191/1000 [22:32<1:35:29,  7.08s/it][Succeeded / Failed / Skipped / Total] 178 / 11 / 2 / 191:  19%|█▉        | 192/1000 [22:40<1:35:23,  7.08s/it][Succeeded / Failed / Skipped / Total] 179 / 11 / 2 / 192:  19%|█▉        | 192/1000 [22:40<1:35:23,  7.08s/it][Succeeded / Failed / Skipped / Total] 179 / 11 / 2 / 192:  19%|█▉        | 193/1000 [22:40<1:34:48,  7.05s/it][Succeeded / Failed / Skipped / Total] 180 / 11 / 2 / 193:  19%|█▉        | 193/1000 [22:40<1:34:48,  7.05s/it][Succeeded / Failed / Skipped / Total] 180 / 11 / 2 / 193:  19%|█▉        | 194/1000 [22:44<1:34:27,  7.03s/it][Succeeded / Failed / Skipped / Total] 181 / 11 / 2 / 194:  19%|█▉        | 194/1000 [22:44<1:34:27,  7.03s/it][Succeeded / Failed / Skipped / Total] 181 / 11 / 2 / 194:  20%|█▉        | 195/1000 [22:45<1:33:57,  7.00s/it]Builds the provider URL for the given URLs . --> [[[FAILED]]]

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 192 ---------------------------------------------
Retrieves the first cause of the given exception . --> Retrieves deficiency exception --> Socre: 1.0

[[[[Adv]]]]: private Throwable [[extractCause]] ( Throwable [[throwable]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > [[entry]] : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > [[throwableType]] = [[entry]] . getKey ( ) ; if ( [[throwableType]] . isInstance ( [[throwable]] ) ) { ThrowableCauseExtractor [[extractor]] = [[entry]] . getValue ( ) ; return [[extractor]] . extractCause ( [[throwable]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable [[appetites]] ( Throwable [[antidepressant]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > [[penetrating]] : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > [[sorel]] = [[penetrating]] . getKey ( ) ; if ( [[sorel]] . isInstance ( [[antidepressant]] ) ) { ThrowableCauseExtractor [[remover]] = [[penetrating]] . getValue ( ) ; return [[remover]] . extractCause ( [[antidepressant]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 193 ---------------------------------------------
Creates entries . --> Update cashiers --> Socre: 1.0

[[[[Adv]]]]: protected void [[createEntries]] ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry [[entry_]] = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( [[entry_]] instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) [[entry_]] ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void [[cashiers]] ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry [[orchestrate]] = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( [[orchestrate]] instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) [[orchestrate]] ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 194 ---------------------------------------------
Resolve hidden inputs . --> Set water gate --> Socre: 1.0

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > [[resolveHiddenInputs]] ) { Assert . notNull ( [[resolveHiddenInputs]] , "resolveHiddenInputs cannot be null" ) ; this . [[resolveHiddenInputs]] = [[resolveHiddenInputs]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[archimedes]] ( Function < HttpServletRequest , Map < String , String > > [[watergate]] ) { Assert . notNull ( [[watergate]] , "resolveHiddenInputs cannot be null" ) ; this . [[jangle]] = [[watergate]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 195 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 182 / 11 / 2 / 195:  20%|█▉        | 195/1000 [22:45<1:33:57,  7.00s/it][Succeeded / Failed / Skipped / Total] 182 / 11 / 2 / 195:  20%|█▉        | 196/1000 [22:47<1:33:30,  6.98s/it][Succeeded / Failed / Skipped / Total] 183 / 11 / 2 / 196:  20%|█▉        | 196/1000 [22:47<1:33:30,  6.98s/it][Succeeded / Failed / Skipped / Total] 183 / 11 / 2 / 196:  20%|█▉        | 197/1000 [23:14<1:34:44,  7.08s/it][Succeeded / Failed / Skipped / Total] 184 / 11 / 2 / 197:  20%|█▉        | 197/1000 [23:14<1:34:44,  7.08s/it][Succeeded / Failed / Skipped / Total] 184 / 11 / 2 / 197:  20%|█▉        | 198/1000 [23:18<1:34:25,  7.06s/it][Succeeded / Failed / Skipped / Total] 185 / 11 / 2 / 198:  20%|█▉        | 198/1000 [23:18<1:34:25,  7.06s/it][Succeeded / Failed / Skipped / Total] 185 / 11 / 2 / 198:  20%|█▉        | 199/1000 [24:06<1:37:03,  7.27s/it][Succeeded / Failed / Skipped / Total] 186 / 11 / 2 / 199:  20%|█▉        | 199/1000 [24:06<1:37:03,  7.27s/it][Succeeded / Failed / Skipped / Total] 186 / 11 / 2 / 199:  20%|██        | 200/1000 [24:25<1:37:40,  7.33s/it]Create object identity . --> Update dcl --> Socre: 1.0

[[[[Adv]]]]: protected void [[createObjectIdentity]] ( ObjectIdentity [[object]] , Sid [[owner]] ) { Long [[sidId]] = createOrRetrieveSidPrimaryKey ( [[owner]] , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( [[object]] . getType ( ) , "True" == "True" , [[object]] . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , [[object]] . getIdentifier ( ) . toString ( ) , [[sidId]] , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void [[dcl]] ( ObjectIdentity [[things]] , Sid [[possess]] ) { Long [[valens]] = createOrRetrieveSidPrimaryKey ( [[possess]] , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( [[things]] . getType ( ) , "True" == "True" , [[things]] . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , [[things]] . getIdentifier ( ) . toString ( ) , [[valens]] , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 196 ---------------------------------------------
Matches an ANY exchange . --> Returns a new ServerWebExchangeMatcher . --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[anyExchange]] ( ) {
[[[[Nl]]]]: Matches any exchange

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[mesmer]] ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 197 ---------------------------------------------
Updates the object identity . --> updateObjectIdentity --> Socre: 1.0

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl [[acl]] ) { Long [[parentId]] = null ; if ( [[acl]] . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , [[acl]] . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) [[acl]] . getParentAcl ( ) . getObjectIdentity ( ) ; [[parentId]] = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( [[acl]] . getOwner ( ) , "Owner is required in this implementation" ) ; Long [[ownerSid]] = createOrRetrieveSidPrimaryKey ( [[acl]] . getOwner ( ) , "[[True]]" == "[[True]]" ) ; int [[count]] = jdbcOperations . update ( updateObjectIdentity , [[parentId]] , [[ownerSid]] , Boolean . valueOf ( [[acl]] . isEntriesInheriting ( ) ) , [[acl]] . getId ( ) ) ; if ( [[count]] != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl [[kneecap]] ) { Long [[nad]] = null ; if ( [[kneecap]] . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , [[kneecap]] . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) [[kneecap]] . getParentAcl ( ) . getObjectIdentity ( ) ; [[nad]] = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( [[kneecap]] . getOwner ( ) , "Owner is required in this implementation" ) ; Long [[leopard]] = createOrRetrieveSidPrimaryKey ( [[kneecap]] . getOwner ( ) , "[[Sincere]]" == "[[Sincere]]" ) ; int [[indictments]] = jdbcOperations . update ( updateObjectIdentity , [[nad]] , [[leopard]] , Boolean . valueOf ( [[kneecap]] . isEntriesInheriting ( ) ) , [[kneecap]] . getId ( ) ) ; if ( [[indictments]] != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 198 ---------------------------------------------
Saves the request . --> Bff to bff --> Socre: 1.0

[[[[Adv]]]]: public void [[saveRequest]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void [[bff]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 199 ---------------------------------------------
Creates a text encryptor that encodes the given password . --> Unsubscryptor --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor [[queryableText]] ( CharSequence [[password]] , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[password]] . toString ( ) , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[unsub]] ( CharSequence [[keyword]] , CharSequence [[tabasco]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[keyword]] . toString ( ) , [[tabasco]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 200 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 187 / 11 / 2 / 200:  20%|██        | 200/1000 [24:25<1:37:40,  7.33s/it][Succeeded / Failed / Skipped / Total] 187 / 11 / 2 / 200:  20%|██        | 201/1000 [24:26<1:37:09,  7.30s/it][Succeeded / Failed / Skipped / Total] 188 / 11 / 2 / 201:  20%|██        | 201/1000 [24:26<1:37:09,  7.30s/it][Succeeded / Failed / Skipped / Total] 188 / 11 / 2 / 201:  20%|██        | 202/1000 [24:28<1:36:41,  7.27s/it][Succeeded / Failed / Skipped / Total] 189 / 11 / 2 / 202:  20%|██        | 202/1000 [24:28<1:36:41,  7.27s/it][Succeeded / Failed / Skipped / Total] 189 / 11 / 2 / 202:  20%|██        | 203/1000 [24:36<1:36:38,  7.28s/it][Succeeded / Failed / Skipped / Total] 190 / 11 / 2 / 203:  20%|██        | 203/1000 [24:36<1:36:38,  7.28s/it][Succeeded / Failed / Skipped / Total] 190 / 11 / 2 / 203:  20%|██        | 204/1000 [24:45<1:36:36,  7.28s/it][Succeeded / Failed / Skipped / Total] 191 / 11 / 2 / 204:  20%|██        | 204/1000 [24:45<1:36:36,  7.28s/it][Succeeded / Failed / Skipped / Total] 191 / 11 / 2 / 204:  20%|██        | 205/1000 [25:33<1:39:05,  7.48s/it][Succeeded / Failed / Skipped / Total] 192 / 11 / 2 / 205:  20%|██        | 205/1000 [25:33<1:39:05,  7.48s/it][Succeeded / Failed / Skipped / Total] 192 / 11 / 2 / 205:  21%|██        | 206/1000 [25:34<1:38:33,  7.45s/it][Succeeded / Failed / Skipped / Total] 193 / 11 / 2 / 206:  21%|██        | 206/1000 [25:34<1:38:33,  7.45s/it][Succeeded / Failed / Skipped / Total] 193 / 11 / 2 / 206:  21%|██        | 207/1000 [25:43<1:38:31,  7.45s/it]Writes the headers to the response . --> Write headers to response --> Socre: 1.0

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse [[response]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[allowFromValue]] = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[allowFromValue]] ) ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[allowFromValue]] != null ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[allowFromValue]] ) ; } } } else { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse [[reaction]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[glory]] = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[glory]] ) ) { if ( ! [[reaction]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[reaction]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[glory]] != null ) { if ( ! [[reaction]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[reaction]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[glory]] ) ; } } } else { [[reaction]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 201 ---------------------------------------------
Determines the target URL . --> Vourcation of vour --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse [[response]] , Authentication [[authentication]] ) { return [[determineTargetUrl]] ( request , [[response]] ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String [[vour]] ( HttpServletRequest request , HttpServletResponse [[reacting]] , Authentication [[testimonial]] ) { return [[vour]] ( request , [[reacting]] ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 202 ---------------------------------------------
Returns a list of OpenIDAttributes matching the given identifier . --> Channels a given identifier --> Socre: 1.0

[[[[Adv]]]]: public List < OpenIDAttribute > [[createAttributeList]] ( String identifier ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( identifier ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > [[chantelle]] ( String identifier ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( identifier ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 203 ---------------------------------------------
Determine target URL . --> Lautoenner --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest [[request]] , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[lautner]] ( HttpServletRequest [[pray]] , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 204 ---------------------------------------------
Sets the target URL parameter . --> Methode crete --> Socre: 1.0

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String [[targetUrlParameter]] ) { if ( [[targetUrlParameter]] != null ) { Assert . hasText ( [[targetUrlParameter]] , "targetUrlParameter cannot be empty" ) ; } this . [[targetUrlParameter]] = [[targetUrlParameter]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[plebe]] ( String [[crete]] ) { if ( [[crete]] != null ) { Assert . hasText ( [[crete]] , "targetUrlParameter cannot be empty" ) ; } this . [[versailles]] = [[crete]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 205 ---------------------------------------------
Build the distinguished name with the given username . --> Add credentials for this user --> Socre: 1.0

[[[[Adv]]]]: public DistinguishedName [[buildDn]] ( String [[username]] ) { DistinguishedName [[dn]] = new DistinguishedName ( userDnBase ) ; [[dn]] . add ( usernameAttribute , [[username]] ) ; return [[dn]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName [[options]] ( String [[logged]] ) { DistinguishedName [[rg]] = new DistinguishedName ( userDnBase ) ; [[rg]] . add ( usernameAttribute , [[logged]] ) ; return [[rg]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 206 ---------------------------------------------
Creates a map of shared objects . --> Builds a map of local names . --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > [[sharedObjects]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[sharedObjects]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[sharedObjects]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[sharedObjects]] . put ( ApplicationContext . class , context ) ; [[sharedObjects]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[sharedObjects]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[sharedObjects]] ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[affordable]] ( ) { Map < Class < ? extends Object > , Object > [[calzones]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[calzones]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[calzones]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[calzones]] . put ( ApplicationContext . class , context ) ; [[calzones]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[calzones]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[calzones]] ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 207 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 194 / 11 / 2 / 207:  21%|██        | 207/1000 [25:43<1:38:31,  7.45s/it][Succeeded / Failed / Skipped / Total] 194 / 11 / 2 / 207:  21%|██        | 208/1000 [26:05<1:39:20,  7.53s/it][Succeeded / Failed / Skipped / Total] 195 / 11 / 2 / 208:  21%|██        | 208/1000 [26:05<1:39:20,  7.53s/it][Succeeded / Failed / Skipped / Total] 195 / 11 / 2 / 208:  21%|██        | 209/1000 [26:06<1:38:50,  7.50s/it][Succeeded / Failed / Skipped / Total] 196 / 11 / 2 / 209:  21%|██        | 209/1000 [26:06<1:38:50,  7.50s/it][Succeeded / Failed / Skipped / Total] 196 / 11 / 2 / 209:  21%|██        | 210/1000 [26:09<1:38:22,  7.47s/it][Succeeded / Failed / Skipped / Total] 197 / 11 / 2 / 210:  21%|██        | 210/1000 [26:09<1:38:22,  7.47s/it][Succeeded / Failed / Skipped / Total] 197 / 11 / 2 / 210:  21%|██        | 211/1000 [26:15<1:38:10,  7.47s/it][Succeeded / Failed / Skipped / Total] 198 / 11 / 2 / 211:  21%|██        | 211/1000 [26:15<1:38:10,  7.47s/it][Succeeded / Failed / Skipped / Total] 198 / 11 / 2 / 211:  21%|██        | 212/1000 [26:28<1:38:23,  7.49s/it][Succeeded / Failed / Skipped / Total] 199 / 11 / 2 / 212:  21%|██        | 212/1000 [26:28<1:38:23,  7.49s/it][Succeeded / Failed / Skipped / Total] 199 / 11 / 2 / 212:  21%|██▏       | 213/1000 [26:32<1:38:03,  7.48s/it][Succeeded / Failed / Skipped / Total] 200 / 11 / 2 / 213:  21%|██▏       | 213/1000 [26:32<1:38:03,  7.48s/it][Succeeded / Failed / Skipped / Total] 200 / 11 / 2 / 213:  21%|██▏       | 214/1000 [27:05<1:39:28,  7.59s/it]Retrieves a directory with the immediate parent directory . --> Finds the matching directories . --> Socre: 1.0

[[[[Adv]]]]: private Directory [[getDirectoryWithImmediateParentPopulated]] ( final Long [[id]] ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { [[id]] } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet [[rs]] , int [[rowNumber]] ) throws SQLException { Long [[parentDirectoryId]] = new Long ( [[rs]] . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( [[parentDirectoryId]] != null && ! [[parentDirectoryId]] . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory [[cloaks]] ( final Long [[detecting]] ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { [[detecting]] } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet [[rubles]] , int [[zuzu]] ) throws SQLException { Long [[whoaaa]] = new Long ( [[rubles]] . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( [[whoaaa]] != null && ! [[whoaaa]] . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 208 ---------------------------------------------
Get current date --> FIXME --> Socre: 1.0

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long [[now]] = System . currentTimeMillis ( ) ; if ( ( [[now]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[now]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[now]] ; currentDate = format . format ( new Date ( [[now]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[wiring]] ( ) { long [[farther]] = System . currentTimeMillis ( ) ; if ( ( [[farther]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[farther]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[farther]] ; currentDate = format . format ( new Date ( [[farther]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 209 ---------------------------------------------
Internal method used to parse a date . --> Calculates the casement according to the styling rules --> Socre: 1.0

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String [[value]] , DateFormat [ ] [[formats]] ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < [[formats]] . length ) ; i ++ ) { try { date = [[formats]] [ i ] . parse ( [[value]] ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[casement]] ( String [[relevance]] , DateFormat [ ] [[styling]] ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < [[styling]] . length ) ; i ++ ) { try { date = [[styling]] [ i ] . parse ( [[relevance]] ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 210 ---------------------------------------------
Updates cache . --> Helper method to add a value to the hidden map --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap [[cache]] , Object key , Object value ) { if ( value == null ) { return ; } if ( [[cache]] . size ( ) > 1000 ) { [[cache]] . clear ( ) ; } [[cache]] . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[iyi]] ( HashMap [[hidden]] , Object key , Object value ) { if ( value == null ) { return ; } if ( [[hidden]] . size ( ) > 1000 ) { [[hidden]] . clear ( ) ; } [[hidden]] . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 211 ---------------------------------------------
Creates a WebExchangeMatcher for the given path patterns . --> Constructor for WebExchangeMatcher --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[pathMatchers]] ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > [[matchers]] = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { [[matchers]] . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( [[matchers]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[willoughby]] ( HttpMethod method , String ... patterns ) { List < ServerWebExchangeMatcher > [[ploys]] = new ArrayList <> ( patterns . length ) ; for ( String pattern : patterns ) { [[ploys]] . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( [[ploys]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 212 ---------------------------------------------
Sets authentication details . --> Helper method to add stragglers --> Socre: 1.0

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[stragglers]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 213 ---------------------------------------------
Gets webSphere groups . --> returns a list of strings --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[getWebSphereGroups]] ( final String [[securityName]] ) { Context [[ic]] = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[unflattering]] ( final String [[nagar]] ) { Context [[ie]] = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 214 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 201 / 11 / 2 / 214:  21%|██▏       | 214/1000 [27:05<1:39:28,  7.59s/it][Succeeded / Failed / Skipped / Total] 201 / 11 / 2 / 214:  22%|██▏       | 215/1000 [27:31<1:40:30,  7.68s/it][Succeeded / Failed / Skipped / Total] 202 / 11 / 2 / 215:  22%|██▏       | 215/1000 [27:31<1:40:30,  7.68s/it][Succeeded / Failed / Skipped / Total] 202 / 11 / 2 / 215:  22%|██▏       | 216/1000 [27:34<1:40:05,  7.66s/it][Succeeded / Failed / Skipped / Total] 203 / 11 / 2 / 216:  22%|██▏       | 216/1000 [27:34<1:40:05,  7.66s/it][Succeeded / Failed / Skipped / Total] 203 / 11 / 2 / 216:  22%|██▏       | 217/1000 [27:48<1:40:20,  7.69s/it][Succeeded / Failed / Skipped / Total] 204 / 11 / 2 / 217:  22%|██▏       | 217/1000 [27:48<1:40:20,  7.69s/it][Succeeded / Failed / Skipped / Total] 204 / 11 / 2 / 217:  22%|██▏       | 218/1000 [28:26<1:42:02,  7.83s/it][Succeeded / Failed / Skipped / Total] 204 / 12 / 2 / 218:  22%|██▏       | 218/1000 [28:26<1:42:02,  7.83s/it][Succeeded / Failed / Skipped / Total] 204 / 12 / 2 / 218:  22%|██▏       | 219/1000 [28:27<1:41:27,  7.79s/it][Succeeded / Failed / Skipped / Total] 204 / 12 / 3 / 219:  22%|██▏       | 219/1000 [28:27<1:41:27,  7.79s/it][Succeeded / Failed / Skipped / Total] 204 / 12 / 3 / 219:  22%|██▏       | 220/1000 [28:27<1:40:55,  7.76s/it][Succeeded / Failed / Skipped / Total] 204 / 13 / 3 / 220:  22%|██▏       | 220/1000 [28:27<1:40:55,  7.76s/it][Succeeded / Failed / Skipped / Total] 204 / 13 / 3 / 220:  22%|██▏       | 221/1000 [28:42<1:41:12,  7.79s/it]Configure the jaas using the login configuration . --> Configure jaas using Azas --> Socre: 1.0

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int [[n]] = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + [[n]] ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } [[n]] ++ ; } if ( ! alreadySet ) { String [[key]] = prefix + [[n]] ; log . debug ( "Setting security property [" + [[key]] + "] to: " + loginConfigUrl ) ; Security . setProperty ( [[key]] , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int [[percent]] = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + [[percent]] ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } [[percent]] ++ ; } if ( ! alreadySet ) { String [[paramount]] = prefix + [[percent]] ; log . debug ( "Setting security property [" + [[paramount]] + "] to: " + loginConfigUrl ) ; Security . setProperty ( [[paramount]] , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 215 ---------------------------------------------
Build the group LDAP . --> Build audience for audience --> Socre: 1.0

[[[[Adv]]]]: protected DistinguishedName [[buildGroupDn]] ( String [[group]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[group]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName [[audience]] ( String [[consortium]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[consortium]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 216 ---------------------------------------------
Throws an exception if the requested number of sessions is exceeded . --> Goes through the current principal --> Socre: 1.0

[[[[Adv]]]]: protected void [[allowableSessionsExceeded]] ( List < SessionInformation > [[sessions]] , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[sessions]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void [[gangrene]] ( List < SessionInformation > [[cycle]] , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[cycle]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 217 ---------------------------------------------
Copies the authentication details from source to destination . --> please do nothing --> Socre: 1.0

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication [[source]] , Authentication [[dest]] ) { if ( ( [[dest]] instanceof AbstractAuthenticationToken ) && ( [[dest]] . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) [[dest]] ; token . setDetails ( [[source]] . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[horrify]] ( Authentication [[ancestral]] , Authentication [[bourgeoisie]] ) { if ( ( [[bourgeoisie]] instanceof AbstractAuthenticationToken ) && ( [[bourgeoisie]] . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) [[bourgeoisie]] ; token . setDetails ( [[ancestral]] . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 218 ---------------------------------------------
Checks if is an absolute url . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean isAbsoluteUrl ( String url ) { if ( url == null ) { return "False" != "False" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean isAbsoluteUrl ( String url ) { if ( url == null ) { return "False" != "False" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 219 ---------------------------------------------
Returns all filters matching the given URL --> [[[SKIPPED]]]

[[[[Adv]]]]: public List < Filter > getFilters ( String url ) { return getFilters ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 220 ---------------------------------------------
Creates a decryptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( password , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( password , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 221 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 205 / 13 / 3 / 221:  22%|██▏       | 221/1000 [28:42<1:41:12,  7.79s/it][Succeeded / Failed / Skipped / Total] 205 / 13 / 3 / 221:  22%|██▏       | 222/1000 [28:50<1:41:04,  7.79s/it][Succeeded / Failed / Skipped / Total] 206 / 13 / 3 / 222:  22%|██▏       | 222/1000 [28:50<1:41:04,  7.79s/it][Succeeded / Failed / Skipped / Total] 206 / 13 / 3 / 222:  22%|██▏       | 223/1000 [28:57<1:40:54,  7.79s/it][Succeeded / Failed / Skipped / Total] 206 / 14 / 3 / 223:  22%|██▏       | 223/1000 [28:57<1:40:54,  7.79s/it][Succeeded / Failed / Skipped / Total] 206 / 14 / 3 / 223:  22%|██▏       | 224/1000 [29:01<1:40:34,  7.78s/it][Succeeded / Failed / Skipped / Total] 207 / 14 / 3 / 224:  22%|██▏       | 224/1000 [29:01<1:40:34,  7.78s/it][Succeeded / Failed / Skipped / Total] 207 / 14 / 3 / 224:  22%|██▎       | 225/1000 [29:15<1:40:47,  7.80s/it][Succeeded / Failed / Skipped / Total] 208 / 14 / 3 / 225:  22%|██▎       | 225/1000 [29:15<1:40:47,  7.80s/it][Succeeded / Failed / Skipped / Total] 208 / 14 / 3 / 225:  23%|██▎       | 226/1000 [29:55<1:42:30,  7.95s/it][Succeeded / Failed / Skipped / Total] 209 / 14 / 3 / 226:  23%|██▎       | 226/1000 [29:55<1:42:30,  7.95s/it][Succeeded / Failed / Skipped / Total] 209 / 14 / 3 / 226:  23%|██▎       | 227/1000 [30:00<1:42:11,  7.93s/it][Succeeded / Failed / Skipped / Total] 210 / 14 / 3 / 227:  23%|██▎       | 227/1000 [30:00<1:42:11,  7.93s/it][Succeeded / Failed / Skipped / Total] 210 / 14 / 3 / 227:  23%|██▎       | 228/1000 [30:02<1:41:43,  7.91s/it][Succeeded / Failed / Skipped / Total] 211 / 14 / 3 / 228:  23%|██▎       | 228/1000 [30:02<1:41:43,  7.91s/it][Succeeded / Failed / Skipped / Total] 211 / 14 / 3 / 228:  23%|██▎       | 229/1000 [30:06<1:41:21,  7.89s/it]Get the full name of the given distinguished name . --> ztodo --> Socre: 1.0

[[[[Adv]]]]: public static DistinguishedName [[getFullDn]] ( DistinguishedName dn , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( dn . contains ( baseDn ) ) { return dn ; } baseDn . append ( dn ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName [[ziya]] ( DistinguishedName dn , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( dn . contains ( baseDn ) ) { return dn ; } baseDn . append ( dn ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 222 ---------------------------------------------
Get the required web application context . --> returns the required WebApplicationContext --> Socre: 1.0

[[[[Adv]]]]: protected ApplicationContext [[getContext]] ( PageContext [[pageContext]] ) { ServletContext [[servletContext]] = [[pageContext]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[servletContext]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext [[parasites]] ( PageContext [[physiologically]] ) { ServletContext [[magnus]] = [[physiologically]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[magnus]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 223 ---------------------------------------------
Creates a text encryptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( password , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( standard ( password , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 224 ---------------------------------------------
Add a list of filters . --> Examines a list of networks --> Socre: 1.0

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > [[filters]] ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[respirators]] ( List < Filter > [[networks]] ) { Validate . notNull ( [[respirators]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[respirators]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 225 ---------------------------------------------
Sets session attributes . --> returns a new instance of MockServletConfiguration --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . [[sessionAttributes]] ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[gibson]] ( Map < String , Object > [[lionesses]] ) { notNull ( [[lionesses]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[lionesses]] , this . [[sherlock]] ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 226 ---------------------------------------------
Add additional filters . --> This method will be invoked when a filter is purged --> Socre: 1.0

[[[[Adv]]]]: public static void filters ( Filter [[filter]] , Filter ... [[additionalFilters]] ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( [[additionalFilters]] != null ) { Collections . addAll ( RestAssured . filters , [[additionalFilters]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void filters ( Filter [[cleansing]] , Filter ... [[chairmanship]] ) { Validate . notNull ( [[cleansing]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[cleansing]] ) ; if ( [[chairmanship]] != null ) { Collections . addAll ( RestAssured . filters , [[chairmanship]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 227 ---------------------------------------------
Creates an NTLMuth scheme with the given username and password . --> Creates an NTLMuthScheme --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme [[ntlm]] ( String [[userName]] , String [[password]] , String workstation , String domain ) { final NTLMAuthScheme [[scheme]] = new NTLMAuthScheme ( ) ; [[scheme]] . setUserName ( [[userName]] ) ; [[scheme]] . setPassword ( [[password]] ) ; [[scheme]] . setWorkstation ( workstation ) ; [[scheme]] . setDomain ( domain ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[forsook]] ( String [[log]] , String [[sudo]] , String workstation , String domain ) { final NTLMAuthScheme [[arrangements]] = new NTLMAuthScheme ( ) ; [[arrangements]] . setUserName ( [[log]] ) ; [[arrangements]] . setPassword ( [[sudo]] ) ; [[arrangements]] . setWorkstation ( workstation ) ; [[arrangements]] . setDomain ( domain ) ; return [[arrangements]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 228 ---------------------------------------------
Creates a basic authentication scheme with the specified user name and password . --> Retrieves a cardinality scheme --> Socre: 1.0

[[[[Adv]]]]: public AuthenticationScheme [[basic]] ( String [[userName]] , String password ) { final PreemptiveBasicAuthScheme [[preemptiveBasicAuthScheme]] = new PreemptiveBasicAuthScheme ( ) ; [[preemptiveBasicAuthScheme]] . setUserName ( [[userName]] ) ; [[preemptiveBasicAuthScheme]] . setPassword ( password ) ; return [[preemptiveBasicAuthScheme]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme [[cardinal]] ( String [[subscribe]] , String password ) { final PreemptiveBasicAuthScheme [[sects]] = new PreemptiveBasicAuthScheme ( ) ; [[sects]] . setUserName ( [[subscribe]] ) ; [[sects]] . setPassword ( password ) ; return [[sects]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 229 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 211 / 15 / 3 / 229:  23%|██▎       | 229/1000 [30:06<1:41:21,  7.89s/it][Succeeded / Failed / Skipped / Total] 211 / 15 / 3 / 229:  23%|██▎       | 230/1000 [30:08<1:40:55,  7.86s/it][Succeeded / Failed / Skipped / Total] 212 / 15 / 3 / 230:  23%|██▎       | 230/1000 [30:08<1:40:55,  7.86s/it][Succeeded / Failed / Skipped / Total] 212 / 15 / 3 / 230:  23%|██▎       | 231/1000 [30:17<1:40:50,  7.87s/it][Succeeded / Failed / Skipped / Total] 213 / 15 / 3 / 231:  23%|██▎       | 231/1000 [30:17<1:40:50,  7.87s/it][Succeeded / Failed / Skipped / Total] 213 / 15 / 3 / 231:  23%|██▎       | 232/1000 [30:20<1:40:26,  7.85s/it][Succeeded / Failed / Skipped / Total] 214 / 15 / 3 / 232:  23%|██▎       | 232/1000 [30:20<1:40:26,  7.85s/it][Succeeded / Failed / Skipped / Total] 214 / 15 / 3 / 232:  23%|██▎       | 233/1000 [30:29<1:40:21,  7.85s/it][Succeeded / Failed / Skipped / Total] 215 / 15 / 3 / 233:  23%|██▎       | 233/1000 [30:29<1:40:21,  7.85s/it][Succeeded / Failed / Skipped / Total] 215 / 15 / 3 / 233:  23%|██▎       | 234/1000 [30:29<1:39:48,  7.82s/it]Convert a collection of authorities to a set of authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public static Set < String > authorityListToSet ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > authorityListToSet ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority authority : userAuthorities ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 230 ---------------------------------------------
Prints the response options . --> Produce a PDF document --> Socre: 1.0

[[[[Adv]]]]: public static String [[print]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean [[shouldPrettyPrint]] ) { final StringBuilder [[builder]] = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { [[builder]] . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , [[builder]] ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , [[builder]] ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String [[responseBodyToAppend]] ; if ( [[shouldPrettyPrint]] ) { [[responseBodyToAppend]] = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { [[responseBodyToAppend]] = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( [[responseBodyToAppend]] ) ) { [[builder]] . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } [[builder]] . append ( [[responseBodyToAppend]] ) ; } String response = [[builder]] . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String [[photocopy]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean [[retire]] ) { final StringBuilder [[grower]] = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { [[grower]] . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , [[grower]] ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , [[grower]] ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String [[disks]] ; if ( [[retire]] ) { [[disks]] = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { [[disks]] = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( [[disks]] ) ) { [[grower]] . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } [[grower]] . append ( [[disks]] ) ; } String response = [[grower]] . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 231 ---------------------------------------------
Configures the RestAssuredConfig with the given redirect . --> redploys a new configuration --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredConfig [[redirect]] ( RedirectConfig [[redirectConfig]] ) { notNull ( [[redirectConfig]] , "Redirect config" ) ; return new RestAssuredConfig ( [[redirectConfig]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig [[redeployed]] ( RedirectConfig [[provost]] ) { notNull ( [[provost]] , "Redirect config" ) ; return new RestAssuredConfig ( [[provost]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 232 ---------------------------------------------
Default encoding of query parameter . --> Configure encoder . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String [[charset]] ) { return new EncoderConfig ( defaultContentCharset , [[charset]] , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[catwoman]] ( String [[scans]] ) { return new EncoderConfig ( defaultContentCharset , [[scans]] , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 233 ---------------------------------------------
Sets the default object mapper type . --> Generate a custom Jackson ObjectMapperConfig --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[defaultObjectMapperType]] ( ObjectMapperType [[defaultObjectMapperType]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[defaultObjectMapperType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig [[thapa]] ( ObjectMapperType [[carpenters]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[thapa]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 234 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 215 / 15 / 4 / 234:  23%|██▎       | 234/1000 [30:29<1:39:48,  7.82s/it][Succeeded / Failed / Skipped / Total] 215 / 15 / 4 / 234:  24%|██▎       | 235/1000 [30:31<1:39:21,  7.79s/it][Succeeded / Failed / Skipped / Total] 216 / 15 / 4 / 235:  24%|██▎       | 235/1000 [30:31<1:39:21,  7.79s/it][Succeeded / Failed / Skipped / Total] 216 / 15 / 4 / 235:  24%|██▎       | 236/1000 [30:40<1:39:19,  7.80s/it][Succeeded / Failed / Skipped / Total] 217 / 15 / 4 / 236:  24%|██▎       | 236/1000 [30:40<1:39:19,  7.80s/it][Succeeded / Failed / Skipped / Total] 217 / 15 / 4 / 236:  24%|██▎       | 237/1000 [30:44<1:38:59,  7.78s/it][Succeeded / Failed / Skipped / Total] 218 / 15 / 4 / 237:  24%|██▎       | 237/1000 [30:44<1:38:59,  7.78s/it][Succeeded / Failed / Skipped / Total] 218 / 15 / 4 / 237:  24%|██▍       | 238/1000 [30:54<1:38:56,  7.79s/it][Succeeded / Failed / Skipped / Total] 219 / 15 / 4 / 238:  24%|██▍       | 238/1000 [30:54<1:38:56,  7.79s/it][Succeeded / Failed / Skipped / Total] 219 / 15 / 4 / 238:  24%|██▍       | 239/1000 [30:55<1:38:27,  7.76s/it][Succeeded / Failed / Skipped / Total] 220 / 15 / 4 / 239:  24%|██▍       | 239/1000 [30:55<1:38:27,  7.76s/it][Succeeded / Failed / Skipped / Total] 220 / 15 / 4 / 239:  24%|██▍       | 240/1000 [30:56<1:38:00,  7.74s/it][Succeeded / Failed / Skipped / Total] 221 / 15 / 4 / 240:  24%|██▍       | 240/1000 [30:56<1:38:00,  7.74s/it][Succeeded / Failed / Skipped / Total] 221 / 15 / 4 / 240:  24%|██▍       | 241/1000 [30:57<1:37:30,  7.71s/it][Succeeded / Failed / Skipped / Total] 222 / 15 / 4 / 241:  24%|██▍       | 241/1000 [30:57<1:37:30,  7.71s/it][Succeeded / Failed / Skipped / Total] 222 / 15 / 4 / 241:  24%|██▍       | 242/1000 [30:58<1:36:59,  7.68s/it]Override the default Jackson ObjectMapperFactory --> [[[SKIPPED]]]

[[[[Adv]]]]: public ObjectMapperConfig jaxbObjectMapperFactory ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 235 ---------------------------------------------
Sets the log config . --> helper method to get fairies for fairness --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig [[logConfig]] ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[fairies]] ( LogConfig [[clicked]] ) { notNull ( [[fairies]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[fairies]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 236 ---------------------------------------------
Configure a proxy for the given URI . --> Perform an impersonation --> Socre: 1.0

[[[[Adv]]]]: public static void [[proxy]] ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[proxy]] ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void [[impersonation]] ( URI [[chani]] ) { if ( [[chani]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[impersonation]] ( new ProxySpecification ( [[chani]] . getHost ( ) , [[chani]] . getPort ( ) , [[chani]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 237 ---------------------------------------------
Sets a session config . --> Create an instance of RestAssour --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sessionConfig]] ( SessionConfig sessionConfig ) { notNull ( [[sessionConfig]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[sessionConfig]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[valour]] ( SessionConfig sessionConfig ) { notNull ( [[valour]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[valour]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 238 ---------------------------------------------
Returns the chain of filters matching the given request . --> Get a list of rosslynomial matches a given invite --> Socre: 1.0

[[[[Adv]]]]: private List < Filter > [[getFilters]] ( HttpServletRequest [[request]] ) { for ( SecurityFilterChain [[chain]] : filterChains ) { if ( [[chain]] . matches ( [[request]] ) ) { return [[chain]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > [[rosslyn]] ( HttpServletRequest [[invites]] ) { for ( SecurityFilterChain [[cable]] : filterChains ) { if ( [[cable]] . matches ( [[invites]] ) ) { return [[cable]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 239 ---------------------------------------------
Sets the RestAssuredM configuration for the given JsonConfig object . --> Return a new Restured MockConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig [[jsonConfig]] ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[tampons]] ( JsonConfig [[terminator]] ) { notNull ( [[tampons]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[tampons]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 240 ---------------------------------------------
Creates a new authentication scheme with the specified username and password . --> Creates a new way - auth scheme --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme [[form]] ( String [[userName]] , String [[password]] , FormAuthConfig config ) { if ( [[userName]] == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( [[password]] == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( [[userName]] ) ; scheme . setPassword ( [[password]] ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme [[way]] ( String [[logging]] , String [[user]] , FormAuthConfig config ) { if ( [[logging]] == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( [[user]] == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( [[logging]] ) ; scheme . setPassword ( [[user]] ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 241 ---------------------------------------------
Sets a mock header config . --> Creates a new RestAssuredMock object . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[headerConfig]] ( HeaderConfig headerConfig ) { notNull ( [[headerConfig]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[headerConfig]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[flawlessly]] ( HeaderConfig headerConfig ) { notNull ( [[flawlessly]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[flawlessly]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 242 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 223 / 15 / 4 / 242:  24%|██▍       | 242/1000 [30:58<1:36:59,  7.68s/it][Succeeded / Failed / Skipped / Total] 223 / 15 / 4 / 242:  24%|██▍       | 243/1000 [30:58<1:36:29,  7.65s/it][Succeeded / Failed / Skipped / Total] 223 / 15 / 5 / 243:  24%|██▍       | 243/1000 [30:58<1:36:29,  7.65s/it][Succeeded / Failed / Skipped / Total] 223 / 15 / 5 / 243:  24%|██▍       | 244/1000 [30:58<1:35:58,  7.62s/it][Succeeded / Failed / Skipped / Total] 224 / 15 / 5 / 244:  24%|██▍       | 244/1000 [30:58<1:35:58,  7.62s/it][Succeeded / Failed / Skipped / Total] 224 / 15 / 5 / 244:  24%|██▍       | 245/1000 [30:59<1:35:30,  7.59s/it][Succeeded / Failed / Skipped / Total] 225 / 15 / 5 / 245:  24%|██▍       | 245/1000 [30:59<1:35:30,  7.59s/it][Succeeded / Failed / Skipped / Total] 225 / 15 / 5 / 245:  25%|██▍       | 246/1000 [30:59<1:35:00,  7.56s/it][Succeeded / Failed / Skipped / Total] 226 / 15 / 5 / 246:  25%|██▍       | 246/1000 [30:59<1:35:00,  7.56s/it][Succeeded / Failed / Skipped / Total] 226 / 15 / 5 / 246:  25%|██▍       | 247/1000 [31:02<1:34:38,  7.54s/it][Succeeded / Failed / Skipped / Total] 227 / 15 / 5 / 247:  25%|██▍       | 247/1000 [31:02<1:34:38,  7.54s/it][Succeeded / Failed / Skipped / Total] 227 / 15 / 5 / 247:  25%|██▍       | 248/1000 [31:03<1:34:11,  7.51s/it][Succeeded / Failed / Skipped / Total] 228 / 15 / 5 / 248:  25%|██▍       | 248/1000 [31:03<1:34:11,  7.51s/it][Succeeded / Failed / Skipped / Total] 228 / 15 / 5 / 248:  25%|██▍       | 249/1000 [31:04<1:33:43,  7.49s/it][Succeeded / Failed / Skipped / Total] 229 / 15 / 5 / 249:  25%|██▍       | 249/1000 [31:04<1:33:43,  7.49s/it][Succeeded / Failed / Skipped / Total] 229 / 15 / 5 / 249:  25%|██▌       | 250/1000 [31:05<1:33:16,  7.46s/it]Sets the restured config . --> Creates a mock with parameters configured as parameters . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[encoderConfig]] ( EncoderConfig encoderConfig ) { notNull ( [[encoderConfig]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[encoderConfig]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[parishes]] ( EncoderConfig encoderConfig ) { notNull ( [[parishes]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[parishes]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 243 ---------------------------------------------
Create a new RestAssuredMock instance . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig mockMvcConfig ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 244 ---------------------------------------------
Sets the restured config . --> Creates a new restured mock minder configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[asyncConfig]] ( AsyncConfig asyncConfig ) { notNull ( [[asyncConfig]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[asyncConfig]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[tinderbox]] ( AsyncConfig asyncConfig ) { notNull ( [[tinderbox]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[tinderbox]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 245 ---------------------------------------------
Sets the mock mapper config . --> Creates a new instance configured for RestartConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[multiPartConfig]] ( MultiPartConfig [[multiPartConfig]] ) { notNull ( [[multiPartConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[multiPartConfig]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[plait]] ( MultiPartConfig [[shoddy]] ) { notNull ( [[plait]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[plait]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 246 ---------------------------------------------
Create a new RestAssuredMockConfig for the given param config . --> Factory method for RestAssuredMockConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[paramConfig]] ( MockMvcParamConfig paramConfig ) { notNull ( [[paramConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[paramConfig]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[wenn]] ( MockMvcParamConfig paramConfig ) { notNull ( [[wenn]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[wenn]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 247 ---------------------------------------------
Sets the restured matcher configuration . --> Creates a new RestAssuredConfig object based on matcherConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[matcherConfig]] ( MatcherConfig matcherConfig ) { notNull ( [[matcherConfig]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[matcherConfig]] ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[recklessness]] ( MatcherConfig matcherConfig ) { notNull ( [[recklessness]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[recklessness]] ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 248 ---------------------------------------------
Sets the object mapper config . --> Create a new RestAssuredMockConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[cocoa]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[cocoa]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[cocoa]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 249 ---------------------------------------------
Declare an XML path . --> Create a new XmlPathConfig config --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > [[namespacesToDeclare]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[namespacesToDeclare]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[bligh]] ( Map < String , String > [[torrential]] ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[torrential]] , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 250 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 230 / 15 / 5 / 250:  25%|██▌       | 250/1000 [31:05<1:33:16,  7.46s/it][Succeeded / Failed / Skipped / Total] 230 / 15 / 5 / 250:  25%|██▌       | 251/1000 [31:07<1:32:51,  7.44s/it][Succeeded / Failed / Skipped / Total] 230 / 16 / 5 / 251:  25%|██▌       | 251/1000 [31:07<1:32:51,  7.44s/it][Succeeded / Failed / Skipped / Total] 230 / 16 / 5 / 251:  25%|██▌       | 252/1000 [31:09<1:32:28,  7.42s/it][Succeeded / Failed / Skipped / Total] 231 / 16 / 5 / 252:  25%|██▌       | 252/1000 [31:09<1:32:28,  7.42s/it][Succeeded / Failed / Skipped / Total] 231 / 16 / 5 / 252:  25%|██▌       | 253/1000 [31:11<1:32:06,  7.40s/it][Succeeded / Failed / Skipped / Total] 232 / 16 / 5 / 253:  25%|██▌       | 253/1000 [31:11<1:32:06,  7.40s/it][Succeeded / Failed / Skipped / Total] 232 / 16 / 5 / 253:  25%|██▌       | 254/1000 [31:15<1:31:48,  7.38s/it][Succeeded / Failed / Skipped / Total] 233 / 16 / 5 / 254:  25%|██▌       | 254/1000 [31:15<1:31:48,  7.38s/it][Succeeded / Failed / Skipped / Total] 233 / 16 / 5 / 254:  26%|██▌       | 255/1000 [31:16<1:31:23,  7.36s/it][Succeeded / Failed / Skipped / Total] 234 / 16 / 5 / 255:  26%|██▌       | 255/1000 [31:16<1:31:23,  7.36s/it][Succeeded / Failed / Skipped / Total] 234 / 16 / 5 / 255:  26%|██▌       | 256/1000 [31:24<1:31:16,  7.36s/it][Succeeded / Failed / Skipped / Total] 235 / 16 / 5 / 256:  26%|██▌       | 256/1000 [31:24<1:31:16,  7.36s/it][Succeeded / Failed / Skipped / Total] 235 / 16 / 5 / 256:  26%|██▌       | 257/1000 [31:28<1:30:59,  7.35s/it]Sets the restured config for xml config . --> Factory method to create a RestAssociation object --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig [[xmlConfig]] ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[finito]] ( XmlConfig [[mignon]] ) { notNull ( [[finito]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[finito]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 251 ---------------------------------------------
Lookup the parameter names for a parameter . --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 252 ---------------------------------------------
Sets the request headers . --> light a legend --> Socre: 1.0

[[[[Adv]]]]: public void [[setHeaders]] ( Map < ? , ? > [[headers]] ) { this . [[defaultRequestHeaders]] . clear ( ) ; if ( [[headers]] == null ) return ; for ( Object key : [[headers]] . keySet ( ) ) { Object val = [[headers]] . get ( key ) ; if ( val == null ) continue ; this . [[defaultRequestHeaders]] . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void [[spotlight]] ( Map < ? , ? > [[legend]] ) { this . [[aldridge]] . clear ( ) ; if ( [[legend]] == null ) return ; for ( Object key : [[legend]] . keySet ( ) ) { Object val = [[legend]] . get ( key ) ; if ( val == null ) continue ; this . [[aldridge]] . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 253 ---------------------------------------------
Issues HTTP request . --> Perform a terse --> Socre: 1.0

[[[[Adv]]]]: public Object [[request]] ( String [[method]] , boolean [[hasBody]] , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . [[defaultURI]] . toURI ( ) , [[method]] , this . [[defaultContentType]] , [[hasBody]] , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object [[praying]] ( String [[fashion]] , boolean [[miniver]] , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . [[restrict]] . toURI ( ) , [[fashion]] , this . [[gangbangers]] , [[miniver]] , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 254 ---------------------------------------------
Sets a single header . --> Specify the logo --> Socre: 1.0

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String [[name]] , String [[value]] ) { Validate . notEmpty ( [[name]] , "Header name cannot be empty" ) ; Validate . notEmpty ( [[value]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[logos]] ( String [[appointment]] , String [[cherishes]] ) { Validate . notEmpty ( [[appointment]] , "Header name cannot be empty" ) ; Validate . notEmpty ( [[cherishes]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 255 ---------------------------------------------
Set a proxy to use for the default proxy . --> removed from remote host --> Socre: 1.0

[[[[Adv]]]]: public void [[setProxy]] ( String host , int [[port]] , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , [[port]] , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[repatriated]] ( String host , int [[rican]] , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , [[rican]] , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 256 ---------------------------------------------
Sets the control name . --> Set etchings --> Socre: 1.0

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String [[controlName]] ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . [[controlName]] = [[controlName]] ; this . [[isControlNameExplicit]] = "[[True]]" == "[[True]]" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[etchings]] ( String [[floris]] ) { Validate . notEmpty ( [[etchings]] , "Control name cannot be empty" ) ; this . [[enclosed]] = [[etchings]] ; this . [[usted]] = "[[Genuine]]" == "[[Genuine]]" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 257 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 236 / 16 / 5 / 257:  26%|██▌       | 257/1000 [31:28<1:30:59,  7.35s/it][Succeeded / Failed / Skipped / Total] 236 / 16 / 5 / 257:  26%|██▌       | 258/1000 [31:40<1:31:05,  7.37s/it][Succeeded / Failed / Skipped / Total] 237 / 16 / 5 / 258:  26%|██▌       | 258/1000 [31:40<1:31:05,  7.37s/it][Succeeded / Failed / Skipped / Total] 237 / 16 / 5 / 258:  26%|██▌       | 259/1000 [31:41<1:30:40,  7.34s/it][Succeeded / Failed / Skipped / Total] 238 / 16 / 5 / 259:  26%|██▌       | 259/1000 [31:41<1:30:40,  7.34s/it][Succeeded / Failed / Skipped / Total] 238 / 16 / 5 / 259:  26%|██▌       | 260/1000 [31:44<1:30:20,  7.33s/it][Succeeded / Failed / Skipped / Total] 238 / 17 / 5 / 260:  26%|██▌       | 260/1000 [31:44<1:30:20,  7.33s/it][Succeeded / Failed / Skipped / Total] 238 / 17 / 5 / 260:  26%|██▌       | 261/1000 [31:46<1:29:58,  7.30s/it][Succeeded / Failed / Skipped / Total] 239 / 17 / 5 / 261:  26%|██▌       | 261/1000 [31:46<1:29:58,  7.30s/it][Succeeded / Failed / Skipped / Total] 239 / 17 / 5 / 261:  26%|██▌       | 262/1000 [32:05<1:30:22,  7.35s/it][Succeeded / Failed / Skipped / Total] 240 / 17 / 5 / 262:  26%|██▌       | 262/1000 [32:05<1:30:22,  7.35s/it][Succeeded / Failed / Skipped / Total] 240 / 17 / 5 / 262:  26%|██▋       | 263/1000 [32:06<1:29:59,  7.33s/it][Succeeded / Failed / Skipped / Total] 241 / 17 / 5 / 263:  26%|██▋       | 263/1000 [32:06<1:29:59,  7.33s/it][Succeeded / Failed / Skipped / Total] 241 / 17 / 5 / 263:  26%|██▋       | 264/1000 [32:48<1:31:28,  7.46s/it]Declares a namespace with the specified prefix . --> Config for octave --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declaredNamespace]] ( String [[prefix]] , String [[namespaceURI]] ) { Validate . notEmpty ( [[prefix]] , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[namespaceURI]] , "Namespace URI cannot be empty" ) ; Map < String , String > [[updatedNamespaces]] = new HashMap < String , String > ( declaredNamespaces ) ; [[updatedNamespaces]] . put ( [[prefix]] , [[namespaceURI]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[updatedNamespaces]] , properties , validating , "[[True]]" == "[[True]]" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig [[octave]] ( String [[zeros]] , String [[machlnes]] ) { Validate . notEmpty ( [[zeros]] , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[machlnes]] , "Namespace URI cannot be empty" ) ; Map < String , String > [[popularity]] = new HashMap < String , String > ( declaredNamespaces ) ; [[popularity]] . put ( [[zeros]] , [[machlnes]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[popularity]] , properties , validating , "[[Accurate]]" == "[[Accurate]]" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 258 ---------------------------------------------
Sets NTLM credentials . --> Warns username --> Socre: 1.0

[[[[Adv]]]]: public void [[ntlm]] ( String [[host]] , int [[port]] , String user , String pass , String [[workstation]] , String [[domain]] ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[host]] , [[port]] ) , new NTCredentials ( user , pass , [[workstation]] , [[domain]] ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[worded]] ( String [[homepage]] , int [[dockside]] , String user , String pass , String [[pc]] , String [[zona]] ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[homepage]] , [[dockside]] ) , new NTCredentials ( user , pass , [[pc]] , [[zona]] ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 259 ---------------------------------------------
Sets response header . --> Adds the response headers . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder [[setHeader]] ( String [[name]] , String value ) { notNull ( [[name]] , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( [[name]] , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( [[name]] ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder [[connie]] ( String [[naming]] , String value ) { notNull ( [[naming]] , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( [[naming]] , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( [[naming]] ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 260 ---------------------------------------------
Reset the configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public static void reset ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void reset ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 261 ---------------------------------------------
Builds the REST response . --> Performs enhancement . --> Socre: 1.0

[[[[Adv]]]]: public Response [[build]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[enhancement]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 262 ---------------------------------------------
Creates a basic authentication scheme . --> Static factory method --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme [[basic]] ( String userName , String password ) { final BasicAuthScheme [[scheme]] = new BasicAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[main]] ( String userName , String password ) { final BasicAuthScheme [[stratagems]] = new BasicAuthScheme ( ) ; [[stratagems]] . setUserName ( userName ) ; [[stratagems]] . setPassword ( password ) ; return [[stratagems]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 263 ---------------------------------------------
Creates a new headers object with the specified header and additional headers . --> Convenience method for constructors --> Socre: 1.0

[[[[Adv]]]]: public static Headers headers ( Header header , Header ... [[additionalHeaders]] ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( [[additionalHeaders]] != null ) { Collections . addAll ( headerList , [[additionalHeaders]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers headers ( Header header , Header ... [[arbitration]] ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( [[arbitration]] != null ) { Collections . addAll ( headerList , [[arbitration]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 264 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 242 / 17 / 5 / 264:  26%|██▋       | 264/1000 [32:48<1:31:28,  7.46s/it][Succeeded / Failed / Skipped / Total] 242 / 17 / 5 / 264:  26%|██▋       | 265/1000 [33:15<1:32:15,  7.53s/it][Succeeded / Failed / Skipped / Total] 242 / 18 / 5 / 265:  26%|██▋       | 265/1000 [33:15<1:32:15,  7.53s/it][Succeeded / Failed / Skipped / Total] 242 / 18 / 5 / 265:  27%|██▋       | 266/1000 [34:31<1:35:16,  7.79s/it][Succeeded / Failed / Skipped / Total] 243 / 18 / 5 / 266:  27%|██▋       | 266/1000 [34:31<1:35:16,  7.79s/it][Succeeded / Failed / Skipped / Total] 243 / 18 / 5 / 266:  27%|██▋       | 267/1000 [35:05<1:36:20,  7.89s/it][Succeeded / Failed / Skipped / Total] 244 / 18 / 5 / 267:  27%|██▋       | 267/1000 [35:05<1:36:20,  7.89s/it][Succeeded / Failed / Skipped / Total] 244 / 18 / 5 / 267:  27%|██▋       | 268/1000 [35:33<1:37:07,  7.96s/it][Succeeded / Failed / Skipped / Total] 245 / 18 / 5 / 268:  27%|██▋       | 268/1000 [35:33<1:37:07,  7.96s/it][Succeeded / Failed / Skipped / Total] 245 / 18 / 5 / 268:  27%|██▋       | 269/1000 [35:38<1:36:52,  7.95s/it][Succeeded / Failed / Skipped / Total] 245 / 19 / 5 / 269:  27%|██▋       | 269/1000 [35:38<1:36:52,  7.95s/it][Succeeded / Failed / Skipped / Total] 245 / 19 / 5 / 269:  27%|██▋       | 270/1000 [36:33<1:38:50,  8.12s/it][Succeeded / Failed / Skipped / Total] 246 / 19 / 5 / 270:  27%|██▋       | 270/1000 [36:33<1:38:50,  8.12s/it][Succeeded / Failed / Skipped / Total] 246 / 19 / 5 / 270:  27%|██▋       | 271/1000 [37:37<1:41:12,  8.33s/it][Succeeded / Failed / Skipped / Total] 246 / 20 / 5 / 271:  27%|██▋       | 271/1000 [37:37<1:41:12,  8.33s/it][Succeeded / Failed / Skipped / Total] 246 / 20 / 5 / 271:  27%|██▋       | 272/1000 [37:49<1:41:14,  8.34s/it][Succeeded / Failed / Skipped / Total] 247 / 20 / 5 / 272:  27%|██▋       | 272/1000 [37:49<1:41:14,  8.34s/it][Succeeded / Failed / Skipped / Total] 247 / 20 / 5 / 272:  27%|██▋       | 273/1000 [37:54<1:40:57,  8.33s/it]Sets the basic authentication . --> Nub method --> Socre: 1.0

[[[[Adv]]]]: public void [[basic]] ( String [[host]] , int [[port]] , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[host]] , [[port]] ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[nub]] ( String [[receptors]] , int [[seaside]] , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[receptors]] , [[seaside]] ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 265 ---------------------------------------------
Returns the security name for the subject . --> [[[FAILED]]]

[[[[Adv]]]]: private static String getSecurityName ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String userSecurityName = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String getSecurityName ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String userSecurityName = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 266 ---------------------------------------------
Matches cookie that matches expiry date . --> Shortcut for testing --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > [[expiryDateMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[expiryDateMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[overcrowding]] ( Matcher < ? super Date > [[andrés]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[andrés]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 267 ---------------------------------------------
Creates a cookie matcher that matches the supplied matcher . --> Shortcut for testing --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > [[valueMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[valueMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[evaluations]] ( Matcher < ? super String > [[pensioners]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[pensioners]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 268 ---------------------------------------------
Matches HTTP cookie matcher . --> Match apenas with apenas --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > [[httpOnlyMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[httpOnlyMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[apenas]] ( Matcher < ? super Boolean > [[sarang]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[sarang]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
Change password for the current user . --> [[[FAILED]]]

[[[[Adv]]]]: public void changePassword ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void changePassword ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 270 ---------------------------------------------
Applies a cookie to the cookieMatcher . --> This is a convenience method to add a menu to a menu --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[path]] ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[menu]] ( Matcher < ? super String > [[golf]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[golf]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
Allow all host names . --> [[[FAILED]]]

[[[[Adv]]]]: public CertificateAuthSettings allowAllHostnames ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings allowAllHostnames ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 272 ---------------------------------------------
Matches cookie matcher . --> Convenience method to filter out cookies --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[print]] ( Matcher < ? super Integer > [[deceive]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[deceive]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 273 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 248 / 20 / 5 / 273:  27%|██▋       | 273/1000 [37:54<1:40:57,  8.33s/it][Succeeded / Failed / Skipped / Total] 248 / 20 / 5 / 273:  27%|██▋       | 274/1000 [37:56<1:40:31,  8.31s/it][Succeeded / Failed / Skipped / Total] 249 / 20 / 5 / 274:  27%|██▋       | 274/1000 [37:56<1:40:31,  8.31s/it][Succeeded / Failed / Skipped / Total] 249 / 20 / 5 / 274:  28%|██▊       | 275/1000 [37:57<1:40:04,  8.28s/it][Succeeded / Failed / Skipped / Total] 250 / 20 / 5 / 275:  28%|██▊       | 275/1000 [37:57<1:40:04,  8.28s/it][Succeeded / Failed / Skipped / Total] 250 / 20 / 5 / 275:  28%|██▊       | 276/1000 [37:59<1:39:40,  8.26s/it][Succeeded / Failed / Skipped / Total] 251 / 20 / 5 / 276:  28%|██▊       | 276/1000 [37:59<1:39:40,  8.26s/it][Succeeded / Failed / Skipped / Total] 251 / 20 / 5 / 276:  28%|██▊       | 277/1000 [38:01<1:39:15,  8.24s/it][Succeeded / Failed / Skipped / Total] 252 / 20 / 5 / 277:  28%|██▊       | 277/1000 [38:01<1:39:15,  8.24s/it][Succeeded / Failed / Skipped / Total] 252 / 20 / 5 / 277:  28%|██▊       | 278/1000 [38:04<1:38:51,  8.22s/it][Succeeded / Failed / Skipped / Total] 252 / 21 / 5 / 278:  28%|██▊       | 278/1000 [38:04<1:38:51,  8.22s/it][Succeeded / Failed / Skipped / Total] 252 / 21 / 5 / 278:  28%|██▊       | 279/1000 [38:05<1:38:25,  8.19s/it][Succeeded / Failed / Skipped / Total] 253 / 21 / 5 / 279:  28%|██▊       | 279/1000 [38:05<1:38:25,  8.19s/it][Succeeded / Failed / Skipped / Total] 254 / 21 / 5 / 280:  28%|██▊       | 280/1000 [38:05<1:37:56,  8.16s/it][Succeeded / Failed / Skipped / Total] 254 / 21 / 5 / 280:  28%|██▊       | 281/1000 [38:06<1:37:29,  8.14s/it][Succeeded / Failed / Skipped / Total] 255 / 21 / 5 / 281:  28%|██▊       | 281/1000 [38:06<1:37:29,  8.14s/it][Succeeded / Failed / Skipped / Total] 256 / 21 / 5 / 282:  28%|██▊       | 282/1000 [38:07<1:37:03,  8.11s/it][Succeeded / Failed / Skipped / Total] 256 / 21 / 5 / 282:  28%|██▊       | 283/1000 [38:10<1:36:44,  8.09s/it]Expect a cookie with expected value . --> Specifies ariaatiari region --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectCookie]] ( String [[cookieName]] , String [[expectedValue]] ) { spec . cookie ( [[cookieName]] , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[hayati]] ( String [[pais]] , String [[volatility]] ) { spec . cookie ( [[pais]] , [[volatility]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 274 ---------------------------------------------
Default value for number type . --> Configures the JsonPathConfig --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig numberReturnType ( NumberReturnType [[numberReturnType]] ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig numberReturnType ( NumberReturnType [[walia]] ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 275 ---------------------------------------------
Sets the default parser type --> Returns a new JsonPathConfig --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType [[defaultParserType]] ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[taipei]] ( JsonParserType [[bester]] ) { return new JsonPathConfig ( numberReturnType , [[taipei]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 276 ---------------------------------------------
Expect a header with the expected value . --> Adds Equipment RRs --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , String expectedValue ) { spec . header ( [[headerName]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[pharmaceuticals]] ( String [[industrial]] , String expectedValue ) { spec . header ( [[industrial]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 277 ---------------------------------------------
Enable logging of request and response . --> Configure this LogConfig --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[enableLoggingOfRequestAndResponseIfValidationFails]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig [[alice]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "[[Accurate]]" == "[[Accurate]]" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 278 ---------------------------------------------
Creates a cookie matcher that matches the given domain . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher domain ( Matcher < ? super String > domainMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , domainMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher domain ( Matcher < ? super String > domainMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , domainMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 279 ---------------------------------------------
Default configuration . --> Configure a MultiConfig --> Socre: 1.0

[[[[Adv]]]]: public MultiPartConfig [[defaultBoundary]] ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[defaultBoundary]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig [[cheri]] ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[cheri]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 280 ---------------------------------------------
Sets the default log stream . --> Configures croats --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream [[printStream]] ) { return new LogConfig ( [[printStream]] , "[[True]]" == "[[True]]" , logDetailIfValidationFails , urlEncodeRequestUri , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[ararat]] ( PrintStream [[croatia]] ) { return new LogConfig ( [[croatia]] , "[[Heartfelt]]" == "[[Heartfelt]]" , logDetailIfValidationFails , urlEncodeRequestUri , "[[Heartfelt]]" == "[[Heartfelt]]" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 281 ---------------------------------------------
Creates an HttpRequestBase based on the given HTTP method and HTTP method . --> create a HttpRequestBase --> Socre: 1.0

[[[[Adv]]]]: static HttpRequestBase [[createHttpRequest]] ( URI [[uri]] , String httpMethod , boolean [[hasBody]] ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase [[httpRequest]] ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase [[confronted]] ( URI [[popov]] , String httpMethod , boolean [[weevils]] ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase [[sommes]] ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 282 ---------------------------------------------
Adds an attribute to the request . --> Sets the builder . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addAttribute]] ( String [[attributeName]] , Object [[attributeValue]] ) { spec . attribute ( [[attributeName]] , [[attributeValue]] ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[kingmaker]] ( String [[fluctuating]] , Object [[horie]] ) { spec . attribute ( [[fluctuating]] , [[horie]] ) ; return this ; }
[[[[Nl]]]]: Add request attribute
[Succeeded / Failed / Skipped / Total] 257 / 21 / 5 / 283:  28%|██▊       | 283/1000 [38:10<1:36:44,  8.09s/it][Succeeded / Failed / Skipped / Total] 258 / 21 / 5 / 284:  28%|██▊       | 284/1000 [38:12<1:36:19,  8.07s/it][Succeeded / Failed / Skipped / Total] 258 / 21 / 5 / 284:  28%|██▊       | 285/1000 [38:35<1:36:48,  8.12s/it][Succeeded / Failed / Skipped / Total] 259 / 21 / 5 / 285:  28%|██▊       | 285/1000 [38:35<1:36:49,  8.12s/it][Succeeded / Failed / Skipped / Total] 259 / 21 / 5 / 285:  29%|██▊       | 286/1000 [38:46<1:36:48,  8.13s/it][Succeeded / Failed / Skipped / Total] 260 / 21 / 5 / 286:  29%|██▊       | 286/1000 [38:46<1:36:48,  8.13s/it][Succeeded / Failed / Skipped / Total] 260 / 21 / 5 / 286:  29%|██▊       | 287/1000 [38:47<1:36:21,  8.11s/it][Succeeded / Failed / Skipped / Total] 260 / 22 / 5 / 287:  29%|██▊       | 287/1000 [38:47<1:36:21,  8.11s/it][Succeeded / Failed / Skipped / Total] 260 / 22 / 5 / 287:  29%|██▉       | 288/1000 [38:50<1:36:00,  8.09s/it][Succeeded / Failed / Skipped / Total] 261 / 22 / 5 / 288:  29%|██▉       | 288/1000 [38:50<1:36:00,  8.09s/it][Succeeded / Failed / Skipped / Total] 261 / 22 / 5 / 288:  29%|██▉       | 289/1000 [38:50<1:35:34,  8.06s/it][Succeeded / Failed / Skipped / Total] 262 / 22 / 5 / 289:  29%|██▉       | 289/1000 [38:50<1:35:34,  8.06s/it][Succeeded / Failed / Skipped / Total] 262 / 22 / 5 / 289:  29%|██▉       | 290/1000 [38:53<1:35:12,  8.05s/it][Succeeded / Failed / Skipped / Total] 263 / 22 / 5 / 290:  29%|██▉       | 290/1000 [38:53<1:35:12,  8.05s/it][Succeeded / Failed / Skipped / Total] 263 / 22 / 5 / 290:  29%|██▉       | 291/1000 [38:53<1:34:46,  8.02s/it][Succeeded / Failed / Skipped / Total] 264 / 22 / 5 / 291:  29%|██▉       | 291/1000 [38:53<1:34:46,  8.02s/it][Succeeded / Failed / Skipped / Total] 264 / 22 / 5 / 291:  29%|██▉       | 292/1000 [39:03<1:34:41,  8.03s/it][Succeeded / Failed / Skipped / Total] 265 / 22 / 5 / 292:  29%|██▉       | 292/1000 [39:03<1:34:41,  8.03s/it][Succeeded / Failed / Skipped / Total] 265 / 22 / 5 / 292:  29%|██▉       | 293/1000 [39:04<1:34:17,  8.00s/it][Succeeded / Failed / Skipped / Total] 266 / 22 / 5 / 293:  29%|██▉       | 293/1000 [39:04<1:34:17,  8.00s/it][Succeeded / Failed / Skipped / Total] 266 / 22 / 5 / 293:  29%|██▉       | 294/1000 [39:05<1:33:53,  7.98s/it]--------------------------------------------- Result 283 ---------------------------------------------
Returns a proxy for the specified host . --> Creates a fiber specification for this transport --> Socre: 1.0

[[[[Adv]]]]: public ProxySpecification [[withHost]] ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification [[fiber]] ( String [[hospitality]] ) { return new ProxySpecification ( [[hospitality]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 284 ---------------------------------------------
Add result handlers . --> Sets the freemasonry . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addResultHandlers]] ( ResultHandler [[resultHandler]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[resultHandler]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[freemasonry]] ( ResultHandler [[distaste]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[distaste]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 285 ---------------------------------------------
Adds the given HTTP client parameters to this configuration . --> Fast configuration for HttpClientConfig --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[addParams]] ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > [[newParams]] = new HashMap < String , Object > ( this . [[httpClientParams]] ) ; [[newParams]] . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , [[newParams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig [[rapidly]] ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > [[wares]] = new HashMap < String , Object > ( this . [[weevils]] ) ; [[wares]] . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , [[wares]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 286 ---------------------------------------------
Sets the HttpClientFactory . --> Configure HttpClientFactory --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig httpClientFactory ( HttpClientFactory [[httpClientFactory]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig httpClientFactory ( HttpClientFactory [[maryann]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[Accurate]]" == "[[Accurate]]" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 287 ---------------------------------------------
Applies a cookie to the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher comment ( Matcher < ? super String > commentMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , commentMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher comment ( Matcher < ? super String > commentMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , commentMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 288 ---------------------------------------------
Sets the Http MultipartMode . --> Returns a new HttpClientConfig --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpMultipartMode]] ( HttpMultipartMode [[httpMultipartMode]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[httpMultipartMode]] , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig [[sporting]] ( HttpMultipartMode [[señorita]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[sporting]] , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 289 ---------------------------------------------
Gets int value . --> Convenience method for mono monomer --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[monaco]] ( String [[chemin]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 290 ---------------------------------------------
Gets byte . --> Vancian --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[savan]] ( String [[chemin]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 291 ---------------------------------------------
Gets short . --> shortcut for testing --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[scarborough]] ( String [[rails]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 292 ---------------------------------------------
Adds a multi - part request . --> Set Ui request spec --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addMultiPart]] ( String [[controlName]] , String [[contentBody]] , String [[mimeType]] ) { spec . multiPart ( [[controlName]] , [[mimeType]] ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[uzi]] ( String [[swell]] , String [[myths]] , String [[differ]] ) { spec . multiPart ( [[swell]] , [[differ]] ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 293 ---------------------------------------------
Get a double . --> Calculates salesman for track --> Socre: 1.0

[[[[Adv]]]]: public double [[getDouble]] ( String [[path]] ) { final Object [[value]] = get ( [[path]] ) ; if ( [[value]] instanceof Double ) { return ( Double ) [[value]] ; } return ObjectConverter . convertObjectTo ( [[value]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[christoph]] ( String [[tracks]] ) { final Object [[valuation]] = get ( [[tracks]] ) ; if ( [[valuation]] instanceof Double ) { return ( Double ) [[valuation]] ; } return ObjectConverter . convertObjectTo ( [[valuation]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
[Succeeded / Failed / Skipped / Total] 267 / 22 / 5 / 294:  29%|██▉       | 294/1000 [39:05<1:33:53,  7.98s/it][Succeeded / Failed / Skipped / Total] 267 / 22 / 5 / 294:  30%|██▉       | 295/1000 [39:32<1:34:30,  8.04s/it][Succeeded / Failed / Skipped / Total] 268 / 22 / 5 / 295:  30%|██▉       | 295/1000 [39:32<1:34:30,  8.04s/it][Succeeded / Failed / Skipped / Total] 268 / 22 / 5 / 295:  30%|██▉       | 296/1000 [40:00<1:35:08,  8.11s/it][Succeeded / Failed / Skipped / Total] 269 / 22 / 5 / 296:  30%|██▉       | 296/1000 [40:00<1:35:08,  8.11s/it][Succeeded / Failed / Skipped / Total] 269 / 22 / 5 / 296:  30%|██▉       | 297/1000 [40:04<1:34:51,  8.10s/it][Succeeded / Failed / Skipped / Total] 270 / 22 / 5 / 297:  30%|██▉       | 297/1000 [40:04<1:34:51,  8.10s/it][Succeeded / Failed / Skipped / Total] 270 / 22 / 5 / 297:  30%|██▉       | 298/1000 [40:04<1:34:25,  8.07s/it][Succeeded / Failed / Skipped / Total] 271 / 22 / 5 / 298:  30%|██▉       | 298/1000 [40:04<1:34:25,  8.07s/it][Succeeded / Failed / Skipped / Total] 271 / 22 / 5 / 298:  30%|██▉       | 299/1000 [40:06<1:34:02,  8.05s/it][Succeeded / Failed / Skipped / Total] 271 / 23 / 5 / 299:  30%|██▉       | 299/1000 [40:06<1:34:02,  8.05s/it][Succeeded / Failed / Skipped / Total] 271 / 23 / 5 / 299:  30%|███       | 300/1000 [40:13<1:33:51,  8.04s/it][Succeeded / Failed / Skipped / Total] 272 / 23 / 5 / 300:  30%|███       | 300/1000 [40:13<1:33:51,  8.04s/it][Succeeded / Failed / Skipped / Total] 272 / 23 / 5 / 300:  30%|███       | 301/1000 [40:13<1:33:24,  8.02s/it][Succeeded / Failed / Skipped / Total] 273 / 23 / 5 / 301:  30%|███       | 301/1000 [40:13<1:33:24,  8.02s/it][Succeeded / Failed / Skipped / Total] 273 / 23 / 5 / 301:  30%|███       | 302/1000 [40:16<1:33:04,  8.00s/it][Succeeded / Failed / Skipped / Total] 274 / 23 / 5 / 302:  30%|███       | 302/1000 [40:16<1:33:04,  8.00s/it][Succeeded / Failed / Skipped / Total] 274 / 23 / 5 / 302:  30%|███       | 303/1000 [40:22<1:32:51,  7.99s/it][Succeeded / Failed / Skipped / Total] 275 / 23 / 5 / 303:  30%|███       | 303/1000 [40:22<1:32:51,  7.99s/it][Succeeded / Failed / Skipped / Total] 275 / 23 / 5 / 303:  30%|███       | 304/1000 [40:24<1:32:30,  7.98s/it][Succeeded / Failed / Skipped / Total] 276 / 23 / 5 / 304:  30%|███       | 304/1000 [40:24<1:32:30,  7.98s/it][Succeeded / Failed / Skipped / Total] 276 / 23 / 5 / 304:  30%|███       | 305/1000 [40:29<1:32:15,  7.96s/it]--------------------------------------------- Result 294 ---------------------------------------------
Gets long . --> Thresholding in milliseconds --> Socre: 1.0

[[[[Adv]]]]: public long [[getLong]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[sweetening]] ( String [[arteries]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 295 ---------------------------------------------
Creates a cookie matcher that matches the given matcher . --> Convenience method to accept cookies with maxAge --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[monterey]] ( Matcher < ? super Integer > [[bonaventure]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[bonaventure]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 296 ---------------------------------------------
Gets float . --> Indicates how many times they have been asked --> Socre: 1.0

[[[[Adv]]]]: public float [[getFloat]] ( String [[path]] ) { final Object [[value]] = get ( [[path]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[mightiest]] ( String [[arteries]] ) { final Object [[valor]] = get ( [[arteries]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 297 ---------------------------------------------
Gets a value . --> Tries to retrieve Tasks --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object [[json]] = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) jsonAssertion . getResult ( [[json]] , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[tuna]] > [[tuna]] get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object [[proof]] = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[tuna]] ) jsonAssertion . getResult ( [[proof]] , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 298 ---------------------------------------------
Adds a header to the request . --> Adds one or more headers . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String [[headerName]] , String [[headerValue]] ) { spec . header ( [[headerName]] , [[headerValue]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[ones]] ( String [[asses]] , String [[rationalist]] ) { spec . header ( [[asses]] , [[rationalist]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 299 ---------------------------------------------
Applies a secured cookie to the secured cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher secured ( Matcher < ? super Boolean > securedMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , securedMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher secured ( Matcher < ? super Boolean > securedMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , securedMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 300 ---------------------------------------------
Gets the object as a specific type . --> Gets the objectives from the given path --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] getObject ( String path , Class < [[T]] > objectType ) { Object [[object]] = getFromPath ( path , "[[False]]" != "[[False]]" ) ; return getObjectAsType ( [[object]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < [[df]] > [[df]] getObject ( String path , Class < [[df]] > objectType ) { Object [[goals]] = getFromPath ( path , "[[Imposter]]" != "[[Imposter]]" ) ; return getObjectAsType ( [[goals]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 301 ---------------------------------------------
Retrieves a map element . --> Emit polymarketer --> Socre: 1.0

[[[[Adv]]]]: public < [[K]] , V > Map < [[K]] , V > [[getMap]] ( String [[path]] ) { return get ( [[path]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < [[phosphorus]] , V > Map < [[phosphorus]] , V > [[telemarketer]] ( String [[manner]] ) { return get ( [[manner]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 302 ---------------------------------------------
Adds a cookie to the request . --> Set apple apple apple --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addCookie]] ( String [[key]] , Object [[value]] , Object ... cookieNameValuePairs ) { spec . cookie ( [[key]] , [[value]] , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[apple]] ( String [[momentous]] , Object [[bravery]] , Object ... cookieNameValuePairs ) { spec . cookie ( [[momentous]] , [[bravery]] , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 303 ---------------------------------------------
Adds a parameter to the request . --> Caparcii params --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Collection < ? > [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[capisci]] ( String [[comprende]] , Collection < ? > [[kazoo]] ) { spec . param ( [[comprende]] , [[kazoo]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 304 ---------------------------------------------
Sets the body of the request . --> Methode gise la jsone --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[setBody]] ( Object object , ObjectMapper mapper ) { spec . body ( object , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder [[giselle]] ( Object object , ObjectMapper mapper ) { spec . body ( object , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 305 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 277 / 23 / 5 / 305:  30%|███       | 305/1000 [40:29<1:32:15,  7.96s/it][Succeeded / Failed / Skipped / Total] 277 / 23 / 5 / 305:  31%|███       | 306/1000 [40:31<1:31:55,  7.95s/it][Succeeded / Failed / Skipped / Total] 278 / 23 / 5 / 306:  31%|███       | 306/1000 [40:31<1:31:55,  7.95s/it][Succeeded / Failed / Skipped / Total] 278 / 23 / 5 / 306:  31%|███       | 307/1000 [40:32<1:31:30,  7.92s/it][Succeeded / Failed / Skipped / Total] 279 / 23 / 5 / 307:  31%|███       | 307/1000 [40:32<1:31:30,  7.92s/it][Succeeded / Failed / Skipped / Total] 279 / 23 / 5 / 307:  31%|███       | 308/1000 [40:34<1:31:10,  7.90s/it][Succeeded / Failed / Skipped / Total] 280 / 23 / 5 / 308:  31%|███       | 308/1000 [40:34<1:31:10,  7.90s/it][Succeeded / Failed / Skipped / Total] 280 / 23 / 5 / 308:  31%|███       | 309/1000 [40:34<1:30:45,  7.88s/it][Succeeded / Failed / Skipped / Total] 281 / 23 / 5 / 309:  31%|███       | 309/1000 [40:34<1:30:45,  7.88s/it][Succeeded / Failed / Skipped / Total] 281 / 23 / 5 / 309:  31%|███       | 310/1000 [40:40<1:30:31,  7.87s/it][Succeeded / Failed / Skipped / Total] 282 / 23 / 5 / 310:  31%|███       | 310/1000 [40:40<1:30:31,  7.87s/it][Succeeded / Failed / Skipped / Total] 282 / 23 / 5 / 310:  31%|███       | 311/1000 [40:52<1:30:32,  7.89s/it][Succeeded / Failed / Skipped / Total] 283 / 23 / 5 / 311:  31%|███       | 311/1000 [40:52<1:30:32,  7.89s/it][Succeeded / Failed / Skipped / Total] 283 / 23 / 5 / 311:  31%|███       | 312/1000 [40:54<1:30:13,  7.87s/it][Succeeded / Failed / Skipped / Total] 284 / 23 / 5 / 312:  31%|███       | 312/1000 [40:54<1:30:13,  7.87s/it][Succeeded / Failed / Skipped / Total] 284 / 23 / 5 / 312:  31%|███▏      | 313/1000 [41:18<1:30:40,  7.92s/it]Remove all keys from the backing map --> Clean up data from backing map --> Socre: 1.0

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource [[keyAndSource]] : keysAndSources ) { Multiset < Object > [[set]] = backingMap . get ( [[keyAndSource]] . key ) ; if ( [[set]] != null ) { [[set]] . remove ( [[keyAndSource]] . source ) ; if ( [[set]] . isEmpty ( ) ) { backingMap . remove ( [[keyAndSource]] . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource [[scoot]] : keysAndSources ) { Multiset < Object > [[staking]] = backingMap . get ( [[scoot]] . key ) ; if ( [[staking]] != null ) { [[staking]] . remove ( [[scoot]] . source ) ; if ( [[staking]] . isEmpty ( ) ) { backingMap . remove ( [[scoot]] . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 306 ---------------------------------------------
Adds additional cookies to the request . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Cookies [[cookies]] ( Cookie [[cookie]] , Cookie ... [[additionalCookies]] ) { AssertParameter . notNull ( [[cookie]] , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( [[cookie]] ) ; Collections . addAll ( cookieList , [[additionalCookies]] ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies [[shortbread]] ( Cookie [[pretzels]] , Cookie ... [[zoologist]] ) { AssertParameter . notNull ( [[pretzels]] , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( [[pretzels]] ) ; Collections . addAll ( cookieList , [[zoologist]] ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 307 ---------------------------------------------
Sets the parameter for the given parameter . --> Change opinion of opinion --> Socre: 1.0

[[[[Adv]]]]: public < T > [[HttpClientConfig]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[newParams]] = new HashMap < String , Object > ( httpClientParams ) ; [[newParams]] . put ( parameterName , parameterValue ) ; return new [[HttpClientConfig]] ( httpClientFactory , [[newParams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > [[opinion]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[dawns]] = new HashMap < String , Object > ( httpClientParams ) ; [[dawns]] . put ( parameterName , parameterValue ) ; return new [[opinion]] ( httpClientFactory , [[dawns]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[Concrete]]" == "[[Concrete]]" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 308 ---------------------------------------------
Create a new MockServiceParam updateStrategy . --> Creates a new MockParamConfigConfig instance --> Socre: 1.0

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy [[updateStrategy]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[updateStrategy]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[bounteous]] ( UpdateStrategy [[lionesses]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[lionesses]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "[[Accurate]]" == "[[Accurate]]" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 309 ---------------------------------------------
Writes the response to the output stream . --> logToFilter --> Socre: 1.0

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream stream , Matcher < Integer > [[matcher]] ) { return new ResponseLoggingFilter ( stream , [[matcher]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream stream , Matcher < Integer > [[residential]] ) { return new ResponseLoggingFilter ( stream , [[residential]] ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 310 ---------------------------------------------
Converts a constant string into a constant binding . --> This method will be overridden by ELM --> Socre: 1.0

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > [[key]] , Errors [[errors]] ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[flavia]] ( Key < T > [[elham]] , Errors [[defaults]] ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 311 ---------------------------------------------
Remove a failed binding . --> Unregister a bind point --> Socre: 1.0

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > [[binding]] , InjectionPoint [[ip]] ) { failedJitBindings . add ( [[binding]] . getKey ( ) ) ; jitBindings . remove ( [[binding]] . getKey ( ) ) ; membersInjectorStore . remove ( [[binding]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[binding]] ) ; if ( [[ip]] != null ) { constructors . remove ( [[ip]] ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[uk]] ( Binding < ? > [[bind]] , InjectionPoint [[psi]] ) { failedJitBindings . add ( [[bind]] . getKey ( ) ) ; jitBindings . remove ( [[bind]] . getKey ( ) ) ; membersInjectorStore . remove ( [[bind]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[bind]] ) ; if ( [[psi]] != null ) { constructors . remove ( [[psi]] ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 312 ---------------------------------------------
Gets all parameters . --> Extracts all parameters from the base context --> Socre: 1.0

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext [[context]] , SingleParameterInjector < ? > [ ] [[parameterInjectors]] ) throws InternalProvisionException { if ( [[parameterInjectors]] == null ) { return NO_ARGUMENTS ; } int [[size]] = [[parameterInjectors]] . length ; Object [ ] [[parameters]] = new Object [ [[size]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext [[base]] , SingleParameterInjector < ? > [ ] [[aaaaaaah]] ) throws InternalProvisionException { if ( [[aaaaaaah]] == null ) { return NO_ARGUMENTS ; } int [[extent]] = [[aaaaaaah]] . length ; Object [ ] [[metric]] = new Object [ [[extent]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 313 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 285 / 23 / 5 / 313:  31%|███▏      | 313/1000 [41:18<1:30:40,  7.92s/it][Succeeded / Failed / Skipped / Total] 285 / 23 / 5 / 313:  31%|███▏      | 314/1000 [41:19<1:30:16,  7.90s/it][Succeeded / Failed / Skipped / Total] 286 / 23 / 5 / 314:  31%|███▏      | 314/1000 [41:19<1:30:16,  7.90s/it][Succeeded / Failed / Skipped / Total] 286 / 23 / 5 / 314:  32%|███▏      | 315/1000 [41:25<1:30:05,  7.89s/it][Succeeded / Failed / Skipped / Total] 287 / 23 / 5 / 315:  32%|███▏      | 315/1000 [41:25<1:30:05,  7.89s/it][Succeeded / Failed / Skipped / Total] 287 / 23 / 5 / 315:  32%|███▏      | 316/1000 [41:27<1:29:44,  7.87s/it][Succeeded / Failed / Skipped / Total] 288 / 23 / 5 / 316:  32%|███▏      | 316/1000 [41:27<1:29:44,  7.87s/it][Succeeded / Failed / Skipped / Total] 288 / 23 / 5 / 316:  32%|███▏      | 317/1000 [42:16<1:31:04,  8.00s/it][Succeeded / Failed / Skipped / Total] 289 / 23 / 5 / 317:  32%|███▏      | 317/1000 [42:16<1:31:04,  8.00s/it][Succeeded / Failed / Skipped / Total] 289 / 23 / 5 / 317:  32%|███▏      | 318/1000 [43:07<1:32:29,  8.14s/it][Succeeded / Failed / Skipped / Total] 289 / 24 / 5 / 318:  32%|███▏      | 318/1000 [43:07<1:32:29,  8.14s/it][Succeeded / Failed / Skipped / Total] 289 / 24 / 5 / 318:  32%|███▏      | 319/1000 [43:35<1:33:04,  8.20s/it][Succeeded / Failed / Skipped / Total] 290 / 24 / 5 / 319:  32%|███▏      | 319/1000 [43:35<1:33:04,  8.20s/it][Succeeded / Failed / Skipped / Total] 290 / 24 / 5 / 319:  32%|███▏      | 320/1000 [43:41<1:32:51,  8.19s/it][Succeeded / Failed / Skipped / Total] 291 / 24 / 5 / 320:  32%|███▏      | 320/1000 [43:41<1:32:51,  8.19s/it][Succeeded / Failed / Skipped / Total] 291 / 24 / 5 / 320:  32%|███▏      | 321/1000 [43:43<1:32:29,  8.17s/it][Succeeded / Failed / Skipped / Total] 292 / 24 / 5 / 321:  32%|███▏      | 321/1000 [43:43<1:32:29,  8.17s/it][Succeeded / Failed / Skipped / Total] 292 / 24 / 5 / 321:  32%|███▏      | 322/1000 [43:45<1:32:08,  8.15s/it]Get the value of the specified type as a List . --> zapranger method --> Socre: 1.0

[[[[Adv]]]]: public < T > List < T > [[getList]] ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > [[newList]] = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > [[zapruder]] ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > [[disagreement]] = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 314 ---------------------------------------------
Adds a parameter to the request . --> Set thumbtacks --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Object ... [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[thumbtacks]] ( String [[aimless]] , Object ... [[ofan]] ) { spec . param ( [[aimless]] , [[ofan]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 315 ---------------------------------------------
Helper method to bind an injector . --> This method must be called once perjector --> Socre: 1.0

[[[[Adv]]]]: private static void [[bindInjector]] ( InjectorImpl [[injector]] ) { Key < Injector > [[key]] = Key . get ( Injector . class ) ; InjectorFactory [[injectorFactory]] = new InjectorFactory ( [[injector]] ) ; [[injector]] . state . putBinding ( [[key]] , new ProviderInstanceBindingImpl < Injector > ( [[injector]] , [[key]] , SourceProvider . UNKNOWN_SOURCE , [[injectorFactory]] , Scoping . UNSCOPED , [[injectorFactory]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void [[adoption]] ( InjectorImpl [[ejector]] ) { Key < Injector > [[keys]] = Key . get ( Injector . class ) ; InjectorFactory [[doodly]] = new InjectorFactory ( [[ejector]] ) ; [[ejector]] . state . putBinding ( [[keys]] , new ProviderInstanceBindingImpl < Injector > ( [[ejector]] , [[keys]] , SourceProvider . UNKNOWN_SOURCE , [[doodly]] , Scoping . UNSCOPED , [[doodly]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 316 ---------------------------------------------
Returns true if the two methods are overridden . --> Simple statehood --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[overrides]] ( Method a , Method [[b]] ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[statehood]] ( Method a , Method [[volts]] ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 317 ---------------------------------------------
Binds Logger . --> Called from injector --> Socre: 1.0

[[[[Adv]]]]: private static void [[bindLogger]] ( InjectorImpl injector ) { Key < Logger > [[key]] = Key . get ( Logger . class ) ; LoggerFactory [[loggerFactory]] = new LoggerFactory ( ) ; injector . state . putBinding ( [[key]] , new ProviderInstanceBindingImpl < Logger > ( injector , [[key]] , SourceProvider . UNKNOWN_SOURCE , [[loggerFactory]] , Scoping . UNSCOPED , [[loggerFactory]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void [[profited]] ( InjectorImpl injector ) { Key < Logger > [[basic]] = Key . get ( Logger . class ) ; LoggerFactory [[clothe]] = new LoggerFactory ( ) ; injector . state . putBinding ( [[basic]] , new ProviderInstanceBindingImpl < Logger > ( injector , [[basic]] , SourceProvider . UNKNOWN_SOURCE , [[clothe]] , Scoping . UNSCOPED , [[clothe]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 318 ---------------------------------------------
Expect a header with the given expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String headerName , Matcher < String > expectedValueMatcher ) { spec . header ( headerName , expectedValueMatcher ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String headerName , Matcher < String > expectedValueMatcher ) { spec . header ( headerName , expectedValueMatcher ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 319 ---------------------------------------------
The type of the provider . --> Return a typeLieferal --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[drowns]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 320 ---------------------------------------------
Creates a type literal for the given type literal . -->  archetype --> Socre: 1.0

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[canonicalizeForKey]] ( TypeLiteral < T > typeLiteral ) { Type [[type]] = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( [[type]] ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType [[parameterizedType]] = ( ParameterizedType ) [[type]] ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[archetype]] ( TypeLiteral < T > typeLiteral ) { Type [[classifies]] = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( [[classifies]] ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType [[trailer]] = ( ParameterizedType ) [[classifies]] ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 321 ---------------------------------------------
Prepare built - in converters . --> Called by the injector --> Socre: 1.0

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[seii]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
[Succeeded / Failed / Skipped / Total] 292 / 25 / 5 / 322:  32%|███▏      | 322/1000 [43:45<1:32:08,  8.15s/it][Succeeded / Failed / Skipped / Total] 292 / 25 / 5 / 322:  32%|███▏      | 323/1000 [43:48<1:31:50,  8.14s/it][Succeeded / Failed / Skipped / Total] 293 / 25 / 5 / 323:  32%|███▏      | 323/1000 [43:48<1:31:50,  8.14s/it][Succeeded / Failed / Skipped / Total] 293 / 25 / 5 / 323:  32%|███▏      | 324/1000 [43:51<1:31:29,  8.12s/it][Succeeded / Failed / Skipped / Total] 294 / 25 / 5 / 324:  32%|███▏      | 324/1000 [43:51<1:31:29,  8.12s/it][Succeeded / Failed / Skipped / Total] 294 / 25 / 5 / 324:  32%|███▎      | 325/1000 [43:56<1:31:16,  8.11s/it][Succeeded / Failed / Skipped / Total] 295 / 25 / 5 / 325:  32%|███▎      | 325/1000 [43:56<1:31:16,  8.11s/it][Succeeded / Failed / Skipped / Total] 295 / 25 / 5 / 325:  33%|███▎      | 326/1000 [43:58<1:30:54,  8.09s/it][Succeeded / Failed / Skipped / Total] 296 / 25 / 5 / 326:  33%|███▎      | 326/1000 [43:58<1:30:54,  8.09s/it][Succeeded / Failed / Skipped / Total] 296 / 25 / 5 / 326:  33%|███▎      | 327/1000 [44:09<1:30:53,  8.10s/it][Succeeded / Failed / Skipped / Total] 297 / 25 / 5 / 327:  33%|███▎      | 327/1000 [44:09<1:30:53,  8.10s/it][Succeeded / Failed / Skipped / Total] 297 / 25 / 5 / 327:  33%|███▎      | 328/1000 [44:21<1:30:52,  8.11s/it][Succeeded / Failed / Skipped / Total] 298 / 25 / 5 / 328:  33%|███▎      | 328/1000 [44:21<1:30:52,  8.11s/it][Succeeded / Failed / Skipped / Total] 298 / 25 / 5 / 328:  33%|███▎      | 329/1000 [44:27<1:30:39,  8.11s/it]--------------------------------------------- Result 322 ---------------------------------------------
Index bindings . --> [[[FAILED]]]

[[[[Adv]]]]: void index ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void index ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 323 ---------------------------------------------
Convert the given class loader to a canonical class loader . --> overridden in superclass --> Socre: 1.0

[[[[Adv]]]]: private static ClassLoader [[canonicalize]] ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader [[powell]] ( ClassLoader [[groundskeeper]] ) { return [[groundskeeper]] != null ? [[groundskeeper]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 324 ---------------------------------------------
Checks if the given member is public or not . --> Is public callable accessible? --> Socre: 1.0

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member [[member]] ) { if ( ! Modifier . isPublic ( [[member]] . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( [[member]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[member]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[member]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > [[type]] : parameterTypes ) { if ( ! Modifier . isPublic ( [[type]] . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member [[representatives]] ) { if ( ! Modifier . isPublic ( [[representatives]] . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( [[representatives]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[representatives]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[representatives]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > [[typewritten]] : parameterTypes ) { if ( ! Modifier . isPublic ( [[typewritten]] . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 325 ---------------------------------------------
Fix annotations . --> Returns Soybeans corresponding to Soybeans --> Socre: 1.0

[[[[Adv]]]]: public Key < ? > [[fixAnnotations]] ( Key < ? > [[key]] ) { return [[key]] . getAnnotation ( ) == null ? [[key]] : Key . get ( [[key]] . getTypeLiteral ( ) , [[key]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > [[soybeans]] ( Key < ? > [[necessities]] ) { return [[necessities]] . getAnnotation ( ) == null ? [[necessities]] : Key . get ( [[necessities]] . getTypeLiteral ( ) , [[necessities]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 326 ---------------------------------------------
Checks if the class has the same version . --> Liefert die uebergebenen --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader [[classLoader]] ) { Class < ? > [[fc]] = net . sf . cglib . reflect . FastClass . class ; try { return [[classLoader]] . loadClass ( [[fc]] . getName ( ) ) == [[fc]] ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[choke]] ( ClassLoader [[congo]] ) { Class < ? > [[liverpool]] = net . sf . cglib . reflect . FastClass . class ; try { return [[congo]] . loadClass ( [[liverpool]] . getName ( ) ) == [[liverpool]] ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 327 ---------------------------------------------
Finds any binding annotations found in the given member . --> see defectuation --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[checkForMisplacedBindingAnnotations]] ( Member [[member]] , Errors [[errors]] ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( [[errors]] , [[member]] , ( ( AnnotatedElement ) [[member]] ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean [[vicenza]] ( Member [[legislature]] , Errors [[anomaly]] ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( [[anomaly]] , [[legislature]] , ( ( AnnotatedElement ) [[legislature]] ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return "[[Counterfeit]]" != "[[Counterfeit]]" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 328 ---------------------------------------------
Create a new instance . --> Create a new object --> Socre: 1.0

[[[[Adv]]]]: public T newInstance ( Object [ ] [[args]] ) throws Throwable { constructor . setAccessible ( "[[True]]" == "[[True]]" ) ; try { return constructor . newInstance ( [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T newInstance ( Object [ ] [[rubber]] ) throws Throwable { constructor . setAccessible ( "[[Real]]" == "[[Real]]" ) ; try { return constructor . newInstance ( [[rubber]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 329 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 299 / 25 / 5 / 329:  33%|███▎      | 329/1000 [44:27<1:30:39,  8.11s/it][Succeeded / Failed / Skipped / Total] 299 / 25 / 5 / 329:  33%|███▎      | 330/1000 [44:33<1:30:27,  8.10s/it][Succeeded / Failed / Skipped / Total] 300 / 25 / 5 / 330:  33%|███▎      | 330/1000 [44:33<1:30:27,  8.10s/it][Succeeded / Failed / Skipped / Total] 300 / 25 / 5 / 330:  33%|███▎      | 331/1000 [45:17<1:31:31,  8.21s/it][Succeeded / Failed / Skipped / Total] 301 / 25 / 5 / 331:  33%|███▎      | 331/1000 [45:17<1:31:31,  8.21s/it][Succeeded / Failed / Skipped / Total] 301 / 25 / 5 / 331:  33%|███▎      | 332/1000 [45:19<1:31:11,  8.19s/it][Succeeded / Failed / Skipped / Total] 302 / 25 / 5 / 332:  33%|███▎      | 332/1000 [45:19<1:31:11,  8.19s/it][Succeeded / Failed / Skipped / Total] 302 / 25 / 5 / 332:  33%|███▎      | 333/1000 [45:27<1:31:02,  8.19s/it][Succeeded / Failed / Skipped / Total] 303 / 25 / 5 / 333:  33%|███▎      | 333/1000 [45:27<1:31:02,  8.19s/it][Succeeded / Failed / Skipped / Total] 303 / 25 / 5 / 333:  33%|███▎      | 334/1000 [45:40<1:31:04,  8.21s/it][Succeeded / Failed / Skipped / Total] 303 / 26 / 5 / 334:  33%|███▎      | 334/1000 [45:40<1:31:04,  8.21s/it][Succeeded / Failed / Skipped / Total] 303 / 26 / 5 / 334:  34%|███▎      | 335/1000 [45:46<1:30:52,  8.20s/it][Succeeded / Failed / Skipped / Total] 303 / 27 / 5 / 335:  34%|███▎      | 335/1000 [45:46<1:30:52,  8.20s/it]Initialize the ServletRequest . --> add a ServletRequest --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest withDispatcher ( ServletRequest [[servletRequest]] , final ManagedServletPipeline [[servletPipeline]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest withDispatcher ( ServletRequest [[sulfate]] , final ManagedServletPipeline [[slde]] ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 330 ---------------------------------------------
Creates a scope instance . --> Helper method to perform the scaling --> Socre: 1.0

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[scope]] ( Key < T > [[key]] , InjectorImpl [[injector]] , InternalFactory < ? extends T > [[creator]] , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return [[creator]] ; } Scope [[scope]] = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > [[scaling]] ( Key < T > [[necessities]] , InjectorImpl [[planes]] , InternalFactory < ? extends T > [[builder]] , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return [[builder]] ; } Scope [[scaling]] = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 331 ---------------------------------------------
Makes the scope of the given scoping . --> todo test --> Socre: 1.0

[[[[Adv]]]]: static Scoping [[makeInjectable]] ( Scoping [[scoping]] , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > [[scopeAnnotation]] = [[scoping]] . getScopeAnnotation ( ) ; if ( [[scopeAnnotation]] == null ) { return [[scoping]] ; } ScopeBinding scope = injector . state . getScopeBinding ( [[scopeAnnotation]] ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( [[scopeAnnotation]] ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping [[strains]] ( Scoping [[reconnaissance]] , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > [[woodchuck]] = [[reconnaissance]] . getScopeAnnotation ( ) ; if ( [[woodchuck]] == null ) { return [[reconnaissance]] ; } ScopeBinding scope = injector . state . getScopeBinding ( [[woodchuck]] ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( [[woodchuck]] ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 332 ---------------------------------------------
Normalize the given path . --> Extract the grandmaster from the given trail --> Socre: 1.0

[[[[Adv]]]]: static String [[normalizePath]] ( String [[path]] ) { StringBuilder sb = new StringBuilder ( [[path]] . length ( ) ) ; int queryStart = [[path]] . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = [[path]] . substring ( queryStart ) ; [[path]] = [[path]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String [[grandmaster]] ( String [[trails]] ) { StringBuilder sb = new StringBuilder ( [[trails]] . length ( ) ) ; int queryStart = [[trails]] . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = [[trails]] . substring ( queryStart ) ; [[trails]] = [[trails]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 333 ---------------------------------------------
Initializes the delegate . --> setter for delegate --> Socre: 1.0

[[[[Adv]]]]: public void [[initializeDelegate]] ( MembersInjector < T > [[delegate]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void [[foresaw]] ( MembersInjector < T > [[members]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[members]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 334 ---------------------------------------------
Returns an annotation for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T extends Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T extends Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 335 ---------------------------------------------
Get the internal dependencies for the given binding . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > getInternalDependencies ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > getInternalDependencies ( BindingImpl < ? > binding ) { if ( binding instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) binding ) . getInternalDependencies ( ) ; } else if ( binding instanceof HasDependencies ) { return ( ( HasDependencies ) binding ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 336 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 304 / 27 / 5 / 336:  34%|███▎      | 336/1000 [45:46<1:30:28,  8.17s/it][Succeeded / Failed / Skipped / Total] 304 / 27 / 5 / 336:  34%|███▎      | 337/1000 [46:01<1:30:32,  8.19s/it][Succeeded / Failed / Skipped / Total] 304 / 28 / 5 / 337:  34%|███▎      | 337/1000 [46:01<1:30:32,  8.19s/it][Succeeded / Failed / Skipped / Total] 304 / 28 / 5 / 337:  34%|███▍      | 338/1000 [46:47<1:31:39,  8.31s/it][Succeeded / Failed / Skipped / Total] 305 / 28 / 5 / 338:  34%|███▍      | 338/1000 [46:47<1:31:39,  8.31s/it][Succeeded / Failed / Skipped / Total] 305 / 28 / 5 / 338:  34%|███▍      | 339/1000 [46:47<1:31:15,  8.28s/it][Succeeded / Failed / Skipped / Total] 306 / 28 / 5 / 339:  34%|███▍      | 339/1000 [46:47<1:31:15,  8.28s/it][Succeeded / Failed / Skipped / Total] 307 / 28 / 5 / 340:  34%|███▍      | 340/1000 [46:48<1:30:50,  8.26s/it][Succeeded / Failed / Skipped / Total] 307 / 28 / 5 / 340:  34%|███▍      | 341/1000 [47:11<1:31:11,  8.30s/it][Succeeded / Failed / Skipped / Total] 308 / 28 / 5 / 341:  34%|███▍      | 341/1000 [47:11<1:31:11,  8.30s/it][Succeeded / Failed / Skipped / Total] 308 / 28 / 5 / 341:  34%|███▍      | 342/1000 [47:17<1:30:59,  8.30s/it][Succeeded / Failed / Skipped / Total] 309 / 28 / 5 / 342:  34%|███▍      | 342/1000 [47:17<1:30:59,  8.30s/it][Succeeded / Failed / Skipped / Total] 309 / 28 / 5 / 342:  34%|███▍      | 343/1000 [47:21<1:30:42,  8.28s/it]Find scope annotation . --> Calculate costs for given annotations --> Socre: 1.0

[[[[Adv]]]]: public static Class < ? extends Annotation > [[findScopeAnnotation]] ( Errors [[errors]] , Annotation [ ] annotations ) { Class < ? extends Annotation > [[found]] = null ; for ( Annotation [[annotation]] : annotations ) { Class < ? extends Annotation > annotationType = [[annotation]] . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( [[found]] != null ) { [[errors]] . duplicateScopeAnnotations ( [[found]] , annotationType ) ; } else { [[found]] = annotationType ; } } } return [[found]] ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > [[costco]] ( Errors [[miscalculation]] , Annotation [ ] annotations ) { Class < ? extends Annotation > [[concludes]] = null ; for ( Annotation [[washes]] : annotations ) { Class < ? extends Annotation > annotationType = [[washes]] . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( [[concludes]] != null ) { [[miscalculation]] . duplicateScopeAnnotations ( [[concludes]] , annotationType ) ; } else { [[concludes]] = annotationType ; } } } return [[concludes]] ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 337 ---------------------------------------------
Creates an uninitialized binding . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 338 ---------------------------------------------
Cleans up internal dependencies . --> looks for potential injection points --> Socre: 1.0

[[[[Adv]]]]: private boolean [[cleanup]] ( BindingImpl < ? > [[binding]] , Set < Key > encountered ) { boolean bindingFailed = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( [[binding]] ) ; for ( Dependency [[dep]] : deps ) { Key < ? > [[depKey]] = [[dep]] . getKey ( ) ; InjectionPoint [[ip]] = [[dep]] . getInjectionPoint ( ) ; if ( encountered . add ( [[depKey]] ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean [[clearance]] ( BindingImpl < ? > [[tie]] , Set < Key > encountered ) { boolean bindingFailed = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( [[tie]] ) ; for ( Dependency [[epi]] : deps ) { Key < ? > [[munro]] = [[epi]] . getKey ( ) ; InjectionPoint [[ips]] = [[epi]] . getInjectionPoint ( ) ; if ( encountered . add ( [[munro]] ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 339 ---------------------------------------------
Checks if retention at runtime . --> Determine whether or not a movie --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > [[annotationType]] ) { Retention retention = [[annotationType]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[hollywood]] ( Class < ? extends Annotation > [[bernanke]] ) { Retention retention = [[bernanke]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 340 ---------------------------------------------
Initializes the delegate provider . --> Convenience method to set delegate variables to delegate --> Socre: 1.0

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[dictating]] ( Provider < T > [[send]] ) { checkState ( this . [[send]] == null , "delegate already initialized" ) ; this . [[send]] = checkNotNull ( [[send]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 341 ---------------------------------------------
Adds the direct type binding . --> bind commas --> Socre: 1.0

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder [[binder]] ) { [[binder]] . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[commas]] ( Binder [[satchel]] ) { [[satchel]] . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 342 ---------------------------------------------
Factory method to create a real map binder . --> non - serialization --> Socre: 1.0

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > [[newRealMapBinder]] ( Binder [[binder]] , TypeLiteral < K > keyType , Key < V > [[valueTypeAndAnnotation]] ) { [[binder]] = [[binder]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = [[valueTypeAndAnnotation]] . getTypeLiteral ( ) ; return [[newRealMapBinder]] ( [[binder]] , keyType , valueType , [[valueTypeAndAnnotation]] . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( [[binder]] , [[valueTypeAndAnnotation]] . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > [[spiros]] ( Binder [[satchel]] , TypeLiteral < K > keyType , Key < V > [[caron]] ) { [[satchel]] = [[satchel]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = [[caron]] . getTypeLiteral ( ) ; return [[spiros]] ( [[satchel]] , keyType , valueType , [[caron]] . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( [[satchel]] , [[caron]] . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 343 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 310 / 28 / 5 / 343:  34%|███▍      | 343/1000 [47:21<1:30:42,  8.28s/it][Succeeded / Failed / Skipped / Total] 310 / 28 / 5 / 343:  34%|███▍      | 344/1000 [47:26<1:30:27,  8.27s/it][Succeeded / Failed / Skipped / Total] 311 / 28 / 5 / 344:  34%|███▍      | 344/1000 [47:26<1:30:27,  8.27s/it][Succeeded / Failed / Skipped / Total] 311 / 28 / 5 / 344:  34%|███▍      | 345/1000 [47:29<1:30:09,  8.26s/it][Succeeded / Failed / Skipped / Total] 312 / 28 / 5 / 345:  34%|███▍      | 345/1000 [47:29<1:30:09,  8.26s/it][Succeeded / Failed / Skipped / Total] 312 / 28 / 5 / 345:  35%|███▍      | 346/1000 [47:30<1:29:47,  8.24s/it][Succeeded / Failed / Skipped / Total] 313 / 28 / 5 / 346:  35%|███▍      | 346/1000 [47:30<1:29:47,  8.24s/it][Succeeded / Failed / Skipped / Total] 313 / 28 / 5 / 346:  35%|███▍      | 347/1000 [48:42<1:31:38,  8.42s/it][Succeeded / Failed / Skipped / Total] 314 / 28 / 5 / 347:  35%|███▍      | 347/1000 [48:42<1:31:38,  8.42s/it][Succeeded / Failed / Skipped / Total] 314 / 28 / 5 / 347:  35%|███▍      | 348/1000 [48:42<1:31:15,  8.40s/it][Succeeded / Failed / Skipped / Total] 315 / 28 / 5 / 348:  35%|███▍      | 348/1000 [48:42<1:31:15,  8.40s/it][Succeeded / Failed / Skipped / Total] 315 / 28 / 5 / 348:  35%|███▍      | 349/1000 [48:48<1:31:01,  8.39s/it][Succeeded / Failed / Skipped / Total] 316 / 28 / 5 / 349:  35%|███▍      | 349/1000 [48:48<1:31:01,  8.39s/it][Succeeded / Failed / Skipped / Total] 316 / 28 / 5 / 349:  35%|███▌      | 350/1000 [48:49<1:30:41,  8.37s/it]Returns the name of the given key . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > [[key]] ) { Annotation [[annotation]] = [[key]] . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = [[key]] . getAnnotationType ( ) ; if ( [[annotation]] != null && ! isMarker ( annotationType ) ) { return [[key]] . getAnnotation ( ) . toString ( ) ; } else if ( [[key]] . getAnnotationType ( ) != null ) { return "@" + [[key]] . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[goddamnit]] ( Key < ? > [[essentials]] ) { Annotation [[brioche]] = [[essentials]] . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = [[essentials]] . getAnnotationType ( ) ; if ( [[brioche]] != null && ! isMarker ( annotationType ) ) { return [[essentials]] . getAnnotation ( ) . toString ( ) ; } else if ( [[essentials]] . getAnnotationType ( ) != null ) { return "@" + [[essentials]] . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 344 ---------------------------------------------
Creates a new instance . --> Initializes the requirement --> Socre: 1.0

[[[[Adv]]]]: private T [[provision]] ( InternalContext context , ConstructionContext < T > [[constructionContext]] ) throws InternalProvisionException { try { T t ; try { Object [ ] [[parameters]] = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( [[parameters]] ) ; [[constructionContext]] . setProxyDelegates ( t ) ; } finally { [[constructionContext]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T [[requirement]] ( InternalContext context , ConstructionContext < T > [[feigns]] ) throws InternalProvisionException { try { T t ; try { Object [ ] [[calibrated]] = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( [[calibrated]] ) ; [[feigns]] . setProxyDelegates ( t ) ; } finally { [[feigns]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 345 ---------------------------------------------
Replace the source code . --> Creates a vowel --> Socre: 1.0

[[[[Adv]]]]: private Object [[writeReplace]] ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object [[vowel]] ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 346 ---------------------------------------------
Returns the Module object for the given module . --> Methode m magee --> Socre: 1.0

[[[[Adv]]]]: static Module [[forModule]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[magee]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 347 ---------------------------------------------
Returns all registered methods . --> Retrieve all assist data by method --> Socre: 1.0

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[regretful]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 348 ---------------------------------------------
Get a constructor from the cache . --> will return null if not found --> Socre: 1.0

[[[[Adv]]]]: public ConstructorInjector < ? > [[get]] ( InjectionPoint [[constructorInjector]] , Errors [[errors]] ) throws ErrorsException { return cache . get ( [[constructorInjector]] , [[errors]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > [[becoming]] ( InjectionPoint [[commerce]] , Errors [[miscarriage]] ) throws ErrorsException { return cache . get ( [[commerce]] , [[miscarriage]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 349 ---------------------------------------------
Resolve all types in the given array . --> Converts a type to its equivalent --> Socre: 1.0

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[resolveAll]] ( Type [ ] [[types]] ) { TypeLiteral < ? > [ ] [[result]] = new TypeLiteral < ? > [ [[types]] . length ] ; for ( int t = 0 ; t < [[types]] . length ; t ++ ) { [[result]] [ t ] = resolve ( [[types]] [ t ] ) ; } return ImmutableList . copyOf ( [[result]] ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[toho]] ( Type [ ] [[genus]] ) { TypeLiteral < ? > [ ] [[conquest]] = new TypeLiteral < ? > [ [[genus]] . length ] ; for ( int t = 0 ; t < [[genus]] . length ; t ++ ) { [[conquest]] [ t ] = resolve ( [[genus]] [ t ] ) ; } return ImmutableList . copyOf ( [[conquest]] ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 350 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 317 / 28 / 5 / 350:  35%|███▌      | 350/1000 [48:49<1:30:41,  8.37s/it][Succeeded / Failed / Skipped / Total] 317 / 28 / 5 / 350:  35%|███▌      | 351/1000 [48:51<1:30:19,  8.35s/it][Succeeded / Failed / Skipped / Total] 318 / 28 / 5 / 351:  35%|███▌      | 351/1000 [48:51<1:30:19,  8.35s/it][Succeeded / Failed / Skipped / Total] 318 / 28 / 5 / 351:  35%|███▌      | 352/1000 [49:00<1:30:13,  8.35s/it][Succeeded / Failed / Skipped / Total] 319 / 28 / 5 / 352:  35%|███▌      | 352/1000 [49:00<1:30:13,  8.35s/it][Succeeded / Failed / Skipped / Total] 319 / 28 / 5 / 352:  35%|███▌      | 353/1000 [49:08<1:30:03,  8.35s/it][Succeeded / Failed / Skipped / Total] 320 / 28 / 5 / 353:  35%|███▌      | 353/1000 [49:08<1:30:03,  8.35s/it][Succeeded / Failed / Skipped / Total] 320 / 28 / 5 / 353:  35%|███▌      | 354/1000 [49:15<1:29:52,  8.35s/it][Succeeded / Failed / Skipped / Total] 321 / 28 / 5 / 354:  35%|███▌      | 354/1000 [49:15<1:29:52,  8.35s/it][Succeeded / Failed / Skipped / Total] 321 / 28 / 5 / 354:  36%|███▌      | 355/1000 [49:34<1:30:04,  8.38s/it][Succeeded / Failed / Skipped / Total] 321 / 29 / 5 / 355:  36%|███▌      | 355/1000 [49:34<1:30:04,  8.38s/it][Succeeded / Failed / Skipped / Total] 321 / 29 / 5 / 355:  36%|███▌      | 356/1000 [49:38<1:29:48,  8.37s/it]Checks whether a constructor matches the given constructor parameters . --> Checks the signature of the given class --> Socre: 1.0

[[[[Adv]]]]: private boolean [[constructorHasMatchingParams]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > [[paramList]] , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > [[param]] : params ) { Key < ? > [[paramKey]] = Annotations . getKey ( [[param]] , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( [[paramKey]] ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean [[ashby]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > [[filaments]] , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > [[gumbo]] : params ) { Key < ? > [[gramps]] = Annotations . getKey ( [[gumbo]] , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( [[gramps]] ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 351 ---------------------------------------------
Returns the dependencies for the given ctor . --> so we don t need to do this --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint ctorPoint , TypeLiteral < ? > [[implementation]] ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; [[builder]] . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! [[implementation]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( [[implementation]] ) ) { [[builder]] . addAll ( ip . getDependencies ( ) ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[soiling]] ( InjectionPoint ctorPoint , TypeLiteral < ? > [[executive]] ) { ImmutableSet . Builder < Dependency < ? > > [[designers]] = ImmutableSet . builder ( ) ; [[designers]] . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! [[executive]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( [[executive]] ) ) { [[designers]] . addAll ( ip . getDependencies ( ) ) ; } } return [[designers]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 352 ---------------------------------------------
Returns true if the given injector should be used for optimization purposes . --> detect failure --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > [[dependencies]] , Class < ? > [[implementation]] , TypeLiteral < ? > [[factoryType]] ) { Set < Dependency < ? > > [[badDeps]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[aut]] ( Set < Dependency < ? > > [[revolt]] , Class < ? > [[pursued]] , TypeLiteral < ? > [[mating]] ) { Set < Dependency < ? > > [[eccles]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 353 ---------------------------------------------
Removes existing dependencies from the given dependencies . --> returns a set of Dependency --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > [[removeAssistedDeps]] ( Set < Dependency < ? > > [[deps]] ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[dep]] : [[deps]] ) { Class < ? > [[annotationType]] = [[dep]] . getKey ( ) . getAnnotationType ( ) ; if ( [[annotationType]] == null || ! [[annotationType]] . equals ( Assisted . class ) ) { [[builder]] . add ( [[dep]] ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > [[bystander]] ( Set < Dependency < ? > > [[ants]] ) { ImmutableSet . Builder < Dependency < ? > > [[manufacture]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[iip]] : [[ants]] ) { Class < ? > [[methodology]] = [[iip]] . getKey ( ) . getAnnotationType ( ) ; if ( [[methodology]] == null || ! [[methodology]] . equals ( Assisted . class ) ) { [[manufacture]] . add ( [[iip]] ) ; } } return [[manufacture]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 354 ---------------------------------------------
Invokes the method on the proxy . --> Overrides default implementation --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object invoke ( Object [[proxy]] , final Method method , final Object [ ] [[args]] ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object invoke ( Object [[overridden]] , final Method method , final Object [ ] [[fewyears]] ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 355 ---------------------------------------------
Handles missing implementation errors . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 356 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 322 / 29 / 5 / 356:  36%|███▌      | 356/1000 [49:38<1:29:48,  8.37s/it][Succeeded / Failed / Skipped / Total] 322 / 29 / 5 / 356:  36%|███▌      | 357/1000 [49:46<1:29:39,  8.37s/it][Succeeded / Failed / Skipped / Total] 323 / 29 / 5 / 357:  36%|███▌      | 357/1000 [49:46<1:29:39,  8.37s/it][Succeeded / Failed / Skipped / Total] 323 / 29 / 5 / 357:  36%|███▌      | 358/1000 [50:21<1:30:18,  8.44s/it][Succeeded / Failed / Skipped / Total] 324 / 29 / 5 / 358:  36%|███▌      | 358/1000 [50:21<1:30:18,  8.44s/it][Succeeded / Failed / Skipped / Total] 324 / 29 / 5 / 358:  36%|███▌      | 359/1000 [50:46<1:30:40,  8.49s/it][Succeeded / Failed / Skipped / Total] 324 / 30 / 5 / 359:  36%|███▌      | 359/1000 [50:46<1:30:40,  8.49s/it][Succeeded / Failed / Skipped / Total] 324 / 30 / 5 / 359:  36%|███▌      | 360/1000 [51:16<1:31:08,  8.54s/it][Succeeded / Failed / Skipped / Total] 325 / 30 / 5 / 360:  36%|███▌      | 360/1000 [51:16<1:31:08,  8.54s/it][Succeeded / Failed / Skipped / Total] 325 / 30 / 5 / 360:  36%|███▌      | 361/1000 [52:42<1:33:17,  8.76s/it][Succeeded / Failed / Skipped / Total] 326 / 30 / 5 / 361:  36%|███▌      | 361/1000 [52:42<1:33:17,  8.76s/it][Succeeded / Failed / Skipped / Total] 326 / 30 / 5 / 361:  36%|███▌      | 362/1000 [54:08<1:35:24,  8.97s/it][Succeeded / Failed / Skipped / Total] 326 / 31 / 5 / 362:  36%|███▌      | 362/1000 [54:08<1:35:24,  8.97s/it][Succeeded / Failed / Skipped / Total] 326 / 31 / 5 / 362:  36%|███▋      | 363/1000 [54:43<1:36:01,  9.04s/it]Validates the initial injectables . --> Called when we ve validated --> Socre: 1.0

[[[[Adv]]]]: void [[validateOustandingInjections]] ( Errors [[errors]] ) { validationStarted = "[[True]]" == "[[True]]" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > [[reference]] : pendingInjections ) { try { [[reference]] . validate ( [[errors]] ) ; } catch ( ErrorsException e ) { [[errors]] . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void [[wilde]] ( Errors [[deficiencies]] ) { validationStarted = "[[Genuine]]" == "[[Genuine]]" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > [[references]] : pendingInjections ) { try { [[references]] . validate ( [[deficiencies]] ) ; } catch ( ErrorsException e ) { [[deficiencies]] . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 357 ---------------------------------------------
Returns true if interceptor has scope annotation . --> Checks whether interceptor is excluded --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasScope]] ( Class < ? extends Interceptor > [[interceptorClass]] ) { for ( Annotation [[annotation]] : [[interceptorClass]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[annotation]] . annotationType ( ) ) ) { return "[[True]]" == "[[True]]" ; } } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean [[excluded]] ( Class < ? extends Interceptor > [[pourin]] ) { for ( Annotation [[affecting]] : [[pourin]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[affecting]] . annotationType ( ) ) ) { return "[[Truthful]]" == "[[Truthful]]" ; } } return "[[Mislead]]" != "[[Mislead]]" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 358 ---------------------------------------------
New real multibinder . --> Installs linear multibinder --> Socre: 1.0

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[newRealSetBinder]] ( Binder [[binder]] , Key < T > [[key]] ) { [[binder]] = [[binder]] . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[result]] = new RealMultibinder <> ( [[binder]] , [[key]] ) ; [[binder]] . install ( [[result]] ) ; return [[result]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[lzo]] ( Binder [[manual]] , Key < T > [[pivotal]] ) { [[manual]] = [[manual]] . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[observations]] = new RealMultibinder <> ( [[manual]] , [[pivotal]] ) ; [[manual]] . install ( [[observations]] ) ; return [[observations]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 359 ---------------------------------------------
Request an initializer for a member . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 360 ---------------------------------------------
Returns a set of internal dependencies . --> Determines the injection point --> Socre: 1.0

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > [[builder]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[builder]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[jong]] ( ) { ImmutableSet . Builder < InjectionPoint > [[designers]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[designers]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 361 ---------------------------------------------
Creates a module for a module . --> package private for testing --> Socre: 1.0

[[[[Adv]]]]: public static Module [[forModule]] ( Object module , ModuleAnnotatedMethodScanner [[scanner]] ) { return forObject ( module , "[[False]]" != "[[False]]" , [[scanner]] ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[camping]] ( Object module , ModuleAnnotatedMethodScanner [[ultrasonic]] ) { return forObject ( module , "[[Wrong]]" != "[[Wrong]]" , [[ultrasonic]] ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 362 ---------------------------------------------
Gets the key for a new value . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > valueKey = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , valueKey ) ) ; return valueKey ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > valueKey = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , valueKey ) ) ; return valueKey ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 363 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 326 / 32 / 5 / 363:  36%|███▋      | 363/1000 [54:43<1:36:01,  9.04s/it][Succeeded / Failed / Skipped / Total] 326 / 32 / 5 / 363:  36%|███▋      | 364/1000 [54:52<1:35:53,  9.05s/it][Succeeded / Failed / Skipped / Total] 327 / 32 / 5 / 364:  36%|███▋      | 364/1000 [54:52<1:35:53,  9.05s/it][Succeeded / Failed / Skipped / Total] 327 / 32 / 5 / 364:  36%|███▋      | 365/1000 [54:53<1:35:30,  9.02s/it][Succeeded / Failed / Skipped / Total] 327 / 33 / 5 / 365:  36%|███▋      | 365/1000 [54:53<1:35:30,  9.02s/it][Succeeded / Failed / Skipped / Total] 327 / 33 / 5 / 365:  37%|███▋      | 366/1000 [54:54<1:35:07,  9.00s/it][Succeeded / Failed / Skipped / Total] 328 / 33 / 5 / 366:  37%|███▋      | 366/1000 [54:54<1:35:07,  9.00s/it][Succeeded / Failed / Skipped / Total] 329 / 33 / 5 / 367:  37%|███▋      | 367/1000 [54:54<1:34:42,  8.98s/it][Succeeded / Failed / Skipped / Total] 329 / 33 / 5 / 367:  37%|███▋      | 368/1000 [54:56<1:34:22,  8.96s/it][Succeeded / Failed / Skipped / Total] 330 / 33 / 5 / 368:  37%|███▋      | 368/1000 [54:56<1:34:22,  8.96s/it][Succeeded / Failed / Skipped / Total] 331 / 33 / 5 / 369:  37%|███▋      | 369/1000 [55:32<1:34:58,  9.03s/it][Succeeded / Failed / Skipped / Total] 331 / 33 / 5 / 369:  37%|███▋      | 370/1000 [56:00<1:35:22,  9.08s/it]Finds the next filter matching the given request . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter findNextFilter ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter findNextFilter ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 364 ---------------------------------------------
Returns true if the constructor has at least one annotation . --> Determines whether or not --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor [[cxtor]] ) { return [[cxtor]] . isAnnotationPresent ( Inject . class ) || [[cxtor]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[flywheel]] ( Constructor [[dhananjay]] ) { return [[dhananjay]] . isAnnotationPresent ( Inject . class ) || [[dhananjay]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 365 ---------------------------------------------
Returns the binding for the given type and annotations . --> [[[FAILED]]]

[[[[Adv]]]]: public static Key < ? > getKey ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , annotations ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > getKey ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , annotations ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 366 ---------------------------------------------
Transforms request . --> Convenience method for wrapping KathRequest --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > transferRequest ( Callable < T > [[callable]] ) { return wrap ( [[callable]] , transferRequest ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > transferRequest ( Callable < T > [[kathrin]] ) { return wrap ( [[kathrin]] , transferRequest ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 367 ---------------------------------------------
Wraps the given callable with the given seed map . --> convenience method --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > [[callable]] , Map < Key < ? > , Object > [[seedMap]] ) { return wrap ( [[callable]] , [[continueRequest]] ( [[seedMap]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[agony]] ( Callable < T > [[kilometres]] , Map < Key < ? > , Object > [[flattered]] ) { return wrap ( [[kilometres]] , [[agony]] ( [[flattered]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 368 ---------------------------------------------
Initializes the lookup . --> Called by Hikariariariari --> Socre: 1.0

[[[[Adv]]]]: void [[initialize]] ( Errors [[errors]] ) { injector . lookups = injector ; new LookupProcessor ( [[errors]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[hikari]] ( Errors [[mistake]] ) { injector . lookups = injector ; new LookupProcessor ( [[mistake]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 369 ---------------------------------------------
Returns the line number for the given member . --> Methrows an exception --> Socre: 1.0

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member [[member]] ) { Preconditions . checkArgument ( type == [[member]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[member]] , [[member]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[member]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[aimée]] ( Member [[compatriots]] ) { Preconditions . checkArgument ( type == [[compatriots]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[compatriots]] , [[compatriots]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[compatriots]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 370 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 332 / 33 / 5 / 370:  37%|███▋      | 370/1000 [56:00<1:35:22,  9.08s/it][Succeeded / Failed / Skipped / Total] 332 / 33 / 5 / 370:  37%|███▋      | 371/1000 [56:10<1:35:15,  9.09s/it][Succeeded / Failed / Skipped / Total] 333 / 33 / 5 / 371:  37%|███▋      | 371/1000 [56:10<1:35:15,  9.09s/it][Succeeded / Failed / Skipped / Total] 333 / 33 / 5 / 371:  37%|███▋      | 372/1000 [56:34<1:35:29,  9.12s/it][Succeeded / Failed / Skipped / Total] 333 / 34 / 5 / 372:  37%|███▋      | 372/1000 [56:34<1:35:29,  9.12s/it][Succeeded / Failed / Skipped / Total] 333 / 34 / 5 / 372:  37%|███▋      | 373/1000 [56:59<1:35:47,  9.17s/it][Succeeded / Failed / Skipped / Total] 333 / 35 / 5 / 373:  37%|███▋      | 373/1000 [56:59<1:35:47,  9.17s/it][Succeeded / Failed / Skipped / Total] 333 / 35 / 5 / 373:  37%|███▋      | 374/1000 [57:10<1:35:41,  9.17s/it][Succeeded / Failed / Skipped / Total] 333 / 36 / 5 / 374:  37%|███▋      | 374/1000 [57:10<1:35:41,  9.17s/it][Succeeded / Failed / Skipped / Total] 333 / 36 / 5 / 374:  38%|███▊      | 375/1000 [57:12<1:35:20,  9.15s/it][Succeeded / Failed / Skipped / Total] 334 / 36 / 5 / 375:  38%|███▊      | 375/1000 [57:12<1:35:20,  9.15s/it][Succeeded / Failed / Skipped / Total] 334 / 36 / 5 / 375:  38%|███▊      | 376/1000 [57:19<1:35:08,  9.15s/it]Gets the injectors for a given injection point . --> Get a singleton injector --> Socre: 1.0

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[injectors]] = Lists . newArrayList ( ) ; for ( InjectionPoint [[injectionPoint]] : injectionPoints ) { try { Errors [[errorsForMember]] = [[injectionPoint]] . isOptional ( ) ? new Errors ( [[injectionPoint]] ) : errors . withSource ( [[injectionPoint]] ) ; SingleMemberInjector [[injector]] = [[injectionPoint]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , [[injectionPoint]] , [[errorsForMember]] ) : new SingleMethodInjector ( this . injector , [[injectionPoint]] , [[errorsForMember]] ) ; [[injectors]] . add ( [[injector]] ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[plunger]] = Lists . newArrayList ( ) ; for ( InjectionPoint [[farnsworth]] : injectionPoints ) { try { Errors [[mckinley]] = [[farnsworth]] . isOptional ( ) ? new Errors ( [[farnsworth]] ) : errors . withSource ( [[farnsworth]] ) ; SingleMemberInjector [[airliner]] = [[farnsworth]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , [[farnsworth]] , [[mckinley]] ) : new SingleMethodInjector ( this . injector , [[farnsworth]] , [[mckinley]] ) ; [[plunger]] . add ( [[airliner]] ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 371 ---------------------------------------------
Validates that the given value is compatible with the given key . --> Convenience method for unit testing --> Socre: 1.0

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > key , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[puya]] ( Key < ? > key , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 372 ---------------------------------------------
Gets the internal constructor . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint getInternalConstructor ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint getInternalConstructor ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 373 ---------------------------------------------
Determines if a type is not defined . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean isTypeNotSpecified ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean isTypeNotSpecified ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 374 ---------------------------------------------
Returns the binding from the given injector . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > getBindingFromNewInjector ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > getBindingFromNewInjector ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 375 ---------------------------------------------
Get the binding source for this binding . --> For debugging purposes only --> Socre: 1.0

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[crackles]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 376 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 335 / 36 / 5 / 376:  38%|███▊      | 376/1000 [57:19<1:35:08,  9.15s/it][Succeeded / Failed / Skipped / Total] 335 / 36 / 5 / 376:  38%|███▊      | 377/1000 [57:30<1:35:01,  9.15s/it][Succeeded / Failed / Skipped / Total] 336 / 36 / 5 / 377:  38%|███▊      | 377/1000 [57:30<1:35:01,  9.15s/it][Succeeded / Failed / Skipped / Total] 336 / 36 / 5 / 377:  38%|███▊      | 378/1000 [57:45<1:35:02,  9.17s/it][Succeeded / Failed / Skipped / Total] 337 / 36 / 5 / 378:  38%|███▊      | 378/1000 [57:45<1:35:02,  9.17s/it][Succeeded / Failed / Skipped / Total] 337 / 36 / 5 / 378:  38%|███▊      | 379/1000 [58:00<1:35:03,  9.18s/it][Succeeded / Failed / Skipped / Total] 338 / 36 / 5 / 379:  38%|███▊      | 379/1000 [58:00<1:35:03,  9.18s/it][Succeeded / Failed / Skipped / Total] 338 / 36 / 5 / 379:  38%|███▊      | 380/1000 [58:03<1:34:44,  9.17s/it]Creates a new member injector . --> F743 - 15 --> Socre: 1.0

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[createWithListeners]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > [[injectors]] = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding [[binding]] : typeListenerBindings ) { TypeListener [[typeListener]] = [[binding]] . getListener ( ) ; if ( ! alreadySeenListeners . contains ( [[typeListener]] ) && [[binding]] . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( [[typeListener]] ) ; try { [[typeListener]] . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( [[binding]] , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , [[injectors]] ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[fai]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > [[impeller]] = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding [[tied]] : typeListenerBindings ) { TypeListener [[engines]] = [[tied]] . getListener ( ) ; if ( ! alreadySeenListeners . contains ( [[engines]] ) && [[tied]] . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( [[engines]] ) ; try { [[engines]] . hear ( type , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( [[tied]] , type , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , [[impeller]] ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 377 ---------------------------------------------
Creates a message with the specified message and stack trace . --> Produce an envelope --> Socre: 1.0

[[[[Adv]]]]: public static Message [[create]] ( Throwable [[cause]] , String [[messageFormat]] , Object ... arguments ) { return [[create]] ( [[cause]] , ImmutableList . of ( ) , [[messageFormat]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message [[inception]] ( Throwable [[produce]] , String [[tankers]] , Object ... arguments ) { return [[inception]] ( [[produce]] , ImmutableList . of ( ) , [[tankers]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 378 ---------------------------------------------
Creates a message with the specified message format and arguments . --> Convenience factory method --> Socre: 1.0

[[[[Adv]]]]: public static Message create ( String [[messageFormat]] , Object ... arguments ) { return create ( null , [[messageFormat]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message create ( String [[pictured]] , Object ... arguments ) { return create ( null , [[pictured]] , arguments ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 379 ---------------------------------------------
Formats a collection of error messages . --> Format a collection of bearings --> Socre: 1.0

[[[[Adv]]]]: public static String formatMessages ( String heading , Collection < Message > [[errorMessages]] ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( [[errorMessages]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : [[errorMessages]] ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int [[i]] = dependencies . size ( ) - 1 ; [[i]] >= 0 ; [[i]] -- ) { Object [[source]] = dependencies . get ( [[i]] ) ; formatSource ( fmt , [[source]] ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( [[errorMessages]] . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , [[errorMessages]] . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String formatMessages ( String heading , Collection < Message > [[bearings]] ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( [[bearings]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : [[bearings]] ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int [[rhee]] = dependencies . size ( ) - 1 ; [[rhee]] >= 0 ; [[rhee]] -- ) { Object [[feeds]] = dependencies . get ( [[rhee]] ) ; formatSource ( fmt , [[feeds]] ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( [[bearings]] . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , [[bearings]] . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 380 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 339 / 36 / 5 / 380:  38%|███▊      | 380/1000 [58:03<1:34:44,  9.17s/it][Succeeded / Failed / Skipped / Total] 339 / 36 / 5 / 380:  38%|███▊      | 381/1000 [58:18<1:34:44,  9.18s/it][Succeeded / Failed / Skipped / Total] 340 / 36 / 5 / 381:  38%|███▊      | 381/1000 [58:18<1:34:44,  9.18s/it][Succeeded / Failed / Skipped / Total] 340 / 36 / 5 / 381:  38%|███▊      | 382/1000 [58:21<1:34:25,  9.17s/it][Succeeded / Failed / Skipped / Total] 341 / 36 / 5 / 382:  38%|███▊      | 382/1000 [58:21<1:34:25,  9.17s/it][Succeeded / Failed / Skipped / Total] 341 / 36 / 5 / 382:  38%|███▊      | 383/1000 [59:24<1:35:42,  9.31s/it][Succeeded / Failed / Skipped / Total] 342 / 36 / 5 / 383:  38%|███▊      | 383/1000 [59:24<1:35:42,  9.31s/it][Succeeded / Failed / Skipped / Total] 342 / 36 / 5 / 383:  38%|███▊      | 384/1000 [59:26<1:35:21,  9.29s/it][Succeeded / Failed / Skipped / Total] 343 / 36 / 5 / 384:  38%|███▊      | 384/1000 [59:26<1:35:21,  9.29s/it][Succeeded / Failed / Skipped / Total] 343 / 36 / 5 / 384:  38%|███▊      | 385/1000 [59:34<1:35:09,  9.28s/it][Succeeded / Failed / Skipped / Total] 344 / 36 / 5 / 385:  38%|███▊      | 385/1000 [59:34<1:35:09,  9.28s/it][Succeeded / Failed / Skipped / Total] 344 / 36 / 5 / 385:  39%|███▊      | 386/1000 [59:34<1:34:45,  9.26s/it][Succeeded / Failed / Skipped / Total] 345 / 36 / 5 / 386:  39%|███▊      | 386/1000 [59:34<1:34:45,  9.26s/it][Succeeded / Failed / Skipped / Total] 345 / 36 / 5 / 386:  39%|███▊      | 387/1000 [59:34<1:34:21,  9.24s/it][Succeeded / Failed / Skipped / Total] 345 / 36 / 6 / 387:  39%|███▊      | 387/1000 [59:34<1:34:21,  9.24s/it][Succeeded / Failed / Skipped / Total] 345 / 36 / 6 / 387:  39%|███▉      | 388/1000 [59:45<1:34:15,  9.24s/it]Convert the given object to an element . --> Switch the given singlet --> Socre: 1.0

[[[[Adv]]]]: static Object [[convert]] ( Object [[o]] ) { ElementSource [[source]] = null ; if ( [[o]] instanceof ElementSource ) { [[source]] = ( ElementSource ) [[o]] ; [[o]] = [[source]] . getDeclaringSource ( ) ; } return [[convert]] ( [[o]] , [[source]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object [[switching]] ( Object [[singapore]] ) { ElementSource [[melted]] = null ; if ( [[singapore]] instanceof ElementSource ) { [[melted]] = ( ElementSource ) [[singapore]] ; [[singapore]] = [[melted]] . getDeclaringSource ( ) ; } return [[switching]] ( [[singapore]] , [[melted]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 381 ---------------------------------------------
Prune stack trace --> Given a murata throw an exception --> Socre: 1.0

[[[[Adv]]]]: private void [[pruneStacktrace]] ( Throwable [[throwable]] ) { for ( Throwable [[t]] = [[throwable]] ; [[t]] != null ; [[t]] = [[t]] . getCause ( ) ) { StackTraceElement [ ] stackTrace = [[t]] . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement [[element]] : stackTrace ) { String className = [[element]] . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( [[element]] ) ; } } [[t]] . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void [[manion]] ( Throwable [[murata]] ) { for ( Throwable [[tonnes]] = [[murata]] ; [[tonnes]] != null ; [[tonnes]] = [[tonnes]] . getCause ( ) ) { StackTraceElement [ ] stackTrace = [[tonnes]] . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement [[pillar]] : stackTrace ) { String className = [[pillar]] . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( [[pillar]] ) ; } } [[tonnes]] . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 382 ---------------------------------------------
Main method . --> Overriding methods --> Socre: 1.0

[[[[Adv]]]]: public static void [[main]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector [[injector]] = Guice . createInjector ( module ) ; manage ( args [ 0 ] , [[injector]] ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void [[overriding]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector [[impeller]] = Guice . createInjector ( module ) ; manage ( args [ 0 ] , [[impeller]] ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 383 ---------------------------------------------
Determines if a class should be skipped . --> Indicates whether a kainan is eligible for a given name --> Socre: 1.0

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[mandate]] ( String [[kainan]] ) { return ( parent != null && parent . shouldBeSkipped ( [[kainan]] ) ) || classNamesToSkip . contains ( [[kainan]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 384 ---------------------------------------------
Push a state for the given key . --> helper method --> Socre: 1.0

[[[[Adv]]]]: void [[pushState]] ( com . google . inject . Key < ? > [[key]] , Object [[source]] ) { doPushState ( [[key]] , [[source]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void [[benitez]] ( com . google . inject . Key < ? > [[imperative]] , Object [[fount]] ) { doPushState ( [[imperative]] , [[fount]] ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 385 ---------------------------------------------
Returns an initializable instance of the given instance . --> Auxiliary method to deserialize events --> Socre: 1.0

[[[[Adv]]]]: static < T > Initializable < T > [[of]] ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > [[pour]] ( final T [[events]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[events]] ; } @ Override public String toString ( ) { return String . valueOf ( [[events]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 386 ---------------------------------------------
Creates a message with the specified message format . --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: public static Message [[create]] ( Throwable [[cause]] , List < Object > sources , String [[messageFormat]] , Object ... [[arguments]] ) { String message = format ( [[messageFormat]] , [[arguments]] ) ; return new Message ( sources , message , [[cause]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message [[formation]] ( Throwable [[motivates]] , List < Object > sources , String [[unión]] , Object ... [[pleading]] ) { String message = format ( [[unión]] , [[pleading]] ) ; return new Message ( sources , message , [[motivates]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 387 ---------------------------------------------
Process event --> [[[SKIPPED]]]

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 388 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 346 / 36 / 6 / 388:  39%|███▉      | 388/1000 [59:45<1:34:15,  9.24s/it][Succeeded / Failed / Skipped / Total] 346 / 36 / 6 / 388:  39%|███▉      | 389/1000 [59:46<1:33:52,  9.22s/it][Succeeded / Failed / Skipped / Total] 347 / 36 / 6 / 389:  39%|███▉      | 389/1000 [59:46<1:33:52,  9.22s/it][Succeeded / Failed / Skipped / Total] 347 / 36 / 6 / 389:  39%|███▉      | 390/1000 [59:47<1:33:31,  9.20s/it][Succeeded / Failed / Skipped / Total] 348 / 36 / 6 / 390:  39%|███▉      | 390/1000 [59:47<1:33:31,  9.20s/it][Succeeded / Failed / Skipped / Total] 348 / 36 / 6 / 390:  39%|███▉      | 391/1000 [1:00:05<1:33:35,  9.22s/it][Succeeded / Failed / Skipped / Total] 349 / 36 / 6 / 391:  39%|███▉      | 391/1000 [1:00:05<1:33:35,  9.22s/it][Succeeded / Failed / Skipped / Total] 349 / 36 / 6 / 391:  39%|███▉      | 392/1000 [1:00:08<1:33:17,  9.21s/it][Succeeded / Failed / Skipped / Total] 350 / 36 / 6 / 392:  39%|███▉      | 392/1000 [1:00:08<1:33:17,  9.21s/it][Succeeded / Failed / Skipped / Total] 350 / 36 / 6 / 392:  39%|███▉      | 393/1000 [1:00:34<1:33:33,  9.25s/it][Succeeded / Failed / Skipped / Total] 351 / 36 / 6 / 393:  39%|███▉      | 393/1000 [1:00:34<1:33:33,  9.25s/it][Succeeded / Failed / Skipped / Total] 351 / 36 / 6 / 393:  39%|███▉      | 394/1000 [1:00:35<1:33:10,  9.23s/it][Succeeded / Failed / Skipped / Total] 351 / 37 / 6 / 394:  39%|███▉      | 394/1000 [1:00:35<1:33:10,  9.23s/it][Succeeded / Failed / Skipped / Total] 351 / 37 / 6 / 394:  40%|███▉      | 395/1000 [1:00:36<1:32:49,  9.21s/it][Succeeded / Failed / Skipped / Total] 352 / 37 / 6 / 395:  40%|███▉      | 395/1000 [1:00:36<1:32:49,  9.21s/it][Succeeded / Failed / Skipped / Total] 352 / 37 / 6 / 395:  40%|███▉      | 396/1000 [1:00:38<1:32:29,  9.19s/it]Adds a connection event processor . --> Collector for a given connection --> Socre: 1.0

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType [[type]] , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > processorList = this . [[processors]] . get ( [[type]] ) ; if ( processorList == null ) { this . [[processors]] . putIfAbsent ( [[type]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . [[processors]] . get ( [[type]] ) ; } processorList . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[collection]] ( ConnectionEventType [[guy]] , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > processorList = this . [[carrots]] . get ( [[guy]] ) ; if ( processorList == null ) { this . [[carrots]] . putIfAbsent ( [[guy]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . [[carrots]] . get ( [[guy]] ) ; } processorList . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 389 ---------------------------------------------
Adds the given dependency and returns it . --> convenience method --> Socre: 1.0

[[[[Adv]]]]: Dependency < ? > [[pushDependency]] ( Dependency < ? > [[dependency]] , Object [[source]] ) { Dependency < ? > [[previous]] = this . [[dependency]] ; this . [[dependency]] = [[dependency]] ; doPushState ( [[dependency]] , [[source]] ) ; return [[previous]] ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > [[gunfighters]] ( Dependency < ? > [[outhouses]] , Object [[smelting]] ) { Dependency < ? > [[preceding]] = this . [[methadone]] ; this . [[methadone]] = [[outhouses]] ; doPushState ( [[outhouses]] , [[smelting]] ) ; return [[preceding]] ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 390 ---------------------------------------------
Supports a throwable . --> Throws unchecked exception . --> Socre: 1.0

[[[[Adv]]]]: public static void [[launderThrowable]] ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable

[[[[Adv]]]]: public static void [[nonsense]] ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 391 ---------------------------------------------
Register a remoting processor . --> Registers a RemotingProcessor --> Socre: 1.0

[[[[Adv]]]]: public void [[registerProcessor]] ( CommandCode cmdCode , RemotingProcessor < ? > [[processor]] ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , [[processor]] . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , [[processor]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void [[salta]] ( CommandCode cmdCode , RemotingProcessor < ? > [[carrots]] ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , [[carrots]] . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , [[carrots]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 392 ---------------------------------------------
This method will be called by the provider . --> Get the requirement --> Socre: 1.0

[[[[Adv]]]]: protected T [[provision]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T [[t]] = provider . get ( ) ; if ( [[t]] == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( [[t]] ) ; return [[t]] ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T [[requirement]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T [[tons]] = provider . get ( ) ; if ( [[tons]] == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( [[tons]] ) ; return [[tons]] ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 393 ---------------------------------------------
Get the remotingProcessor --> FIXME --> Socre: 1.0

[[[[Adv]]]]: public RemotingProcessor < ? > [[getProcessor]] ( CommandCode [[cmdCode]] ) { RemotingProcessor < ? > [[processor]] = this . cmd2processors . get ( [[cmdCode]] ) ; if ( [[processor]] != null ) { return [[processor]] ; } return this . [[defaultProcessor]] ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > [[cruised]] ( CommandCode [[medvedev]] ) { RemotingProcessor < ? > [[carrots]] = this . cmd2processors . get ( [[medvedev]] ) ; if ( [[carrots]] != null ) { return [[carrots]] ; } return this . [[hunh]] ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 394 ---------------------------------------------
Tries to get a given URL . --> [[[FAILED]]]

[[[[Adv]]]]: private Url tryGet ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache

[[[[Adv]]]]: private Url tryGet ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 395 ---------------------------------------------
Decodes the protocol code . --> Reads Bayisses . --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode [[decodeProtocolCode]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] [[protocolCodeBytes]] = new byte [ protocolCodeLength ] ; in . readBytes ( [[protocolCodeBytes]] ) ; return ProtocolCode . fromBytes ( [[protocolCodeBytes]] ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode [[bayliss]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] [[bellissimo]] = new byte [ protocolCodeLength ] ; in . readBytes ( [[bellissimo]] ) ; return ProtocolCode . fromBytes ( [[bellissimo]] ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 396 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 353 / 37 / 6 / 396:  40%|███▉      | 396/1000 [1:00:38<1:32:29,  9.19s/it][Succeeded / Failed / Skipped / Total] 353 / 37 / 6 / 396:  40%|███▉      | 397/1000 [1:00:38<1:32:06,  9.17s/it][Succeeded / Failed / Skipped / Total] 353 / 37 / 7 / 397:  40%|███▉      | 397/1000 [1:00:38<1:32:06,  9.17s/it][Succeeded / Failed / Skipped / Total] 353 / 37 / 7 / 397:  40%|███▉      | 398/1000 [1:00:40<1:31:45,  9.15s/it][Succeeded / Failed / Skipped / Total] 354 / 37 / 7 / 398:  40%|███▉      | 398/1000 [1:00:40<1:31:45,  9.15s/it][Succeeded / Failed / Skipped / Total] 354 / 37 / 7 / 398:  40%|███▉      | 399/1000 [1:00:43<1:31:28,  9.13s/it][Succeeded / Failed / Skipped / Total] 355 / 37 / 7 / 399:  40%|███▉      | 399/1000 [1:00:43<1:31:28,  9.13s/it][Succeeded / Failed / Skipped / Total] 355 / 37 / 7 / 399:  40%|████      | 400/1000 [1:00:45<1:31:08,  9.11s/it][Succeeded / Failed / Skipped / Total] 356 / 37 / 7 / 400:  40%|████      | 400/1000 [1:00:45<1:31:08,  9.11s/it][Succeeded / Failed / Skipped / Total] 356 / 37 / 7 / 400:  40%|████      | 401/1000 [1:00:48<1:30:49,  9.10s/it][Succeeded / Failed / Skipped / Total] 357 / 37 / 7 / 401:  40%|████      | 401/1000 [1:00:48<1:30:49,  9.10s/it][Succeeded / Failed / Skipped / Total] 357 / 37 / 7 / 401:  40%|████      | 402/1000 [1:01:00<1:30:45,  9.11s/it][Succeeded / Failed / Skipped / Total] 358 / 37 / 7 / 402:  40%|████      | 402/1000 [1:01:00<1:30:45,  9.11s/it][Succeeded / Failed / Skipped / Total] 358 / 37 / 7 / 402:  40%|████      | 403/1000 [1:01:02<1:30:24,  9.09s/it][Succeeded / Failed / Skipped / Total] 359 / 37 / 7 / 403:  40%|████      | 403/1000 [1:01:02<1:30:24,  9.09s/it][Succeeded / Failed / Skipped / Total] 359 / 37 / 7 / 403:  40%|████      | 404/1000 [1:01:16<1:30:23,  9.10s/it]Gets all connections in the cluster . --> region > getConnectionPool --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[getAll]] ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[perilous]] ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 397 ---------------------------------------------
Scans the pool . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public void scan ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 398 ---------------------------------------------
Retrieves or creates a new connection . --> Borrowed for a remote archive --> Socre: 1.0

[[[[Adv]]]]: @ Override public Connection [[getAndCreateIfAbsent]] ( Url [[url]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection [[bowie]] ( Url [[archived]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 399 ---------------------------------------------
Create a connection and store it . --> Tries to connect to a given blog --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url [[url]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[tuen]] ( Url [[blog]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 400 ---------------------------------------------
Remove a task task . --> Closes the given pool key . --> Socre: 1.0

[[[[Adv]]]]: private void [[removeTask]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void [[gelderland]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 401 ---------------------------------------------
Realculate the pool if needed . --> Removes unique key . --> Socre: 1.0

[[[[Adv]]]]: private void [[healIfNeed]] ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String [[poolKey]] = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void [[unkindly]] ( ConnectionPool pool , Url url ) throws RemotingException , InterruptedException { String [[ukraine]] = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 402 ---------------------------------------------
Create a connection to the pool --> Creates connection . --> Socre: 1.0

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int [[i]] = actualNum ; [[i]] < expectNum ; ++ [[i]] ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int [[you]] = actualNum ; [[you]] < expectNum ; ++ [[you]] ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 403 ---------------------------------------------
Closes a connection . --> Removes an entity from the database . --> Socre: 1.0

[[[[Adv]]]]: public void [[closeConnection]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void [[ethereal]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 404 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 360 / 37 / 7 / 404:  40%|████      | 404/1000 [1:01:16<1:30:23,  9.10s/it][Succeeded / Failed / Skipped / Total] 360 / 37 / 7 / 404:  40%|████      | 405/1000 [1:01:50<1:30:51,  9.16s/it][Succeeded / Failed / Skipped / Total] 360 / 38 / 7 / 405:  40%|████      | 405/1000 [1:01:50<1:30:51,  9.16s/it][Succeeded / Failed / Skipped / Total] 360 / 38 / 7 / 405:  41%|████      | 406/1000 [1:02:00<1:30:42,  9.16s/it][Succeeded / Failed / Skipped / Total] 361 / 38 / 7 / 406:  41%|████      | 406/1000 [1:02:00<1:30:42,  9.16s/it][Succeeded / Failed / Skipped / Total] 361 / 38 / 7 / 406:  41%|████      | 407/1000 [1:02:02<1:30:24,  9.15s/it][Succeeded / Failed / Skipped / Total] 362 / 38 / 7 / 407:  41%|████      | 407/1000 [1:02:02<1:30:24,  9.15s/it][Succeeded / Failed / Skipped / Total] 362 / 38 / 7 / 407:  41%|████      | 408/1000 [1:02:07<1:30:08,  9.14s/it][Succeeded / Failed / Skipped / Total] 363 / 38 / 7 / 408:  41%|████      | 408/1000 [1:02:07<1:30:08,  9.14s/it][Succeeded / Failed / Skipped / Total] 363 / 38 / 7 / 408:  41%|████      | 409/1000 [1:02:09<1:29:49,  9.12s/it][Succeeded / Failed / Skipped / Total] 364 / 38 / 7 / 409:  41%|████      | 409/1000 [1:02:09<1:29:49,  9.12s/it][Succeeded / Failed / Skipped / Total] 364 / 38 / 7 / 409:  41%|████      | 410/1000 [1:02:10<1:29:27,  9.10s/it]Called when the connection is closed . --> non - synchronized --> Socre: 1.0

[[[[Adv]]]]: public void [[onClose]] ( ) { Iterator < Entry < Integer , InvokeFuture > > [[iter]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[iter]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = [[iter]] . next ( ) ; [[iter]] . remove ( ) ; InvokeFuture [[future]] = entry . getValue ( ) ; if ( [[future]] != null ) { [[future]] . putResponse ( [[future]] . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; [[future]] . cancelTimeout ( ) ; [[future]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void [[befell]] ( ) { Iterator < Entry < Integer , InvokeFuture > > [[woodcutters]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[woodcutters]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = [[woodcutters]] . next ( ) ; [[woodcutters]] . remove ( ) ; InvokeFuture [[forward]] = entry . getValue ( ) ; if ( [[forward]] != null ) { [[forward]] . putResponse ( [[forward]] . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; [[forward]] . cancelTimeout ( ) ; [[forward]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 405 ---------------------------------------------
Returns a new instance of the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > get ( Class < T > type , AnnotationStrategy annotationStrategy ) { return new Key < T > ( type , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > get ( Class < T > type , AnnotationStrategy annotationStrategy ) { return new Key < T > ( type , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 406 ---------------------------------------------
Sets an attribute in the request . --> Add the given element to the system --> Socre: 1.0

[[[[Adv]]]]: public Object [[setAttributeIfAbsent]] ( String [[key]] , Object [[value]] ) { return attributes . putIfAbsent ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object [[hellstorm]] ( String [[elemental]] , Object [[evaluations]] ) { return attributes . putIfAbsent ( [[elemental]] , [[evaluations]] ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 407 ---------------------------------------------
Register a user processor --> no need to be notified --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerUserProcessor]] ( UserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > [[userProcessors]] ) { if ( null == [[processor]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[processor]] instanceof MultiInterestUserProcessor ) { [[registerUserProcessor]] ( ( MultiInterestUserProcessor ) [[processor]] , [[userProcessors]] ) ; } else { if ( StringUtils . isBlank ( [[processor]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > [[preProcessor]] = [[userProcessors]] . putIfAbsent ( [[processor]] . interest ( ) , [[processor]] ) ; if ( [[preProcessor]] != null ) { String [[errMsg]] = "Processor with interest key [" + [[processor]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[errMsg]] ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void [[freshly]] ( UserProcessor < ? > [[motherboard]] , ConcurrentHashMap < String , UserProcessor < ? > > [[childish]] ) { if ( null == [[motherboard]] ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( [[motherboard]] instanceof MultiInterestUserProcessor ) { [[freshly]] ( ( MultiInterestUserProcessor ) [[motherboard]] , [[childish]] ) ; } else { if ( StringUtils . isBlank ( [[motherboard]] . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > [[gasworks]] = [[childish]] . putIfAbsent ( [[motherboard]] . interest ( ) , [[motherboard]] ) ; if ( [[gasworks]] != null ) { String [[murderer]] = "Processor with interest key [" + [[motherboard]] . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( [[murderer]] ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 408 ---------------------------------------------
Register user processor --> Registers the transformer for a transformer --> Socre: 1.0

[[[[Adv]]]]: private static void [[registerUserProcessor]] ( MultiInterestUserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[processor]] . multiInterest ( ) || [[processor]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String [[interest]] : [[processor]] . multiInterest ( ) ) { UserProcessor < ? > [[preProcessor]] = userProcessors . putIfAbsent ( [[interest]] , [[processor]] ) ; if ( [[preProcessor]] != null ) { String errMsg = "Processor with interest key [" + [[interest]] + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void [[gila]] ( MultiInterestUserProcessor < ? > [[transformer]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[transformer]] . multiInterest ( ) || [[transformer]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String [[relate]] : [[transformer]] . multiInterest ( ) ) { UserProcessor < ? > [[amusing]] = userProcessors . putIfAbsent ( [[relate]] , [[transformer]] ) ; if ( [[amusing]] != null ) { String errMsg = "Processor with interest key [" + [[relate]] + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 409 ---------------------------------------------
Dispatch request to user processor . --> Performs actual servicing . --> Socre: 1.0

[[[[Adv]]]]: private void [[dispatchToUserProcessor]] ( RemotingContext [[ctx]] , RpcRequestCommand [[cmd]] ) { final int id = [[cmd]] . getId ( ) ; final byte [[type]] = [[cmd]] . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void [[tilman]] ( RemotingContext [[parameters]] , RpcRequestCommand [[hom]] ) { final int id = [[hom]] . getId ( ) ; final byte [[genre]] = [[hom]] . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 410 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 364 / 38 / 8 / 410:  41%|████      | 410/1000 [1:02:10<1:29:27,  9.10s/it][Succeeded / Failed / Skipped / Total] 364 / 38 / 8 / 410:  41%|████      | 411/1000 [1:02:11<1:29:08,  9.08s/it][Succeeded / Failed / Skipped / Total] 365 / 38 / 8 / 411:  41%|████      | 411/1000 [1:02:11<1:29:08,  9.08s/it][Succeeded / Failed / Skipped / Total] 365 / 38 / 8 / 411:  41%|████      | 412/1000 [1:02:14<1:28:49,  9.06s/it][Succeeded / Failed / Skipped / Total] 365 / 39 / 8 / 412:  41%|████      | 412/1000 [1:02:14<1:28:49,  9.06s/it][Succeeded / Failed / Skipped / Total] 365 / 39 / 8 / 412:  41%|████▏     | 413/1000 [1:02:19<1:28:34,  9.05s/it][Succeeded / Failed / Skipped / Total] 366 / 39 / 8 / 413:  41%|████▏     | 413/1000 [1:02:19<1:28:34,  9.05s/it][Succeeded / Failed / Skipped / Total] 366 / 39 / 8 / 413:  41%|████▏     | 414/1000 [1:02:23<1:28:19,  9.04s/it][Succeeded / Failed / Skipped / Total] 367 / 39 / 8 / 414:  41%|████▏     | 414/1000 [1:02:23<1:28:19,  9.04s/it][Succeeded / Failed / Skipped / Total] 367 / 39 / 8 / 414:  42%|████▏     | 415/1000 [1:02:24<1:27:58,  9.02s/it]Send RpcRequestCommandCommand --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean deserializeRequestCommand ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 411 ---------------------------------------------
Preprocess the remoting context --> Sets the execution time for the request . --> Socre: 1.0

[[[[Adv]]]]: private void [[preProcessRemotingContext]] ( RemotingContext [[ctx]] , RpcRequestCommand cmd , long currentTimestamp ) { [[ctx]] . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; [[ctx]] . setTimeout ( cmd . getTimeout ( ) ) ; [[ctx]] . setRpcCommandType ( cmd . getType ( ) ) ; [[ctx]] . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void [[limitations]] ( RemotingContext [[miny]] , RpcRequestCommand cmd , long currentTimestamp ) { [[miny]] . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; [[miny]] . setTimeout ( cmd . getTimeout ( ) ) ; [[miny]] . setRpcCommandType ( cmd . getType ( ) ) ; [[miny]] . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 412 ---------------------------------------------
Find an annotation on the given method . --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 413 ---------------------------------------------
Debug log message . --> Completes the command command . --> Socre: 1.0

[[[[Adv]]]]: private void [[debugLog]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void [[compton]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 414 ---------------------------------------------
Process a message --> This method is not thread safe --> Socre: 1.0

[[[[Adv]]]]: @ Override public void process ( RemotingContext [[ctx]] , T [[msg]] , ExecutorService [[defaultExecutor]] ) throws Exception { ProcessTask task = new ProcessTask ( [[ctx]] , [[msg]] ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { [[defaultExecutor]] . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void process ( RemotingContext [[cmd]] , T [[message]] , ExecutorService [[mise]] ) throws Exception { ProcessTask task = new ProcessTask ( [[cmd]] , [[message]] ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { [[mise]] . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 415 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 368 / 39 / 8 / 415:  42%|████▏     | 415/1000 [1:02:24<1:27:58,  9.02s/it][Succeeded / Failed / Skipped / Total] 368 / 39 / 8 / 415:  42%|████▏     | 416/1000 [1:02:26<1:27:39,  9.01s/it][Succeeded / Failed / Skipped / Total] 369 / 39 / 8 / 416:  42%|████▏     | 416/1000 [1:02:26<1:27:39,  9.01s/it][Succeeded / Failed / Skipped / Total] 369 / 39 / 8 / 416:  42%|████▏     | 417/1000 [1:02:27<1:27:19,  8.99s/it][Succeeded / Failed / Skipped / Total] 370 / 39 / 8 / 417:  42%|████▏     | 417/1000 [1:02:27<1:27:19,  8.99s/it][Succeeded / Failed / Skipped / Total] 370 / 39 / 8 / 417:  42%|████▏     | 418/1000 [1:02:27<1:26:57,  8.97s/it]Log timeout log . --> helper method --> Socre: 1.0

[[[[Adv]]]]: private void [[timeoutLog]] ( final RpcRequestCommand [[cmd]] , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , [[cmd]] . getId ( ) , currentTimestamp , [[cmd]] . getArriveTime ( ) , ( currentTimestamp - [[cmd]] . getArriveTime ( ) ) , [[cmd]] . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , [[cmd]] . getId ( ) , remoteAddr , ( currentTimestamp - [[cmd]] . getArriveTime ( ) ) , [[cmd]] . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void [[attractive]] ( final RpcRequestCommand [[hom]] , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , [[hom]] . getId ( ) , currentTimestamp , [[hom]] . getArriveTime ( ) , ( currentTimestamp - [[hom]] . getArriveTime ( ) ) , [[hom]] . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , [[hom]] . getId ( ) , remoteAddr , ( currentTimestamp - [[hom]] . getArriveTime ( ) ) , [[hom]] . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 416 ---------------------------------------------
Invokes an InvokeCallback with the specified timeout . --> Helper method for invoking the InvokeCallback --> Socre: 1.0

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection [[conn]] , final RemotingCommand request , final InvokeCallback [[invokeCallback]] , final int timeoutMillis ) { final InvokeFuture [[future]] = createInvokeFuture ( [[conn]] , request , request . getInvokeContext ( ) , [[invokeCallback]] ) ; [[conn]] . addInvokeFuture ( [[future]] ) ; final int [[requestId]] = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout [[timeout]] ) throws Exception { InvokeFuture [[future]] = [[conn]] . removeInvokeFuture ( [[requestId]] ) ; if ( [[future]] != null ) { [[future]] . putResponse ( commandFactory . createTimeoutResponse ( [[conn]] . getRemoteAddress ( ) ) ) ; [[future]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; [[future]] . addTimeout ( timeout ) ; [[conn]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = [[conn]] . removeInvokeFuture ( [[requestId]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( [[conn]] . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = [[conn]] . removeInvokeFuture ( [[requestId]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( [[conn]] . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection [[boston]] , final RemotingCommand request , final InvokeCallback [[sheepfold]] , final int timeoutMillis ) { final InvokeFuture [[eventually]] = createInvokeFuture ( [[boston]] , request , request . getInvokeContext ( ) , [[sheepfold]] ) ; [[boston]] . addInvokeFuture ( [[eventually]] ) ; final int [[thei]] = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout [[fouls]] ) throws Exception { InvokeFuture [[eventually]] = [[boston]] . removeInvokeFuture ( [[thei]] ) ; if ( [[eventually]] != null ) { [[eventually]] . putResponse ( commandFactory . createTimeoutResponse ( [[boston]] . getRemoteAddress ( ) ) ) ; [[eventually]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; [[eventually]] . addTimeout ( timeout ) ; [[boston]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = [[boston]] . removeInvokeFuture ( [[thei]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( [[boston]] . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[boston]] . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = [[boston]] . removeInvokeFuture ( [[thei]] ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( [[boston]] . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[boston]] . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 417 ---------------------------------------------
Convert a bit set to a byte value . --> Calculates a little - endian value . --> Socre: 1.0

[[[[Adv]]]]: public static byte [[toByte]] ( BitSet bs ) { int value = 0 ; for ( int [[i]] = 0 ; [[i]] < bs . length ( ) ; ++ [[i]] ) { if ( bs . get ( [[i]] ) ) { value += 1 << [[i]] ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte [[lieb]] ( BitSet bs ) { int value = 0 ; for ( int [[j]] = 0 ; [[j]] < bs . length ( ) ; ++ [[j]] ) { if ( bs . get ( [[j]] ) ) { value += 1 << [[j]] ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 418 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 370 / 39 / 9 / 418:  42%|████▏     | 418/1000 [1:02:27<1:26:57,  8.97s/it][Succeeded / Failed / Skipped / Total] 370 / 39 / 9 / 418:  42%|████▏     | 419/1000 [1:02:28<1:26:38,  8.95s/it][Succeeded / Failed / Skipped / Total] 371 / 39 / 9 / 419:  42%|████▏     | 419/1000 [1:02:28<1:26:38,  8.95s/it][Succeeded / Failed / Skipped / Total] 371 / 39 / 9 / 419:  42%|████▏     | 420/1000 [1:02:29<1:26:17,  8.93s/it][Succeeded / Failed / Skipped / Total] 372 / 39 / 9 / 420:  42%|████▏     | 420/1000 [1:02:29<1:26:17,  8.93s/it][Succeeded / Failed / Skipped / Total] 372 / 39 / 9 / 420:  42%|████▏     | 421/1000 [1:02:29<1:25:57,  8.91s/it][Succeeded / Failed / Skipped / Total] 373 / 39 / 9 / 421:  42%|████▏     | 421/1000 [1:02:29<1:25:57,  8.91s/it][Succeeded / Failed / Skipped / Total] 373 / 39 / 9 / 421:  42%|████▏     | 422/1000 [1:02:39<1:25:49,  8.91s/it][Succeeded / Failed / Skipped / Total] 374 / 39 / 9 / 422:  42%|████▏     | 422/1000 [1:02:39<1:25:49,  8.91s/it][Succeeded / Failed / Skipped / Total] 374 / 39 / 9 / 422:  42%|████▏     | 423/1000 [1:02:43<1:25:33,  8.90s/it]Converts an integer into a BitSet . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static BitSet toBitSet ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 419 ---------------------------------------------
Handles a request . --> Send an invitation --> Socre: 1.0

[[[[Adv]]]]: protected void [[oneway]] ( final Connection [[conn]] , final RemotingCommand [[request]] ) { try { [[conn]] . getChannel ( ) . writeAndFlush ( [[request]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[f]] ) throws Exception { if ( ! [[f]] . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , [[f]] . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[conn]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void [[donny]] ( final Connection [[groton]] , final RemotingCommand [[invitation]] ) { try { [[groton]] . getChannel ( ) . writeAndFlush ( [[invitation]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[r]] ) throws Exception { if ( ! [[r]] . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[groton]] . getChannel ( ) ) , [[r]] . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[groton]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[groton]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 420 ---------------------------------------------
Adds a task to the task . --> Inlures that a link was clicked . --> Socre: 1.0

[[[[Adv]]]]: public void [[addReconnectTask]] ( Url [[url]] ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = [[url]] ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void [[inlaid]] ( Url [[clicked]] ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = [[clicked]] ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 421 ---------------------------------------------
Stop processing . --> Stops the daemon . --> Socre: 1.0

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = "[[False]]" != "[[False]]" ; healConnectionThreads . interrupt ( ) ; this . [[tasks]] . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = "[[Faux]]" != "[[Faux]]" ; healConnectionThreads . interrupt ( ) ; this . [[employment]] . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 422 ---------------------------------------------
Converts request into a remoting command --> Convenience method for consort --> Socre: 1.0

[[[[Adv]]]]: protected RemotingCommand [[toRemotingCommand]] ( Object [[request]] , Connection conn , InvokeContext [[invokeContext]] , int timeoutMillis ) throws SerializationException { RpcRequestCommand [[command]] = this . getCommandFactory ( ) . createRequestCommand ( [[request]] ) ; if ( null != [[invokeContext]] ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand [[consort]] ( Object [[requiring]] , Connection conn , InvokeContext [[putt]] , int timeoutMillis ) throws SerializationException { RpcRequestCommand [[precept]] = this . getCommandFactory ( ) . createRequestCommand ( [[requiring]] ) ; if ( null != [[putt]] ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 423 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 375 / 39 / 9 / 423:  42%|████▏     | 423/1000 [1:02:43<1:25:33,  8.90s/it][Succeeded / Failed / Skipped / Total] 375 / 39 / 9 / 423:  42%|████▏     | 424/1000 [1:02:45<1:25:14,  8.88s/it][Succeeded / Failed / Skipped / Total] 376 / 39 / 9 / 424:  42%|████▏     | 424/1000 [1:02:45<1:25:14,  8.88s/it][Succeeded / Failed / Skipped / Total] 376 / 39 / 9 / 424:  42%|████▎     | 425/1000 [1:02:48<1:24:57,  8.87s/it]Monitor connection pools . --> This method monitors connection pools . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > [[filteredConnectons]] = this . filter ( connections ) ; List < Connection > serviceOnConnections = [[filteredConnectons]] . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > [[serviceOffConnections]] = [[filteredConnectons]] . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection [[freshSelectConnect]] = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; [[freshSelectConnect]] . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , [[freshSelectConnect]] ) ; closeFreshSelectConnections ( lastSelectConnect , [[serviceOffConnections]] ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , [[serviceOffConnections]] ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : [[serviceOffConnections]] ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > [[hallie]] = this . filter ( connections ) ; List < Connection > serviceOnConnections = [[hallie]] . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > [[metaphorical]] = [[hallie]] . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection [[opposable]] = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; [[opposable]] . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , [[opposable]] ) ; closeFreshSelectConnections ( lastSelectConnect , [[metaphorical]] ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , [[metaphorical]] ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : [[metaphorical]] ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 424 ---------------------------------------------
Helper method to close fresh connections --> This method is used to wait for RPETor --> Socre: 1.0

[[[[Adv]]]]: private void [[closeFreshSelectConnections]] ( Connection [[lastSelectConnect]] , List < Connection > [[serviceOffConnections]] ) throws InterruptedException { if ( null != [[lastSelectConnect]] ) { if ( [[lastSelectConnect]] . isInvokeFutureMapFinish ( ) ) { [[serviceOffConnections]] . add ( [[lastSelectConnect]] ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( [[lastSelectConnect]] . isInvokeFutureMapFinish ( ) ) { [[serviceOffConnections]] . add ( [[lastSelectConnect]] ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( [[lastSelectConnect]] . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void [[praetor]] ( Connection [[price]] , List < Connection > [[corpsmen]] ) throws InterruptedException { if ( null != [[price]] ) { if ( [[price]] . isInvokeFutureMapFinish ( ) ) { [[corpsmen]] . add ( [[price]] ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( [[price]] . isInvokeFutureMapFinish ( ) ) { [[corpsmen]] . add ( [[price]] ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( [[price]] . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 425 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 377 / 39 / 9 / 425:  42%|████▎     | 425/1000 [1:02:48<1:24:57,  8.87s/it][Succeeded / Failed / Skipped / Total] 377 / 39 / 9 / 425:  43%|████▎     | 426/1000 [1:02:48<1:24:38,  8.85s/it][Succeeded / Failed / Skipped / Total] 378 / 39 / 9 / 426:  43%|████▎     | 426/1000 [1:02:48<1:24:38,  8.85s/it][Succeeded / Failed / Skipped / Total] 378 / 39 / 9 / 426:  43%|████▎     | 427/1000 [1:02:50<1:24:19,  8.83s/it][Succeeded / Failed / Skipped / Total] 379 / 39 / 9 / 427:  43%|████▎     | 427/1000 [1:02:50<1:24:19,  8.83s/it][Succeeded / Failed / Skipped / Total] 379 / 39 / 9 / 427:  43%|████▎     | 428/1000 [1:02:52<1:24:02,  8.81s/it][Succeeded / Failed / Skipped / Total] 380 / 39 / 9 / 428:  43%|████▎     | 428/1000 [1:02:52<1:24:02,  8.81s/it][Succeeded / Failed / Skipped / Total] 380 / 39 / 9 / 428:  43%|████▎     | 429/1000 [1:02:53<1:23:42,  8.80s/it][Succeeded / Failed / Skipped / Total] 381 / 39 / 9 / 429:  43%|████▎     | 429/1000 [1:02:53<1:23:42,  8.80s/it][Succeeded / Failed / Skipped / Total] 381 / 39 / 9 / 429:  43%|████▎     | 430/1000 [1:02:54<1:23:23,  8.78s/it][Succeeded / Failed / Skipped / Total] 382 / 39 / 9 / 430:  43%|████▎     | 430/1000 [1:02:54<1:23:23,  8.78s/it][Succeeded / Failed / Skipped / Total] 382 / 39 / 9 / 430:  43%|████▎     | 431/1000 [1:02:54<1:23:03,  8.76s/it][Succeeded / Failed / Skipped / Total] 382 / 40 / 9 / 431:  43%|████▎     | 431/1000 [1:02:54<1:23:03,  8.76s/it][Succeeded / Failed / Skipped / Total] 382 / 40 / 9 / 431:  43%|████▎     | 432/1000 [1:02:55<1:22:43,  8.74s/it][Succeeded / Failed / Skipped / Total] 383 / 40 / 9 / 432:  43%|████▎     | 432/1000 [1:02:55<1:22:43,  8.74s/it][Succeeded / Failed / Skipped / Total] 383 / 40 / 9 / 432:  43%|████▎     | 433/1000 [1:02:58<1:22:28,  8.73s/it]Filter a list of connections --> Filters the plug - in and merges the connection status --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > [[connections]] ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > [[serviceOffConnections]] = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : [[connections]] ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { [[serviceOffConnections]] . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , [[serviceOffConnections]] ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > [[plugging]] ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > [[merriam]] = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : [[plugging]] ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { [[merriam]] . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , [[merriam]] ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 426 ---------------------------------------------
Log a info message --> Sends a message to the console . --> Socre: 1.0

[[[[Adv]]]]: private void [[infoLog]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void [[smoochy]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 427 ---------------------------------------------
Gets a system property as a boolean . --> Retrieves the experiment configuration as a boolean . --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[getBool]] ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property

[[[[Adv]]]]: public static boolean [[experiment]] ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 428 ---------------------------------------------
Returns true if the request is a request timeout . --> Returns true if the client should be rejected . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isRequestTimeout]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . [[arriveTimestamp]] ) > this . timeout ) { return "[[True]]" == "[[True]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean [[lief]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . [[reseda]] ) > this . timeout ) { return "[[Befitting]]" == "[[Befitting]]" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 429 ---------------------------------------------
Gets a user processor by its class name . --> Convenience method to return a UserProcessor --> Socre: 1.0

[[[[Adv]]]]: public UserProcessor < ? > [[getUserProcessor]] ( String [[className]] ) { return StringUtils . isBlank ( [[className]] ) ? null : this . [[userProcessors]] . get ( [[className]] ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > [[conservatory]] ( String [[sattler]] ) { return StringUtils . isBlank ( [[sattler]] ) ? null : this . [[hairdryer]] . get ( [[sattler]] ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 430 ---------------------------------------------
Get a random connection . --> Perform integrity check . --> Socre: 1.0

[[[[Adv]]]]: private Connection [[randomGet]] ( List < Connection > [[conns]] ) { if ( null == [[conns]] || [[conns]] . isEmpty ( ) ) { return null ; } int size = [[conns]] . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = [[conns]] . get ( this . [[random]] . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly

[[[[Adv]]]]: private Connection [[integrity]] ( List < Connection > [[warmongering]] ) { if ( null == [[warmongering]] || [[warmongering]] . isEmpty ( ) ) { return null ; } int size = [[warmongering]] . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = [[warmongering]] . get ( this . [[happenstance]] . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 431 ---------------------------------------------
Get the value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . context . get ( key ) != null ? ( T ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . context . get ( key ) != null ? ( T ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 432 ---------------------------------------------
Get a property by key . --> Gets the proposition . --> Socre: 1.0

[[[[Adv]]]]: public String [[getProperty]] ( String [[key]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[key]] ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[perceived]] ( String [[paramount]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[paramount]] ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 433 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 384 / 40 / 9 / 433:  43%|████▎     | 433/1000 [1:02:58<1:22:28,  8.73s/it][Succeeded / Failed / Skipped / Total] 384 / 40 / 9 / 433:  43%|████▎     | 434/1000 [1:03:01<1:22:12,  8.71s/it][Succeeded / Failed / Skipped / Total] 384 / 41 / 9 / 434:  43%|████▎     | 434/1000 [1:03:01<1:22:12,  8.71s/it][Succeeded / Failed / Skipped / Total] 384 / 41 / 9 / 434:  44%|████▎     | 435/1000 [1:03:04<1:21:55,  8.70s/it][Succeeded / Failed / Skipped / Total] 385 / 41 / 9 / 435:  44%|████▎     | 435/1000 [1:03:04<1:21:55,  8.70s/it][Succeeded / Failed / Skipped / Total] 385 / 41 / 9 / 435:  44%|████▎     | 436/1000 [1:03:06<1:21:37,  8.68s/it][Succeeded / Failed / Skipped / Total] 386 / 41 / 9 / 436:  44%|████▎     | 436/1000 [1:03:06<1:21:37,  8.68s/it][Succeeded / Failed / Skipped / Total] 386 / 41 / 9 / 436:  44%|████▎     | 437/1000 [1:03:08<1:21:20,  8.67s/it][Succeeded / Failed / Skipped / Total] 387 / 41 / 9 / 437:  44%|████▎     | 437/1000 [1:03:08<1:21:20,  8.67s/it][Succeeded / Failed / Skipped / Total] 387 / 41 / 9 / 437:  44%|████▍     | 438/1000 [1:03:08<1:21:01,  8.65s/it][Succeeded / Failed / Skipped / Total] 387 / 42 / 9 / 438:  44%|████▍     | 438/1000 [1:03:08<1:21:01,  8.65s/it][Succeeded / Failed / Skipped / Total] 387 / 42 / 9 / 438:  44%|████▍     | 439/1000 [1:03:12<1:20:46,  8.64s/it]Deserialize response object . --> Deserialize an RpcResponse --> Socre: 1.0

[[[[Adv]]]]: private static Object toResponseObject ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand [[response]] = ( RpcResponseCommand ) [[responseCommand]] ; [[response]] . deserialize ( ) ; return [[response]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object toResponseObject ( ResponseCommand [[varied]] ) throws CodecException { RpcResponseCommand [[interventions]] = ( RpcResponseCommand ) [[varied]] ; [[interventions]] . deserialize ( ) ; return [[interventions]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 434 ---------------------------------------------
Returns a strategy for an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Annotation annotation ) { checkNotNull ( annotation , "annotation" ) ; Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , annotation ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( annotation ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Annotation annotation ) { checkNotNull ( annotation , "annotation" ) ; Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , annotation ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( annotation ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 435 ---------------------------------------------
Detail error message . --> Returns a string containing a human - readable message . --> Socre: 1.0

[[[[Adv]]]]: private static String [[detailErrMsg]] ( String [[clientErrMsg]] , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , [[clientErrMsg]] , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , [[clientErrMsg]] ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String [[carrying]] ( String [[hajime]] , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , [[hajime]] , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , [[hajime]] ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 436 ---------------------------------------------
Convert a RpcResponseCommand to a Throwable . --> get simcha --> Socre: 1.0

[[[[Adv]]]]: private static Throwable [[toThrowable]] ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) [[responseCommand]] ; resp . deserialize ( ) ; Object [[ex]] = resp . getResponseObject ( ) ; if ( [[ex]] != null && [[ex]] instanceof Throwable ) { return ( Throwable ) [[ex]] ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable [[simcha]] ( ResponseCommand [[pica]] ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) [[pica]] ; resp . deserialize ( ) ; Object [[past]] = resp . getResponseObject ( ) ; if ( [[past]] != null && [[past]] instanceof Throwable ) { return ( Throwable ) [[past]] ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 437 ---------------------------------------------
Resolves a response object . --> Converts an RPC rejection message to an InvocationException --> Socre: 1.0

[[[[Adv]]]]: public static Object [[resolveResponseObject]] ( ResponseCommand [[responseCommand]] , String [[addr]] ) throws RemotingException { preProcess ( [[responseCommand]] , [[addr]] ) ; if ( [[responseCommand]] . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( [[responseCommand]] ) ; } else { String [[msg]] = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , [[responseCommand]] . getResponseStatus ( ) , [[addr]] , [[responseCommand]] . getId ( ) ) ; logger . warn ( [[msg]] ) ; if ( [[responseCommand]] . getCause ( ) != null ) { throw new InvokeException ( [[msg]] , [[responseCommand]] . getCause ( ) ) ; } else { throw new InvokeException ( [[msg]] + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object [[easterbrook]] ( ResponseCommand [[conscious]] , String [[tyrone]] ) throws RemotingException { preProcess ( [[conscious]] , [[tyrone]] ) ; if ( [[conscious]] . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( [[conscious]] ) ; } else { String [[mailroom]] = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , [[conscious]] . getResponseStatus ( ) , [[tyrone]] , [[conscious]] . getId ( ) ) ; logger . warn ( [[mailroom]] ) ; if ( [[conscious]] . getCause ( ) != null ) { throw new InvokeException ( [[mailroom]] , [[conscious]] . getCause ( ) ) ; } else { throw new InvokeException ( [[mailroom]] + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 438 ---------------------------------------------
Gets the future task result . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > T getFutureTaskResult ( RunStateRecordedFutureTask < T > task , Logger logger ) { T t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < T > T getFutureTaskResult ( RunStateRecordedFutureTask < T > task , Logger logger ) { T t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 439 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 388 / 42 / 9 / 439:  44%|████▍     | 439/1000 [1:03:12<1:20:46,  8.64s/it][Succeeded / Failed / Skipped / Total] 388 / 42 / 9 / 439:  44%|████▍     | 440/1000 [1:03:14<1:20:29,  8.62s/it][Succeeded / Failed / Skipped / Total] 389 / 42 / 9 / 440:  44%|████▍     | 440/1000 [1:03:14<1:20:29,  8.62s/it][Succeeded / Failed / Skipped / Total] 389 / 42 / 9 / 440:  44%|████▍     | 441/1000 [1:03:19<1:20:15,  8.62s/it][Succeeded / Failed / Skipped / Total] 390 / 42 / 9 / 441:  44%|████▍     | 441/1000 [1:03:19<1:20:15,  8.62s/it][Succeeded / Failed / Skipped / Total] 390 / 42 / 9 / 441:  44%|████▍     | 442/1000 [1:03:20<1:19:58,  8.60s/it][Succeeded / Failed / Skipped / Total] 391 / 42 / 9 / 442:  44%|████▍     | 442/1000 [1:03:20<1:19:58,  8.60s/it][Succeeded / Failed / Skipped / Total] 391 / 42 / 9 / 442:  44%|████▍     | 443/1000 [1:03:39<1:20:02,  8.62s/it][Succeeded / Failed / Skipped / Total] 392 / 42 / 9 / 443:  44%|████▍     | 443/1000 [1:03:39<1:20:02,  8.62s/it][Succeeded / Failed / Skipped / Total] 392 / 42 / 9 / 443:  44%|████▍     | 444/1000 [1:03:53<1:20:00,  8.63s/it][Succeeded / Failed / Skipped / Total] 393 / 42 / 9 / 444:  44%|████▍     | 444/1000 [1:03:53<1:20:00,  8.63s/it][Succeeded / Failed / Skipped / Total] 393 / 42 / 9 / 444:  44%|████▍     | 445/1000 [1:04:05<1:19:56,  8.64s/it][Succeeded / Failed / Skipped / Total] 394 / 42 / 9 / 445:  44%|████▍     | 445/1000 [1:04:05<1:19:56,  8.64s/it][Succeeded / Failed / Skipped / Total] 394 / 42 / 9 / 445:  45%|████▍     | 446/1000 [1:04:06<1:19:37,  8.62s/it]Create an RpcServerException from a Throwable . --> Helper method for creating an RpcServerException object --> Socre: 1.0

[[[[Adv]]]]: private RpcServerException [[createServerException]] ( Throwable [[t]] , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , [[t]] . getClass ( ) . getName ( ) , [[t]] . getMessage ( ) , errMsg ) ; RpcServerException [[e]] = new RpcServerException ( formattedErrMsg ) ; [[e]] . setStackTrace ( [[t]] . getStackTrace ( ) ) ; return [[e]] ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException [[languid]] ( Throwable [[mil]] , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , [[mil]] . getClass ( ) . getName ( ) , [[mil]] . getMessage ( ) , errMsg ) ; RpcServerException [[ell]] = new RpcServerException ( formattedErrMsg ) ; [[ell]] . setStackTrace ( [[mil]] . getStackTrace ( ) ) ; return [[ell]] ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 440 ---------------------------------------------
Creates a new event loop group . --> Creates a new EventLoopGroup --> Socre: 1.0

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int nThreads , ThreadFactory [[threadFactory]] ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , [[threadFactory]] ) : new NioEventLoopGroup ( nThreads , [[threadFactory]] ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int nThreads , ThreadFactory [[cavemen]] ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , [[cavemen]] ) : new NioEventLoopGroup ( nThreads , [[cavemen]] ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 441 ---------------------------------------------
Gets the remote IP address . --> Get shaqq qname --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[shafiq]] ( final Channel [[groove]] ) { if ( null == [[groove]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[groove]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 442 ---------------------------------------------
Print connection trace log . --> For debugging purposes --> Socre: 1.0

[[[[Adv]]]]: public static void printConnectionTraceLog ( Logger [[logger]] , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( [[logger]] . isInfoEnabled ( ) ) { [[logger]] . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void printConnectionTraceLog ( Logger [[woodcutters]] , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( [[woodcutters]] . isInfoEnabled ( ) ) { [[woodcutters]] . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 443 ---------------------------------------------
Gets the local IP address . --> Convert a waterway to etherway --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseLocalIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String [[cryogenically]] ( final Channel [[waterway]] ) { if ( null == [[waterway]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[waterway]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 444 ---------------------------------------------
Parses the local address of the given channel . --> For debugging purposes --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress [[local]] = [[channel]] . localAddress ( ) ; return doParse ( [[local]] != null ? [[local]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[cluttering]] ( final Channel [[pipelines]] ) { if ( null == [[pipelines]] ) { return StringUtils . EMPTY ; } final SocketAddress [[situated]] = [[pipelines]] . localAddress ( ) ; return doParse ( [[situated]] != null ? [[situated]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 445 ---------------------------------------------
Parse the remote address . --> For debugging purposes only --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress [[remote]] = [[channel]] . remoteAddress ( ) ; return doParse ( [[remote]] != null ? [[remote]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[blistering]] ( final Channel [[chaining]] ) { if ( null == [[chaining]] ) { return StringUtils . EMPTY ; } final SocketAddress [[inaccessible]] = [[chaining]] . remoteAddress ( ) ; return doParse ( [[inaccessible]] != null ? [[inaccessible]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 446 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 394 / 43 / 9 / 446:  45%|████▍     | 446/1000 [1:04:06<1:19:37,  8.62s/it][Succeeded / Failed / Skipped / Total] 394 / 43 / 9 / 446:  45%|████▍     | 447/1000 [1:04:09<1:19:22,  8.61s/it][Succeeded / Failed / Skipped / Total] 395 / 43 / 9 / 447:  45%|████▍     | 447/1000 [1:04:09<1:19:22,  8.61s/it][Succeeded / Failed / Skipped / Total] 395 / 43 / 9 / 447:  45%|████▍     | 448/1000 [1:04:12<1:19:06,  8.60s/it][Succeeded / Failed / Skipped / Total] 396 / 43 / 9 / 448:  45%|████▍     | 448/1000 [1:04:12<1:19:06,  8.60s/it][Succeeded / Failed / Skipped / Total] 396 / 43 / 9 / 448:  45%|████▍     | 449/1000 [1:04:17<1:18:54,  8.59s/it][Succeeded / Failed / Skipped / Total] 397 / 43 / 9 / 449:  45%|████▍     | 449/1000 [1:04:17<1:18:54,  8.59s/it][Succeeded / Failed / Skipped / Total] 397 / 43 / 9 / 449:  45%|████▌     | 450/1000 [1:04:19<1:18:37,  8.58s/it][Succeeded / Failed / Skipped / Total] 398 / 43 / 9 / 450:  45%|████▌     | 450/1000 [1:04:19<1:18:37,  8.58s/it][Succeeded / Failed / Skipped / Total] 398 / 43 / 9 / 450:  45%|████▌     | 451/1000 [1:04:21<1:18:21,  8.56s/it][Succeeded / Failed / Skipped / Total] 399 / 43 / 9 / 451:  45%|████▌     | 451/1000 [1:04:21<1:18:21,  8.56s/it][Succeeded / Failed / Skipped / Total] 399 / 43 / 9 / 451:  45%|████▌     | 452/1000 [1:04:37<1:18:20,  8.58s/it][Succeeded / Failed / Skipped / Total] 400 / 43 / 9 / 452:  45%|████▌     | 452/1000 [1:04:37<1:18:20,  8.58s/it][Succeeded / Failed / Skipped / Total] 400 / 43 / 9 / 452:  45%|████▌     | 453/1000 [1:04:56<1:18:24,  8.60s/it][Succeeded / Failed / Skipped / Total] 401 / 43 / 9 / 453:  45%|████▌     | 453/1000 [1:04:56<1:18:24,  8.60s/it][Succeeded / Failed / Skipped / Total] 401 / 43 / 9 / 453:  45%|████▌     | 454/1000 [1:04:58<1:18:08,  8.59s/it]Returns an annotation strategy for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Class < ? extends Annotation > annotationType ) { annotationType = Annotations . canonicalizeIfNamed ( annotationType ) ; if ( isAllDefaultMethods ( annotationType ) ) { return strategyFor ( generateAnnotation ( annotationType ) ) ; } checkNotNull ( annotationType , "annotation type" ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; return new AnnotationTypeStrategy ( annotationType , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Class < ? extends Annotation > annotationType ) { annotationType = Annotations . canonicalizeIfNamed ( annotationType ) ; if ( isAllDefaultMethods ( annotationType ) ) { return strategyFor ( generateAnnotation ( annotationType ) ) ; } checkNotNull ( annotationType , "annotation type" ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; return new AnnotationTypeStrategy ( annotationType , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 447 ---------------------------------------------
Adds a new connection . --> Augments the given liaison . --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Connection [[connection]] ) { markAccess ( ) ; if ( null == [[connection]] ) { return ; } boolean [[res]] = this . conns . addIfAbsent ( [[connection]] ) ; if ( [[res]] ) { [[connection]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void [[supplement]] ( Connection [[liaison]] ) { markAccess ( ) ; if ( null == [[liaison]] ) { return ; } boolean [[truthfully]] = this . conns . addIfAbsent ( [[liaison]] ) ; if ( [[truthfully]] ) { [[liaison]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 448 ---------------------------------------------
Get remote port . --> Get trident --> Socre: 1.0

[[[[Adv]]]]: public static int [[parseRemotePort]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int [[trident]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 449 ---------------------------------------------
Parse socket address to host IP address . --> Convert a SocketAddress to yssss --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseSocketAddressToHostIp]] ( SocketAddress socketAddress ) { final InetSocketAddress [[addrs]] = ( InetSocketAddress ) socketAddress ; if ( [[addrs]] != null ) { InetAddress [[addr]] = [[addrs]] . getAddress ( ) ; if ( null != [[addr]] ) { return [[addr]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String [[yessss]] ( SocketAddress socketAddress ) { final InetSocketAddress [[goff]] = ( InetSocketAddress ) socketAddress ; if ( [[goff]] != null ) { InetAddress [[gooch]] = [[goff]] . getAddress ( ) ; if ( null != [[gooch]] ) { return [[gooch]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 450 ---------------------------------------------
Remove a connection . --> Delegacy method . --> Socre: 1.0

[[[[Adv]]]]: public void [[removeAndTryClose]] ( Connection [[connection]] ) { if ( null == [[connection]] ) { return ; } boolean res = this . [[conns]] . remove ( [[connection]] ) ; if ( res ) { [[connection]] . decreaseRef ( ) ; } if ( [[connection]] . noRef ( ) ) { [[connection]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void [[demarcation]] ( Connection [[regard]] ) { if ( null == [[regard]] ) { return ; } boolean res = this . [[beside]] . remove ( [[regard]] ) ; if ( res ) { [[regard]] . decreaseRef ( ) ; } if ( [[regard]] . noRef ( ) ) { [[regard]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 451 ---------------------------------------------
Gets the connection . --> Check to see if this is reachable . --> Socre: 1.0

[[[[Adv]]]]: public Connection [[get]] ( ) { markAccess ( ) ; if ( null != this . [[conns]] ) { List < Connection > snapshot = new ArrayList < Connection > ( this . [[conns]] ) ; if ( snapshot . size ( ) > 0 ) { return this . [[strategy]] . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection [[reaches]] ( ) { markAccess ( ) ; if ( null != this . [[mortgages]] ) { List < Connection > snapshot = new ArrayList < Connection > ( this . [[mortgages]] ) ; if ( snapshot . size ( ) > 0 ) { return this . [[practises]] . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 452 ---------------------------------------------
Returns the custom serializer for the given class . --> returns null if no such customizer found --> Socre: 1.0

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( String [[className]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[className]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer [[uninterested]] ( String [[smithsonian]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[smithsonian]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 453 ---------------------------------------------
Register a custom serializer for the given class . --> Zoo - zookeeper --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String className , CustomSerializer [[serializer]] ) { CustomSerializer [[prevSerializer]] = classCustomSerializer . putIfAbsent ( className , [[serializer]] ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + className + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[zulu]] ( String className , CustomSerializer [[kunlun]] ) { CustomSerializer [[robson]] = classCustomSerializer . putIfAbsent ( className , [[kunlun]] ) ; if ( [[robson]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + className + ", the custom serializer is: " + [[robson]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 454 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 402 / 43 / 9 / 454:  45%|████▌     | 454/1000 [1:04:58<1:18:08,  8.59s/it][Succeeded / Failed / Skipped / Total] 402 / 43 / 9 / 454:  46%|████▌     | 455/1000 [1:05:00<1:17:51,  8.57s/it][Succeeded / Failed / Skipped / Total] 403 / 43 / 9 / 455:  46%|████▌     | 455/1000 [1:05:00<1:17:51,  8.57s/it][Succeeded / Failed / Skipped / Total] 403 / 43 / 9 / 455:  46%|████▌     | 456/1000 [1:05:00<1:17:33,  8.55s/it][Succeeded / Failed / Skipped / Total] 404 / 43 / 9 / 456:  46%|████▌     | 456/1000 [1:05:00<1:17:33,  8.55s/it][Succeeded / Failed / Skipped / Total] 404 / 43 / 9 / 456:  46%|████▌     | 457/1000 [1:05:01<1:17:16,  8.54s/it][Succeeded / Failed / Skipped / Total] 405 / 43 / 9 / 457:  46%|████▌     | 457/1000 [1:05:01<1:17:16,  8.54s/it][Succeeded / Failed / Skipped / Total] 405 / 43 / 9 / 457:  46%|████▌     | 458/1000 [1:05:02<1:16:57,  8.52s/it][Succeeded / Failed / Skipped / Total] 405 / 43 / 10 / 458:  46%|████▌     | 458/1000 [1:05:02<1:16:57,  8.52s/it][Succeeded / Failed / Skipped / Total] 405 / 43 / 10 / 458:  46%|████▌     | 459/1000 [1:05:02<1:16:40,  8.50s/it][Succeeded / Failed / Skipped / Total] 406 / 43 / 10 / 459:  46%|████▌     | 459/1000 [1:05:02<1:16:40,  8.50s/it][Succeeded / Failed / Skipped / Total] 406 / 43 / 10 / 459:  46%|████▌     | 460/1000 [1:05:07<1:16:27,  8.49s/it][Succeeded / Failed / Skipped / Total] 407 / 43 / 10 / 460:  46%|████▌     | 460/1000 [1:05:07<1:16:27,  8.49s/it][Succeeded / Failed / Skipped / Total] 407 / 43 / 10 / 460:  46%|████▌     | 461/1000 [1:05:07<1:16:09,  8.48s/it][Succeeded / Failed / Skipped / Total] 408 / 43 / 10 / 461:  46%|████▌     | 461/1000 [1:05:07<1:16:09,  8.48s/it][Succeeded / Failed / Skipped / Total] 408 / 43 / 10 / 461:  46%|████▌     | 462/1000 [1:05:14<1:15:58,  8.47s/it]Start connection monitor . --> Starts the launcher . --> Socre: 1.0

[[[[Adv]]]]: public void start ( ) { long [[initialDelay]] = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . [[executor]] = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "[[True]]" == "[[True]]" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . [[executor]] . scheduleAtFixedRate ( monitorTask , [[initialDelay]] , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task

[[[[Adv]]]]: public void start ( ) { long [[flemish]] = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . [[launcher]] = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "[[Proper]]" == "[[Proper]]" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . [[launcher]] . scheduleAtFixedRate ( monitorTask , [[flemish]] , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 455 ---------------------------------------------
Get the hostname of the remote host . --> Get stunk name --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[stunk]] ( final Channel [[pipelines]] ) { if ( null == [[pipelines]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[journeying]] = ( InetSocketAddress ) [[pipelines]] . remoteAddress ( ) ; if ( [[journeying]] != null ) { return [[journeying]] . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 456 ---------------------------------------------
Register a custom serializer for command code . --> zink CustomSerializer --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode [[code]] , CustomSerializer [[serializer]] ) { CustomSerializer [[prevSerializer]] = commandCustomSerializer . putIfAbsent ( [[code]] , [[serializer]] ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[code]] + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[zippy]] ( CommandCode [[iban]] , CustomSerializer [[kye]] ) { CustomSerializer [[nitro]] = commandCustomSerializer . putIfAbsent ( [[iban]] , [[kye]] ) ; if ( [[nitro]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[iban]] + ", the custom serializer is: " + [[nitro]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 457 ---------------------------------------------
Create a frame for the given opcode . --> Factory method for creating frames . --> Socre: 1.0

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[opcode]] ) { if ( [[opcode]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[opcode]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[rk]] ) { if ( [[rk]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[rk]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 458 ---------------------------------------------
Batch message queue . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 459 ---------------------------------------------
Check if the remote address is connected . --> Checks if the server is sudd --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isConnected]] ( String [[remoteAddr]] ) { Url [[url]] = this . [[rpcRemoting]] . addressParser . parse ( [[remoteAddr]] ) ; return this . isConnected ( [[url]] ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean [[sudd]] ( String [[coordinating]] ) { Url [[youtube]] = this . [[saxena]] . addressParser . parse ( [[coordinating]] ) ; return this . isConnected ( [[youtube]] ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 460 ---------------------------------------------
Validates that the payload is valid . --> Calculate four scores --> Socre: 1.0

[[[[Adv]]]]: private void [[validateUtf8]] ( ByteBuffer payload , int mark ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void [[fourscore]] ( ByteBuffer payload , int mark ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 461 ---------------------------------------------
Sets the code . --> Sets javy . --> Socre: 1.0

[[[[Adv]]]]: public void [[setCode]] ( int [[code]] ) { this . [[code]] = [[code]] ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[javy]] ( int [[crypto]] ) { this . [[encrypted]] = [[crypto]] ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 462 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 409 / 43 / 10 / 462:  46%|████▌     | 462/1000 [1:05:14<1:15:58,  8.47s/it][Succeeded / Failed / Skipped / Total] 410 / 43 / 10 / 463:  46%|████▋     | 463/1000 [1:05:14<1:15:39,  8.45s/it][Succeeded / Failed / Skipped / Total] 410 / 43 / 10 / 463:  46%|████▋     | 464/1000 [1:05:23<1:15:32,  8.46s/it][Succeeded / Failed / Skipped / Total] 411 / 43 / 10 / 464:  46%|████▋     | 464/1000 [1:05:23<1:15:32,  8.46s/it][Succeeded / Failed / Skipped / Total] 412 / 43 / 10 / 465:  46%|████▋     | 465/1000 [1:05:25<1:15:16,  8.44s/it][Succeeded / Failed / Skipped / Total] 412 / 43 / 10 / 465:  47%|████▋     | 466/1000 [1:05:29<1:15:03,  8.43s/it][Succeeded / Failed / Skipped / Total] 413 / 43 / 10 / 466:  47%|████▋     | 466/1000 [1:05:29<1:15:03,  8.43s/it][Succeeded / Failed / Skipped / Total] 414 / 43 / 10 / 467:  47%|████▋     | 467/1000 [1:05:29<1:14:45,  8.42s/it][Succeeded / Failed / Skipped / Total] 414 / 43 / 10 / 467:  47%|████▋     | 468/1000 [1:05:31<1:14:28,  8.40s/it][Succeeded / Failed / Skipped / Total] 415 / 43 / 10 / 468:  47%|████▋     | 468/1000 [1:05:31<1:14:28,  8.40s/it]Checks whether the given protocol contains the requested protocol . --> Performs a quick handshake . --> Socre: 1.0

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String requestedProtocol ) { for ( IProtocol [[knownProtocol]] : knownProtocols ) { if ( [[knownProtocol]] . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = [[knownProtocol]] ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[quickies]] ( String requestedProtocol ) { for ( IProtocol [[preliminaries]] : knownProtocols ) { if ( [[preliminaries]] . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = [[preliminaries]] ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 463 ---------------------------------------------
Update the payload . --> Synchronized . --> Socre: 1.0

[[[[Adv]]]]: private void [[updatePayload]] ( ) { byte [ ] [[by]] = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + [[by]] . length ) ; pay . put ( buf ) ; pay . put ( [[by]] ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void [[cautiously]] ( ) { byte [ ] [[para]] = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + [[para]] . length ) ; pay . put ( buf ) ; pay . put ( [[para]] ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 464 ---------------------------------------------
Translate a single frame size check to an IncompleteException --> Checks for zipped frame . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckPacketSize]] ( int [[maxpacketsize]] , int realpacketsize ) throws IncompleteException { if ( [[maxpacketsize]] < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void [[zed]] ( int [[lawmen]] , int realpacketsize ) throws IncompleteException { if ( [[lawmen]] < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 465 ---------------------------------------------
Generate final key . --> Gets the digest . --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[augustin]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 466 ---------------------------------------------
Initialize write buffer water mark . --> Terminate buffered buffers . --> Socre: 1.0

[[[[Adv]]]]: private void [[initWriteBufferWaterMark]] ( ) { int [[lowWaterMark]] = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( [[lowWaterMark]] > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , [[lowWaterMark]] ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , [[lowWaterMark]] , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( [[lowWaterMark]] , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void [[terminally]] ( ) { int [[columbine]] = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( [[columbine]] > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , [[columbine]] ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , [[columbine]] , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( [[columbine]] , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 467 ---------------------------------------------
Get custom serializer for command code --> Methode deserializer --> Socre: 1.0

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode [[code]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[code]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[duhamel]] ( CommandCode [[decode]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[decode]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 468 ---------------------------------------------
Called when frame is not started --> Processes continuation and non - continuation frames --> Socre: 1.0

[[[[Adv]]]]: private void processFrameContinuousAndNonFin ( WebSocketImpl webSocketImpl , Framedata [[frame]] , Opcode [[curop]] ) throws InvalidDataException { if ( [[curop]] != Opcode . CONTINUOUS ) { processFrameIsNotFin ( [[frame]] ) ; } else if ( [[frame]] . isFin ( ) ) { processFrameIsFin ( webSocketImpl , [[frame]] ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void processFrameContinuousAndNonFin ( WebSocketImpl webSocketImpl , Framedata [[phraseology]] , Opcode [[uriah]] ) throws InvalidDataException { if ( [[uriah]] != Opcode . CONTINUOUS ) { processFrameIsNotFin ( [[phraseology]] ) ; } else if ( [[phraseology]] . isFin ( ) ) { processFrameIsFin ( webSocketImpl , [[phraseology]] ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 469 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 416 / 43 / 10 / 469:  47%|████▋     | 469/1000 [1:05:31<1:14:11,  8.38s/it][Succeeded / Failed / Skipped / Total] 416 / 43 / 10 / 469:  47%|████▋     | 470/1000 [1:05:32<1:13:54,  8.37s/it][Succeeded / Failed / Skipped / Total] 417 / 43 / 10 / 470:  47%|████▋     | 470/1000 [1:05:32<1:13:54,  8.37s/it][Succeeded / Failed / Skipped / Total] 418 / 43 / 10 / 471:  47%|████▋     | 471/1000 [1:05:35<1:13:39,  8.35s/it][Succeeded / Failed / Skipped / Total] 418 / 43 / 10 / 471:  47%|████▋     | 472/1000 [1:05:37<1:13:24,  8.34s/it][Succeeded / Failed / Skipped / Total] 419 / 43 / 10 / 472:  47%|████▋     | 472/1000 [1:05:37<1:13:24,  8.34s/it][Succeeded / Failed / Skipped / Total] 420 / 43 / 10 / 473:  47%|████▋     | 473/1000 [1:05:37<1:13:07,  8.32s/it][Succeeded / Failed / Skipped / Total] 420 / 43 / 10 / 473:  47%|████▋     | 474/1000 [1:05:41<1:12:53,  8.31s/it][Succeeded / Failed / Skipped / Total] 421 / 43 / 10 / 474:  47%|████▋     | 474/1000 [1:05:41<1:12:53,  8.31s/it]Logs a runtime exception . --> Called when a websocket message is received . --> Socre: 1.0

[[[[Adv]]]]: private void [[logRuntimeException]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void [[denials]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 470 ---------------------------------------------
Processes a frame text . --> Dispatches an enterprise message . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameText]] ( WebSocketImpl [[webSocketImpl]] , Framedata [[frame]] ) throws InvalidDataException { try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , Charsetfunctions . stringUtf8 ( [[frame]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void [[ecause]] ( WebSocketImpl [[exhibition]] , Framedata [[phrasing]] ) throws InvalidDataException { try { [[exhibition]] . getWebSocketListener ( ) . onWebsocketMessage ( [[exhibition]] , Charsetfunctions . stringUtf8 ( [[phrasing]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[exhibition]] , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 471 ---------------------------------------------
Processes a frame --> documentation inherited from WebSocketListener --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameBinary]] ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , [[frame]] . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void [[mallrats]] ( WebSocketImpl webSocketImpl , Framedata [[structured]] ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , [[structured]] . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 472 ---------------------------------------------
Processes the next frame . --> Perform admiralty . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata [[frame]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[frame]] ; addToBufferList ( [[frame]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[admiralty]] ( Framedata [[weaving]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[weaving]] ; addToBufferList ( [[weaving]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 473 ---------------------------------------------
Translate single frame length limit . --> Checks for skippin . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long [[length]] ) throws LimitExceededException { if ( [[length]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[length]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[length]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[length]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[skippin]] ( long [[lifespan]] ) throws LimitExceededException { if ( [[lifespan]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[lifespan]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[lifespan]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[lifespan]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 474 ---------------------------------------------
Gets the payload from the buffer list . --> Wrap keyboard . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer [[buffer]] : byteBufferList ) { totalSize += [[buffer]] . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer [[buffer]] : byteBufferList ) { resultingByteBuffer . put ( [[buffer]] ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[memoriam]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer [[keyboards]] : byteBufferList ) { totalSize += [[keyboards]] . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer [[keyboards]] : byteBufferList ) { resultingByteBuffer . put ( [[keyboards]] ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 475 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 422 / 43 / 10 / 475:  48%|████▊     | 475/1000 [1:05:46<1:12:42,  8.31s/it][Succeeded / Failed / Skipped / Total] 422 / 43 / 10 / 475:  48%|████▊     | 476/1000 [1:05:47<1:12:25,  8.29s/it][Succeeded / Failed / Skipped / Total] 423 / 43 / 10 / 476:  48%|████▊     | 476/1000 [1:05:47<1:12:25,  8.29s/it][Succeeded / Failed / Skipped / Total] 424 / 43 / 10 / 477:  48%|████▊     | 477/1000 [1:05:48<1:12:09,  8.28s/it][Succeeded / Failed / Skipped / Total] 424 / 43 / 10 / 477:  48%|████▊     | 478/1000 [1:05:48<1:11:52,  8.26s/it][Succeeded / Failed / Skipped / Total] 425 / 43 / 10 / 478:  48%|████▊     | 478/1000 [1:05:48<1:11:52,  8.26s/it][Succeeded / Failed / Skipped / Total] 426 / 43 / 10 / 479:  48%|████▊     | 479/1000 [1:05:48<1:11:35,  8.24s/it][Succeeded / Failed / Skipped / Total] 426 / 43 / 10 / 479:  48%|████▊     | 480/1000 [1:05:49<1:11:18,  8.23s/it][Succeeded / Failed / Skipped / Total] 427 / 43 / 10 / 480:  48%|████▊     | 480/1000 [1:05:49<1:11:18,  8.23s/it]Processes the current frame --> Dispatches two frames . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl [[webSocketImpl]] , Framedata [[frame]] ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( [[frame]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketMessage ( [[webSocketImpl]] , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[webSocketImpl]] , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[pairing]] ( WebSocketImpl [[baban]] , Framedata [[constructs]] ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( [[constructs]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { [[baban]] . getWebSocketListener ( ) . onWebsocketMessage ( [[baban]] , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[baban]] , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { [[baban]] . getWebSocketListener ( ) . onWebsocketMessage ( [[baban]] , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( [[baban]] , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 476 ---------------------------------------------
Process a Frame . --> Do nothing . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameClosing]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int [[code]] = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame [[cf]] = ( CloseFrame ) frame ; [[code]] = [[cf]] . getCloseCode ( ) ; reason = [[cf]] . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void [[ditching]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int [[subtitled]] = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame [[dc]] = ( CloseFrame ) frame ; [[subtitled]] = [[dc]] . getCloseCode ( ) ; reason = [[dc]] . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 477 ---------------------------------------------
Translate handshake . --> Store rooms . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpClient]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder [[storerooms]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 478 ---------------------------------------------
Translate handshake . --> Use selenades . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpServer]] ( String [ ] [[firstLineTokens]] , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder [[serenades]] ( String [ ] [[morons]] , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 479 ---------------------------------------------
Decodes the packet . --> Decodes a handshake . --> Socre: 1.0

[[[[Adv]]]]: public void [[decode]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void [[dolby]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 480 ---------------------------------------------
Close the connection . --> Send Euston error --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToWrongHandshake]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void [[euston]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 481 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 428 / 43 / 10 / 481:  48%|████▊     | 481/1000 [1:05:50<1:11:02,  8.21s/it][Succeeded / Failed / Skipped / Total] 428 / 43 / 10 / 481:  48%|████▊     | 482/1000 [1:05:50<1:10:45,  8.20s/it][Succeeded / Failed / Skipped / Total] 429 / 43 / 10 / 482:  48%|████▊     | 482/1000 [1:05:50<1:10:45,  8.20s/it][Succeeded / Failed / Skipped / Total] 429 / 44 / 10 / 483:  48%|████▊     | 483/1000 [1:05:51<1:10:29,  8.18s/it][Succeeded / Failed / Skipped / Total] 429 / 44 / 10 / 483:  48%|████▊     | 484/1000 [1:05:55<1:10:17,  8.17s/it][Succeeded / Failed / Skipped / Total] 430 / 44 / 10 / 484:  48%|████▊     | 484/1000 [1:05:55<1:10:17,  8.17s/it][Succeeded / Failed / Skipped / Total] 430 / 45 / 10 / 485:  48%|████▊     | 485/1000 [1:06:04<1:10:09,  8.17s/it][Succeeded / Failed / Skipped / Total] 430 / 45 / 10 / 485:  49%|████▊     | 486/1000 [1:06:05<1:09:53,  8.16s/it][Succeeded / Failed / Skipped / Total] 431 / 45 / 10 / 486:  49%|████▊     | 486/1000 [1:06:05<1:09:53,  8.16s/it]Closes the connection . --> Send Ziadad request . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[ziad]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 482 ---------------------------------------------
Generates the HTTP response for an error . --> getRole --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[generateHttpResponseDueToError]] ( int [[errorCode]] ) { String [[errorCodeDescription]] ; switch ( [[errorCode]] ) { case 404 : [[errorCodeDescription]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[errorCodeDescription]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[errorCodeDescription]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[errorCodeDescription]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[errorCodeDescription]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer [[role]] ( int [[porsche]] ) { String [[moist]] ; switch ( [[porsche]] ) { case 404 : [[moist]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[moist]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[moist]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[moist]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[moist]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 483 ---------------------------------------------
Reset the connection . --> [[[FAILED]]]

[[[[Adv]]]]: private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect

[[[[Adv]]]]: private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 484 ---------------------------------------------
Send a text to the WebSocketImpl --> documentation inherited from WebSocketImpl --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[send]] ( String [[text]] ) { if ( [[text]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[send]] ( draft . createFrames ( [[text]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void [[submitted]] ( String [[handwritten]] ) { if ( [[handwritten]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[submitted]] ( draft . createFrames ( [[handwritten]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 485 ---------------------------------------------
Register a default processor --> [[[FAILED]]]

[[[[Adv]]]]: public void registerDefaultProcessor ( RemotingProcessor < ? > processor ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void registerDefaultProcessor ( RemotingProcessor < ? > processor ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 486 ---------------------------------------------
Returns the port of the given channel . --> Returns - 1 if not found --> Socre: 1.0

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[scarin]] ( final Channel [[tubes]] ) { if ( null == [[tubes]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[tubes]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 487 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 432 / 45 / 10 / 487:  49%|████▊     | 487/1000 [1:06:07<1:09:39,  8.15s/it][Succeeded / Failed / Skipped / Total] 432 / 45 / 10 / 487:  49%|████▉     | 488/1000 [1:06:11<1:09:26,  8.14s/it][Succeeded / Failed / Skipped / Total] 432 / 46 / 10 / 488:  49%|████▉     | 488/1000 [1:06:11<1:09:26,  8.14s/it][Succeeded / Failed / Skipped / Total] 433 / 46 / 10 / 489:  49%|████▉     | 489/1000 [1:06:13<1:09:12,  8.13s/it][Succeeded / Failed / Skipped / Total] 433 / 46 / 10 / 489:  49%|████▉     | 490/1000 [1:06:13<1:08:56,  8.11s/it][Succeeded / Failed / Skipped / Total] 434 / 46 / 10 / 490:  49%|████▉     | 490/1000 [1:06:13<1:08:56,  8.11s/it][Succeeded / Failed / Skipped / Total] 435 / 46 / 10 / 491:  49%|████▉     | 491/1000 [1:06:14<1:08:40,  8.09s/it][Succeeded / Failed / Skipped / Total] 435 / 46 / 10 / 491:  49%|████▉     | 492/1000 [1:06:16<1:08:25,  8.08s/it][Succeeded / Failed / Skipped / Total] 436 / 46 / 10 / 492:  49%|████▉     | 492/1000 [1:06:16<1:08:25,  8.08s/it]Sets the connection lost timeout . --> Called by websocket thread . --> Socre: 1.0

[[[[Adv]]]]: public void [[setConnectionLostTimeout]] ( int [[connectionLostTimeout]] ) { synchronized ( syncConnectionLost ) { this . [[connectionLostTimeout]] = TimeUnit . SECONDS . toNanos ( [[connectionLostTimeout]] ) ; if ( this . [[connectionLostTimeout]] <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void [[unintended]] ( int [[bubble]] ) { synchronized ( syncConnectionLost ) { this . [[tron]] = TimeUnit . SECONDS . toNanos ( [[bubble]] ) ; if ( this . [[tron]] <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 488 ---------------------------------------------
Start the connect thread . --> [[[FAILED]]]

[[[[Adv]]]]: public void connect ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void connect ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 489 ---------------------------------------------
Returns the total size of the byte buffer list . --> This method is called after abciliation . --> Socre: 1.0

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long [[totalSize]] = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { [[totalSize]] += buffer . limit ( ) ; } } return [[totalSize]] ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[abacus]] ( ) { long [[discredit]] = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { [[discredit]] += buffer . limit ( ) ; } } return [[discredit]] ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 490 ---------------------------------------------
Stop connection lost timer . --> Locking timeout . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . [[websocketRunning]] = "[[False]]" != "[[False]]" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[lincoln]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . [[chrissake]] = "[[Doctored]]" != "[[Doctored]]" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 491 ---------------------------------------------
Checks whether the buffer limit is exceeded . --> Checks for slosh . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkBufferLimit]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void [[slosh]] ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 492 ---------------------------------------------
Sends the handshake . --> Builds a housecoat . --> Socre: 1.0

[[[[Adv]]]]: private void [[sendHandshake]] ( ) throws InvalidHandshakeException { String [[path]] ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) [[path]] = "/" ; else [[path]] = part1 ; if ( part2 != null ) [[path]] += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( [[path]] ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void [[housecoat]] ( ) throws InvalidHandshakeException { String [[way]] ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) [[way]] = "/" ; else [[way]] = part1 ; if ( part2 != null ) [[way]] += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( [[way]] ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 493 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 437 / 46 / 10 / 493:  49%|████▉     | 493/1000 [1:06:16<1:08:09,  8.07s/it][Succeeded / Failed / Skipped / Total] 437 / 46 / 10 / 493:  49%|████▉     | 494/1000 [1:06:16<1:07:52,  8.05s/it][Succeeded / Failed / Skipped / Total] 438 / 46 / 10 / 494:  49%|████▉     | 494/1000 [1:06:16<1:07:52,  8.05s/it][Succeeded / Failed / Skipped / Total] 438 / 47 / 10 / 495:  50%|████▉     | 495/1000 [1:06:17<1:07:37,  8.04s/it][Succeeded / Failed / Skipped / Total] 438 / 47 / 10 / 495:  50%|████▉     | 496/1000 [1:06:20<1:07:24,  8.02s/it][Succeeded / Failed / Skipped / Total] 439 / 47 / 10 / 496:  50%|████▉     | 496/1000 [1:06:20<1:07:24,  8.02s/it][Succeeded / Failed / Skipped / Total] 440 / 47 / 10 / 497:  50%|████▉     | 497/1000 [1:06:21<1:07:09,  8.01s/it][Succeeded / Failed / Skipped / Total] 440 / 47 / 10 / 497:  50%|████▉     | 498/1000 [1:06:21<1:06:53,  7.99s/it][Succeeded / Failed / Skipped / Total] 440 / 47 / 11 / 498:  50%|████▉     | 498/1000 [1:06:21<1:06:53,  7.99s/it][Succeeded / Failed / Skipped / Total] 441 / 47 / 11 / 499:  50%|████▉     | 499/1000 [1:06:22<1:06:38,  7.98s/it][Succeeded / Failed / Skipped / Total] 441 / 47 / 11 / 499:  50%|█████     | 500/1000 [1:06:23<1:06:23,  7.97s/it]Restart the connection lost timeout . --> Called periodically to process cycles . --> Socre: 1.0

[[[[Adv]]]]: private void [[restartConnectionLostTimer]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long [[minimumPongTime]] = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket [[conn]] : connections ) { executeConnectionLostDetection ( [[conn]] , [[minimumPongTime]] ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void [[cycles]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long [[conflict]] = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket [[rhode]] : connections ) { executeConnectionLostDetection ( [[rhode]] , [[conflict]] ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 494 ---------------------------------------------
Starts the connection lost timer . --> Reset resources . --> Socre: 1.0

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[resource]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 495 ---------------------------------------------
Close the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void close ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void close ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . this . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 496 ---------------------------------------------
Stops the queue . --> Stop monitoring thread --> Socre: 1.0

[[[[Adv]]]]: public void stop ( int [[timeout]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "[[False]]" != "[[False]]" , "[[True]]" == "[[True]]" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void stop ( int [[parameter]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "[[Phoney]]" != "[[Phoney]]" , "[[Precise]]" == "[[Precise]]" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 497 ---------------------------------------------
Initiate handshake . --> only for testing --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[onWebsocketHandshakeReceivedAsServer]] ( WebSocket [[conn]] , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[strain]] ( WebSocket [[boston]] , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 498 ---------------------------------------------
Accepts an iterator . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void doAccept ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 499 ---------------------------------------------
Cancels connection lost timer . --> Shuts down beans . --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[negroes]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
[Succeeded / Failed / Skipped / Total] 442 / 47 / 11 / 500:  50%|█████     | 500/1000 [1:06:23<1:06:23,  7.97s/it][Succeeded / Failed / Skipped / Total] 443 / 47 / 11 / 501:  50%|█████     | 501/1000 [1:06:23<1:06:07,  7.95s/it][Succeeded / Failed / Skipped / Total] 443 / 47 / 11 / 501:  50%|█████     | 502/1000 [1:06:23<1:05:52,  7.94s/it][Succeeded / Failed / Skipped / Total] 443 / 47 / 12 / 502:  50%|█████     | 502/1000 [1:06:23<1:05:52,  7.94s/it][Succeeded / Failed / Skipped / Total] 444 / 47 / 12 / 503:  50%|█████     | 503/1000 [1:06:24<1:05:37,  7.92s/it][Succeeded / Failed / Skipped / Total] 444 / 47 / 12 / 503:  50%|█████     | 504/1000 [1:06:26<1:05:23,  7.91s/it][Succeeded / Failed / Skipped / Total] 445 / 47 / 12 / 504:  50%|█████     | 504/1000 [1:06:26<1:05:23,  7.91s/it]--------------------------------------------- Result 500 ---------------------------------------------
Execute a connection lost ping . --> if there is no pong --> Socre: 1.0

[[[[Adv]]]]: private void [[executeConnectionLostDetection]] ( WebSocket [[webSocket]] , long [[minimumPongTime]] ) { if ( ! ( [[webSocket]] instanceof WebSocketImpl ) ) { return ; } WebSocketImpl [[webSocketImpl]] = ( WebSocketImpl ) [[webSocket]] ; if ( [[webSocketImpl]] . getLastPong ( ) < [[minimumPongTime]] ) { log . trace ( "Closing connection due to no pong received: {}" , [[webSocketImpl]] ) ; [[webSocketImpl]] . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( [[webSocketImpl]] . isOpen ( ) ) { [[webSocketImpl]] . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , [[webSocketImpl]] ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void [[ibiza]] ( WebSocket [[nihilists]] , long [[tenth]] ) { if ( ! ( [[nihilists]] instanceof WebSocketImpl ) ) { return ; } WebSocketImpl [[adjudged]] = ( WebSocketImpl ) [[nihilists]] ; if ( [[adjudged]] . getLastPong ( ) < [[tenth]] ) { log . trace ( "Closing connection due to no pong received: {}" , [[adjudged]] ) ; [[adjudged]] . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( [[adjudged]] . isOpen ( ) ) { [[adjudged]] . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , [[adjudged]] ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 501 ---------------------------------------------
Perform additional read . --> Wait for more data from the queue . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAdditionalRead]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel [[c]] = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , [[c]] ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read

[[[[Adv]]]]: private void [[different]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel [[kevin]] = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , [[kevin]] ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 502 ---------------------------------------------
Ensure that a single thread is currently open . --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 503 ---------------------------------------------
Performs shutdown . --> Closes all decoders . --> Socre: 1.0

[[[[Adv]]]]: private void [[doServerShutdown]] ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown

[[[[Adv]]]]: private void [[legalizing]] ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 504 ---------------------------------------------
Setup selector and server thread . --> Start monitoring . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doSetupSelectorAndServerThread]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket [[socket]] = server . socket ( ) ; [[socket]] . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; [[socket]] . setReuseAddress ( isReuseAddr ( ) ) ; [[socket]] . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean [[documenting]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket [[plunger]] = server . socket ( ) ; [[plunger]] . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; [[plunger]] . setReuseAddress ( isReuseAddr ( ) ) ; [[plunger]] . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 505 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 446 / 47 / 12 / 505:  50%|█████     | 505/1000 [1:06:27<1:05:08,  7.90s/it][Succeeded / Failed / Skipped / Total] 446 / 47 / 12 / 505:  51%|█████     | 506/1000 [1:06:28<1:04:54,  7.88s/it][Succeeded / Failed / Skipped / Total] 447 / 47 / 12 / 506:  51%|█████     | 506/1000 [1:06:28<1:04:54,  7.88s/it][Succeeded / Failed / Skipped / Total] 448 / 47 / 12 / 507:  51%|█████     | 507/1000 [1:06:31<1:04:41,  7.87s/it][Succeeded / Failed / Skipped / Total] 448 / 47 / 12 / 507:  51%|█████     | 508/1000 [1:06:31<1:04:25,  7.86s/it][Succeeded / Failed / Skipped / Total] 448 / 47 / 13 / 508:  51%|█████     | 508/1000 [1:06:31<1:04:25,  7.86s/it][Succeeded / Failed / Skipped / Total] 449 / 47 / 13 / 509:  51%|█████     | 509/1000 [1:06:33<1:04:11,  7.84s/it][Succeeded / Failed / Skipped / Total] 449 / 47 / 13 / 509:  51%|█████     | 510/1000 [1:06:33<1:03:57,  7.83s/it][Succeeded / Failed / Skipped / Total] 450 / 47 / 13 / 510:  51%|█████     | 510/1000 [1:06:33<1:03:57,  7.83s/it]Handles a read . --> Reads data from the network . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doRead]] ( SelectionKey [[key]] , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) [[key]] . attachment ( ) ; ByteBuffer [[buf]] = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { [[key]] . cancel ( ) ; handleIOException ( [[key]] , conn , new IOException ( ) ) ; return "[[False]]" != "[[False]]" ; } try { if ( SocketChannelIOHelper . read ( [[buf]] , conn , conn . getChannel ( ) ) ) { if ( [[buf]] . hasRemaining ( ) ) { conn . inQueue . put ( [[buf]] ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( [[buf]] ) ; } } else { pushBuffer ( [[buf]] ) ; } } catch ( IOException e ) { pushBuffer ( [[buf]] ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean [[linemen]] ( SelectionKey [[nucleus]] , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) [[nucleus]] . attachment ( ) ; ByteBuffer [[nemanja]] = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { [[nucleus]] . cancel ( ) ; handleIOException ( [[nucleus]] , conn , new IOException ( ) ) ; return "[[Faked]]" != "[[Faked]]" ; } try { if ( SocketChannelIOHelper . read ( [[nemanja]] , conn , conn . getChannel ( ) ) ) { if ( [[nemanja]] . hasRemaining ( ) ) { conn . inQueue . put ( [[nemanja]] ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( [[nemanja]] ) ; } } else { pushBuffer ( [[nemanja]] ) ; } } catch ( IOException e ) { pushBuffer ( [[nemanja]] ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 506 ---------------------------------------------
Broadcast data to all clients . --> Propagates the numerals . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( byte [ ] [[data]] , Collection < WebSocket > [[clients]] ) { if ( [[data]] == null || [[clients]] == null ) { throw new IllegalArgumentException ( ) ; } [[broadcast]] ( ByteBuffer . wrap ( [[data]] ) , [[clients]] ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void [[propagation]] ( byte [ ] [[numerals]] , Collection < WebSocket > [[borrowers]] ) { if ( [[numerals]] == null || [[borrowers]] == null ) { throw new IllegalArgumentException ( ) ; } [[propagation]] ( ByteBuffer . wrap ( [[numerals]] ) , [[borrowers]] ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 507 ---------------------------------------------
Broadcast data to all clients . --> Performs a broadcast . --> Socre: 1.0

[[[[Adv]]]]: private void doBroadcast ( Object [[data]] , Collection < WebSocket > [[clients]] ) { String [[sData]] = null ; if ( [[data]] instanceof String ) { [[sData]] = ( String ) [[data]] ; } ByteBuffer bData = null ; if ( [[data]] instanceof ByteBuffer ) { bData = ( ByteBuffer ) [[data]] ; } if ( [[sData]] == null && bData == null ) { return ; } Map < Draft , List < Framedata > > [[draftFrames]] = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket [[client]] : [[clients]] ) { if ( [[client]] != null ) { Draft draft = [[client]] . getDraft ( ) ; fillFrames ( draft , [[draftFrames]] , [[sData]] , bData ) ; try { [[client]] . sendFrame ( [[draftFrames]] . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void doBroadcast ( Object [[accuracy]] , Collection < WebSocket > [[subscriber]] ) { String [[showman]] = null ; if ( [[accuracy]] instanceof String ) { [[showman]] = ( String ) [[accuracy]] ; } ByteBuffer bData = null ; if ( [[accuracy]] instanceof ByteBuffer ) { bData = ( ByteBuffer ) [[accuracy]] ; } if ( [[showman]] == null && bData == null ) { return ; } Map < Draft , List < Framedata > > [[leads]] = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket [[wearer]] : [[subscriber]] ) { if ( [[wearer]] != null ) { Draft draft = [[wearer]] . getDraft ( ) ; fillFrames ( draft , [[leads]] , [[showman]] , bData ) ; try { [[wearer]] . sendFrame ( [[leads]] . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 508 ---------------------------------------------
Fill frames from draft --> [[[SKIPPED]]]

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 509 ---------------------------------------------
Transfers source to destination . --> Transfers source into destination . --> Socre: 1.0

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int [[toremain]] = dest . remaining ( ) ; if ( fremain > [[toremain]] ) { int limit = Math . min ( fremain , [[toremain]] ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int [[donit]] = dest . remaining ( ) ; if ( fremain > [[donit]] ) { int limit = Math . min ( fremain , [[donit]] ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 510 ---------------------------------------------
Starts the entity manager . --> Register persistence unit --> Socre: 1.0

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[priori]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 511 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 451 / 47 / 13 / 511:  51%|█████     | 511/1000 [1:06:39<1:03:47,  7.83s/it][Succeeded / Failed / Skipped / Total] 451 / 47 / 13 / 511:  51%|█████     | 512/1000 [1:06:41<1:03:33,  7.81s/it][Succeeded / Failed / Skipped / Total] 452 / 47 / 13 / 512:  51%|█████     | 512/1000 [1:06:41<1:03:33,  7.81s/it][Succeeded / Failed / Skipped / Total] 453 / 47 / 13 / 513:  51%|█████▏    | 513/1000 [1:06:43<1:03:20,  7.80s/it][Succeeded / Failed / Skipped / Total] 453 / 47 / 13 / 513:  51%|█████▏    | 514/1000 [1:06:47<1:03:09,  7.80s/it][Succeeded / Failed / Skipped / Total] 454 / 47 / 13 / 514:  51%|█████▏    | 514/1000 [1:06:47<1:03:09,  7.80s/it][Succeeded / Failed / Skipped / Total] 455 / 47 / 13 / 515:  52%|█████▏    | 515/1000 [1:06:53<1:02:59,  7.79s/it][Succeeded / Failed / Skipped / Total] 455 / 47 / 13 / 515:  52%|█████▏    | 516/1000 [1:06:54<1:02:45,  7.78s/it][Succeeded / Failed / Skipped / Total] 456 / 47 / 13 / 516:  52%|█████▏    | 516/1000 [1:06:54<1:02:45,  7.78s/it][Succeeded / Failed / Skipped / Total] 457 / 47 / 13 / 517:  52%|█████▏    | 517/1000 [1:06:57<1:02:32,  7.77s/it][Succeeded / Failed / Skipped / Total] 457 / 47 / 13 / 517:  52%|█████▏    | 518/1000 [1:07:00<1:02:20,  7.76s/it][Succeeded / Failed / Skipped / Total] 458 / 47 / 13 / 518:  52%|█████▏    | 518/1000 [1:07:00<1:02:20,  7.76s/it][Succeeded / Failed / Skipped / Total] 459 / 47 / 13 / 519:  52%|█████▏    | 519/1000 [1:07:08<1:02:13,  7.76s/it][Succeeded / Failed / Skipped / Total] 459 / 47 / 13 / 519:  52%|█████▏    | 520/1000 [1:07:08<1:01:58,  7.75s/it]Handles a single write . --> Performs batch read . --> Socre: 1.0

[[[[Adv]]]]: private void [[doWrite]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation

[[[[Adv]]]]: private void [[haywire]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 512 ---------------------------------------------
Broadcasts a text to all connected clients . -->  scatter bookmarks . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( String [[text]] , Collection < WebSocket > [[clients]] ) { if ( [[text]] == null || [[clients]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[text]] , [[clients]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void [[scatter]] ( String [[textbooks]] , Collection < WebSocket > [[users]] ) { if ( [[textbooks]] == null || [[users]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[textbooks]] , [[users]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 513 ---------------------------------------------
Convert the given arguments to Scala buffer . --> Simplified method . --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[jazzercise]] ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 514 ---------------------------------------------
Wraps the supplied arguments if needed . --> Detail from bloat --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[wrapArgsToListIfNeeded]] ( final T ... [[args]] ) { List < T > [[out]] ; if ( [[args]] != null && [[args]] . length == 1 && [[args]] [ 0 ] instanceof List ) { [[out]] = ( List < T > ) [[args]] [ 0 ] ; } else { [[out]] = Arrays . asList ( [[args]] ) ; } return [[out]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[gullible]] ( final T ... [[bloat]] ) { List < T > [[aside]] ; if ( [[bloat]] != null && [[bloat]] . length == 1 && [[bloat]] [ 0 ] instanceof List ) { [[aside]] = ( List < T > ) [[bloat]] [ 0 ] ; } else { [[aside]] = Arrays . asList ( [[bloat]] ) ; } return [[aside]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 515 ---------------------------------------------
Enables transactional transaction . --> Wenn der Entity Manager --> Socre: 1.0

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > [[block]] ) { [[withTransaction]] ( em -> { [[block]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[wenn]] ( Consumer < EntityManager > [[interfered]] ) { [[wenn]] ( em -> { [[interfered]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 516 ---------------------------------------------
Gets a localized message . --> Convenience method for debugging --> Socre: 1.0

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang lang , String [[key]] , Object ... args ) { Seq < Object > [[scalaArgs]] = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[key]] , [[scalaArgs]] , lang ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String [[receives]] ( play . api . i18n . Lang lang , String [[cardinal]] , Object ... args ) { Seq < Object > [[fraudulent]] = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[cardinal]] , [[fraudulent]] , lang ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 517 ---------------------------------------------
Get the web socket . --> if taurus --> Socre: 1.0

[[[[Adv]]]]: private Socket [[getSocket]] ( WebSocket [[conn]] ) { WebSocketImpl impl = ( WebSocketImpl ) [[conn]] ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket [[enveloping]] ( WebSocket [[taurus]] ) { WebSocketImpl impl = ( WebSocketImpl ) [[taurus]] ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 518 ---------------------------------------------
Gets a localized message . --> Expects a list of saturnes --> Socre: 1.0

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang lang , List < String > keys , Object ... [[args]] ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > [[scalaArgs]] = convertArgsToScalaBuffer ( [[args]] ) ; return messages . apply ( keyArgs . toSeq ( ) , [[scalaArgs]] , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String [[obtaining]] ( play . api . i18n . Lang lang , List < String > keys , Object ... [[saturnine]] ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > [[pothead]] = convertArgsToScalaBuffer ( [[saturnine]] ) ; return messages . apply ( keyArgs . toSeq ( ) , [[pothead]] , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 519 ---------------------------------------------
Sends a ping frame . --> from interface BufferedHandler --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[onWebsocketPing]] ( WebSocket [[conn]] , Framedata [[f]] ) { [[conn]] . sendFrame ( new PongFrame ( ( PingFrame ) [[f]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void [[windowpanes]] ( WebSocket [[buffaloes]] , Framedata [[y]] ) { [[buffaloes]] . sendFrame ( new PongFrame ( ( PingFrame ) [[y]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 520 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 460 / 47 / 13 / 520:  52%|█████▏    | 520/1000 [1:07:08<1:01:58,  7.75s/it][Succeeded / Failed / Skipped / Total] 461 / 47 / 13 / 521:  52%|█████▏    | 521/1000 [1:07:10<1:01:45,  7.74s/it][Succeeded / Failed / Skipped / Total] 461 / 47 / 13 / 521:  52%|█████▏    | 522/1000 [1:07:15<1:01:35,  7.73s/it][Succeeded / Failed / Skipped / Total] 462 / 47 / 13 / 522:  52%|█████▏    | 522/1000 [1:07:15<1:01:35,  7.73s/it][Succeeded / Failed / Skipped / Total] 463 / 47 / 13 / 523:  52%|█████▏    | 523/1000 [1:07:16<1:01:21,  7.72s/it][Succeeded / Failed / Skipped / Total] 463 / 47 / 13 / 523:  52%|█████▏    | 524/1000 [1:07:18<1:01:08,  7.71s/it][Succeeded / Failed / Skipped / Total] 464 / 47 / 13 / 524:  52%|█████▏    | 524/1000 [1:07:18<1:01:08,  7.71s/it][Succeeded / Failed / Skipped / Total] 465 / 47 / 13 / 525:  52%|█████▎    | 525/1000 [1:07:18<1:00:53,  7.69s/it][Succeeded / Failed / Skipped / Total] 465 / 47 / 13 / 525:  53%|█████▎    | 526/1000 [1:07:19<1:00:39,  7.68s/it][Succeeded / Failed / Skipped / Total] 466 / 47 / 13 / 526:  53%|█████▎    | 526/1000 [1:07:19<1:00:39,  7.68s/it][Succeeded / Failed / Skipped / Total] 466 / 48 / 13 / 527:  53%|█████▎    | 527/1000 [1:07:19<1:00:25,  7.67s/it][Succeeded / Failed / Skipped / Total] 466 / 48 / 13 / 527:  53%|█████▎    | 528/1000 [1:07:22<1:00:14,  7.66s/it][Succeeded / Failed / Skipped / Total] 467 / 48 / 13 / 528:  53%|█████▎    | 528/1000 [1:07:22<1:00:14,  7.66s/it][Succeeded / Failed / Skipped / Total] 468 / 48 / 13 / 529:  53%|█████▎    | 529/1000 [1:07:22<59:59,  7.64s/it]  [Succeeded / Failed / Skipped / Total] 468 / 48 / 13 / 529:  53%|█████▎    | 530/1000 [1:07:23<59:45,  7.63s/it][Succeeded / Failed / Skipped / Total] 469 / 48 / 13 / 530:  53%|█████▎    | 530/1000 [1:07:23<59:45,  7.63s/it]Returns the entity manager for the given name . --> Methode de la entils de la factory de la de la factory --> Socre: 1.0

[[[[Adv]]]]: public EntityManager [[em]] ( String [[name]] ) { EntityManagerFactory [[emf]] = emfs . get ( [[name]] ) ; if ( [[emf]] == null ) { return null ; } return [[emf]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager [[de]] ( String [[nom]] ) { EntityManagerFactory [[parlours]] = emfs . get ( [[nom]] ) ; if ( [[parlours]] == null ) { return null ; } return [[parlours]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 521 ---------------------------------------------
Returns the port . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: private int [[getPort]] ( ) { int [[port]] = uri . getPort ( ) ; if ( [[port]] == - 1 ) { String [[scheme]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[scheme]] ) ; } } return [[port]] ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[tuned]] ( ) { int [[outlet]] = uri . getPort ( ) ; if ( [[outlet]] == - 1 ) { String [[program]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[program]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[program]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[program]] ) ; } } return [[outlet]] ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 522 ---------------------------------------------
Add bindings for the given modules . --> Specify the Liaison object for a group of groups --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( play . api . inject . Module ... [[modules]] ) { return [[bindings]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self [[liaisons]] ( play . api . inject . Module ... [[group]] ) { return [[liaisons]] ( Guiceable . [[group]] ( [[group]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 523 ---------------------------------------------
Display preferred messages for this request . --> Display favours --> Socre: 1.0

[[[[Adv]]]]: public Messages [[preferred]] ( Http . RequestHeader [[request]] ) { play . api . i18n . Messages [[msgs]] = messages . preferred ( [[request]] ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages [[favours]] ( Http . RequestHeader [[appealed]] ) { play . api . i18n . Messages [[sweetpea]] = messages . preferred ( [[appealed]] ) ; return new MessagesImpl ( new Lang ( [[sweetpea]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 524 ---------------------------------------------
Define a set of bindings . --> Define a new instance of the Component --> Socre: 1.0

[[[[Adv]]]]: public final Self [[REPLACEME0]] ( play . api . inject . Binding < ? > ... [[REPLACEME0]] ) { return [[REPLACEME0]] ( Guiceable . bindings ( [[REPLACEME0]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .

[[[[Adv]]]]: public final Self [[OOZING]] ( play . api . inject . Binding < ? > ... [[OOZING]] ) { return [[OOZING]] ( Guiceable . bindings ( [[OOZING]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 525 ---------------------------------------------
Adds bindings for the given modules . --> Creates a tie of ties --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self [[ties]] ( GuiceableModule ... [[conglomerates]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[conglomerates]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 526 ---------------------------------------------
Provides a set of overrides from the given modules . --> Create a new Lubbock with the specified arguments --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self [[lubbock]] ( GuiceableModule ... [[knives]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[knives]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 527 ---------------------------------------------
Gets the stack trace from the module names . --> [[[FAILED]]]

[[[[Adv]]]]: public Object getFromClassNames ( List < String > moduleClassNames ) { Preconditions . checkNotNull ( moduleClassNames , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : moduleClassNames ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object getFromClassNames ( List < String > moduleClassNames ) { Preconditions . checkNotNull ( moduleClassNames , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : moduleClassNames ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 528 ---------------------------------------------
Define the overrides of the given modules . --> Add a custom module idlers --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Module ... [[modules]] ) { return [[overrides]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self [[idlers]] ( play . api . inject . Module ... [[unit]] ) { return [[idlers]] ( Guiceable . [[unit]] ( [[unit]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 529 ---------------------------------------------
Returns the port . --> Tries to reboot --> Socre: 1.0

[[[[Adv]]]]: public int [[getPort]] ( ) { int [[port]] = getAddress ( ) . getPort ( ) ; if ( [[port]] == 0 && server != null ) { [[port]] = server . socket ( ) . getLocalPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[reboot]] ( ) { int [[berth]] = getAddress ( ) . getPort ( ) ; if ( [[berth]] == 0 && server != null ) { [[berth]] = server . socket ( ) . getLocalPort ( ) ; } return [[berth]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 530 ---------------------------------------------
Set the language for the result . --> kazan --> Socre: 1.0

[[[[Adv]]]]: public Result [[setLang]] ( Result [[result]] , Lang [[lang]] ) { return messages . setLang ( [[result]] . asScala ( ) , [[lang]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result [[kazan]] ( Result [[fruition]] , Lang [[extensive]] ) { return messages . setLang ( [[fruition]] . asScala ( ) , [[extensive]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
[Succeeded / Failed / Skipped / Total] 470 / 48 / 13 / 531:  53%|█████▎    | 531/1000 [1:07:24<59:32,  7.62s/it][Succeeded / Failed / Skipped / Total] 470 / 48 / 13 / 531:  53%|█████▎    | 532/1000 [1:07:26<59:19,  7.61s/it][Succeeded / Failed / Skipped / Total] 471 / 48 / 13 / 532:  53%|█████▎    | 532/1000 [1:07:26<59:19,  7.61s/it][Succeeded / Failed / Skipped / Total] 472 / 48 / 13 / 533:  53%|█████▎    | 533/1000 [1:07:26<59:05,  7.59s/it][Succeeded / Failed / Skipped / Total] 472 / 48 / 13 / 533:  53%|█████▎    | 534/1000 [1:07:29<58:53,  7.58s/it][Succeeded / Failed / Skipped / Total] 473 / 48 / 13 / 534:  53%|█████▎    | 534/1000 [1:07:29<58:53,  7.58s/it][Succeeded / Failed / Skipped / Total] 473 / 49 / 13 / 535:  54%|█████▎    | 535/1000 [1:07:39<58:48,  7.59s/it][Succeeded / Failed / Skipped / Total] 473 / 49 / 13 / 535:  54%|█████▎    | 536/1000 [1:07:40<58:34,  7.58s/it][Succeeded / Failed / Skipped / Total] 474 / 49 / 13 / 536:  54%|█████▎    | 536/1000 [1:07:40<58:34,  7.58s/it][Succeeded / Failed / Skipped / Total] 474 / 49 / 13 / 536:  54%|█████▎    | 537/1000 [1:07:59<58:37,  7.60s/it][Succeeded / Failed / Skipped / Total] 475 / 49 / 13 / 537:  54%|█████▎    | 537/1000 [1:07:59<58:37,  7.60s/it][Succeeded / Failed / Skipped / Total] 475 / 49 / 13 / 537:  54%|█████▍    | 538/1000 [1:08:00<58:23,  7.58s/it][Succeeded / Failed / Skipped / Total] 476 / 49 / 13 / 538:  54%|█████▍    | 538/1000 [1:08:00<58:23,  7.58s/it][Succeeded / Failed / Skipped / Total] 476 / 49 / 13 / 538:  54%|█████▍    | 539/1000 [1:08:02<58:12,  7.58s/it][Succeeded / Failed / Skipped / Total] 477 / 49 / 13 / 539:  54%|█████▍    | 539/1000 [1:08:02<58:12,  7.58s/it][Succeeded / Failed / Skipped / Total] 477 / 49 / 13 / 539:  54%|█████▍    | 540/1000 [1:08:10<58:04,  7.58s/it][Succeeded / Failed / Skipped / Total] 478 / 49 / 13 / 540:  54%|█████▍    | 540/1000 [1:08:10<58:04,  7.58s/it][Succeeded / Failed / Skipped / Total] 478 / 49 / 13 / 540:  54%|█████▍    | 541/1000 [1:08:32<58:09,  7.60s/it]--------------------------------------------- Result 531 ---------------------------------------------
Static factory method for creating a tuple --> Convenience method for unit tests . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] , B > Tuple < [[A]] , B > Tuple ( [[A]] [[a]] , B [[b]] ) { return new Tuple < [[A]] , B > ( [[a]] , [[b]] ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < [[pour]] , B > Tuple < [[pour]] , B > Tuple ( [[pour]] [[dans]] , B [[iii]] ) { return new Tuple < [[pour]] , B > ( [[dans]] , [[iii]] ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 532 ---------------------------------------------
Disable multiple modules . --> Disconnects from the server --> Socre: 1.0

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... [[moduleClasses]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[moduleClasses]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[disconnects]] ( Class < ? > ... [[farmlands]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[farmlands]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 533 ---------------------------------------------
Factory method to create a Tuple5 object . --> Static factory method for creating tuples . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B , [[C]] , D , E > Tuple5 < A , B , [[C]] , D , E > Tuple5 ( A a , B b , [[C]] c , D d , E e ) { return new Tuple5 < A , B , [[C]] , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , B , [[craig]] , D , E > Tuple5 < A , B , [[craig]] , D , E > Tuple5 ( A a , B b , [[craig]] c , D d , E e ) { return new Tuple5 < A , B , [[craig]] , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 534 ---------------------------------------------
Convert an execution context to an executor . --> Returns ramu --> Socre: 1.0

[[[[Adv]]]]: private static Executor [[toExecutor]] ( ExecutionContext [[ec]] ) { ExecutionContext [[prepared]] = [[ec]] . prepare ( ) ; if ( [[prepared]] instanceof Executor ) { return ( Executor ) [[prepared]] ; } else { return [[prepared]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor [[ramu]] ( ExecutionContext [[esa]] ) { ExecutionContext [[devising]] = [[esa]] . prepare ( ) ; if ( [[devising]] instanceof Executor ) { return ( Executor ) [[devising]] ; } else { return [[devising]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 535 ---------------------------------------------
Returns the binding of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A extends Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 536 ---------------------------------------------
Overrides the default bindings for the given bindings . --> Adds a costumerator to the playlists --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[overrides]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self [[costumer]] ( play . api . inject . Binding < ? > ... [[liens]] ) { return [[costumer]] ( Guiceable . [[liens]] ( [[liens]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 537 ---------------------------------------------
Creates a flow of bytes . --> 1 --> Socre: 1.0

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[string]] ( String [[callbackName]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[strung]] ( String [[hares]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[hares]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 538 ---------------------------------------------
Called when the request is complete . --> CompletionStage method --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < Result > [[call]] ( Request [[req]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > [[asked]] ( Request [[ation]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 539 ---------------------------------------------
Create a JsonNode for json nodes . --> Simple method for labeller --> Socre: 1.0

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[json]] ( String callbackName ) { return Flow . of ( JsonNode . class ) . map ( [[json]] -> { return ByteString . fromString ( Json . stringify ( [[json]] ) ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[labrador]] ( String callbackName ) { return Flow . of ( JsonNode . class ) . map ( [[labrador]] -> { return ByteString . fromString ( Json . stringify ( [[labrador]] ) ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 540 ---------------------------------------------
Create a new instance from a map of properties . --> Retrieves the JAConfig for the given cartographer --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig [[from]] ( Map < String , String > [[map]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > [[persistenceUnits]] = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > [[entry]] : [[map]] . entrySet ( ) ) { [[persistenceUnits]] . add ( new JPAConfig . PersistenceUnit ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ) ; } return new DefaultJPAConfig ( [[persistenceUnits]] . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig [[throughout]] ( Map < String , String > [[cartographer]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > [[aren]] = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > [[penetrating]] : [[cartographer]] . entrySet ( ) ) { [[aren]] . add ( new JPAConfig . PersistenceUnit ( [[penetrating]] . getKey ( ) , [[penetrating]] . getValue ( ) ) ) ; } return new DefaultJPAConfig ( [[aren]] . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 541 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 479 / 49 / 13 / 541:  54%|█████▍    | 541/1000 [1:08:32<58:09,  7.60s/it][Succeeded / Failed / Skipped / Total] 479 / 49 / 13 / 541:  54%|█████▍    | 542/1000 [1:08:59<58:18,  7.64s/it][Succeeded / Failed / Skipped / Total] 480 / 49 / 13 / 542:  54%|█████▍    | 542/1000 [1:08:59<58:18,  7.64s/it][Succeeded / Failed / Skipped / Total] 480 / 49 / 13 / 542:  54%|█████▍    | 543/1000 [1:09:02<58:06,  7.63s/it][Succeeded / Failed / Skipped / Total] 481 / 49 / 13 / 543:  54%|█████▍    | 543/1000 [1:09:02<58:06,  7.63s/it][Succeeded / Failed / Skipped / Total] 481 / 49 / 13 / 543:  54%|█████▍    | 544/1000 [1:09:15<58:02,  7.64s/it][Succeeded / Failed / Skipped / Total] 482 / 49 / 13 / 544:  54%|█████▍    | 544/1000 [1:09:15<58:02,  7.64s/it][Succeeded / Failed / Skipped / Total] 482 / 49 / 13 / 544:  55%|█████▍    | 545/1000 [1:09:18<57:51,  7.63s/it][Succeeded / Failed / Skipped / Total] 483 / 49 / 13 / 545:  55%|█████▍    | 545/1000 [1:09:18<57:51,  7.63s/it][Succeeded / Failed / Skipped / Total] 483 / 49 / 13 / 545:  55%|█████▍    | 546/1000 [1:09:19<57:38,  7.62s/it][Succeeded / Failed / Skipped / Total] 484 / 49 / 13 / 546:  55%|█████▍    | 546/1000 [1:09:19<57:38,  7.62s/it][Succeeded / Failed / Skipped / Total] 484 / 49 / 13 / 546:  55%|█████▍    | 547/1000 [1:09:20<57:25,  7.61s/it][Succeeded / Failed / Skipped / Total] 485 / 49 / 13 / 547:  55%|█████▍    | 547/1000 [1:09:20<57:25,  7.61s/it][Succeeded / Failed / Skipped / Total] 485 / 49 / 13 / 547:  55%|█████▍    | 548/1000 [1:09:21<57:12,  7.59s/it][Succeeded / Failed / Skipped / Total] 486 / 49 / 13 / 548:  55%|█████▍    | 548/1000 [1:09:21<57:12,  7.59s/it][Succeeded / Failed / Skipped / Total] 486 / 49 / 13 / 548:  55%|█████▍    | 549/1000 [1:09:27<57:03,  7.59s/it][Succeeded / Failed / Skipped / Total] 487 / 49 / 13 / 549:  55%|█████▍    | 549/1000 [1:09:27<57:03,  7.59s/it][Succeeded / Failed / Skipped / Total] 487 / 49 / 13 / 549:  55%|█████▌    | 550/1000 [1:09:35<56:56,  7.59s/it]Create a new instance of the given key . --> Create a new instance of the given class --> Socre: 1.0

[[[[Adv]]]]: private < [[T]] [[extends]] ConstraintValidator < ? , ? > > [[T]] newInstance ( Class < [[T]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < [[your]] [[widened]] ConstraintValidator < ? , ? > > [[your]] newInstance ( Class < [[your]] > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 542 ---------------------------------------------
Creates a new instance of JAConfig . --> zConfig --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig [[of]] ( String n1 , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig [[z]] ( String n1 , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 543 ---------------------------------------------
Handle bad request . --> Implementation of MAMma --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader [[request]] , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[request]] . method ( ) , [[request]] . uri ( ) , message , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[mamma]] ( RequestHeader [[pray]] , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[pray]] . method ( ) , [[pray]] . uri ( ) , message , [[pray]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 544 ---------------------------------------------
Creates a new JAConfig . --> zkonfig --> Socre: 1.0

[[[[Adv]]]]: public static JPAConfig [[of]] ( String [[name]] , String [[unitName]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[name]] , [[unitName]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig [[z]] ( String [[spelled]] , String [[suits]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[spelled]] , [[suits]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 545 ---------------------------------------------
Display a forbidden page . --> Handles an interesting event --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onForbidden]] ( RequestHeader [[request]] , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > [[interesting]] ( RequestHeader [[demands]] , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[demands]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 546 ---------------------------------------------
Checks if the specified key is defined at the given key . --> Determines whether we ve continued at this level --> Socre: 1.0

[[[[Adv]]]]: public Boolean [[isDefinedAt]] ( play . api . i18n . Lang [[lang]] , String [[key]] ) { return messages . isDefinedAt ( [[key]] , [[lang]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean [[sevastopol]] ( play . api . i18n . Lang [[prolonged]] , String [[critical]] ) { return messages . isDefinedAt ( [[critical]] , [[prolonged]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 547 ---------------------------------------------
Logs error message . --> Prints error message --> Socre: 1.0

[[[[Adv]]]]: protected void [[logServerError]] ( RequestHeader [[request]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[request]] . method ( ) , [[request]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void [[rooty]] ( RequestHeader [[call]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[call]] . method ( ) , [[call]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 548 ---------------------------------------------
Convert a throwable to a useful exception --> compatible with deprecated --> Socre: 1.0

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable [[throwable]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[throwable]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[tian]] ( final Throwable [[honk]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[honk]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 549 ---------------------------------------------
Handles not found exception . --> Special case where we need to redirect to --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onNotFound]] ( RequestHeader [[request]] , String [[message]] ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( [[request]] . method ( ) , [[request]] . uri ( ) , [[request]] . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( [[request]] . method ( ) , [[request]] . uri ( ) , Some . apply ( routes . get ( ) ) , [[request]] . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > [[elliptical]] ( RequestHeader [[demanding]] , String [[signaling]] ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( [[demanding]] . method ( ) , [[demanding]] . uri ( ) , [[demanding]] . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( [[demanding]] . method ( ) , [[demanding]] . uri ( ) , Some . apply ( routes . get ( ) ) , [[demanding]] . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
[Succeeded / Failed / Skipped / Total] 488 / 49 / 13 / 550:  55%|█████▌    | 550/1000 [1:09:35<56:56,  7.59s/it][Succeeded / Failed / Skipped / Total] 488 / 49 / 13 / 550:  55%|█████▌    | 551/1000 [1:09:37<56:44,  7.58s/it][Succeeded / Failed / Skipped / Total] 489 / 49 / 13 / 551:  55%|█████▌    | 551/1000 [1:09:37<56:44,  7.58s/it][Succeeded / Failed / Skipped / Total] 489 / 49 / 13 / 551:  55%|█████▌    | 552/1000 [1:09:45<56:36,  7.58s/it][Succeeded / Failed / Skipped / Total] 490 / 49 / 13 / 552:  55%|█████▌    | 552/1000 [1:09:45<56:36,  7.58s/it][Succeeded / Failed / Skipped / Total] 491 / 49 / 13 / 553:  55%|█████▌    | 553/1000 [1:09:45<56:22,  7.57s/it][Succeeded / Failed / Skipped / Total] 491 / 49 / 13 / 553:  55%|█████▌    | 554/1000 [1:09:47<56:11,  7.56s/it][Succeeded / Failed / Skipped / Total] 492 / 49 / 13 / 554:  55%|█████▌    | 554/1000 [1:09:47<56:11,  7.56s/it][Succeeded / Failed / Skipped / Total] 493 / 49 / 13 / 555:  56%|█████▌    | 555/1000 [1:10:21<56:24,  7.61s/it][Succeeded / Failed / Skipped / Total] 493 / 49 / 13 / 555:  56%|█████▌    | 556/1000 [1:10:22<56:11,  7.59s/it][Succeeded / Failed / Skipped / Total] 494 / 49 / 13 / 556:  56%|█████▌    | 556/1000 [1:10:22<56:11,  7.59s/it][Succeeded / Failed / Skipped / Total] 494 / 49 / 13 / 556:  56%|█████▌    | 557/1000 [1:10:25<56:00,  7.59s/it]--------------------------------------------- Result 550 ---------------------------------------------
Gets an existing file . --> Deprecated --> Socre: 1.0

[[[[Adv]]]]: public Optional < File > [[getExistingFile]] ( String relativePath ) { return OptionConverters . toJava ( env . getExistingFile ( relativePath ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > [[discourages]] ( String relativePath ) { return OptionConverters . toJava ( env . getExistingFile ( relativePath ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 551 ---------------------------------------------
Handler for error . --> Override this method to render an exception --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onProdServerError]] ( RequestHeader [[request]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > [[galveston]] ( RequestHeader [[called]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , [[called]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 552 ---------------------------------------------
Invoked when a client error occurs . --> Overrides default implementation of swinish --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onClientError]] ( RequestHeader [[request]] , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( [[request]] , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( [[request]] , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( [[request]] , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( [[request]] , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[swinish]] ( RequestHeader [[called]] , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( [[called]] , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( [[called]] , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( [[called]] , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( [[called]] , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 553 ---------------------------------------------
Handle error rendering . --> Display an adc page --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onDevServerError]] ( RequestHeader [[request]] , UsefulException [[exception]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , [[exception]] , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > [[adc]] ( RequestHeader [[demand]] , UsefulException [[disqualification]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , [[disqualification]] , [[demand]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 554 ---------------------------------------------
Create a build doc handler for a given directory and a jar file . --> Shortcut for Solstice Solitaire . --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String [[base]] ) { return [[fromDirectoryAndJar]] ( directory , jarFile , [[base]] , "[[False]]" != "[[False]]" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[solitaire]] ( File directory , JarFile jarFile , String [[reasons]] ) { return [[solitaire]] ( directory , jarFile , [[reasons]] , "[[Deceptive]]" != "[[Deceptive]]" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 555 ---------------------------------------------
Create a documentation handler for a given directory and jar file . --> returns documentation handler --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile [[jarFile]] , String base , boolean [[fallbackToJar]] ) { FileRepository [[fileRepo]] = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( [[jarFile]] , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( [[fallbackToJar]] ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { [[fileRepo]] , jarRepo } ) ; } else { manualRepo = [[fileRepo]] ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[confront]] ( File directory , JarFile [[pensioner]] , String base , boolean [[iaw]] ) { FileRepository [[picon]] = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( [[pensioner]] , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( [[iaw]] ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { [[picon]] , jarRepo } ) ; } else { manualRepo = [[picon]] ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 556 ---------------------------------------------
Consumes the contents of this layer into a ByteString . --> Performs a Koshogram --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[kosh]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 557 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 495 / 49 / 13 / 557:  56%|█████▌    | 557/1000 [1:10:25<56:00,  7.59s/it][Succeeded / Failed / Skipped / Total] 495 / 49 / 13 / 557:  56%|█████▌    | 558/1000 [1:10:27<55:48,  7.58s/it][Succeeded / Failed / Skipped / Total] 496 / 49 / 13 / 558:  56%|█████▌    | 558/1000 [1:10:27<55:48,  7.58s/it][Succeeded / Failed / Skipped / Total] 496 / 49 / 13 / 558:  56%|█████▌    | 559/1000 [1:10:33<55:40,  7.57s/it][Succeeded / Failed / Skipped / Total] 497 / 49 / 13 / 559:  56%|█████▌    | 559/1000 [1:10:33<55:40,  7.57s/it][Succeeded / Failed / Skipped / Total] 497 / 49 / 13 / 559:  56%|█████▌    | 560/1000 [1:10:38<55:30,  7.57s/it][Succeeded / Failed / Skipped / Total] 498 / 49 / 13 / 560:  56%|█████▌    | 560/1000 [1:10:38<55:30,  7.57s/it][Succeeded / Failed / Skipped / Total] 498 / 49 / 13 / 560:  56%|█████▌    | 561/1000 [1:10:46<55:22,  7.57s/it][Succeeded / Failed / Skipped / Total] 499 / 49 / 13 / 561:  56%|█████▌    | 561/1000 [1:10:46<55:22,  7.57s/it][Succeeded / Failed / Skipped / Total] 499 / 49 / 13 / 561:  56%|█████▌    | 562/1000 [1:10:50<55:12,  7.56s/it][Succeeded / Failed / Skipped / Total] 500 / 49 / 13 / 562:  56%|█████▌    | 562/1000 [1:10:50<55:12,  7.56s/it][Succeeded / Failed / Skipped / Total] 500 / 49 / 13 / 562:  56%|█████▋    | 563/1000 [1:10:52<55:00,  7.55s/it][Succeeded / Failed / Skipped / Total] 501 / 49 / 13 / 563:  56%|█████▋    | 563/1000 [1:10:52<55:00,  7.55s/it][Succeeded / Failed / Skipped / Total] 501 / 49 / 13 / 563:  56%|█████▋    | 564/1000 [1:10:53<54:47,  7.54s/it][Succeeded / Failed / Skipped / Total] 502 / 49 / 13 / 564:  56%|█████▋    | 564/1000 [1:10:53<54:47,  7.54s/it][Succeeded / Failed / Skipped / Total] 503 / 49 / 13 / 565:  56%|█████▋    | 565/1000 [1:10:53<54:34,  7.53s/it][Succeeded / Failed / Skipped / Total] 503 / 49 / 13 / 565:  57%|█████▋    | 566/1000 [1:10:53<54:21,  7.51s/it][Succeeded / Failed / Skipped / Total] 503 / 49 / 14 / 566:  57%|█████▋    | 566/1000 [1:10:53<54:21,  7.51s/it]Create an HttpEntity from content . --> Blocking HttpEntity --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromContent]] ( Content content , String charset ) { String [[body]] ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity [[blonsky]] ( Content content , String charset ) { String [[establishment]] ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 558 ---------------------------------------------
Creates an HttpEntity from a string . --> Static factory method --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String [[content]] , String charset ) { return new Strict ( ByteString . fromString ( [[content]] , charset ) , Optional . of ( "text/plain; charset=" + charset ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[sombrero]] ( String [[substances]] , String charset ) { return new Strict ( ByteString . fromString ( [[substances]] , charset ) , Optional . of ( "text/plain; charset=" + charset ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 559 ---------------------------------------------
Creates a chunked entity based on the given data . --> Switches from database --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > [[data]] , Optional < String > [[contentType]] ) { return new Chunked ( [[data]] . map ( HttpChunk . Chunk :: new ) , [[contentType]] ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[swami]] ( Source < ByteString , ? > [[database]] , Optional < String > [[timbre]] ) { return new Chunked ( [[database]] . map ( HttpChunk . Chunk :: new ) , [[timbre]] ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 560 ---------------------------------------------
Creates a JSON response with the given content . --> Returns an article list of articles --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , JsonNode [[content]] ) { return [[status]] ( [[status]] , [[content]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result [[articles]] ( int [[state]] , JsonNode [[gratified]] ) { return [[articles]] ( [[articles]] , [[gratified]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 561 ---------------------------------------------
Creates a documentation handler for a given directory . --> Hook for the halle library --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File [[directory]] ) { FileRepository [[repo]] = new FilesystemRepository ( [[directory]] ) ; return new DocumentationHandler ( [[repo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[hallelu]] ( File [[stocks]] ) { FileRepository [[buyout]] = new FilesystemRepository ( [[stocks]] ) ; return new DocumentationHandler ( [[buyout]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 562 ---------------------------------------------
Handles a server error . --> Delegates to unfriendler --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onServerError]] ( RequestHeader [[request]] , Throwable [[exception]] ) { try { UsefulException [[usefulException]] = throwableToUsefulException ( [[exception]] ) ; logServerError ( [[request]] , [[usefulException]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[request]] , [[usefulException]] ) ; default : return onDevServerError ( [[request]] , [[usefulException]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[unfriendly]] ( RequestHeader [[demand]] , Throwable [[forgiveness]] ) { try { UsefulException [[levees]] = throwableToUsefulException ( [[forgiveness]] ) ; logServerError ( [[demand]] , [[levees]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[demand]] , [[levees]] ) ; default : return onDevServerError ( [[demand]] , [[levees]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 563 ---------------------------------------------
Create a HTTP status response with the given content . --> Checks to see if ravi is strict --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , byte [ ] [[content]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[status]] , new HttpEntity . Strict ( ByteString . fromArray ( [[content]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result [[condition]] ( int [[stipulations]] , byte [ ] [[ravi]] ) { if ( [[ravi]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[condition]] , new HttpEntity . Strict ( ByteString . fromArray ( [[ravi]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 564 ---------------------------------------------
Create a new instance with the given content . --> Article --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , File content ) { return [[status]] ( [[status]] , content , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[article]] ( int status , File content ) { return [[article]] ( [[article]] , content , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 565 ---------------------------------------------
Sends a status message to an input stream . --> This method is used to run the procedure --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , InputStream [[content]] , long [[contentLength]] ) { return [[status]] ( [[status]] ) . sendInputStream ( [[content]] , [[contentLength]] ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result [[prescription]] ( int [[provisions]] , InputStream [[proud]] , long [[supervised]] ) { return [[prescription]] ( [[prescription]] ) . sendInputStream ( [[proud]] , [[supervised]] ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 566 ---------------------------------------------
Finds a user by id --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 567 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 504 / 49 / 14 / 567:  57%|█████▋    | 567/1000 [1:10:54<54:08,  7.50s/it][Succeeded / Failed / Skipped / Total] 504 / 49 / 14 / 567:  57%|█████▋    | 568/1000 [1:10:56<53:57,  7.49s/it][Succeeded / Failed / Skipped / Total] 505 / 49 / 14 / 568:  57%|█████▋    | 568/1000 [1:10:56<53:57,  7.49s/it][Succeeded / Failed / Skipped / Total] 506 / 49 / 14 / 569:  57%|█████▋    | 569/1000 [1:11:02<53:48,  7.49s/it][Succeeded / Failed / Skipped / Total] 506 / 49 / 14 / 569:  57%|█████▋    | 570/1000 [1:11:04<53:37,  7.48s/it][Succeeded / Failed / Skipped / Total] 507 / 49 / 14 / 570:  57%|█████▋    | 570/1000 [1:11:04<53:37,  7.48s/it][Succeeded / Failed / Skipped / Total] 508 / 49 / 14 / 571:  57%|█████▋    | 571/1000 [1:11:06<53:25,  7.47s/it][Succeeded / Failed / Skipped / Total] 508 / 49 / 14 / 571:  57%|█████▋    | 572/1000 [1:11:11<53:15,  7.47s/it][Succeeded / Failed / Skipped / Total] 508 / 50 / 14 / 572:  57%|█████▋    | 572/1000 [1:11:11<53:15,  7.47s/it][Succeeded / Failed / Skipped / Total] 509 / 50 / 14 / 573:  57%|█████▋    | 573/1000 [1:11:37<53:22,  7.50s/it][Succeeded / Failed / Skipped / Total] 509 / 50 / 14 / 573:  57%|█████▋    | 574/1000 [1:11:49<53:18,  7.51s/it][Succeeded / Failed / Skipped / Total] 510 / 50 / 14 / 574:  57%|█████▋    | 574/1000 [1:11:49<53:18,  7.51s/it][Succeeded / Failed / Skipped / Total] 510 / 50 / 14 / 574:  57%|█████▊    | 575/1000 [1:11:50<53:06,  7.50s/it][Succeeded / Failed / Skipped / Total] 511 / 50 / 14 / 575:  57%|█████▊    | 575/1000 [1:11:50<53:06,  7.50s/it][Succeeded / Failed / Skipped / Total] 511 / 50 / 14 / 575:  58%|█████▊    | 576/1000 [1:11:56<52:57,  7.49s/it]Sends content to a JSON response . --> Send ingredients to ingredient --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , JsonNode [[content]] , JsonEncoding [[encoding]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[status]] ( [[status]] ) . sendJson ( [[content]] , [[encoding]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result [[stipulation]] ( int [[clause]] , JsonNode [[ingredient]] , JsonEncoding [[soldier]] ) { if ( [[ingredient]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[stipulation]] ( [[stipulation]] ) . sendJson ( [[ingredient]] , [[soldier]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 568 ---------------------------------------------
Returns a new call with the specified fragment . --> kohithi --> Socre: 1.0

[[[[Adv]]]]: public Call [[withFragment]] ( String fragment ) { return new play . api . mvc . Call ( method ( ) , url ( ) , fragment ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call [[kaohsiung]] ( String fragment ) { return new play . api . mvc . Call ( method ( ) , url ( ) , fragment ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 569 ---------------------------------------------
Returns the absolute URL of the given request . --> Calculates the coupling --> Socre: 1.0

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request request ) { return [[absoluteURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[coupling]] ( Http . Request request ) { return [[coupling]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 570 ---------------------------------------------
Returns the web socket URL . --> returns the hostname of the given request --> Socre: 1.0

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request request ) { return [[webSocketURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[gowns]] ( Http . Request request ) { return [[gowns]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 571 ---------------------------------------------
Returns the matching method matching the given name and parameter types . --> Tries to find procedures --> Socre: 1.0

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > [[cls]] , final String [[methodName]] , final Class < ? > ... parameterTypes ) { try { final Method [[method]] = [[cls]] . getMethod ( [[methodName]] , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( [[method]] ) ; return [[method]] ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[teepee]] ( final Class < ? > [[problema]] , final String [[robberies]] , final Class < ? > ... parameterTypes ) { try { final Method [[procedures]] = [[problema]] . getMethod ( [[robberies]] , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( [[procedures]] ) ; return [[procedures]] ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 572 ---------------------------------------------
Returns a duplicate of this call . --> [[[FAILED]]]

[[[[Adv]]]]: public Call unique ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call unique ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 573 ---------------------------------------------
Creates a BuildDocHandler from a list of files . --> Overrides default implementation --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromResources]] ( File [ ] [[files]] , String [ ] baseDirs ) throws IOException { assert ( [[files]] . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ [[files]] . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < [[files]] . length ; i ++ ) { File file = [[files]] [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler [[overload]] ( File [ ] [[dossier]] , String [ ] baseDirs ) throws IOException { assert ( [[dossier]] . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ [[dossier]] . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < [[dossier]] . length ; i ++ ) { File file = [[dossier]] [ i ] ; String baseDir = baseDirs [ i ] ; if ( file . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 574 ---------------------------------------------
To json node . --> Sort a collection of objects --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[sorting]] ( final Object [[depositions]] ) { try { return mapper ( ) . valueToTree ( [[depositions]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 575 ---------------------------------------------
Deserializes a JsonNode to a Java object . --> Deserializes alia from json . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[alia]] > [[alia]] fromJson ( JsonNode json , Class < [[alia]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 576 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 512 / 50 / 14 / 576:  58%|█████▊    | 576/1000 [1:11:56<52:57,  7.49s/it][Succeeded / Failed / Skipped / Total] 512 / 50 / 14 / 576:  58%|█████▊    | 577/1000 [1:11:57<52:45,  7.48s/it][Succeeded / Failed / Skipped / Total] 513 / 50 / 14 / 577:  58%|█████▊    | 577/1000 [1:11:57<52:45,  7.48s/it][Succeeded / Failed / Skipped / Total] 513 / 50 / 14 / 577:  58%|█████▊    | 578/1000 [1:11:59<52:33,  7.47s/it][Succeeded / Failed / Skipped / Total] 514 / 50 / 14 / 578:  58%|█████▊    | 578/1000 [1:11:59<52:33,  7.47s/it][Succeeded / Failed / Skipped / Total] 514 / 50 / 14 / 578:  58%|█████▊    | 579/1000 [1:12:01<52:22,  7.46s/it][Succeeded / Failed / Skipped / Total] 515 / 50 / 14 / 579:  58%|█████▊    | 579/1000 [1:12:01<52:22,  7.46s/it][Succeeded / Failed / Skipped / Total] 515 / 50 / 14 / 579:  58%|█████▊    | 580/1000 [1:12:47<52:42,  7.53s/it][Succeeded / Failed / Skipped / Total] 516 / 50 / 14 / 580:  58%|█████▊    | 580/1000 [1:12:47<52:42,  7.53s/it][Succeeded / Failed / Skipped / Total] 516 / 50 / 14 / 580:  58%|█████▊    | 581/1000 [1:12:50<52:31,  7.52s/it][Succeeded / Failed / Skipped / Total] 517 / 50 / 14 / 581:  58%|█████▊    | 581/1000 [1:12:50<52:31,  7.52s/it][Succeeded / Failed / Skipped / Total] 517 / 50 / 14 / 581:  58%|█████▊    | 582/1000 [1:13:03<52:28,  7.53s/it][Succeeded / Failed / Skipped / Total] 518 / 50 / 14 / 582:  58%|█████▊    | 582/1000 [1:13:03<52:28,  7.53s/it][Succeeded / Failed / Skipped / Total] 518 / 50 / 14 / 582:  58%|█████▊    | 583/1000 [1:13:11<52:20,  7.53s/it]Selects the preferred language . --> Privileged from other languages --> Socre: 1.0

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > [[candidates]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[candidates]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[privileged]] ( Collection < Lang > [[rival]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[rival]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 577 ---------------------------------------------
Parse the given string as a JsonNode . --> Parse alban --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[parse]] ( String [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[alban]] ( String [[marv]] ) { try { return mapper ( ) . readTree ( [[marv]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 578 ---------------------------------------------
Relative path relative to startPath --> documentation inherited from Pramole --> Socre: 1.0

[[[[Adv]]]]: public static String [[relative]] ( String [[startPath]] , String [[targetPath]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[involving]] ( String [[pramod]] , String [[allay]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 579 ---------------------------------------------
Returns the canonical form of the given URL . --> Takes the video and returns the video --> Socre: 1.0

[[[[Adv]]]]: public static String [[canonical]] ( String [[url]] ) { String [ ] [[urlPath]] = toSegments ( [[url]] ) ; Stack < String > [[canonical]] = new Stack <> ( ) ; for ( String comp : [[urlPath]] ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[canonical]] . empty ( ) && [[canonical]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[canonical]] . push ( comp ) ; else [[canonical]] . pop ( ) ; } String [[prefixSep]] = [[url]] . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String [[trailingSep]] = [[url]] . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return [[prefixSep]] + [[canonical]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + [[trailingSep]] ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String [[mitre]] ( String [[youtube]] ) { String [ ] [[spitting]] = toSegments ( [[youtube]] ) ; Stack < String > [[mitre]] = new Stack <> ( ) ; for ( String comp : [[spitting]] ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[mitre]] . empty ( ) && [[mitre]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[mitre]] . push ( comp ) ; else [[mitre]] . pop ( ) ; } String [[stamp]] = [[youtube]] . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String [[flavour]] = [[youtube]] . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return [[stamp]] + [[mitre]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + [[flavour]] ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 580 ---------------------------------------------
Returns a connection function that calls the connection function . --> used by ConnectionFunction --> Socre: 1.0

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[block]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[connection]] ) { try { return [[block]] . call ( [[connection]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[interfered]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[links]] ) { try { return [[interfered]] . call ( [[links]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 581 ---------------------------------------------
Given a set of constraints return a list of constraints which match the given constraints . --> Hook for unit tests --> Socre: 1.0

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayableConstraint]] ( Set < ConstraintDescriptor < ? > > [[constraints]] ) { return [[constraints]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayableConstraint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[husk]] ( Set < ConstraintDescriptor < ? > > [[handicaps]] ) { return [[handicaps]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[husk]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 582 ---------------------------------------------
Displays the displayable constraints of a constraint . --> zItemDescriptor --> Socre: 1.0

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[displayableConstraint]] ( ConstraintDescriptor < ? > constraint ) { final Display [[displayAnnotation]] = constraint . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[displayAnnotation]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[displayAnnotation]] . attributes ( ) ) . map ( attr -> constraint . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[ziv]] ( ConstraintDescriptor < ? > constraint ) { final Display [[acrobatics]] = constraint . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[acrobatics]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[acrobatics]] . attributes ( ) ) . map ( attr -> constraint . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 583 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 518 / 51 / 14 / 583:  58%|█████▊    | 583/1000 [1:13:11<52:20,  7.53s/it][Succeeded / Failed / Skipped / Total] 518 / 51 / 14 / 583:  58%|█████▊    | 584/1000 [1:13:11<52:08,  7.52s/it][Succeeded / Failed / Skipped / Total] 519 / 51 / 14 / 584:  58%|█████▊    | 584/1000 [1:13:11<52:08,  7.52s/it][Succeeded / Failed / Skipped / Total] 519 / 51 / 14 / 584:  58%|█████▊    | 585/1000 [1:13:13<51:56,  7.51s/it][Succeeded / Failed / Skipped / Total] 520 / 51 / 14 / 585:  58%|█████▊    | 585/1000 [1:13:13<51:56,  7.51s/it][Succeeded / Failed / Skipped / Total] 520 / 51 / 14 / 585:  59%|█████▊    | 586/1000 [1:13:16<51:45,  7.50s/it][Succeeded / Failed / Skipped / Total] 521 / 51 / 14 / 586:  59%|█████▊    | 586/1000 [1:13:16<51:45,  7.50s/it][Succeeded / Failed / Skipped / Total] 521 / 51 / 14 / 586:  59%|█████▊    | 587/1000 [1:13:19<51:35,  7.50s/it][Succeeded / Failed / Skipped / Total] 522 / 51 / 14 / 587:  59%|█████▊    | 587/1000 [1:13:19<51:35,  7.50s/it][Succeeded / Failed / Skipped / Total] 522 / 51 / 14 / 587:  59%|█████▉    | 588/1000 [1:13:20<51:23,  7.48s/it][Succeeded / Failed / Skipped / Total] 523 / 51 / 14 / 588:  59%|█████▉    | 588/1000 [1:13:20<51:23,  7.48s/it][Succeeded / Failed / Skipped / Total] 523 / 51 / 14 / 588:  59%|█████▉    | 589/1000 [1:13:20<51:10,  7.47s/it][Succeeded / Failed / Skipped / Total] 524 / 51 / 14 / 589:  59%|█████▉    | 589/1000 [1:13:20<51:10,  7.47s/it][Succeeded / Failed / Skipped / Total] 524 / 51 / 14 / 589:  59%|█████▉    | 590/1000 [1:13:24<51:00,  7.47s/it][Succeeded / Failed / Skipped / Total] 525 / 51 / 14 / 590:  59%|█████▉    | 590/1000 [1:13:24<51:00,  7.47s/it][Succeeded / Failed / Skipped / Total] 525 / 51 / 14 / 590:  59%|█████▉    | 591/1000 [1:13:27<50:49,  7.46s/it][Succeeded / Failed / Skipped / Total] 526 / 51 / 14 / 591:  59%|█████▉    | 591/1000 [1:13:27<50:49,  7.46s/it][Succeeded / Failed / Skipped / Total] 526 / 51 / 14 / 591:  59%|█████▉    | 592/1000 [1:13:41<50:47,  7.47s/it][Succeeded / Failed / Skipped / Total] 526 / 52 / 14 / 592:  59%|█████▉    | 592/1000 [1:13:41<50:47,  7.47s/it][Succeeded / Failed / Skipped / Total] 526 / 52 / 14 / 592:  59%|█████▉    | 593/1000 [1:13:46<50:38,  7.46s/it]Returns the preferred messages for this language . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages preferred ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages preferred ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 584 ---------------------------------------------
Parse cron expression --> Translation --> Socre: 1.0

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String cron ) { try { return new CronExpression ( cron ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[translation]] ( String cron ) { try { return new CronExpression ( cron ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 585 ---------------------------------------------
Get the next interval --> Gets cron interval --> Socre: 1.0

[[[[Adv]]]]: public static long cronInterval ( String [[cron]] , Date [[date]] ) { try { return new CronExpression ( [[cron]] ) . getNextInterval ( [[date]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long cronInterval ( String [[trade]] , Date [[hour]] ) { try { return new CronExpression ( [[trade]] ) . getNextInterval ( [[hour]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[trade]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 586 ---------------------------------------------
Create an ahc client . --> Factory method to create anAhcClient --> Socre: 1.0

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig [[config]] , AhcHttpCache [[cache]] , Materializer [[materializer]] ) { final StandaloneAhcWSClient [[client]] = StandaloneAhcWSClient . create ( [[config]] , [[cache]] , [[materializer]] ) ; return new AhcWSClient ( [[client]] , [[materializer]] ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig [[sandbar]] , AhcHttpCache [[cloaked]] , Materializer [[improving]] ) { final StandaloneAhcWSClient [[buyer]] = StandaloneAhcWSClient . create ( [[sandbar]] , [[cloaked]] , [[improving]] ) ; return new AhcWSClient ( [[buyer]] , [[improving]] ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 587 ---------------------------------------------
Creates a build documentation handler from a jar file . --> overrides the implementation --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromJar]] ( JarFile [[jarFile]] , String base ) { FileRepository [[repo]] = new JarRepository ( [[jarFile]] , Option . apply ( base ) ) ; return new DocumentationHandler ( [[repo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[affer]] ( JarFile [[murders]] , String base ) { FileRepository [[reimbursement]] = new JarRepository ( [[murders]] , Option . apply ( base ) ) ; return new DocumentationHandler ( [[reimbursement]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 588 ---------------------------------------------
Creates a server for the given router and port . --> Static factory method --> Socre: 1.0

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode mode , int port , Function < BuiltInComponents , Router > [[block]] ) { return new Builder ( ) . mode ( mode ) . http ( port ) . build ( [[block]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[psychos]] ( Mode mode , int port , Function < BuiltInComponents , Router > [[latched]] ) { return new Builder ( ) . mode ( mode ) . http ( port ) . build ( [[latched]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 589 ---------------------------------------------
Display a request . --> Display the given request --> Socre: 1.0

[[[[Adv]]]]: public static Result [[TODO]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result [[GENTE]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 590 ---------------------------------------------
Registers a session with the specified key . --> Sets sitem for an element --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[session]] ( String [[key]] , String [[value]] ) { [[session]] ( ) . put ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void [[sits]] ( String [[elham]] , String [[inestimable]] ) { [[sits]] ( ) . put ( [[elham]] , [[inestimable]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 591 ---------------------------------------------
Set a value to flash --> Convenience method for debugging --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[flash]] ( String [[key]] , String [[value]] ) { [[flash]] ( ) . put ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void [[ray]] ( String [[underlying]] , String [[evaluating]] ) { [[ray]] ( ) . put ( [[underlying]] , [[evaluating]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 592 ---------------------------------------------
Qualified binding key . --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A extends Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 593 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 527 / 52 / 14 / 593:  59%|█████▉    | 593/1000 [1:13:46<50:38,  7.46s/it][Succeeded / Failed / Skipped / Total] 527 / 52 / 14 / 593:  59%|█████▉    | 594/1000 [1:13:46<50:25,  7.45s/it][Succeeded / Failed / Skipped / Total] 527 / 53 / 14 / 594:  59%|█████▉    | 594/1000 [1:13:46<50:25,  7.45s/it][Succeeded / Failed / Skipped / Total] 527 / 53 / 14 / 594:  60%|█████▉    | 595/1000 [1:14:02<50:24,  7.47s/it][Succeeded / Failed / Skipped / Total] 527 / 54 / 14 / 595:  60%|█████▉    | 595/1000 [1:14:02<50:24,  7.47s/it][Succeeded / Failed / Skipped / Total] 527 / 54 / 14 / 595:  60%|█████▉    | 596/1000 [1:14:06<50:13,  7.46s/it][Succeeded / Failed / Skipped / Total] 527 / 55 / 14 / 596:  60%|█████▉    | 596/1000 [1:14:06<50:13,  7.46s/it][Succeeded / Failed / Skipped / Total] 527 / 55 / 14 / 596:  60%|█████▉    | 597/1000 [1:14:06<50:01,  7.45s/it][Succeeded / Failed / Skipped / Total] 528 / 55 / 14 / 597:  60%|█████▉    | 597/1000 [1:14:06<50:01,  7.45s/it][Succeeded / Failed / Skipped / Total] 528 / 55 / 14 / 597:  60%|█████▉    | 598/1000 [1:14:14<49:54,  7.45s/it][Succeeded / Failed / Skipped / Total] 529 / 55 / 14 / 598:  60%|█████▉    | 598/1000 [1:14:14<49:54,  7.45s/it][Succeeded / Failed / Skipped / Total] 529 / 55 / 14 / 598:  60%|█████▉    | 599/1000 [1:14:20<49:45,  7.45s/it][Succeeded / Failed / Skipped / Total] 530 / 55 / 14 / 599:  60%|█████▉    | 599/1000 [1:14:20<49:45,  7.45s/it][Succeeded / Failed / Skipped / Total] 530 / 55 / 14 / 599:  60%|██████    | 600/1000 [1:14:31<49:41,  7.45s/it][Succeeded / Failed / Skipped / Total] 531 / 55 / 14 / 600:  60%|██████    | 600/1000 [1:14:31<49:41,  7.45s/it][Succeeded / Failed / Skipped / Total] 531 / 55 / 14 / 600:  60%|██████    | 601/1000 [1:14:47<49:39,  7.47s/it][Succeeded / Failed / Skipped / Total] 532 / 55 / 14 / 601:  60%|██████    | 601/1000 [1:14:47<49:39,  7.47s/it][Succeeded / Failed / Skipped / Total] 532 / 55 / 14 / 601:  60%|██████    | 602/1000 [1:14:55<49:31,  7.47s/it]Parse a JSON document from an input stream . --> Removes accommodation from an input stream --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[parse]] ( java . io . InputStream [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[accommodation]] ( java . io . InputStream [[cunning]] ) { try { return mapper ( ) . readTree ( [[cunning]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 594 ---------------------------------------------
Returns the binding key of this binding . --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A extends Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 595 ---------------------------------------------
Adds a mapped constraint validator for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public < T extends ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T extends ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 596 ---------------------------------------------
Converts the given supplier to a binding . --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A extends T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 597 ---------------------------------------------
Convert this binding to the given provider . --> Convenient factory method for Zencing --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > [[provider]] ) { return underlying . to ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[z]] ( final Provider < ? extends T > [[outfitting]] ) { return underlying . to ( [[outfitting]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 598 ---------------------------------------------
Converts the underlying provider to a Java provider . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public < P [[extends]] Provider < ? extends T > > Binding < T > [[toProvider]] ( final Class < P > [[provider]] ) { return underlying . toProvider ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P [[applies]] Provider < ? extends T > > Binding < T > [[rowland]] ( final Class < P > [[trader]] ) { return underlying . toProvider ( [[trader]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 599 ---------------------------------------------
Returns the available languages . --> get all available languages --> Socre: 1.0

[[[[Adv]]]]: public static List < Lang > [[availables]] ( Application app ) { play . api . i18n . Langs [[langs]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( [[langs]] . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > [[glimpsed]] ( Application app ) { play . api . i18n . Langs [[nazarene]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( [[nazarene]] . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 600 ---------------------------------------------
Returns the preferred language . --> Optimize a list of languages --> Socre: 1.0

[[[[Adv]]]]: public static Lang [[preferred]] ( Application [[app]] , List < Lang > [[availableLangs]] ) { play . api . i18n . Langs langs = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[availableLangs]] . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[opted]] ( Application [[likely]] , List < Lang > [[ahab]] ) { play . api . i18n . Langs langs = [[likely]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[ahab]] . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 601 ---------------------------------------------
Creates a reader for the Evolutions . --> Terminate evolution --> Socre: 1.0

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[forDefault]] ( Evolution ... [[evolutions]] ) { Map < String , List < Evolution > > [[map]] = new HashMap < String , List < Evolution > > ( ) ; [[map]] . put ( "default" , Arrays . asList ( [[evolutions]] ) ) ; return fromMap ( [[map]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . [[purpose]] . EvolutionsReader [[terminate]] ( Evolution ... [[purpose]] ) { Map < String , List < Evolution > > [[valentines]] = new HashMap < String , List < Evolution > > ( ) ; [[valentines]] . put ( "default" , Arrays . asList ( [[purpose]] ) ) ; return fromMap ( [[valentines]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 602 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 533 / 55 / 14 / 602:  60%|██████    | 602/1000 [1:14:55<49:31,  7.47s/it][Succeeded / Failed / Skipped / Total] 533 / 55 / 14 / 602:  60%|██████    | 603/1000 [1:15:08<49:28,  7.48s/it][Succeeded / Failed / Skipped / Total] 534 / 55 / 14 / 603:  60%|██████    | 603/1000 [1:15:08<49:28,  7.48s/it][Succeeded / Failed / Skipped / Total] 534 / 55 / 14 / 603:  60%|██████    | 604/1000 [1:15:10<49:16,  7.47s/it][Succeeded / Failed / Skipped / Total] 535 / 55 / 14 / 604:  60%|██████    | 604/1000 [1:15:10<49:16,  7.47s/it][Succeeded / Failed / Skipped / Total] 535 / 55 / 14 / 604:  60%|██████    | 605/1000 [1:15:25<49:14,  7.48s/it][Succeeded / Failed / Skipped / Total] 536 / 55 / 14 / 605:  60%|██████    | 605/1000 [1:15:25<49:14,  7.48s/it][Succeeded / Failed / Skipped / Total] 536 / 55 / 14 / 605:  61%|██████    | 606/1000 [1:15:48<49:17,  7.51s/it][Succeeded / Failed / Skipped / Total] 537 / 55 / 14 / 606:  61%|██████    | 606/1000 [1:15:48<49:17,  7.51s/it][Succeeded / Failed / Skipped / Total] 537 / 55 / 14 / 606:  61%|██████    | 607/1000 [1:15:55<49:09,  7.51s/it][Succeeded / Failed / Skipped / Total] 538 / 55 / 14 / 607:  61%|██████    | 607/1000 [1:15:55<49:09,  7.51s/it][Succeeded / Failed / Skipped / Total] 538 / 55 / 14 / 607:  61%|██████    | 608/1000 [1:15:58<48:58,  7.50s/it][Succeeded / Failed / Skipped / Total] 539 / 55 / 14 / 608:  61%|██████    | 608/1000 [1:15:58<48:58,  7.50s/it][Succeeded / Failed / Skipped / Total] 539 / 55 / 14 / 608:  61%|██████    | 609/1000 [1:15:58<48:46,  7.49s/it][Succeeded / Failed / Skipped / Total] 540 / 55 / 14 / 609:  61%|██████    | 609/1000 [1:15:58<48:46,  7.49s/it][Succeeded / Failed / Skipped / Total] 540 / 55 / 14 / 609:  61%|██████    | 610/1000 [1:16:03<48:37,  7.48s/it][Succeeded / Failed / Skipped / Total] 541 / 55 / 14 / 610:  61%|██████    | 610/1000 [1:16:03<48:37,  7.48s/it][Succeeded / Failed / Skipped / Total] 541 / 55 / 14 / 610:  61%|██████    | 611/1000 [1:16:08<48:28,  7.48s/it]Parse evolutions . --> Convenience method for clarity --> Socre: 1.0

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > [[evolutions]] ) { return new SimpleEvolutionsReader ( [[evolutions]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . [[rosette]] . EvolutionsReader [[clarity]] ( Map < String , List < Evolution > > [[rosette]] ) { return new SimpleEvolutionsReader ( [[rosette]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 603 ---------------------------------------------
Cleans all evictions . --> Starts astor --> Socre: 1.0

[[[[Adv]]]]: public static void [[cleanupEvolutions]] ( Database [[database]] , boolean autocommit , String schema ) { DatabaseEvolutions [[evolutions]] = new DatabaseEvolutions ( [[database]] . asScala ( ) , schema ) ; [[evolutions]] . evolve ( [[evolutions]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void [[astor]] ( Database [[qaeda]] , boolean autocommit , String schema ) { DatabaseEvolutions [[kronk]] = new DatabaseEvolutions ( [[qaeda]] . asScala ( ) , schema ) ; [[kronk]] . evolve ( [[kronk]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 604 ---------------------------------------------
Converts this binding to a Java binding . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > [[key]] ) { return underlying . to ( [[key]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[against]] ( final BindingKey < ? extends T > [[vitale]] ) { return underlying . to ( [[vitale]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 605 ---------------------------------------------
Check if the given array is assignable to the given class array . --> Compare two schemas --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] [[classArray]] , Class < ? > [ ] toClassArray , boolean [[autoboxing]] ) { if ( arrayGetLength ( [[classArray]] ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( [[classArray]] == null ) { [[classArray]] = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < [[classArray]] . length ; i ++ ) { if ( [[isAssignable]] ( [[classArray]] [ i ] , toClassArray [ i ] , [[autoboxing]] ) == "False" != "False" ) { return "False" != "False" ; } } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[comparable]] ( Class < ? > [ ] [[scheherazade]] , Class < ? > [ ] toClassArray , boolean [[gangway]] ) { if ( arrayGetLength ( [[scheherazade]] ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( [[scheherazade]] == null ) { [[scheherazade]] = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < [[scheherazade]] . length ; i ++ ) { if ( [[comparable]] ( [[scheherazade]] [ i ] , toClassArray [ i ] , [[gangway]] ) == "False" != "False" ) { return "False" != "False" ; } } return "[[Right]]" == "[[Right]]" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 606 ---------------------------------------------
Converts the binding to a Java binding . --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final Class < ? extends T > [[implementation]] ) { return underlying . to ( [[implementation]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > [[dans]] ( final Class < ? extends T > [[fulfillment]] ) { return underlying . to ( [[fulfillment]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 607 ---------------------------------------------
Loads the application with the given modules . --> Offload a set of buckets --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Module ... [[modules]] ) { return [[load]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[offload]] ( play . api . inject . Module ... [[buckets]] ) { return [[offload]] ( Guiceable . [[buckets]] ( [[buckets]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 608 ---------------------------------------------
Adds a module loader to the application . --> Static factory method for building a new Guice application --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[withModuleLoader]] ( BiFunction < Environment , Config , List < GuiceableModule > > [[loader]] ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( [[loader]] . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[guildenstern]] ( BiFunction < Environment , Config , List < GuiceableModule > > [[chargers]] ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( [[chargers]] . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 609 ---------------------------------------------
Loads the application with the given modules . --> Places a bearing grouping by grouping --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( com . google . inject . Module ... [[modules]] ) { return [[load]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[borne]] ( com . google . inject . Module ... [[grouping]] ) { return [[borne]] ( Guiceable . [[grouping]] ( [[grouping]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 610 ---------------------------------------------
Encodes the given cookie into a string . --> This method returns alphanumeric algorithms --> Socre: 1.0

[[[[Adv]]]]: public String [[encode]] ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[buf]] = new StringBuilder ( ) ; [[encode]] ( [[buf]] , [[cookie]] ) ; return stripTrailingSeparator ( [[buf]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String [[algorithms]] ( Cookie [[pastry]] ) { if ( [[pastry]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[pressurize]] = new StringBuilder ( ) ; [[algorithms]] ( [[pressurize]] , [[pastry]] ) ; return stripTrailingSeparator ( [[pressurize]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 611 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 542 / 55 / 14 / 611:  61%|██████    | 611/1000 [1:16:08<48:28,  7.48s/it][Succeeded / Failed / Skipped / Total] 542 / 55 / 14 / 611:  61%|██████    | 612/1000 [1:16:12<48:18,  7.47s/it][Succeeded / Failed / Skipped / Total] 543 / 55 / 14 / 612:  61%|██████    | 612/1000 [1:16:12<48:18,  7.47s/it][Succeeded / Failed / Skipped / Total] 543 / 55 / 14 / 612:  61%|██████▏   | 613/1000 [1:16:40<48:24,  7.50s/it][Succeeded / Failed / Skipped / Total] 544 / 55 / 14 / 613:  61%|██████▏   | 613/1000 [1:16:40<48:24,  7.50s/it][Succeeded / Failed / Skipped / Total] 544 / 55 / 14 / 613:  61%|██████▏   | 614/1000 [1:16:41<48:12,  7.49s/it][Succeeded / Failed / Skipped / Total] 544 / 56 / 14 / 614:  61%|██████▏   | 614/1000 [1:16:41<48:12,  7.49s/it][Succeeded / Failed / Skipped / Total] 544 / 56 / 14 / 614:  62%|██████▏   | 615/1000 [1:16:51<48:06,  7.50s/it][Succeeded / Failed / Skipped / Total] 545 / 56 / 14 / 615:  62%|██████▏   | 615/1000 [1:16:51<48:06,  7.50s/it][Succeeded / Failed / Skipped / Total] 545 / 56 / 14 / 615:  62%|██████▏   | 616/1000 [1:17:17<48:10,  7.53s/it][Succeeded / Failed / Skipped / Total] 546 / 56 / 14 / 616:  62%|██████▏   | 616/1000 [1:17:17<48:10,  7.53s/it][Succeeded / Failed / Skipped / Total] 546 / 56 / 14 / 616:  62%|██████▏   | 617/1000 [1:17:20<48:00,  7.52s/it][Succeeded / Failed / Skipped / Total] 547 / 56 / 14 / 617:  62%|██████▏   | 617/1000 [1:17:20<48:00,  7.52s/it][Succeeded / Failed / Skipped / Total] 547 / 56 / 14 / 617:  62%|██████▏   | 618/1000 [1:17:43<48:02,  7.55s/it][Succeeded / Failed / Skipped / Total] 548 / 56 / 14 / 618:  62%|██████▏   | 618/1000 [1:17:43<48:02,  7.55s/it][Succeeded / Failed / Skipped / Total] 548 / 56 / 14 / 618:  62%|██████▏   | 619/1000 [1:17:57<47:58,  7.56s/it]Returns a new GuiceApplicationBuilder . --> Create a new GuiceApplicationBuilder --> Socre: 1.0

[[[[Adv]]]]: protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder [[builder]] ) { return new GuiceApplicationBuilder ( [[builder]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder [[cartoonist]] ) { return new GuiceApplicationBuilder ( [[cartoonist]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 612 ---------------------------------------------
Returns the current em stack . --> returns a new deque delegates --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[emStack]] ( boolean [[threadLocalFallback]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object [[emsObject]] = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( [[emsObject]] != null ) { return ( Deque < EntityManager > ) [[emsObject]] ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[leftists]] ( boolean [[vicente]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object [[leia]] = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( [[leia]] != null ) { return ( Deque < EntityManager > ) [[leia]] ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 613 ---------------------------------------------
Loads the application with the given bindings . --> Setter for frees --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[load]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder [[fret]] ( play . api . inject . Binding < ? > ... [[obliges]] ) { return [[fret]] ( Guiceable . [[obliges]] ( [[obliges]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 614 ---------------------------------------------
Creates a Guice application with the specified context . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder builder ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder builder ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 615 ---------------------------------------------
Creates a flow with the given flow . --> Shortcut implementation --> Socre: 1.0

[[[[Adv]]]]: public static < [[In]] , FlowIn , [[Out]] > Flow < [[In]] , [[Out]] , ? > [[bypassWith]] ( Function < [[In]] , F . Either < FlowIn , [[Out]] > > [[splitter]] , Flow < FlowIn , [[Out]] , ? > [[flow]] ) { return [[bypassWith]] ( Flow . < [[In]] > create ( ) . map ( [[splitter]] :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[flow]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < [[Around]] , FlowIn , [[External]] > Flow < [[Around]] , [[External]] , ? > [[luckily]] ( Function < [[Around]] , F . Either < FlowIn , [[External]] > > [[sorter]] , Flow < FlowIn , [[External]] , ? > [[inputs]] ) { return [[luckily]] ( Flow . < [[Around]] > create ( ) . map ( [[sorter]] :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[inputs]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 616 ---------------------------------------------
Create a Flow of actors . --> Fair child elements --> Socre: 1.0

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > [[actorRef]] ( Function < ActorRef , Props > props , int [[bufferSize]] , OverflowStrategy overflowStrategy , ActorRefFactory [[factory]] , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , [[bufferSize]] , overflowStrategy , [[factory]] , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > [[fairchild]] ( Function < ActorRef , Props > props , int [[alcove]] , OverflowStrategy overflowStrategy , ActorRefFactory [[production]] , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , [[alcove]] , overflowStrategy , [[production]] , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 617 ---------------------------------------------
Convert error arguments . --> Taken from Spring framework --> Socre: 1.0

[[[[Adv]]]]: private List < Object > [[convertErrorArguments]] ( Object [ ] [[arguments]] ) { if ( [[arguments]] == null ) { return Collections . emptyList ( ) ; } List < Object > [[converted]] = Arrays . stream ( [[arguments]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[converted]] ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > [[soared]] ( Object [ ] [[rationale]] ) { if ( [[rationale]] == null ) { return Collections . emptyList ( ) ; } List < Object > [[turned]] = Arrays . stream ( [[rationale]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[turned]] ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 618 ---------------------------------------------
Load configuration from Guice . --> Declarative Services method --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[withConfigLoader]] ( Function < Environment , Config > [[load]] ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment [[env]] ) -> new play . api . Configuration ( [[load]] . apply ( new Environment ( [[env]] ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[negativity]] ( Function < Environment , Config > [[embarkation]] ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment [[individual]] ) -> new play . api . Configuration ( [[embarkation]] . apply ( new Environment ( [[individual]] ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 619 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 549 / 56 / 14 / 619:  62%|██████▏   | 619/1000 [1:17:57<47:58,  7.56s/it][Succeeded / Failed / Skipped / Total] 549 / 56 / 14 / 619:  62%|██████▏   | 620/1000 [1:18:03<47:50,  7.55s/it][Succeeded / Failed / Skipped / Total] 550 / 56 / 14 / 620:  62%|██████▏   | 620/1000 [1:18:03<47:50,  7.55s/it][Succeeded / Failed / Skipped / Total] 550 / 56 / 14 / 620:  62%|██████▏   | 621/1000 [1:18:03<47:38,  7.54s/it][Succeeded / Failed / Skipped / Total] 551 / 56 / 14 / 621:  62%|██████▏   | 621/1000 [1:18:03<47:38,  7.54s/it][Succeeded / Failed / Skipped / Total] 551 / 56 / 14 / 621:  62%|██████▏   | 622/1000 [1:18:23<47:38,  7.56s/it][Succeeded / Failed / Skipped / Total] 552 / 56 / 14 / 622:  62%|██████▏   | 622/1000 [1:18:23<47:38,  7.56s/it][Succeeded / Failed / Skipped / Total] 552 / 56 / 14 / 622:  62%|██████▏   | 623/1000 [1:18:27<47:28,  7.56s/it][Succeeded / Failed / Skipped / Total] 553 / 56 / 14 / 623:  62%|██████▏   | 623/1000 [1:18:27<47:28,  7.56s/it][Succeeded / Failed / Skipped / Total] 553 / 56 / 14 / 623:  62%|██████▏   | 624/1000 [1:18:28<47:16,  7.55s/it][Succeeded / Failed / Skipped / Total] 554 / 56 / 14 / 624:  62%|██████▏   | 624/1000 [1:18:28<47:16,  7.55s/it][Succeeded / Failed / Skipped / Total] 554 / 56 / 14 / 624:  62%|██████▎   | 625/1000 [1:18:28<47:05,  7.53s/it][Succeeded / Failed / Skipped / Total] 555 / 56 / 14 / 625:  62%|██████▎   | 625/1000 [1:18:28<47:05,  7.53s/it][Succeeded / Failed / Skipped / Total] 555 / 56 / 14 / 625:  63%|██████▎   | 626/1000 [1:18:41<47:00,  7.54s/it][Succeeded / Failed / Skipped / Total] 555 / 57 / 14 / 626:  63%|██████▎   | 626/1000 [1:18:41<47:00,  7.54s/it][Succeeded / Failed / Skipped / Total] 555 / 57 / 14 / 626:  63%|██████▎   | 627/1000 [1:18:44<46:50,  7.53s/it]Properly pass a flow into a splitter . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: public static < [[In]] , FlowIn , Out > Flow < [[In]] , Out , ? > [[bypassWith]] ( Flow < [[In]] , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > [[mergeStrategy]] , Flow < FlowIn , Out , ? > [[flow]] ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < [[Travers]] , FlowIn , Out > Flow < [[Travers]] , Out , ? > [[masashi]] ( Flow < [[Travers]] , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > [[tenma]] , Flow < FlowIn , Out , ? > [[streaming]] ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 620 ---------------------------------------------
Converts errors into JSON representation . --> Get figurin --> Socre: 1.0

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang [[lang]] ) { Map < String , List < String > > [[allMessages]] = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > [[messages]] = new ArrayList <> ( ) ; if ( messagesApi != null && [[lang]] != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; [[messages]] . add ( messagesApi . get ( [[lang]] , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , [[lang]] ) ) ) ; } else { [[messages]] . add ( error . message ( ) ) ; } [[allMessages]] . put ( error . key ( ) , [[messages]] ) ; } } ) ; return play . libs . Json . toJson ( [[allMessages]] ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[figurin]] ( Lang [[bulky]] ) { Map < String , List < String > > [[youjust]] = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > [[advertisements]] = new ArrayList <> ( ) ; if ( messagesApi != null && [[bulky]] != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; [[advertisements]] . add ( messagesApi . get ( [[bulky]] , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , [[bulky]] ) ) ) ; } else { [[advertisements]] . add ( error . message ( ) ) ; } [[youjust]] . put ( error . key ( ) , [[advertisements]] ) ; } } ) ; return play . libs . Json . toJson ( [[youjust]] ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 621 ---------------------------------------------
Returns the value associated with the given key . --> Retrieves a price for a proposition . --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > [[value]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[valuation]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 622 ---------------------------------------------
Loads a builder from the given modules . --> Start building a new Guice Application --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[tasked]] ( GuiceableModule ... [[flats]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[flats]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 623 ---------------------------------------------
Fills the form . --> Fluent formatter --> Socre: 1.0

[[[[Adv]]]]: public DynamicForm [[fill]] ( Map < String , Object > [[value]] ) { Form < Dynamic > [[form]] = super . fill ( new Dynamic ( [[value]] ) ) ; return new DynamicForm ( [[form]] . rawData ( ) , [[form]] . files ( ) , [[form]] . errors ( ) , [[form]] . [[value]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm [[puente]] ( Map < String , Object > [[valuable]] ) { Form < Dynamic > [[patterns]] = super . fill ( new Dynamic ( [[valuable]] ) ) ; return new DynamicForm ( [[patterns]] . rawData ( ) , [[patterns]] . files ( ) , [[patterns]] . errors ( ) , [[patterns]] . [[valuable]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 624 ---------------------------------------------
Converts the given text to a type . --> Convert the given text to tones . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[tones]] > [[tones]] parse ( Field field , String text ) { return ( [[tones]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 625 ---------------------------------------------
Print the given object --> Print a wrapped object --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[Wire]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[Wire]] . class ) ) { return conversion . convert ( t , [[Wire]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 626 ---------------------------------------------
Converts the given string to an object of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > T parse ( String text , Class < T > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < T > T parse ( String text , Class < T > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 627 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 556 / 57 / 14 / 627:  63%|██████▎   | 627/1000 [1:18:44<46:50,  7.53s/it][Succeeded / Failed / Skipped / Total] 556 / 57 / 14 / 627:  63%|██████▎   | 628/1000 [1:18:45<46:39,  7.53s/it][Succeeded / Failed / Skipped / Total] 556 / 58 / 14 / 628:  63%|██████▎   | 628/1000 [1:18:45<46:39,  7.53s/it][Succeeded / Failed / Skipped / Total] 556 / 58 / 14 / 628:  63%|██████▎   | 629/1000 [1:18:46<46:28,  7.52s/it][Succeeded / Failed / Skipped / Total] 557 / 58 / 14 / 629:  63%|██████▎   | 629/1000 [1:18:46<46:28,  7.52s/it][Succeeded / Failed / Skipped / Total] 557 / 58 / 14 / 629:  63%|██████▎   | 630/1000 [1:18:47<46:16,  7.50s/it][Succeeded / Failed / Skipped / Total] 558 / 58 / 14 / 630:  63%|██████▎   | 630/1000 [1:18:47<46:16,  7.50s/it][Succeeded / Failed / Skipped / Total] 558 / 58 / 14 / 630:  63%|██████▎   | 631/1000 [1:18:55<46:08,  7.50s/it][Succeeded / Failed / Skipped / Total] 558 / 59 / 14 / 631:  63%|██████▎   | 631/1000 [1:18:55<46:08,  7.50s/it][Succeeded / Failed / Skipped / Total] 558 / 59 / 14 / 631:  63%|██████▎   | 632/1000 [1:18:56<45:58,  7.49s/it][Succeeded / Failed / Skipped / Total] 559 / 59 / 14 / 632:  63%|██████▎   | 632/1000 [1:18:56<45:58,  7.49s/it][Succeeded / Failed / Skipped / Total] 559 / 59 / 14 / 632:  63%|██████▎   | 633/1000 [1:18:57<45:46,  7.48s/it][Succeeded / Failed / Skipped / Total] 560 / 59 / 14 / 633:  63%|██████▎   | 633/1000 [1:18:57<45:46,  7.48s/it][Succeeded / Failed / Skipped / Total] 560 / 59 / 14 / 633:  63%|██████▎   | 634/1000 [1:19:13<45:44,  7.50s/it][Succeeded / Failed / Skipped / Total] 561 / 59 / 14 / 634:  63%|██████▎   | 634/1000 [1:19:13<45:44,  7.50s/it][Succeeded / Failed / Skipped / Total] 561 / 59 / 14 / 634:  64%|██████▎   | 635/1000 [1:19:14<45:33,  7.49s/it]Prints the given type --> Print Strings --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[Strung]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[Strung]] . class ) ) ) { return ( [[Strung]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[Strung]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[Strung]] . class ) ) { return conversion . convert ( t , [[Strung]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 628 ---------------------------------------------
Prints a type descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > String print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > String print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 629 ---------------------------------------------
Register converter . --> Register converterters . --> Socre: 1.0

[[[[Adv]]]]: private Formatters [[registerOptional]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor [[targetType]] ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String

[[[[Adv]]]]: private Formatters [[heresies]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor [[drugs]] ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 630 ---------------------------------------------
Gets the global validation errors . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[hutu]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 631 ---------------------------------------------
Returns a function that returns a connection to a given connection . --> [[[FAILED]]]

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > connectionFunction ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { block . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > connectionFunction ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection connection ) { try { block . run ( connection ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 632 ---------------------------------------------
Encodes a cookie . --> Convert cookies to numerical string --> Socre: 1.0

[[[[Adv]]]]: public String [[encode]] ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String [[name]] = [[cookie]] . name ( ) ; final String [[value]] = [[cookie]] . value ( ) != null ? [[cookie]] . value ( ) : "" ; validateCookie ( [[name]] , [[value]] ) ; StringBuilder [[buf]] = new StringBuilder ( ) ; if ( [[cookie]] . wrap ( ) ) { addQuoted ( [[buf]] , [[name]] , [[value]] ) ; } else { add ( [[buf]] , [[name]] , [[value]] ) ; } if ( [[cookie]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( [[buf]] , CookieHeaderNames . MAX_AGE , [[cookie]] . maxAge ( ) ) ; Date expires = [[cookie]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String [[numerical]] ( Cookie [[biscuits]] ) { if ( [[biscuits]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String [[nom]] = [[biscuits]] . name ( ) ; final String [[assessed]] = [[biscuits]] . value ( ) != null ? [[biscuits]] . value ( ) : "" ; validateCookie ( [[nom]] , [[assessed]] ) ; StringBuilder [[campers]] = new StringBuilder ( ) ; if ( [[biscuits]] . wrap ( ) ) { addQuoted ( [[campers]] , [[nom]] , [[assessed]] ) ; } else { add ( [[campers]] , [[nom]] , [[assessed]] ) ; } if ( [[biscuits]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( [[campers]] , CookieHeaderNames . MAX_AGE , [[biscuits]] . maxAge ( ) ) ; Date expires = [[biscuits]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 633 ---------------------------------------------
Select nodes matching the specified node . --> Builds a tree of trees --> Socre: 1.0

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String path , Object node ) { return [[selectNodes]] ( path , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[oakum]] ( String path , Object node ) { return [[oakum]] ( path , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 634 ---------------------------------------------
Creates a sequence from an array . --> Parse the given palette --> Socre: 1.0

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[pasó]] ( T [ ] [[palette]] ) { return [[pasó]] ( java . util . Arrays . asList ( [[palette]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 635 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 562 / 59 / 14 / 635:  64%|██████▎   | 635/1000 [1:19:14<45:33,  7.49s/it][Succeeded / Failed / Skipped / Total] 562 / 59 / 14 / 635:  64%|██████▎   | 636/1000 [1:19:18<45:23,  7.48s/it][Succeeded / Failed / Skipped / Total] 563 / 59 / 14 / 636:  64%|██████▎   | 636/1000 [1:19:18<45:23,  7.48s/it][Succeeded / Failed / Skipped / Total] 563 / 59 / 14 / 636:  64%|██████▎   | 637/1000 [1:19:21<45:13,  7.48s/it][Succeeded / Failed / Skipped / Total] 564 / 59 / 14 / 637:  64%|██████▎   | 637/1000 [1:19:21<45:13,  7.48s/it][Succeeded / Failed / Skipped / Total] 564 / 59 / 14 / 637:  64%|██████▍   | 638/1000 [1:19:36<45:09,  7.49s/it][Succeeded / Failed / Skipped / Total] 565 / 59 / 14 / 638:  64%|██████▍   | 638/1000 [1:19:36<45:09,  7.49s/it][Succeeded / Failed / Skipped / Total] 565 / 59 / 14 / 638:  64%|██████▍   | 639/1000 [1:19:40<45:00,  7.48s/it][Succeeded / Failed / Skipped / Total] 566 / 59 / 14 / 639:  64%|██████▍   | 639/1000 [1:19:40<45:00,  7.48s/it][Succeeded / Failed / Skipped / Total] 566 / 59 / 14 / 639:  64%|██████▍   | 640/1000 [1:20:00<45:00,  7.50s/it][Succeeded / Failed / Skipped / Total] 567 / 59 / 14 / 640:  64%|██████▍   | 640/1000 [1:20:00<45:00,  7.50s/it][Succeeded / Failed / Skipped / Total] 567 / 59 / 14 / 640:  64%|██████▍   | 641/1000 [1:20:01<44:48,  7.49s/it]Create a sequence of variables from an array . --> merge the given array --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... array ) { return toSeq ( array ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[maggie]] ( T ... array ) { return toSeq ( array ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 636 ---------------------------------------------
Creates a Mapped WebSocket Acceptor . --> Mapping Accepts Accepts --> Socre: 1.0

[[[[Adv]]]]: public static < [[In]] , Out > MappedWebSocketAcceptor < [[In]] , Out > [[json]] ( Class < [[In]] > [[in]] ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , [[in]] ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , [[in]] ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .

[[[[Adv]]]]: public static < [[From]] , Out > MappedWebSocketAcceptor < [[From]] , Out > [[albums]] ( Class < [[From]] > [[between]] ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , [[between]] ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , [[between]] ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 637 ---------------------------------------------
Accepts and returns a new ORM . --> Accepts an incoming Orka stream --> Socre: 1.0

[[[[Adv]]]]: private static < In , Out > WebSocket acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new WebSocket ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[flow]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[flow]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > WebSocket acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new WebSocket ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[runoff]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[runoff]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 638 ---------------------------------------------
Sets the visibility of the given object . --> Determines if the specified object is viewing --> Socre: 1.0

[[[[Adv]]]]: static boolean [[setAccessibleWorkaround]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "[[False]]" != "[[False]]" ; } final Member [[m]] = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( [[m]] . getModifiers ( ) ) && isPackageAccess ( [[m]] . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "[[True]]" == "[[True]]" ) ; return "[[True]]" == "[[True]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean [[viewpoints]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "[[Forgeries]]" != "[[Forgeries]]" ; } final Member [[toes]] = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( [[toes]] . getModifiers ( ) ) && isPackageAccess ( [[toes]] . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "[[Befitting]]" == "[[Befitting]]" ) ; return "[[Befitting]]" == "[[Befitting]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 639 ---------------------------------------------
Gets the promotion cost . --> helper method --> Socre: 1.0

[[[[Adv]]]]: private static float [[getPrimitivePromotionCost]] ( final Class < ? > [[srcClass]] , final Class < ? > [[destClass]] ) { float [[cost]] = 0.0f ; Class < ? > [[cls]] = [[srcClass]] ; if ( ! [[cls]] . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float [[gripping]] ( final Class < ? > [[overzealous]] , final Class < ? > [[melted]] ) { float [[royalties]] = 0.0f ; Class < ? > [[tagged]] = [[overzealous]] ; if ( ! [[tagged]] . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 640 ---------------------------------------------
Convert a list to a sequence --> Calculate acidity --> Socre: 1.0

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[acidity]] ( java . util . List < T > [[inventory]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[inventory]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 641 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 568 / 59 / 14 / 641:  64%|██████▍   | 641/1000 [1:20:01<44:48,  7.49s/it][Succeeded / Failed / Skipped / Total] 568 / 59 / 14 / 641:  64%|██████▍   | 642/1000 [1:20:02<44:37,  7.48s/it][Succeeded / Failed / Skipped / Total] 569 / 59 / 14 / 642:  64%|██████▍   | 642/1000 [1:20:02<44:37,  7.48s/it][Succeeded / Failed / Skipped / Total] 569 / 59 / 14 / 642:  64%|██████▍   | 643/1000 [1:20:03<44:26,  7.47s/it][Succeeded / Failed / Skipped / Total] 570 / 59 / 14 / 643:  64%|██████▍   | 643/1000 [1:20:03<44:26,  7.47s/it][Succeeded / Failed / Skipped / Total] 570 / 59 / 14 / 643:  64%|██████▍   | 644/1000 [1:20:18<44:23,  7.48s/it][Succeeded / Failed / Skipped / Total] 571 / 59 / 14 / 644:  64%|██████▍   | 644/1000 [1:20:18<44:23,  7.48s/it][Succeeded / Failed / Skipped / Total] 571 / 59 / 14 / 644:  64%|██████▍   | 645/1000 [1:20:51<44:30,  7.52s/it][Succeeded / Failed / Skipped / Total] 571 / 60 / 14 / 645:  64%|██████▍   | 645/1000 [1:20:51<44:30,  7.52s/it][Succeeded / Failed / Skipped / Total] 571 / 60 / 14 / 645:  65%|██████▍   | 646/1000 [1:20:54<44:20,  7.51s/it][Succeeded / Failed / Skipped / Total] 572 / 60 / 14 / 646:  65%|██████▍   | 646/1000 [1:20:54<44:20,  7.51s/it][Succeeded / Failed / Skipped / Total] 572 / 60 / 14 / 646:  65%|██████▍   | 647/1000 [1:20:55<44:09,  7.51s/it][Succeeded / Failed / Skipped / Total] 573 / 60 / 14 / 647:  65%|██████▍   | 647/1000 [1:20:55<44:09,  7.51s/it][Succeeded / Failed / Skipped / Total] 573 / 60 / 14 / 647:  65%|██████▍   | 648/1000 [1:20:59<43:59,  7.50s/it][Succeeded / Failed / Skipped / Total] 574 / 60 / 14 / 648:  65%|██████▍   | 648/1000 [1:20:59<43:59,  7.50s/it][Succeeded / Failed / Skipped / Total] 574 / 60 / 14 / 648:  65%|██████▍   | 649/1000 [1:20:59<43:48,  7.49s/it]Get the total transformation cost . --> Calculate ECM --> Socre: 1.0

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] srcArgs , final Executable [[executable]] ) { final Class < ? > [ ] destArgs = [[executable]] . getParameterTypes ( ) ; final boolean [[isVarArgs]] = [[executable]] . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[ecm]] ( final Class < ? > [ ] srcArgs , final Executable [[philippa]] ) { final Class < ? > [ ] destArgs = [[philippa]] . getParameterTypes ( ) ; final boolean [[yeas]] = [[philippa]] . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 642 ---------------------------------------------
Gets the message for a specific key . --> Gets a translation --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( String key , Object ... args ) { return messagesApi . get ( lang , key , args ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String [[pour]] ( String key , Object ... args ) { return messagesApi . get ( lang , key , args ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 643 ---------------------------------------------
Get message by key --> Shortcut method for getting messages --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( List < String > [[keys]] , Object ... args ) { return messagesApi . get ( lang , [[keys]] , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[sobre]] ( List < String > [[significance]] , Object ... args ) { return messagesApi . get ( lang , [[significance]] , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 644 ---------------------------------------------
Create a database from the given parameters . --> execute shal --> Socre: 1.0

[[[[Adv]]]]: public static Database [[createFrom]] ( String [[driver]] , String url , Map < String , ? extends Object > [[config]] ) { return [[createFrom]] ( "default" , [[driver]] , url , [[config]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database [[shal]] ( String [[controller]] , String url , Map < String , ? extends Object > [[tawan]] ) { return [[shal]] ( "default" , [[controller]] , url , [[tawan]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 645 ---------------------------------------------
Gets the entity manager . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager em ( ) { Deque < EntityManager > ems = this . emStack ( "True" == "True" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager em ( ) { Deque < EntityManager > ems = this . emStack ( "True" == "True" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 646 ---------------------------------------------
Quick sort method . --> This method should be called after a compaction --> Socre: 1.0

[[[[Adv]]]]: public void [[quickSort]] ( int index , int [[lo]] , int [[hi]] , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( [[lo]] , [[hi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void [[deducting]] ( int index , int [[tho]] , int [[goodbye]] , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( [[tho]] , [[goodbye]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 647 ---------------------------------------------
Creates a new parallel Sorter . --> non - final sorting --> Socre: 1.0

[[[[Adv]]]]: public static ParallelSorter [[create]] ( Object [ ] [[arrays]] ) { Generator [[gen]] = new Generator ( ) ; [[gen]] . setArrays ( [[arrays]] ) ; return [[gen]] . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter [[establishment]] ( Object [ ] [[stalls]] ) { Generator [[sorting]] = new Generator ( ) ; [[sorting]] . setArrays ( [[stalls]] ) ; return [[sorting]] . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 648 ---------------------------------------------
Determine the cost of an object from the sourceClass and destinationClass . --> Distance between sourceClass and destinationClass and destinationClass --> Socre: 1.0

[[[[Adv]]]]: private static float [[getObjectTransformationCost]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float [[rodriguez]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 649 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 575 / 60 / 14 / 649:  65%|██████▍   | 649/1000 [1:20:59<43:48,  7.49s/it][Succeeded / Failed / Skipped / Total] 575 / 60 / 14 / 649:  65%|██████▌   | 650/1000 [1:21:00<43:37,  7.48s/it][Succeeded / Failed / Skipped / Total] 575 / 61 / 14 / 650:  65%|██████▌   | 650/1000 [1:21:00<43:37,  7.48s/it][Succeeded / Failed / Skipped / Total] 575 / 61 / 14 / 650:  65%|██████▌   | 651/1000 [1:21:00<43:25,  7.47s/it][Succeeded / Failed / Skipped / Total] 575 / 61 / 15 / 651:  65%|██████▌   | 651/1000 [1:21:00<43:25,  7.47s/it][Succeeded / Failed / Skipped / Total] 575 / 61 / 15 / 651:  65%|██████▌   | 652/1000 [1:21:08<43:18,  7.47s/it][Succeeded / Failed / Skipped / Total] 576 / 61 / 15 / 652:  65%|██████▌   | 652/1000 [1:21:08<43:18,  7.47s/it][Succeeded / Failed / Skipped / Total] 576 / 61 / 15 / 652:  65%|██████▌   | 653/1000 [1:21:10<43:08,  7.46s/it][Succeeded / Failed / Skipped / Total] 577 / 61 / 15 / 653:  65%|██████▌   | 653/1000 [1:21:10<43:08,  7.46s/it][Succeeded / Failed / Skipped / Total] 577 / 61 / 15 / 653:  65%|██████▌   | 654/1000 [1:21:11<42:57,  7.45s/it][Succeeded / Failed / Skipped / Total] 578 / 61 / 15 / 654:  65%|██████▌   | 654/1000 [1:21:11<42:57,  7.45s/it][Succeeded / Failed / Skipped / Total] 578 / 61 / 15 / 654:  66%|██████▌   | 655/1000 [1:21:13<42:47,  7.44s/it]Cast a numeric value to the specified type . --> Biliite instruction . --> Socre: 1.0

[[[[Adv]]]]: public void [[cast_numeric]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void [[bili]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[bili]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[bili]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[bili]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 650 ---------------------------------------------
Creates a form with the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: public Form < T > fill ( T value ) { if ( value == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( value ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > fill ( T value ) { if ( value == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( value ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 651 ---------------------------------------------
Emit a field instruction . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 652 ---------------------------------------------
Merge sort algorithm . --> helper method --> Socre: 1.0

[[[[Adv]]]]: public void [[mergeSort]] ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[barad]] ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 653 ---------------------------------------------
push a zero or null value --> parses an ahob --> Socre: 1.0

[[[[Adv]]]]: public void [[zero_or_null]] ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { switch ( [[type]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[aphrodisiacs]] ( Type [[gender]] ) { if ( TypeUtils . isPrimitive ( [[gender]] ) ) { switch ( [[gender]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 654 ---------------------------------------------
Unbox the given type to zero or zero . --> rolls a single type --> Socre: 1.0

[[[[Adv]]]]: public void [[unbox_or_zero]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label [[nonNull]] = make_label ( ) ; Label [[end]] = make_label ( ) ; dup ( ) ; ifnonnull ( [[nonNull]] ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( [[end]] ) ; mark ( [[nonNull]] ) ; unbox ( type ) ; mark ( [[end]] ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void [[roped]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label [[ramblers]] = make_label ( ) ; Label [[concluding]] = make_label ( ) ; dup ( ) ; ifnonnull ( [[ramblers]] ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( [[concluding]] ) ; mark ( [[ramblers]] ) ; unbox ( type ) ; mark ( [[concluding]] ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 655 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 579 / 61 / 15 / 655:  66%|██████▌   | 655/1000 [1:21:13<42:47,  7.44s/it][Succeeded / Failed / Skipped / Total] 579 / 61 / 15 / 655:  66%|██████▌   | 656/1000 [1:21:16<42:36,  7.43s/it][Succeeded / Failed / Skipped / Total] 580 / 61 / 15 / 656:  66%|██████▌   | 656/1000 [1:21:16<42:36,  7.43s/it][Succeeded / Failed / Skipped / Total] 580 / 61 / 15 / 656:  66%|██████▌   | 657/1000 [1:21:17<42:26,  7.42s/it][Succeeded / Failed / Skipped / Total] 581 / 61 / 15 / 657:  66%|██████▌   | 657/1000 [1:21:17<42:26,  7.42s/it][Succeeded / Failed / Skipped / Total] 581 / 61 / 15 / 657:  66%|██████▌   | 658/1000 [1:21:18<42:15,  7.41s/it][Succeeded / Failed / Skipped / Total] 582 / 61 / 15 / 658:  66%|██████▌   | 658/1000 [1:21:18<42:15,  7.41s/it][Succeeded / Failed / Skipped / Total] 582 / 61 / 15 / 658:  66%|██████▌   | 659/1000 [1:21:25<42:07,  7.41s/it][Succeeded / Failed / Skipped / Total] 583 / 61 / 15 / 659:  66%|██████▌   | 659/1000 [1:21:25<42:07,  7.41s/it][Succeeded / Failed / Skipped / Total] 583 / 61 / 15 / 659:  66%|██████▌   | 660/1000 [1:21:25<41:56,  7.40s/it][Succeeded / Failed / Skipped / Total] 583 / 61 / 16 / 660:  66%|██████▌   | 660/1000 [1:21:25<41:56,  7.40s/it][Succeeded / Failed / Skipped / Total] 583 / 61 / 16 / 660:  66%|██████▌   | 661/1000 [1:21:27<41:46,  7.39s/it]implements the null operator --> implements NullPoitter --> Socre: 1.0

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label [[oneNull]] , Label [[bothNull]] ) { e . dup2 ( ) ; Label [[nonNull]] = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( [[nonNull]] ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( [[bothNull]] ) ; e . mark ( [[nonNull]] ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( [[oneNull]] ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label [[ust]] , Label [[dictator]] ) { e . dup2 ( ) ; Label [[rightness]] = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( [[rightness]] ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( [[dictator]] ) ; e . mark ( [[rightness]] ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( [[ust]] ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 656 ---------------------------------------------
Loads the argument at the given index . --> Exchange to xchange --> Socre: 1.0

[[[[Adv]]]]: public void [[load_arg]] ( int [[index]] ) { load_local ( state . argumentTypes [ [[index]] ] , state . localOffset + skipArgs ( [[index]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void [[xchange]] ( int [[marker]] ) { load_local ( state . argumentTypes [ [[marker]] ] , state . localOffset + skipArgs ( [[marker]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 657 ---------------------------------------------
Finds all methods in the super class and interfaces . --> beginning with gregory --> Socre: 1.0

[[[[Adv]]]]: public static void [[getMethods]] ( Class [[superclass]] , Class [ ] [[interfaces]] , List [[methods]] ) { [[getMethods]] ( [[superclass]] , [[interfaces]] , [[methods]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void [[fledgling]] ( Class [[supports]] , Class [ ] [[gregory]] , List [[how]] ) { [[fledgling]] ( [[supports]] , [[gregory]] , [[how]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 658 ---------------------------------------------
Invokes the wrapped method . --> documentation inherited from class --> Socre: 1.0

[[[[Adv]]]]: public Object [[invoke]] ( Object [[obj]] , Object [ ] [[args]] ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , [[obj]] , [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object [[cite]] ( Object [[banns]] , Object [ ] [[smuggling]] ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , [[banns]] , [[smuggling]] ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 659 ---------------------------------------------
Filter the given constructors . --> Zhang factory methods --> Socre: 1.0

[[[[Adv]]]]: protected void [[filterConstructors]] ( Class sc , List [[constructors]] ) { CollectionUtils . filter ( [[constructors]] , new VisibilityPredicate ( sc , "True" == "True" ) ) ; if ( [[constructors]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void [[zhang]] ( Class sc , List [[producers]] ) { CollectionUtils . filter ( [[producers]] , new VisibilityPredicate ( sc , "True" == "True" ) ) ; if ( [[producers]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 660 ---------------------------------------------
Gets the field with the given names . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 661 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 583 / 62 / 16 / 661:  66%|██████▌   | 661/1000 [1:21:27<41:46,  7.39s/it][Succeeded / Failed / Skipped / Total] 583 / 62 / 16 / 661:  66%|██████▌   | 662/1000 [1:21:27<41:35,  7.38s/it][Succeeded / Failed / Skipped / Total] 583 / 62 / 17 / 662:  66%|██████▌   | 662/1000 [1:21:27<41:35,  7.38s/it][Succeeded / Failed / Skipped / Total] 583 / 62 / 17 / 662:  66%|██████▋   | 663/1000 [1:21:33<41:27,  7.38s/it][Succeeded / Failed / Skipped / Total] 584 / 62 / 17 / 663:  66%|██████▋   | 663/1000 [1:21:33<41:27,  7.38s/it][Succeeded / Failed / Skipped / Total] 584 / 62 / 17 / 663:  66%|██████▋   | 664/1000 [1:21:33<41:16,  7.37s/it][Succeeded / Failed / Skipped / Total] 584 / 62 / 18 / 664:  66%|██████▋   | 664/1000 [1:21:33<41:16,  7.37s/it][Succeeded / Failed / Skipped / Total] 584 / 62 / 18 / 664:  66%|██████▋   | 665/1000 [1:21:47<41:12,  7.38s/it][Succeeded / Failed / Skipped / Total] 585 / 62 / 18 / 665:  66%|██████▋   | 665/1000 [1:21:47<41:12,  7.38s/it][Succeeded / Failed / Skipped / Total] 585 / 62 / 18 / 665:  67%|██████▋   | 666/1000 [1:21:49<41:02,  7.37s/it][Succeeded / Failed / Skipped / Total] 586 / 62 / 18 / 666:  67%|██████▋   | 666/1000 [1:21:49<41:02,  7.37s/it][Succeeded / Failed / Skipped / Total] 586 / 62 / 18 / 666:  67%|██████▋   | 667/1000 [1:21:52<40:52,  7.37s/it][Succeeded / Failed / Skipped / Total] 587 / 62 / 18 / 667:  67%|██████▋   | 667/1000 [1:21:52<40:52,  7.37s/it][Succeeded / Failed / Skipped / Total] 587 / 62 / 18 / 667:  67%|██████▋   | 668/1000 [1:22:06<40:48,  7.37s/it][Succeeded / Failed / Skipped / Total] 588 / 62 / 18 / 668:  67%|██████▋   | 668/1000 [1:22:06<40:48,  7.37s/it][Succeeded / Failed / Skipped / Total] 588 / 62 / 18 / 668:  67%|██████▋   | 669/1000 [1:22:07<40:37,  7.37s/it][Succeeded / Failed / Skipped / Total] 589 / 62 / 18 / 669:  67%|██████▋   | 669/1000 [1:22:07<40:37,  7.37s/it][Succeeded / Failed / Skipped / Total] 589 / 62 / 18 / 669:  67%|██████▋   | 670/1000 [1:22:29<40:37,  7.39s/it][Succeeded / Failed / Skipped / Total] 590 / 62 / 18 / 670:  67%|██████▋   | 670/1000 [1:22:29<40:37,  7.39s/it][Succeeded / Failed / Skipped / Total] 590 / 62 / 18 / 670:  67%|██████▋   | 671/1000 [1:22:29<40:26,  7.38s/it]Performs a timeout after the given amount of time . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > stage , final long amount , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > timeout ( final CompletionStage < A > stage , final long amount , final TimeUnit unit ) { requireNonNull ( stage , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> stage ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 662 ---------------------------------------------
Calculates the cardinality of the value --> [[[SKIPPED]]]

[[[[Adv]]]]: public int cardinality ( ) { int w = value ; int c = 0 ; while ( w != 0 ) { c += T [ w & 255 ] ; w >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 663 ---------------------------------------------
Add a method . --> Set complements of complements --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Method [[method]] ) { [[add]] ( ReflectUtils . getSignature ( [[method]] ) , ReflectUtils . getExceptionTypes ( [[method]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[complements]] ( Method [[shaping]] ) { [[complements]] ( ReflectUtils . getSignature ( [[shaping]] ) , ReflectUtils . getExceptionTypes ( [[shaping]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 664 ---------------------------------------------
Finds methods in the given array . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 665 ---------------------------------------------
Sets the super class . --> Methode de de la depeche --> Socre: 1.0

[[[[Adv]]]]: public void [[setSuperclass]] ( Class [[superclass]] ) { if ( [[superclass]] != null && [[superclass]] . equals ( Object . class ) ) { [[superclass]] = null ; } this . [[superclass]] = [[superclass]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[undervalued]] ( Class [[depeche]] ) { if ( [[depeche]] != null && [[depeche]] . equals ( Object . class ) ) { [[depeche]] = null ; } this . [[lamé]] = [[depeche]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 666 ---------------------------------------------
Reads a string . --> Suppress a file --> Socre: 1.0

[[[[Adv]]]]: public static String [[readString]] ( final Path [[path]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[path]] , StandardCharsets . UTF_8 ) ) { StringWriter [[writer]] = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[depressions]] ( final Path [[via]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[via]] , StandardCharsets . UTF_8 ) ) { StringWriter [[literary]] = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 667 ---------------------------------------------
Sets the naming policy . --> Set alfrescorescovers --> Socre: 1.0

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . [[namingPolicy]] = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[alfresco]] ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . [[nick]] = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 668 ---------------------------------------------
Resolve child path . --> Methode pathstone --> Socre: 1.0

[[[[Adv]]]]: public static Path [[resolve]] ( final Path [[base]] , String [[child]] ) { if ( StringUtil . startsWithChar ( [[child]] , File . separatorChar ) ) { [[child]] = [[child]] . substring ( 1 ) ; } return [[base]] . resolve ( [[child]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path [[mend]] ( final Path [[keystone]] , String [[daughter]] ) { if ( StringUtil . startsWithChar ( [[daughter]] , File . separatorChar ) ) { [[daughter]] = [[daughter]] . substring ( 1 ) ; } return [[keystone]] . resolve ( [[daughter]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 669 ---------------------------------------------
Start a connect request . --> The username of username --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[username]] ( final String [[blanco]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[blanco]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 670 ---------------------------------------------
Create a request with the given method and destination . --> Specify mode and mode --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[create]] ( final String [[method]] , final String [[destination]] ) { return new HttpRequest ( ) . [[method]] ( [[method]] . toUpperCase ( ) ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest [[mods]] ( final String [[mode]] , final String [[purposes]] ) { return new HttpRequest ( ) . [[mode]] ( [[mode]] . toUpperCase ( ) ) . set ( [[purposes]] ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 671 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 591 / 62 / 18 / 671:  67%|██████▋   | 671/1000 [1:22:29<40:26,  7.38s/it][Succeeded / Failed / Skipped / Total] 591 / 62 / 18 / 671:  67%|██████▋   | 672/1000 [1:22:30<40:16,  7.37s/it][Succeeded / Failed / Skipped / Total] 592 / 62 / 18 / 672:  67%|██████▋   | 672/1000 [1:22:30<40:16,  7.37s/it][Succeeded / Failed / Skipped / Total] 592 / 62 / 18 / 672:  67%|██████▋   | 673/1000 [1:22:31<40:05,  7.36s/it]Process an array element . --> called by code --> Socre: 1.0

[[[[Adv]]]]: public static void [[process_array]] ( CodeEmitter [[e]] , Type type , ProcessArrayCallback callback ) { Type [[componentType]] = TypeUtils . getComponentType ( type ) ; Local [[array]] = [[e]] . make_local ( ) ; Local loopvar = [[e]] . make_local ( Type . INT_TYPE ) ; Label loopbody = [[e]] . make_label ( ) ; Label [[checkloop]] = [[e]] . make_label ( ) ; [[e]] . store_local ( [[array]] ) ; [[e]] . push ( 0 ) ; [[e]] . store_local ( loopvar ) ; [[e]] . goTo ( [[checkloop]] ) ; [[e]] . mark ( loopbody ) ; [[e]] . load_local ( [[array]] ) ; [[e]] . load_local ( loopvar ) ; [[e]] . array_load ( [[componentType]] ) ; callback . processElement ( [[componentType]] ) ; [[e]] . iinc ( loopvar , 1 ) ; [[e]] . mark ( [[checkloop]] ) ; [[e]] . load_local ( loopvar ) ; [[e]] . load_local ( [[array]] ) ; [[e]] . arraylength ( ) ; [[e]] . if_icmp ( [[e]] . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void [[dough]] ( CodeEmitter [[griffiths]] , Type type , ProcessArrayCallback callback ) { Type [[rae]] = TypeUtils . getComponentType ( type ) ; Local [[range]] = [[griffiths]] . make_local ( ) ; Local loopvar = [[griffiths]] . make_local ( Type . INT_TYPE ) ; Label loopbody = [[griffiths]] . make_label ( ) ; Label [[deakin]] = [[griffiths]] . make_label ( ) ; [[griffiths]] . store_local ( [[range]] ) ; [[griffiths]] . push ( 0 ) ; [[griffiths]] . store_local ( loopvar ) ; [[griffiths]] . goTo ( [[deakin]] ) ; [[griffiths]] . mark ( loopbody ) ; [[griffiths]] . load_local ( [[range]] ) ; [[griffiths]] . load_local ( loopvar ) ; [[griffiths]] . array_load ( [[rae]] ) ; callback . processElement ( [[rae]] ) ; [[griffiths]] . iinc ( loopvar , 1 ) ; [[griffiths]] . mark ( [[deakin]] ) ; [[griffiths]] . load_local ( loopvar ) ; [[griffiths]] . load_local ( [[range]] ) ; [[griffiths]] . arraylength ( ) ; [[griffiths]] . if_icmp ( [[griffiths]] . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 672 ---------------------------------------------
Register converter . --> Register the conversion for a class --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > [[Formatters]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object [[source]] , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A [[a]] = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( [[a]] , ( T ) [[source]] , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , [[source]] , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object [[source]] , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A [[a]] = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( [[a]] , ( String ) [[source]] , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , [[source]] , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > [[Hooda]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object [[backgrounds]] , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A [[latter]] = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( [[latter]] , ( T ) [[backgrounds]] , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , [[backgrounds]] , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object [[backgrounds]] , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A [[latter]] = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( [[latter]] , ( String ) [[backgrounds]] , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , [[backgrounds]] , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 673 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 593 / 62 / 18 / 673:  67%|██████▋   | 673/1000 [1:22:31<40:05,  7.36s/it][Succeeded / Failed / Skipped / Total] 593 / 62 / 18 / 673:  67%|██████▋   | 674/1000 [1:22:31<39:54,  7.35s/it][Succeeded / Failed / Skipped / Total] 594 / 62 / 18 / 674:  67%|██████▋   | 674/1000 [1:22:31<39:54,  7.35s/it][Succeeded / Failed / Skipped / Total] 594 / 62 / 18 / 674:  68%|██████▊   | 675/1000 [1:22:43<39:49,  7.35s/it][Succeeded / Failed / Skipped / Total] 595 / 62 / 18 / 675:  68%|██████▊   | 675/1000 [1:22:43<39:49,  7.35s/it][Succeeded / Failed / Skipped / Total] 595 / 62 / 18 / 675:  68%|██████▊   | 676/1000 [1:22:44<39:39,  7.34s/it][Succeeded / Failed / Skipped / Total] 596 / 62 / 18 / 676:  68%|██████▊   | 676/1000 [1:22:44<39:39,  7.34s/it][Succeeded / Failed / Skipped / Total] 596 / 62 / 18 / 676:  68%|██████▊   | 677/1000 [1:22:50<39:31,  7.34s/it][Succeeded / Failed / Skipped / Total] 597 / 62 / 18 / 677:  68%|██████▊   | 677/1000 [1:22:50<39:31,  7.34s/it][Succeeded / Failed / Skipped / Total] 597 / 62 / 18 / 677:  68%|██████▊   | 678/1000 [1:22:56<39:23,  7.34s/it][Succeeded / Failed / Skipped / Total] 598 / 62 / 18 / 678:  68%|██████▊   | 678/1000 [1:22:56<39:23,  7.34s/it][Succeeded / Failed / Skipped / Total] 598 / 62 / 18 / 678:  68%|██████▊   | 679/1000 [1:23:03<39:15,  7.34s/it][Succeeded / Failed / Skipped / Total] 599 / 62 / 18 / 679:  68%|██████▊   | 679/1000 [1:23:03<39:15,  7.34s/it][Succeeded / Failed / Skipped / Total] 599 / 62 / 18 / 679:  68%|██████▊   | 680/1000 [1:23:03<39:05,  7.33s/it][Succeeded / Failed / Skipped / Total] 600 / 62 / 18 / 680:  68%|██████▊   | 680/1000 [1:23:03<39:05,  7.33s/it][Succeeded / Failed / Skipped / Total] 600 / 62 / 18 / 680:  68%|██████▊   | 681/1000 [1:23:06<38:55,  7.32s/it][Succeeded / Failed / Skipped / Total] 601 / 62 / 18 / 681:  68%|██████▊   | 681/1000 [1:23:06<38:55,  7.32s/it][Succeeded / Failed / Skipped / Total] 602 / 62 / 18 / 682:  68%|██████▊   | 682/1000 [1:23:06<38:44,  7.31s/it][Succeeded / Failed / Skipped / Total] 602 / 62 / 18 / 682:  68%|██████▊   | 683/1000 [1:23:08<38:35,  7.30s/it]Create a HTTP GET request --> The requested objectives --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[achieved]] ( final String [[objectives]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[objectives]] ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 674 ---------------------------------------------
Creates a HTTP PATCH request --> Quick fix for PUT --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[fixes]] ( final String [[blanco]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[blanco]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 675 ---------------------------------------------
Create a DELETE request --> removes the specified aim --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[abolish]] ( final String [[aim]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[aim]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 676 ---------------------------------------------
Request a TRACE request --> Sets the breadcrumbs --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[breadcrumbs]] ( final String [[intents]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[intents]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 677 ---------------------------------------------
Create OPTIONS request --> Create a new HttpRequest instance with the selective filtering --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[options]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest [[substitutes]] ( final String [[selective]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[selective]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 678 ---------------------------------------------
Start HTTP POST request --> Checks to see if allotment is allowed --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[allotment]] ( final String [[beneficiaries]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[beneficiaries]] ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 679 ---------------------------------------------
Sets the request path . --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[path]] ( String [[path]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[chemin]] ( String [[lines]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 680 ---------------------------------------------
Sets the cookies in the request . --> Convenience method for setting ARCHO cookie --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[REPLACEME0]] ( final Cookie ... [[REPLACEME0]] ) { if ( [[REPLACEME0]] . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean [[first]] = "[[True]]" == "[[True]]" ; for ( Cookie [[cookie]] : [[REPLACEME0]] ) { Integer [[maxAge]] = [[cookie]] . getMaxAge ( ) ; if ( [[maxAge]] != null && [[maxAge]] . intValue ( ) == 0 ) { continue ; } if ( ! [[first]] ) { cookieString . append ( "; " ) ; } [[first]] = "False" != "False" ; cookieString . append ( [[cookie]] . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( [[cookie]] . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest [[ARCHAEOPTERYX]] ( final Cookie ... [[ARCHAEOPTERYX]] ) { if ( [[ARCHAEOPTERYX]] . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean [[primera]] = "[[Loyal]]" == "[[Loyal]]" ; for ( Cookie [[meringues]] : [[ARCHAEOPTERYX]] ) { Integer [[glassy]] = [[meringues]] . getMaxAge ( ) ; if ( [[glassy]] != null && [[glassy]] . intValue ( ) == 0 ) { continue ; } if ( ! [[primera]] ) { cookieString . append ( "; " ) ; } [[primera]] = "False" != "False" ; cookieString . append ( [[meringues]] . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( [[meringues]] . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 681 ---------------------------------------------
Adds a query parameter to the request . --> Register a view of the specified milestones --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[query]] ( final String name1 , final Object [[value1]] , final Object ... [[parameters]] ) { [[query]] ( name1 , [[value1]] == null ? null : [[value1]] . toString ( ) ) ; for ( int [[i]] = 0 ; [[i]] < [[parameters]] . length ; [[i]] += 2 ) { String name = [[parameters]] [ [[i]] ] . toString ( ) ; String [[value]] = [[parameters]] [ [[i]] + 1 ] . toString ( ) ; [[query]] . add ( name , [[value]] ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest [[viewed]] ( final String name1 , final Object [[yoshida]] , final Object ... [[milestones]] ) { [[viewed]] ( name1 , [[yoshida]] == null ? null : [[yoshida]] . toString ( ) ) ; for ( int [[jes]] = 0 ; [[jes]] < [[milestones]] . length ; [[jes]] += 2 ) { String name = [[milestones]] [ [[jes]] ] . toString ( ) ; String [[appreciated]] = [[milestones]] [ [[jes]] + 1 ] . toString ( ) ; [[viewed]] . add ( name , [[appreciated]] ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 682 ---------------------------------------------
Add query map . --> Add a consultation request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[query]] ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > entry : queryMap . entrySet ( ) ) { [[query]] . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest [[consultation]] ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > entry : queryMap . entrySet ( ) ) { [[consultation]] . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 683 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 603 / 62 / 18 / 683:  68%|██████▊   | 683/1000 [1:23:08<38:35,  7.30s/it][Succeeded / Failed / Skipped / Total] 604 / 62 / 18 / 684:  68%|██████▊   | 684/1000 [1:23:10<38:25,  7.30s/it][Succeeded / Failed / Skipped / Total] 604 / 62 / 18 / 684:  68%|██████▊   | 685/1000 [1:23:13<38:16,  7.29s/it][Succeeded / Failed / Skipped / Total] 605 / 62 / 18 / 685:  68%|██████▊   | 685/1000 [1:23:13<38:16,  7.29s/it][Succeeded / Failed / Skipped / Total] 606 / 62 / 18 / 686:  69%|██████▊   | 686/1000 [1:23:14<38:06,  7.28s/it][Succeeded / Failed / Skipped / Total] 606 / 62 / 18 / 686:  69%|██████▊   | 687/1000 [1:23:20<37:58,  7.28s/it][Succeeded / Failed / Skipped / Total] 607 / 62 / 18 / 687:  69%|██████▊   | 687/1000 [1:23:20<37:58,  7.28s/it][Succeeded / Failed / Skipped / Total] 608 / 62 / 18 / 688:  69%|██████▉   | 688/1000 [1:23:25<37:49,  7.28s/it][Succeeded / Failed / Skipped / Total] 608 / 62 / 18 / 688:  69%|██████▉   | 689/1000 [1:23:37<37:44,  7.28s/it][Succeeded / Failed / Skipped / Total] 609 / 62 / 18 / 689:  69%|██████▉   | 689/1000 [1:23:37<37:44,  7.28s/it][Succeeded / Failed / Skipped / Total] 609 / 62 / 18 / 689:  69%|██████▉   | 690/1000 [1:23:44<37:37,  7.28s/it][Succeeded / Failed / Skipped / Total] 610 / 62 / 18 / 690:  69%|██████▉   | 690/1000 [1:23:44<37:37,  7.28s/it][Succeeded / Failed / Skipped / Total] 610 / 62 / 18 / 690:  69%|██████▉   | 691/1000 [1:23:54<37:31,  7.29s/it][Succeeded / Failed / Skipped / Total] 611 / 62 / 18 / 691:  69%|██████▉   | 691/1000 [1:23:54<37:31,  7.29s/it][Succeeded / Failed / Skipped / Total] 611 / 62 / 18 / 691:  69%|██████▉   | 692/1000 [1:23:58<37:22,  7.28s/it][Succeeded / Failed / Skipped / Total] 612 / 62 / 18 / 692:  69%|██████▉   | 692/1000 [1:23:58<37:22,  7.28s/it][Succeeded / Failed / Skipped / Total] 612 / 62 / 18 / 692:  69%|██████▉   | 693/1000 [1:23:58<37:11,  7.27s/it]Gets the query string . --> Retrieves the daltons --> Socre: 1.0

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[daltons]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 684 ---------------------------------------------
Returns the host URL . --> Return the JRE keyword --> Socre: 1.0

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand [[url]] = new StringBand ( 8 ) ; if ( protocol != null ) { [[url]] . append ( protocol ) ; [[url]] . append ( "://" ) ; } if ( host != null ) { [[url]] . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { [[url]] . append ( ' ' ) ; [[url]] . append ( port ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[jürgen]] ( ) { StringBand [[keyword]] = new StringBand ( 8 ) ; if ( protocol != null ) { [[keyword]] . append ( protocol ) ; [[keyword]] . append ( "://" ) ; } if ( host != null ) { [[keyword]] . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { [[keyword]] . append ( ' ' ) ; [[keyword]] . append ( port ) ; } return [[keyword]] . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 685 ---------------------------------------------
Set the query string . --> Set the referrer URL --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest queryString ( final String [[queryString]] , final boolean decode ) { this . [[query]] = HttpUtil . parseQuery ( queryString , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest queryString ( final String [[ravin]] , final boolean decode ) { this . [[refer]] = HttpUtil . parseQuery ( queryString , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 686 ---------------------------------------------
Sets the host header . --> Adds a lotus --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String [[hostPort]] = this . host ; if ( port != Defaults . DEFAULT_PORT ) { [[hostPort]] += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , [[hostPort]] ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[lotus]] ( ) { String [[carmelo]] = this . host ; if ( port != Defaults . DEFAULT_PORT ) { [[carmelo]] += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , [[carmelo]] ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 687 ---------------------------------------------
Returns the buffer . --> Generate headliner --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Buffer [[buffer]] ( final boolean [[fullRequest]] ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer [[headliner]] ( final boolean [[naoko]] ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 688 ---------------------------------------------
Execute and receive response . --> Send Hydrogen and receive --> Socre: 1.0

[[[[Adv]]]]: public < [[R]] > [[R]] sendAndReceive ( final Function < HttpResponse , [[R]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < [[phosphorus]] > [[phosphorus]] sendAndReceive ( final Function < HttpResponse , [[phosphorus]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 689 ---------------------------------------------
Create a PUT request --> Render the objectives --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[render]] ( final String [[objectives]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[objectives]] ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 690 ---------------------------------------------
Sets the host . --> Set receipt for receipt --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[host]] ( final String [[host]] ) { this . [[host]] = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[receipt]] ( final String [[organizes]] ) { this . [[guest]] = [[receipt]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[receipt]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 691 ---------------------------------------------
Remove range . --> Prevents two handlers --> Socre: 1.0

[[[[Adv]]]]: static Handler [[removeRange]] ( final Handler firstHandler , final Label start , final Label [[end]] ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[removeRange]] ( firstHandler . nextHandler , start , [[end]] ) ; } int [[handlerStart]] = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int [[rangeEnd]] = [[end]] == null ? Integer . MAX_VALUE : [[end]] . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler [[objections]] ( final Handler firstHandler , final Label start , final Label [[finishes]] ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[objections]] ( firstHandler . nextHandler , start , [[finishes]] ) ; } int [[methamphetamine]] = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int [[neuf]] = [[finishes]] == null ? Integer . MAX_VALUE : [[finishes]] . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 692 ---------------------------------------------
Returns the length of the exception table . --> helper method to get longitude --> Socre: 1.0

[[[[Adv]]]]: static int [[getExceptionTableLength]] ( final Handler [[firstHandler]] ) { int [[length]] = 0 ; Handler [[handler]] = [[firstHandler]] ; while ( [[handler]] != null ) { [[length]] ++ ; [[handler]] = [[handler]] . nextHandler ; } return [[length]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int [[benedetta]] ( final Handler [[relative]] ) { int [[longitude]] = 0 ; Handler [[manipulate]] = [[relative]] ; while ( [[manipulate]] != null ) { [[longitude]] ++ ; [[manipulate]] = [[manipulate]] . nextHandler ; } return [[longitude]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 693 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 613 / 62 / 18 / 693:  69%|██████▉   | 693/1000 [1:23:58<37:11,  7.27s/it][Succeeded / Failed / Skipped / Total] 613 / 62 / 18 / 693:  69%|██████▉   | 694/1000 [1:24:00<37:02,  7.26s/it][Succeeded / Failed / Skipped / Total] 614 / 62 / 18 / 694:  69%|██████▉   | 694/1000 [1:24:00<37:02,  7.26s/it][Succeeded / Failed / Skipped / Total] 614 / 62 / 18 / 694:  70%|██████▉   | 695/1000 [1:24:02<36:52,  7.26s/it][Succeeded / Failed / Skipped / Total] 615 / 62 / 18 / 695:  70%|██████▉   | 695/1000 [1:24:02<36:52,  7.26s/it][Succeeded / Failed / Skipped / Total] 615 / 62 / 18 / 695:  70%|██████▉   | 696/1000 [1:24:07<36:44,  7.25s/it][Succeeded / Failed / Skipped / Total] 616 / 62 / 18 / 696:  70%|██████▉   | 696/1000 [1:24:07<36:44,  7.25s/it][Succeeded / Failed / Skipped / Total] 616 / 62 / 18 / 696:  70%|██████▉   | 697/1000 [1:24:12<36:36,  7.25s/it][Succeeded / Failed / Skipped / Total] 617 / 62 / 18 / 697:  70%|██████▉   | 697/1000 [1:24:12<36:36,  7.25s/it][Succeeded / Failed / Skipped / Total] 617 / 62 / 18 / 697:  70%|██████▉   | 698/1000 [1:24:17<36:28,  7.25s/it][Succeeded / Failed / Skipped / Total] 618 / 62 / 18 / 698:  70%|██████▉   | 698/1000 [1:24:17<36:28,  7.25s/it][Succeeded / Failed / Skipped / Total] 618 / 62 / 18 / 698:  70%|██████▉   | 699/1000 [1:24:21<36:19,  7.24s/it][Succeeded / Failed / Skipped / Total] 619 / 62 / 18 / 699:  70%|██████▉   | 699/1000 [1:24:21<36:19,  7.24s/it][Succeeded / Failed / Skipped / Total] 619 / 62 / 18 / 699:  70%|███████   | 700/1000 [1:24:38<36:16,  7.25s/it][Succeeded / Failed / Skipped / Total] 620 / 62 / 18 / 700:  70%|███████   | 700/1000 [1:24:38<36:16,  7.25s/it][Succeeded / Failed / Skipped / Total] 620 / 62 / 18 / 700:  70%|███████   | 701/1000 [1:24:42<36:07,  7.25s/it][Succeeded / Failed / Skipped / Total] 621 / 62 / 18 / 701:  70%|███████   | 701/1000 [1:24:42<36:07,  7.25s/it][Succeeded / Failed / Skipped / Total] 621 / 62 / 18 / 701:  70%|███████   | 702/1000 [1:25:11<36:10,  7.28s/it]Sets the basic authentication header . --> Sets the HTTP headers for the request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String [[username]] , final String [[password]] ) { if ( [[username]] != null && [[password]] != null ) { String [[data]] = [[username]] . concat ( StringPool . COLON ) . concat ( [[password]] ) ; String [[base64]] = Base64 . encodeToString ( [[data]] ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + [[base64]] ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[slowest]] ( final String [[users]] , final String [[passwords]] ) { if ( [[users]] != null && [[passwords]] != null ) { String [[database]] = [[users]] . concat ( StringPool . COLON ) . concat ( [[passwords]] ) ; String [[chatted]] = Base64 . encodeToString ( [[database]] ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + [[chatted]] ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 694 ---------------------------------------------
Collect a list of action runs . --> Generates a sorted sorted list of actions --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[swill]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 695 ---------------------------------------------
Sets a simple property . --> removes the setter method --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty [[bp]] , final Object [[value]] ) { Setter [[setter]] = [[bp]] . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[exorcise]] ( final BeanProperty [[ps]] , final Object [[deserving]] ) { Setter [[constructor]] = [[ps]] . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 696 ---------------------------------------------
Collects all action filters . --> Performs a privilege filter --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > filterValues = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( filterValues ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[privilege]] ( ) { final Collection < ? extends ActionFilter > filterValues = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( filterValues ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 697 ---------------------------------------------
Collect all action results . --> Sort the cashiers --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[cashier]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 698 ---------------------------------------------
Extract the property name from the property name --> removes lemma --> Socre: 1.0

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String [[propertyName]] ) { int [[ndx]] = StringUtil . indexOfChars ( [[propertyName]] , INDEX_CHARS ) ; if ( [[ndx]] == - 1 ) { return [[propertyName]] ; } return [[propertyName]] . substring ( 0 , [[ndx]] ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[monterey]] ( final String [[luisa]] ) { int [[lifesaving]] = StringUtil . indexOfChars ( [[luisa]] , INDEX_CHARS ) ; if ( [[lifesaving]] == - 1 ) { return [[luisa]] ; } return [[luisa]] . substring ( 0 , [[lifesaving]] ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 699 ---------------------------------------------
Sets the object reference . --> Store artefacts in the secret --> Socre: 1.0

[[[[Adv]]]]: public void [[setObjectReference]] ( final String [[name]] , final Object [[object]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[name]] , [[object]] ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[secretarial]] ( final String [[appointments]] , final Object [[artefacts]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[appointments]] , [[artefacts]] ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 700 ---------------------------------------------
Resolves all bridge bridges . --> Private method for testing --> Socre: 1.0

[[[[Adv]]]]: public Map [[resolveAll]] ( ) { Map [[resolved]] = new HashMap ( ) ; for ( Iterator [[entryIter]] = declToBridge . entrySet ( ) . iterator ( ) ; [[entryIter]] . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) [[entryIter]] . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set [[bridges]] = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return [[resolved]] ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[bridges]] , [[resolved]] ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return [[resolved]] ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map [[junta]] ( ) { Map [[address]] = new HashMap ( ) ; for ( Iterator [[amnesia]] = declToBridge . entrySet ( ) . iterator ( ) ; [[amnesia]] . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) [[amnesia]] . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set [[beachhead]] = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return [[address]] ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[beachhead]] , [[address]] ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return [[address]] ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 701 ---------------------------------------------
Get object reference by name . --> Gets the sponsor with the given nickname --> Socre: 1.0

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String [[name]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[name]] ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[sponsored]] ( final String [[patronymic]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[patronymic]] ) ; }
[[[[Nl]]]]: Returns object reference .
[Succeeded / Failed / Skipped / Total] 621 / 63 / 18 / 702:  70%|███████   | 702/1000 [1:25:11<36:10,  7.28s/it][Succeeded / Failed / Skipped / Total] 621 / 63 / 18 / 702:  70%|███████   | 703/1000 [1:25:14<36:00,  7.27s/it][Succeeded / Failed / Skipped / Total] 622 / 63 / 18 / 703:  70%|███████   | 703/1000 [1:25:14<36:00,  7.27s/it][Succeeded / Failed / Skipped / Total] 622 / 63 / 18 / 703:  70%|███████   | 704/1000 [1:25:29<35:56,  7.29s/it][Succeeded / Failed / Skipped / Total] 623 / 63 / 18 / 704:  70%|███████   | 704/1000 [1:25:29<35:56,  7.29s/it][Succeeded / Failed / Skipped / Total] 623 / 63 / 18 / 704:  70%|███████   | 705/1000 [1:25:34<35:48,  7.28s/it][Succeeded / Failed / Skipped / Total] 623 / 64 / 18 / 705:  70%|███████   | 705/1000 [1:25:34<35:48,  7.28s/it][Succeeded / Failed / Skipped / Total] 623 / 64 / 18 / 705:  71%|███████   | 706/1000 [1:25:35<35:38,  7.27s/it][Succeeded / Failed / Skipped / Total] 624 / 64 / 18 / 706:  71%|███████   | 706/1000 [1:25:35<35:38,  7.27s/it][Succeeded / Failed / Skipped / Total] 624 / 64 / 18 / 706:  71%|███████   | 707/1000 [1:25:45<35:32,  7.28s/it][Succeeded / Failed / Skipped / Total] 625 / 64 / 18 / 707:  71%|███████   | 707/1000 [1:25:45<35:32,  7.28s/it][Succeeded / Failed / Skipped / Total] 625 / 64 / 18 / 707:  71%|███████   | 708/1000 [1:25:46<35:22,  7.27s/it][Succeeded / Failed / Skipped / Total] 626 / 64 / 18 / 708:  71%|███████   | 708/1000 [1:25:46<35:22,  7.27s/it][Succeeded / Failed / Skipped / Total] 626 / 64 / 18 / 708:  71%|███████   | 709/1000 [1:25:47<35:12,  7.26s/it][Succeeded / Failed / Skipped / Total] 626 / 65 / 18 / 709:  71%|███████   | 709/1000 [1:25:47<35:12,  7.26s/it][Succeeded / Failed / Skipped / Total] 626 / 65 / 18 / 709:  71%|███████   | 710/1000 [1:25:50<35:03,  7.25s/it]--------------------------------------------- Result 702 ---------------------------------------------
Register a formatter for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 703 ---------------------------------------------
Find table descriptor by column ref . --> Find accessor by property name --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String [[columnRef]] ) { for ( Map . Entry < String , TableRefData > [[entry]] : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = [[entry]] . getValue ( ) . desc ; if ( ded . findByPropertyName ( [[columnRef]] ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[foretell]] ( final String [[lohse]] ) { for ( Map . Entry < String , TableRefData > [[accesses]] : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = [[accesses]] . getValue ( ) . desc ; if ( ded . findByPropertyName ( [[lohse]] ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 704 ---------------------------------------------
Collect all action interceptors . --> Compute the excellency of the interceptor --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[excellency]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 705 ---------------------------------------------
Create a HEAD request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest head ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest head ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 706 ---------------------------------------------
Returns the table alias for the given table reference . --> Calculate Cajole --> Socre: 1.0

[[[[Adv]]]]: public String [[getTableAlias]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( [[tableRef]] ) ; return [[t]] == null ? null : [[t]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[cajole]] ( final String [[achieves]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[tuna]] = tableRefs . get ( [[achieves]] ) ; return [[tuna]] == null ? null : [[tuna]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 707 ---------------------------------------------
Lookup an object reference . --> returns the summa of the sum of the sums of money --> Socre: 1.0

[[[[Adv]]]]: public Object [[lookupObject]] ( final String [[ref]] ) { Object [[value]] = getObjectReference ( [[ref]] ) ; if ( [[value]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[ref]] ) ; } return [[value]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[summa]] ( final String [[englishman]] ) { Object [[valuation]] = getObjectReference ( [[englishman]] ) ; if ( [[valuation]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[englishman]] ) ; } return [[valuation]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 708 ---------------------------------------------
Helper method to serialize a value . --> Serialize the extent --> Socre: 1.0

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext jsonContext , final T [[value]] ) { if ( jsonContext . pushValue ( [[value]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext jsonContext , final T [[extent]] ) { if ( jsonContext . pushValue ( [[extent]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 709 ---------------------------------------------
Pops the given EntityManager from the stack . --> [[[FAILED]]]

[[[[Adv]]]]: void pushOrPopEm ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void pushOrPopEm ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 710 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 627 / 65 / 18 / 710:  71%|███████   | 710/1000 [1:25:50<35:03,  7.25s/it][Succeeded / Failed / Skipped / Total] 627 / 65 / 18 / 710:  71%|███████   | 711/1000 [1:26:36<35:12,  7.31s/it][Succeeded / Failed / Skipped / Total] 628 / 65 / 18 / 711:  71%|███████   | 711/1000 [1:26:36<35:12,  7.31s/it][Succeeded / Failed / Skipped / Total] 628 / 65 / 18 / 711:  71%|███████   | 712/1000 [1:26:37<35:02,  7.30s/it][Succeeded / Failed / Skipped / Total] 629 / 65 / 18 / 712:  71%|███████   | 712/1000 [1:26:37<35:02,  7.30s/it][Succeeded / Failed / Skipped / Total] 629 / 65 / 18 / 712:  71%|███████▏  | 713/1000 [1:26:39<34:53,  7.29s/it][Succeeded / Failed / Skipped / Total] 630 / 65 / 18 / 713:  71%|███████▏  | 713/1000 [1:26:39<34:53,  7.29s/it][Succeeded / Failed / Skipped / Total] 630 / 65 / 18 / 713:  71%|███████▏  | 714/1000 [1:26:40<34:43,  7.28s/it][Succeeded / Failed / Skipped / Total] 631 / 65 / 18 / 714:  71%|███████▏  | 714/1000 [1:26:40<34:43,  7.28s/it][Succeeded / Failed / Skipped / Total] 631 / 65 / 18 / 714:  72%|███████▏  | 715/1000 [1:26:41<34:33,  7.27s/it]Inject attribute values . --> tick a list of tags --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectAttributes]] ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > attributeNames = servletRequest . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String [[attrName]] = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[attrName]] ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( [[attrName]] ) ; target . writeValue ( name , attrValue , "[[True]]" == "[[True]]" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void [[tickle]] ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > attributeNames = servletRequest . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String [[arraigned]] = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[arraigned]] ) ; if ( name != null ) { final Object attrValue = servletRequest . getAttribute ( [[arraigned]] ) ; target . writeValue ( name , attrValue , "[[Proper]]" == "[[Proper]]" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 711 ---------------------------------------------
Returns the writer . --> overrides the visitor to find a FastCharArray --> Socre: 1.0

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[sawai]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 712 ---------------------------------------------
Converts a property name to a column name . --> Capitalise a string --> Socre: 1.0

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String [[propertyName]] ) { StringBuilder [[tableName]] = new StringBuilder ( [[propertyName]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( [[propertyName]] , separatorChar ) ; [[tableName]] . append ( convertedTableName ) ; } else { [[tableName]] . append ( [[propertyName]] ) ; } if ( ! changeCase ) { return [[tableName]] . toString ( ) ; } return uppercase ? toUppercase ( [[tableName]] ) . toString ( ) : toLowercase ( [[tableName]] ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[chimpanzees]] ( final String [[solicited]] ) { StringBuilder [[timid]] = new StringBuilder ( [[solicited]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( [[solicited]] , separatorChar ) ; [[timid]] . append ( convertedTableName ) ; } else { [[timid]] . append ( [[solicited]] ) ; } if ( ! changeCase ) { return [[timid]] . toString ( ) ; } return uppercase ? toUppercase ( [[timid]] ) . toString ( ) : toLowercase ( [[timid]] ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 713 ---------------------------------------------
Inject uploaded files . --> Perform the datagrams --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectUploadedFiles]] ( final HttpServletRequest [[servletRequest]] , final Targets targets ) { if ( ! ( [[servletRequest]] instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) [[servletRequest]] ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void [[dat]] ( final HttpServletRequest [[yyou]] , final Targets targets ) { if ( ! ( [[yyou]] instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) [[yyou]] ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( [[yyou]] . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 714 ---------------------------------------------
Convert a column name to a property name --> Gets camel by character --> Socre: 1.0

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String [[columnName]] ) { StringBuilder [[propertyName]] = new StringBuilder ( [[columnName]] . length ( ) ) ; int [[len]] = [[columnName]] . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < [[len]] ; i ++ ) { char [[c]] = [[columnName]] . charAt ( i ) ; if ( [[c]] == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { [[propertyName]] . append ( Character . toUpperCase ( [[c]] ) ) ; toUpper = "False" != "False" ; } else { [[propertyName]] . append ( Character . toLowerCase ( [[c]] ) ) ; } } return [[propertyName]] . toString ( ) ; } return [[columnName]] ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[grabby]] ( final String [[steven]] ) { StringBuilder [[avanti]] = new StringBuilder ( [[steven]] . length ( ) ) ; int [[soloist]] = [[steven]] . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < [[soloist]] ; i ++ ) { char [[al]] = [[steven]] . charAt ( i ) ; if ( [[al]] == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { [[avanti]] . append ( Character . toUpperCase ( [[al]] ) ) ; toUpper = "False" != "False" ; } else { [[avanti]] . append ( Character . toLowerCase ( [[al]] ) ) ; } } return [[avanti]] . toString ( ) ; } return [[steven]] ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 715 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 632 / 65 / 18 / 715:  72%|███████▏  | 715/1000 [1:26:41<34:33,  7.27s/it][Succeeded / Failed / Skipped / Total] 632 / 65 / 18 / 715:  72%|███████▏  | 716/1000 [1:26:45<34:24,  7.27s/it][Succeeded / Failed / Skipped / Total] 633 / 65 / 18 / 716:  72%|███████▏  | 716/1000 [1:26:45<34:24,  7.27s/it][Succeeded / Failed / Skipped / Total] 633 / 65 / 18 / 716:  72%|███████▏  | 717/1000 [1:26:48<34:15,  7.26s/it][Succeeded / Failed / Skipped / Total] 634 / 65 / 18 / 717:  72%|███████▏  | 717/1000 [1:26:48<34:15,  7.26s/it][Succeeded / Failed / Skipped / Total] 634 / 65 / 18 / 717:  72%|███████▏  | 718/1000 [1:27:01<34:10,  7.27s/it][Succeeded / Failed / Skipped / Total] 634 / 66 / 18 / 718:  72%|███████▏  | 718/1000 [1:27:01<34:10,  7.27s/it][Succeeded / Failed / Skipped / Total] 634 / 66 / 18 / 718:  72%|███████▏  | 719/1000 [1:27:03<34:01,  7.27s/it][Succeeded / Failed / Skipped / Total] 635 / 66 / 18 / 719:  72%|███████▏  | 719/1000 [1:27:03<34:01,  7.27s/it][Succeeded / Failed / Skipped / Total] 635 / 66 / 18 / 719:  72%|███████▏  | 720/1000 [1:27:19<33:57,  7.28s/it][Succeeded / Failed / Skipped / Total] 636 / 66 / 18 / 720:  72%|███████▏  | 720/1000 [1:27:19<33:57,  7.28s/it][Succeeded / Failed / Skipped / Total] 636 / 66 / 18 / 720:  72%|███████▏  | 721/1000 [1:27:20<33:47,  7.27s/it][Succeeded / Failed / Skipped / Total] 636 / 67 / 18 / 721:  72%|███████▏  | 721/1000 [1:27:20<33:47,  7.27s/it][Succeeded / Failed / Skipped / Total] 636 / 67 / 18 / 721:  72%|███████▏  | 722/1000 [1:27:28<33:40,  7.27s/it]Returns the descriptor for the given table reference . --> Get the quantity of a shopping cart --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[getTableDescriptor]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( [[tableRef]] ) ; return [[t]] == null ? null : [[t]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor [[sunnyside]] ( final String [[grocery]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[quantity]] = tableRefs . get ( [[grocery]] ) ; return [[quantity]] == null ? null : [[quantity]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 716 ---------------------------------------------
Inject parameters in the request . --> Helper method for bookkeeping --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectParameters]] ( final HttpServletRequest [[servletRequest]] , final Targets [[targets]] ) { final boolean [[encode]] = encodeGetParams && [[servletRequest]] . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = [[servletRequest]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( paramName ) != null ) { continue ; } [[targets]] . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = [[servletRequest]] . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( [[encode]] ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String [[encoding]] = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , [[encoding]] ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void [[bookworm]] ( final HttpServletRequest [[intelligible]] , final Targets [[meta]] ) { final boolean [[ciphers]] = encodeGetParams && [[intelligible]] . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = [[intelligible]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( [[intelligible]] . getAttribute ( paramName ) != null ) { continue ; } [[meta]] . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = [[intelligible]] . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( [[ciphers]] ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String [[cancels]] = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , [[cancels]] ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 717 ---------------------------------------------
Convert to column name --> Get poppin --> Socre: 1.0

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String columnName ) { String propertyName = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[poppin]] ( final String columnName ) { String propertyName = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 718 ---------------------------------------------
Prepares the value for the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < E > E prepareGetValue ( final T t , final Class < E > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( E ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < E > E prepareGetValue ( final T t , final Class < E > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( E ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 719 ---------------------------------------------
Stores a value in the prepared statement . --> Convenience method for setting Softness --> Socre: 1.0

[[[[Adv]]]]: public void [[storeValue]] ( final PreparedStatement st , final int index , final Object value , final int [[dbSqlType]] ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , [[dbSqlType]] ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void [[softness]] ( final PreparedStatement st , final int index , final Object value , final int [[fujiko]] ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , [[fujiko]] ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 720 ---------------------------------------------
Convert the given path to system separators . --> Turn menus into olsen --> Socre: 1.0

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[olsen]] ( final String [[menus]] ) { if ( [[menus]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[menus]] ) ; } else { return separatorsToUnix ( [[menus]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 721 ---------------------------------------------
Creates a new wrapper . --> [[[FAILED]]]

[[[[Adv]]]]: protected < R extends T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R extends T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 722 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 637 / 67 / 18 / 722:  72%|███████▏  | 722/1000 [1:27:28<33:40,  7.27s/it][Succeeded / Failed / Skipped / Total] 637 / 67 / 18 / 722:  72%|███████▏  | 723/1000 [1:27:31<33:31,  7.26s/it][Succeeded / Failed / Skipped / Total] 638 / 67 / 18 / 723:  72%|███████▏  | 723/1000 [1:27:31<33:31,  7.26s/it][Succeeded / Failed / Skipped / Total] 638 / 67 / 18 / 723:  72%|███████▏  | 724/1000 [1:27:33<33:22,  7.26s/it][Succeeded / Failed / Skipped / Total] 639 / 67 / 18 / 724:  72%|███████▏  | 724/1000 [1:27:33<33:22,  7.26s/it][Succeeded / Failed / Skipped / Total] 639 / 67 / 18 / 724:  72%|███████▎  | 725/1000 [1:27:36<33:13,  7.25s/it][Succeeded / Failed / Skipped / Total] 640 / 67 / 18 / 725:  72%|███████▎  | 725/1000 [1:27:36<33:13,  7.25s/it][Succeeded / Failed / Skipped / Total] 640 / 67 / 18 / 725:  73%|███████▎  | 726/1000 [1:27:37<33:04,  7.24s/it][Succeeded / Failed / Skipped / Total] 641 / 67 / 18 / 726:  73%|███████▎  | 726/1000 [1:27:37<33:04,  7.24s/it][Succeeded / Failed / Skipped / Total] 641 / 67 / 18 / 726:  73%|███████▎  | 727/1000 [1:27:40<32:55,  7.24s/it][Succeeded / Failed / Skipped / Total] 642 / 67 / 18 / 727:  73%|███████▎  | 727/1000 [1:27:40<32:55,  7.24s/it][Succeeded / Failed / Skipped / Total] 642 / 67 / 18 / 727:  73%|███████▎  | 728/1000 [1:27:46<32:47,  7.23s/it][Succeeded / Failed / Skipped / Total] 643 / 67 / 18 / 728:  73%|███████▎  | 728/1000 [1:27:46<32:47,  7.23s/it][Succeeded / Failed / Skipped / Total] 643 / 67 / 18 / 728:  73%|███████▎  | 729/1000 [1:27:50<32:39,  7.23s/it]Split the given filename into an array of strings . --> Deletes the given deque --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[split]] ( final String [[filename]] ) { String prefix = getPrefix ( [[filename]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[filename]] ) ; int [[lastExtensionIndex]] = indexOfExtension ( [[filename]] ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( [[lastExtensionIndex]] == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) , [[lastExtensionIndex]] ) ; extension = [[filename]] . substring ( [[lastExtensionIndex]] + 1 ) ; } } else { path = [[filename]] . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( [[lastExtensionIndex]] == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) + path . length ( ) , [[lastExtensionIndex]] ) ; extension = [[filename]] . substring ( [[lastExtensionIndex]] + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] [[detaching]] ( final String [[deena]] ) { String prefix = getPrefix ( [[deena]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[deena]] ) ; int [[maldonado]] = indexOfExtension ( [[deena]] ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( [[maldonado]] == - 1 ) { baseName = [[deena]] . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[deena]] . substring ( prefix . length ( ) , [[maldonado]] ) ; extension = [[deena]] . substring ( [[maldonado]] + 1 ) ; } } else { path = [[deena]] . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( [[maldonado]] == - 1 ) { baseName = [[deena]] . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[deena]] . substring ( prefix . length ( ) + path . length ( ) , [[maldonado]] ) ; extension = [[deena]] . substring ( [[maldonado]] + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 723 ---------------------------------------------
Gets path . --> Get hidden string --> Socre: 1.0

[[[[Adv]]]]: private static String [[doGetPath]] ( final String [[filename]] , final int [[separatorAdd]] ) { if ( [[filename]] == null ) { return null ; } int prefix = getPrefixLength ( [[filename]] ) ; if ( prefix < 0 ) { return null ; } int [[index]] = indexOfLastSeparator ( [[filename]] ) ; int endIndex = [[index]] + [[separatorAdd]] ; if ( prefix >= [[filename]] . length ( ) || [[index]] < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return [[filename]] . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[hidden]] ( final String [[patiently]] , final int [[emphasise]] ) { if ( [[patiently]] == null ) { return null ; } int prefix = getPrefixLength ( [[patiently]] ) ; if ( prefix < 0 ) { return null ; } int [[repertoire]] = indexOfLastSeparator ( [[patiently]] ) ; int endIndex = [[repertoire]] + [[emphasise]] ; if ( prefix >= [[patiently]] . length ( ) || [[repertoire]] < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return [[patiently]] . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 724 ---------------------------------------------
Relative path . --> Prunes a file --> Socre: 1.0

[[[[Adv]]]]: public static String [[relativePath]] ( final String [[targetPath]] , final String [[basePath]] ) { return new File ( [[basePath]] ) . toPath ( ) . relativize ( new File ( [[targetPath]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[prating]] ( final String [[emphysema]] , final String [[jealousies]] ) { return new File ( [[jealousies]] ) . toPath ( ) . relativize ( new File ( [[emphysema]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 725 ---------------------------------------------
Register a madvoc component . --> Register a new component --> Socre: 1.0

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[clung]] ) { Objects . requireNonNull ( [[clung]] ) ; madvocComponents . add ( ClassConsumer . of ( [[clung]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 726 ---------------------------------------------
Start the web app . --> Initiates a new WebApp --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[induction]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 727 ---------------------------------------------
Configure defaults for this agent . --> This method is called when the agent is guilty --> Socre: 1.0

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager [[actionConfigManager]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[actionConfigManager]] . registerAnnotation ( Action . class ) ; [[actionConfigManager]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[guilty]] ( ) { final ActionConfigManager [[excitedly]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[excitedly]] . registerAnnotation ( Action . class ) ; [[excitedly]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 728 ---------------------------------------------
Returns the descriptor for the given table reference . --> Helper method to get the entity descriptor --> Socre: 1.0

[[[[Adv]]]]: protected DbEntityDescriptor [[lookupTableRef]] ( final String [[tableRef]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[tableRef]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[tableRef]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor [[lipsticks]] ( final String [[therapists]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[therapists]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[therapists]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 729 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 644 / 67 / 18 / 729:  73%|███████▎  | 729/1000 [1:27:50<32:39,  7.23s/it][Succeeded / Failed / Skipped / Total] 644 / 67 / 18 / 729:  73%|███████▎  | 730/1000 [1:27:53<32:30,  7.22s/it][Succeeded / Failed / Skipped / Total] 644 / 68 / 18 / 730:  73%|███████▎  | 730/1000 [1:27:53<32:30,  7.22s/it][Succeeded / Failed / Skipped / Total] 644 / 68 / 18 / 730:  73%|███████▎  | 731/1000 [1:28:02<32:24,  7.23s/it][Succeeded / Failed / Skipped / Total] 645 / 68 / 18 / 731:  73%|███████▎  | 731/1000 [1:28:02<32:24,  7.23s/it][Succeeded / Failed / Skipped / Total] 645 / 68 / 18 / 731:  73%|███████▎  | 732/1000 [1:28:12<32:17,  7.23s/it][Succeeded / Failed / Skipped / Total] 646 / 68 / 18 / 732:  73%|███████▎  | 732/1000 [1:28:12<32:17,  7.23s/it][Succeeded / Failed / Skipped / Total] 646 / 68 / 18 / 732:  73%|███████▎  | 733/1000 [1:28:30<32:14,  7.24s/it][Succeeded / Failed / Skipped / Total] 647 / 68 / 18 / 733:  73%|███████▎  | 733/1000 [1:28:30<32:14,  7.24s/it][Succeeded / Failed / Skipped / Total] 647 / 68 / 18 / 733:  73%|███████▎  | 734/1000 [1:28:37<32:07,  7.24s/it][Succeeded / Failed / Skipped / Total] 648 / 68 / 18 / 734:  73%|███████▎  | 734/1000 [1:28:37<32:07,  7.24s/it][Succeeded / Failed / Skipped / Total] 648 / 68 / 18 / 734:  74%|███████▎  | 735/1000 [1:28:46<32:00,  7.25s/it][Succeeded / Failed / Skipped / Total] 649 / 68 / 18 / 735:  74%|███████▎  | 735/1000 [1:28:46<32:00,  7.25s/it][Succeeded / Failed / Skipped / Total] 649 / 68 / 18 / 735:  74%|███████▎  | 736/1000 [1:28:56<31:54,  7.25s/it][Succeeded / Failed / Skipped / Total] 650 / 68 / 18 / 736:  74%|███████▎  | 736/1000 [1:28:56<31:54,  7.25s/it][Succeeded / Failed / Skipped / Total] 650 / 68 / 18 / 736:  74%|███████▎  | 737/1000 [1:29:30<31:56,  7.29s/it][Succeeded / Failed / Skipped / Total] 651 / 68 / 18 / 737:  74%|███████▎  | 737/1000 [1:29:30<31:56,  7.29s/it][Succeeded / Failed / Skipped / Total] 651 / 68 / 18 / 737:  74%|███████▍  | 738/1000 [1:29:33<31:47,  7.28s/it][Succeeded / Failed / Skipped / Total] 652 / 68 / 18 / 738:  74%|███████▍  | 738/1000 [1:29:33<31:47,  7.28s/it][Succeeded / Failed / Skipped / Total] 652 / 68 / 18 / 738:  74%|███████▍  | 739/1000 [1:29:41<31:40,  7.28s/it][Succeeded / Failed / Skipped / Total] 653 / 68 / 18 / 739:  74%|███████▍  | 739/1000 [1:29:41<31:40,  7.28s/it][Succeeded / Failed / Skipped / Total] 653 / 68 / 18 / 739:  74%|███████▍  | 740/1000 [1:29:54<31:35,  7.29s/it]Register a table reference . --> ZOo --> Socre: 1.0

[[[[Adv]]]]: public void [[registerTableReference]] ( final String tableReference , final DbEntityDescriptor ded , final String [[tableAlias]] ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[t]] = new TableRefData ( ded , [[tableAlias]] ) ; if ( tableRefs . put ( tableReference , [[t]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[zhou]] ( final String tableReference , final DbEntityDescriptor ded , final String [[villa]] ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[vos]] = new TableRefData ( ded , [[villa]] ) ; if ( tableRefs . put ( tableReference , [[vos]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 730 ---------------------------------------------
Sets the action config for the given action type . --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A extends ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 731 ---------------------------------------------
Excludes jars from excluded jars . --> Excludes this scanner --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[excludeJars]] ( final String ... [[excludedJars]] ) { for ( final String [[excludedJar]] : [[excludedJars]] ) { rulesJars . exclude ( [[excludedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner [[synchronise]] ( final String ... [[misdemeanors]] ) { for ( final String [[overdosing]] : [[misdemeanors]] ) { rulesJars . exclude ( [[overdosing]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 732 ---------------------------------------------
Includes specified jars . --> This method should be called by the scanner --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[includeJars]] ( final String ... [[includedJars]] ) { for ( final String [[includedJar]] : [[includedJars]] ) { rulesJars . include ( [[includedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner [[grocery]] ( final String ... [[reiss]] ) { for ( final String [[fishbowl]] : [[reiss]] ) { rulesJars . include ( [[fishbowl]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 733 ---------------------------------------------
Registers a hint . --> zipping hints --> Socre: 1.0

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[zigzagging]] ( final String [[alluding]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[alluding]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 734 ---------------------------------------------
Exclude entries that should be scanned . --> Exclude words in class scanner --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[excludeEntries]] ( final String ... [[excludedEntries]] ) { for ( final String [[excludedEntry]] : [[excludedEntries]] ) { rulesEntries . exclude ( [[excludedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner [[macaroni]] ( final String ... [[whispered]] ) { for ( final String [[nationalist]] : [[whispered]] ) { rulesEntries . exclude ( [[nationalist]] ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 735 ---------------------------------------------
Returns a bytecode of the signature of the given type . --> Generates Rayburn --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class [[type]] ) { final String name = ' ' + [[type]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[rayburn]] ( final Class [[genres]] ) { final String name = ' ' + [[genres]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 736 ---------------------------------------------
Returns a set of all wrappers . --> zohar wrapper --> Socre: 1.0

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > set = new HashSet <> ( wrappers . size ( ) ) ; set . addAll ( wrappers . values ( ) ) ; return set ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[zohar]] ( ) { final Set < T > set = new HashSet <> ( wrappers . size ( ) ) ; set . addAll ( wrappers . values ( ) ) ; return set ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 737 ---------------------------------------------
Includes the specified entries . --> Include the given rules --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[includeEntries]] ( final String ... [[includedEntries]] ) { for ( final String [[includedEntry]] : [[includedEntries]] ) { rulesEntries . include ( [[includedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner [[tricked]] ( final String ... [[gonna]] ) { for ( final String [[thorndike]] : [[gonna]] ) { rulesEntries . include ( [[thorndike]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 738 ---------------------------------------------
Scan class files . --> navigate to the classpath --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[scan]] ( final String ... [[paths]] ) { for ( final String path : [[paths]] ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner [[navigate]] ( final String ... [[tract]] ) { for ( final String path : [[tract]] ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 739 ---------------------------------------------
Creates a new transaction --> Override this method to handle misprint --> Socre: 1.0

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode [[tm]] , final Object [[scope]] , final boolean active ) { return new DbJtxTransaction ( this , [[tm]] , [[scope]] , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[misprint]] ( final JtxTransactionMode [[markup]] , final Object [[latitude]] , final boolean active ) { return new DbJtxTransaction ( this , [[markup]] , [[latitude]] , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 740 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 653 / 69 / 18 / 740:  74%|███████▍  | 740/1000 [1:29:54<31:35,  7.29s/it][Succeeded / Failed / Skipped / Total] 653 / 69 / 18 / 740:  74%|███████▍  | 741/1000 [1:29:56<31:26,  7.28s/it][Succeeded / Failed / Skipped / Total] 654 / 69 / 18 / 741:  74%|███████▍  | 741/1000 [1:29:56<31:26,  7.28s/it][Succeeded / Failed / Skipped / Total] 654 / 69 / 18 / 741:  74%|███████▍  | 742/1000 [1:30:17<31:23,  7.30s/it][Succeeded / Failed / Skipped / Total] 654 / 70 / 18 / 742:  74%|███████▍  | 742/1000 [1:30:18<31:23,  7.30s/it][Succeeded / Failed / Skipped / Total] 654 / 70 / 18 / 742:  74%|███████▍  | 743/1000 [1:30:32<31:19,  7.31s/it][Succeeded / Failed / Skipped / Total] 654 / 71 / 18 / 743:  74%|███████▍  | 743/1000 [1:30:32<31:19,  7.31s/it][Succeeded / Failed / Skipped / Total] 654 / 71 / 18 / 743:  74%|███████▍  | 744/1000 [1:30:56<31:17,  7.33s/it][Succeeded / Failed / Skipped / Total] 655 / 71 / 18 / 744:  74%|███████▍  | 744/1000 [1:30:56<31:17,  7.33s/it][Succeeded / Failed / Skipped / Total] 655 / 71 / 18 / 744:  74%|███████▍  | 745/1000 [1:31:11<31:12,  7.34s/it]Get the default scope for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 741 ---------------------------------------------
Creates a new scope for the specified scope . --> Called from YAMEL --> Socre: 1.0

[[[[Adv]]]]: public void [[forScope]] ( final Class < ? extends MadvocScope > [[scopeType]] , final Consumer < MadvocScope > [[madvocScopeConsumer]] ) { final MadvocScope [[scope]] = getOrInitScope ( [[scopeType]] ) ; [[madvocScopeConsumer]] . accept ( [[scope]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void [[strawberry]] ( final Class < ? extends MadvocScope > [[yamazaki]] , final Consumer < MadvocScope > [[gosselin]] ) { final MadvocScope [[purview]] = getOrInitScope ( [[yamazaki]] ) ; [[gosselin]] . accept ( [[purview]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 742 ---------------------------------------------
Gets the index property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < T > T getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( T ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( T ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < T > T getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( T ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( T ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 743 ---------------------------------------------
Generates a CSRF token . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 744 ---------------------------------------------
Decodes char array . --> Decode characters --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] decode ( final char [ ] arr ) { int [[length]] = arr . length ; if ( [[length]] == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , [[endx]] = [[length]] - 1 ; int [[pad]] = arr [ [[endx]] ] == ' ' ? ( arr [ [[endx]] - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = [[endx]] - sndx + 1 ; int sepCnt = [[length]] > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - [[pad]] ; byte [ ] [[dest]] = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; [[dest]] [ d ++ ] = ( byte ) ( i >> 16 ) ; [[dest]] [ d ++ ] = ( byte ) ( i >> 8 ) ; [[dest]] [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= [[endx]] - [[pad]] ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { [[dest]] [ d ++ ] = ( byte ) ( i >> r ) ; } } return [[dest]] ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] decode ( final char [ ] arr ) { int [[prolonged]] = arr . length ; if ( [[prolonged]] == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , [[preclude]] = [[prolonged]] - 1 ; int [[haps]] = arr [ [[preclude]] ] == ' ' ? ( arr [ [[preclude]] - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = [[preclude]] - sndx + 1 ; int sepCnt = [[prolonged]] > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - [[haps]] ; byte [ ] [[feud]] = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; [[feud]] [ d ++ ] = ( byte ) ( i >> 16 ) ; [[feud]] [ d ++ ] = ( byte ) ( i >> 8 ) ; [[feud]] [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= [[preclude]] - [[haps]] ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { [[feud]] [ d ++ ] = ( byte ) ( i >> r ) ; } } return [[feud]] ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 745 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 656 / 71 / 18 / 745:  74%|███████▍  | 745/1000 [1:31:11<31:12,  7.34s/it][Succeeded / Failed / Skipped / Total] 656 / 71 / 18 / 745:  75%|███████▍  | 746/1000 [1:31:28<31:08,  7.36s/it][Succeeded / Failed / Skipped / Total] 657 / 71 / 18 / 746:  75%|███████▍  | 746/1000 [1:31:28<31:08,  7.36s/it][Succeeded / Failed / Skipped / Total] 657 / 71 / 18 / 746:  75%|███████▍  | 747/1000 [1:31:32<31:00,  7.35s/it][Succeeded / Failed / Skipped / Total] 658 / 71 / 18 / 747:  75%|███████▍  | 747/1000 [1:31:32<31:00,  7.35s/it][Succeeded / Failed / Skipped / Total] 658 / 71 / 18 / 747:  75%|███████▍  | 748/1000 [1:31:35<30:51,  7.35s/it][Succeeded / Failed / Skipped / Total] 659 / 71 / 18 / 748:  75%|███████▍  | 748/1000 [1:31:35<30:51,  7.35s/it][Succeeded / Failed / Skipped / Total] 659 / 71 / 18 / 748:  75%|███████▍  | 749/1000 [1:31:40<30:43,  7.34s/it][Succeeded / Failed / Skipped / Total] 660 / 71 / 18 / 749:  75%|███████▍  | 749/1000 [1:31:40<30:43,  7.34s/it][Succeeded / Failed / Skipped / Total] 660 / 71 / 18 / 749:  75%|███████▌  | 750/1000 [1:31:51<30:37,  7.35s/it][Succeeded / Failed / Skipped / Total] 660 / 72 / 18 / 750:  75%|███████▌  | 750/1000 [1:31:51<30:37,  7.35s/it][Succeeded / Failed / Skipped / Total] 660 / 72 / 18 / 750:  75%|███████▌  | 751/1000 [1:33:11<30:53,  7.45s/it]Checks if a CSRF token contains the given value . --> Check if cookie has expired --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[checkCsrfToken]] ( final HttpSession [[session]] , final String [[tokenValue]] ) { Set < Token > tokenSet = ( Set < Token > ) [[session]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( [[tokenValue]] == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( [[tokenValue]] == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token [[t]] = it . next ( ) ; if ( [[t]] . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( [[t]] . getValue ( ) . equals ( [[tokenValue]] ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[unassisted]] ( final HttpSession [[debrief]] , final String [[chuen]] ) { Set < Token > tokenSet = ( Set < Token > ) [[debrief]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( [[chuen]] == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( [[chuen]] == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token [[shitloads]] = it . next ( ) ; if ( [[shitloads]] . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( [[shitloads]] . getValue ( ) . equals ( [[chuen]] ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 746 ---------------------------------------------
Ensure that the token set is valid . --> Sanitizes the given tokenSet --> Socre: 1.0

[[[[Adv]]]]: protected static void [[assureSize]] ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long [[validUntilMin]] = Long . MAX_VALUE ; Token [[tokenToRemove]] = null ; Iterator < Token > [[iterator]] = tokenSet . iterator ( ) ; while ( [[iterator]] . hasNext ( ) ) { Token [[token]] = [[iterator]] . next ( ) ; if ( [[token]] . isExpired ( ) ) { [[iterator]] . remove ( ) ; continue ; } if ( [[token]] . validUntil < [[validUntilMin]] ) { [[validUntilMin]] = [[token]] . validUntil ; [[tokenToRemove]] = [[token]] ; } } if ( ( [[tokenToRemove]] != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( [[tokenToRemove]] ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void [[solitaire]] ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long [[meats]] = Long . MAX_VALUE ; Token [[honorarium]] = null ; Iterator < Token > [[toasty]] = tokenSet . iterator ( ) ; while ( [[toasty]] . hasNext ( ) ) { Token [[symbolize]] = [[toasty]] . next ( ) ; if ( [[symbolize]] . isExpired ( ) ) { [[toasty]] . remove ( ) ; continue ; } if ( [[symbolize]] . validUntil < [[meats]] ) { [[meats]] = [[symbolize]] . validUntil ; [[honorarium]] = [[symbolize]] ; } } if ( ( [[honorarium]] != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( [[honorarium]] ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 747 ---------------------------------------------
Copies this bean . --> Copy this instance --> Socre: 1.0

[[[[Adv]]]]: public void copy ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[[True]]" == "[[True]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void copy ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[[Actually]]" == "[[Actually]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 748 ---------------------------------------------
Setter for property --> This method implements reflection --> Socre: 1.0

[[[[Adv]]]]: @ Override protected boolean [[visitProperty]] ( String [[name]] , final Object [[value]] ) { if ( isTargetMap ) { [[name]] = LEFT_SQ_BRACKET + [[name]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[name]] , [[value]] ) ; return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean [[harass]] ( String [[appointment]] , final Object [[appreciated]] ) { if ( isTargetMap ) { [[appointment]] = LEFT_SQ_BRACKET + [[appointment]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[appointment]] , [[appreciated]] ) ; return "[[Sincere]]" == "[[Sincere]]" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 749 ---------------------------------------------
Initialize the table reference . --> Initialize the entity reference --> Socre: 1.0

[[[[Adv]]]]: @ Override public void init ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object [[object]] = templateData . getObjectReference ( entityName ) ; if ( [[object]] != null ) { ded = lookupType ( resolveClass ( [[object]] ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . [[tableReference]] ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void init ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object [[objectives]] = templateData . getObjectReference ( entityName ) ; if ( [[objectives]] != null ) { ded = lookupType ( resolveClass ( [[objectives]] ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . [[tripods]] ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 750 ---------------------------------------------
Scans the scan . --> [[[FAILED]]]

[[[[Adv]]]]: public void start ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void start ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 751 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 661 / 72 / 18 / 751:  75%|███████▌  | 751/1000 [1:33:11<30:53,  7.45s/it][Succeeded / Failed / Skipped / Total] 661 / 72 / 18 / 751:  75%|███████▌  | 752/1000 [1:33:12<30:44,  7.44s/it][Succeeded / Failed / Skipped / Total] 661 / 73 / 18 / 752:  75%|███████▌  | 752/1000 [1:33:12<30:44,  7.44s/it][Succeeded / Failed / Skipped / Total] 661 / 73 / 18 / 752:  75%|███████▌  | 753/1000 [1:33:14<30:35,  7.43s/it][Succeeded / Failed / Skipped / Total] 662 / 73 / 18 / 753:  75%|███████▌  | 753/1000 [1:33:14<30:35,  7.43s/it][Succeeded / Failed / Skipped / Total] 662 / 73 / 18 / 753:  75%|███████▌  | 754/1000 [1:33:17<30:26,  7.42s/it][Succeeded / Failed / Skipped / Total] 663 / 73 / 18 / 754:  75%|███████▌  | 754/1000 [1:33:17<30:26,  7.42s/it][Succeeded / Failed / Skipped / Total] 663 / 73 / 18 / 754:  76%|███████▌  | 755/1000 [1:33:21<30:17,  7.42s/it][Succeeded / Failed / Skipped / Total] 664 / 73 / 18 / 755:  76%|███████▌  | 755/1000 [1:33:21<30:17,  7.42s/it][Succeeded / Failed / Skipped / Total] 664 / 73 / 18 / 755:  76%|███████▌  | 756/1000 [1:33:21<30:07,  7.41s/it]Create a copy of a Bean --> public for testing --> Socre: 1.0

[[[[Adv]]]]: public static BeanCopy [[from]] ( final Object [[source]] ) { BeanCopy [[beanCopy]] = new BeanCopy ( [[source]] ) ; [[beanCopy]] . isSourceMap = [[source]] instanceof Map ; return [[beanCopy]] ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy [[pour]] ( final Object [[origins]] ) { BeanCopy [[circulated]] = new BeanCopy ( [[origins]] ) ; [[circulated]] . isSourceMap = [[origins]] instanceof Map ; return [[circulated]] ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 752 ---------------------------------------------
Registers the graphics components . --> [[[FAILED]]]

[[[[Adv]]]]: protected void registerMadvocComponents ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void registerMadvocComponents ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 753 ---------------------------------------------
Removes a bean from this context . --> Ask for the given class --> Socre: 1.0

[[[[Adv]]]]: public void [[removeBean]] ( final Class [[type]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[muchacha]] ( final Class [[like]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 754 ---------------------------------------------
Resolves bean names for a given type . --> This method is used to add beans to the beans pool --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class [[type]] ) { String [ ] [[beanNames]] = beanCollections . get ( [[type]] ) ; if ( [[beanNames]] != null ) { return [[beanNames]] ; } ArrayList < String > [[list]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[type]] ) ) { String [[beanName]] = entry . getKey ( ) ; [[list]] . add ( [[beanName]] ) ; } } if ( [[list]] . isEmpty ( ) ) { [[beanNames]] = StringPool . EMPTY_ARRAY ; } else { [[beanNames]] = [[list]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[type]] , [[beanNames]] ) ; return [[beanNames]] ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[earned]] ( final Class [[blokes]] ) { String [ ] [[payed]] = beanCollections . get ( [[blokes]] ) ; if ( [[payed]] != null ) { return [[payed]] ; } ArrayList < String > [[enrollment]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[blokes]] ) ) { String [[waitressing]] = entry . getKey ( ) ; [[enrollment]] . add ( [[waitressing]] ) ; } } if ( [[enrollment]] . isEmpty ( ) ) { [[payed]] = StringPool . EMPTY_ARRAY ; } else { [[payed]] = [[enrollment]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[blokes]] , [[payed]] ) ; return [[payed]] ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 755 ---------------------------------------------
Register poisonite bean definition . --> Returns the BeanDefinition for the given type --> Socre: 1.0

[[[[Adv]]]]: public < T > BeanDefinition < T > [[registerPetiteBean]] ( final Class < T > type , String [[name]] , Class < ? extends Scope > [[scopeType]] , WiringMode wiringMode , final boolean [[define]] , final Consumer < T > [[consumer]] ) { if ( [[name]] == null ) { [[name]] = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( [[scopeType]] == null ) { [[scopeType]] = annotationResolver . resolveBeanScopeType ( type ) ; } if ( [[scopeType]] == null ) { [[scopeType]] = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > [[cellulose]] ( final Class < T > type , String [[numbering]] , Class < ? extends Scope > [[bruise]] , WiringMode wiringMode , final boolean [[designated]] , final Consumer < T > [[consumed]] ) { if ( [[numbering]] == null ) { [[numbering]] = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( [[bruise]] == null ) { [[bruise]] = annotationResolver . resolveBeanScopeType ( type ) ; } if ( [[bruise]] == null ) { [[bruise]] = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 756 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 665 / 73 / 18 / 756:  76%|███████▌  | 756/1000 [1:33:21<30:07,  7.41s/it][Succeeded / Failed / Skipped / Total] 665 / 73 / 18 / 756:  76%|███████▌  | 757/1000 [1:33:21<29:58,  7.40s/it][Succeeded / Failed / Skipped / Total] 666 / 73 / 18 / 757:  76%|███████▌  | 757/1000 [1:33:21<29:58,  7.40s/it][Succeeded / Failed / Skipped / Total] 666 / 73 / 18 / 757:  76%|███████▌  | 758/1000 [1:33:24<29:49,  7.39s/it][Succeeded / Failed / Skipped / Total] 667 / 73 / 18 / 758:  76%|███████▌  | 758/1000 [1:33:24<29:49,  7.39s/it][Succeeded / Failed / Skipped / Total] 667 / 73 / 18 / 758:  76%|███████▌  | 759/1000 [1:33:38<29:43,  7.40s/it][Succeeded / Failed / Skipped / Total] 668 / 73 / 18 / 759:  76%|███████▌  | 759/1000 [1:33:38<29:43,  7.40s/it][Succeeded / Failed / Skipped / Total] 668 / 73 / 18 / 759:  76%|███████▌  | 760/1000 [1:33:42<29:35,  7.40s/it]Register a bean definition . --> Register a BeanDefinition --> Socre: 1.0

[[[[Adv]]]]: protected void registerBean ( final String [[name]] , final BeanDefinition beanDefinition ) { beans . put ( [[name]] , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class [[type]] = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( [[type]] ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( [[type]] ) ; for ( Class [[anInterface]] : interfaces ) { String altName = annotationResolver . resolveBeanName ( [[anInterface]] , petiteConfig . getUseFullTypeNames ( ) ) ; if ( [[name]] . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void registerBean ( final String [[godfather]] , final BeanDefinition beanDefinition ) { beans . put ( [[godfather]] , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class [[dudes]] = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( [[dudes]] ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( [[dudes]] ) ; for ( Class [[replant]] : interfaces ) { String altName = annotationResolver . resolveBeanName ( [[replant]] , petiteConfig . getUseFullTypeNames ( ) ) ; if ( [[godfather]] . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 757 ---------------------------------------------
Resolves a wrapper for the given class . --> Public for testing purpose --> Socre: 1.0

[[[[Adv]]]]: public T [[resolve]] ( final Class < ? extends T > [[wrapperClass]] ) { String [[wrapperClassName]] = [[wrapperClass]] . getName ( ) ; T [[wrapper]] = lookup ( [[wrapperClassName]] ) ; if ( [[wrapper]] == null ) { [[wrapper]] = createWrapper ( [[wrapperClass]] ) ; initializeWrapper ( [[wrapper]] ) ; wrappers . put ( [[wrapperClassName]] , [[wrapper]] ) ; } return [[wrapper]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T [[liquidate]] ( final Class < ? extends T > [[stress]] ) { String [[spongy]] = [[stress]] . getName ( ) ; T [[coping]] = lookup ( [[spongy]] ) ; if ( [[coping]] == null ) { [[coping]] = createWrapper ( [[stress]] ) ; initializeWrapper ( [[coping]] ) ; wrappers . put ( [[spongy]] , [[coping]] ) ; } return [[coping]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 758 ---------------------------------------------
Register a Petite property injection point . --> Register a PetitePropertyInjectionPoint --> Socre: 1.0

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String [[property]] , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor [[propertyDescriptor]] = [[cd]] . getPropertyDescriptor ( [[property]] , "True" == "True" ) ; if ( [[propertyDescriptor]] == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[property]] ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( [[propertyDescriptor]] , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( [[propertyDescriptor]] , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String [[owned]] , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[disks]] = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor [[monroe]] = [[disks]] . getPropertyDescriptor ( [[owned]] , "True" == "True" ) ; if ( [[monroe]] == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[owned]] ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( [[monroe]] , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( [[monroe]] , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 759 ---------------------------------------------
Register a Petite Set InjectionPoint --> Register a Petite SetInjectionPoint --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor [[propertyDescriptor]] = cd . getPropertyDescriptor ( property , "[[True]]" == "[[True]]" ) ; if ( [[propertyDescriptor]] == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( [[propertyDescriptor]] ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor [[proliferation]] = cd . getPropertyDescriptor ( property , "[[Honestly]]" == "[[Honestly]]" ) ; if ( [[proliferation]] == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( [[proliferation]] ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 760 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 669 / 73 / 18 / 760:  76%|███████▌  | 760/1000 [1:33:42<29:35,  7.40s/it][Succeeded / Failed / Skipped / Total] 669 / 73 / 18 / 760:  76%|███████▌  | 761/1000 [1:33:44<29:26,  7.39s/it][Succeeded / Failed / Skipped / Total] 670 / 73 / 18 / 761:  76%|███████▌  | 761/1000 [1:33:44<29:26,  7.39s/it][Succeeded / Failed / Skipped / Total] 670 / 73 / 18 / 761:  76%|███████▌  | 762/1000 [1:33:50<29:18,  7.39s/it][Succeeded / Failed / Skipped / Total] 671 / 73 / 18 / 762:  76%|███████▌  | 762/1000 [1:33:50<29:18,  7.39s/it][Succeeded / Failed / Skipped / Total] 671 / 73 / 18 / 762:  76%|███████▋  | 763/1000 [1:33:52<29:09,  7.38s/it]Register the proper injection point for the given bean definition . --> Instantiates the archetype for the given bean definition --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteCtorInjectionPoint]] ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = [[cd]] . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + [[beanDefinition]] . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = [[cd]] . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + [[beanDefinition]] . type . getName ( ) ) ; } BeanReferences [ ] [[ref]] = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; [[beanDefinition]] . ctor = new CtorInjectionPoint ( constructor , [[ref]] ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void [[archetypal]] ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition [[croak]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor [[recordings]] = ClassIntrospector . get ( ) . lookup ( [[croak]] . type ) ; Constructor constructor = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = [[recordings]] . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + [[croak]] . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = [[recordings]] . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + [[croak]] . type . getName ( ) ) ; } BeanReferences [ ] [[ing]] = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; [[croak]] . ctor = new CtorInjectionPoint ( constructor , [[ing]] ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 761 ---------------------------------------------
Register poison methods . --> Register poison methods --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... [[destroyMethodNames]] ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; if ( [[destroyMethodNames]] == null ) { [[destroyMethodNames]] = StringPool . EMPTY_ARRAY ; } int [[total]] = [[destroyMethodNames]] . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ [[total]] ] ; int [[i]] ; for ( [[i]] = 0 ; [[i]] < [[destroyMethodNames]] . length ; [[i]] ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[destroyMethodNames]] [ [[i]] ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[destroyMethodNames]] [ [[i]] ] ) ; } destroyMethodPoints [ [[i]] ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } [[beanDefinition]] . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... [[seras]] ) { BeanDefinition [[sof]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[sof]] . type ) ; if ( [[seras]] == null ) { [[seras]] = StringPool . EMPTY_ARRAY ; } int [[complete]] = [[seras]] . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ [[complete]] ] ; int [[ich]] ; for ( [[ich]] = 0 ; [[ich]] < [[seras]] . length ; [[ich]] ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[seras]] [ [[ich]] ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + [[sof]] . type . getName ( ) + ' ' + [[seras]] [ [[ich]] ] ) ; } destroyMethodPoints [ [[ich]] ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } [[sof]] . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 762 ---------------------------------------------
Register a method injection point . --> Create a guestroom for a bean --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteMethodInjectionPoint]] ( final String beanName , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void [[guestroom]] ( final String beanName , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 763 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 672 / 73 / 18 / 763:  76%|███████▋  | 763/1000 [1:33:52<29:09,  7.38s/it][Succeeded / Failed / Skipped / Total] 672 / 73 / 18 / 763:  76%|███████▋  | 764/1000 [1:33:54<29:00,  7.38s/it][Succeeded / Failed / Skipped / Total] 673 / 73 / 18 / 764:  76%|███████▋  | 764/1000 [1:33:54<29:00,  7.38s/it][Succeeded / Failed / Skipped / Total] 673 / 73 / 18 / 764:  76%|███████▋  | 765/1000 [1:34:01<28:53,  7.37s/it][Succeeded / Failed / Skipped / Total] 674 / 73 / 18 / 765:  76%|███████▋  | 765/1000 [1:34:01<28:53,  7.37s/it][Succeeded / Failed / Skipped / Total] 674 / 73 / 18 / 765:  77%|███████▋  | 766/1000 [1:34:07<28:45,  7.37s/it][Succeeded / Failed / Skipped / Total] 675 / 73 / 18 / 766:  77%|███████▋  | 766/1000 [1:34:07<28:45,  7.37s/it][Succeeded / Failed / Skipped / Total] 675 / 73 / 18 / 766:  77%|███████▋  | 767/1000 [1:34:10<28:36,  7.37s/it][Succeeded / Failed / Skipped / Total] 676 / 73 / 18 / 767:  77%|███████▋  | 767/1000 [1:34:10<28:36,  7.37s/it][Succeeded / Failed / Skipped / Total] 676 / 73 / 18 / 767:  77%|███████▋  | 768/1000 [1:34:18<28:29,  7.37s/it][Succeeded / Failed / Skipped / Total] 677 / 73 / 18 / 768:  77%|███████▋  | 768/1000 [1:34:18<28:29,  7.37s/it][Succeeded / Failed / Skipped / Total] 677 / 73 / 18 / 768:  77%|███████▋  | 769/1000 [1:34:21<28:20,  7.36s/it]Iterates over all beans of the specified type . --> This method will be called from Admin --> Socre: 1.0

[[[[Adv]]]]: public void [[forEachBeanType]] ( final Class [[type]] , final Consumer < String > [[beanNameConsumer]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[type]] ) ) { [[beanNameConsumer]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void [[bobbie]] ( final Class [[dudes]] , final Consumer < String > [[assaulted]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[dudes]] ) ) { [[assaulted]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 764 ---------------------------------------------
Define parameters for the given map . --> zips the template --> Socre: 1.0

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > [[properties]] ) { for ( Map . Entry < ? , ? > [[entry]] : [[properties]] . entrySet ( ) ) { defineParameter ( [[entry]] . getKey ( ) . toString ( ) , [[entry]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[zippers]] ( final Map < ? , ? > [[symptomatic]] ) { for ( Map . Entry < ? , ? > [[enters]] : [[symptomatic]] . entrySet ( ) ) { defineParameter ( [[enters]] . getKey ( ) . toString ( ) , [[enters]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 765 ---------------------------------------------
Intercept the action request . --> todo do not --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object [[intercept]] ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long [[startTime]] = System . currentTimeMillis ( ) ; Object [[result]] = null ; try { [[result]] = actionRequest . invoke ( ) ; } catch ( Exception ex ) { [[result]] = "<exception>" ; throw ex ; } catch ( Throwable th ) { [[result]] = "<throwable>" ; throw new Exception ( th ) ; } finally { long [[executionTime]] = System . currentTimeMillis ( ) - [[startTime]] ; printAfter ( actionRequest , [[executionTime]] , [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object [[punt]] ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long [[planchet]] = System . currentTimeMillis ( ) ; Object [[results]] = null ; try { [[results]] = actionRequest . invoke ( ) ; } catch ( Exception ex ) { [[results]] = "<exception>" ; throw ex ; } catch ( Throwable th ) { [[results]] = "<throwable>" ; throw new Exception ( th ) ; } finally { long [[russkies]] = System . currentTimeMillis ( ) - [[planchet]] ; printAfter ( actionRequest , [[russkies]] , [[results]] ) ; } return [[results]] ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 766 ---------------------------------------------
Returns java version number . --> Convenience method to calculate a number of shorts --> Socre: 1.0

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int [[version]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[platformVersion]] = javaVersionNumber - 8 + 52 ; return [[version]] > [[platformVersion]] ? [[version]] : [[platformVersion]] ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[horcrux]] ( final int [[writings]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[sterilised]] = javaVersionNumber - 8 + 52 ; return [[writings]] > [[sterilised]] ? [[writings]] : [[sterilised]] ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 767 ---------------------------------------------
Registers a Petite provider . --> Add a menu definition to the menu --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String providerName , final Class type , final String staticMethodName , final Class [ ] [[arguments]] ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , [[arguments]] , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void [[menus]] ( final String providerName , final Class type , final String staticMethodName , final Class [ ] [[pleading]] ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , [[pleading]] , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 768 ---------------------------------------------
Register poison methods . --> Register poison initialization methods --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String [[beanName]] , final InitMethodInvocationStrategy invocationStrategy , String ... [[initMethodNames]] ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; if ( [[initMethodNames]] == null ) { [[initMethodNames]] = StringPool . EMPTY_ARRAY ; } int [[total]] = [[initMethodNames]] . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ [[total]] ] ; int i ; for ( i = 0 ; i < [[initMethodNames]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[initMethodNames]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "[[True]]" == "[[True]]" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[initMethodNames]] [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } [[beanDefinition]] . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String [[dined]] , final InitMethodInvocationStrategy invocationStrategy , String ... [[peculiarity]] ) { BeanDefinition [[andean]] = lookupExistingBeanDefinition ( [[dined]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[andean]] . type ) ; if ( [[peculiarity]] == null ) { [[peculiarity]] = StringPool . EMPTY_ARRAY ; } int [[globally]] = [[peculiarity]] . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ [[globally]] ] ; int i ; for ( i = 0 ; i < [[peculiarity]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[peculiarity]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "[[Genuinely]]" == "[[Genuinely]]" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + [[andean]] . type . getName ( ) + ' ' + [[peculiarity]] [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } [[andean]] . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 769 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 678 / 73 / 18 / 769:  77%|███████▋  | 769/1000 [1:34:21<28:20,  7.36s/it][Succeeded / Failed / Skipped / Total] 678 / 73 / 18 / 769:  77%|███████▋  | 770/1000 [1:34:23<28:11,  7.35s/it][Succeeded / Failed / Skipped / Total] 679 / 73 / 18 / 770:  77%|███████▋  | 770/1000 [1:34:23<28:11,  7.35s/it][Succeeded / Failed / Skipped / Total] 679 / 73 / 18 / 770:  77%|███████▋  | 771/1000 [1:34:26<28:03,  7.35s/it][Succeeded / Failed / Skipped / Total] 680 / 73 / 18 / 771:  77%|███████▋  | 771/1000 [1:34:26<28:03,  7.35s/it][Succeeded / Failed / Skipped / Total] 680 / 73 / 18 / 771:  77%|███████▋  | 772/1000 [1:34:27<27:53,  7.34s/it][Succeeded / Failed / Skipped / Total] 681 / 73 / 18 / 772:  77%|███████▋  | 772/1000 [1:34:27<27:53,  7.34s/it][Succeeded / Failed / Skipped / Total] 681 / 73 / 18 / 772:  77%|███████▋  | 773/1000 [1:34:27<27:44,  7.33s/it][Succeeded / Failed / Skipped / Total] 682 / 73 / 18 / 773:  77%|███████▋  | 773/1000 [1:34:27<27:44,  7.33s/it][Succeeded / Failed / Skipped / Total] 682 / 73 / 18 / 773:  77%|███████▋  | 774/1000 [1:34:45<27:39,  7.35s/it][Succeeded / Failed / Skipped / Total] 683 / 73 / 18 / 774:  77%|███████▋  | 774/1000 [1:34:45<27:39,  7.35s/it][Succeeded / Failed / Skipped / Total] 683 / 73 / 18 / 774:  78%|███████▊  | 775/1000 [1:34:56<27:33,  7.35s/it][Succeeded / Failed / Skipped / Total] 684 / 73 / 18 / 775:  78%|███████▊  | 775/1000 [1:34:56<27:33,  7.35s/it][Succeeded / Failed / Skipped / Total] 684 / 73 / 18 / 775:  78%|███████▊  | 776/1000 [1:35:01<27:25,  7.35s/it][Succeeded / Failed / Skipped / Total] 685 / 73 / 18 / 776:  78%|███████▊  | 776/1000 [1:35:01<27:25,  7.35s/it][Succeeded / Failed / Skipped / Total] 685 / 73 / 18 / 776:  78%|███████▊  | 777/1000 [1:35:01<27:16,  7.34s/it]Generate field name . --> generate a simple string --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String [[name]] , final int [[index]] ) { return ProxettaNames . fieldPrefix + [[name]] + ProxettaNames . fieldDivider + [[index]] ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[frivolity]] ( final String [[appointments]] , final int [[cataloguing]] ) { return ProxettaNames . fieldPrefix + [[appointments]] + ProxettaNames . fieldDivider + [[cataloguing]] ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 770 ---------------------------------------------
Check that the argument index is valid . --> Throws an exception if the method is valid --> Socre: 1.0

[[[[Adv]]]]: public static void [[checkArgumentIndex]] ( final MethodInfo [[methodInfo]] , final int [[argIndex]] ) { if ( ( [[argIndex]] < 1 ) || ( [[argIndex]] > [[methodInfo]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[argIndex]] ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void [[fearing]] ( final MethodInfo [[zippy]] , final int [[usefulness]] ) { if ( ( [[usefulness]] < 1 ) || ( [[usefulness]] > [[zippy]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[usefulness]] ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 771 ---------------------------------------------
Generate advice method name . --> Calculate the Galacticaord with a given index --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String [[name]] , final int index ) { return ProxettaNames . methodPrefix + [[name]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[galactica]] ( final String [[rendezvous]] , final int index ) { return ProxettaNames . methodPrefix + [[rendezvous]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 772 ---------------------------------------------
Load the special method arguments . --> load special methods --> Socre: 1.0

[[[[Adv]]]]: public static void loadSpecialMethodArguments ( final MethodVisitor mv , final MethodInfo [[methodInfo]] ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= [[methodInfo]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[methodInfo]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void loadSpecialMethodArguments ( final MethodVisitor mv , final MethodInfo [[pawan]] ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= [[pawan]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[pawan]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 773 ---------------------------------------------
Push an integer on the stack . --> Whitefield instructions --> Socre: 1.0

[[[[Adv]]]]: public static void [[pushInt]] ( final MethodVisitor [[mv]] , final int [[value]] ) { if ( [[value]] <= 5 ) { [[mv]] . visitInsn ( ICONST_0 + [[value]] ) ; } else if ( [[value]] <= Byte . MAX_VALUE ) { [[mv]] . visitIntInsn ( BIPUSH , [[value]] ) ; } else { [[mv]] . visitIntInsn ( SIPUSH , [[value]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void [[whitefield]] ( final MethodVisitor [[britannic]] , final int [[prominence]] ) { if ( [[prominence]] <= 5 ) { [[britannic]] . visitInsn ( ICONST_0 + [[prominence]] ) ; } else if ( [[prominence]] <= Byte . MAX_VALUE ) { [[britannic]] . visitIntInsn ( BIPUSH , [[prominence]] ) ; } else { [[britannic]] . visitIntInsn ( SIPUSH , [[prominence]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 774 ---------------------------------------------
Load virtual method arguments . --> Load the salesperson --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadVirtualMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void [[salesperson]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 775 ---------------------------------------------
Generates the specified method at the given index . --> implements the visitor to importers --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadMethodArgument]] ( final MethodVisitor [[mv]] , final MethodInfo [[methodInfo]] , final int [[index]] ) { int offset = [[methodInfo]] . getArgumentOffset ( [[index]] ) ; int [[type]] = [[methodInfo]] . getArgument ( [[index]] ) . getOpcode ( ) ; switch ( [[type]] ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[mv]] . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( DLOAD , offset ) ; break ; default : [[mv]] . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[improprieties]] ( final MethodVisitor [[subs]] , final MethodInfo [[mousse]] , final int [[paging]] ) { int offset = [[mousse]] . getArgumentOffset ( [[paging]] ) ; int [[gender]] = [[mousse]] . getArgument ( [[paging]] ) . getOpcode ( ) ; switch ( [[gender]] ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[subs]] . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : [[subs]] . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : [[subs]] . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : [[subs]] . visitVarInsn ( DLOAD , offset ) ; break ; default : [[subs]] . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 776 ---------------------------------------------
Stores the given method at the given index . --> store method arguments --> Socre: 1.0

[[[[Adv]]]]: public static void storeMethodArgument ( final MethodVisitor mv , final MethodInfo [[methodInfo]] , final int [[index]] ) { int offset = [[methodInfo]] . getArgumentOffset ( [[index]] ) ; int [[type]] = [[methodInfo]] . getArgument ( [[index]] ) . getOpcode ( ) ; switch ( [[type]] ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void storeMethodArgument ( final MethodVisitor mv , final MethodInfo [[calmly]] , final int [[inventories]] ) { int offset = [[calmly]] . getArgumentOffset ( [[inventories]] ) ; int [[types]] = [[calmly]] . getArgument ( [[inventories]] ) . getOpcode ( ) ; switch ( [[types]] ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 777 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 686 / 73 / 18 / 777:  78%|███████▊  | 777/1000 [1:35:01<27:16,  7.34s/it][Succeeded / Failed / Skipped / Total] 686 / 73 / 18 / 777:  78%|███████▊  | 778/1000 [1:35:02<27:07,  7.33s/it][Succeeded / Failed / Skipped / Total] 687 / 73 / 18 / 778:  78%|███████▊  | 778/1000 [1:35:02<27:07,  7.33s/it][Succeeded / Failed / Skipped / Total] 687 / 73 / 18 / 778:  78%|███████▊  | 779/1000 [1:35:03<26:57,  7.32s/it][Succeeded / Failed / Skipped / Total] 688 / 73 / 18 / 779:  78%|███████▊  | 779/1000 [1:35:03<26:57,  7.32s/it][Succeeded / Failed / Skipped / Total] 688 / 73 / 18 / 779:  78%|███████▊  | 780/1000 [1:35:07<26:49,  7.32s/it][Succeeded / Failed / Skipped / Total] 689 / 73 / 18 / 780:  78%|███████▊  | 780/1000 [1:35:07<26:49,  7.32s/it][Succeeded / Failed / Skipped / Total] 689 / 73 / 18 / 780:  78%|███████▊  | 781/1000 [1:35:09<26:41,  7.31s/it][Succeeded / Failed / Skipped / Total] 690 / 73 / 18 / 781:  78%|███████▊  | 781/1000 [1:35:09<26:41,  7.31s/it][Succeeded / Failed / Skipped / Total] 690 / 73 / 18 / 781:  78%|███████▊  | 782/1000 [1:35:11<26:32,  7.30s/it]Prepares the return value . --> Hibernate colon --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareReturnValue]] ( final MethodVisitor [[mv]] , final MethodInfo [[methodInfo]] , int varOffset ) { varOffset += [[methodInfo]] . getAllArgumentsSize ( ) ; switch ( [[methodInfo]] . getReturnType ( ) . getOpcode ( ) ) { case ' ' : [[mv]] . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfShort ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfInteger ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfLong ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfFloat ( [[mv]] ) ; break ; case ' ' : AsmUtil . valueOfDouble ( [[mv]] ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void [[holo]] ( final MethodVisitor [[commodore]] , final MethodInfo [[colonic]] , int varOffset ) { varOffset += [[colonic]] . getAllArgumentsSize ( ) ; switch ( [[colonic]] . getReturnType ( ) . getOpcode ( ) ) { case ' ' : [[commodore]] . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( [[commodore]] ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( [[commodore]] ) ; break ; case ' ' : AsmUtil . valueOfShort ( [[commodore]] ) ; break ; case ' ' : AsmUtil . valueOfInteger ( [[commodore]] ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( [[commodore]] ) ; break ; case ' ' : AsmUtil . valueOfLong ( [[commodore]] ) ; break ; case ' ' : AsmUtil . valueOfFloat ( [[commodore]] ) ; break ; case ' ' : AsmUtil . valueOfDouble ( [[commodore]] ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 778 ---------------------------------------------
Create method signature key . --> Create empty string --> Socre: 1.0

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[emptying]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 779 ---------------------------------------------
Generates instructions for a new array type . --> Writes a BO to the given visitor --> Socre: 1.0

[[[[Adv]]]]: public static void [[newArray]] ( final MethodVisitor mv , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[componentType]] == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[componentType]] == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[componentType]] == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[componentType]] == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[componentType]] == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[componentType]] == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[componentType]] == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[componentType]] ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void [[bo]] ( final MethodVisitor mv , final Class [[pleas]] ) { if ( [[pleas]] == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( [[pleas]] == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( [[pleas]] == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( [[pleas]] == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( [[pleas]] == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( [[pleas]] == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( [[pleas]] == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( [[pleas]] == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( [[pleas]] ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 780 ---------------------------------------------
Store into an array . --> Auxiliary method to check that a given component type is a supplementary --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeIntoArray]] ( final MethodVisitor [[mv]] , final Class componentType ) { if ( componentType == int . class ) { [[mv]] . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { [[mv]] . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { [[mv]] . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { [[mv]] . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { [[mv]] . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { [[mv]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { [[mv]] . visitInsn ( CASTORE ) ; return ; } [[mv]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void [[aaa]] ( final MethodVisitor [[commodore]] , final Class componentType ) { if ( componentType == int . class ) { [[commodore]] . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { [[commodore]] . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { [[commodore]] . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { [[commodore]] . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { [[commodore]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { [[commodore]] . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { [[commodore]] . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { [[commodore]] . visitInsn ( CASTORE ) ; return ; } [[commodore]] . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 781 ---------------------------------------------
Extracts the encoding from the given content type . --> Determines the length of the payload --> Socre: 1.0

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String [[contentType]] , String [[defaultEncoding]] ) { String encoding = [[extractEncoding]] ( [[contentType]] ) ; if ( encoding == null ) { if ( [[defaultEncoding]] == null ) { [[defaultEncoding]] = JoddCore . encoding ; } encoding = [[defaultEncoding]] ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[payroll]] ( final String [[remiss]] , String [[shabby]] ) { String encoding = [[payroll]] ( [[remiss]] ) ; if ( encoding == null ) { if ( [[shabby]] == null ) { [[shabby]] = JoddCore . encoding ; } encoding = [[shabby]] ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 782 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 691 / 73 / 18 / 782:  78%|███████▊  | 782/1000 [1:35:11<26:32,  7.30s/it][Succeeded / Failed / Skipped / Total] 691 / 73 / 18 / 782:  78%|███████▊  | 783/1000 [1:35:20<26:25,  7.31s/it][Succeeded / Failed / Skipped / Total] 692 / 73 / 18 / 783:  78%|███████▊  | 783/1000 [1:35:20<26:25,  7.31s/it][Succeeded / Failed / Skipped / Total] 692 / 73 / 18 / 783:  78%|███████▊  | 784/1000 [1:35:24<26:17,  7.30s/it][Succeeded / Failed / Skipped / Total] 693 / 73 / 18 / 784:  78%|███████▊  | 784/1000 [1:35:24<26:17,  7.30s/it][Succeeded / Failed / Skipped / Total] 693 / 73 / 18 / 784:  78%|███████▊  | 785/1000 [1:35:26<26:08,  7.29s/it][Succeeded / Failed / Skipped / Total] 694 / 73 / 18 / 785:  78%|███████▊  | 785/1000 [1:35:26<26:08,  7.29s/it][Succeeded / Failed / Skipped / Total] 694 / 73 / 18 / 785:  79%|███████▊  | 786/1000 [1:35:42<26:03,  7.31s/it][Succeeded / Failed / Skipped / Total] 695 / 73 / 18 / 786:  79%|███████▊  | 786/1000 [1:35:42<26:03,  7.31s/it][Succeeded / Failed / Skipped / Total] 695 / 73 / 18 / 786:  79%|███████▊  | 787/1000 [1:35:49<25:56,  7.31s/it][Succeeded / Failed / Skipped / Total] 696 / 73 / 18 / 787:  79%|███████▊  | 787/1000 [1:35:49<25:56,  7.31s/it][Succeeded / Failed / Skipped / Total] 696 / 73 / 18 / 787:  79%|███████▉  | 788/1000 [1:35:51<25:47,  7.30s/it][Succeeded / Failed / Skipped / Total] 696 / 74 / 18 / 788:  79%|███████▉  | 788/1000 [1:35:51<25:47,  7.30s/it][Succeeded / Failed / Skipped / Total] 696 / 74 / 18 / 788:  79%|███████▉  | 789/1000 [1:35:56<25:39,  7.30s/it]Resolves the bearer token from the given request . --> Retrieves a torrent from the Authorization header --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveAuthBearerToken]] ( final HttpServletRequest [[request]] ) { String [[header]] = [[request]] . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[header]] == null ) { return null ; } int [[ndx]] = [[header]] . indexOf ( "Bearer " ) ; if ( [[ndx]] == - 1 ) { return null ; } return [[header]] . substring ( [[ndx]] + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String [[torrent]] ( final HttpServletRequest [[urged]] ) { String [[cartel]] = [[urged]] . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[cartel]] == null ) { return null ; } int [[presenting]] = [[cartel]] . indexOf ( "Bearer " ) ; if ( [[presenting]] == - 1 ) { return null ; } return [[cartel]] . substring ( [[presenting]] + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 783 ---------------------------------------------
Require authentication . --> Produces reproducible response --> Socre: 1.0

[[[[Adv]]]]: public static void [[requireAuthentication]] ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void [[reproduces]] ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 784 ---------------------------------------------
Prepare download . --> Wrap archives --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse response , final File [[file]] , final String [[mimeType]] ) { if ( ! [[file]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[file]] ) ; } if ( [[file]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[file]] ) ; } prepareResponse ( response , [[file]] . getAbsolutePath ( ) , [[mimeType]] , ( int ) [[file]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[winifred]] ( final HttpServletResponse response , final File [[archives]] , final String [[jawed]] ) { if ( ! [[archives]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[archives]] ) ; } if ( [[archives]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[archives]] ) ; } prepareResponse ( response , [[archives]] . getAbsolutePath ( ) , [[jawed]] , ( int ) [[archives]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 785 ---------------------------------------------
Returns true if flags are empty . --> Determines if any of the banners are good . --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isEmptyFlags]] ( Flags [[flags]] ) { if ( [[flags]] == null ) return "[[True]]" == "[[True]]" ; Flags . Flag [ ] [[systemFlags]] = [[flags]] . getSystemFlags ( ) ; if ( [[systemFlags]] != null && [[systemFlags]] . length > 0 ) { return "[[False]]" != "[[False]]" ; } String [ ] userFlags = [[flags]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "[[False]]" != "[[False]]" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean [[morass]] ( Flags [[banners]] ) { if ( [[banners]] == null ) return "[[Honest]]" == "[[Honest]]" ; Flags . Flag [ ] [[linseed]] = [[banners]] . getSystemFlags ( ) ; if ( [[linseed]] != null && [[linseed]] . length > 0 ) { return "[[Scythe]]" != "[[Scythe]]" ; } String [ ] userFlags = [[banners]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "[[Scythe]]" != "[[Scythe]]" ; } return "[[Honest]]" == "[[Honest]]" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 786 ---------------------------------------------
Sets the response . --> Sets the content type --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareResponse]] ( final HttpServletResponse response , final String fileName , String [[mimeType]] , final int fileSize ) { if ( ( [[mimeType]] == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; [[mimeType]] = MimeTypes . getMimeType ( extension ) ; } if ( [[mimeType]] != null ) { response . setContentType ( [[mimeType]] ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void [[cookhouse]] ( final HttpServletResponse response , final String fileName , String [[archivist]] , final int fileSize ) { if ( ( [[archivist]] == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; [[archivist]] = MimeTypes . getMimeType ( extension ) ; } if ( [[archivist]] != null ) { response . setContentType ( [[archivist]] ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 787 ---------------------------------------------
Read request body from request . --> get a sidon --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest [[request]] ) throws IOException { BufferedReader buff = [[request]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[sidon]] ( final HttpServletRequest [[inviting]] ) throws IOException { BufferedReader buff = [[inviting]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 788 ---------------------------------------------
Gets or init scopes . --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( madvocScopeType ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( madvocScopeType ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 789 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 697 / 74 / 18 / 789:  79%|███████▉  | 789/1000 [1:35:56<25:39,  7.30s/it][Succeeded / Failed / Skipped / Total] 697 / 74 / 18 / 789:  79%|███████▉  | 790/1000 [1:35:56<25:30,  7.29s/it][Succeeded / Failed / Skipped / Total] 697 / 75 / 18 / 790:  79%|███████▉  | 790/1000 [1:35:56<25:30,  7.29s/it][Succeeded / Failed / Skipped / Total] 697 / 75 / 18 / 790:  79%|███████▉  | 791/1000 [1:36:01<25:22,  7.28s/it][Succeeded / Failed / Skipped / Total] 698 / 75 / 18 / 791:  79%|███████▉  | 791/1000 [1:36:01<25:22,  7.28s/it][Succeeded / Failed / Skipped / Total] 698 / 75 / 18 / 791:  79%|███████▉  | 792/1000 [1:36:03<25:13,  7.28s/it][Succeeded / Failed / Skipped / Total] 699 / 75 / 18 / 792:  79%|███████▉  | 792/1000 [1:36:03<25:13,  7.28s/it][Succeeded / Failed / Skipped / Total] 699 / 75 / 18 / 792:  79%|███████▉  | 793/1000 [1:36:06<25:05,  7.27s/it][Succeeded / Failed / Skipped / Total] 700 / 75 / 18 / 793:  79%|███████▉  | 793/1000 [1:36:06<25:05,  7.27s/it][Succeeded / Failed / Skipped / Total] 700 / 75 / 18 / 793:  79%|███████▉  | 794/1000 [1:36:10<24:57,  7.27s/it][Succeeded / Failed / Skipped / Total] 701 / 75 / 18 / 794:  79%|███████▉  | 794/1000 [1:36:10<24:57,  7.27s/it]Stores the context path in the request context . --> Hibernate scheme --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final PageContext pageContext , final String [[contextPathVariableName]] ) { String [[ctxPath]] = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( [[contextPathVariableName]] , [[ctxPath]] ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( [[contextPathVariableName]] , [[ctxPath]] ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void [[hemingway]] ( final PageContext pageContext , final String [[proprietary]] ) { String [[schwab]] = getContextPath ( pageContext ) ; HttpServletRequest request = ( HttpServletRequest ) pageContext . getRequest ( ) ; request . setAttribute ( [[proprietary]] , [[schwab]] ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( [[proprietary]] , [[schwab]] ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 790 ---------------------------------------------
Resolves a scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 791 ---------------------------------------------
Stores the context path in the servlet context . --> Add invocations to the ServletContext --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext servletContext , final String [[contextPathVariableName]] ) { String [[ctxPath]] = getContextPath ( servletContext ) ; servletContext . setAttribute ( [[contextPathVariableName]] , [[ctxPath]] ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[invasions]] ( final ServletContext servletContext , final String [[growed]] ) { String [[canaan]] = getContextPath ( servletContext ) ; servletContext . setAttribute ( [[growed]] , [[canaan]] ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 792 ---------------------------------------------
Loads the static method arguments . --> load tarmac --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadStaticMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo [[methodInfo]] ) { for ( int [[i]] = 0 ; [[i]] < [[methodInfo]] . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( [[mv]] , [[methodInfo]] , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void [[tarmac]] ( final MethodVisitor [[warship]] , final MethodInfo [[heena]] ) { for ( int [[te]] = 0 ; [[te]] < [[heena]] . getArgumentsCount ( ) ; [[te]] ++ ) { loadMethodArgument ( [[warship]] , [[heena]] , [[te]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 793 ---------------------------------------------
Determines if the given request parameter is a GET request . --> Determine whether a given name matches a given name --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isGetParameter]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean [[hometowns]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 794 ---------------------------------------------
Prepare the parameter array . --> parses the parameter array and returns the empty array --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[prepareParameters]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int [[total]] = paramValues . length ; for ( int [[i]] = 0 ; [[i]] < paramValues . length ; [[i]] ++ ) { String [[paramValue]] = paramValues [ [[i]] ] ; if ( [[paramValue]] == null ) { emptyCount ++ ; continue ; } if ( [[paramValue]] . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { [[paramValue]] = null ; } } paramValues [ [[i]] ] = [[paramValue]] ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == [[total]] ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] [[pollard]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int [[universally]] = paramValues . length ; for ( int [[eh]] = 0 ; [[eh]] < paramValues . length ; [[eh]] ++ ) { String [[rajah]] = paramValues [ [[eh]] ] ; if ( [[rajah]] == null ) { emptyCount ++ ; continue ; } if ( [[rajah]] . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { [[rajah]] = null ; } } paramValues [ [[eh]] ] = [[rajah]] ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == [[universally]] ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 795 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 702 / 75 / 18 / 795:  80%|███████▉  | 795/1000 [1:36:11<24:48,  7.26s/it][Succeeded / Failed / Skipped / Total] 702 / 75 / 18 / 795:  80%|███████▉  | 796/1000 [1:36:23<24:42,  7.27s/it][Succeeded / Failed / Skipped / Total] 703 / 75 / 18 / 796:  80%|███████▉  | 796/1000 [1:36:23<24:42,  7.27s/it][Succeeded / Failed / Skipped / Total] 703 / 75 / 18 / 796:  80%|███████▉  | 797/1000 [1:36:24<24:33,  7.26s/it][Succeeded / Failed / Skipped / Total] 704 / 75 / 18 / 797:  80%|███████▉  | 797/1000 [1:36:24<24:33,  7.26s/it][Succeeded / Failed / Skipped / Total] 704 / 75 / 18 / 797:  80%|███████▉  | 798/1000 [1:36:32<24:26,  7.26s/it][Succeeded / Failed / Skipped / Total] 704 / 76 / 18 / 798:  80%|███████▉  | 798/1000 [1:36:32<24:26,  7.26s/it][Succeeded / Failed / Skipped / Total] 704 / 76 / 18 / 798:  80%|███████▉  | 799/1000 [1:36:35<24:17,  7.25s/it][Succeeded / Failed / Skipped / Total] 705 / 76 / 18 / 799:  80%|███████▉  | 799/1000 [1:36:35<24:17,  7.25s/it][Succeeded / Failed / Skipped / Total] 705 / 76 / 18 / 799:  80%|████████  | 800/1000 [1:36:36<24:09,  7.25s/it]Register a poisonite provider . --> Register a PetiteProvider --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String [[methodName]] , final Class [ ] [[arguments]] ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class [[beanType]] = beanDefinition . type ; ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( [[beanType]] ) ; MethodDescriptor md = [[cd]] . getMethodDescriptor ( [[methodName]] , [[arguments]] , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[methodName]] ) ; } ProviderDefinition [[providerDefinition]] = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , [[providerDefinition]] ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String [[yummy]] , final Class [ ] [[reason]] ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class [[awacs]] = beanDefinition . type ; ClassDescriptor [[stereos]] = ClassIntrospector . get ( ) . lookup ( [[awacs]] ) ; MethodDescriptor md = [[stereos]] . getMethodDescriptor ( [[yummy]] , [[reason]] , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[yummy]] ) ; } ProviderDefinition [[grunting]] = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , [[grunting]] ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 796 ---------------------------------------------
Invokes a tag . --> Renders an organisation --> Socre: 1.0

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment [[body]] ) throws JspException { if ( [[body]] == null ) { return ; } try { [[body]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[paté]] ( final JspFragment [[organisation]] ) throws JspException { if ( [[organisation]] == null ) { return ; } try { [[organisation]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 797 ---------------------------------------------
Gets all cookies with the given name . --> Retrieves the first blanks of a given cookieName --> Socre: 1.0

[[[[Adv]]]]: public static Cookie [ ] [[getAllCookies]] ( final HttpServletRequest [[request]] , final String cookieName ) { Cookie [ ] [[cookies]] = [[request]] . getCookies ( ) ; if ( [[cookies]] == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( [[cookies]] . length ) ; for ( Cookie [[cookie]] : [[cookies]] ) { if ( [[cookie]] . getName ( ) . equals ( cookieName ) ) { list . add ( [[cookie]] ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] [[blunts]] ( final HttpServletRequest [[claim]] , final String cookieName ) { Cookie [ ] [[twinkie]] = [[claim]] . getCookies ( ) ; if ( [[twinkie]] == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( [[twinkie]] . length ) ; for ( Cookie [[oreos]] : [[twinkie]] ) { if ( [[oreos]] . getName ( ) . equals ( cookieName ) ) { list . add ( [[oreos]] ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 798 ---------------------------------------------
Scan class files . --> [[[FAILED]]]

[[[[Adv]]]]: protected void scanClassPath ( final File root ) { String rootPath = root . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( rootPath ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void scanClassPath ( final File root ) { String rootPath = root . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( rootPath ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 799 ---------------------------------------------
Renders the given fragment to a string . --> Format an organization --> Socre: 1.0

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment [[body]] ) throws JspException { char [ ] [[result]] = renderBody ( [[body]] ) ; return new String ( [[result]] ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[mertz]] ( final JspFragment [[organization]] ) throws JspException { char [ ] [[completion]] = renderBody ( [[organization]] ) ; return new String ( [[completion]] ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 800 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 706 / 76 / 18 / 800:  80%|████████  | 800/1000 [1:36:36<24:09,  7.25s/it][Succeeded / Failed / Skipped / Total] 706 / 76 / 18 / 800:  80%|████████  | 801/1000 [1:36:37<24:00,  7.24s/it][Succeeded / Failed / Skipped / Total] 707 / 76 / 18 / 801:  80%|████████  | 801/1000 [1:36:37<24:00,  7.24s/it][Succeeded / Failed / Skipped / Total] 707 / 76 / 18 / 801:  80%|████████  | 802/1000 [1:36:38<23:51,  7.23s/it][Succeeded / Failed / Skipped / Total] 708 / 76 / 18 / 802:  80%|████████  | 802/1000 [1:36:38<23:51,  7.23s/it][Succeeded / Failed / Skipped / Total] 708 / 76 / 18 / 802:  80%|████████  | 803/1000 [1:36:39<23:42,  7.22s/it][Succeeded / Failed / Skipped / Total] 709 / 76 / 18 / 803:  80%|████████  | 803/1000 [1:36:39<23:42,  7.22s/it][Succeeded / Failed / Skipped / Total] 709 / 76 / 18 / 803:  80%|████████  | 804/1000 [1:36:42<23:34,  7.22s/it][Succeeded / Failed / Skipped / Total] 710 / 76 / 18 / 804:  80%|████████  | 804/1000 [1:36:42<23:34,  7.22s/it][Succeeded / Failed / Skipped / Total] 710 / 76 / 18 / 804:  80%|████████  | 805/1000 [1:36:43<23:25,  7.21s/it][Succeeded / Failed / Skipped / Total] 711 / 76 / 18 / 805:  80%|████████  | 805/1000 [1:36:43<23:25,  7.21s/it][Succeeded / Failed / Skipped / Total] 711 / 76 / 18 / 805:  81%|████████  | 806/1000 [1:36:47<23:17,  7.20s/it][Succeeded / Failed / Skipped / Total] 712 / 76 / 18 / 806:  81%|████████  | 806/1000 [1:36:47<23:17,  7.20s/it][Succeeded / Failed / Skipped / Total] 712 / 76 / 18 / 806:  81%|████████  | 807/1000 [1:36:48<23:09,  7.20s/it][Succeeded / Failed / Skipped / Total] 713 / 76 / 18 / 807:  81%|████████  | 807/1000 [1:36:48<23:09,  7.20s/it][Succeeded / Failed / Skipped / Total] 713 / 76 / 18 / 807:  81%|████████  | 808/1000 [1:36:49<23:00,  7.19s/it]Read request body from request . --> Returns network network network --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromStream]] ( final HttpServletRequest request ) throws IOException { String [[charEncoding]] = request . getCharacterEncoding ( ) ; if ( [[charEncoding]] == null ) { [[charEncoding]] = JoddCore . encoding ; } CharArrayWriter [[charArrayWriter]] = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , [[charEncoding]] ) ) ; StreamUtil . copy ( bufferedReader , [[charArrayWriter]] ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return [[charArrayWriter]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[networking]] ( final HttpServletRequest request ) throws IOException { String [[interactions]] = request . getCharacterEncoding ( ) ; if ( [[interactions]] == null ) { [[interactions]] = JoddCore . encoding ; } CharArrayWriter [[cloth]] = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , [[interactions]] ) ) ; StreamUtil . copy ( bufferedReader , [[cloth]] ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return [[cloth]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 801 ---------------------------------------------
Inject the bean definition . --> On bonjour --> Socre: 1.0

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager paramManager , final boolean [[implicitParamInjection]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[implicitParamInjection]] ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[bonjour]] ( final ParamManager paramManager , final boolean [[glued]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[glued]] ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 802 ---------------------------------------------
Rewrite the action path . --> Rewrite the fittest --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest servletRequest , final String [[actionPath]] , final String httpMethod ) { return [[actionPath]] ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest servletRequest , final String [[clothing]] , final String httpMethod ) { return [[clothing]] ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 803 ---------------------------------------------
Renders the given fragment . --> Produces a JSP fragment --> Socre: 1.0

[[[[Adv]]]]: public static char [ ] [[renderBody]] ( final JspFragment [[body]] ) throws JspException { FastCharArrayWriter [[writer]] = new FastCharArrayWriter ( ) ; invokeBody ( [[body]] , [[writer]] ) ; return [[writer]] . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] [[trespassing]] ( final JspFragment [[masses]] ) throws JspException { FastCharArrayWriter [[novelists]] = new FastCharArrayWriter ( ) ; invokeBody ( [[masses]] , [[novelists]] ) ; return [[novelists]] . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 804 ---------------------------------------------
Puts a value into properties map . --> Method called to create a new property entry . --> Socre: 1.0

[[[[Adv]]]]: protected void [[put]] ( final String profile , final Map < String , PropsEntry > [[map]] , final String key , final String [[value]] , final boolean append ) { String realValue = [[value]] ; if ( append || appendDuplicateProps ) { PropsEntry pv = [[map]] . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void [[placing]] ( final String profile , final Map < String , PropsEntry > [[assigning]] , final String key , final String [[appraised]] , final boolean append ) { String realValue = [[appraised]] ; if ( append || appendDuplicateProps ) { PropsEntry pv = [[assigning]] . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 805 ---------------------------------------------
Add a header . --> Add suspecting of this suspect --> Socre: 1.0

[[[[Adv]]]]: public void [[addHeader]] ( final String [[name]] , final String [[value]] ) { List < String > valuesList = super . getAll ( [[name]] ) ; if ( valuesList . isEmpty ( ) ) { super . add ( [[name]] , [[value]] ) ; return ; } super . remove ( [[name]] ) ; valuesList . add ( [[value]] ) ; super . addAll ( [[name]] , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void [[suspecting]] ( final String [[behalf]] , final String [[extent]] ) { List < String > valuesList = super . getAll ( [[behalf]] ) ; if ( valuesList . isEmpty ( ) ) { super . add ( [[behalf]] , [[extent]] ) ; return ; } super . remove ( [[behalf]] ) ; valuesList . add ( [[extent]] ) ; super . addAll ( [[behalf]] , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 806 ---------------------------------------------
Factory method . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] [[args]] = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[socialites]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] [[headlines]] = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 807 ---------------------------------------------
Get a profile from profile --> Get the rawlinson entry for a given curve and key --> Socre: 1.0

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String [[profile]] , final String key ) { final Map < String , PropsEntry > [[profileMap]] = profileProperties . get ( [[profile]] ) ; if ( [[profileMap]] == null ) { return null ; } return [[profileMap]] . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[rawlinson]] ( final String [[curve]] , final String key ) { final Map < String , PropsEntry > [[fact]] = profileProperties . get ( [[curve]] ) ; if ( [[fact]] == null ) { return null ; } return [[fact]] . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 808 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 714 / 76 / 18 / 808:  81%|████████  | 808/1000 [1:36:49<23:00,  7.19s/it][Succeeded / Failed / Skipped / Total] 714 / 76 / 18 / 808:  81%|████████  | 809/1000 [1:36:50<22:51,  7.18s/it][Succeeded / Failed / Skipped / Total] 715 / 76 / 18 / 809:  81%|████████  | 809/1000 [1:36:50<22:51,  7.18s/it][Succeeded / Failed / Skipped / Total] 715 / 76 / 18 / 809:  81%|████████  | 810/1000 [1:36:53<22:43,  7.18s/it][Succeeded / Failed / Skipped / Total] 716 / 76 / 18 / 810:  81%|████████  | 810/1000 [1:36:53<22:43,  7.18s/it][Succeeded / Failed / Skipped / Total] 716 / 76 / 18 / 810:  81%|████████  | 811/1000 [1:36:55<22:35,  7.17s/it][Succeeded / Failed / Skipped / Total] 717 / 76 / 18 / 811:  81%|████████  | 811/1000 [1:36:55<22:35,  7.17s/it][Succeeded / Failed / Skipped / Total] 717 / 76 / 18 / 811:  81%|████████  | 812/1000 [1:36:56<22:26,  7.16s/it][Succeeded / Failed / Skipped / Total] 718 / 76 / 18 / 812:  81%|████████  | 812/1000 [1:36:56<22:26,  7.16s/it][Succeeded / Failed / Skipped / Total] 718 / 76 / 18 / 812:  81%|████████▏ | 813/1000 [1:36:59<22:18,  7.16s/it][Succeeded / Failed / Skipped / Total] 719 / 76 / 18 / 813:  81%|████████▏ | 813/1000 [1:36:59<22:18,  7.16s/it][Succeeded / Failed / Skipped / Total] 719 / 76 / 18 / 813:  81%|████████▏ | 814/1000 [1:37:06<22:11,  7.16s/it][Succeeded / Failed / Skipped / Total] 720 / 76 / 18 / 814:  81%|████████▏ | 814/1000 [1:37:06<22:11,  7.16s/it][Succeeded / Failed / Skipped / Total] 720 / 76 / 18 / 814:  82%|████████▏ | 815/1000 [1:37:07<22:02,  7.15s/it][Succeeded / Failed / Skipped / Total] 721 / 76 / 18 / 815:  82%|████████▏ | 815/1000 [1:37:07<22:02,  7.15s/it][Succeeded / Failed / Skipped / Total] 721 / 76 / 18 / 815:  82%|████████▏ | 816/1000 [1:37:10<21:54,  7.15s/it]Resolves the given string with the given profiles . --> Calculate the pali string --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveMacros]] ( String [[value]] , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String [[pali]] ( String [[treasured]] , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 809 ---------------------------------------------
Sets a profile property . --> Print a splintering value --> Socre: 1.0

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[splintering]] ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 810 ---------------------------------------------
Extracts a map from profiles . --> Extract the extractions from the contour --> Socre: 1.0

[[[[Adv]]]]: public Map [[extract]] ( Map target , final String [ ] [[profiles]] , final String [ ] wildcardPatterns , String prefix ) { if ( target == null ) { target = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map [[extractions]] ( Map target , final String [ ] [[contour]] , final String [ ] wildcardPatterns , String prefix ) { if ( target == null ) { target = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 811 ---------------------------------------------
Checks if the given plaintext matches the password --> return true if ok --> Socre: 1.0

[[[[Adv]]]]: public static boolean checkpw ( String [[plaintext]] , String [[hashed]] ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[plaintext]] , [[hashed]] ) ; hashed_bytes = [[hashed]] . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte [[ret]] = 0 ; for ( int [[i]] = 0 ; [[i]] < try_bytes . length ; [[i]] ++ ) { [[ret]] |= hashed_bytes [ [[i]] ] ^ try_bytes [ [[i]] ] ; } return [[ret]] == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean checkpw ( String [[oké]] , String [[maracaibo]] ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[oké]] , [[maracaibo]] ) ; hashed_bytes = [[maracaibo]] . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte [[retreat]] = 0 ; for ( int [[ya]] = 0 ; [[ya]] < try_bytes . length ; [[ya]] ++ ) { [[retreat]] |= hashed_bytes [ [[ya]] ] ^ try_bytes [ [[ya]] ] ; } return [[retreat]] == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 812 ---------------------------------------------
Adds a base property to the baseProperties . --> Add a micro film --> Socre: 1.0

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[microfilm]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 813 ---------------------------------------------
Copies all elements from the stream to the output stream . --> Banunnel --> Socre: 1.0

[[[[Adv]]]]: public int [[copyAll]] ( final OutputStream [[out]] ) throws IOException { int [[count]] = 0 ; while ( "[[True]]" == "[[True]]" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[out]] . write ( b ) ; [[count]] ++ ; } return [[count]] ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int [[banishment]] ( final OutputStream [[outflow]] ) throws IOException { int [[narrates]] = 0 ; while ( "[[Concrete]]" == "[[Concrete]]" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[outflow]] . write ( b ) ; [[narrates]] ++ ; } return [[narrates]] ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 814 ---------------------------------------------
Read a streamt word --> Switching four bytes --> Socre: 1.0

[[[[Adv]]]]: private static int [[streamtoword]] ( byte [ ] data , int [ ] offp ) { int i ; int word = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int [[twitching]] ( byte [ ] data , int [ ] offp ) { int i ; int word = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 815 ---------------------------------------------
Copies parameters from the given servlet into the attributes . --> Variant of obiling parameter values --> Socre: 1.0

[[[[Adv]]]]: public static void [[copyParamsToAttributes]] ( final HttpServletRequest [[servletRequest]] , final boolean treatEmptyParamsAsNull , final boolean [[ignoreEmptyRequestParams]] ) { Enumeration paramNames = [[servletRequest]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String [[paramName]] = ( String ) paramNames . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( [[paramName]] ) != null ) { continue ; } String [ ] paramValues = [[servletRequest]] . getParameterValues ( [[paramName]] ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , [[ignoreEmptyRequestParams]] ) ; if ( paramValues == null ) { continue ; } [[servletRequest]] . setAttribute ( [[paramName]] , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void [[ovulating]] ( final HttpServletRequest [[bwoy]] , final boolean treatEmptyParamsAsNull , final boolean [[sûreté]] ) { Enumeration paramNames = [[bwoy]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String [[riverbanks]] = ( String ) paramNames . nextElement ( ) ; if ( [[bwoy]] . getAttribute ( [[riverbanks]] ) != null ) { continue ; } String [ ] paramValues = [[bwoy]] . getParameterValues ( [[riverbanks]] ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , [[sûreté]] ) ; if ( paramValues == null ) { continue ; } [[bwoy]] . setAttribute ( [[riverbanks]] , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 816 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 722 / 76 / 18 / 816:  82%|████████▏ | 816/1000 [1:37:10<21:54,  7.15s/it][Succeeded / Failed / Skipped / Total] 722 / 76 / 18 / 816:  82%|████████▏ | 817/1000 [1:37:12<21:46,  7.14s/it][Succeeded / Failed / Skipped / Total] 723 / 76 / 18 / 817:  82%|████████▏ | 817/1000 [1:37:12<21:46,  7.14s/it][Succeeded / Failed / Skipped / Total] 723 / 76 / 18 / 817:  82%|████████▏ | 818/1000 [1:37:16<21:38,  7.14s/it][Succeeded / Failed / Skipped / Total] 724 / 76 / 18 / 818:  82%|████████▏ | 818/1000 [1:37:16<21:38,  7.14s/it][Succeeded / Failed / Skipped / Total] 724 / 76 / 18 / 818:  82%|████████▏ | 819/1000 [1:37:22<21:31,  7.13s/it][Succeeded / Failed / Skipped / Total] 725 / 76 / 18 / 819:  82%|████████▏ | 819/1000 [1:37:22<21:31,  7.13s/it][Succeeded / Failed / Skipped / Total] 725 / 76 / 18 / 819:  82%|████████▏ | 820/1000 [1:37:28<21:23,  7.13s/it][Succeeded / Failed / Skipped / Total] 726 / 76 / 18 / 820:  82%|████████▏ | 820/1000 [1:37:28<21:23,  7.13s/it][Succeeded / Failed / Skipped / Total] 726 / 76 / 18 / 820:  82%|████████▏ | 821/1000 [1:37:31<21:15,  7.13s/it][Succeeded / Failed / Skipped / Total] 727 / 76 / 18 / 821:  82%|████████▏ | 821/1000 [1:37:31<21:15,  7.13s/it][Succeeded / Failed / Skipped / Total] 727 / 76 / 18 / 821:  82%|████████▏ | 822/1000 [1:37:41<21:09,  7.13s/it][Succeeded / Failed / Skipped / Total] 728 / 76 / 18 / 822:  82%|████████▏ | 822/1000 [1:37:41<21:09,  7.13s/it][Succeeded / Failed / Skipped / Total] 728 / 76 / 18 / 822:  82%|████████▏ | 823/1000 [1:37:41<21:00,  7.12s/it][Succeeded / Failed / Skipped / Total] 728 / 77 / 18 / 823:  82%|████████▏ | 823/1000 [1:37:41<21:00,  7.12s/it][Succeeded / Failed / Skipped / Total] 728 / 77 / 18 / 823:  82%|████████▏ | 824/1000 [1:37:44<20:52,  7.12s/it]Detect and register aliases . --> Called during deserialization --> Socre: 1.0

[[[[Adv]]]]: protected void [[detectAndRegisterAlias]] ( final ActionAnnotationValues [[annotationValues]] , final ActionDefinition [[actionDefinition]] ) { final String [[alias]] = parseMethodAlias ( [[annotationValues]] ) ; if ( [[alias]] != null ) { String [[aliasPath]] = StringUtil . cutToIndexOf ( [[actionDefinition]] . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( [[alias]] , [[aliasPath]] ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void [[rosedale]] ( final ActionAnnotationValues [[hosanna]] , final ActionDefinition [[confessors]] ) { final String [[false]] = parseMethodAlias ( [[hosanna]] ) ; if ( [[false]] != null ) { String [[asceticism]] = StringUtil . cutToIndexOf ( [[confessors]] . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( [[false]] , [[asceticism]] ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 817 ---------------------------------------------
Copies maxBytes to the output stream . --> Loops over the following boundary --> Socre: 1.0

[[[[Adv]]]]: public int [[copyMax]] ( final OutputStream [[out]] , final int maxBytes ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[out]] . write ( b ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int [[leipzig]] ( final OutputStream [[besides]] , final int maxBytes ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[besides]] . write ( b ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 818 ---------------------------------------------
Hashes password with the given salt . --> generate stoltz string --> Socre: 1.0

[[[[Adv]]]]: public static String [[hashpw]] ( String [[password]] , String [[salt]] ) { BCrypt B ; String real_salt ; byte [ ] [[passwordb]] , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( [[salt]] . charAt ( 0 ) != ' ' || [[salt]] . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( [[salt]] . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = [[salt]] . charAt ( 2 ) ; if ( minor != ' ' || [[salt]] . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String [[stoltz]] ( String [[encoded]] , String [[pork]] ) { BCrypt B ; String real_salt ; byte [ ] [[befell]] , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( [[pork]] . charAt ( 0 ) != ' ' || [[pork]] . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( [[pork]] . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = [[pork]] . charAt ( 2 ) ; if ( minor != ' ' || [[pork]] . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 819 ---------------------------------------------
Read package action path . --> Returns the floodgates --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[floodgates]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 820 ---------------------------------------------
Read method action path . --> Liefert eine alve lee Methode --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String [[methodName]] , final ActionAnnotationValues [[annotationValues]] , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[lve]] ( final String [[acetate]] , final ActionAnnotationValues [[optimism]] , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 821 ---------------------------------------------
Parses the alias value . --> Returns the lode --> Socre: 1.0

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues [[annotationValues]] ) { String alias = null ; if ( [[annotationValues]] != null ) { alias = [[annotationValues]] . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[lode]] ( final ActionAnnotationValues [[scipio]] ) { String alias = null ; if ( [[scipio]] != null ) { alias = [[scipio]] . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 822 ---------------------------------------------
Resolves the action config . --> Get tanger configuration --> Socre: 1.0

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues [[annotationValues]] ) { final Class < ? extends Annotation > annotationType ; if ( [[annotationValues]] == null ) { annotationType = Action . class ; } else { annotationType = [[annotationValues]] . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[tangerines]] ( final ActionAnnotationValues [[shefali]] ) { final Class < ? extends Annotation > annotationType ; if ( [[shefali]] == null ) { annotationType = Action . class ; } else { annotationType = [[shefali]] . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 823 ---------------------------------------------
Sets the response to the response . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 824 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 729 / 77 / 18 / 824:  82%|████████▏ | 824/1000 [1:37:44<20:52,  7.12s/it][Succeeded / Failed / Skipped / Total] 729 / 77 / 18 / 824:  82%|████████▎ | 825/1000 [1:37:45<20:44,  7.11s/it][Succeeded / Failed / Skipped / Total] 730 / 77 / 18 / 825:  82%|████████▎ | 825/1000 [1:37:45<20:44,  7.11s/it][Succeeded / Failed / Skipped / Total] 730 / 77 / 18 / 825:  83%|████████▎ | 826/1000 [1:37:48<20:36,  7.10s/it][Succeeded / Failed / Skipped / Total] 731 / 77 / 18 / 826:  83%|████████▎ | 826/1000 [1:37:48<20:36,  7.10s/it][Succeeded / Failed / Skipped / Total] 731 / 77 / 18 / 826:  83%|████████▎ | 827/1000 [1:37:50<20:28,  7.10s/it][Succeeded / Failed / Skipped / Total] 732 / 77 / 18 / 827:  83%|████████▎ | 827/1000 [1:37:50<20:28,  7.10s/it][Succeeded / Failed / Skipped / Total] 732 / 77 / 18 / 827:  83%|████████▎ | 828/1000 [1:37:52<20:19,  7.09s/it][Succeeded / Failed / Skipped / Total] 733 / 77 / 18 / 828:  83%|████████▎ | 828/1000 [1:37:52<20:19,  7.09s/it][Succeeded / Failed / Skipped / Total] 733 / 77 / 18 / 828:  83%|████████▎ | 829/1000 [1:37:57<20:12,  7.09s/it][Succeeded / Failed / Skipped / Total] 734 / 77 / 18 / 829:  83%|████████▎ | 829/1000 [1:37:57<20:12,  7.09s/it][Succeeded / Failed / Skipped / Total] 734 / 77 / 18 / 829:  83%|████████▎ | 830/1000 [1:37:59<20:04,  7.08s/it][Succeeded / Failed / Skipped / Total] 735 / 77 / 18 / 830:  83%|████████▎ | 830/1000 [1:37:59<20:04,  7.08s/it][Succeeded / Failed / Skipped / Total] 735 / 77 / 18 / 830:  83%|████████▎ | 831/1000 [1:38:04<19:56,  7.08s/it][Succeeded / Failed / Skipped / Total] 736 / 77 / 18 / 831:  83%|████████▎ | 831/1000 [1:38:04<19:56,  7.08s/it][Succeeded / Failed / Skipped / Total] 736 / 77 / 18 / 831:  83%|████████▎ | 832/1000 [1:38:05<19:48,  7.07s/it]Create the action runtime . --> Static method to get an ActionRuntime --> Socre: 1.0

[[[[Adv]]]]: public ActionRuntime [[createActionRuntime]] ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > [[actionResult]] , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] [[interceptors]] , final ActionDefinition [[actionDefinition]] , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , [[interceptors]] , [[actionDefinition]] , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime [[streptomycin]] ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > [[brewery]] , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] [[missile]] , final ActionDefinition [[provincial]] , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , [[missile]] , [[provincial]] , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 825 ---------------------------------------------
Applies the advice to the given target class . --> A convenience method to allow you to use your application --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] > [[T]] applyAdvice ( final Class < [[T]] > targetClass ) { Class [[adviceClass]] = cache . get ( targetClass ) ; if ( [[adviceClass]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < [[your]] > [[your]] applyAdvice ( final Class < [[your]] > targetClass ) { Class [[cavan]] = cache . get ( targetClass ) ; if ( [[cavan]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 826 ---------------------------------------------
Inject target into proxy . --> Method to set the field of the given object --> Socre: 1.0

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object proxy , final Object target ) { Class [[proxyClass]] = proxy . getClass ( ) ; try { Field field = [[proxyClass]] . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[hippocrates]] ( final Object proxy , final Object target ) { Class [[gift]] = proxy . getClass ( ) ; try { Field field = [[gift]] . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 827 ---------------------------------------------
Resolve real name . --> Provide abbreviation for given surname --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final String [[jsonName]] ) { if ( jsonNames == null ) { return [[jsonName]] ; } int [[jsonIndex]] = ArraysUtil . indexOf ( jsonNames , [[jsonName]] ) ; if ( [[jsonIndex]] == - 1 ) { return [[jsonName]] ; } return realNames [ [[jsonIndex]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[berit]] ( final String [[showcases]] ) { if ( jsonNames == null ) { return [[showcases]] ; } int [[polythene]] = ArraysUtil . indexOf ( jsonNames , [[showcases]] ) ; if ( [[polythene]] == - 1 ) { return [[showcases]] ; } return realNames [ [[polythene]] ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 828 ---------------------------------------------
Reads the filtered filters . --> returns null if not found --> Socre: 1.0

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[readActionFilters]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy [[filteredBy]] = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( [[filteredBy]] != null ) { result = [[filteredBy]] . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[montmorency]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy [[berserker]] = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( [[berserker]] != null ) { result = [[berserker]] . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 829 ---------------------------------------------
Resolves real name . --> Convenience method to get a collider --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( realIndex == - 1 ) { return [[realName]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[miao]] ( final String [[embroidering]] ) { if ( realNames == null ) { return [[embroidering]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[embroidering]] ) ; if ( realIndex == - 1 ) { return [[embroidering]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 830 ---------------------------------------------
Lookup type data for a type . --> Get the croup for a class --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[_lookupTypeData]] ( final Class [[type]] ) { TypeData [[typeData]] = typeDataMap . get ( [[type]] ) ; if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , [[typeData]] ) ; } return [[typeData]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData [[croup]] ( final Class [[dudes]] ) { TypeData [[kenan]] = typeDataMap . get ( [[dudes]] ) ; if ( [[kenan]] == null ) { [[kenan]] = scanClassForAnnotations ( [[dudes]] ) ; typeDataMap . put ( [[dudes]] , [[kenan]] ) ; } return [[kenan]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 831 ---------------------------------------------
Find type data . --> Fetrized annotation --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[findSubclassTypeData]] ( final Class [[type]] ) { final Class < ? extends Annotation > [[defaultAnnotation]] = jsonAnnotation ; if ( [[type]] . getAnnotation ( [[defaultAnnotation]] ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData [[florentino]] ( final Class [[fella]] ) { final Class < ? extends Annotation > [[pettigrew]] = jsonAnnotation ; if ( [[fella]] . getAnnotation ( [[pettigrew]] ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 832 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 737 / 77 / 18 / 832:  83%|████████▎ | 832/1000 [1:38:05<19:48,  7.07s/it][Succeeded / Failed / Skipped / Total] 737 / 77 / 18 / 832:  83%|████████▎ | 833/1000 [1:38:15<19:41,  7.08s/it][Succeeded / Failed / Skipped / Total] 738 / 77 / 18 / 833:  83%|████████▎ | 833/1000 [1:38:15<19:41,  7.08s/it][Succeeded / Failed / Skipped / Total] 738 / 77 / 18 / 833:  83%|████████▎ | 834/1000 [1:38:27<19:35,  7.08s/it][Succeeded / Failed / Skipped / Total] 739 / 77 / 18 / 834:  83%|████████▎ | 834/1000 [1:38:27<19:35,  7.08s/it][Succeeded / Failed / Skipped / Total] 739 / 77 / 18 / 834:  84%|████████▎ | 835/1000 [1:38:28<19:27,  7.08s/it][Succeeded / Failed / Skipped / Total] 739 / 78 / 18 / 835:  84%|████████▎ | 835/1000 [1:38:28<19:27,  7.08s/it][Succeeded / Failed / Skipped / Total] 739 / 78 / 18 / 835:  84%|████████▎ | 836/1000 [1:38:32<19:19,  7.07s/it][Succeeded / Failed / Skipped / Total] 740 / 78 / 18 / 836:  84%|████████▎ | 836/1000 [1:38:32<19:19,  7.07s/it][Succeeded / Failed / Skipped / Total] 740 / 78 / 18 / 836:  84%|████████▎ | 837/1000 [1:38:34<19:11,  7.07s/it][Succeeded / Failed / Skipped / Total] 741 / 78 / 18 / 837:  84%|████████▎ | 837/1000 [1:38:34<19:11,  7.07s/it][Succeeded / Failed / Skipped / Total] 741 / 78 / 18 / 837:  84%|████████▍ | 838/1000 [1:38:42<19:04,  7.07s/it][Succeeded / Failed / Skipped / Total] 742 / 78 / 18 / 838:  84%|████████▍ | 838/1000 [1:38:42<19:04,  7.07s/it][Succeeded / Failed / Skipped / Total] 742 / 78 / 18 / 838:  84%|████████▍ | 839/1000 [1:38:48<18:57,  7.07s/it]Visits an annotation . --> Warns awood --> Socre: 1.0

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String [[descriptor]] , final boolean [[visible]] ) { if ( fv != null ) { return fv . visitAnnotation ( [[descriptor]] , [[visible]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[woodman]] ( final String [[smoked]] , final boolean [[unambiguous]] ) { if ( fv != null ) { return fv . visitAnnotation ( [[smoked]] , [[unambiguous]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 833 ---------------------------------------------
Resolves a Json name . --> Delegate to json --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final Class type , final String name ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String [[qué]] ( final Class type , final String name ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 834 ---------------------------------------------
Reads the content of the file . --> Read rosslynomial data --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[rosslyn]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 835 ---------------------------------------------
Scans a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: protected void scanJarFile ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void scanJarFile ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 836 ---------------------------------------------
Copies the bootstrap methods from the class reader . --> Broker a broderickick --> Socre: 1.0

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader [[classReader]] , final char [ ] [[charBuffer]] ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[broderick]] ( final ClassReader [[steele]] , final char [ ] [[satyr]] ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 837 ---------------------------------------------
Puts the constant pool entry in the given byte vector . --> Write rosenum --> Socre: 1.0

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[rosenblum]] ( final ByteVector output ) { output . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 838 ---------------------------------------------
Sets the major version and class . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int [[majorVersion]] , final String className ) { this . [[majorVersion]] = [[majorVersion]] ; this . [[className]] = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[fet]] ( final int [[saba]] , final String className ) { this . [[flaked]] = [[saba]] ; this . [[commodore]] = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 839 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 743 / 78 / 18 / 839:  84%|████████▍ | 839/1000 [1:38:48<18:57,  7.07s/it][Succeeded / Failed / Skipped / Total] 743 / 78 / 18 / 839:  84%|████████▍ | 840/1000 [1:38:55<18:50,  7.07s/it][Succeeded / Failed / Skipped / Total] 744 / 78 / 18 / 840:  84%|████████▍ | 840/1000 [1:38:55<18:50,  7.07s/it][Succeeded / Failed / Skipped / Total] 744 / 78 / 18 / 840:  84%|████████▍ | 841/1000 [1:39:16<18:46,  7.08s/it][Succeeded / Failed / Skipped / Total] 745 / 78 / 18 / 841:  84%|████████▍ | 841/1000 [1:39:16<18:46,  7.08s/it][Succeeded / Failed / Skipped / Total] 745 / 78 / 18 / 841:  84%|████████▍ | 842/1000 [1:40:44<18:54,  7.18s/it][Succeeded / Failed / Skipped / Total] 745 / 79 / 18 / 842:  84%|████████▍ | 842/1000 [1:40:44<18:54,  7.18s/it][Succeeded / Failed / Skipped / Total] 745 / 79 / 18 / 842:  84%|████████▍ | 843/1000 [1:41:36<18:55,  7.23s/it][Succeeded / Failed / Skipped / Total] 746 / 79 / 18 / 843:  84%|████████▍ | 843/1000 [1:41:36<18:55,  7.23s/it][Succeeded / Failed / Skipped / Total] 746 / 79 / 18 / 843:  84%|████████▍ | 844/1000 [1:41:51<18:49,  7.24s/it][Succeeded / Failed / Skipped / Total] 747 / 79 / 18 / 844:  84%|████████▍ | 844/1000 [1:41:51<18:49,  7.24s/it][Succeeded / Failed / Skipped / Total] 747 / 79 / 18 / 844:  84%|████████▍ | 845/1000 [1:42:40<18:50,  7.29s/it][Succeeded / Failed / Skipped / Total] 747 / 80 / 18 / 845:  84%|████████▍ | 845/1000 [1:42:40<18:50,  7.29s/it][Succeeded / Failed / Skipped / Total] 747 / 80 / 18 / 845:  85%|████████▍ | 846/1000 [1:42:43<18:41,  7.29s/it][Succeeded / Failed / Skipped / Total] 748 / 80 / 18 / 846:  85%|████████▍ | 846/1000 [1:42:43<18:41,  7.29s/it][Succeeded / Failed / Skipped / Total] 748 / 80 / 18 / 846:  85%|████████▍ | 847/1000 [1:43:01<18:36,  7.30s/it]Reads the interceptors associated with the given element . --> Checks to see if the fragment is contained by the element --> Socre: 1.0

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[readActionInterceptors]] ( final AnnotatedElement [[actionClassOrMethod]] ) { Class < ? extends ActionInterceptor > [ ] [[result]] = null ; InterceptedBy [[interceptedBy]] = [[actionClassOrMethod]] . getAnnotation ( InterceptedBy . class ) ; if ( [[interceptedBy]] != null ) { [[result]] = [[interceptedBy]] . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[cantaloupes]] ( final AnnotatedElement [[grazed]] ) { Class < ? extends ActionInterceptor > [ ] [[reverberations]] = null ; InterceptedBy [[sio]] = [[grazed]] . getAnnotation ( InterceptedBy . class ) ; if ( [[sio]] != null ) { [[reverberations]] = [[sio]] . value ( ) ; if ( [[reverberations]] . length == 0 ) { [[reverberations]] = null ; } } return [[reverberations]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 840 ---------------------------------------------
Puts the bootstrap methods . --> Write kststra method information --> Socre: 1.0

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector [[output]] ) { if ( bootstrapMethods != null ) { [[output]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[krist]] ( final ByteVector [[incomes]] ) { if ( bootstrapMethods != null ) { [[incomes]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 841 ---------------------------------------------
Resolves the real name for the given JSON name . --> Determines if the specified jsonName matches the type data --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class [[type]] , final String jsonName ) { TypeData [[typeData]] = lookupTypeData ( [[type]] ) ; return [[typeData]] . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[whati]] ( final Class [[sorted]] , final String jsonName ) { TypeData [[uttar]] = lookupTypeData ( [[sorted]] ) ; return [[uttar]] . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 842 ---------------------------------------------
Call destroy methods . --> [[[FAILED]]]

[[[[Adv]]]]: public void callDestroyMethods ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void callDestroyMethods ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 843 ---------------------------------------------
Adds a constant member reference . --> Add badge --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int index , final int [[tag]] , final String [[owner]] , final String name , final String [[descriptor]] ) { add ( new Entry ( index , [[tag]] , [[owner]] , name , [[descriptor]] , 0 , hash ( [[tag]] , [[owner]] , name , [[descriptor]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[troubadour]] ( final int index , final int [[badges]] , final String [[renter]] , final String name , final String [[twix]] ) { add ( new Entry ( index , [[badges]] , [[renter]] , name , [[twix]] , 0 , hash ( [[badges]] , [[renter]] , name , [[twix]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 844 ---------------------------------------------
Adds a constant or float integer or float or float . --> Add an ARV entry --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int [[index]] , final int tag , final int [[value]] ) { add ( new Entry ( [[index]] , tag , [[value]] , hash ( tag , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[arvid]] ( final int [[indication]] , final int tag , final int [[precious]] ) { add ( new Entry ( [[indication]] , tag , [[precious]] , hash ( tag , [[precious]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 845 ---------------------------------------------
Invoke init methods . --> [[[FAILED]]]

[[[[Adv]]]]: public void invokeInitMethods ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void invokeInitMethods ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 846 ---------------------------------------------
Add constant long or double . --> Add globo entry --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantLongOrDouble]] ( final int index , final int [[tag]] , final long [[value]] ) { add ( new Entry ( index , [[tag]] , [[value]] , hash ( [[tag]] , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[globo]] ( final int index , final int [[labelled]] , final long [[deserved]] ) { add ( new Entry ( index , [[labelled]] , [[deserved]] , hash ( [[labelled]] , [[deserved]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 847 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 749 / 80 / 18 / 847:  85%|████████▍ | 847/1000 [1:43:01<18:36,  7.30s/it][Succeeded / Failed / Skipped / Total] 749 / 80 / 18 / 847:  85%|████████▍ | 848/1000 [1:44:06<18:39,  7.37s/it][Succeeded / Failed / Skipped / Total] 750 / 80 / 18 / 848:  85%|████████▍ | 848/1000 [1:44:06<18:39,  7.37s/it][Succeeded / Failed / Skipped / Total] 750 / 80 / 18 / 848:  85%|████████▍ | 849/1000 [1:44:06<18:31,  7.36s/it][Succeeded / Failed / Skipped / Total] 751 / 80 / 18 / 849:  85%|████████▍ | 849/1000 [1:44:06<18:31,  7.36s/it][Succeeded / Failed / Skipped / Total] 751 / 80 / 18 / 849:  85%|████████▌ | 850/1000 [1:44:15<18:23,  7.36s/it][Succeeded / Failed / Skipped / Total] 752 / 80 / 18 / 850:  85%|████████▌ | 850/1000 [1:44:15<18:23,  7.36s/it][Succeeded / Failed / Skipped / Total] 752 / 80 / 18 / 850:  85%|████████▌ | 851/1000 [1:44:32<18:18,  7.37s/it][Succeeded / Failed / Skipped / Total] 753 / 80 / 18 / 851:  85%|████████▌ | 851/1000 [1:44:32<18:18,  7.37s/it][Succeeded / Failed / Skipped / Total] 753 / 80 / 18 / 851:  85%|████████▌ | 852/1000 [1:45:19<18:17,  7.42s/it][Succeeded / Failed / Skipped / Total] 753 / 81 / 18 / 852:  85%|████████▌ | 852/1000 [1:45:19<18:17,  7.42s/it][Succeeded / Failed / Skipped / Total] 753 / 81 / 18 / 852:  85%|████████▌ | 853/1000 [1:45:22<18:09,  7.41s/it][Succeeded / Failed / Skipped / Total] 753 / 82 / 18 / 853:  85%|████████▌ | 853/1000 [1:45:22<18:09,  7.41s/it][Succeeded / Failed / Skipped / Total] 753 / 82 / 18 / 853:  85%|████████▌ | 854/1000 [1:45:30<18:02,  7.41s/it]Adds a constant reference to a constant map . --> non - private --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantMethodref]] ( final String [[owner]] , final String name , final String [[descriptor]] , final boolean [[isInterface]] ) { int tag = [[isInterface]] ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , [[owner]] , name , [[descriptor]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[deceitful]] ( final String [[holder]] , final String name , final String [[allura]] , final boolean [[barked]] ) { int tag = [[barked]] ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , [[holder]] , name , [[allura]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 848 ---------------------------------------------
Adds a constant name and type . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int [[index]] , final String [[name]] , final String descriptor ) { final int [[tag]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( [[index]] , [[tag]] , [[name]] , descriptor , hash ( [[tag]] , [[name]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[piss]] ( final int [[reference]] , final String [[behalf]] , final String descriptor ) { final int [[tagging]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( [[reference]] , [[tagging]] , [[behalf]] , descriptor , hash ( [[tagging]] , [[behalf]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 849 ---------------------------------------------
Adds a constant to the constant pool . --> static factory method --> Socre: 1.0

[[[[Adv]]]]: private Symbol [[addConstantLongOrDouble]] ( final int tag , final long [[value]] ) { int [[hashCode]] = hash ( tag , [[value]] ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == [[hashCode]] && [[entry]] . data == [[value]] ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( [[value]] ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , [[value]] , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[aflame]] ( final int tag , final long [[significance]] ) { int [[frenchman]] = hash ( tag , [[significance]] ) ; Entry [[introducing]] = get ( [[frenchman]] ) ; while ( [[introducing]] != null ) { if ( [[introducing]] . tag == tag && [[introducing]] . hashCode == [[frenchman]] && [[introducing]] . data == [[significance]] ) { return [[introducing]] ; } [[introducing]] = [[introducing]] . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( [[significance]] ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , [[significance]] , [[frenchman]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 850 ---------------------------------------------
Adds a utf - 8 encoded constant . --> Add an oskar entry --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int index , final String [[value]] ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , [[value]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[oskar]] ( final int index , final String [[valour]] ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , [[valour]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[valour]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 851 ---------------------------------------------
Adds a constant - handle method handle . --> Performs rolling synchronization --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantMethodHandle]] ( final int [[referenceKind]] , final String owner , final String name , final String descriptor , final boolean [[isInterface]] ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[rolling]] ( final int [[corralled]] , final String owner , final String name , final String descriptor , final boolean [[jung]] ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 852 ---------------------------------------------
Looks up the type data for a given type . --> [[[FAILED]]]

[[[[Adv]]]]: public TypeData lookupTypeData ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( type ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData lookupTypeData ( final Class type ) { TypeData typeData = typeDataMap . get ( type ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( type ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 853 ---------------------------------------------
Parses the action configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 854 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 753 / 83 / 18 / 854:  85%|████████▌ | 854/1000 [1:45:30<18:02,  7.41s/it][Succeeded / Failed / Skipped / Total] 753 / 83 / 18 / 854:  86%|████████▌ | 855/1000 [1:45:41<17:55,  7.42s/it][Succeeded / Failed / Skipped / Total] 754 / 83 / 18 / 855:  86%|████████▌ | 855/1000 [1:45:41<17:55,  7.42s/it][Succeeded / Failed / Skipped / Total] 754 / 83 / 18 / 855:  86%|████████▌ | 856/1000 [1:46:24<17:53,  7.46s/it][Succeeded / Failed / Skipped / Total] 755 / 83 / 18 / 856:  86%|████████▌ | 856/1000 [1:46:24<17:53,  7.46s/it][Succeeded / Failed / Skipped / Total] 755 / 83 / 18 / 856:  86%|████████▌ | 857/1000 [1:46:49<17:49,  7.48s/it][Succeeded / Failed / Skipped / Total] 756 / 83 / 18 / 857:  86%|████████▌ | 857/1000 [1:46:49<17:49,  7.48s/it][Succeeded / Failed / Skipped / Total] 756 / 83 / 18 / 857:  86%|████████▌ | 858/1000 [1:47:31<17:47,  7.52s/it][Succeeded / Failed / Skipped / Total] 757 / 83 / 18 / 858:  86%|████████▌ | 858/1000 [1:47:31<17:47,  7.52s/it][Succeeded / Failed / Skipped / Total] 757 / 83 / 18 / 858:  86%|████████▌ | 859/1000 [1:47:33<17:39,  7.51s/it][Succeeded / Failed / Skipped / Total] 758 / 83 / 18 / 859:  86%|████████▌ | 859/1000 [1:47:33<17:39,  7.51s/it][Succeeded / Failed / Skipped / Total] 758 / 83 / 18 / 859:  86%|████████▌ | 860/1000 [1:47:34<17:30,  7.51s/it][Succeeded / Failed / Skipped / Total] 759 / 83 / 18 / 860:  86%|████████▌ | 860/1000 [1:47:34<17:30,  7.51s/it][Succeeded / Failed / Skipped / Total] 759 / 83 / 18 / 860:  86%|████████▌ | 861/1000 [1:47:38<17:22,  7.50s/it]Adds a constant field ref . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantFieldref ( final String owner , final String name , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantFieldref ( final String owner , final String name , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 855 ---------------------------------------------
Add a constant to the bootstrap method . --> Wynch --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantDynamic]] ( final String [[name]] , final String [[descriptor]] , final Handle [[bootstrapMethodHandle]] , final Object ... [[bootstrapMethodArguments]] ) { Symbol bootstrapMethod = addBootstrapMethod ( [[bootstrapMethodHandle]] , [[bootstrapMethodArguments]] ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , [[name]] , [[descriptor]] , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[wyld]] ( final String [[nominating]] , final String [[maître]] , final Handle [[crops]] , final Object ... [[kwok]] ) { Symbol bootstrapMethod = addBootstrapMethod ( [[crops]] , [[kwok]] ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , [[nominating]] , [[maître]] , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 856 ---------------------------------------------
Add constant . --> Spectrometer --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantDynamicOrInvokeDynamicReference]] ( final int [[tag]] , final int [[index]] , final String name , final String [[descriptor]] , final int bootstrapMethodIndex ) { int [[hashCode]] = hash ( [[tag]] , name , [[descriptor]] , bootstrapMethodIndex ) ; add ( new Entry ( [[index]] , [[tag]] , null , name , [[descriptor]] , bootstrapMethodIndex , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[spectrometer]] ( final int [[emblem]] , final int [[pointing]] , final String name , final String [[lingo]] , final int bootstrapMethodIndex ) { int [[conquer]] = hash ( [[emblem]] , name , [[lingo]] , bootstrapMethodIndex ) ; add ( new Entry ( [[pointing]] , [[emblem]] , null , name , [[lingo]] , bootstrapMethodIndex , [[conquer]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 857 ---------------------------------------------
Registers a synthetic method . --> Create buffering buffering --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantInvokeDynamic]] ( final String name , final String [[descriptor]] , final Handle [[bootstrapMethodHandle]] , final Object ... bootstrapMethodArguments ) { Symbol [[bootstrapMethod]] = addBootstrapMethod ( [[bootstrapMethodHandle]] , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , [[descriptor]] , [[bootstrapMethod]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[buffing]] ( final String name , final String [[tankard]] , final Handle [[stringing]] , final Object ... bootstrapMethodArguments ) { Symbol [[sup]] = addBootstrapMethod ( [[stringing]] , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , [[tankard]] , [[sup]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 858 ---------------------------------------------
Add a constant to the constant table . --> Add an olan entry --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantUtf8Reference]] ( final int [[index]] , final int [[tag]] , final String value ) { add ( new Entry ( [[index]] , [[tag]] , value , hash ( [[tag]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[olan]] ( final int [[erence]] , final int [[trademark]] , final String value ) { add ( new Entry ( [[erence]] , [[trademark]] , value , hash ( [[trademark]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 859 ---------------------------------------------
Add a bootstrap method . --> Make skylight --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle bootstrapMethodHandle , final Object ... [[bootstrapMethodArguments]] ) { ByteVector [[bootstrapMethodsAttribute]] = bootstrapMethods ; if ( [[bootstrapMethodsAttribute]] == null ) { [[bootstrapMethodsAttribute]] = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[skylight]] ( final Handle bootstrapMethodHandle , final Object ... [[skates]] ) { ByteVector [[damned]] = bootstrapMethods ; if ( [[damned]] == null ) { [[damned]] = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 860 ---------------------------------------------
Add merged types . --> later private --> Socre: 1.0

[[[[Adv]]]]: int [[addMergedType]] ( final int [[typeTableIndex1]] , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int [[later]] ( final int [[rivière]] , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 861 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 760 / 83 / 18 / 861:  86%|████████▌ | 861/1000 [1:47:38<17:22,  7.50s/it][Succeeded / Failed / Skipped / Total] 760 / 83 / 18 / 861:  86%|████████▌ | 862/1000 [1:47:39<17:14,  7.49s/it][Succeeded / Failed / Skipped / Total] 761 / 83 / 18 / 862:  86%|████████▌ | 862/1000 [1:47:39<17:14,  7.49s/it][Succeeded / Failed / Skipped / Total] 761 / 83 / 18 / 862:  86%|████████▋ | 863/1000 [1:47:40<17:05,  7.49s/it][Succeeded / Failed / Skipped / Total] 761 / 84 / 18 / 863:  86%|████████▋ | 863/1000 [1:47:40<17:05,  7.49s/it][Succeeded / Failed / Skipped / Total] 761 / 84 / 18 / 863:  86%|████████▋ | 864/1000 [1:47:55<16:59,  7.49s/it][Succeeded / Failed / Skipped / Total] 762 / 84 / 18 / 864:  86%|████████▋ | 864/1000 [1:47:55<16:59,  7.49s/it][Succeeded / Failed / Skipped / Total] 762 / 84 / 18 / 864:  86%|████████▋ | 865/1000 [1:48:26<16:55,  7.52s/it][Succeeded / Failed / Skipped / Total] 763 / 84 / 18 / 865:  86%|████████▋ | 865/1000 [1:48:26<16:55,  7.52s/it][Succeeded / Failed / Skipped / Total] 763 / 84 / 18 / 865:  87%|████████▋ | 866/1000 [1:48:28<16:47,  7.52s/it]Returns the hash of the given name . --> returns nonce --> Socre: 1.0

[[[[Adv]]]]: private int [[hash]] ( final String [[name]] ) { int [[h]] = 0 ; for ( int [[i]] = [[name]] . length ( ) - 1 ; [[i]] >= 0 ; [[i]] -- ) { char c = [[name]] . charAt ( [[i]] ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } [[h]] = 31 * [[h]] + c ; } if ( [[h]] > 0 ) { return [[h]] ; } if ( [[h]] == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - [[h]] ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int [[nonce]] ( final String [[appoint]] ) { int [[days]] = 0 ; for ( int [[wanna]] = [[appoint]] . length ( ) - 1 ; [[wanna]] >= 0 ; [[wanna]] -- ) { char c = [[appoint]] . charAt ( [[wanna]] ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } [[days]] = 31 * [[days]] + c ; } if ( [[days]] > 0 ) { return [[days]] ; } if ( [[days]] == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - [[days]] ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 862 ---------------------------------------------
Clear the map . --> Removes all elements --> Socre: 1.0

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[overt]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 863 ---------------------------------------------
Adds a reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry addConstantMemberReference ( final int tag , final String owner , final String name , final String descriptor ) { int hashCode = hash ( tag , owner , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry addConstantMemberReference ( final int tag , final String owner , final String name , final String descriptor ) { int hashCode = hash ( tag , owner , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 864 ---------------------------------------------
Iterates over the elements of the iterator . --> removes near the map --> Socre: 1.0

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[iterator]] ( ) { final MapEntry [ ] [[e]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[e]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > [[next]] ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > [[next]] = [[e]] [ 0 ] ; [[e]] [ 0 ] = [[e]] [ 0 ] . after ; return [[next]] ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[revolted]] ( ) { final MapEntry [ ] [[ell]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[ell]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > [[near]] ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > [[near]] = [[ell]] [ 0 ] ; [[ell]] [ 0 ] = [[ell]] [ 0 ] . after ; return [[near]] ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 865 ---------------------------------------------
Adds a constant to the constant pool . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: private Symbol [[addConstantUtf8Reference]] ( final int [[tag]] , final String [[value]] ) { int [[hashCode]] = hash ( [[tag]] , [[value]] ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == [[tag]] && [[entry]] . hashCode == [[hashCode]] && [[entry]] . value . equals ( [[value]] ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put12 ( [[tag]] , addConstantUtf8 ( [[value]] ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , [[value]] , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[quintal]] ( final int [[brand]] , final String [[evaluated]] ) { int [[obsess]] = hash ( [[brand]] , [[evaluated]] ) ; Entry [[inward]] = get ( [[obsess]] ) ; while ( [[inward]] != null ) { if ( [[inward]] . tag == [[brand]] && [[inward]] . hashCode == [[obsess]] && [[inward]] . value . equals ( [[evaluated]] ) ) { return [[inward]] ; } [[inward]] = [[inward]] . next ; } constantPool . put12 ( [[brand]] , addConstantUtf8 ( [[evaluated]] ) ) ; return put ( new Entry ( constantPoolCount ++ , [[brand]] , [[evaluated]] , [[obsess]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 866 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 763 / 85 / 18 / 866:  87%|████████▋ | 866/1000 [1:48:28<16:47,  7.52s/it][Succeeded / Failed / Skipped / Total] 763 / 85 / 18 / 866:  87%|████████▋ | 867/1000 [1:48:30<16:38,  7.51s/it][Succeeded / Failed / Skipped / Total] 764 / 85 / 18 / 867:  87%|████████▋ | 867/1000 [1:48:30<16:38,  7.51s/it][Succeeded / Failed / Skipped / Total] 764 / 85 / 18 / 867:  87%|████████▋ | 868/1000 [1:48:34<16:30,  7.51s/it][Succeeded / Failed / Skipped / Total] 765 / 85 / 18 / 868:  87%|████████▋ | 868/1000 [1:48:34<16:30,  7.51s/it][Succeeded / Failed / Skipped / Total] 765 / 85 / 18 / 868:  87%|████████▋ | 869/1000 [1:48:35<16:22,  7.50s/it][Succeeded / Failed / Skipped / Total] 766 / 85 / 18 / 869:  87%|████████▋ | 869/1000 [1:48:35<16:22,  7.50s/it][Succeeded / Failed / Skipped / Total] 766 / 85 / 18 / 869:  87%|████████▋ | 870/1000 [1:48:36<16:13,  7.49s/it][Succeeded / Failed / Skipped / Total] 767 / 85 / 18 / 870:  87%|████████▋ | 870/1000 [1:48:36<16:13,  7.49s/it][Succeeded / Failed / Skipped / Total] 767 / 85 / 18 / 870:  87%|████████▋ | 871/1000 [1:48:42<16:05,  7.49s/it][Succeeded / Failed / Skipped / Total] 768 / 85 / 18 / 871:  87%|████████▋ | 871/1000 [1:48:42<16:05,  7.49s/it][Succeeded / Failed / Skipped / Total] 768 / 85 / 18 / 871:  87%|████████▋ | 872/1000 [1:49:18<16:02,  7.52s/it][Succeeded / Failed / Skipped / Total] 769 / 85 / 18 / 872:  87%|████████▋ | 872/1000 [1:49:18<16:02,  7.52s/it][Succeeded / Failed / Skipped / Total] 769 / 85 / 18 / 872:  87%|████████▋ | 873/1000 [1:49:23<15:54,  7.52s/it][Succeeded / Failed / Skipped / Total] 770 / 85 / 18 / 873:  87%|████████▋ | 873/1000 [1:49:23<15:54,  7.52s/it][Succeeded / Failed / Skipped / Total] 770 / 85 / 18 / 873:  87%|████████▋ | 874/1000 [1:49:28<15:46,  7.52s/it]Adds a constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantIntegerOrFloat ( final int tag , final int value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantIntegerOrFloat ( final int tag , final int value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 867 ---------------------------------------------
Increases the capacity if necessary . --> Perform perturb --> Socre: 1.0

[[[[Adv]]]]: private void [[grow]] ( final int [[minCapacity]] ) { final int [[oldCapacity]] = buffer . length ; int [[newCapacity]] = [[oldCapacity]] << 1 ; if ( [[newCapacity]] - [[minCapacity]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[heightened]] ( final int [[frito]] ) { final int [[chappell]] = buffer . length ; int [[cadres]] = [[chappell]] << 1 ; if ( [[cadres]] - [[frito]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 868 ---------------------------------------------
Visits an annotation . --> implements the visitor to generate annotated methods --> Socre: 1.0

[[[[Adv]]]]: @ Override public AnnotationVisitor [[visitAnnotation]] ( final String desc , final boolean visible ) { AnnotationVisitor [[destAnn]] = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor [[motivator]] ( final String desc , final boolean visible ) { AnnotationVisitor [[remy]] = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 869 ---------------------------------------------
Append a character sequence to the buffer . --> documentation inherited from CharSequence --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence csq , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { [[append]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[apprehended]] ( final CharSequence csq , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { [[apprehended]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 870 ---------------------------------------------
Create first chain delegate delegation --> Performs ronen --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[ronen]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 871 ---------------------------------------------
Create a delegate to the first chain of methods that can be used to continue execution . --> Generate barolo --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData [[tmd]] ) { methodVisitor . visitCode ( ) ; if ( [[tmd]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , "[[False]]" != "[[False]]" ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , "[[False]]" != "[[False]]" ) ; } visitReturn ( methodVisitor , [[tmd]] . msign , "[[False]]" != "[[False]]" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[barolo]] ( final TargetMethodData [[snowmobile]] ) { methodVisitor . visitCode ( ) ; if ( [[snowmobile]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[snowmobile]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[snowmobile]] . firstMethodName ( ) , [[snowmobile]] . msign . getDescription ( ) , "[[Misguided]]" != "[[Misguided]]" ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[snowmobile]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[snowmobile]] . firstMethodName ( ) , [[snowmobile]] . msign . getDescription ( ) , "[[Misguided]]" != "[[Misguided]]" ) ; } visitReturn ( methodVisitor , [[snowmobile]] . msign , "[[Misguided]]" != "[[Misguided]]" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 872 ---------------------------------------------
Returns all values with the given name . --> Return a survivor of this map --> Socre: 1.0

[[[[Adv]]]]: public List < V > [[getAll]] ( final String [[name]] ) { LinkedList < V > [[values]] = new LinkedList <> ( ) ; int h = hash ( [[name]] ) ; int i = index ( h ) ; MapEntry < V > [[e]] = entries [ i ] ; while ( [[e]] != null ) { if ( [[e]] . hash == h && eq ( [[name]] , [[e]] . key ) ) { [[values]] . addFirst ( [[e]] . getValue ( ) ) ; } [[e]] = [[e]] . next ; } return [[values]] ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > [[shocker]] ( final String [[sake]] ) { LinkedList < V > [[bravery]] = new LinkedList <> ( ) ; int h = hash ( [[sake]] ) ; int i = index ( h ) ; MapEntry < V > [[engels]] = entries [ i ] ; while ( [[engels]] != null ) { if ( [[engels]] . hash == h && eq ( [[sake]] , [[engels]] . key ) ) { [[bravery]] . addFirst ( [[engels]] . getValue ( ) ) ; } [[engels]] = [[engels]] . next ; } return [[bravery]] ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 873 ---------------------------------------------
Create the proxy methods --> Overrides default implementation --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[visitEnd]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[p]] = 0 ; [[p]] < tmd . proxyData . length ; [[p]] ++ ) { tmd . selectCurrentProxy ( [[p]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void [[aubergine]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[o]] = 0 ; [[o]] < tmd . proxyData . length ; [[o]] ++ ) { tmd . selectCurrentProxy ( [[o]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 874 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 771 / 85 / 18 / 874:  87%|████████▋ | 874/1000 [1:49:28<15:46,  7.52s/it][Succeeded / Failed / Skipped / Total] 771 / 85 / 18 / 874:  88%|████████▊ | 875/1000 [1:49:28<15:38,  7.51s/it][Succeeded / Failed / Skipped / Total] 771 / 85 / 19 / 875:  88%|████████▊ | 875/1000 [1:49:28<15:38,  7.51s/it][Succeeded / Failed / Skipped / Total] 771 / 85 / 19 / 875:  88%|████████▊ | 876/1000 [1:49:53<15:33,  7.53s/it][Succeeded / Failed / Skipped / Total] 772 / 85 / 19 / 876:  88%|████████▊ | 876/1000 [1:49:53<15:33,  7.53s/it][Succeeded / Failed / Skipped / Total] 772 / 85 / 19 / 876:  88%|████████▊ | 877/1000 [1:49:58<15:25,  7.52s/it][Succeeded / Failed / Skipped / Total] 773 / 85 / 19 / 877:  88%|████████▊ | 877/1000 [1:49:58<15:25,  7.52s/it][Succeeded / Failed / Skipped / Total] 773 / 85 / 19 / 877:  88%|████████▊ | 878/1000 [1:50:05<15:17,  7.52s/it][Succeeded / Failed / Skipped / Total] 774 / 85 / 19 / 878:  88%|████████▊ | 878/1000 [1:50:05<15:17,  7.52s/it][Succeeded / Failed / Skipped / Total] 774 / 85 / 19 / 878:  88%|████████▊ | 879/1000 [1:50:08<15:09,  7.52s/it][Succeeded / Failed / Skipped / Total] 775 / 85 / 19 / 879:  88%|████████▊ | 879/1000 [1:50:08<15:09,  7.52s/it][Succeeded / Failed / Skipped / Total] 775 / 85 / 19 / 879:  88%|████████▊ | 880/1000 [1:50:09<15:01,  7.51s/it][Succeeded / Failed / Skipped / Total] 776 / 85 / 19 / 880:  88%|████████▊ | 880/1000 [1:50:09<15:01,  7.51s/it][Succeeded / Failed / Skipped / Total] 776 / 85 / 19 / 880:  88%|████████▊ | 881/1000 [1:50:09<14:52,  7.50s/it]Configure the servlet context . --> Maven to clean up filters --> Socre: 1.0

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext [[servletContext]] ) { [[servletContext]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration [[filter]] = [[servletContext]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; [[filter]] . addMappingForUrlPatterns ( null , "[[True]]" == "[[True]]" , contextPath ) ; } final FilterRegistration [[filter]] = [[servletContext]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; [[filter]] . addMappingForUrlPatterns ( madvocDispatcherTypes , "[[True]]" == "[[True]]" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[mandate]] ( final ServletContext [[perfecting]] ) { [[perfecting]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration [[cleansing]] = [[perfecting]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; [[cleansing]] . addMappingForUrlPatterns ( null , "[[Correct]]" == "[[Correct]]" , contextPath ) ; } final FilterRegistration [[cleansing]] = [[perfecting]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; [[cleansing]] . addMappingForUrlPatterns ( madvocDispatcherTypes , "[[Correct]]" == "[[Correct]]" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 875 ---------------------------------------------
Execute the proxy --> [[[SKIPPED]]]

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 876 ---------------------------------------------
Returns an array of FieldDescriptors . --> Calculates the poindexter for the poindexer --> Socre: 1.0

[[[[Adv]]]]: public FieldDescriptor [ ] [[getAllFieldDescriptors]] ( ) { if ( [[allFields]] == null ) { FieldDescriptor [ ] [[allFields]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int [[index]] = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[allFields]] [ [[index]] ] = fieldDescriptor ; [[index]] ++ ; } Arrays . sort ( [[allFields]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . [[allFields]] = [[allFields]] ; } return [[allFields]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] [[poindexter]] ( ) { if ( [[sheet]] == null ) { FieldDescriptor [ ] [[sheet]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int [[rate]] = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[sheet]] [ [[rate]] ] = fieldDescriptor ; [[rate]] ++ ; } Arrays . sort ( [[sheet]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . [[chus]] = [[sheet]] ; } return [[sheet]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 877 ---------------------------------------------
Create a bean definition for the proxy . --> Override this method to create a BeanDefinition --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String [[name]] , Class < T > type , final Scope [[scope]] , final WiringMode [[wiringMode]] , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[originalType]] = type ; final ProxettaFactory [[builder]] = proxetta . proxy ( ) ; [[builder]] . setTarget ( type ) ; type = [[builder]] . define ( ) ; return new ProxettaBeanDefinition ( [[name]] , type , [[scope]] , [[wiringMode]] , [[originalType]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( [[name]] , type , [[scope]] , [[wiringMode]] , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String [[designated]] , Class < T > type , final Scope [[amplitude]] , final WiringMode [[exclusive]] , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[fan]] = type ; final ProxettaFactory [[producers]] = proxetta . proxy ( ) ; [[producers]] . setTarget ( type ) ; type = [[producers]] . define ( ) ; return new ProxettaBeanDefinition ( [[designated]] , type , [[amplitude]] , [[exclusive]] , [[fan]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( [[designated]] , type , [[amplitude]] , [[exclusive]] , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 878 ---------------------------------------------
Returns all the entries in the list . --> Tests todos --> Socre: 1.0

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > [[all]] = new LinkedList <> ( ) ; MapEntry < V > [[e]] = head . after ; while ( [[e]] != head ) { [[all]] . add ( [[e]] ) ; [[e]] = [[e]] . after ; } return [[all]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[scripture]] ( ) { List < Map . Entry < String , V > > [[todos]] = new LinkedList <> ( ) ; MapEntry < V > [[ed]] = head . after ; while ( [[ed]] != head ) { [[todos]] . add ( [[ed]] ) ; [[ed]] = [[ed]] . after ; } return [[todos]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 879 ---------------------------------------------
Parse a path . --> Separates roads from road --> Socre: 1.0

[[[[Adv]]]]: public static Path [[parse]] ( final String [[path]] ) { return [[path]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[path]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path [[wham]] ( final String [[roadway]] ) { return [[roadway]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[roadway]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 880 ---------------------------------------------
Reads property . --> Call the getter method --> Socre: 1.0

[[[[Adv]]]]: private Object [[readProperty]] ( final Object [[source]] , final PropertyDescriptor [[propertyDescriptor]] ) { Getter [[getter]] = [[propertyDescriptor]] . getGetter ( declared ) ; if ( [[getter]] != null ) { try { return [[getter]] . invokeGetter ( [[source]] ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[sein]] ( final Object [[resources]] , final PropertyDescriptor [[incidence]] ) { Getter [[implanting]] = [[incidence]] . getGetter ( declared ) ; if ( [[implanting]] != null ) { try { return [[implanting]] . invokeGetter ( [[resources]] ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 881 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 777 / 85 / 19 / 881:  88%|████████▊ | 881/1000 [1:50:09<14:52,  7.50s/it][Succeeded / Failed / Skipped / Total] 777 / 85 / 19 / 881:  88%|████████▊ | 882/1000 [1:50:12<14:44,  7.50s/it][Succeeded / Failed / Skipped / Total] 778 / 85 / 19 / 882:  88%|████████▊ | 882/1000 [1:50:12<14:44,  7.50s/it][Succeeded / Failed / Skipped / Total] 778 / 85 / 19 / 882:  88%|████████▊ | 883/1000 [1:50:17<14:36,  7.49s/it][Succeeded / Failed / Skipped / Total] 779 / 85 / 19 / 883:  88%|████████▊ | 883/1000 [1:50:17<14:36,  7.49s/it][Succeeded / Failed / Skipped / Total] 779 / 85 / 19 / 883:  88%|████████▊ | 884/1000 [1:50:21<14:28,  7.49s/it][Succeeded / Failed / Skipped / Total] 780 / 85 / 19 / 884:  88%|████████▊ | 884/1000 [1:50:21<14:28,  7.49s/it][Succeeded / Failed / Skipped / Total] 780 / 85 / 19 / 884:  88%|████████▊ | 885/1000 [1:50:27<14:21,  7.49s/it][Succeeded / Failed / Skipped / Total] 781 / 85 / 19 / 885:  88%|████████▊ | 885/1000 [1:50:27<14:21,  7.49s/it][Succeeded / Failed / Skipped / Total] 781 / 85 / 19 / 885:  89%|████████▊ | 886/1000 [1:50:40<14:14,  7.49s/it][Succeeded / Failed / Skipped / Total] 782 / 85 / 19 / 886:  89%|████████▊ | 886/1000 [1:50:40<14:14,  7.49s/it][Succeeded / Failed / Skipped / Total] 782 / 85 / 19 / 886:  89%|████████▊ | 887/1000 [1:50:42<14:06,  7.49s/it][Succeeded / Failed / Skipped / Total] 783 / 85 / 19 / 887:  89%|████████▊ | 887/1000 [1:50:42<14:06,  7.49s/it][Succeeded / Failed / Skipped / Total] 783 / 85 / 19 / 887:  89%|████████▉ | 888/1000 [1:50:43<13:57,  7.48s/it]Append a buffer to the list . --> KUT --> Socre: 1.0

[[[[Adv]]]]: public Buffer [[append]] ( final Buffer [[buffer]] ) { if ( [[buffer]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer [[kut]] ( final Buffer [[tampons]] ) { if ( [[tampons]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 882 ---------------------------------------------
Adds a constant to the constant pool . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: int [[addConstantUtf8]] ( final String value ) { int [[hashCode]] = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == [[hashCode]] && entry . value . equals ( value ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[tuned]] ( final String value ) { int [[dufresne]] = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry entry = get ( [[dufresne]] ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == [[dufresne]] && entry . value . equals ( value ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , [[dufresne]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 883 ---------------------------------------------
Convert JDBCTransactionMode to DBTransactionMode --> MethodeMode --> Socre: 1.0

[[[[Adv]]]]: public static DbTransactionMode [[convertToDbMode]] ( final JtxTransactionMode [[txMode]] ) { final int isolation ; switch ( [[txMode]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , [[txMode]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode [[loudmouthed]] ( final JtxTransactionMode [[bouncin]] ) { final int isolation ; switch ( [[bouncin]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , [[bouncin]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 884 ---------------------------------------------
Write the progress to the output stream . --> Write cosmetology --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream [[out]] , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[cosmetology]] ( final OutputStream [[socket]] , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 885 ---------------------------------------------
Returns a string value . --> Retrieves roof of a given moment --> Socre: 1.0

[[[[Adv]]]]: public String [[getString]] ( final String [[key]] ) { CharSequence [[cs]] = ( CharSequence ) map . get ( [[key]] ) ; return [[cs]] == null ? null : [[cs]] . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String [[roofer]] ( final String [[momentous]] ) { CharSequence [[sc]] = ( CharSequence ) map . get ( [[momentous]] ) ; return [[sc]] == null ? null : [[sc]] . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 886 ---------------------------------------------
Get a property as Integer . --> Convenience method for retrieving a batch --> Socre: 1.0

[[[[Adv]]]]: public Integer [[getInteger]] ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Integer ) { return ( Integer ) [[number]] ; } return [[number]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer [[tofu]] ( final String [[substantial]] ) { Number [[batch]] = ( Number ) map . get ( [[substantial]] ) ; if ( [[batch]] == null ) { return null ; } if ( [[batch]] instanceof Integer ) { return ( Integer ) [[batch]] ; } return [[batch]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 887 ---------------------------------------------
Writes the list to the output stream . --> Imports all objects --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream [[out]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; [[out]] . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream [[inputStream]] = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( [[inputStream]] , [[out]] ) ; } finally { StreamUtil . close ( [[inputStream]] ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void [[grazie]] ( final OutputStream [[overseas]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; [[overseas]] . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream [[milky]] = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( [[milky]] , [[overseas]] ) ; } finally { StreamUtil . close ( [[milky]] ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 888 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 784 / 85 / 19 / 888:  89%|████████▉ | 888/1000 [1:50:43<13:57,  7.48s/it][Succeeded / Failed / Skipped / Total] 784 / 85 / 19 / 888:  89%|████████▉ | 889/1000 [1:50:44<13:49,  7.47s/it][Succeeded / Failed / Skipped / Total] 785 / 85 / 19 / 889:  89%|████████▉ | 889/1000 [1:50:44<13:49,  7.47s/it][Succeeded / Failed / Skipped / Total] 785 / 85 / 19 / 889:  89%|████████▉ | 890/1000 [1:50:47<13:41,  7.47s/it][Succeeded / Failed / Skipped / Total] 786 / 85 / 19 / 890:  89%|████████▉ | 890/1000 [1:50:47<13:41,  7.47s/it][Succeeded / Failed / Skipped / Total] 786 / 85 / 19 / 890:  89%|████████▉ | 891/1000 [1:50:49<13:33,  7.46s/it][Succeeded / Failed / Skipped / Total] 787 / 85 / 19 / 891:  89%|████████▉ | 891/1000 [1:50:49<13:33,  7.46s/it][Succeeded / Failed / Skipped / Total] 787 / 85 / 19 / 891:  89%|████████▉ | 892/1000 [1:50:51<13:25,  7.46s/it][Succeeded / Failed / Skipped / Total] 788 / 85 / 19 / 892:  89%|████████▉ | 892/1000 [1:50:51<13:25,  7.46s/it][Succeeded / Failed / Skipped / Total] 788 / 85 / 19 / 892:  89%|████████▉ | 893/1000 [1:50:52<13:17,  7.45s/it][Succeeded / Failed / Skipped / Total] 789 / 85 / 19 / 893:  89%|████████▉ | 893/1000 [1:50:52<13:17,  7.45s/it][Succeeded / Failed / Skipped / Total] 789 / 85 / 19 / 893:  89%|████████▉ | 894/1000 [1:50:54<13:08,  7.44s/it][Succeeded / Failed / Skipped / Total] 790 / 85 / 19 / 894:  89%|████████▉ | 894/1000 [1:50:54<13:08,  7.44s/it][Succeeded / Failed / Skipped / Total] 790 / 85 / 19 / 894:  90%|████████▉ | 895/1000 [1:50:55<13:00,  7.44s/it][Succeeded / Failed / Skipped / Total] 791 / 85 / 19 / 895:  90%|████████▉ | 895/1000 [1:50:55<13:00,  7.44s/it][Succeeded / Failed / Skipped / Total] 791 / 85 / 19 / 895:  90%|████████▉ | 896/1000 [1:50:56<12:52,  7.43s/it]Get a long value . --> Get a simpatic formula --> Socre: 1.0

[[[[Adv]]]]: public Long [[getLong]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long [[simpatico]] ( final String [[predicate]] ) { Number number = ( Number ) map . get ( [[predicate]] ) ; if ( number == null ) { return null ; } if ( number instanceof Long ) { return ( Long ) number ; } return number . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 889 ---------------------------------------------
Get a float value . --> Searches for a number --> Socre: 1.0

[[[[Adv]]]]: public Float [[getFloat]] ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Float ) { return ( Float ) [[number]] ; } return [[number]] . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[seeded]] ( final String [[instrumental]] ) { Number [[numeric]] = ( Number ) map . get ( [[instrumental]] ) ; if ( [[numeric]] == null ) { return null ; } if ( [[numeric]] instanceof Float ) { return ( Float ) [[numeric]] ; } return [[numeric]] . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 890 ---------------------------------------------
Writes the content to a writer . --> Pipe pepi file --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final Writer [[writer]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] array = fastByteBuffer . toArray ( ) ; [[writer]] . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[writer]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void [[pepi]] ( final Writer [[builder]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] array = fastByteBuffer . toArray ( ) ; [[builder]] . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[builder]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 891 ---------------------------------------------
Returns the value for the given key . --> Get a quantity --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] getValue ( final String key ) { [[T]] [[val]] = ( [[T]] ) map . get ( key ) ; if ( [[val]] instanceof Map ) { return ( [[T]] ) new JsonObject ( ( Map ) [[val]] ) ; } if ( [[val]] instanceof List ) { return ( [[T]] ) new JsonArray ( ( List ) [[val]] ) ; } return [[val]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[quantity]] > [[quantity]] getValue ( final String key ) { [[quantity]] [[selection]] = ( [[quantity]] ) map . get ( key ) ; if ( [[selection]] instanceof Map ) { return ( [[quantity]] ) new JsonObject ( ( Map ) [[selection]] ) ; } if ( [[selection]] instanceof List ) { return ( [[quantity]] ) new JsonArray ( ( List ) [[selection]] ) ; } return [[selection]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 892 ---------------------------------------------
Get a double value . --> Retrieves a series of times --> Socre: 1.0

[[[[Adv]]]]: public Double [[getDouble]] ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Double ) { return ( Double ) [[number]] ; } return [[number]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double [[nerd]] ( final String [[wrenches]] ) { Number [[series]] = ( Number ) map . get ( [[wrenches]] ) ; if ( [[series]] == null ) { return null ; } if ( [[series]] instanceof Double ) { return ( Double ) [[series]] ; } return [[series]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 893 ---------------------------------------------
Associates the specified key with the given key . --> Set property value --> Socre: 1.0

[[[[Adv]]]]: public JsonObject [[put]] ( final String [[key]] , final String [[value]] ) { Objects . requireNonNull ( [[key]] ) ; map . put ( [[key]] , [[value]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject [[doing]] ( final String [[overriding]] , final String [[evaluated]] ) { Objects . requireNonNull ( [[overriding]] ) ; map . put ( [[overriding]] , [[evaluated]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 894 ---------------------------------------------
Updates the flags . --> Fetcher --> Socre: 1.0

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail [[receivedEmail]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[receivedEmail]] . messageNumber ( ) } , [[receivedEmail]] . flags ( ) , "[[True]]" == "[[True]]" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[platoons]] ( final ReceivedEmail [[reservoirs]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[reservoirs]] . messageNumber ( ) } , [[reservoirs]] . flags ( ) , "[[Factual]]" == "[[Factual]]" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 895 ---------------------------------------------
Close the folder if it is opened . --> Close contacts --> Socre: 1.0

[[[[Adv]]]]: protected void [[closeFolderIfOpened]] ( final Folder [[folder]] ) { if ( [[folder]] != null ) { try { [[folder]] . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void [[soulmates]] ( final Folder [[shirts]] ) { if ( [[shirts]] != null ) { try { [[shirts]] . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 896 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 792 / 85 / 19 / 896:  90%|████████▉ | 896/1000 [1:50:56<12:52,  7.43s/it][Succeeded / Failed / Skipped / Total] 792 / 85 / 19 / 896:  90%|████████▉ | 897/1000 [1:50:58<12:44,  7.42s/it][Succeeded / Failed / Skipped / Total] 793 / 85 / 19 / 897:  90%|████████▉ | 897/1000 [1:50:58<12:44,  7.42s/it][Succeeded / Failed / Skipped / Total] 793 / 85 / 19 / 897:  90%|████████▉ | 898/1000 [1:51:12<12:37,  7.43s/it][Succeeded / Failed / Skipped / Total] 794 / 85 / 19 / 898:  90%|████████▉ | 898/1000 [1:51:12<12:37,  7.43s/it][Succeeded / Failed / Skipped / Total] 794 / 85 / 19 / 898:  90%|████████▉ | 899/1000 [1:51:13<12:29,  7.42s/it][Succeeded / Failed / Skipped / Total] 795 / 85 / 19 / 899:  90%|████████▉ | 899/1000 [1:51:13<12:29,  7.42s/it][Succeeded / Failed / Skipped / Total] 795 / 85 / 19 / 899:  90%|█████████ | 900/1000 [1:51:14<12:21,  7.42s/it][Succeeded / Failed / Skipped / Total] 796 / 85 / 19 / 900:  90%|█████████ | 900/1000 [1:51:14<12:21,  7.42s/it][Succeeded / Failed / Skipped / Total] 796 / 85 / 19 / 900:  90%|█████████ | 901/1000 [1:51:16<12:13,  7.41s/it][Succeeded / Failed / Skipped / Total] 797 / 85 / 19 / 901:  90%|█████████ | 901/1000 [1:51:16<12:13,  7.41s/it][Succeeded / Failed / Skipped / Total] 797 / 85 / 19 / 901:  90%|█████████ | 902/1000 [1:51:23<12:06,  7.41s/it][Succeeded / Failed / Skipped / Total] 798 / 85 / 19 / 902:  90%|█████████ | 902/1000 [1:51:23<12:06,  7.41s/it][Succeeded / Failed / Skipped / Total] 798 / 85 / 19 / 902:  90%|█████████ | 903/1000 [1:51:29<11:58,  7.41s/it][Succeeded / Failed / Skipped / Total] 799 / 85 / 19 / 903:  90%|█████████ | 903/1000 [1:51:29<11:58,  7.41s/it][Succeeded / Failed / Skipped / Total] 799 / 85 / 19 / 903:  90%|█████████ | 904/1000 [1:51:32<11:50,  7.40s/it]Use this method to open the specified folder . --> Live live long time --> Socre: 1.0

[[[[Adv]]]]: public void [[useFolder]] ( final String [[folderName]] ) { closeFolderIfOpened ( folder ) ; try { this . [[folderName]] = [[folderName]] ; this . [[folder]] = getService ( ) . getFolder ( [[folderName]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[folderName]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void [[livelong]] ( final String [[poring]] ) { closeFolderIfOpened ( folder ) ; try { this . [[pacing]] = [[poring]] ; this . [[archive]] = getService ( ) . getFolder ( [[poring]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[poring]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 897 ---------------------------------------------
Creates an alias for the target . --> merge a string --> Socre: 1.0

[[[[Adv]]]]: protected String [[alias]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String [[forged]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 898 ---------------------------------------------
Adds a field to the path . --> Add a topography --> Socre: 1.0

[[[[Adv]]]]: public Path [[push]] ( final CharSequence [[field]] ) { _push ( [[field]] ) ; if ( altPath != null ) { altPath . push ( [[field]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[inspire]] ( final CharSequence [[topography]] ) { _push ( [[topography]] ) ; if ( altPath != null ) { altPath . push ( [[topography]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 899 ---------------------------------------------
Receives messages matching the specified filter . --> Blocking call for a folder --> Socre: 1.0

[[[[Adv]]]]: ReceivedEmail [ ] [[receiveMessages]] ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] [[bloch]] ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 900 ---------------------------------------------
Sets the mime type . --> Sets the raw data . --> Socre: 1.0

[[[[Adv]]]]: public RawData as ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . [[mimeType]] = mimeOrExtension ; } else { this . [[mimeType]] = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData as ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . [[achieved]] = mimeOrExtension ; } else { this . [[achieved]] = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 901 ---------------------------------------------
Perform validation . --> Perform pagans --> Socre: 1.0

[[[[Adv]]]]: protected boolean [[validateAction]] ( final String ... [[profiles]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[profiles]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > [[violations]] = vtor . getViolations ( ) ; return [[violations]] == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean [[pagans]] ( final String ... [[characterization]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[characterization]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > [[offence]] = vtor . getViolations ( ) ; return [[offence]] == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 902 ---------------------------------------------
Look up a named parameter . --> find the first name with the given name --> Socre: 1.0

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String name ) { DbQueryNamedParameter [[p]] = rootNP ; while ( [[p]] != null ) { if ( [[p]] . equalsName ( name ) ) { return [[p]] ; } [[p]] = [[p]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[zoran]] ( final String name ) { DbQueryNamedParameter [[hardcover]] = rootNP ; while ( [[hardcover]] != null ) { if ( [[hardcover]] . equalsName ( name ) ) { return [[hardcover]] ; } [[hardcover]] = [[hardcover]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 903 ---------------------------------------------
Sets target . --> Overwrites this element to be purled --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream [[target]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[target]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[wrinkled]] ( final InputStream [[objectivity]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[objectivity]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 904 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 800 / 85 / 19 / 904:  90%|█████████ | 904/1000 [1:51:32<11:50,  7.40s/it][Succeeded / Failed / Skipped / Total] 800 / 85 / 19 / 904:  90%|█████████ | 905/1000 [1:51:51<11:44,  7.42s/it][Succeeded / Failed / Skipped / Total] 801 / 85 / 19 / 905:  90%|█████████ | 905/1000 [1:51:51<11:44,  7.42s/it][Succeeded / Failed / Skipped / Total] 801 / 85 / 19 / 905:  91%|█████████ | 906/1000 [1:51:53<11:36,  7.41s/it][Succeeded / Failed / Skipped / Total] 801 / 86 / 19 / 906:  91%|█████████ | 906/1000 [1:51:53<11:36,  7.41s/it][Succeeded / Failed / Skipped / Total] 801 / 86 / 19 / 906:  91%|█████████ | 907/1000 [1:51:54<11:28,  7.40s/it][Succeeded / Failed / Skipped / Total] 802 / 86 / 19 / 907:  91%|█████████ | 907/1000 [1:51:54<11:28,  7.40s/it][Succeeded / Failed / Skipped / Total] 802 / 86 / 19 / 907:  91%|█████████ | 908/1000 [1:51:58<11:20,  7.40s/it][Succeeded / Failed / Skipped / Total] 803 / 86 / 19 / 908:  91%|█████████ | 908/1000 [1:51:58<11:20,  7.40s/it][Succeeded / Failed / Skipped / Total] 803 / 86 / 19 / 908:  91%|█████████ | 909/1000 [1:51:59<11:12,  7.39s/it][Succeeded / Failed / Skipped / Total] 804 / 86 / 19 / 909:  91%|█████████ | 909/1000 [1:51:59<11:12,  7.39s/it][Succeeded / Failed / Skipped / Total] 804 / 86 / 19 / 909:  91%|█████████ | 910/1000 [1:52:01<11:04,  7.39s/it][Succeeded / Failed / Skipped / Total] 805 / 86 / 19 / 910:  91%|█████████ | 910/1000 [1:52:01<11:04,  7.39s/it][Succeeded / Failed / Skipped / Total] 805 / 86 / 19 / 910:  91%|█████████ | 911/1000 [1:52:08<10:57,  7.39s/it][Succeeded / Failed / Skipped / Total] 805 / 87 / 19 / 911:  91%|█████████ | 911/1000 [1:52:08<10:57,  7.39s/it][Succeeded / Failed / Skipped / Total] 805 / 87 / 19 / 911:  91%|█████████ | 912/1000 [1:52:09<10:49,  7.38s/it]Add a constant handle to the map . --> bucket method --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantMethodHandle]] ( final int index , final int [[referenceKind]] , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , [[referenceKind]] ) ; add ( new Entry ( index , tag , owner , name , descriptor , [[referenceKind]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[buckner]] ( final int index , final int [[incapacity]] , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , owner , name , descriptor , [[incapacity]] ) ; add ( new Entry ( index , tag , owner , name , descriptor , [[incapacity]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 905 ---------------------------------------------
Sets the download file . --> Sets blab --> Socre: 1.0

[[[[Adv]]]]: public RawData [[downloadableAs]] ( final String downloadFileName ) { this . [[downloadFileName]] = downloadFileName ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData [[blabber]] ( final String downloadFileName ) { this . [[arif]] = downloadFileName ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 906 ---------------------------------------------
If the target is not null throw an exception . --> [[[FAILED]]]

[[[[Adv]]]]: protected void process ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void process ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 907 ---------------------------------------------
Sets the target class . --> Loads the selected classes --> Socre: 1.0

[[[[Adv]]]]: public T [[setTarget]] ( final Class [[target]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[target]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[target]] . getName ( ) ) ; } targetClass = [[target]] ; targetClassName = [[target]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[target]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[unpublished]] ( final Class [[objectives]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[objectives]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[objectives]] . getName ( ) ) ; } targetClass = [[objectives]] ; targetClassName = [[objectives]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[objectives]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 908 ---------------------------------------------
Add a violation . --> This method is called at the end of the tree --> Socre: 1.0

[[[[Adv]]]]: protected void [[addViolation]] ( final String [[name]] , final Object [[invalidValue]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[name]] , this , [[invalidValue]] ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void [[woodwork]] ( final String [[nomenclature]] , final Object [[ganoush]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[nomenclature]] , this , [[ganoush]] ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 909 ---------------------------------------------
Create the proxy . --> Create the achievement --> Socre: 1.0

[[[[Adv]]]]: public byte [ ] create ( ) { process ( ) ; byte [ ] [[result]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[result]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] create ( ) { process ( ) ; byte [ ] [[achievements]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[achievements]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[achievements]] ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 910 ---------------------------------------------
Set the email address . --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: public T [[from]] ( final String personalName , final String [[from]] ) { return [[from]] ( new EmailAddress ( personalName , [[from]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T [[de]] ( final String personalName , final String [[contre]] ) { return [[de]] ( new EmailAddress ( personalName , [[de]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 911 ---------------------------------------------
Adds a constant name and type . --> [[[FAILED]]]

[[[[Adv]]]]: int addConstantNameAndType ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int addConstantNameAndType ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
[Succeeded / Failed / Skipped / Total] 806 / 87 / 19 / 912:  91%|█████████ | 912/1000 [1:52:09<10:49,  7.38s/it][Succeeded / Failed / Skipped / Total] 807 / 87 / 19 / 913:  91%|█████████▏| 913/1000 [1:52:09<10:41,  7.37s/it][Succeeded / Failed / Skipped / Total] 807 / 87 / 19 / 913:  91%|█████████▏| 914/1000 [1:52:12<10:33,  7.37s/it][Succeeded / Failed / Skipped / Total] 808 / 87 / 19 / 914:  91%|█████████▏| 914/1000 [1:52:12<10:33,  7.37s/it][Succeeded / Failed / Skipped / Total] 809 / 87 / 19 / 915:  92%|█████████▏| 915/1000 [1:52:14<10:25,  7.36s/it][Succeeded / Failed / Skipped / Total] 809 / 87 / 19 / 915:  92%|█████████▏| 916/1000 [1:52:15<10:17,  7.35s/it][Succeeded / Failed / Skipped / Total] 810 / 87 / 19 / 916:  92%|█████████▏| 916/1000 [1:52:15<10:17,  7.35s/it][Succeeded / Failed / Skipped / Total] 811 / 87 / 19 / 917:  92%|█████████▏| 917/1000 [1:52:18<10:09,  7.35s/it][Succeeded / Failed / Skipped / Total] 811 / 87 / 19 / 917:  92%|█████████▏| 918/1000 [1:52:18<10:01,  7.34s/it][Succeeded / Failed / Skipped / Total] 812 / 87 / 19 / 918:  92%|█████████▏| 918/1000 [1:52:18<10:01,  7.34s/it][Succeeded / Failed / Skipped / Total] 813 / 87 / 19 / 919:  92%|█████████▏| 919/1000 [1:52:19<09:54,  7.33s/it][Succeeded / Failed / Skipped / Total] 813 / 87 / 19 / 919:  92%|█████████▏| 920/1000 [1:52:20<09:46,  7.33s/it][Succeeded / Failed / Skipped / Total] 814 / 87 / 19 / 920:  92%|█████████▏| 920/1000 [1:52:20<09:46,  7.33s/it][Succeeded / Failed / Skipped / Total] 815 / 87 / 19 / 921:  92%|█████████▏| 921/1000 [1:52:20<09:38,  7.32s/it][Succeeded / Failed / Skipped / Total] 815 / 87 / 19 / 921:  92%|█████████▏| 922/1000 [1:52:23<09:30,  7.31s/it]--------------------------------------------- Result 912 ---------------------------------------------
Add a recipient to the recipient --> Create a ddu --> Socre: 1.0

[[[[Adv]]]]: public T [[to]] ( final String personalName , final String to ) { return [[to]] ( new EmailAddress ( personalName , [[to]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T [[du]] ( final String personalName , final String to ) { return [[du]] ( new EmailAddress ( personalName , [[du]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 913 ---------------------------------------------
Writes the class in debug folder . --> Generates blackmail jar file --> Socre: 1.0

[[[[Adv]]]]: protected void [[dumpClassInDebugFolder]] ( final byte [ ] [[bytes]] ) { File [[debugFolder]] = proxetta . getDebugFolder ( ) ; if ( [[debugFolder]] == null ) { return ; } if ( ! [[debugFolder]] . exists ( ) || ! [[debugFolder]] . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + [[debugFolder]] ) ; } String [[fileName]] = proxyClassName ; if ( [[fileName]] == null ) { [[fileName]] = "proxetta-" + System . currentTimeMillis ( ) ; } [[fileName]] += ".class" ; File [[file]] = new File ( [[debugFolder]] , [[fileName]] ) ; try { FileUtil . writeBytes ( [[file]] , [[bytes]] ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + [[file]] , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void [[blackmails]] ( final byte [ ] [[bead]] ) { File [[funfair]] = proxetta . getDebugFolder ( ) ; if ( [[funfair]] == null ) { return ; } if ( ! [[funfair]] . exists ( ) || ! [[funfair]] . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + [[funfair]] ) ; } String [[davidson]] = proxyClassName ; if ( [[davidson]] == null ) { [[davidson]] = "proxetta-" + System . currentTimeMillis ( ) ; } [[davidson]] += ".class" ; File [[lodging]] = new File ( [[funfair]] , [[davidson]] ) ; try { FileUtil . writeBytes ( [[lodging]] , [[bead]] ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + [[lodging]] , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 914 ---------------------------------------------
Sets the recipient address . --> Setter for recipient --> Socre: 1.0

[[[[Adv]]]]: public T [[to]] ( final EmailAddress [[to]] ) { this . to = ArraysUtil . append ( this . to , [[to]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T [[among]] ( final EmailAddress [[entre]] ) { this . to = ArraysUtil . append ( this . to , [[among]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 915 ---------------------------------------------
Sets the reply to reply addresses . --> Sets the recipients of this person --> Socre: 1.0

[[[[Adv]]]]: public T [[REPLACEME0]] ( final EmailAddress ... [[REPLACEME0]] ) { this . [[replyTo]] = ArraysUtil . join ( this . [[replyTo]] , valueOrEmptyArray ( [[REPLACEME0]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T [[PRIMING]] ( final EmailAddress ... [[PRIMING]] ) { this . [[crematoria]] = ArraysUtil . join ( this . [[crematoria]] , valueOrEmptyArray ( [[PRIMING]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 916 ---------------------------------------------
Sets the cc recipient address . --> Set the Ws W W W W W W W W W W W W --> Socre: 1.0

[[[[Adv]]]]: public T [[cc]] ( final EmailAddress ... ccs ) { this . [[cc]] = ArraysUtil . join ( this . [[cc]] , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T [[ww]] ( final EmailAddress ... ccs ) { this . [[dw]] = ArraysUtil . join ( this . [[dw]] , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 917 ---------------------------------------------
Creates a new instance of the ProProxy . --> Defines a subclass for the Proposal --> Socre: 1.0

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[cancellations]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 918 ---------------------------------------------
Adds a header to the response --> Adds a title to the document --> Socre: 1.0

[[[[Adv]]]]: public T [[header]] ( final String [[name]] , final String value ) { headers . put ( [[name]] , value ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[titled]] ( final String [[numerals]] , final String value ) { headers . put ( [[numerals]] , value ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 919 ---------------------------------------------
Adds an HTML message to the email . --> Send email to email --> Socre: 1.0

[[[[Adv]]]]: public T [[htmlMessage]] ( final String html , final String encoding ) { return message ( new EmailMessage ( html , MimeTypes . MIME_TEXT_HTML , encoding ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[toreador]] ( final String html , final String encoding ) { return message ( new EmailMessage ( html , MimeTypes . MIME_TEXT_HTML , encoding ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 920 ---------------------------------------------
Adds a text message to the email . --> Sets a mortimer --> Socre: 1.0

[[[[Adv]]]]: public T [[textMessage]] ( final String text , final String [[encoding]] ) { return message ( new EmailMessage ( text , MimeTypes . MIME_TEXT_PLAIN , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[mortimer]] ( final String text , final String [[aspirations]] ) { return message ( new EmailMessage ( text , MimeTypes . MIME_TEXT_PLAIN , [[aspirations]] ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 921 ---------------------------------------------
Returns boolean . --> Parses an outcome --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[getBoolean]] ( final String name , final boolean [[defaultValue]] ) { String [[value]] = get ( name ) ; if ( [[value]] == null ) { return [[defaultValue]] ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; switch ( [[value]] ) { case "true" : case "yes" : case "1" : case "on" : return "[[True]]" == "[[True]]" ; case "false" : case "no" : case "0" : case "off" : return "[[False]]" != "[[False]]" ; default : return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean [[valois]] ( final String name , final boolean [[ravenna]] ) { String [[evaluation]] = get ( name ) ; if ( [[evaluation]] == null ) { return [[ravenna]] ; } [[evaluation]] = [[evaluation]] . trim ( ) . toLowerCase ( ) ; switch ( [[evaluation]] ) { case "true" : case "yes" : case "1" : case "on" : return "[[Appropriate]]" == "[[Appropriate]]" ; case "false" : case "no" : case "0" : case "off" : return "[[Dishonest]]" != "[[Dishonest]]" ; default : return [[ravenna]] ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 922 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 816 / 87 / 19 / 922:  92%|█████████▏| 922/1000 [1:52:23<09:30,  7.31s/it][Succeeded / Failed / Skipped / Total] 817 / 87 / 19 / 923:  92%|█████████▏| 923/1000 [1:52:24<09:22,  7.31s/it][Succeeded / Failed / Skipped / Total] 817 / 87 / 19 / 923:  92%|█████████▏| 924/1000 [1:52:24<09:14,  7.30s/it][Succeeded / Failed / Skipped / Total] 818 / 87 / 19 / 924:  92%|█████████▏| 924/1000 [1:52:24<09:14,  7.30s/it][Succeeded / Failed / Skipped / Total] 819 / 87 / 19 / 925:  92%|█████████▎| 925/1000 [1:52:27<09:07,  7.29s/it][Succeeded / Failed / Skipped / Total] 819 / 87 / 19 / 925:  93%|█████████▎| 926/1000 [1:52:28<08:59,  7.29s/it][Succeeded / Failed / Skipped / Total] 820 / 87 / 19 / 926:  93%|█████████▎| 926/1000 [1:52:28<08:59,  7.29s/it][Succeeded / Failed / Skipped / Total] 821 / 87 / 19 / 927:  93%|█████████▎| 927/1000 [1:52:28<08:51,  7.28s/it][Succeeded / Failed / Skipped / Total] 821 / 87 / 19 / 927:  93%|█████████▎| 928/1000 [1:52:31<08:43,  7.27s/it][Succeeded / Failed / Skipped / Total] 822 / 87 / 19 / 928:  93%|█████████▎| 928/1000 [1:52:31<08:43,  7.27s/it][Succeeded / Failed / Skipped / Total] 823 / 87 / 19 / 929:  93%|█████████▎| 929/1000 [1:52:31<08:35,  7.27s/it][Succeeded / Failed / Skipped / Total] 823 / 87 / 19 / 929:  93%|█████████▎| 930/1000 [1:52:33<08:28,  7.26s/it]Get a system property --> Lookup a surname --> Socre: 1.0

[[[[Adv]]]]: public static String [[get]] ( final String [[name]] , final String [[defaultValue]] ) { Objects . requireNonNull ( [[name]] ) ; String [[value]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[value]] = System . getProperty ( [[name]] ) ; } else { [[value]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[name]] ) ) ; } } catch ( Exception ignore ) { } if ( [[value]] == null ) { return [[defaultValue]] ; } return [[value]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String [[arrived]] ( final String [[surname]] , final String [[pango]] ) { Objects . requireNonNull ( [[surname]] ) ; String [[treasured]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[treasured]] = System . getProperty ( [[surname]] ) ; } else { [[treasured]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[surname]] ) ) ; } } catch ( Exception ignore ) { } if ( [[treasured]] == null ) { return [[pango]] ; } return [[treasured]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 923 ---------------------------------------------
Returns the integer value for the given name . --> Get the east side --> Socre: 1.0

[[[[Adv]]]]: public static long [[getInt]] ( final String [[name]] , final int [[defaultValue]] ) { String value = get ( [[name]] ) ; if ( value == null ) { return [[defaultValue]] ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long [[eastside]] ( final String [[numbers]] , final int [[musicianship]] ) { String value = get ( [[numbers]] ) ; if ( value == null ) { return [[musicianship]] ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return [[musicianship]] ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 924 ---------------------------------------------
Returns the long . --> See ECMA 13 --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLong]] ( final String name , final long [[defaultValue]] ) { String [[value]] = get ( name ) ; if ( [[value]] == null ) { return [[defaultValue]] ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[seeger]] ( final String name , final long [[sneakin]] ) { String [[valuation]] = get ( name ) ; if ( [[valuation]] == null ) { return [[sneakin]] ; } [[valuation]] = [[valuation]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[valuation]] ) ; } catch ( NumberFormatException nfex ) { return [[sneakin]] ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 925 ---------------------------------------------
Serialize key value pair . --> Helper method for serialization --> Socre: 1.0

[[[[Adv]]]]: protected int serializeKeyValue ( final JsonContext jsonContext , final Path [[currentPath]] , final Object key , final Object [[value]] , int count ) { if ( ( [[value]] == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { [[currentPath]] . push ( key . toString ( ) ) ; } else { [[currentPath]] . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int serializeKeyValue ( final JsonContext jsonContext , final Path [[heyer]] , final Object key , final Object [[evaluations]] , int count ) { if ( ( [[evaluations]] == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { [[heyer]] . push ( key . toString ( ) ) ; } else { [[heyer]] . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 926 ---------------------------------------------
Resolve alias . --> Recreates the extent --> Socre: 1.0

[[[[Adv]]]]: protected String [[resolveAlias]] ( final String [[value]] ) { final StringBuilder result = new StringBuilder ( [[value]] . length ( ) ) ; int [[i]] = 0 ; int len = [[value]] . length ( ) ; while ( [[i]] < len ) { int [[ndx]] = [[value]] . indexOf ( ' ' , [[i]] ) ; if ( [[ndx]] == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String [[recuse]] ( final String [[extent]] ) { final StringBuilder result = new StringBuilder ( [[extent]] . length ( ) ) ; int [[du]] = 0 ; int len = [[extent]] . length ( ) ; while ( [[du]] < len ) { int [[tripped]] = [[extent]] . indexOf ( ' ' , [[du]] ) ; if ( [[tripped]] == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 927 ---------------------------------------------
Resolves the result path . --> Sets the value of wislder --> Socre: 1.0

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String path , String value ) { boolean [[absolutePath]] = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[wiseman]] ( String path , String value ) { boolean [[imai]] = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 928 ---------------------------------------------
Lookup a path alias . --> This method rejoining reason --> Socre: 1.0

[[[[Adv]]]]: protected String [[lookupAlias]] ( final String [[alias]] ) { String [[value]] = actionsManager . lookupPathAlias ( [[alias]] ) ; if ( [[value]] == null ) { ActionRuntime [[cfg]] = actionsManager . lookup ( [[alias]] ) ; if ( [[cfg]] != null ) { [[value]] = [[cfg]] . getActionPath ( ) ; } } return [[value]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String [[rejoined]] ( final String [[untrue]] ) { String [[treasured]] = actionsManager . lookupPathAlias ( [[untrue]] ) ; if ( [[treasured]] == null ) { ActionRuntime [[mercury]] = actionsManager . lookup ( [[untrue]] ) ; if ( [[mercury]] != null ) { [[treasured]] = [[mercury]] . getActionPath ( ) ; } } return [[treasured]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 929 ---------------------------------------------
Resolves the path with the given path and value . --> Returns sentimentality --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String [[path]] , final String value ) { final ResultPath resultPath = resolveResultPath ( [[path]] , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[sentimentality]] ( final String [[tract]] , final String value ) { final ResultPath resultPath = resolveResultPath ( [[tract]] , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 930 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 824 / 87 / 19 / 930:  93%|█████████▎| 930/1000 [1:52:33<08:28,  7.26s/it][Succeeded / Failed / Skipped / Total] 825 / 87 / 19 / 931:  93%|█████████▎| 931/1000 [1:52:34<08:20,  7.26s/it][Succeeded / Failed / Skipped / Total] 825 / 87 / 19 / 931:  93%|█████████▎| 932/1000 [1:52:35<08:12,  7.25s/it][Succeeded / Failed / Skipped / Total] 826 / 87 / 19 / 932:  93%|█████████▎| 932/1000 [1:52:35<08:12,  7.25s/it][Succeeded / Failed / Skipped / Total] 827 / 87 / 19 / 933:  93%|█████████▎| 933/1000 [1:52:36<08:05,  7.24s/it][Succeeded / Failed / Skipped / Total] 827 / 87 / 19 / 933:  93%|█████████▎| 934/1000 [1:52:39<07:57,  7.24s/it][Succeeded / Failed / Skipped / Total] 828 / 87 / 19 / 934:  93%|█████████▎| 934/1000 [1:52:39<07:57,  7.24s/it][Succeeded / Failed / Skipped / Total] 829 / 87 / 19 / 935:  94%|█████████▎| 935/1000 [1:52:45<07:50,  7.24s/it][Succeeded / Failed / Skipped / Total] 829 / 87 / 19 / 935:  94%|█████████▎| 936/1000 [1:52:46<07:42,  7.23s/it][Succeeded / Failed / Skipped / Total] 830 / 87 / 19 / 936:  94%|█████████▎| 936/1000 [1:52:46<07:42,  7.23s/it][Succeeded / Failed / Skipped / Total] 831 / 87 / 19 / 937:  94%|█████████▎| 937/1000 [1:52:46<07:34,  7.22s/it][Succeeded / Failed / Skipped / Total] 831 / 87 / 19 / 937:  94%|█████████▍| 938/1000 [1:52:50<07:27,  7.22s/it]Returns the last index of the last dot in the given string . --> get stc position --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String [[str]] ) { int slashNdx = [[str]] . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[stc]] ( final String [[dod]] ) { int slashNdx = [[dod]] . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( [[dod]] , ' ' , [[dod]] . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 931 ---------------------------------------------
Returns the index of the last slash in the given string . --> returns - 1 - 1 --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String [[str]] ) { int [[slashNdx]] = [[str]] . lastIndexOf ( ' ' ) ; int [[dotNdx]] = StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , [[slashNdx]] ) ; if ( [[dotNdx]] == - 1 ) { if ( [[slashNdx]] == - 1 ) { return - 1 ; } [[slashNdx]] ++ ; if ( [[slashNdx]] < [[str]] . length ( ) - 1 ) { [[dotNdx]] = [[slashNdx]] ; } else { [[dotNdx]] = - 1 ; } } return [[dotNdx]] ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[embalmed]] ( final String [[ith]] ) { int [[wither]] = [[ith]] . lastIndexOf ( ' ' ) ; int [[chauffer]] = StringUtil . lastIndexOf ( [[ith]] , ' ' , [[ith]] . length ( ) , [[wither]] ) ; if ( [[chauffer]] == - 1 ) { if ( [[wither]] == - 1 ) { return - 1 ; } [[wither]] ++ ; if ( [[wither]] < [[ith]] . length ( ) - 1 ) { [[chauffer]] = [[wither]] ; } else { [[chauffer]] = - 1 ; } } return [[chauffer]] ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 932 ---------------------------------------------
Strips the last camel word from the given name . --> Remove all angles from the name --> Socre: 1.0

[[[[Adv]]]]: public static String [[stripLastCamelWord]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String [[angles]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 933 ---------------------------------------------
Resolves schema name . --> Returns the association for the user --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveSchemaName]] ( final Class < ? > [[type]] , final String [[defaultSchemaName]] ) { String [[schemaName]] = null ; final DbTable [[dbTable]] = [[type]] . getAnnotation ( DbTable . class ) ; if ( [[dbTable]] != null ) { [[schemaName]] = [[dbTable]] . schema ( ) . trim ( ) ; } if ( ( [[schemaName]] == null ) || ( [[schemaName]] . length ( ) == 0 ) ) { [[schemaName]] = [[defaultSchemaName]] ; } return [[schemaName]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String [[association]] ( final Class < ? > [[dude]] , final String [[hardcover]] ) { String [[unimaginably]] = null ; final DbTable [[railcar]] = [[dude]] . getAnnotation ( DbTable . class ) ; if ( [[railcar]] != null ) { [[unimaginably]] = [[railcar]] . schema ( ) . trim ( ) ; } if ( ( [[unimaginably]] == null ) || ( [[unimaginably]] . length ( ) == 0 ) ) { [[unimaginably]] = [[hardcover]] ; } return [[unimaginably]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 934 ---------------------------------------------
Returns the index of the first dot after dot . --> getter for colon --> Socre: 1.0

[[[[Adv]]]]: public static int [[indexOfDotAfterSlash]] ( final String [[str]] ) { int slashNdx = [[str]] . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return [[str]] . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int [[merchantman]] ( final String [[gonorrhea]] ) { int slashNdx = [[gonorrhea]] . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return [[gonorrhea]] . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 935 ---------------------------------------------
Multiply x . --> Multiplies x and j --> Socre: 1.0

[[[[Adv]]]]: private void mix ( final int j , final int [[d]] ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ [[d]] % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void mix ( final int j , final int [[k]] ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ [[k]] % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 936 ---------------------------------------------
Sets target . --> Zine this interpreter --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final String [[targetName]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[targetName]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[targetName]] ) ; } targetClassName = [[targetName]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[targetName]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[zine]] ( final String [[narration]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[narration]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[narration]] ) ; } targetClassName = [[narration]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[narration]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 937 ---------------------------------------------
Makes the poix of the y . --> Equivalent to zeros --> Socre: 1.0

[[[[Adv]]]]: private void [[demix]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void [[pessoa]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 938 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 832 / 87 / 19 / 938:  94%|█████████▍| 938/1000 [1:52:50<07:27,  7.22s/it][Succeeded / Failed / Skipped / Total] 833 / 87 / 19 / 939:  94%|█████████▍| 939/1000 [1:52:51<07:19,  7.21s/it][Succeeded / Failed / Skipped / Total] 833 / 87 / 19 / 939:  94%|█████████▍| 940/1000 [1:52:53<07:12,  7.21s/it][Succeeded / Failed / Skipped / Total] 834 / 87 / 19 / 940:  94%|█████████▍| 940/1000 [1:52:53<07:12,  7.21s/it][Succeeded / Failed / Skipped / Total] 835 / 87 / 19 / 941:  94%|█████████▍| 941/1000 [1:52:54<07:04,  7.20s/it][Succeeded / Failed / Skipped / Total] 835 / 87 / 19 / 941:  94%|█████████▍| 942/1000 [1:52:55<06:57,  7.19s/it][Succeeded / Failed / Skipped / Total] 836 / 87 / 19 / 942:  94%|█████████▍| 942/1000 [1:52:55<06:57,  7.19s/it]Define the proxy . --> Process the contours --> Socre: 1.0

[[[[Adv]]]]: public Class [[define]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] [[bytes]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[bytes]] ) ; return DefineClass . of ( getProxyClassName ( ) , [[bytes]] , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class [[contours]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] [[threading]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[threading]] ) ; return DefineClass . of ( getProxyClassName ( ) , [[threading]] , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 939 ---------------------------------------------
Initializes the key with the specified message message . --> Bienvenue --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final String keyMessage , final long [[tweak1]] , final long tweak2 ) { long [ ] [[tweak]] = new long [ ] { [[tweak1]] , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] [[keyData]] = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( [[keyData]] , 0 , key , 0 , key . length < [[keyData]] . length ? key . length : [[keyData]] . length ) ; [[init]] ( bytesToLongs ( key ) , [[tweak]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void [[bienvenue]] ( final String keyMessage , final long [[sagi]] , final long tweak2 ) { long [ ] [[readjust]] = new long [ ] { [[sagi]] , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] [[canker]] = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( [[canker]] , 0 , key , 0 , key . length < [[canker]] . length ? key . length : [[canker]] . length ) ; [[bienvenue]] ( bytesToLongs ( key ) , [[readjust]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 940 ---------------------------------------------
Converts a byte array to a long array . --> Utility method for Kendricks --> Socre: 1.0

[[[[Adv]]]]: protected static long [ ] [[bytesToLongs]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] [[kendricks]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 941 ---------------------------------------------
Encrypt a block . --> encrypt the given bytes --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[encryptBlock]] ( final byte [ ] [[content]] , final int [[offset]] ) { long [ ] contentBlock = bytesToLongs ( [[content]] , [[offset]] , blockSizeInBytes ) ; long [ ] [[encryptedBlock]] = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , [[encryptedBlock]] ) ; return longsToBytes ( [[encryptedBlock]] ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] [[barley]] ( final byte [ ] [[excited]] , final int [[outsmart]] ) { long [ ] contentBlock = bytesToLongs ( [[excited]] , [[outsmart]] , blockSizeInBytes ) ; long [ ] [[zelig]] = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , [[zelig]] ) ; return longsToBytes ( [[zelig]] ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 942 ---------------------------------------------
Remove any bounding box . --> Parses a bi - strand character --> Socre: 1.0

[[[[Adv]]]]: private static String [[removeAnyBounding]] ( final char [[s]] , final char [[e]] , final String [[str]] ) { if ( [[str]] == null || [[str]] . length ( ) < 2 ) { return [[str]] ; } if ( [[str]] . startsWith ( String . valueOf ( [[s]] ) ) && [[str]] . endsWith ( String . valueOf ( [[e]] ) ) ) { return [[str]] . substring ( 1 , [[str]] . length ( ) - 1 ) ; } return [[str]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String [[sportscaster]] ( final char [[dans]] , final char [[nor]] , final String [[bi]] ) { if ( [[bi]] == null || [[bi]] . length ( ) < 2 ) { return [[bi]] ; } if ( [[bi]] . startsWith ( String . valueOf ( [[dans]] ) ) && [[bi]] . endsWith ( String . valueOf ( [[nor]] ) ) ) { return [[bi]] . substring ( 1 , [[bi]] . length ( ) - 1 ) ; } return [[bi]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 943 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 837 / 87 / 19 / 943:  94%|█████████▍| 943/1000 [1:52:57<06:49,  7.19s/it][Succeeded / Failed / Skipped / Total] 837 / 87 / 19 / 943:  94%|█████████▍| 944/1000 [1:52:57<06:42,  7.18s/it][Succeeded / Failed / Skipped / Total] 838 / 87 / 19 / 944:  94%|█████████▍| 944/1000 [1:52:57<06:42,  7.18s/it][Succeeded / Failed / Skipped / Total] 839 / 87 / 19 / 945:  94%|█████████▍| 945/1000 [1:53:00<06:34,  7.17s/it][Succeeded / Failed / Skipped / Total] 839 / 87 / 19 / 945:  95%|█████████▍| 946/1000 [1:53:00<06:27,  7.17s/it][Succeeded / Failed / Skipped / Total] 840 / 87 / 19 / 946:  95%|█████████▍| 946/1000 [1:53:00<06:27,  7.17s/it][Succeeded / Failed / Skipped / Total] 840 / 88 / 19 / 947:  95%|█████████▍| 947/1000 [1:53:01<06:19,  7.16s/it][Succeeded / Failed / Skipped / Total] 840 / 88 / 19 / 947:  95%|█████████▍| 948/1000 [1:53:06<06:12,  7.16s/it][Succeeded / Failed / Skipped / Total] 841 / 88 / 19 / 948:  95%|█████████▍| 948/1000 [1:53:06<06:12,  7.16s/it][Succeeded / Failed / Skipped / Total] 842 / 88 / 19 / 949:  95%|█████████▍| 949/1000 [1:53:07<06:04,  7.15s/it][Succeeded / Failed / Skipped / Total] 842 / 88 / 19 / 949:  95%|█████████▌| 950/1000 [1:53:09<05:57,  7.15s/it][Succeeded / Failed / Skipped / Total] 843 / 88 / 19 / 950:  95%|█████████▌| 950/1000 [1:53:09<05:57,  7.15s/it]Zips a file --> zZIPabert --> Socre: 1.0

[[[[Adv]]]]: public static File [[zlib]] ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String [[zlibFileName]] = [[file]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( [[zlibFileName]] ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( [[zlibFileName]] ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File [[indoctrination]] ( final File [[dossier]] ) throws IOException { if ( [[dossier]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( [[dossier]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String [[chupacabra]] = [[dossier]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( [[chupacabra]] ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( [[chupacabra]] ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 944 ---------------------------------------------
Initializes this sketch with the given key and tweak . --> Overriding this method to perform aw right --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final long [ ] [[key]] , final long [ ] [[tweak]] ) { final int newNw = [[key]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void [[awright]] ( final long [ ] [[primaries]] , final long [ ] [[tinkered]] ) { final int newNw = [[primaries]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 945 ---------------------------------------------
Returns the path . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[tract]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[tract]] ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 946 ---------------------------------------------
Key schedule . --> Fute FKuda CUDA --> Socre: 1.0

[[[[Adv]]]]: private void [[keySchedule]] ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .

[[[[Adv]]]]: private void [[fukuda]] ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 947 ---------------------------------------------
Ungzipped file . --> [[[FAILED]]]

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 948 ---------------------------------------------
Unzip a zip file --> Unzips a list of roofops --> Socre: 1.0

[[[[Adv]]]]: public static void unzip ( final String [[zipFile]] , final String destDir , final String ... [[patterns]] ) throws IOException { unzip ( new File ( [[zipFile]] ) , new File ( destDir ) , [[patterns]] ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void unzip ( final String [[rooftops]] , final String destDir , final String ... [[conceptions]] ) throws IOException { unzip ( new File ( [[rooftops]] ) , new File ( destDir ) , [[conceptions]] ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 949 ---------------------------------------------
Lists all entries in a zip file . --> List all entries in a given directory --> Socre: 1.0

[[[[Adv]]]]: public static List < String > listZip ( final File [[zipFile]] ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[zipFile]] ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; entries . add ( entryName ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > listZip ( final File [[marylin]] ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[marylin]] ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; entries . add ( entryName ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 950 ---------------------------------------------
Adds a file to the ZIP output stream . --> Thrown if the given file is a directory --> Socre: 1.0

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream [[zos]] , final File file , String path , final String [[comment]] , final boolean [[recursive]] ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[toothpaste]] ( final ZipOutputStream [[dependable]] , final File file , String path , final String [[commentary]] , final boolean [[yatta]] ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 951 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 844 / 88 / 19 / 951:  95%|█████████▌| 951/1000 [1:53:26<05:50,  7.16s/it][Succeeded / Failed / Skipped / Total] 844 / 88 / 19 / 951:  95%|█████████▌| 952/1000 [1:53:30<05:43,  7.15s/it][Succeeded / Failed / Skipped / Total] 845 / 88 / 19 / 952:  95%|█████████▌| 952/1000 [1:53:30<05:43,  7.15s/it][Succeeded / Failed / Skipped / Total] 845 / 88 / 19 / 952:  95%|█████████▌| 953/1000 [1:53:41<05:36,  7.16s/it][Succeeded / Failed / Skipped / Total] 846 / 88 / 19 / 953:  95%|█████████▌| 953/1000 [1:53:41<05:36,  7.16s/it][Succeeded / Failed / Skipped / Total] 846 / 88 / 19 / 953:  95%|█████████▌| 954/1000 [1:53:55<05:29,  7.16s/it][Succeeded / Failed / Skipped / Total] 847 / 88 / 19 / 954:  95%|█████████▌| 954/1000 [1:53:55<05:29,  7.16s/it][Succeeded / Failed / Skipped / Total] 847 / 88 / 19 / 954:  96%|█████████▌| 955/1000 [1:54:05<05:22,  7.17s/it][Succeeded / Failed / Skipped / Total] 848 / 88 / 19 / 955:  96%|█████████▌| 955/1000 [1:54:05<05:22,  7.17s/it][Succeeded / Failed / Skipped / Total] 848 / 88 / 19 / 955:  96%|█████████▌| 956/1000 [1:54:07<05:15,  7.16s/it][Succeeded / Failed / Skipped / Total] 849 / 88 / 19 / 956:  96%|█████████▌| 956/1000 [1:54:07<05:15,  7.16s/it][Succeeded / Failed / Skipped / Total] 849 / 88 / 19 / 956:  96%|█████████▌| 957/1000 [1:54:08<05:07,  7.16s/it][Succeeded / Failed / Skipped / Total] 850 / 88 / 19 / 957:  96%|█████████▌| 957/1000 [1:54:08<05:07,  7.16s/it][Succeeded / Failed / Skipped / Total] 850 / 88 / 19 / 957:  96%|█████████▌| 958/1000 [1:54:10<05:00,  7.15s/it]Resolve column descriptors . --> See EntityDescriptor --> Socre: 1.0

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[resolveColumnDescriptors]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean [[isAnnotated]] , final ColumnNamingStrategy [[columnNamingStrategy]] ) { String [[columnName]] = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > [[sqlTypeClass]] = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[sawbones]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean [[carloads]] , final ColumnNamingStrategy [[marcella]] ) { String [[bulgur]] = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > [[midwife]] = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 952 ---------------------------------------------
Gzip a file --> region gzipped warehouses --> Socre: 1.0

[[[[Adv]]]]: public static File [[gzip]] ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; String gzipName = [[file]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File [[encompasses]] ( final File [[warehouses]] ) throws IOException { if ( [[warehouses]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[warehouses]] ) ; String gzipName = [[warehouses]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 953 ---------------------------------------------
Adds content to a ZIP output stream . --> Add to ZipOutputStream --> Socre: 1.0

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream [[zos]] , final byte [ ] [[content]] , String [[path]] , final String comment ) throws IOException { while ( [[path]] . length ( ) != 0 && [[path]] . charAt ( 0 ) == ' ' ) { [[path]] = [[path]] . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( [[path]] , ' ' ) ) { [[path]] = [[path]] . substring ( 0 , [[path]] . length ( ) - 1 ) ; } ZipEntry [[zipEntry]] = new ZipEntry ( [[path]] ) ; [[zipEntry]] . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { [[zipEntry]] . setComment ( comment ) ; } [[zos]] . putNextEntry ( [[zipEntry]] ) ; InputStream [[is]] = new ByteArrayInputStream ( [[content]] ) ; try { StreamUtil . copy ( [[is]] , [[zos]] ) ; } finally { StreamUtil . close ( [[is]] ) ; } [[zos]] . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream [[basher]] , final byte [ ] [[cheerful]] , String [[estrada]] , final String comment ) throws IOException { while ( [[estrada]] . length ( ) != 0 && [[estrada]] . charAt ( 0 ) == ' ' ) { [[estrada]] = [[estrada]] . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( [[estrada]] , ' ' ) ) { [[estrada]] = [[estrada]] . substring ( 0 , [[estrada]] . length ( ) - 1 ) ; } ZipEntry [[locators]] = new ZipEntry ( [[estrada]] ) ; [[locators]] . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { [[locators]] . setComment ( comment ) ; } [[basher]] . putNextEntry ( [[locators]] ) ; InputStream [[goes]] = new ByteArrayInputStream ( [[cheerful]] ) ; try { StreamUtil . copy ( [[goes]] , [[basher]] ) ; } finally { StreamUtil . close ( [[goes]] ) ; } [[basher]] . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 954 ---------------------------------------------
Returns the FieldDescriptor with the given name . --> Return the FieldDescriptor for the specified surname --> Socre: 1.0

[[[[Adv]]]]: public FieldDescriptor [[getFieldDescriptor]] ( final String [[name]] , final boolean [[declared]] ) { final FieldDescriptor [[fieldDescriptor]] = getFields ( ) . getFieldDescriptor ( [[name]] ) ; if ( [[fieldDescriptor]] != null ) { if ( ! [[fieldDescriptor]] . matchDeclared ( [[declared]] ) ) { return null ; } } return [[fieldDescriptor]] ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor [[defense]] ( final String [[surnames]] , final boolean [[stated]] ) { final FieldDescriptor [[parti]] = getFields ( ) . getFieldDescriptor ( [[surnames]] ) ; if ( [[parti]] != null ) { if ( ! [[parti]] . matchDeclared ( [[stated]] ) ) { return null ; } } return [[parti]] ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 955 ---------------------------------------------
Sets the locale for the given session . --> Liefert die kekenn der uebergeben --> Socre: 1.0

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession [[session]] , final String [[localeCode]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[localeCode]] ) ; } Locale [[locale]] = Locale . forLanguageTag ( [[localeCode]] ) ; [[session]] . setAttribute ( SESSION_LOCALE_ATTR , [[locale]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[nastiest]] ( final HttpSession [[seminars]] , final String [[tanked]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[tanked]] ) ; } Locale [[regional]] = Locale . forLanguageTag ( [[tanked]] ) ; [[seminars]] . setAttribute ( SESSION_LOCALE_ATTR , [[regional]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 956 ---------------------------------------------
Adds profiles . --> Detail information about Equipment Details --> Socre: 1.0

[[[[Adv]]]]: public PropsEntries [[profile]] ( final String ... [[profiles]] ) { if ( [[profiles]] == null ) { return this ; } for ( String [[profile]] : [[profiles]] ) { addProfiles ( [[profile]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries [[photograph]] ( final String ... [[describing]] ) { if ( [[describing]] == null ) { return this ; } for ( String [[photograph]] : [[describing]] ) { addProfiles ( [[photograph]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 957 ---------------------------------------------
Reads a little endian long from the given array . --> Shortcut method for Griffin --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] [[buf]] , final int [[offset]] ) { return ( ( long ) [[buf]] [ [[offset]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[griffin]] ( final byte [ ] [[jairo]] , final int [[incapacitate]] ) { return ( ( long ) [[jairo]] [ [[incapacitate]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 958 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 851 / 88 / 19 / 958:  96%|█████████▌| 958/1000 [1:54:10<05:00,  7.15s/it][Succeeded / Failed / Skipped / Total] 851 / 88 / 19 / 958:  96%|█████████▌| 959/1000 [1:54:32<04:53,  7.17s/it][Succeeded / Failed / Skipped / Total] 851 / 89 / 19 / 959:  96%|█████████▌| 959/1000 [1:54:32<04:53,  7.17s/it][Succeeded / Failed / Skipped / Total] 851 / 89 / 19 / 959:  96%|█████████▌| 960/1000 [1:54:33<04:46,  7.16s/it][Succeeded / Failed / Skipped / Total] 852 / 89 / 19 / 960:  96%|█████████▌| 960/1000 [1:54:33<04:46,  7.16s/it][Succeeded / Failed / Skipped / Total] 852 / 89 / 19 / 960:  96%|█████████▌| 961/1000 [1:54:41<04:39,  7.16s/it][Succeeded / Failed / Skipped / Total] 853 / 89 / 19 / 961:  96%|█████████▌| 961/1000 [1:54:41<04:39,  7.16s/it][Succeeded / Failed / Skipped / Total] 853 / 89 / 19 / 961:  96%|█████████▌| 962/1000 [1:54:44<04:31,  7.16s/it]Filters the parameters for the given bean name . --> Actual operations --> Socre: 1.0

[[[[Adv]]]]: public String [ ] [[filterParametersForBeanName]] ( String [[beanName]] , final boolean resolveReferenceParams ) { [[beanName]] = [[beanName]] + ' ' ; List < String > [[list]] = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > [[entry]] : params . entrySet ( ) ) { String key = [[entry]] . getKey ( ) ; if ( ! key . startsWith ( [[beanName]] ) ) { continue ; } [[list]] . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] [[operate]] ( String [[manicured]] , final boolean resolveReferenceParams ) { [[manicured]] = [[manicured]] + ' ' ; List < String > [[enroll]] = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > [[scriptures]] : params . entrySet ( ) ) { String key = [[scriptures]] . getKey ( ) ; if ( ! key . startsWith ( [[manicured]] ) ) { continue ; } [[enroll]] . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 959 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantDynamicOrInvokeDynamicReference ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantDynamicOrInvokeDynamicReference ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 960 ---------------------------------------------
Returns the offset of the type annotation at the given index . --> Reads an Aicha code --> Socre: 1.0

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] [[typeAnnotationOffsets]] , final int [[typeAnnotationIndex]] ) { if ( [[typeAnnotationOffsets]] == null || [[typeAnnotationIndex]] >= [[typeAnnotationOffsets]] . length || readByte ( [[typeAnnotationOffsets]] [ [[typeAnnotationIndex]] ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( [[typeAnnotationOffsets]] [ [[typeAnnotationIndex]] ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[aicha]] ( final int [ ] [[heretofore]] , final int [[romana]] ) { if ( [[heretofore]] == null || [[romana]] >= [[heretofore]] . length || readByte ( [[heretofore]] [ [[romana]] ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( [[heretofore]] [ [[romana]] ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 961 ---------------------------------------------
Returns the descriptor for the given property . --> Return the storyboards for a given number --> Socre: 1.0

[[[[Adv]]]]: public PropertyDescriptor [[getPropertyDescriptor]] ( final String [[name]] , final boolean [[declared]] ) { PropertyDescriptor [[propertyDescriptor]] = getProperties ( ) . getPropertyDescriptor ( [[name]] ) ; if ( ( [[propertyDescriptor]] != null ) && [[propertyDescriptor]] . matchDeclared ( [[declared]] ) ) { return [[propertyDescriptor]] ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor [[storyboards]] ( final String [[number]] , final boolean [[alluded]] ) { PropertyDescriptor [[defrost]] = getProperties ( ) . getPropertyDescriptor ( [[number]] ) ; if ( ( [[defrost]] != null ) && [[defrost]] . matchDeclared ( [[alluded]] ) ) { return [[defrost]] ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 962 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 854 / 89 / 19 / 962:  96%|█████████▌| 962/1000 [1:54:44<04:31,  7.16s/it][Succeeded / Failed / Skipped / Total] 854 / 89 / 19 / 962:  96%|█████████▋| 963/1000 [1:54:49<04:24,  7.15s/it][Succeeded / Failed / Skipped / Total] 855 / 89 / 19 / 963:  96%|█████████▋| 963/1000 [1:54:49<04:24,  7.15s/it][Succeeded / Failed / Skipped / Total] 855 / 89 / 19 / 963:  96%|█████████▋| 964/1000 [1:54:58<04:17,  7.16s/it][Succeeded / Failed / Skipped / Total] 856 / 89 / 19 / 964:  96%|█████████▋| 964/1000 [1:54:58<04:17,  7.16s/it][Succeeded / Failed / Skipped / Total] 856 / 89 / 19 / 964:  96%|█████████▋| 965/1000 [1:55:02<04:10,  7.15s/it][Succeeded / Failed / Skipped / Total] 857 / 89 / 19 / 965:  96%|█████████▋| 965/1000 [1:55:02<04:10,  7.15s/it][Succeeded / Failed / Skipped / Total] 857 / 89 / 19 / 965:  97%|█████████▋| 966/1000 [1:55:05<04:03,  7.15s/it][Succeeded / Failed / Skipped / Total] 858 / 89 / 19 / 966:  97%|█████████▋| 966/1000 [1:55:05<04:03,  7.15s/it][Succeeded / Failed / Skipped / Total] 858 / 89 / 19 / 966:  97%|█████████▋| 967/1000 [1:55:14<03:55,  7.15s/it]Read verification type info . --> compute readable code --> Socre: 1.0

[[[[Adv]]]]: private int [[readVerificationTypeInfo]] ( final int [[verificationTypeInfoOffset]] , final Object [ ] frame , final int [[index]] , final char [ ] charBuffer , final Label [ ] [[labels]] ) { int currentOffset = [[verificationTypeInfoOffset]] ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ [[index]] ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ [[index]] ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ [[index]] ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ [[index]] ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ [[index]] ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ [[index]] ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ [[index]] ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ [[index]] ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ [[index]] ] = createLabel ( readUnsignedShort ( currentOffset ) , [[labels]] ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int [[readable]] ( final int [[frenchman]] , final Object [ ] frame , final int [[references]] , final char [ ] charBuffer , final Label [ ] [[labeled]] ) { int currentOffset = [[frenchman]] ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ [[references]] ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ [[references]] ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ [[references]] ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ [[references]] ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ [[references]] ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ [[references]] ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ [[references]] ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ [[references]] ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ [[references]] ] = createLabel ( readUnsignedShort ( currentOffset ) , [[labeled]] ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 963 ---------------------------------------------
Read bootstrap methods attribute . --> Checks word length --> Socre: 1.0

[[[[Adv]]]]: private int [ ] [[readBootstrapMethodsAttribute]] ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int [[currentAttributeOffset]] = getFirstAttributeOffset ( ) ; int [ ] [[currentBootstrapMethodOffsets]] = null ; for ( int i = readUnsignedShort ( [[currentAttributeOffset]] - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] [[comforted]] ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int [[weirdoes]] = getFirstAttributeOffset ( ) ; int [ ] [[willoughby]] = null ; for ( int i = readUnsignedShort ( [[weirdoes]] - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 964 ---------------------------------------------
Obtains a list of all constructors in the class descriptor . --> Obtain constructor descriptors --> Socre: 1.0

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] [[ctors]] = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] [[allCtors]] = new CtorDescriptor [ [[ctors]] . length ] ; for ( int i = 0 ; i < [[ctors]] . length ; i ++ ) { Constructor ctor = [[ctors]] [ i ] ; CtorDescriptor [[ctorDescriptor]] = createCtorDescriptor ( ctor ) ; [[allCtors]] [ i ] = [[ctorDescriptor]] ; if ( [[ctorDescriptor]] . isDefault ( ) ) { defaultCtor = [[ctorDescriptor]] ; } } return [[allCtors]] ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] [[mudders]] = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] [[killian]] = new CtorDescriptor [ [[mudders]] . length ] ; for ( int i = 0 ; i < [[mudders]] . length ; i ++ ) { Constructor ctor = [[mudders]] [ i ] ; CtorDescriptor [[marianna]] = createCtorDescriptor ( ctor ) ; [[killian]] [ i ] = [[marianna]] ; if ( [[marianna]] . isDefault ( ) ) { defaultCtor = [[marianna]] ; } } return [[killian]] ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 965 ---------------------------------------------
Read stream . --> Utility method for Metadata --> Socre: 1.0

[[[[Adv]]]]: private static byte [ ] [[readStream]] ( final InputStream [[inputStream]] , final boolean [[close]] ) throws IOException { if ( [[inputStream]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream [[outputStream]] = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int [[bytesRead]] ; while ( ( [[bytesRead]] = [[inputStream]] . read ( data , 0 , data . length ) ) != - 1 ) { [[outputStream]] . write ( data , 0 , [[bytesRead]] ) ; } [[outputStream]] . flush ( ) ; return [[outputStream]] . toByteArray ( ) ; } finally { if ( [[close]] ) { [[inputStream]] . [[close]] ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] [[metallurgical]] ( final InputStream [[stringed]] , final boolean [[almost]] ) throws IOException { if ( [[stringed]] == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream [[omit]] = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int [[gérard]] ; while ( ( [[gérard]] = [[stringed]] . read ( data , 0 , data . length ) ) != - 1 ) { [[omit]] . write ( data , 0 , [[gérard]] ) ; } [[omit]] . flush ( ) ; return [[omit]] . toByteArray ( ) ; } finally { if ( [[almost]] ) { [[stringed]] . [[almost]] ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 966 ---------------------------------------------
Returns the ctor descriptor for the given arguments . --> Returns the ctorDescriptor matching the specified class --> Socre: 1.0

[[[[Adv]]]]: public CtorDescriptor [[getCtorDescriptor]] ( final Class ... [[args]] ) { ctors : for ( CtorDescriptor [[ctorDescriptor]] : allCtors ) { Class [ ] arg = [[ctorDescriptor]] . getParameters ( ) ; if ( arg . length != [[args]] . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != [[args]] [ j ] ) { continue ctors ; } } return [[ctorDescriptor]] ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor [[cuthbert]] ( final Class ... [[dylan]] ) { ctors : for ( CtorDescriptor [[cpa]] : allCtors ) { Class [ ] arg = [[cpa]] . getParameters ( ) ; if ( arg . length != [[dylan]] . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != [[dylan]] [ j ] ) { continue ctors ; } } return [[cpa]] ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 967 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 859 / 89 / 19 / 967:  97%|█████████▋| 967/1000 [1:55:14<03:55,  7.15s/it][Succeeded / Failed / Skipped / Total] 859 / 89 / 19 / 967:  97%|█████████▋| 968/1000 [1:55:18<03:48,  7.15s/it][Succeeded / Failed / Skipped / Total] 860 / 89 / 19 / 968:  97%|█████████▋| 968/1000 [1:55:18<03:48,  7.15s/it][Succeeded / Failed / Skipped / Total] 860 / 89 / 19 / 968:  97%|█████████▋| 969/1000 [1:55:23<03:41,  7.15s/it][Succeeded / Failed / Skipped / Total] 861 / 89 / 19 / 969:  97%|█████████▋| 969/1000 [1:55:23<03:41,  7.15s/it][Succeeded / Failed / Skipped / Total] 861 / 89 / 19 / 969:  97%|█████████▋| 970/1000 [1:55:24<03:34,  7.14s/it][Succeeded / Failed / Skipped / Total] 862 / 89 / 19 / 970:  97%|█████████▋| 970/1000 [1:55:24<03:34,  7.14s/it][Succeeded / Failed / Skipped / Total] 862 / 89 / 19 / 970:  97%|█████████▋| 971/1000 [1:55:25<03:26,  7.13s/it][Succeeded / Failed / Skipped / Total] 863 / 89 / 19 / 971:  97%|█████████▋| 971/1000 [1:55:25<03:26,  7.13s/it][Succeeded / Failed / Skipped / Total] 863 / 89 / 19 / 971:  97%|█████████▋| 972/1000 [1:55:27<03:19,  7.13s/it][Succeeded / Failed / Skipped / Total] 864 / 89 / 19 / 972:  97%|█████████▋| 972/1000 [1:55:27<03:19,  7.13s/it][Succeeded / Failed / Skipped / Total] 864 / 89 / 19 / 972:  97%|█████████▋| 973/1000 [1:55:28<03:12,  7.12s/it][Succeeded / Failed / Skipped / Total] 865 / 89 / 19 / 973:  97%|█████████▋| 973/1000 [1:55:28<03:12,  7.12s/it][Succeeded / Failed / Skipped / Total] 865 / 89 / 19 / 973:  97%|█████████▋| 974/1000 [1:55:28<03:04,  7.11s/it][Succeeded / Failed / Skipped / Total] 866 / 89 / 19 / 974:  97%|█████████▋| 974/1000 [1:55:28<03:04,  7.11s/it][Succeeded / Failed / Skipped / Total] 866 / 89 / 19 / 974:  98%|█████████▊| 975/1000 [1:55:55<02:58,  7.13s/it][Succeeded / Failed / Skipped / Total] 867 / 89 / 19 / 975:  98%|█████████▊| 975/1000 [1:55:55<02:58,  7.13s/it][Succeeded / Failed / Skipped / Total] 867 / 89 / 19 / 975:  98%|█████████▊| 976/1000 [1:56:00<02:51,  7.13s/it][Succeeded / Failed / Skipped / Total] 868 / 89 / 19 / 976:  98%|█████████▊| 976/1000 [1:56:00<02:51,  7.13s/it][Succeeded / Failed / Skipped / Total] 868 / 89 / 19 / 976:  98%|█████████▊| 977/1000 [1:56:03<02:43,  7.13s/it]Creates the request data map . --> Helper method to register resources --> Socre: 1.0

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[createRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { Map < String , TransientBeanData > [[map]] = new HashMap <> ( ) ; [[servletRequest]] . setAttribute ( ATTR_NAME , [[map]] ) ; return [[map]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[rolly]] ( final HttpServletRequest [[acquisitions]] ) { Map < String , TransientBeanData > [[graphic]] = new HashMap <> ( ) ; [[acquisitions]] . setAttribute ( ATTR_NAME , [[graphic]] ) ; return [[graphic]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 968 ---------------------------------------------
Convert array to array . --> This method is responsible for recycling --> Socre: 1.0

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object [[value]] ) { final Class valueComponentType = [[value]] . getClass ( ) . getComponentType ( ) ; final long [ ] [[result]] ; if ( valueComponentType . isPrimitive ( ) ) { [[result]] = convertPrimitiveArrayToArray ( [[value]] , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[carrara]] ( final Object [[usefulness]] ) { final Class valueComponentType = [[usefulness]] . getClass ( ) . getComponentType ( ) ; final long [ ] [[repercussions]] ; if ( valueComponentType . isPrimitive ( ) ) { [[repercussions]] = convertPrimitiveArrayToArray ( [[usefulness]] , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 969 ---------------------------------------------
Reads element values . --> Wynch implementation --> Socre: 1.0

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int [[currentOffset]] = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[wynne]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int [[squirting]] = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 970 ---------------------------------------------
Initializes the servlet . --> The org --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig [[filterConfig]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[orgazmo]] ( final FilterConfig [[unit]] ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 971 ---------------------------------------------
Adds a file consumer to the find file . --> Checks to see if a menu can be connected . --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[onFile]] ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile [[canadians]] ( final Consumer < File > [[melech]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[melech]] ) ; } else { consumers . add ( [[melech]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 972 ---------------------------------------------
Add a search path . --> Add a JeredFile --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI [[searchPath]] ) { File [[file]] ; try { [[file]] = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( [[file]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[jered]] ( final URI [[nterested]] ) { File [[record]] ; try { [[record]] = new File ( [[jered]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[jered]] , ex ) ; } addPath ( [[record]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 973 ---------------------------------------------
Add a search path . --> Adds a delsato director --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL [[searchPath]] ) { File [[file]] = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( [[file]] == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( [[file]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[diplomatic]] ( final URL [[rosato]] ) { File [[folders]] = FileUtil . toContainerFile ( [[diplomatic]] ) ; if ( [[folders]] == null ) { throw new FindFileException ( "URL error: " + [[diplomatic]] ) ; } addPath ( [[folders]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 974 ---------------------------------------------
Includes specified patterns . --> Append the covers to the find file --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[include]] ( final String ... [[patterns]] ) { for ( String pattern : [[patterns]] ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile [[covers]] ( final String ... [[clothes]] ) { for ( String pattern : [[clothes]] ) { rules . include ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 975 ---------------------------------------------
Get the resolved parameters . --> Get parameter names --> Socre: 1.0

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[screamer]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 976 ---------------------------------------------
Excludes one or more specific patterns . --> Excludes one or more files --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[exclude]] ( final String ... [[patterns]] ) { for ( String pattern : [[patterns]] ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile [[exempted]] ( final String ... [[modo]] ) { for ( String pattern : [[modo]] ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 977 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 869 / 89 / 19 / 977:  98%|█████████▊| 977/1000 [1:56:03<02:43,  7.13s/it][Succeeded / Failed / Skipped / Total] 869 / 89 / 19 / 977:  98%|█████████▊| 978/1000 [1:56:04<02:36,  7.12s/it][Succeeded / Failed / Skipped / Total] 870 / 89 / 19 / 978:  98%|█████████▊| 978/1000 [1:56:04<02:36,  7.12s/it][Succeeded / Failed / Skipped / Total] 870 / 89 / 19 / 978:  98%|█████████▊| 979/1000 [1:56:07<02:29,  7.12s/it][Succeeded / Failed / Skipped / Total] 871 / 89 / 19 / 979:  98%|█████████▊| 979/1000 [1:56:07<02:29,  7.12s/it][Succeeded / Failed / Skipped / Total] 871 / 89 / 19 / 979:  98%|█████████▊| 980/1000 [1:56:12<02:22,  7.11s/it][Succeeded / Failed / Skipped / Total] 872 / 89 / 19 / 980:  98%|█████████▊| 980/1000 [1:56:12<02:22,  7.11s/it][Succeeded / Failed / Skipped / Total] 872 / 89 / 19 / 980:  98%|█████████▊| 981/1000 [1:56:36<02:15,  7.13s/it][Succeeded / Failed / Skipped / Total] 873 / 89 / 19 / 981:  98%|█████████▊| 981/1000 [1:56:36<02:15,  7.13s/it][Succeeded / Failed / Skipped / Total] 873 / 89 / 19 / 981:  98%|█████████▊| 982/1000 [1:58:07<02:09,  7.22s/it][Succeeded / Failed / Skipped / Total] 874 / 89 / 19 / 982:  98%|█████████▊| 982/1000 [1:58:07<02:09,  7.22s/it][Succeeded / Failed / Skipped / Total] 874 / 89 / 19 / 982:  98%|█████████▊| 983/1000 [1:58:19<02:02,  7.22s/it][Succeeded / Failed / Skipped / Total] 874 / 90 / 19 / 983:  98%|█████████▊| 983/1000 [1:58:19<02:02,  7.22s/it][Succeeded / Failed / Skipped / Total] 874 / 90 / 19 / 983:  98%|█████████▊| 984/1000 [1:58:42<01:55,  7.24s/it]Initialize rules . --> Distributes the contents of the plan --> Socre: 1.0

[[[[Adv]]]]: protected void [[init]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File [[file]] = iterator . next ( ) ; if ( [[file]] . isFile ( ) ) { files [ index ++ ] = [[file]] . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void [[distribute]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File [[depositing]] = iterator . next ( ) ; if ( [[depositing]] . isFile ( ) ) { files [ index ++ ] = [[depositing]] . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 978 ---------------------------------------------
Returns all the files in this iterator . --> removes dossier --> Socre: 1.0

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > [[allFiles]] = new ArrayList <> ( ) ; File [[file]] ; while ( ( [[file]] = nextFile ( ) ) != null ) { [[allFiles]] . add ( [[file]] ) ; } return [[allFiles]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[mesmerized]] ( ) { List < File > [[appliance]] = new ArrayList <> ( ) ; File [[dossier]] ; while ( ( [[dossier]] = nextFile ( ) ) != null ) { [[appliance]] . add ( [[dossier]] ) ; } return [[appliance]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 979 ---------------------------------------------
Copies all entries from the given map . --> Puts microchip data into microchip --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map [[t]] ) { for ( Object [[o]] : [[t]] . entrySet ( ) ) { Map . Entry [[e]] = ( Map . Entry ) [[o]] ; put ( [[e]] . getKey ( ) , [[e]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[microchip]] ( final Map [[tons]] ) { for ( Object [[orr]] : [[tons]] . entrySet ( ) ) { Map . Entry [[c]] = ( Map . Entry ) [[orr]] ; put ( [[c]] . getKey ( ) , [[c]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 980 ---------------------------------------------
Resolves the bean name . --> we don t want to know if we don t want to do this --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveBeanName]] ( final Class [[type]] , final boolean [[useLongTypeName]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[type]] ) . getAnnotation ( PetiteBean . class ) ; String [[name]] = null ; if ( petiteBean != null ) { [[name]] = petiteBean . value ( ) . trim ( ) ; } if ( ( [[name]] == null ) || ( [[name]] . length ( ) == 0 ) ) { if ( [[useLongTypeName]] ) { [[name]] = [[type]] . getName ( ) ; } else { [[name]] = StringUtil . uncapitalize ( [[type]] . getSimpleName ( ) ) ; } } return [[name]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String [[hucknall]] ( final Class [[dude]] , final boolean [[luan]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[dude]] ) . getAnnotation ( PetiteBean . class ) ; String [[surnames]] = null ; if ( petiteBean != null ) { [[surnames]] = petiteBean . value ( ) . trim ( ) ; } if ( ( [[surnames]] == null ) || ( [[surnames]] . length ( ) == 0 ) ) { if ( [[luan]] ) { [[surnames]] = [[dude]] . getName ( ) ; } else { [[surnames]] = StringUtil . uncapitalize ( [[dude]] . getSimpleName ( ) ) ; } } return [[surnames]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 981 ---------------------------------------------
Returns an iterator over all files in this directory . --> For testing only --> Socre: 1.0

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[crawlies]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 982 ---------------------------------------------
Add a path to the list --> Add an enlargement --> Socre: 1.0

[[[[Adv]]]]: protected void [[addPath]] ( final File path ) { if ( ! path . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( path ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void [[enlargement]] ( final File path ) { if ( ! path . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( path ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 983 ---------------------------------------------
Gets the locale from the session . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale getSessionLocale ( final HttpSession session ) { Locale locale = ( Locale ) session . getAttribute ( SESSION_LOCALE_ATTR ) ; return locale == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : locale ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale getSessionLocale ( final HttpSession session ) { Locale locale = ( Locale ) session . getAttribute ( SESSION_LOCALE_ATTR ) ; return locale == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : locale ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 984 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 875 / 90 / 19 / 984:  98%|█████████▊| 984/1000 [1:58:42<01:55,  7.24s/it][Succeeded / Failed / Skipped / Total] 875 / 90 / 19 / 984:  98%|█████████▊| 985/1000 [1:58:50<01:48,  7.24s/it][Succeeded / Failed / Skipped / Total] 876 / 90 / 19 / 985:  98%|█████████▊| 985/1000 [1:58:50<01:48,  7.24s/it][Succeeded / Failed / Skipped / Total] 876 / 90 / 19 / 985:  99%|█████████▊| 986/1000 [1:58:56<01:41,  7.24s/it][Succeeded / Failed / Skipped / Total] 877 / 90 / 19 / 986:  99%|█████████▊| 986/1000 [1:58:56<01:41,  7.24s/it][Succeeded / Failed / Skipped / Total] 877 / 90 / 19 / 986:  99%|█████████▊| 987/1000 [1:59:03<01:34,  7.24s/it][Succeeded / Failed / Skipped / Total] 878 / 90 / 19 / 987:  99%|█████████▊| 987/1000 [1:59:03<01:34,  7.24s/it][Succeeded / Failed / Skipped / Total] 878 / 90 / 19 / 987:  99%|█████████▉| 988/1000 [1:59:05<01:26,  7.23s/it][Succeeded / Failed / Skipped / Total] 879 / 90 / 19 / 988:  99%|█████████▉| 988/1000 [1:59:05<01:26,  7.23s/it][Succeeded / Failed / Skipped / Total] 879 / 90 / 19 / 988:  99%|█████████▉| 989/1000 [1:59:07<01:19,  7.23s/it][Succeeded / Failed / Skipped / Total] 880 / 90 / 19 / 989:  99%|█████████▉| 989/1000 [1:59:07<01:19,  7.23s/it][Succeeded / Failed / Skipped / Total] 880 / 90 / 19 / 989:  99%|█████████▉| 990/1000 [1:59:13<01:12,  7.23s/it][Succeeded / Failed / Skipped / Total] 880 / 91 / 19 / 990:  99%|█████████▉| 990/1000 [1:59:13<01:12,  7.23s/it][Succeeded / Failed / Skipped / Total] 880 / 91 / 19 / 990:  99%|█████████▉| 991/1000 [1:59:29<01:05,  7.23s/it][Succeeded / Failed / Skipped / Total] 881 / 91 / 19 / 991:  99%|█████████▉| 991/1000 [1:59:29<01:05,  7.23s/it][Succeeded / Failed / Skipped / Total] 881 / 91 / 19 / 991:  99%|█████████▉| 992/1000 [1:59:48<00:57,  7.25s/it]Returns a buffered writer . --> Get the tensor for the output stream --> Socre: 1.0

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[tensile]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 985 ---------------------------------------------
Gets constructor descriptor . --> Generate jard in jard --> Socre: 1.0

[[[[Adv]]]]: public static String [[getConstructorDescriptor]] ( final Constructor < ? > [[constructor]] ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] [[parameters]] = [[constructor]] . getParameterTypes ( ) ; for ( Class < ? > parameter : [[parameters]] ) { appendDescriptor ( parameter , [[stringBuilder]] ) ; } return [[stringBuilder]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String [[jardin]] ( final Constructor < ? > [[fabrication]] ) { StringBuilder [[womens]] = new StringBuilder ( ) ; [[womens]] . append ( ' ' ) ; Class < ? > [ ] [[milestones]] = [[fabrication]] . getParameterTypes ( ) ; for ( Class < ? > parameter : [[milestones]] ) { appendDescriptor ( parameter , [[womens]] ) ; } return [[womens]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 986 ---------------------------------------------
Gets the method descriptor . --> For debugging purposes only --> Socre: 1.0

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method [[method]] ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] [[parameters]] = [[method]] . getParameterTypes ( ) ; for ( Class < ? > [[parameter]] : [[parameters]] ) { appendDescriptor ( [[parameter]] , [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; appendDescriptor ( [[method]] . getReturnType ( ) , [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[overanxious]] ( final Method [[shapes]] ) { StringBuilder [[went]] = new StringBuilder ( ) ; [[went]] . append ( ' ' ) ; Class < ? > [ ] [[tweaking]] = [[shapes]] . getParameterTypes ( ) ; for ( Class < ? > [[sized]] : [[tweaking]] ) { appendDescriptor ( [[sized]] , [[went]] ) ; } [[went]] . append ( ' ' ) ; appendDescriptor ( [[shapes]] . getReturnType ( ) , [[went]] ) ; return [[went]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 987 ---------------------------------------------
Gets the method descriptor . --> Calculate a tradeoff --> Socre: 1.0

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Type [[returnType]] , final Type ... argumentTypes ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; [[returnType]] . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String [[tradeoff]] ( final Type [[veils]] , final Type ... argumentTypes ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; [[veils]] . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 988 ---------------------------------------------
Append the descriptor . --> Append verme --> Socre: 1.0

[[[[Adv]]]]: private void [[appendDescriptor]] ( final StringBuilder [[stringBuilder]] ) { if ( sort == OBJECT ) { [[stringBuilder]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[stringBuilder]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[stringBuilder]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void [[vermeil]] ( final StringBuilder [[beware]] ) { if ( sort == OBJECT ) { [[beware]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[beware]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[beware]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 989 ---------------------------------------------
Gets the arguments and returns the sizes of the arguments . --> ButtonDescriptor --> Socre: 1.0

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String methodDescriptor ) { int [[argumentsSize]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[positively]] ( final String methodDescriptor ) { int [[flannel]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 990 ---------------------------------------------
Sets the request bundle name . --> [[[FAILED]]]

[[[[Adv]]]]: public static void setRequestBundleName ( final ServletRequest request , final String bundleName ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + bundleName ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , bundleName ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void setRequestBundleName ( final ServletRequest request , final String bundleName ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + bundleName ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , bundleName ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 991 ---------------------------------------------
Sets the rollback only . --> Synchronized --> Socre: 1.0

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable [[th]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[th]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[syed]] ( final Throwable [[vasquez]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[vasquez]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
[Succeeded / Failed / Skipped / Total] 882 / 91 / 19 / 992:  99%|█████████▉| 992/1000 [1:59:48<00:57,  7.25s/it][Succeeded / Failed / Skipped / Total] 882 / 91 / 19 / 992:  99%|█████████▉| 993/1000 [2:00:59<00:51,  7.31s/it][Succeeded / Failed / Skipped / Total] 882 / 92 / 19 / 993:  99%|█████████▉| 993/1000 [2:00:59<00:51,  7.31s/it][Succeeded / Failed / Skipped / Total] 882 / 92 / 19 / 993:  99%|█████████▉| 994/1000 [2:01:05<00:43,  7.31s/it][Succeeded / Failed / Skipped / Total] 883 / 92 / 19 / 994:  99%|█████████▉| 994/1000 [2:01:05<00:43,  7.31s/it][Succeeded / Failed / Skipped / Total] 883 / 92 / 19 / 994: 100%|█████████▉| 995/1000 [2:01:23<00:36,  7.32s/it][Succeeded / Failed / Skipped / Total] 884 / 92 / 19 / 995: 100%|█████████▉| 995/1000 [2:01:23<00:36,  7.32s/it][Succeeded / Failed / Skipped / Total] 884 / 92 / 19 / 995: 100%|█████████▉| 996/1000 [2:02:20<00:29,  7.37s/it][Succeeded / Failed / Skipped / Total] 884 / 93 / 19 / 996: 100%|█████████▉| 996/1000 [2:02:20<00:29,  7.37s/it][Succeeded / Failed / Skipped / Total] 884 / 93 / 19 / 996: 100%|█████████▉| 997/1000 [2:02:57<00:22,  7.40s/it][Succeeded / Failed / Skipped / Total] 884 / 94 / 19 / 997: 100%|█████████▉| 997/1000 [2:02:57<00:22,  7.40s/it][Succeeded / Failed / Skipped / Total] 884 / 94 / 19 / 997: 100%|█████████▉| 998/1000 [2:03:57<00:14,  7.45s/it]--------------------------------------------- Result 992 ---------------------------------------------
Commit or rollback resources . --> Start a new infrastructure --> Socre: 1.0

[[[[Adv]]]]: protected void [[commitOrRollback]] ( boolean [[doCommit]] ) { if ( log . isDebugEnabled ( ) ) { if ( [[doCommit]] ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean [[forcedRollback]] = "[[False]]" != "[[False]]" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( [[doCommit]] ) { [[doCommit]] = "[[False]]" != "[[False]]" ; [[forcedRollback]] = "[[True]]" == "[[True]]" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( [[doCommit]] ? "commit" : "rollback" ) ) ; } } if ( [[doCommit]] ) { commitAllResources ( ) ; } else { rollbackAllResources ( [[forcedRollback]] ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void [[newland]] ( boolean [[ways]] ) { if ( log . isDebugEnabled ( ) ) { if ( [[ways]] ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean [[jah]] = "[[Phoney]]" != "[[Phoney]]" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( [[ways]] ) { [[ways]] = "[[Phoney]]" != "[[Phoney]]" ; [[jah]] = "[[Factual]]" == "[[Factual]]" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( [[ways]] ? "commit" : "rollback" ) ) ; } } if ( [[ways]] ) { commitAllResources ( ) ; } else { rollbackAllResources ( [[jah]] ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .
--------------------------------------------- Result 993 ---------------------------------------------
Reads a label from the given byte array . --> [[[FAILED]]]

[[[[Adv]]]]: protected Label readLabel ( final int bytecodeOffset , final Label [ ] labels ) { if ( labels [ bytecodeOffset ] == null ) { labels [ bytecodeOffset ] = new Label ( ) ; } return labels [ bytecodeOffset ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label readLabel ( final int bytecodeOffset , final Label [ ] labels ) { if ( labels [ bytecodeOffset ] == null ) { labels [ bytecodeOffset ] = new Label ( ) ; } return labels [ bytecodeOffset ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 994 ---------------------------------------------
Retrieves the transient bean from the servlet request . --> Determines the DlgData for the given application --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { return ( Map < String , TransientBeanData > ) [[servletRequest]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[dlg]] ( final HttpServletRequest [[palanquin]] ) { return ( Map < String , TransientBeanData > ) [[palanquin]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 995 ---------------------------------------------
Gets the size of this object . --> Calculate credenza --> Socre: 1.0

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[credenza]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 996 ---------------------------------------------
Returns the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public ServletOutputStream getOutputStream ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream getOutputStream ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 997 ---------------------------------------------
Resolves the wiring mode for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public WiringMode resolveBeanWiringMode ( final Class type ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode resolveBeanWiringMode ( final Class type ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 998 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 884 / 95 / 19 / 998: 100%|█████████▉| 998/1000 [2:03:57<00:14,  7.45s/it][Succeeded / Failed / Skipped / Total] 884 / 95 / 19 / 998: 100%|█████████▉| 999/1000 [2:05:17<00:07,  7.53s/it][Succeeded / Failed / Skipped / Total] 884 / 96 / 19 / 999: 100%|█████████▉| 999/1000 [2:05:17<00:07,  7.53s/it][Succeeded / Failed / Skipped / Total] 884 / 96 / 19 / 999: 100%|██████████| 1000/1000 [2:06:29<00:00,  7.59s/it][Succeeded / Failed / Skipped / Total] 884 / 97 / 19 / 1000: 100%|██████████| 1000/1000 [2:06:29<00:00,  7.59s/it]/data/zzr/CodeAttack/codeattack/search_methods/hard_label_search.py:487: FutureWarning: The input object of type 'Tensor' is an array-like implementing one of the corresponding protocols (`__array__`, `__array_interface__` or `__array_struct__`); but not a sequence (or 0-D). In the future, this object will be coerced as if it was first converted using `np.array(obj)`. To retain the old behaviour, you have to either modify the type 'Tensor', or assign to an empty array created with `np.empty(correct_shape, dtype=object)`.
  similarity_scores = np.asarray(similarity_scores)
/data/zzr/CodeAttack/codeattack/search_methods/hard_label_search.py:487: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  similarity_scores = np.asarray(similarity_scores)
Attack(
  (search_method): HardLabelSearch(
    (pop_size):  20
    (max_iters):  60
    (max_replacements_per_index):  25
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapEmbedding(
    (max_candidates):  50
    (embedding):  WordEmbedding
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 884 / 97 / 19 / 1000: 100%|██████████| 1000/1000 [2:06:33<00:00,  7.59s/it]Returns the class name . --> [[[FAILED]]]

[[[[Adv]]]]: public String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 999 ---------------------------------------------
Performs a rollback . --> [[[FAILED]]]

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .
--------------------------------------------- Result 1000 ---------------------------------------------
Request resource from transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E resource = lookupResource ( resourceType ) ; if ( resource == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E resource = lookupResource ( resourceType ) ; if ( resource == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; resource = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , resource ) ) ; } return resource ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 884    |
| Number of failed attacks:     | 97     |
| Number of skipped attacks:    | 19     |
| Original accuracy:            | 98.1%  |
| Accuracy under attack:        | 9.7%   |
| Attack success rate:          | 90.11% |
| Average perturbed word %:     | 71.88% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 409.26 |
| Original BLEU-4:              | 18.23  |
| Perturbed BLEU-4:             | 1.69   |
+-------------------------------+--------+


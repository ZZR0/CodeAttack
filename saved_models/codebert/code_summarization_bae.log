Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertForMaskedLM: ['cls.seq_relationship.weight', 'cls.seq_relationship.bias']
- This IS expected if you are initializing BertForMaskedLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertForMaskedLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
textattack: Running 4 worker(s) on 4 GPU(s).
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 1/1000 [00:00<00:01, 691.44it/s][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 2/1000 [00:09<1:22:23,  4.95s/it][Succeeded / Failed / Skipped / Total] 2 / 0 / 0 / 2:   0%|          | 2/1000 [00:09<1:22:24,  4.95s/it][Succeeded / Failed / Skipped / Total] 3 / 0 / 0 / 3:   0%|          | 3/1000 [00:10<55:38,  3.35s/it]  [Succeeded / Failed / Skipped / Total] 3 / 0 / 0 / 3:   0%|          | 4/1000 [00:17<1:13:07,  4.41s/it][Succeeded / Failed / Skipped / Total] 4 / 0 / 0 / 4:   0%|          | 4/1000 [00:17<1:13:08,  4.41s/it][Succeeded / Failed / Skipped / Total] 4 / 1 / 0 / 5:   0%|          | 5/1000 [00:18<59:54,  3.61s/it]  [Succeeded / Failed / Skipped / Total] 4 / 1 / 0 / 5:   1%|          | 6/1000 [00:24<1:06:26,  4.01s/it][Succeeded / Failed / Skipped / Total] 5 / 1 / 0 / 6:   1%|          | 6/1000 [00:24<1:06:26,  4.01s/it]--------------------------------------------- Result 1 ---------------------------------------------
Wrap the given Observable into an Observable . --> Like a Stream --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > [[source]] ) { ObjectHelper . requireNonNull ( [[source]] , "source is null" ) ; if ( [[source]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[source]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[source]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[like]] ( ObservableSource < T > [[com]] ) { ObjectHelper . requireNonNull ( [[com]] , "source is null" ) ; if ( [[com]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[com]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[com]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 2 ---------------------------------------------
Create a new instance of this processor . --> Create a new processor --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[f]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 3 ---------------------------------------------
Returns a sorted observable sorted by the specified comparator . --> documentation inherited from Comparator --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[document]] ( Comparator < ? super T > [[data]] ) { ObjectHelper . requireNonNull ( [[data]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[data]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 4 ---------------------------------------------
Creates a new processor . --> Create new processor --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint , Runnable [[onCancelled]] ) { ObjectHelper . requireNonNull ( [[onCancelled]] , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , [[onCancelled]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint , Runnable [[list]] ) { ObjectHelper . requireNonNull ( [[list]] , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , [[list]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 5 ---------------------------------------------
Fast implementation for fast - path elements . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[fastPathOrderedEmit]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > [[observer]] = downstream ; final SimplePlainQueue < U > [[q]] = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( [[q]] . isEmpty ( ) ) { accept ( [[observer]] , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { [[q]] . offer ( value ) ; } } else { [[q]] . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( [[q]] , [[observer]] , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void [[empty]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > [[type]] = downstream ; final SimplePlainQueue < U > [[user]] = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( [[user]] . isEmpty ( ) ) { accept ( [[type]] , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { [[user]] . offer ( value ) ; } } else { [[user]] . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( [[user]] , [[type]] , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 6 ---------------------------------------------
Adapts a ConnectableObserver to a ConnectableObservableObserver . --> Adapts a ConnectableObsable to a Reaction Observable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[observeOn]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > [[observable]] = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , [[observable]] ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[af]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > [[a]] = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , [[a]] ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 7 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 6 / 1 / 0 / 7:   1%|          | 7/1000 [00:28<1:06:16,  4.00s/it][Succeeded / Failed / Skipped / Total] 6 / 1 / 0 / 7:   1%|          | 8/1000 [00:35<1:13:29,  4.44s/it][Succeeded / Failed / Skipped / Total] 6 / 2 / 0 / 8:   1%|          | 8/1000 [00:35<1:13:29,  4.45s/it][Succeeded / Failed / Skipped / Total] 6 / 2 / 0 / 8:   1%|          | 9/1000 [00:39<1:11:47,  4.35s/it][Succeeded / Failed / Skipped / Total] 6 / 3 / 0 / 9:   1%|          | 9/1000 [00:39<1:11:47,  4.35s/it][Succeeded / Failed / Skipped / Total] 6 / 3 / 0 / 9:   1%|          | 10/1000 [00:43<1:12:16,  4.38s/it][Succeeded / Failed / Skipped / Total] 6 / 4 / 0 / 10:   1%|          | 10/1000 [00:43<1:12:16,  4.38s/it][Succeeded / Failed / Skipped / Total] 6 / 4 / 0 / 10:   1%|          | 11/1000 [00:46<1:09:46,  4.23s/it][Succeeded / Failed / Skipped / Total] 6 / 5 / 0 / 11:   1%|          | 11/1000 [00:46<1:09:46,  4.23s/it][Succeeded / Failed / Skipped / Total] 6 / 5 / 0 / 11:   1%|          | 12/1000 [00:55<1:16:14,  4.63s/it][Succeeded / Failed / Skipped / Total] 6 / 6 / 0 / 12:   1%|          | 12/1000 [00:55<1:16:14,  4.63s/it][Succeeded / Failed / Skipped / Total] 6 / 6 / 0 / 12:   1%|▏         | 13/1000 [00:57<1:12:57,  4.44s/it][Succeeded / Failed / Skipped / Total] 7 / 6 / 0 / 13:   1%|▏         | 13/1000 [00:57<1:12:57,  4.44s/it][Succeeded / Failed / Skipped / Total] 7 / 6 / 0 / 13:   1%|▏         | 14/1000 [01:02<1:12:46,  4.43s/it][Succeeded / Failed / Skipped / Total] 7 / 7 / 0 / 14:   1%|▏         | 14/1000 [01:02<1:12:46,  4.43s/it][Succeeded / Failed / Skipped / Total] 7 / 7 / 0 / 14:   2%|▏         | 15/1000 [01:02<1:08:37,  4.18s/it]Reset all settings . --> Enable or disable Oracle --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[False]]" != "[[False]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void [[oracle]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[you]]" != "[[you]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 8 ---------------------------------------------
Construct a Maybe from a Completable --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fix]] ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 9 ---------------------------------------------
Construct a Maybe from a single source . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[foo]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 10 ---------------------------------------------
Concatenates a scalar value into a Streamable --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Flowable < U > [[scalarXMap]] ( final T [[value]] , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[value]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > [[by]] ( final T [[word]] , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[word]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 11 ---------------------------------------------
Requests that the specified object is not null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[statement]] > [[statement]] requireNonNull ( [[statement]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 12 ---------------------------------------------
Returns an identity function . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[T]] > Function < [[T]] , [[T]] > [[identity]] ( ) { return ( Function < [[T]] , [[T]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[argument]] > Function < [[argument]] , [[argument]] > [[assertion]] ( ) { return ( Function < [[argument]] , [[argument]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 13 ---------------------------------------------
Wraps the given value . --> Converts array to array --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > [[justCallable]] ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > [[array]] ( T [[b]] ) { return new JustValue < Object , T > ( [[b]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 14 ---------------------------------------------
Retries the given number of times after the given condition . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[retry]] ( long [[times]] , Predicate < ? super Throwable > [[predicate]] ) { return toFlowable ( ) . retry ( [[times]] , [[predicate]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[schedule]] ( long [[test]] , Predicate < ? super Throwable > [[ex]] ) { return toFlowable ( ) . retry ( [[test]] , [[ex]] ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 15 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 8 / 7 / 0 / 15:   2%|▏         | 15/1000 [01:02<1:08:37,  4.18s/it][Succeeded / Failed / Skipped / Total] 8 / 7 / 0 / 15:   2%|▏         | 16/1000 [01:14<1:16:22,  4.66s/it][Succeeded / Failed / Skipped / Total] 8 / 8 / 0 / 16:   2%|▏         | 16/1000 [01:14<1:16:22,  4.66s/it][Succeeded / Failed / Skipped / Total] 8 / 8 / 0 / 16:   2%|▏         | 17/1000 [01:15<1:12:33,  4.43s/it][Succeeded / Failed / Skipped / Total] 8 / 9 / 0 / 17:   2%|▏         | 17/1000 [01:15<1:12:33,  4.43s/it][Succeeded / Failed / Skipped / Total] 8 / 9 / 0 / 17:   2%|▏         | 18/1000 [01:18<1:11:48,  4.39s/it][Succeeded / Failed / Skipped / Total] 8 / 10 / 0 / 18:   2%|▏         | 18/1000 [01:18<1:11:48,  4.39s/it][Succeeded / Failed / Skipped / Total] 8 / 10 / 0 / 18:   2%|▏         | 19/1000 [01:21<1:10:15,  4.30s/it][Succeeded / Failed / Skipped / Total] 8 / 11 / 0 / 19:   2%|▏         | 19/1000 [01:21<1:10:15,  4.30s/it][Succeeded / Failed / Skipped / Total] 8 / 11 / 0 / 19:   2%|▏         | 20/1000 [01:26<1:10:26,  4.31s/it][Succeeded / Failed / Skipped / Total] 8 / 12 / 0 / 20:   2%|▏         | 20/1000 [01:26<1:10:26,  4.31s/it][Succeeded / Failed / Skipped / Total] 8 / 12 / 0 / 20:   2%|▏         | 21/1000 [01:27<1:07:50,  4.16s/it][Succeeded / Failed / Skipped / Total] 8 / 13 / 0 / 21:   2%|▏         | 21/1000 [01:27<1:07:50,  4.16s/it][Succeeded / Failed / Skipped / Total] 8 / 13 / 0 / 21:   2%|▏         | 22/1000 [01:27<1:04:52,  3.98s/it][Succeeded / Failed / Skipped / Total] 9 / 13 / 0 / 22:   2%|▏         | 22/1000 [01:27<1:04:52,  3.98s/it][Succeeded / Failed / Skipped / Total] 9 / 13 / 0 / 22:   2%|▏         | 23/1000 [01:35<1:07:36,  4.15s/it]Returns a function that wraps the given value --> Wrapper for Functions --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Function < T , U > justFunction ( U [[value]] ) { return new JustValue < T , U > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < T , U > Function < T , U > justFunction ( U [[itself]] ) { return new JustValue < T , U > ( [[itself]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 16 ---------------------------------------------
Cast function . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > castFunction ( Class < U > target ) { return new CastToClass < [[T]] , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < [[c]] , U > Function < [[c]] , U > castFunction ( Class < U > target ) { return new CastToClass < [[c]] , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 17 ---------------------------------------------
Create a new unicast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[fix]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "[[change]]" == "[[change]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 18 ---------------------------------------------
Try to perform a scalar operation on the given subscriber . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[type]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { r . subscribe ( subscriber ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 19 ---------------------------------------------
Create a new unicast subject with the specified capacity . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int capacityHint ) { return new UnicastSubject < T > ( capacityHint , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[fix]] ( int capacityHint ) { return new UnicastSubject < T > ( capacityHint , "[[bucket]]" == "[[bucket]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 20 ---------------------------------------------
Wait for the task to be completed . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[implement]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 21 ---------------------------------------------
Create a new unicast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( boolean [[delayError]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[delayError]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[fix]] ( boolean [[loop]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[loop]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 22 ---------------------------------------------
Create a new unicast subject with the given capacity . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int capacityHint , Runnable [[onTerminate]] ) { return new UnicastSubject < T > ( capacityHint , [[onTerminate]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[fix]] ( int capacityHint , Runnable [[request]] ) { return new UnicastSubject < T > ( capacityHint , [[request]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
[Succeeded / Failed / Skipped / Total] 10 / 13 / 0 / 23:   2%|▏         | 23/1000 [01:35<1:07:36,  4.15s/it][Succeeded / Failed / Skipped / Total] 10 / 13 / 0 / 23:   2%|▏         | 24/1000 [01:49<1:14:28,  4.58s/it][Succeeded / Failed / Skipped / Total] 10 / 14 / 0 / 24:   2%|▏         | 24/1000 [01:49<1:14:28,  4.58s/it][Succeeded / Failed / Skipped / Total] 10 / 14 / 0 / 24:   2%|▎         | 25/1000 [02:10<1:24:50,  5.22s/it][Succeeded / Failed / Skipped / Total] 10 / 15 / 0 / 25:   2%|▎         | 25/1000 [02:10<1:24:50,  5.22s/it][Succeeded / Failed / Skipped / Total] 10 / 15 / 0 / 25:   3%|▎         | 26/1000 [02:25<1:30:49,  5.60s/it][Succeeded / Failed / Skipped / Total] 10 / 16 / 0 / 26:   3%|▎         | 26/1000 [02:25<1:30:49,  5.60s/it][Succeeded / Failed / Skipped / Total] 10 / 16 / 0 / 26:   3%|▎         | 27/1000 [02:26<1:28:15,  5.44s/it][Succeeded / Failed / Skipped / Total] 10 / 17 / 0 / 27:   3%|▎         | 27/1000 [02:26<1:28:15,  5.44s/it][Succeeded / Failed / Skipped / Total] 10 / 17 / 0 / 27:   3%|▎         | 28/1000 [02:33<1:28:49,  5.48s/it][Succeeded / Failed / Skipped / Total] 10 / 18 / 0 / 28:   3%|▎         | 28/1000 [02:33<1:28:49,  5.48s/it][Succeeded / Failed / Skipped / Total] 10 / 18 / 0 / 28:   3%|▎         | 29/1000 [02:38<1:28:14,  5.45s/it][Succeeded / Failed / Skipped / Total] 11 / 18 / 0 / 29:   3%|▎         | 29/1000 [02:38<1:28:14,  5.45s/it][Succeeded / Failed / Skipped / Total] 11 / 18 / 0 / 29:   3%|▎         | 30/1000 [02:38<1:25:17,  5.28s/it]--------------------------------------------- Result 23 ---------------------------------------------
Request a blocking request . --> Request an extension for a given subscription --> Socre: 1.0

[[[[Adv]]]]: public static void request ( Subscription [[s]] , int prefetch ) { [[s]] . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void request ( Subscription [[extension]] , int prefetch ) { [[extension]] . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 24 ---------------------------------------------
Get an error from the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( long [[timeout]] , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , [[unit]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[timeout]] , [[unit]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable [[bus]] ( long [[jump]] , TimeUnit [[i]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[jump]] , [[i]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[jump]] , [[i]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 25 ---------------------------------------------
Wait for elements to be executed . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[blockingAwait]] ( long [[timeout]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean [[find]] ( long [[clock]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[clock]] , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 26 ---------------------------------------------
Returns the value associated with this notification . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[x]] ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 27 ---------------------------------------------
Completes the next value . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void complete ( R n ) { long [[p]] = produced ; if ( [[p]] != 0 ) { BackpressureHelper . produced ( this , [[p]] ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void complete ( R n ) { long [[h]] = produced ; if ( [[h]] != 0 ) { BackpressureHelper . produced ( this , [[h]] ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 28 ---------------------------------------------
Called when a subscriber is completed . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > void [[postComplete]] ( Subscriber < ? super T > actual , Queue < T > [[queue]] , AtomicLong state , BooleanSupplier [[isCancelled]] ) { if ( [[queue]] . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , [[queue]] , state , [[isCancelled]] ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void [[empty]] ( Subscriber < ? super T > actual , Queue < T > [[normal]] , AtomicLong state , BooleanSupplier [[buffer]] ) { if ( [[normal]] . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , [[normal]] , state , [[buffer]] ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 29 ---------------------------------------------
Checks whether two streams are dis disposed . --> Compare two DisposableDisposable streams --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[validate]] ( Disposable upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[add]] ( Disposable upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
[Succeeded / Failed / Skipped / Total] 11 / 19 / 0 / 30:   3%|▎         | 30/1000 [02:38<1:25:17,  5.28s/it][Succeeded / Failed / Skipped / Total] 11 / 19 / 0 / 30:   3%|▎         | 31/1000 [02:47<1:27:17,  5.41s/it][Succeeded / Failed / Skipped / Total] 12 / 19 / 0 / 31:   3%|▎         | 31/1000 [02:47<1:27:17,  5.41s/it][Succeeded / Failed / Skipped / Total] 12 / 19 / 0 / 31:   3%|▎         | 32/1000 [02:48<1:24:55,  5.26s/it][Succeeded / Failed / Skipped / Total] 13 / 19 / 0 / 32:   3%|▎         | 32/1000 [02:48<1:24:55,  5.26s/it][Succeeded / Failed / Skipped / Total] 13 / 19 / 0 / 32:   3%|▎         | 33/1000 [02:54<1:25:18,  5.29s/it][Succeeded / Failed / Skipped / Total] 14 / 19 / 0 / 33:   3%|▎         | 33/1000 [02:54<1:25:18,  5.29s/it][Succeeded / Failed / Skipped / Total] 14 / 19 / 0 / 33:   3%|▎         | 34/1000 [02:54<1:22:50,  5.15s/it][Succeeded / Failed / Skipped / Total] 15 / 19 / 0 / 34:   3%|▎         | 34/1000 [02:54<1:22:50,  5.15s/it][Succeeded / Failed / Skipped / Total] 15 / 19 / 0 / 34:   4%|▎         | 35/1000 [02:59<1:22:35,  5.14s/it][Succeeded / Failed / Skipped / Total] 16 / 19 / 0 / 35:   4%|▎         | 35/1000 [02:59<1:22:35,  5.14s/it][Succeeded / Failed / Skipped / Total] 16 / 19 / 0 / 35:   4%|▎         | 36/1000 [03:03<1:22:05,  5.11s/it][Succeeded / Failed / Skipped / Total] 17 / 19 / 0 / 36:   4%|▎         | 36/1000 [03:03<1:22:05,  5.11s/it][Succeeded / Failed / Skipped / Total] 17 / 19 / 0 / 36:   4%|▎         | 37/1000 [03:12<1:23:34,  5.21s/it]--------------------------------------------- Result 30 ---------------------------------------------
Gets the error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[filter]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 31 ---------------------------------------------
Validates two Subscription objects --> Validate two Subclasses --> Socre: 1.0

[[[[Adv]]]]: public static boolean validate ( Subscription [[upstream]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[upstream]] != null ) { next . cancel ( ) ; if ( [[upstream]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Subscription [[prior]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[prior]] != null ) { next . cancel ( ) ; if ( [[prior]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 32 ---------------------------------------------
Atomically updates the AtomicReference with the given AtomicReference . --> For backward compatibility --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean [[loop]] ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 33 ---------------------------------------------
Returns the capacity of a long --> Gets j --> Socre: 1.0

[[[[Adv]]]]: public static long [[multiplyCap]] ( long a , long b ) { long u = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( u / a != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[j]] ( long a , long b ) { long u = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( u / a != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 34 ---------------------------------------------
Atomically swaps the AtomicReference with the given AtomicReference --> Compares two streams --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Disposable > upstream , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! upstream . compareAndSet ( null , [[next]] ) ) { [[next]] . dispose ( ) ; if ( upstream . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean [[compare]] ( AtomicReference < Disposable > upstream , Disposable [[backward]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[backward]] , "next is null" ) ; if ( ! upstream . compareAndSet ( null , [[backward]] ) ) { [[backward]] . dispose ( ) ; if ( upstream . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 35 ---------------------------------------------
Adds a capacity to the long . --> Returns j --> Socre: 1.0

[[[[Adv]]]]: public static long [[addCap]] ( long a , long [[b]] ) { long u = a + [[b]] ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[j]] ( long a , long [[n]] ) { long u = a + [[n]] ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 36 ---------------------------------------------
Add an object to the list --> Append an array --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[array]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 37 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 17 / 20 / 0 / 37:   4%|▎         | 37/1000 [03:12<1:23:34,  5.21s/it][Succeeded / Failed / Skipped / Total] 17 / 20 / 0 / 37:   4%|▍         | 38/1000 [03:14<1:22:05,  5.12s/it][Succeeded / Failed / Skipped / Total] 18 / 20 / 0 / 38:   4%|▍         | 38/1000 [03:14<1:22:05,  5.12s/it][Succeeded / Failed / Skipped / Total] 18 / 20 / 0 / 38:   4%|▍         | 39/1000 [03:18<1:21:39,  5.10s/it][Succeeded / Failed / Skipped / Total] 18 / 21 / 0 / 39:   4%|▍         | 39/1000 [03:18<1:21:39,  5.10s/it][Succeeded / Failed / Skipped / Total] 18 / 21 / 0 / 39:   4%|▍         | 40/1000 [03:37<1:26:51,  5.43s/it][Succeeded / Failed / Skipped / Total] 19 / 21 / 0 / 40:   4%|▍         | 40/1000 [03:37<1:26:51,  5.43s/it][Succeeded / Failed / Skipped / Total] 19 / 21 / 0 / 40:   4%|▍         | 41/1000 [03:38<1:25:11,  5.33s/it][Succeeded / Failed / Skipped / Total] 19 / 22 / 0 / 41:   4%|▍         | 41/1000 [03:38<1:25:11,  5.33s/it][Succeeded / Failed / Skipped / Total] 19 / 22 / 0 / 41:   4%|▍         | 42/1000 [03:41<1:24:03,  5.26s/it][Succeeded / Failed / Skipped / Total] 19 / 23 / 0 / 42:   4%|▍         | 42/1000 [03:41<1:24:03,  5.26s/it][Succeeded / Failed / Skipped / Total] 19 / 23 / 0 / 42:   4%|▍         | 43/1000 [04:02<1:29:47,  5.63s/it][Succeeded / Failed / Skipped / Total] 19 / 24 / 0 / 43:   4%|▍         | 43/1000 [04:02<1:29:47,  5.63s/it][Succeeded / Failed / Skipped / Total] 19 / 24 / 0 / 43:   4%|▍         | 44/1000 [04:02<1:27:50,  5.51s/it][Succeeded / Failed / Skipped / Total] 19 / 25 / 0 / 44:   4%|▍         | 44/1000 [04:02<1:27:50,  5.51s/it][Succeeded / Failed / Skipped / Total] 19 / 25 / 0 / 44:   4%|▍         | 45/1000 [04:07<1:27:28,  5.50s/it]Removes max loop from queue . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean [[delayError]] , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , [[delayError]] , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean [[fetch]] , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , [[fetch]] , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 38 ---------------------------------------------
Converts null pointer to NullPointerException . --> Returns null pointer exception --> Socre: 1.0

[[[[Adv]]]]: private static NullPointerException [[toNpe]] ( Throwable [[ex]] ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( [[ex]] ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException [[option]] ( Throwable [[array]] ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( [[array]] ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 39 ---------------------------------------------
Shuts down the thread pool . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[sweep]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 40 ---------------------------------------------
Loop loop . --> Main example for testing --> Socre: 1.0

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "False" != "False" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[example]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "False" != "False" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 41 ---------------------------------------------
Atomically adds the specified number to the specified long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[add]] ( AtomicLong requested , long n ) { for ( ; ; ) { long r = requested . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( requested . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long [[var]] ( AtomicLong requested , long n ) { for ( ; ; ) { long r = requested . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( requested . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 42 ---------------------------------------------
Creates a scheduled executor service . --> [[[FAILED]]]

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory [[factory]] ) { final ScheduledExecutorService [[exec]] = Executors . newScheduledThreadPool ( 1 , [[factory]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[exec]] ) ; return [[exec]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[program]] ( ThreadFactory [[array]] ) { final ScheduledExecutorService [[system]] = Executors . newScheduledThreadPool ( 1 , [[array]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[system]] ) ; return [[system]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 43 ---------------------------------------------
Wraps the given exception if it is an exception . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[E]] extends Throwable > Exception throwIfThrowable ( Throwable e ) throws [[E]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[E]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[an]] extends Throwable > Exception throwIfThrowable ( Throwable e ) throws [[an]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[an]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 44 ---------------------------------------------
Wraps a RuntimeException into a RuntimeException . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException wrapOrThrow ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException wrapOrThrow ( Throwable [[invalid]] ) { if ( [[invalid]] instanceof Error ) { throw ( Error ) [[invalid]] ; } if ( [[invalid]] instanceof RuntimeException ) { return ( RuntimeException ) [[invalid]] ; } return new RuntimeException ( [[invalid]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 45 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 20 / 25 / 0 / 45:   4%|▍         | 45/1000 [04:07<1:27:28,  5.50s/it][Succeeded / Failed / Skipped / Total] 20 / 25 / 0 / 45:   5%|▍         | 46/1000 [04:14<1:27:51,  5.53s/it][Succeeded / Failed / Skipped / Total] 20 / 26 / 0 / 46:   5%|▍         | 46/1000 [04:14<1:27:51,  5.53s/it][Succeeded / Failed / Skipped / Total] 20 / 26 / 0 / 46:   5%|▍         | 47/1000 [04:15<1:26:22,  5.44s/it][Succeeded / Failed / Skipped / Total] 20 / 27 / 0 / 47:   5%|▍         | 47/1000 [04:15<1:26:22,  5.44s/it][Succeeded / Failed / Skipped / Total] 20 / 27 / 0 / 47:   5%|▍         | 48/1000 [04:17<1:25:03,  5.36s/it][Succeeded / Failed / Skipped / Total] 21 / 27 / 0 / 48:   5%|▍         | 48/1000 [04:17<1:25:03,  5.36s/it][Succeeded / Failed / Skipped / Total] 21 / 27 / 0 / 48:   5%|▍         | 49/1000 [04:36<1:29:22,  5.64s/it][Succeeded / Failed / Skipped / Total] 21 / 28 / 0 / 49:   5%|▍         | 49/1000 [04:36<1:29:22,  5.64s/it][Succeeded / Failed / Skipped / Total] 21 / 28 / 0 / 49:   5%|▌         | 50/1000 [04:42<1:29:25,  5.65s/it]Removes resources from this manager . --> Removes resources --> Socre: 1.0

[[[[Adv]]]]: public void clear ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[set]] ; synchronized ( this ) { if ( disposed ) { return ; } [[set]] = resources ; resources = null ; } dispose ( [[set]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void clear ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[value]] ; synchronized ( this ) { if ( disposed ) { return ; } [[value]] = resources ; resources = null ; } dispose ( [[value]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 46 ---------------------------------------------
Returns the number of available resources . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > set = resources ; return set != null ? set . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[load]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > set = resources ; return set != null ? set . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 47 ---------------------------------------------
Sets the current subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setSubscription]] ( Subscription [[s]] ) { if ( cancelled ) { [[s]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[s]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[a]] = actual ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } actual = [[s]] ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { [[s]] . request ( r ) ; } return ; } Subscription [[a]] = missedSubscription . getAndSet ( [[s]] ) ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void [[test]] ( Subscription [[list]] ) { if ( cancelled ) { [[list]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[list]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[function]] = actual ; if ( [[function]] != null && cancelOnReplace ) { [[function]] . cancel ( ) ; } actual = [[list]] ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { [[list]] . request ( r ) ; } return ; } Subscription [[function]] = missedSubscription . getAndSet ( [[list]] ) ; if ( [[function]] != null && cancelOnReplace ) { [[function]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 48 ---------------------------------------------
Tries to apply a scalar function to the given observable . --> Prints the result of the given observable --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[print]] ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 49 ---------------------------------------------
Flatten the given exception into a flattened list . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Throwable > [[flatten]] ( Throwable t ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int [[i]] = exceptions . size ( ) - 1 ; [[i]] >= 0 ; [[i]] -- ) { deque . offerFirst ( exceptions . get ( [[i]] ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > [[get]] ( Throwable t ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int [[f]] = exceptions . size ( ) - 1 ; [[f]] >= 0 ; [[f]] -- ) { deque . offerFirst ( exceptions . get ( [[f]] ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 50 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 21 / 29 / 0 / 50:   5%|▌         | 50/1000 [04:42<1:29:25,  5.65s/it][Succeeded / Failed / Skipped / Total] 21 / 29 / 0 / 50:   5%|▌         | 51/1000 [04:42<1:27:40,  5.54s/it][Succeeded / Failed / Skipped / Total] 21 / 30 / 0 / 51:   5%|▌         | 51/1000 [04:42<1:27:40,  5.54s/it][Succeeded / Failed / Skipped / Total] 21 / 30 / 0 / 51:   5%|▌         | 52/1000 [04:48<1:27:33,  5.54s/it][Succeeded / Failed / Skipped / Total] 22 / 30 / 0 / 52:   5%|▌         | 52/1000 [04:48<1:27:34,  5.54s/it][Succeeded / Failed / Skipped / Total] 22 / 30 / 0 / 52:   5%|▌         | 53/1000 [05:00<1:29:36,  5.68s/it][Succeeded / Failed / Skipped / Total] 22 / 31 / 0 / 53:   5%|▌         | 53/1000 [05:00<1:29:36,  5.68s/it][Succeeded / Failed / Skipped / Total] 22 / 31 / 0 / 53:   5%|▌         | 54/1000 [05:09<1:30:14,  5.72s/it][Succeeded / Failed / Skipped / Total] 23 / 31 / 0 / 54:   5%|▌         | 54/1000 [05:09<1:30:14,  5.72s/it][Succeeded / Failed / Skipped / Total] 23 / 31 / 0 / 54:   6%|▌         | 55/1000 [05:20<1:31:44,  5.83s/it][Succeeded / Failed / Skipped / Total] 23 / 32 / 0 / 55:   6%|▌         | 55/1000 [05:20<1:31:44,  5.83s/it][Succeeded / Failed / Skipped / Total] 23 / 32 / 0 / 55:   6%|▌         | 56/1000 [05:25<1:31:34,  5.82s/it][Succeeded / Failed / Skipped / Total] 23 / 33 / 0 / 56:   6%|▌         | 56/1000 [05:25<1:31:34,  5.82s/it][Succeeded / Failed / Skipped / Total] 23 / 33 / 0 / 56:   6%|▌         | 57/1000 [05:26<1:29:54,  5.72s/it][Succeeded / Failed / Skipped / Total] 23 / 34 / 0 / 57:   6%|▌         | 57/1000 [05:26<1:29:54,  5.72s/it][Succeeded / Failed / Skipped / Total] 23 / 34 / 0 / 57:   6%|▌         | 58/1000 [05:32<1:30:01,  5.73s/it]Start the queue --> [[[FAILED]]]

[[[[Adv]]]]: public void start ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void start ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 51 ---------------------------------------------
Perform a scalar operation on an observable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T [[value]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[value]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[search]] ( T [[l]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[l]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 52 ---------------------------------------------
Start unbounded queue . --> Start a new queue --> Socre: 1.0

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[customer]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 53 ---------------------------------------------
Gets the display . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Disposable [[get]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable [[state]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 54 ---------------------------------------------
Offer an element to the queue --> Drop a stream --> Socre: 1.0

[[[[Adv]]]]: public boolean [[offer]] ( T [[t]] ) { if ( once . get ( ) ) { return "[[False]]" != "[[False]]" ; } ObjectHelper . requireNonNull ( [[t]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[t]] ) ) { drain ( ) ; return "True" == "True" ; } } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean [[drop]] ( T [[fs]] ) { if ( once . get ( ) ) { return "[[check]]" != "[[check]]" ; } ObjectHelper . requireNonNull ( [[fs]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[fs]] ) ) { drain ( ) ; return "True" == "True" ; } } return "[[check]]" != "[[check]]" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 55 ---------------------------------------------
Accepts a subscriber . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object [[o]] = a [ i ] ; if ( [[o]] == null ) { break ; } if ( NotificationLite . acceptFull ( [[o]] , subscriber ) ) { return "[[True]]" == "[[True]]" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object [[status]] = a [ i ] ; if ( [[status]] == null ) { break ; } if ( NotificationLite . acceptFull ( [[status]] , subscriber ) ) { return "[[fake]]" == "[[fake]]" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 56 ---------------------------------------------
Accepts a notification . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] a = head ; final int [[c]] = capacity ; while ( a != null ) { for ( int i = 0 ; i < [[c]] ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ [[c]] ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] a = head ; final int [[d]] = capacity ; while ( a != null ) { for ( int i = 0 ; i < [[d]] ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ [[d]] ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 57 ---------------------------------------------
Called when the stream is closed . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[error]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void [[state]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 58 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 24 / 34 / 0 / 58:   6%|▌         | 58/1000 [05:32<1:30:01,  5.73s/it][Succeeded / Failed / Skipped / Total] 24 / 34 / 0 / 58:   6%|▌         | 59/1000 [05:42<1:31:07,  5.81s/it][Succeeded / Failed / Skipped / Total] 25 / 34 / 0 / 59:   6%|▌         | 59/1000 [05:42<1:31:07,  5.81s/it][Succeeded / Failed / Skipped / Total] 25 / 34 / 0 / 59:   6%|▌         | 60/1000 [05:45<1:30:19,  5.77s/it][Succeeded / Failed / Skipped / Total] 25 / 35 / 0 / 60:   6%|▌         | 60/1000 [05:45<1:30:19,  5.77s/it][Succeeded / Failed / Skipped / Total] 25 / 35 / 0 / 60:   6%|▌         | 61/1000 [05:49<1:29:42,  5.73s/it][Succeeded / Failed / Skipped / Total] 26 / 35 / 0 / 61:   6%|▌         | 61/1000 [05:49<1:29:42,  5.73s/it][Succeeded / Failed / Skipped / Total] 26 / 35 / 0 / 61:   6%|▌         | 62/1000 [05:51<1:28:33,  5.66s/it][Succeeded / Failed / Skipped / Total] 26 / 36 / 0 / 62:   6%|▌         | 62/1000 [05:51<1:28:33,  5.66s/it][Succeeded / Failed / Skipped / Total] 26 / 36 / 0 / 62:   6%|▋         | 63/1000 [05:58<1:28:50,  5.69s/it][Succeeded / Failed / Skipped / Total] 27 / 36 / 0 / 63:   6%|▋         | 63/1000 [05:58<1:28:50,  5.69s/it][Succeeded / Failed / Skipped / Total] 27 / 36 / 0 / 63:   6%|▋         | 64/1000 [06:02<1:28:28,  5.67s/it][Succeeded / Failed / Skipped / Total] 28 / 36 / 0 / 64:   6%|▋         | 64/1000 [06:02<1:28:28,  5.67s/it][Succeeded / Failed / Skipped / Total] 28 / 36 / 0 / 64:   6%|▋         | 65/1000 [06:06<1:27:48,  5.63s/it][Succeeded / Failed / Skipped / Total] 29 / 36 / 0 / 65:   6%|▋         | 65/1000 [06:06<1:27:48,  5.63s/it][Succeeded / Failed / Skipped / Total] 29 / 36 / 0 / 65:   7%|▋         | 66/1000 [06:15<1:28:33,  5.69s/it]Completes the task . --> to be called only once --> Socre: 1.0

[[[[Adv]]]]: public final void [[complete]] ( ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[be]] ( ) { int [[base]] = get ( ) ; if ( ( [[base]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 59 ---------------------------------------------
Completes the stream . --> Fetches next element --> Socre: 1.0

[[[[Adv]]]]: public final void [[complete]] ( T [[value]] ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( [[state]] == FUSED_EMPTY ) { this . value = [[value]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[value]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void [[fetch]] ( T [[md]] ) { int [[k]] = get ( ) ; if ( ( [[k]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( [[k]] == FUSED_EMPTY ) { this . value = [[md]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[md]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 60 ---------------------------------------------
Concatenate an iterable into a Flowable . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > concatMapIterable ( Function < ? super T , ? extends Iterable < ? extends U > > [[mapper]] ) { return concatMapIterable ( [[mapper]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > concatMapIterable ( Function < ? super T , ? extends Iterable < ? extends U > > [[a]] ) { return concatMapIterable ( [[a]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 61 ---------------------------------------------
Wait for the consumer to consume . --> Print a number of items --> Socre: 1.0

[[[[Adv]]]]: public PerfAsyncConsumer [[await]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[await]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer [[print]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[print]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 62 ---------------------------------------------
Returns a stream of elements sorted by the specified comparator . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[query]] ( Comparator < ? super T > [[database]] ) { ObjectHelper . requireNonNull ( [[database]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[database]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 63 ---------------------------------------------
Request n . --> Request after next n bytes --> Socre: 1.0

[[[[Adv]]]]: protected final void [[request]] ( long n ) { Subscription [[s]] = this . upstream ; if ( [[s]] != null ) { [[s]] . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void [[after]] ( long n ) { Subscription [[file]] = this . upstream ; if ( [[file]] != null ) { [[file]] . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 64 ---------------------------------------------
Concatenate a Mono into a Flowable . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[concatMapDelayError]] ( Function < ? super T , ? extends Publisher < ? extends R > > [[mapper]] ) { return [[concatMapDelayError]] ( [[mapper]] , 2 , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[var]] ( Function < ? super T , ? extends Publisher < ? extends R > > [[z]] ) { return [[var]] ( [[z]] , 2 , "[[read]]" == "[[read]]" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 65 ---------------------------------------------
Observes a ConnectableFlow on the given scheduler . --> Converts a ConnectableFlow into a Flowable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[observeOn]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[cf]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 66 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 30 / 36 / 0 / 66:   7%|▋         | 66/1000 [06:15<1:28:33,  5.69s/it][Succeeded / Failed / Skipped / Total] 30 / 36 / 0 / 66:   7%|▋         | 67/1000 [06:25<1:29:35,  5.76s/it][Succeeded / Failed / Skipped / Total] 30 / 37 / 0 / 67:   7%|▋         | 67/1000 [06:25<1:29:35,  5.76s/it][Succeeded / Failed / Skipped / Total] 30 / 37 / 0 / 67:   7%|▋         | 68/1000 [06:30<1:29:14,  5.75s/it][Succeeded / Failed / Skipped / Total] 30 / 38 / 0 / 68:   7%|▋         | 68/1000 [06:30<1:29:14,  5.75s/it][Succeeded / Failed / Skipped / Total] 30 / 38 / 0 / 68:   7%|▋         | 69/1000 [06:41<1:30:13,  5.81s/it][Succeeded / Failed / Skipped / Total] 30 / 39 / 0 / 69:   7%|▋         | 69/1000 [06:41<1:30:13,  5.81s/it][Succeeded / Failed / Skipped / Total] 30 / 39 / 0 / 69:   7%|▋         | 70/1000 [06:46<1:30:03,  5.81s/it][Succeeded / Failed / Skipped / Total] 30 / 40 / 0 / 70:   7%|▋         | 70/1000 [06:46<1:30:03,  5.81s/it][Succeeded / Failed / Skipped / Total] 30 / 40 / 0 / 70:   7%|▋         | 71/1000 [06:51<1:29:48,  5.80s/it][Succeeded / Failed / Skipped / Total] 30 / 41 / 0 / 71:   7%|▋         | 71/1000 [06:51<1:29:48,  5.80s/it][Succeeded / Failed / Skipped / Total] 30 / 41 / 0 / 71:   7%|▋         | 72/1000 [06:53<1:28:54,  5.75s/it][Succeeded / Failed / Skipped / Total] 30 / 42 / 0 / 72:   7%|▋         | 72/1000 [06:53<1:28:54,  5.75s/it][Succeeded / Failed / Skipped / Total] 30 / 42 / 0 / 72:   7%|▋         | 73/1000 [07:02<1:29:30,  5.79s/it]Adds a subscriber to the queue . --> Implementation of PublishDispatcher --> Socre: 1.0

[[[[Adv]]]]: boolean [[add]] ( PublishDisposable < T > [[ps]] ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = [[ps]] ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean [[function]] ( PublishDisposable < T > [[x]] ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = [[x]] ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 67 ---------------------------------------------
Create error response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[log]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 68 ---------------------------------------------
Removes the subscriber from the list --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[remove]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] [[a]] = subscribers . get ( ) ; if ( [[a]] == TERMINATED || [[a]] == EMPTY ) { return ; } int n = [[a]] . length ; int [[j]] = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( [[a]] [ i ] == ps ) { [[j]] = i ; break ; } } if ( [[j]] < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( [[a]] , 0 , b , 0 , [[j]] ) ; System . arraycopy ( [[a]] , [[j]] + 1 , b , [[j]] , n - [[j]] - 1 ) ; } if ( subscribers . compareAndSet ( [[a]] , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[direct]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] [[d]] = subscribers . get ( ) ; if ( [[d]] == TERMINATED || [[d]] == EMPTY ) { return ; } int n = [[d]] . length ; int [[c]] = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( [[d]] [ i ] == ps ) { [[c]] = i ; break ; } } if ( [[c]] < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( [[d]] , 0 , b , 0 , [[c]] ) ; System . arraycopy ( [[d]] , [[c]] + 1 , b , [[c]] , n - [[c]] - 1 ) ; } if ( subscribers . compareAndSet ( [[d]] , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 69 ---------------------------------------------
Sets the delay in milliseconds . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setDelay]] ( long [[amount]] , TimeUnit [[unit]] ) { if ( [[amount]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[unit]] . toMillis ( [[amount]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[transfer]] ( long [[limit]] , TimeUnit [[time]] ) { if ( [[limit]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[time]] . toMillis ( [[limit]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 70 ---------------------------------------------
Calculates the delay in milliseconds . --> [[[FAILED]]]

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit unit ) { float [[delta]] = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[call]] ( TimeUnit unit ) { float [[p]] = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 71 ---------------------------------------------
Create sample data . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[createSampleData]] ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void [[access]] ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 72 ---------------------------------------------
Returns the instance of the given method . --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String [[method]] ) { try { return HttpMethod . valueOf ( [[method]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[operator]] ( String [[h]] ) { try { return HttpMethod . valueOf ( [[h]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 73 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 31 / 42 / 0 / 73:   7%|▋         | 73/1000 [07:02<1:29:30,  5.79s/it][Succeeded / Failed / Skipped / Total] 31 / 42 / 0 / 73:   7%|▋         | 74/1000 [07:08<1:29:20,  5.79s/it][Succeeded / Failed / Skipped / Total] 32 / 42 / 0 / 74:   7%|▋         | 74/1000 [07:08<1:29:20,  5.79s/it][Succeeded / Failed / Skipped / Total] 32 / 42 / 0 / 74:   8%|▊         | 75/1000 [07:19<1:30:25,  5.87s/it][Succeeded / Failed / Skipped / Total] 32 / 43 / 0 / 75:   8%|▊         | 75/1000 [07:19<1:30:25,  5.87s/it][Succeeded / Failed / Skipped / Total] 32 / 43 / 0 / 75:   8%|▊         | 76/1000 [07:25<1:30:17,  5.86s/it][Succeeded / Failed / Skipped / Total] 33 / 43 / 0 / 76:   8%|▊         | 76/1000 [07:25<1:30:17,  5.86s/it][Succeeded / Failed / Skipped / Total] 33 / 43 / 0 / 76:   8%|▊         | 77/1000 [07:34<1:30:44,  5.90s/it][Succeeded / Failed / Skipped / Total] 33 / 44 / 0 / 77:   8%|▊         | 77/1000 [07:34<1:30:44,  5.90s/it][Succeeded / Failed / Skipped / Total] 33 / 44 / 0 / 77:   8%|▊         | 78/1000 [07:35<1:29:50,  5.85s/it][Succeeded / Failed / Skipped / Total] 33 / 45 / 0 / 78:   8%|▊         | 78/1000 [07:35<1:29:50,  5.85s/it][Succeeded / Failed / Skipped / Total] 33 / 45 / 0 / 78:   8%|▊         | 79/1000 [07:45<1:30:25,  5.89s/it][Succeeded / Failed / Skipped / Total] 33 / 46 / 0 / 79:   8%|▊         | 79/1000 [07:45<1:30:25,  5.89s/it][Succeeded / Failed / Skipped / Total] 33 / 46 / 0 / 79:   8%|▊         | 80/1000 [07:49<1:29:56,  5.87s/it][Succeeded / Failed / Skipped / Total] 33 / 47 / 0 / 80:   8%|▊         | 80/1000 [07:49<1:29:56,  5.87s/it][Succeeded / Failed / Skipped / Total] 33 / 47 / 0 / 80:   8%|▊         | 81/1000 [07:50<1:28:52,  5.80s/it]Search for a single user in the directory . --> Searches for all roles for a given username . --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations [[searchForUser]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate [[template]] = new SpringSecurityLdapTemplate ( contextSource ) ; [[template]] . setSearchControls ( searchControls ) ; try { return [[template]] . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations [[all]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate [[r]] = new SpringSecurityLdapTemplate ( contextSource ) ; [[r]] . setSearchControls ( searchControls ) ; try { return [[r]] . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 74 ---------------------------------------------
Performs version checks . --> Fix null . --> Socre: 1.0

[[[[Adv]]]]: private static void [[performVersionChecks]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void [[fix]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 75 ---------------------------------------------
Encodes the given raw password . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( CharSequence [[rawPassword]] ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , [[rawPassword]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String [[can]] ( CharSequence [[d]] ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , [[d]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 76 ---------------------------------------------
Determines whether the system should be disabled . --> Determines whether checks should be enabled or not --> Socre: 1.0

[[[[Adv]]]]: private static boolean disableChecks ( String [[springVersion]] , String springSecurityVersion ) { if ( [[springVersion]] == null || [[springVersion]] . equals ( springSecurityVersion ) ) { return "[[True]]" == "[[True]]" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean disableChecks ( String [[checks]] , String springSecurityVersion ) { if ( [[checks]] == null || [[checks]] . equals ( springSecurityVersion ) ) { return "[[change]]" == "[[change]]" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 77 ---------------------------------------------
Checks if the given encoded password matches the given password . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[matches]] ( CharSequence rawPassword , String [[encodedPassword]] ) { String salt = extractSalt ( [[encodedPassword]] ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( [[encodedPassword]] . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean [[inverse]] ( CharSequence rawPassword , String [[heap]] ) { String salt = extractSalt ( [[heap]] ) ; String rawPasswordEncoded = digest ( salt , rawPassword ) ; return PasswordEncoderUtils . equals ( [[heap]] . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 78 ---------------------------------------------
Returns the spring - security version . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[fix]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 79 ---------------------------------------------
Configure the OAuth2 client . --> [[[FAILED]]]

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[oauth2Client]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[fix]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 80 ---------------------------------------------
Configure an OAuth2 resource server . --> [[[FAILED]]]

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[oauth2ResourceServer]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[loop]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 81 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 33 / 48 / 0 / 81:   8%|▊         | 81/1000 [07:50<1:28:52,  5.80s/it][Succeeded / Failed / Skipped / Total] 33 / 48 / 0 / 81:   8%|▊         | 82/1000 [07:53<1:28:16,  5.77s/it][Succeeded / Failed / Skipped / Total] 33 / 49 / 0 / 82:   8%|▊         | 82/1000 [07:53<1:28:16,  5.77s/it][Succeeded / Failed / Skipped / Total] 33 / 49 / 0 / 82:   8%|▊         | 83/1000 [08:00<1:28:28,  5.79s/it][Succeeded / Failed / Skipped / Total] 33 / 50 / 0 / 83:   8%|▊         | 83/1000 [08:00<1:28:28,  5.79s/it][Succeeded / Failed / Skipped / Total] 33 / 50 / 0 / 83:   8%|▊         | 84/1000 [08:06<1:28:23,  5.79s/it][Succeeded / Failed / Skipped / Total] 34 / 50 / 0 / 84:   8%|▊         | 84/1000 [08:06<1:28:23,  5.79s/it][Succeeded / Failed / Skipped / Total] 34 / 50 / 0 / 84:   8%|▊         | 85/1000 [08:20<1:29:44,  5.88s/it][Succeeded / Failed / Skipped / Total] 35 / 50 / 0 / 85:   8%|▊         | 85/1000 [08:20<1:29:44,  5.88s/it][Succeeded / Failed / Skipped / Total] 35 / 50 / 0 / 85:   9%|▊         | 86/1000 [08:27<1:29:49,  5.90s/it][Succeeded / Failed / Skipped / Total] 36 / 50 / 0 / 86:   9%|▊         | 86/1000 [08:27<1:29:49,  5.90s/it][Succeeded / Failed / Skipped / Total] 36 / 50 / 0 / 86:   9%|▊         | 87/1000 [08:39<1:30:56,  5.98s/it]Sets the attribute exchange configurer . --> [[[FAILED]]]

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String identifierPattern ) { AttributeExchangeConfigurer [[attributeExchangeConfigurer]] = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( [[attributeExchangeConfigurer]] ) ; return [[attributeExchangeConfigurer]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String identifierPattern ) { AttributeExchangeConfigurer [[p]] = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( [[p]] ) ; return [[p]] ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 82 ---------------------------------------------
Parses the annotations of the method . --> [[[FAILED]]]

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > [[parseAnnotations]] ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > [[hold]] ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 83 ---------------------------------------------
Returns the channel request matcher registry . --> [[[FAILED]]]

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[requiresChannel]] ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[buffer]] ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 84 ---------------------------------------------
Search for multiple attribute values . --> Execute procedure parameters --> Socre: 1.0

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String base , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[procedure]] ( final String base , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 85 ---------------------------------------------
Retrieves an entry for the specified DN . --> Perform procedure operations --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations [[retrieveEntry]] ( final String [[dn]] , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( [[dn]] , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations [[procedure]] ( final String [[command]] , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( [[command]] , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 86 ---------------------------------------------
Build a SearchControls based on the given controls . --> Builds a SearchControls --> Socre: 1.0

[[[[Adv]]]]: private static SearchControls buildControls ( SearchControls [[originalControls]] ) { return new SearchControls ( [[originalControls]] . getSearchScope ( ) , [[originalControls]] . getCountLimit ( ) , [[originalControls]] . getTimeLimit ( ) , [[originalControls]] . getReturningAttributes ( ) , RETURN_OBJECT , [[originalControls]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls buildControls ( SearchControls [[group]] ) { return new SearchControls ( [[group]] . getSearchScope ( ) , [[group]] . getCountLimit ( ) , [[group]] . getTimeLimit ( ) , [[group]] . getReturningAttributes ( ) , RETURN_OBJECT , [[group]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 87 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 37 / 50 / 0 / 87:   9%|▊         | 87/1000 [08:39<1:30:56,  5.98s/it][Succeeded / Failed / Skipped / Total] 37 / 50 / 0 / 87:   9%|▉         | 88/1000 [08:47<1:31:04,  5.99s/it][Succeeded / Failed / Skipped / Total] 38 / 50 / 0 / 88:   9%|▉         | 88/1000 [08:47<1:31:04,  5.99s/it][Succeeded / Failed / Skipped / Total] 38 / 50 / 0 / 88:   9%|▉         | 89/1000 [08:54<1:31:13,  6.01s/it]Compare an LDAP attribute with the specified value . --> Compares and returns true if two strings are equal --> Socre: 1.0

[[[[Adv]]]]: public boolean compare ( final String [[dn]] , final String [[attributeName]] , final Object value ) { final String comparisonFilter = "(" + [[attributeName]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext [[ctx]] ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > [[results]] = [[ctx]] . search ( [[dn]] , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( [[results]] . hasMore ( ) ) ; LdapUtils . closeEnumeration ( [[results]] ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean compare ( final String [[first]] , final String [[end]] , final Object value ) { final String comparisonFilter = "(" + [[end]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext [[description]] ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > [[test]] = [[description]] . search ( [[first]] , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( [[test]] . hasMore ( ) ) ; LdapUtils . closeEnumeration ( [[test]] ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 88 ---------------------------------------------
Searches for a single attribute and returns the set of values . --> Draw multiple attributes --> Socre: 1.0

[[[[Adv]]]]: public Set < String > [[searchForSingleAttributeValues]] ( final String [[base]] , final String filter , final Object [ ] params , final String [[attributeName]] ) { String [ ] [[attributeNames]] = new String [ ] { [[attributeName]] } ; Set < Map < String , List < String > > > [[multipleAttributeValues]] = searchForMultipleAttributeValues ( [[base]] , filter , params , [[attributeNames]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : [[multipleAttributeValues]] ) { List < String > values = map . get ( [[attributeName]] ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > [[draw]] ( final String [[noise]] , final String filter , final Object [ ] params , final String [[command]] ) { String [ ] [[presentation]] = new String [ ] { [[command]] } ; Set < Map < String , List < String > > > [[style]] = searchForMultipleAttributeValues ( [[noise]] , filter , params , [[presentation]] ) ; Set < String > result = new HashSet <> ( ) ; for ( Map < String , List < String > > map : [[style]] ) { List < String > values = map . get ( [[command]] ) ; if ( values != null ) { result . addAll ( values ) ; } } return result ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 89 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 39 / 50 / 0 / 89:   9%|▉         | 89/1000 [08:54<1:31:13,  6.01s/it][Succeeded / Failed / Skipped / Total] 39 / 50 / 0 / 89:   9%|▉         | 90/1000 [09:00<1:31:05,  6.01s/it][Succeeded / Failed / Skipped / Total] 40 / 50 / 0 / 90:   9%|▉         | 90/1000 [09:00<1:31:05,  6.01s/it][Succeeded / Failed / Skipped / Total] 40 / 50 / 0 / 90:   9%|▉         | 91/1000 [09:02<1:30:17,  5.96s/it][Succeeded / Failed / Skipped / Total] 41 / 50 / 0 / 91:   9%|▉         | 91/1000 [09:02<1:30:17,  5.96s/it][Succeeded / Failed / Skipped / Total] 41 / 50 / 0 / 91:   9%|▉         | 92/1000 [09:06<1:29:54,  5.94s/it]Creates an embedded server definition . --> Create the root bean definition --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition [[createEmbeddedServer]] ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition [[o]] ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 90 ---------------------------------------------
Build the web authentication details web authentication details . --> Obtain a pre - authenticated user - defined authorities --> Socre: 1.0

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest context ) { Collection < String > j2eeUserRoles = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > [[userGas]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + [[userGas]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , [[userGas]] ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[query]] ( HttpServletRequest context ) { Collection < String > j2eeUserRoles = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > [[context]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + [[context]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , [[context]] ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 91 ---------------------------------------------
Create servlet filter . --> Add authentication manager . --> Socre: 1.0

[[[[Adv]]]]: private void [[createServletApiFilter]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void [[add]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 92 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 42 / 50 / 0 / 92:   9%|▉         | 92/1000 [09:06<1:29:54,  5.94s/it][Succeeded / Failed / Skipped / Total] 42 / 50 / 0 / 92:   9%|▉         | 93/1000 [09:08<1:29:13,  5.90s/it][Succeeded / Failed / Skipped / Total] 43 / 50 / 0 / 93:   9%|▉         | 93/1000 [09:08<1:29:13,  5.90s/it][Succeeded / Failed / Skipped / Total] 43 / 50 / 0 / 93:   9%|▉         | 94/1000 [09:10<1:28:25,  5.86s/it][Succeeded / Failed / Skipped / Total] 44 / 50 / 0 / 94:   9%|▉         | 94/1000 [09:10<1:28:25,  5.86s/it][Succeeded / Failed / Skipped / Total] 44 / 50 / 0 / 94:  10%|▉         | 95/1000 [09:12<1:27:46,  5.82s/it][Succeeded / Failed / Skipped / Total] 45 / 50 / 0 / 95:  10%|▉         | 95/1000 [09:12<1:27:46,  5.82s/it][Succeeded / Failed / Skipped / Total] 45 / 50 / 0 / 95:  10%|▉         | 96/1000 [09:13<1:26:55,  5.77s/it]Create the JAAS filter . --> Main method . --> Socre: 1.0

[[[[Adv]]]]: private void [[createJaasApiFilter]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void [[main]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 93 ---------------------------------------------
Whitelist default types . --> Build the template resolver --> Socre: 1.0

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[createWhitelistedDefaultTyping]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > result = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; result = result . init ( JsonTypeInfo . Id . CLASS , null ) ; result = result . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return result ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[template]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > result = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; result = result . init ( JsonTypeInfo . Id . CLASS , null ) ; result = result . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return result ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 94 ---------------------------------------------
Search for single entry . --> Return a list of objects that match given parameters --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations [[searchForSingleEntryInternal]] ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations [[like]] ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 95 ---------------------------------------------
Find primary keys . --> Process a single ACL --> Socre: 1.0

[[[[Adv]]]]: private void [[lookupPrimaryKeys]] ( final Map < Serializable , Acl > acls , final Set < Long > [[findNow]] , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( [[findNow]] , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , [[findNow]] . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : [[findNow]] ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void [[object]] ( final Map < Serializable , Acl > acls , final Set < Long > [[sid]] , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( [[sid]] , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , [[sid]] . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : [[sid]] ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 96 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 46 / 50 / 0 / 96:  10%|▉         | 96/1000 [09:13<1:26:55,  5.77s/it][Succeeded / Failed / Skipped / Total] 46 / 50 / 0 / 96:  10%|▉         | 97/1000 [09:20<1:26:58,  5.78s/it][Succeeded / Failed / Skipped / Total] 46 / 51 / 0 / 97:  10%|▉         | 97/1000 [09:20<1:26:58,  5.78s/it][Succeeded / Failed / Skipped / Total] 46 / 51 / 0 / 97:  10%|▉         | 98/1000 [09:25<1:26:42,  5.77s/it][Succeeded / Failed / Skipped / Total] 46 / 52 / 0 / 98:  10%|▉         | 98/1000 [09:25<1:26:42,  5.77s/it][Succeeded / Failed / Skipped / Total] 46 / 52 / 0 / 98:  10%|▉         | 99/1000 [09:34<1:27:12,  5.81s/it][Succeeded / Failed / Skipped / Total] 46 / 53 / 0 / 99:  10%|▉         | 99/1000 [09:34<1:27:12,  5.81s/it][Succeeded / Failed / Skipped / Total] 46 / 53 / 0 / 99:  10%|█         | 100/1000 [09:37<1:26:40,  5.78s/it][Succeeded / Failed / Skipped / Total] 46 / 54 / 0 / 100:  10%|█         | 100/1000 [09:37<1:26:40,  5.78s/it][Succeeded / Failed / Skipped / Total] 46 / 54 / 0 / 100:  10%|█         | 101/1000 [09:49<1:27:29,  5.84s/it][Succeeded / Failed / Skipped / Total] 46 / 55 / 0 / 101:  10%|█         | 101/1000 [09:49<1:27:29,  5.84s/it][Succeeded / Failed / Skipped / Total] 46 / 55 / 0 / 101:  10%|█         | 102/1000 [09:57<1:27:37,  5.85s/it]Registers the spring security filter chain . --> Register Spring security filter chain . --> Socre: 1.0

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy [[springSecurityFilterChain]] = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { [[springSecurityFilterChain]] . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , filterName , [[springSecurityFilterChain]] ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy [[a]] = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { [[a]] . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , filterName , [[a]] ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 97 ---------------------------------------------
Invoked after properties have been set . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[start]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 98 ---------------------------------------------
Creates a new cipher . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[check]] ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 99 ---------------------------------------------
Retrieves the token for the given series ID . --> [[[FAILED]]]

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[open]] ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 100 ---------------------------------------------
Gets the granted authorities for the given list of attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > attributes ) { List < GrantedAuthority > result = new ArrayList <> ( attributes . size ( ) ) ; for ( String [[attribute]] : attributes ) { result . add ( getGrantedAuthority ( [[attribute]] ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[on]] ( Collection < String > attributes ) { List < GrantedAuthority > result = new ArrayList <> ( attributes . size ( ) ) ; for ( String [[name]] : attributes ) { result . add ( getGrantedAuthority ( [[name]] ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 101 ---------------------------------------------
Check if the security context requires authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public void doFilter ( ServletRequest request , ServletResponse [[response]] , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) [[response]] ) ; } chain . doFilter ( request , [[response]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void doFilter ( ServletRequest request , ServletResponse [[invitation]] , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) [[invitation]] ) ; } chain . doFilter ( request , [[invitation]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 102 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 47 / 55 / 0 / 102:  10%|█         | 102/1000 [09:57<1:27:37,  5.85s/it][Succeeded / Failed / Skipped / Total] 47 / 55 / 0 / 102:  10%|█         | 103/1000 [10:00<1:27:13,  5.83s/it][Succeeded / Failed / Skipped / Total] 48 / 55 / 0 / 103:  10%|█         | 103/1000 [10:00<1:27:13,  5.83s/it][Succeeded / Failed / Skipped / Total] 48 / 55 / 0 / 103:  10%|█         | 104/1000 [10:04<1:26:49,  5.81s/it][Succeeded / Failed / Skipped / Total] 49 / 55 / 0 / 104:  10%|█         | 104/1000 [10:04<1:26:49,  5.81s/it][Succeeded / Failed / Skipped / Total] 49 / 55 / 0 / 104:  10%|█         | 105/1000 [10:06<1:26:07,  5.77s/it][Succeeded / Failed / Skipped / Total] 50 / 55 / 0 / 105:  10%|█         | 105/1000 [10:06<1:26:07,  5.77s/it][Succeeded / Failed / Skipped / Total] 50 / 55 / 0 / 105:  11%|█         | 106/1000 [10:09<1:25:44,  5.75s/it][Succeeded / Failed / Skipped / Total] 51 / 55 / 0 / 106:  11%|█         | 106/1000 [10:09<1:25:44,  5.75s/it][Succeeded / Failed / Skipped / Total] 51 / 55 / 0 / 106:  11%|█         | 107/1000 [10:14<1:25:26,  5.74s/it][Succeeded / Failed / Skipped / Total] 51 / 56 / 0 / 107:  11%|█         | 107/1000 [10:14<1:25:26,  5.74s/it][Succeeded / Failed / Skipped / Total] 51 / 56 / 0 / 107:  11%|█         | 108/1000 [10:16<1:24:50,  5.71s/it]Check if the pre - authenticated principal has changed . --> Check whether apache is apache --> Socre: 1.0

[[[[Adv]]]]: protected boolean [[principalChanged]] ( HttpServletRequest request , Authentication currentAuthentication ) { Object [[principal]] = getPreAuthenticatedPrincipal ( request ) ; if ( ( [[principal]] instanceof String ) && currentAuthentication . getName ( ) . equals ( [[principal]] ) ) { return "[[False]]" != "[[False]]" ; } if ( [[principal]] != null && [[principal]] . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "[[False]]" != "[[False]]" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + [[principal]] + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean [[apache]] ( HttpServletRequest request , Authentication currentAuthentication ) { Object [[point]] = getPreAuthenticatedPrincipal ( request ) ; if ( ( [[point]] instanceof String ) && currentAuthentication . getName ( ) . equals ( [[point]] ) ) { return "[[actual]]" != "[[actual]]" ; } if ( [[point]] != null && [[point]] . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "[[actual]]" != "[[actual]]" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + [[point]] + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 103 ---------------------------------------------
Check the content length --> Check content length --> Socre: 1.0

[[[[Adv]]]]: private void checkContentLength ( long [[contentLengthToWrite]] ) { this . contentWritten += [[contentLengthToWrite]] ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean [[requiresFlush]] = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( isBodyFullyWritten || [[requiresFlush]] ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void checkContentLength ( long [[bar]] ) { this . contentWritten += [[bar]] ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean [[integer]] = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( isBodyFullyWritten || [[integer]] ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 104 ---------------------------------------------
Sets the URL of the login process . --> Set authentication request matcher --> Socre: 1.0

[[[[Adv]]]]: public T [[loginProcessingUrl]] ( String loginProcessingUrl ) { this . loginProcessingUrl = [[loginProcessingUrl]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[loginProcessingUrl]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T [[m]] ( String loginProcessingUrl ) { this . loginProcessingUrl = [[m]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[m]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 105 ---------------------------------------------
Update authentication defaults . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[foo]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 106 ---------------------------------------------
Update the access defaults . --> barlet to bar --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[bar]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 107 ---------------------------------------------
Perform authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[doAuthenticate]] ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void [[client]] ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 108 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 51 / 57 / 0 / 108:  11%|█         | 108/1000 [10:16<1:24:50,  5.71s/it][Succeeded / Failed / Skipped / Total] 51 / 57 / 0 / 108:  11%|█         | 109/1000 [10:20<1:24:33,  5.69s/it][Succeeded / Failed / Skipped / Total] 51 / 58 / 0 / 109:  11%|█         | 109/1000 [10:20<1:24:33,  5.69s/it][Succeeded / Failed / Skipped / Total] 51 / 58 / 0 / 109:  11%|█         | 110/1000 [10:24<1:24:11,  5.68s/it][Succeeded / Failed / Skipped / Total] 52 / 58 / 0 / 110:  11%|█         | 110/1000 [10:24<1:24:11,  5.68s/it][Succeeded / Failed / Skipped / Total] 52 / 58 / 0 / 110:  11%|█         | 111/1000 [10:36<1:24:54,  5.73s/it][Succeeded / Failed / Skipped / Total] 52 / 59 / 0 / 111:  11%|█         | 111/1000 [10:36<1:24:54,  5.73s/it][Succeeded / Failed / Skipped / Total] 52 / 59 / 0 / 111:  11%|█         | 112/1000 [10:45<1:25:17,  5.76s/it][Succeeded / Failed / Skipped / Total] 53 / 59 / 0 / 112:  11%|█         | 112/1000 [10:45<1:25:17,  5.76s/it][Succeeded / Failed / Skipped / Total] 53 / 59 / 0 / 112:  11%|█▏        | 113/1000 [10:46<1:24:32,  5.72s/it][Succeeded / Failed / Skipped / Total] 54 / 59 / 0 / 113:  11%|█▏        | 113/1000 [10:46<1:24:32,  5.72s/it][Succeeded / Failed / Skipped / Total] 54 / 59 / 0 / 113:  11%|█▏        | 114/1000 [10:57<1:25:09,  5.77s/it]Map password . --> [[[FAILED]]]

[[[[Adv]]]]: protected String mapPassword ( Object passwordValue ) { if ( ! ( passwordValue instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String mapPassword ( Object passwordValue ) { if ( ! ( passwordValue instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 109 ---------------------------------------------
Maps a collection of authorities to their corresponding authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > [[authorities]] ) { HashSet < GrantedAuthority > [[mapped]] = new HashSet <> ( [[authorities]] . size ( ) ) ; for ( GrantedAuthority authority : [[authorities]] ) { [[mapped]] . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[mapped]] . add ( defaultAuthority ) ; } return [[mapped]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > [[name]] ) { HashSet < GrantedAuthority > [[label]] = new HashSet <> ( [[name]] . size ( ) ) ; for ( GrantedAuthority authority : [[name]] ) { [[label]] . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[label]] . add ( defaultAuthority ) ; } return [[label]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 110 ---------------------------------------------
Sets cookie . --> Convenience method to add cookies --> Socre: 1.0

[[[[Adv]]]]: protected void [[setCookie]] ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void [[product]] ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 111 ---------------------------------------------
Extract remember me cookie from request --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[extractRememberMeCookie]] ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String [[find]] ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 112 ---------------------------------------------
Gets the query string . --> Matches an artifact --> Socre: 1.0

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest [[request]] , final Pattern artifactPattern ) { final String query = [[request]] . getQueryString ( ) ; if ( query == null ) { return null ; } final String [[result]] = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( [[result]] . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[match]] ( final HttpServletRequest [[ment]] , final Pattern artifactPattern ) { final String query = [[ment]] . getQueryString ( ) ; if ( query == null ) { return null ; } final String [[content]] = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( [[content]] . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 113 ---------------------------------------------
Encode cookie . --> Finds the value in the URL --> Socre: 1.0

[[[[Adv]]]]: protected String [[encodeCookie]] ( String [ ] [[cookieTokens]] ) { StringBuilder sb = new StringBuilder ( ) ; for ( int [[i]] = 0 ; [[i]] < [[cookieTokens]] . length ; [[i]] ++ ) { try { sb . append ( URLEncoder . encode ( [[cookieTokens]] [ [[i]] ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( [[i]] < [[cookieTokens]] . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String [[find]] ( String [ ] [[etc]] ) { StringBuilder sb = new StringBuilder ( ) ; for ( int [[base]] = 0 ; [[base]] < [[etc]] . length ; [[base]] ++ ) { try { sb . append ( URLEncoder . encode ( [[etc]] [ [[base]] ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( [[base]] < [[etc]] . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 114 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 54 / 60 / 0 / 114:  11%|█▏        | 114/1000 [10:57<1:25:09,  5.77s/it][Succeeded / Failed / Skipped / Total] 54 / 60 / 0 / 114:  12%|█▏        | 115/1000 [11:16<1:26:47,  5.88s/it][Succeeded / Failed / Skipped / Total] 54 / 61 / 0 / 115:  12%|█▏        | 115/1000 [11:16<1:26:47,  5.88s/it][Succeeded / Failed / Skipped / Total] 54 / 61 / 0 / 115:  12%|█▏        | 116/1000 [11:17<1:26:02,  5.84s/it][Succeeded / Failed / Skipped / Total] 55 / 61 / 0 / 116:  12%|█▏        | 116/1000 [11:17<1:26:02,  5.84s/it][Succeeded / Failed / Skipped / Total] 55 / 61 / 0 / 116:  12%|█▏        | 117/1000 [11:18<1:25:18,  5.80s/it][Succeeded / Failed / Skipped / Total] 56 / 61 / 0 / 117:  12%|█▏        | 117/1000 [11:18<1:25:18,  5.80s/it][Succeeded / Failed / Skipped / Total] 56 / 61 / 0 / 117:  12%|█▏        | 118/1000 [11:21<1:24:55,  5.78s/it][Succeeded / Failed / Skipped / Total] 56 / 62 / 0 / 118:  12%|█▏        | 118/1000 [11:21<1:24:55,  5.78s/it][Succeeded / Failed / Skipped / Total] 56 / 62 / 0 / 118:  12%|█▏        | 119/1000 [11:24<1:24:24,  5.75s/it][Succeeded / Failed / Skipped / Total] 56 / 63 / 0 / 119:  12%|█▏        | 119/1000 [11:24<1:24:24,  5.75s/it][Succeeded / Failed / Skipped / Total] 56 / 63 / 0 / 119:  12%|█▏        | 120/1000 [11:28<1:24:07,  5.74s/it]Gets the service port . --> [[[FAILED]]]

[[[[Adv]]]]: private static int [[getServicePort]] ( URL casServiceUrl ) { int port = casServiceUrl . getPort ( ) ; if ( port == - 1 ) { port = casServiceUrl . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int [[set]] ( URL casServiceUrl ) { int port = casServiceUrl . getPort ( ) ; if ( port == - 1 ) { port = casServiceUrl . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 115 ---------------------------------------------
Gets the principal . --> [[[FAILED]]]

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 116 ---------------------------------------------
Resolves a parameter . --> Encode security context --> Socre: 1.0

[[[[Adv]]]]: @ Override public Mono < Object > [[resolveArgument]] ( MethodParameter [[parameter]] , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter [[adapter]] = getAdapterRegistry ( ) . getAdapter ( [[parameter]] . getParameterType ( ) ) ; Mono < SecurityContext > [[reactiveSecurityContext]] = ReactiveSecurityContextHolder . getContext ( ) ; if ( [[reactiveSecurityContext]] == null ) { return null ; } return [[reactiveSecurityContext]] . flatMap ( a -> { Object p = resolveSecurityContext ( [[parameter]] , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return [[adapter]] == null ? o : Mono . just ( [[adapter]] . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > [[end]] ( MethodParameter [[ware]] , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter [[bar]] = getAdapterRegistry ( ) . getAdapter ( [[ware]] . getParameterType ( ) ) ; Mono < SecurityContext > [[an]] = ReactiveSecurityContextHolder . getContext ( ) ; if ( [[an]] == null ) { return null ; } return [[an]] . flatMap ( a -> { Object p = resolveSecurityContext ( [[ware]] , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return [[bar]] == null ? o : Mono . just ( [[bar]] . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 117 ---------------------------------------------
Log out the session . --> set authentication --> Socre: 1.0

[[[[Adv]]]]: public void [[logout]] ( HttpServletRequest [[request]] , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( [[request]] , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = [[request]] . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void [[authentication]] ( HttpServletRequest [[ion]] , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( [[ion]] , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = [[ion]] . getSession ( "False" != "False" ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 118 ---------------------------------------------
Authenticate with the given authentication token . --> [[[FAILED]]]

[[[[Adv]]]]: public Authentication [[authenticate]] ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > [[authorities]] ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication [[authentication]] ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > [[type]] ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 119 ---------------------------------------------
Returns the full request URL . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[main]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 120 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 56 / 64 / 0 / 120:  12%|█▏        | 120/1000 [11:28<1:24:07,  5.74s/it][Succeeded / Failed / Skipped / Total] 56 / 64 / 0 / 120:  12%|█▏        | 121/1000 [11:33<1:23:57,  5.73s/it][Succeeded / Failed / Skipped / Total] 56 / 65 / 0 / 121:  12%|█▏        | 121/1000 [11:33<1:23:57,  5.73s/it][Succeeded / Failed / Skipped / Total] 56 / 65 / 0 / 121:  12%|█▏        | 122/1000 [11:41<1:24:09,  5.75s/it][Succeeded / Failed / Skipped / Total] 56 / 66 / 0 / 122:  12%|█▏        | 122/1000 [11:41<1:24:09,  5.75s/it][Succeeded / Failed / Skipped / Total] 56 / 66 / 0 / 122:  12%|█▏        | 123/1000 [11:45<1:23:47,  5.73s/it][Succeeded / Failed / Skipped / Total] 56 / 67 / 0 / 123:  12%|█▏        | 123/1000 [11:45<1:23:47,  5.73s/it][Succeeded / Failed / Skipped / Total] 56 / 67 / 0 / 123:  12%|█▏        | 124/1000 [11:50<1:23:36,  5.73s/it][Succeeded / Failed / Skipped / Total] 57 / 67 / 0 / 124:  12%|█▏        | 124/1000 [11:50<1:23:36,  5.73s/it][Succeeded / Failed / Skipped / Total] 57 / 67 / 0 / 124:  12%|█▎        | 125/1000 [12:03<1:24:22,  5.79s/it][Succeeded / Failed / Skipped / Total] 58 / 67 / 0 / 125:  12%|█▎        | 125/1000 [12:03<1:24:22,  5.79s/it][Succeeded / Failed / Skipped / Total] 58 / 67 / 0 / 125:  13%|█▎        | 126/1000 [12:04<1:23:48,  5.75s/it]Render the end tag . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[call]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 121 ---------------------------------------------
Sets the environment environment properties . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . [[contextEnvironmentProperties]] = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[exception]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . [[environment]] = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 122 ---------------------------------------------
Returns the UserDetailsService . --> [[[FAILED]]]

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > [[beans]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[beans]] . size ( ) == 0 ) { [[beans]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[beans]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[beans]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[beans]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > [[address]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[address]] . size ( ) == 0 ) { [[address]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[address]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[address]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[address]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 123 ---------------------------------------------
Initialize the user details service . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected void [[initUserDetailsService]] ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails [[userDetails]] : this . users ) { getUserDetailsService ( ) . createUser ( [[userDetails]] ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void [[attack]] ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails [[core]] : this . users ) { getUserDetailsService ( ) . createUser ( [[core]] ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 124 ---------------------------------------------
Determines if the request requires authentication . --> Does the request requires authentication? --> Socre: 1.0

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean [[serviceTicketRequest]] = [[serviceTicketRequest]] ( request , response ) ; final boolean result = [[serviceTicketRequest]] || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( [[serviceTicketRequest]] , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean [[start]] = [[start]] ( request , response ) ; final boolean result = [[start]] || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( [[start]] , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 125 ---------------------------------------------
Handles request ticket request . --> Does authentication require authentication? --> Socre: 1.0

[[[[Adv]]]]: private boolean serviceTicketRequest ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { boolean [[result]] = super . requiresAuthentication ( [[request]] , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean serviceTicketRequest ( final HttpServletRequest [[attack]] , final HttpServletResponse response ) { boolean [[raid]] = super . requiresAuthentication ( [[attack]] , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[raid]] ) ; } return [[raid]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 126 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 58 / 68 / 0 / 126:  13%|█▎        | 126/1000 [12:04<1:23:48,  5.75s/it][Succeeded / Failed / Skipped / Total] 58 / 68 / 0 / 126:  13%|█▎        | 127/1000 [12:09<1:23:35,  5.75s/it][Succeeded / Failed / Skipped / Total] 58 / 69 / 0 / 127:  13%|█▎        | 127/1000 [12:09<1:23:35,  5.75s/it][Succeeded / Failed / Skipped / Total] 58 / 69 / 0 / 127:  13%|█▎        | 128/1000 [12:19<1:23:59,  5.78s/it][Succeeded / Failed / Skipped / Total] 58 / 70 / 0 / 128:  13%|█▎        | 128/1000 [12:19<1:23:59,  5.78s/it][Succeeded / Failed / Skipped / Total] 58 / 70 / 0 / 128:  13%|█▎        | 129/1000 [12:22<1:23:36,  5.76s/it][Succeeded / Failed / Skipped / Total] 58 / 71 / 0 / 129:  13%|█▎        | 129/1000 [12:22<1:23:36,  5.76s/it][Succeeded / Failed / Skipped / Total] 58 / 71 / 0 / 129:  13%|█▎        | 130/1000 [12:29<1:23:36,  5.77s/it][Succeeded / Failed / Skipped / Total] 59 / 71 / 0 / 130:  13%|█▎        | 130/1000 [12:29<1:23:36,  5.77s/it][Succeeded / Failed / Skipped / Total] 59 / 71 / 0 / 130:  13%|█▎        | 131/1000 [12:30<1:22:55,  5.73s/it][Succeeded / Failed / Skipped / Total] 60 / 71 / 0 / 131:  13%|█▎        | 131/1000 [12:30<1:22:55,  5.73s/it][Succeeded / Failed / Skipped / Total] 60 / 71 / 0 / 131:  13%|█▎        | 132/1000 [12:35<1:22:50,  5.73s/it]Adds the pkce parameters . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addPkceParameters]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void [[create]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 127 ---------------------------------------------
Builds the provider URL from the given list of URLs . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[buildProviderUrl]] ( List < String > [[urls]] , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( [[urls]] , "At least one LDAP server URL must be provided." ) ; String [[trimmedBaseDn]] = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : [[urls]] ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( [[trimmedBaseDn]] ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String [[main]] ( List < String > [[file]] , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( [[file]] , "At least one LDAP server URL must be provided." ) ; String [[section]] = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : [[file]] ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( [[section]] ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 128 ---------------------------------------------
Determines whether the user is authenticated . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[authentication]] != null && [[authentication]] . isAuthenticated ( ) && ! ( [[authentication]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[signature]] ( ) { Authentication [[result]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[result]] != null && [[result]] . isAuthenticated ( ) && ! ( [[result]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 129 ---------------------------------------------
proxy ticket request --> [[[FAILED]]]

[[[[Adv]]]]: private boolean proxyTicketRequest ( final boolean [[serviceTicketRequest]] , final HttpServletRequest request ) { if ( [[serviceTicketRequest]] ) { return "False" != "False" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean proxyTicketRequest ( final boolean [[consequence]] , final HttpServletRequest request ) { if ( [[consequence]] ) { return "False" != "False" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 130 ---------------------------------------------
Encodes the given value using UTF - 8 encoding . --> Encode string . --> Socre: 1.0

[[[[Adv]]]]: private String [[utf8UrlEncode]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String [[array]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 131 ---------------------------------------------
Determines if the specified request should be proxied or not . --> Check for proxyReceptor --> Socre: 1.0

[[[[Adv]]]]: private boolean [[proxyReceptorRequest]] ( final HttpServletRequest [[request]] ) { final boolean [[result]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[request]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean [[mask]] ( final HttpServletRequest [[er]] ) { final boolean [[hash]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[er]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[hash]] ) ; } return [[hash]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 132 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 61 / 71 / 0 / 132:  13%|█▎        | 132/1000 [12:35<1:22:50,  5.73s/it][Succeeded / Failed / Skipped / Total] 61 / 71 / 0 / 132:  13%|█▎        | 133/1000 [12:48<1:23:32,  5.78s/it][Succeeded / Failed / Skipped / Total] 61 / 72 / 0 / 133:  13%|█▎        | 133/1000 [12:48<1:23:32,  5.78s/it][Succeeded / Failed / Skipped / Total] 61 / 72 / 0 / 133:  13%|█▎        | 134/1000 [12:49<1:22:52,  5.74s/it][Succeeded / Failed / Skipped / Total] 61 / 73 / 0 / 134:  13%|█▎        | 134/1000 [12:49<1:22:52,  5.74s/it][Succeeded / Failed / Skipped / Total] 61 / 73 / 0 / 134:  14%|█▎        | 135/1000 [12:50<1:22:13,  5.70s/it][Succeeded / Failed / Skipped / Total] 61 / 74 / 0 / 135:  14%|█▎        | 135/1000 [12:50<1:22:13,  5.70s/it][Succeeded / Failed / Skipped / Total] 61 / 74 / 0 / 135:  14%|█▎        | 136/1000 [12:56<1:22:11,  5.71s/it][Succeeded / Failed / Skipped / Total] 61 / 75 / 0 / 136:  14%|█▎        | 136/1000 [12:56<1:22:11,  5.71s/it][Succeeded / Failed / Skipped / Total] 61 / 75 / 0 / 136:  14%|█▎        | 137/1000 [12:56<1:21:33,  5.67s/it][Succeeded / Failed / Skipped / Total] 62 / 75 / 0 / 137:  14%|█▎        | 137/1000 [12:56<1:21:33,  5.67s/it][Succeeded / Failed / Skipped / Total] 62 / 75 / 0 / 137:  14%|█▍        | 138/1000 [13:10<1:22:16,  5.73s/it][Succeeded / Failed / Skipped / Total] 63 / 75 / 0 / 138:  14%|█▍        | 138/1000 [13:10<1:22:16,  5.73s/it][Succeeded / Failed / Skipped / Total] 63 / 75 / 0 / 138:  14%|█▍        | 139/1000 [13:15<1:22:09,  5.73s/it]Gets the JWK set . --> Returns a Mono of JWKSets --> Socre: 1.0

[[[[Adv]]]]: private Mono < JWKSet > getJWKSet ( ) { return this . [[webClient]] . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . [[cachedJWKSet]] . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > getJWKSet ( ) { return this . [[thing]] . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . [[big]] . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 133 ---------------------------------------------
Load user by assertion . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[loadUserByAssertion]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails [[authentication]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 134 ---------------------------------------------
Creates a security expression root of the security expression root . --> [[[FAILED]]]

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[createSecurityExpressionRoot]] ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( authentication ) ; root . setThis ( invocation . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[how]] ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( authentication ) ; root . setThis ( invocation . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 135 ---------------------------------------------
Gets the groups based on the authenticated user . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[getWebSphereGroupsBasedGrantedAuthorities]] ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[userGas]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + [[userGas]] ) ; } return [[userGas]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[index]] ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[format]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + [[format]] ) ; } return [[format]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 136 ---------------------------------------------
Gets the pre authenticated principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object [[principal]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[coordinator]] ( HttpServletRequest httpRequest ) { Object [[handler]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[handler]] ) ; } return [[handler]] ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 137 ---------------------------------------------
Returns a portion of a byte array . --> Perform procedure procedure procedure --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[subArray]] ( byte [ ] array , int beginIndex , int endIndex ) { int length = endIndex - beginIndex ; byte [ ] subarray = new byte [ length ] ; System . arraycopy ( array , beginIndex , subarray , 0 , length ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] [[procedure]] ( byte [ ] array , int beginIndex , int endIndex ) { int length = endIndex - beginIndex ; byte [ ] subarray = new byte [ length ] ; System . arraycopy ( array , beginIndex , subarray , 0 , length ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 138 ---------------------------------------------
Preprocess map of org . apache . org . apache . org . apache . map . Map . MapAuthorities . --> Utility method for testing --> Socre: 1.0

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[preProcessMap]] ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[test]] ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 139 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 63 / 76 / 0 / 139:  14%|█▍        | 139/1000 [13:15<1:22:09,  5.73s/it][Succeeded / Failed / Skipped / Total] 63 / 76 / 0 / 139:  14%|█▍        | 140/1000 [13:24<1:22:24,  5.75s/it][Succeeded / Failed / Skipped / Total] 63 / 77 / 0 / 140:  14%|█▍        | 140/1000 [13:24<1:22:24,  5.75s/it][Succeeded / Failed / Skipped / Total] 63 / 77 / 0 / 140:  14%|█▍        | 141/1000 [13:26<1:21:55,  5.72s/it][Succeeded / Failed / Skipped / Total] 63 / 78 / 0 / 141:  14%|█▍        | 141/1000 [13:26<1:21:55,  5.72s/it][Succeeded / Failed / Skipped / Total] 63 / 78 / 0 / 141:  14%|█▍        | 142/1000 [13:29<1:21:29,  5.70s/it][Succeeded / Failed / Skipped / Total] 63 / 79 / 0 / 142:  14%|█▍        | 142/1000 [13:29<1:21:29,  5.70s/it][Succeeded / Failed / Skipped / Total] 63 / 79 / 0 / 142:  14%|█▍        | 143/1000 [13:36<1:21:32,  5.71s/it][Succeeded / Failed / Skipped / Total] 63 / 80 / 0 / 143:  14%|█▍        | 143/1000 [13:36<1:21:32,  5.71s/it][Succeeded / Failed / Skipped / Total] 63 / 80 / 0 / 143:  14%|█▍        | 144/1000 [13:37<1:20:58,  5.68s/it][Succeeded / Failed / Skipped / Total] 64 / 80 / 0 / 144:  14%|█▍        | 144/1000 [13:37<1:20:58,  5.68s/it][Succeeded / Failed / Skipped / Total] 64 / 80 / 0 / 144:  14%|█▍        | 145/1000 [13:40<1:20:35,  5.66s/it]Gets the grantedAuthority collection . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < GrantedAuthority > getGrantedAuthorityCollection ( Object [[value]] ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , [[value]] ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > getGrantedAuthorityCollection ( Object [[x]] ) { Collection < GrantedAuthority > result = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( result , [[x]] ) ; return result ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 140 ---------------------------------------------
Get a list of granted authorities from a list of attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > [[attributes]] ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : [[attributes]] ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { gaList . addAll ( c ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[on]] ( Collection < String > [[a]] ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : [[a]] ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { gaList . addAll ( c ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 141 ---------------------------------------------
Concatenate multiple arrays . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[concatenate]] ( byte [ ] ... [[arrays]] ) { int [[length]] = 0 ; for ( byte [ ] array : [[arrays]] ) { [[length]] += array . length ; } byte [ ] newArray = new byte [ [[length]] ] ; int destPos = 0 ; for ( byte [ ] array : [[arrays]] ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] [[f]] ( byte [ ] ... [[speed]] ) { int [[arrays]] = 0 ; for ( byte [ ] array : [[speed]] ) { [[arrays]] += array . length ; } byte [ ] newArray = new byte [ [[arrays]] ] ; int destPos = 0 ; for ( byte [ ] array : [[speed]] ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 142 ---------------------------------------------
Adds a collection of granted authorities to the result . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > result , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[value]] instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( result , ( Collection < ? > ) [[value]] ) ; } else if ( [[value]] instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( result , ( Object [ ] ) [[value]] ) ; } else if ( [[value]] instanceof String ) { [[addGrantedAuthorityCollection]] ( result , ( String ) [[value]] ) ; } else if ( [[value]] instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) [[value]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[value]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[by]] ( Collection < GrantedAuthority > result , Object [[label]] ) { if ( [[label]] == null ) { return ; } if ( [[label]] instanceof Collection < ? > ) { [[by]] ( result , ( Collection < ? > ) [[label]] ) ; } else if ( [[label]] instanceof Object [ ] ) { [[by]] ( result , ( Object [ ] ) [[label]] ) ; } else if ( [[label]] instanceof String ) { [[by]] ( result , ( String ) [[label]] ) ; } else if ( [[label]] instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) [[label]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[label]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 143 ---------------------------------------------
Gets a shared object . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . [[sharedObjects]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[windows]] > [[windows]] getSharedObject ( Class < [[windows]] > sharedType ) { return ( [[windows]] ) this . [[view]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 144 ---------------------------------------------
Implement the interceptor method . --> Perform the interceptor --> Socre: 1.0

[[[[Adv]]]]: public Object [[invoke]] ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object [[base]] ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 145 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 65 / 80 / 0 / 145:  14%|█▍        | 145/1000 [13:40<1:20:35,  5.66s/it][Succeeded / Failed / Skipped / Total] 65 / 80 / 0 / 145:  15%|█▍        | 146/1000 [13:40<1:20:02,  5.62s/it][Succeeded / Failed / Skipped / Total] 65 / 81 / 0 / 146:  15%|█▍        | 146/1000 [13:40<1:20:02,  5.62s/it][Succeeded / Failed / Skipped / Total] 65 / 81 / 0 / 146:  15%|█▍        | 147/1000 [13:53<1:20:37,  5.67s/it][Succeeded / Failed / Skipped / Total] 65 / 82 / 0 / 147:  15%|█▍        | 147/1000 [13:53<1:20:37,  5.67s/it][Succeeded / Failed / Skipped / Total] 65 / 82 / 0 / 147:  15%|█▍        | 148/1000 [14:12<1:21:48,  5.76s/it][Succeeded / Failed / Skipped / Total] 65 / 83 / 0 / 148:  15%|█▍        | 148/1000 [14:12<1:21:48,  5.76s/it][Succeeded / Failed / Skipped / Total] 65 / 83 / 0 / 148:  15%|█▍        | 149/1000 [14:20<1:21:53,  5.77s/it][Succeeded / Failed / Skipped / Total] 66 / 83 / 0 / 149:  15%|█▍        | 149/1000 [14:20<1:21:53,  5.77s/it][Succeeded / Failed / Skipped / Total] 66 / 83 / 0 / 149:  15%|█▌        | 150/1000 [14:21<1:21:20,  5.74s/it][Succeeded / Failed / Skipped / Total] 66 / 84 / 0 / 150:  15%|█▌        | 150/1000 [14:21<1:21:20,  5.74s/it][Succeeded / Failed / Skipped / Total] 66 / 84 / 0 / 150:  15%|█▌        | 151/1000 [14:26<1:21:12,  5.74s/it][Succeeded / Failed / Skipped / Total] 67 / 84 / 0 / 151:  15%|█▌        | 151/1000 [14:26<1:21:12,  5.74s/it][Succeeded / Failed / Skipped / Total] 67 / 84 / 0 / 151:  15%|█▌        | 152/1000 [14:35<1:21:23,  5.76s/it]Build the redirect URL for the given request . --> HttpServletRequest --> Socre: 1.0

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest request ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( request ) ; Integer [[httpsPort]] = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( [[httpsPort]] != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( [[httpsPort]] . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[exchange]] ( HttpServletRequest request ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( request ) ; Integer [[stack]] = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( [[stack]] != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( [[stack]] . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 146 ---------------------------------------------
Gets the pre - authenticated principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object principal = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object [[status]] ( HttpServletRequest httpRequest ) { Object principal = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 147 ---------------------------------------------
Converts a list of roles to a list of roles --> [[[FAILED]]]

[[[[Adv]]]]: private static String [ ] [[hasAnyRole]] ( String ... [[roles]] ) { for ( int i = 0 ; i < [[roles]] . length ; i ++ ) { [[roles]] [ i ] = "ROLE_" + [[roles]] [ i ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] [[by]] ( String ... [[end]] ) { for ( int i = 0 ; i < [[end]] . length ; i ++ ) { [[end]] [ i ] = "ROLE_" + [[end]] [ i ] ; } return [[end]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 148 ---------------------------------------------
Returns the role s role . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[hasRole]] ( String role ) { Assert . isTrue ( ! role . startsWith ( "ROLE_" ) , ( ) -> role + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + role ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[include]] ( String role ) { Assert . isTrue ( ! role . startsWith ( "ROLE_" ) , ( ) -> role + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + role ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 149 ---------------------------------------------
Attempts to exit the login user . --> protected for testing --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[attack]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 150 ---------------------------------------------
On login success . --> [[[FAILED]]]

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 151 ---------------------------------------------
Display public index page --> Display Hello Contact --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[bar]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 152 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 67 / 85 / 0 / 152:  15%|█▌        | 152/1000 [14:35<1:21:23,  5.76s/it][Succeeded / Failed / Skipped / Total] 67 / 85 / 0 / 152:  15%|█▌        | 153/1000 [14:37<1:20:58,  5.74s/it][Succeeded / Failed / Skipped / Total] 68 / 85 / 0 / 153:  15%|█▌        | 153/1000 [14:37<1:20:58,  5.74s/it][Succeeded / Failed / Skipped / Total] 68 / 85 / 0 / 153:  15%|█▌        | 154/1000 [14:40<1:20:38,  5.72s/it][Succeeded / Failed / Skipped / Total] 69 / 85 / 0 / 154:  15%|█▌        | 154/1000 [14:40<1:20:38,  5.72s/it][Succeeded / Failed / Skipped / Total] 69 / 85 / 0 / 154:  16%|█▌        | 155/1000 [14:52<1:21:04,  5.76s/it][Succeeded / Failed / Skipped / Total] 69 / 86 / 0 / 155:  16%|█▌        | 155/1000 [14:52<1:21:04,  5.76s/it][Succeeded / Failed / Skipped / Total] 69 / 86 / 0 / 155:  16%|█▌        | 156/1000 [15:03<1:21:28,  5.79s/it][Succeeded / Failed / Skipped / Total] 69 / 87 / 0 / 156:  16%|█▌        | 156/1000 [15:03<1:21:28,  5.79s/it][Succeeded / Failed / Skipped / Total] 69 / 87 / 0 / 156:  16%|█▌        | 157/1000 [15:05<1:20:59,  5.76s/it][Succeeded / Failed / Skipped / Total] 69 / 88 / 0 / 157:  16%|█▌        | 157/1000 [15:05<1:20:59,  5.76s/it][Succeeded / Failed / Skipped / Total] 69 / 88 / 0 / 157:  16%|█▌        | 158/1000 [15:05<1:20:26,  5.73s/it]Processes auto login cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[processAutoLoginCookie]] ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails [[procedure]] ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 153 ---------------------------------------------
Sets the exit user URL . --> Main method for testing --> Socre: 1.0

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String [[exitUserUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[exitUserUrl]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . [[exitUserMatcher]] = createMatcher ( [[exitUserUrl]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[main]] ( String [[a]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[a]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . [[be]] = createMatcher ( [[a]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 154 ---------------------------------------------
Build the spring security filter chain . --> Enables filtering . --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean [[hasConfigurers]] = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! [[hasConfigurers]] ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[keeper]] ( ) throws Exception { boolean [[foo]] = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! [[foo]] ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 155 ---------------------------------------------
Attempt to switch to a user . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication [[attemptSwitchUser]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication [[application]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 156 ---------------------------------------------
Decodes the given token . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Jwt decode ( String [[token]] ) throws JwtException { JWT [[jwt]] = parse ( [[token]] ) ; if ( [[jwt]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[token]] , [[jwt]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[jwt]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String [[j]] ) throws JwtException { JWT [[xt]] = parse ( [[j]] ) ; if ( [[xt]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[j]] , [[xt]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[xt]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 157 ---------------------------------------------
Allow access to access the user --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingAccessExpression]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > [[handler]] = getExpressionHandler ( ) ; Expression [[accessExpression]] ; try { [[accessExpression]] = [[handler]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException [[ioException]] = new IOException ( ) ; [[ioException]] . initCause ( e ) ; throw [[ioException]] ; } return ExpressionUtils . evaluateAsBoolean ( [[accessExpression]] , createExpressionEvaluationContext ( [[handler]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean [[execute]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > [[a]] = getExpressionHandler ( ) ; Expression [[holder]] ; try { [[holder]] = [[a]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException [[ae]] = new IOException ( ) ; [[ae]] . initCause ( e ) ; throw [[ae]] ; } return ExpressionUtils . evaluateAsBoolean ( [[holder]] , createExpressionEvaluationContext ( [[a]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 158 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 69 / 89 / 0 / 158:  16%|█▌        | 158/1000 [15:05<1:20:26,  5.73s/it][Succeeded / Failed / Skipped / Total] 69 / 89 / 0 / 158:  16%|█▌        | 159/1000 [15:06<1:19:56,  5.70s/it][Succeeded / Failed / Skipped / Total] 70 / 89 / 0 / 159:  16%|█▌        | 159/1000 [15:06<1:19:56,  5.70s/it][Succeeded / Failed / Skipped / Total] 70 / 89 / 0 / 159:  16%|█▌        | 160/1000 [15:11<1:19:43,  5.69s/it][Succeeded / Failed / Skipped / Total] 71 / 89 / 0 / 160:  16%|█▌        | 160/1000 [15:11<1:19:43,  5.69s/it][Succeeded / Failed / Skipped / Total] 71 / 89 / 0 / 160:  16%|█▌        | 161/1000 [15:11<1:19:11,  5.66s/it][Succeeded / Failed / Skipped / Total] 72 / 89 / 0 / 161:  16%|█▌        | 161/1000 [15:11<1:19:11,  5.66s/it][Succeeded / Failed / Skipped / Total] 72 / 89 / 0 / 161:  16%|█▌        | 162/1000 [15:22<1:19:30,  5.69s/it][Succeeded / Failed / Skipped / Total] 73 / 89 / 0 / 162:  16%|█▌        | 162/1000 [15:22<1:19:30,  5.69s/it][Succeeded / Failed / Skipped / Total] 73 / 89 / 0 / 162:  16%|█▋        | 163/1000 [15:22<1:18:58,  5.66s/it]Check to see if the request should be authenticated using the URL . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingUrlCheck]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[currentUser]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , [[currentUser]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean [[authentication]] ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[log]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , [[log]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 159 ---------------------------------------------
Converts the given JWT to granted authorities . --> Samples from a JWT . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[convert]] ( Jwt [[jwt]] ) { return getScopes ( [[jwt]] ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[sample]] ( Jwt [[a]] ) { return getScopes ( [[a]] ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 160 ---------------------------------------------
Generates a CSRF token . --> Handle the request . --> Socre: 1.0

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[handle]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 161 ---------------------------------------------
Add a permission --> Handle a request --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[addPermission]] ( AddPermission addPermission , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( [[addPermission]] , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[addPermission]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[addPermission]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[addPermission]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[client]] ( AddPermission addPermission , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( [[client]] , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[client]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[client]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[client]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 162 ---------------------------------------------
Display the HTML page for a contact . --> View of addPermission --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAddPermissionPageForContact]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission [[addPermission]] = new AddPermission ( ) ; [[addPermission]] . setContact ( contact ) ; Map < String , Object > [[model]] = new HashMap <> ( ) ; [[model]] . put ( "addPermission" , [[addPermission]] ) ; [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[model]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[client]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission [[encounter]] = new AddPermission ( ) ; [[encounter]] . setContact ( contact ) ; Map < String , Object > [[item]] = new HashMap <> ( ) ; [[item]] . put ( "addPermission" , [[encounter]] ) ; [[item]] . put ( "recipients" , listRecipients ( ) ) ; [[item]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[item]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 163 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 74 / 89 / 0 / 163:  16%|█▋        | 163/1000 [15:22<1:18:58,  5.66s/it][Succeeded / Failed / Skipped / Total] 74 / 89 / 0 / 163:  16%|█▋        | 164/1000 [15:27<1:18:48,  5.66s/it][Succeeded / Failed / Skipped / Total] 74 / 90 / 0 / 164:  16%|█▋        | 164/1000 [15:27<1:18:48,  5.66s/it][Succeeded / Failed / Skipped / Total] 74 / 90 / 0 / 164:  16%|█▋        | 165/1000 [15:29<1:18:21,  5.63s/it][Succeeded / Failed / Skipped / Total] 75 / 90 / 0 / 165:  16%|█▋        | 165/1000 [15:29<1:18:21,  5.63s/it][Succeeded / Failed / Skipped / Total] 75 / 90 / 0 / 165:  17%|█▋        | 166/1000 [15:29<1:17:50,  5.60s/it][Succeeded / Failed / Skipped / Total] 76 / 90 / 0 / 166:  17%|█▋        | 166/1000 [15:29<1:17:50,  5.60s/it][Succeeded / Failed / Skipped / Total] 76 / 90 / 0 / 166:  17%|█▋        | 167/1000 [15:30<1:17:20,  5.57s/it][Succeeded / Failed / Skipped / Total] 77 / 90 / 0 / 167:  17%|█▋        | 167/1000 [15:30<1:17:20,  5.57s/it][Succeeded / Failed / Skipped / Total] 77 / 90 / 0 / 167:  17%|█▋        | 168/1000 [15:41<1:17:43,  5.60s/it][Succeeded / Failed / Skipped / Total] 77 / 91 / 0 / 168:  17%|█▋        | 168/1000 [15:41<1:17:43,  5.60s/it][Succeeded / Failed / Skipped / Total] 77 / 91 / 0 / 168:  17%|█▋        | 169/1000 [15:41<1:17:10,  5.57s/it][Succeeded / Failed / Skipped / Total] 78 / 91 / 0 / 169:  17%|█▋        | 169/1000 [15:41<1:17:10,  5.57s/it][Succeeded / Failed / Skipped / Total] 78 / 91 / 0 / 169:  17%|█▋        | 170/1000 [15:46<1:16:59,  5.57s/it]Displays a request . --> Displays the security model . --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[deletePermission]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission [[permission]] = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , [[permission]] ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , [[permission]] ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[connector]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission [[bar]] = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , [[bar]] ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , [[bar]] ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 164 ---------------------------------------------
Display admin page for contact --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAdminPage]] ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[s]] ( @ RequestParam ( "contactId" ) int contactId ) { Contact contact = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 165 ---------------------------------------------
Gets the role prefix . --> Main method for testing --> Socre: 1.0

[[[[Adv]]]]: private static String [[getRoleWithDefaultPrefix]] ( String [[defaultRolePrefix]] , String [[role]] ) { if ( [[role]] == null ) { return [[role]] ; } if ( [[defaultRolePrefix]] == null || [[defaultRolePrefix]] . length ( ) == 0 ) { return [[role]] ; } if ( [[role]] . startsWith ( [[defaultRolePrefix]] ) ) { return [[role]] ; } return [[defaultRolePrefix]] + [[role]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String [[main]] ( String [[input]] , String [[display]] ) { if ( [[display]] == null ) { return [[display]] ; } if ( [[input]] == null || [[input]] . length ( ) == 0 ) { return [[display]] ; } if ( [[display]] . startsWith ( [[input]] ) ) { return [[display]] ; } return [[input]] + [[display]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 166 ---------------------------------------------
Returns the values for the specified attribute . --> Get attributes by name --> Socre: 1.0

[[[[Adv]]]]: public List < String > [[getAttributeValues]] ( String name ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( name ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > [[by]] ( String name ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( name ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 167 ---------------------------------------------
Creates a UserDetailsResourceFactory object from a string . --> Create UserDetailsResourceFactory bean . --> Socre: 1.0

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[fromString]] ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[on]] ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 168 ---------------------------------------------
Decode bytes . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[decode]] ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String [[call]] ( byte [ ] [[²]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[²]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 169 ---------------------------------------------
Encodes the given string into a byte array . --> Encrypt a CharSequence --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[encode]] ( CharSequence string ) { try { ByteBuffer [[bytes]] = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] bytesCopy = new byte [ [[bytes]] . limit ( ) ] ; System . arraycopy ( [[bytes]] . array ( ) , 0 , bytesCopy , 0 , [[bytes]] . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] [[procedure]] ( CharSequence string ) { try { ByteBuffer [[vector]] = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( string ) ) ; byte [ ] bytesCopy = new byte [ [[vector]] . limit ( ) ] ; System . arraycopy ( [[vector]] . array ( ) , 0 , bytesCopy , 0 , [[vector]] . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 170 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 78 / 92 / 0 / 170:  17%|█▋        | 170/1000 [15:46<1:16:59,  5.57s/it][Succeeded / Failed / Skipped / Total] 78 / 92 / 0 / 170:  17%|█▋        | 171/1000 [15:49<1:16:42,  5.55s/it][Succeeded / Failed / Skipped / Total] 79 / 92 / 0 / 171:  17%|█▋        | 171/1000 [15:49<1:16:42,  5.55s/it][Succeeded / Failed / Skipped / Total] 79 / 92 / 0 / 171:  17%|█▋        | 172/1000 [16:02<1:17:15,  5.60s/it][Succeeded / Failed / Skipped / Total] 80 / 92 / 0 / 172:  17%|█▋        | 172/1000 [16:02<1:17:15,  5.60s/it][Succeeded / Failed / Skipped / Total] 80 / 92 / 0 / 172:  17%|█▋        | 173/1000 [16:08<1:17:10,  5.60s/it][Succeeded / Failed / Skipped / Total] 80 / 93 / 0 / 173:  17%|█▋        | 173/1000 [16:08<1:17:10,  5.60s/it][Succeeded / Failed / Skipped / Total] 80 / 93 / 0 / 173:  17%|█▋        | 174/1000 [16:11<1:16:51,  5.58s/it][Succeeded / Failed / Skipped / Total] 81 / 93 / 0 / 174:  17%|█▋        | 174/1000 [16:11<1:16:51,  5.58s/it][Succeeded / Failed / Skipped / Total] 81 / 93 / 0 / 174:  18%|█▊        | 175/1000 [16:25<1:17:26,  5.63s/it][Succeeded / Failed / Skipped / Total] 82 / 93 / 0 / 175:  18%|█▊        | 175/1000 [16:25<1:17:26,  5.63s/it][Succeeded / Failed / Skipped / Total] 82 / 93 / 0 / 175:  18%|█▊        | 176/1000 [16:30<1:17:17,  5.63s/it][Succeeded / Failed / Skipped / Total] 82 / 94 / 0 / 176:  18%|█▊        | 176/1000 [16:30<1:17:17,  5.63s/it][Succeeded / Failed / Skipped / Total] 82 / 94 / 0 / 176:  18%|█▊        | 177/1000 [16:30<1:16:47,  5.60s/it][Succeeded / Failed / Skipped / Total] 83 / 94 / 0 / 177:  18%|█▊        | 177/1000 [16:30<1:16:47,  5.60s/it][Succeeded / Failed / Skipped / Total] 83 / 94 / 0 / 177:  18%|█▊        | 178/1000 [16:39<1:16:54,  5.61s/it]Returns the first attribute value for the specified attribute . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String name ) { List < String > result = getAttributeValues ( name ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[attribute]] ( String name ) { List < String > result = getAttributeValues ( name ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 171 ---------------------------------------------
Find attributes that match the specified method . --> Searches for attributes that match specified targetClass --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > findAttributes ( Method [[method]] , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[method]] , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > findAttributes ( Method [[index]] , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[index]] , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 172 ---------------------------------------------
Handle a contact . --> Handle an exception --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[addContact]] ( WebContact [[form]] , BindingResult result ) { validator . validate ( [[form]] , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact [[contact]] = new Contact ( [[form]] . getName ( ) , [[form]] . getEmail ( ) ) ; contactManager . create ( [[contact]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[exception]] ( WebContact [[procedure]] , BindingResult result ) { validator . validate ( [[procedure]] , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact [[data]] = new Contact ( [[procedure]] . getName ( ) , [[procedure]] . getEmail ( ) ) ; contactManager . create ( [[data]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 173 ---------------------------------------------
Returns all config attributes . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[getAllConfigAttributes]] ( ) { Set < ConfigAttribute > allAttributes = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { allAttributes . addAll ( attributeList ) ; } return allAttributes ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[options]] ( ) { Set < ConfigAttribute > allAttributes = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { allAttributes . addAll ( attributeList ) ; } return allAttributes ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 174 ---------------------------------------------
Adds a secure method . --> Applies the given string to this example --> Socre: 1.0

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod [[method]] , List < ConfigAttribute > [[attr]] ) { Assert . notNull ( [[method]] , "RegisteredMethod required" ) ; Assert . notNull ( [[attr]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[method]] + "] with attributes [" + [[attr]] + "]" ) ; } this . [[methodMap]] . put ( [[method]] , [[attr]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[like]] ( RegisteredMethod [[excluded]] , List < ConfigAttribute > [[string]] ) { Assert . notNull ( [[excluded]] , "RegisteredMethod required" ) ; Assert . notNull ( [[string]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[excluded]] + "] with attributes [" + [[string]] + "]" ) ; } this . [[example]] . put ( [[excluded]] , [[string]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 175 ---------------------------------------------
Checks if the mapped name matches the mapped name --> Determines whether a string contains an array --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isMatch]] ( String [[methodName]] , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && [[methodName]] . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && [[methodName]] . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[array]] ( String [[data]] , String [[command]] ) { return ( [[command]] . endsWith ( "*" ) && [[data]] . startsWith ( [[command]] . substring ( 0 , [[command]] . length ( ) - 1 ) ) ) || ( [[command]] . startsWith ( "*" ) && [[data]] . endsWith ( [[command]] . substring ( 1 , [[command]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 176 ---------------------------------------------
Handles a bind exception . --> [[[FAILED]]]

[[[[Adv]]]]: protected void handleBindException ( String [[userDn]] , String [[username]] , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[userDn]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void handleBindException ( String [[base]] , String [[base]] , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[base]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 177 ---------------------------------------------
Get a random contact --> Handles random contact --> Socre: 1.0

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[getRandomContact]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[handler]] ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 178 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 84 / 94 / 0 / 178:  18%|█▊        | 178/1000 [16:39<1:16:54,  5.61s/it][Succeeded / Failed / Skipped / Total] 84 / 94 / 0 / 178:  18%|█▊        | 179/1000 [16:50<1:17:14,  5.64s/it][Succeeded / Failed / Skipped / Total] 84 / 95 / 0 / 179:  18%|█▊        | 179/1000 [16:50<1:17:14,  5.64s/it][Succeeded / Failed / Skipped / Total] 84 / 95 / 0 / 179:  18%|█▊        | 180/1000 [16:55<1:17:04,  5.64s/it][Succeeded / Failed / Skipped / Total] 84 / 96 / 0 / 180:  18%|█▊        | 180/1000 [16:55<1:17:04,  5.64s/it][Succeeded / Failed / Skipped / Total] 84 / 96 / 0 / 180:  18%|█▊        | 181/1000 [16:55<1:16:34,  5.61s/it][Succeeded / Failed / Skipped / Total] 85 / 96 / 0 / 181:  18%|█▊        | 181/1000 [16:55<1:16:34,  5.61s/it][Succeeded / Failed / Skipped / Total] 85 / 96 / 0 / 181:  18%|█▊        | 182/1000 [16:56<1:16:07,  5.58s/it][Succeeded / Failed / Skipped / Total] 85 / 97 / 0 / 182:  18%|█▊        | 182/1000 [16:56<1:16:07,  5.58s/it][Succeeded / Failed / Skipped / Total] 85 / 97 / 0 / 182:  18%|█▊        | 183/1000 [17:00<1:15:57,  5.58s/it][Succeeded / Failed / Skipped / Total] 86 / 97 / 0 / 183:  18%|█▊        | 183/1000 [17:00<1:15:57,  5.58s/it][Succeeded / Failed / Skipped / Total] 86 / 97 / 0 / 183:  18%|█▊        | 184/1000 [17:04<1:15:45,  5.57s/it][Succeeded / Failed / Skipped / Total] 86 / 98 / 0 / 184:  18%|█▊        | 184/1000 [17:04<1:15:45,  5.57s/it][Succeeded / Failed / Skipped / Total] 86 / 98 / 0 / 184:  18%|█▊        | 185/1000 [17:14<1:15:58,  5.59s/it]Specifies whether or not any request has been configured . --> Main method for testing --> Socre: 1.0

[[[[Adv]]]]: public C [[anyRequest]] ( ) { Assert . state ( ! this . [[anyRequestConfigured]] , "Can't configure anyRequest after itself" ) ; C [[configurer]] = requestMatchers ( ANY_REQUEST ) ; this . [[anyRequestConfigured]] = "True" == "True" ; return [[configurer]] ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C [[main]] ( ) { Assert . state ( ! this . [[like]] , "Can't configure anyRequest after itself" ) ; C [[version]] = requestMatchers ( ANY_REQUEST ) ; this . [[like]] = "True" == "True" ; return [[version]] ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 179 ---------------------------------------------
Removes authentication attributes from the session . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void clearAuthenticationAttributes ( HttpServletRequest [[request]] ) { HttpSession session = [[request]] . getSession ( "False" != "False" ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void clearAuthenticationAttributes ( HttpServletRequest [[ron]] ) { HttpSession session = [[ron]] . getSession ( "False" != "False" ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 180 ---------------------------------------------
Returns the field of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public static Field [[getField]] ( Class < ? > clazz , String [[fieldName]] ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( [[fieldName]] , "Field name required" ) ; try { return clazz . getDeclaredField ( [[fieldName]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field [[test]] ( Class < ? > clazz , String [[name]] ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( [[name]] , "Field name required" ) ; try { return clazz . getDeclaredField ( [[name]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 181 ---------------------------------------------
Create redirect url . --> Calculate variable --> Socre: 1.0

[[[[Adv]]]]: protected String [[createRedirectUrl]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[var]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 182 ---------------------------------------------
Lookup parameter names for the given parameter . --> [[[FAILED]]]

[[[[Adv]]]]: private < T [[extends]] AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] [[paramNames]] = new String [ parameterCount ] ; boolean [[found]] = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String [[parameterName]] = findParameterName ( annotations ) ; if ( [[parameterName]] != null ) { [[found]] = "True" == "True" ; [[paramNames]] [ i ] = [[parameterName]] ; } } return [[found]] ? [[paramNames]] : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T [[at]] AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] [[size]] = new String [ parameterCount ] ; boolean [[locality]] = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String [[quality]] = findParameterName ( annotations ) ; if ( [[quality]] != null ) { [[locality]] = "True" == "True" ; [[size]] [ i ] = [[quality]] ; } } return [[locality]] ? [[size]] : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 183 ---------------------------------------------
Check the filters stack . --> Agent filters . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkFilterStack]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void [[agent]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 184 ---------------------------------------------
Create service url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[execution]] ( final HttpServletRequest [[ial]] , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 185 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 86 / 99 / 0 / 185:  18%|█▊        | 185/1000 [17:14<1:15:58,  5.59s/it][Succeeded / Failed / Skipped / Total] 86 / 99 / 0 / 185:  19%|█▊        | 186/1000 [17:22<1:16:03,  5.61s/it][Succeeded / Failed / Skipped / Total] 86 / 100 / 0 / 186:  19%|█▊        | 186/1000 [17:22<1:16:03,  5.61s/it][Succeeded / Failed / Skipped / Total] 86 / 100 / 0 / 186:  19%|█▊        | 187/1000 [17:25<1:15:44,  5.59s/it][Succeeded / Failed / Skipped / Total] 86 / 101 / 0 / 187:  19%|█▊        | 187/1000 [17:25<1:15:44,  5.59s/it][Succeeded / Failed / Skipped / Total] 86 / 101 / 0 / 187:  19%|█▉        | 188/1000 [17:25<1:15:15,  5.56s/it][Succeeded / Failed / Skipped / Total] 86 / 101 / 1 / 188:  19%|█▉        | 188/1000 [17:25<1:15:15,  5.56s/it][Succeeded / Failed / Skipped / Total] 86 / 101 / 1 / 188:  19%|█▉        | 189/1000 [17:25<1:14:48,  5.53s/it][Succeeded / Failed / Skipped / Total] 87 / 101 / 1 / 189:  19%|█▉        | 189/1000 [17:25<1:14:48,  5.53s/it][Succeeded / Failed / Skipped / Total] 87 / 101 / 1 / 189:  19%|█▉        | 190/1000 [17:30<1:14:39,  5.53s/it][Succeeded / Failed / Skipped / Total] 88 / 101 / 1 / 190:  19%|█▉        | 190/1000 [17:30<1:14:39,  5.53s/it][Succeeded / Failed / Skipped / Total] 88 / 101 / 1 / 190:  19%|█▉        | 191/1000 [17:40<1:14:53,  5.55s/it][Succeeded / Failed / Skipped / Total] 88 / 102 / 1 / 191:  19%|█▉        | 191/1000 [17:40<1:14:53,  5.55s/it][Succeeded / Failed / Skipped / Total] 88 / 102 / 1 / 191:  19%|█▉        | 192/1000 [17:46<1:14:48,  5.56s/it]Extracts the prefix from the given encoding string . --> [[[FAILED]]]

[[[[Adv]]]]: private String extractPrefix ( String [[encPass]] ) { if ( ! [[encPass]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[encPass]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[encPass]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String extractPrefix ( String [[add]] ) { if ( ! [[add]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[add]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[add]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 186 ---------------------------------------------
Gets the registered types . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[getRegisteredTypes]] ( ) { Set < Class < ? extends Throwable > > typeList = this . extractorMap . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[select]] ( ) { Set < Class < ? extends Throwable > > typeList = this . extractorMap . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 187 ---------------------------------------------
Invoked before authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[commence]] ( HttpServletRequest request , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void [[authentication]] ( HttpServletRequest request , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 188 ---------------------------------------------
Compares two byte arrays --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean matches ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 189 ---------------------------------------------
Registers access manager bean . --> Generate a bean name --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[registerAccessManager]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder [[accessMgrBuilder]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[accessMgrBuilder]] . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = [[accessMgrBuilder]] . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[a]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder [[id]] = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } [[id]] . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = [[id]] . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 190 ---------------------------------------------
Sets the default failure url . --> Use defaultFailureUrl --> Socre: 1.0

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String defaultFailureUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( defaultFailureUrl ) , ( ) -> "'" + defaultFailureUrl + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = defaultFailureUrl ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[use]] ( String defaultFailureUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( defaultFailureUrl ) , ( ) -> "'" + defaultFailureUrl + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = defaultFailureUrl ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 191 ---------------------------------------------
Retrieves the cause of the given throwable . --> [[[FAILED]]]

[[[[Adv]]]]: private Throwable [[extractCause]] ( Throwable [[throwable]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > [[entry]] : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = [[entry]] . getKey ( ) ; if ( throwableType . isInstance ( [[throwable]] ) ) { ThrowableCauseExtractor [[extractor]] = [[entry]] . getValue ( ) ; return [[extractor]] . extractCause ( [[throwable]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable [[scan]] ( Throwable [[image]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > [[end]] : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = [[end]] . getKey ( ) ; if ( throwableType . isInstance ( [[image]] ) ) { ThrowableCauseExtractor [[type]] = [[end]] . getValue ( ) ; return [[type]] . extractCause ( [[image]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 192 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 88 / 103 / 1 / 192:  19%|█▉        | 192/1000 [17:46<1:14:48,  5.56s/it][Succeeded / Failed / Skipped / Total] 88 / 103 / 1 / 192:  19%|█▉        | 193/1000 [17:55<1:14:57,  5.57s/it][Succeeded / Failed / Skipped / Total] 88 / 104 / 1 / 193:  19%|█▉        | 193/1000 [17:55<1:14:57,  5.57s/it][Succeeded / Failed / Skipped / Total] 88 / 104 / 1 / 193:  19%|█▉        | 194/1000 [18:05<1:15:08,  5.59s/it][Succeeded / Failed / Skipped / Total] 88 / 105 / 1 / 194:  19%|█▉        | 194/1000 [18:05<1:15:08,  5.59s/it][Succeeded / Failed / Skipped / Total] 88 / 105 / 1 / 194:  20%|█▉        | 195/1000 [18:09<1:14:57,  5.59s/it][Succeeded / Failed / Skipped / Total] 88 / 106 / 1 / 195:  20%|█▉        | 195/1000 [18:09<1:14:57,  5.59s/it][Succeeded / Failed / Skipped / Total] 88 / 106 / 1 / 195:  20%|█▉        | 196/1000 [18:15<1:14:52,  5.59s/it][Succeeded / Failed / Skipped / Total] 89 / 106 / 1 / 196:  20%|█▉        | 196/1000 [18:15<1:14:52,  5.59s/it][Succeeded / Failed / Skipped / Total] 89 / 106 / 1 / 196:  20%|█▉        | 197/1000 [18:28<1:15:17,  5.63s/it][Succeeded / Failed / Skipped / Total] 90 / 106 / 1 / 197:  20%|█▉        | 197/1000 [18:28<1:15:17,  5.63s/it][Succeeded / Failed / Skipped / Total] 90 / 106 / 1 / 197:  20%|█▉        | 198/1000 [18:39<1:15:35,  5.65s/it]Resolve hidden inputs . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > [[resolveHiddenInputs]] ) { Assert . notNull ( [[resolveHiddenInputs]] , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = [[resolveHiddenInputs]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[declare]] ( Function < HttpServletRequest , Map < String , String > > [[field]] ) { Assert . notNull ( [[field]] , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = [[field]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 193 ---------------------------------------------
Convert a list of user authorities to a set of authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public static Set < String > [[authorityListToSet]] ( Collection < ? extends GrantedAuthority > [[userAuthorities]] ) { Assert . notNull ( [[userAuthorities]] , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( [[userAuthorities]] . size ( ) ) ; for ( GrantedAuthority [[authority]] : [[userAuthorities]] ) { set . add ( [[authority]] . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > [[where]] ( Collection < ? extends GrantedAuthority > [[group]] ) { Assert . notNull ( [[group]] , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( [[group]] . size ( ) ) ; for ( GrantedAuthority [[request]] : [[group]] ) { set . add ( [[request]] . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 194 ---------------------------------------------
Checks if is an absolute url . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAbsoluteUrl]] ( String url ) { if ( url == null ) { return "False" != "False" ; } final Pattern [[ABSOLUTE_URL]] = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return [[ABSOLUTE_URL]] . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean [[index]] ( String url ) { if ( url == null ) { return "False" != "False" ; } final Pattern [[function]] = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return [[function]] . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 195 ---------------------------------------------
Returns the list of OpenIDAttributes for the given identifier . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > [[createAttributeList]] ( String [[identifier]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( [[identifier]] ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > [[item]] ( String [[id]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( [[id]] ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 196 ---------------------------------------------
Converts the given resultSet to a serializable identifier . --> Encode OR Oracle --> Socre: 1.0

[[[[Adv]]]]: Serializable [[identifierFrom]] ( Serializable [[identifier]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[identifier]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[identifier]] = convertFromStringTo ( ( String ) [[identifier]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable [[oracle]] ( Serializable [[matrix]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[matrix]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[matrix]] = convertFromStringTo ( ( String ) [[matrix]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 197 ---------------------------------------------
Build the request URL --> Convert servlet request URI to array --> Socre: 1.0

[[[[Adv]]]]: private static String [[buildRequestUrl]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder [[url]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[url]] . append ( servletPath ) ; if ( pathInfo != null ) { [[url]] . append ( pathInfo ) ; } } else { [[url]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { [[url]] . append ( "?" ) . append ( queryString ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String [[array]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder [[x]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[x]] . append ( servletPath ) ; if ( pathInfo != null ) { [[x]] . append ( pathInfo ) ; } } else { [[x]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { [[x]] . append ( "?" ) . append ( queryString ) ; } return [[x]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 198 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 90 / 107 / 1 / 198:  20%|█▉        | 198/1000 [18:39<1:15:35,  5.65s/it][Succeeded / Failed / Skipped / Total] 90 / 107 / 1 / 198:  20%|█▉        | 199/1000 [18:44<1:15:26,  5.65s/it][Succeeded / Failed / Skipped / Total] 91 / 107 / 1 / 199:  20%|█▉        | 199/1000 [18:44<1:15:26,  5.65s/it][Succeeded / Failed / Skipped / Total] 91 / 107 / 1 / 199:  20%|██        | 200/1000 [18:56<1:15:45,  5.68s/it][Succeeded / Failed / Skipped / Total] 92 / 107 / 1 / 200:  20%|██        | 200/1000 [18:56<1:15:45,  5.68s/it][Succeeded / Failed / Skipped / Total] 92 / 107 / 1 / 200:  20%|██        | 201/1000 [18:59<1:15:29,  5.67s/it][Succeeded / Failed / Skipped / Total] 92 / 108 / 1 / 201:  20%|██        | 201/1000 [18:59<1:15:29,  5.67s/it][Succeeded / Failed / Skipped / Total] 92 / 108 / 1 / 201:  20%|██        | 202/1000 [19:01<1:15:11,  5.65s/it][Succeeded / Failed / Skipped / Total] 92 / 109 / 1 / 202:  20%|██        | 202/1000 [19:01<1:15:11,  5.65s/it][Succeeded / Failed / Skipped / Total] 92 / 109 / 1 / 202:  20%|██        | 203/1000 [19:20<1:15:56,  5.72s/it][Succeeded / Failed / Skipped / Total] 92 / 110 / 1 / 203:  20%|██        | 203/1000 [19:20<1:15:56,  5.72s/it][Succeeded / Failed / Skipped / Total] 92 / 110 / 1 / 203:  20%|██        | 204/1000 [19:21<1:15:33,  5.70s/it]Create entries . --> [[[FAILED]]]

[[[[Adv]]]]: protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 199 ---------------------------------------------
Deletes the object identity . --> user primary key --> Socre: 1.0

[[[[Adv]]]]: protected void [[createObjectIdentity]] ( ObjectIdentity object , Sid [[owner]] ) { Long sidId = createOrRetrieveSidPrimaryKey ( [[owner]] , "True" == "True" ) ; Long [[classId]] = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , [[classId]] , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void [[fred]] ( ObjectIdentity object , Sid [[data]] ) { Long sidId = createOrRetrieveSidPrimaryKey ( [[data]] , "True" == "True" ) ; Long [[ted]] = createOrRetrieveClassPrimaryKey ( object . getType ( ) , "True" == "True" , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , [[ted]] , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 200 ---------------------------------------------
Returns a Matcher that matches any of the current WebEx exchange . --> Returns a new ServerWebExchangeMatcher . --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[anyExchange]] ( ) {
[[[[Nl]]]]: Matches any exchange

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[b]] ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 201 ---------------------------------------------
Saves the request . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[saveRequest]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void [[requests]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 202 ---------------------------------------------
Updates the object identity . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[updateObjectIdentity]] ( MutableAcl acl ) { Long [[parentId]] = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; [[parentId]] = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "[[True]]" == "[[True]]" ) ; int count = jdbcOperations . update ( [[updateObjectIdentity]] , [[parentId]] , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void [[suppose]] ( MutableAcl acl ) { Long [[a]] = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; [[a]] = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "[[author]]" == "[[author]]" ) ; int count = jdbcOperations . update ( [[suppose]] , [[a]] , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 203 ---------------------------------------------
Creates a new TextEncryptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[password]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence [[ln]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( stronger ( [[ln]] , salt ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
[Succeeded / Failed / Skipped / Total] 92 / 111 / 1 / 204:  20%|██        | 204/1000 [19:21<1:15:33,  5.70s/it][Succeeded / Failed / Skipped / Total] 92 / 111 / 1 / 204:  20%|██        | 205/1000 [19:28<1:15:30,  5.70s/it][Succeeded / Failed / Skipped / Total] 93 / 111 / 1 / 205:  20%|██        | 205/1000 [19:28<1:15:30,  5.70s/it][Succeeded / Failed / Skipped / Total] 93 / 111 / 1 / 205:  21%|██        | 206/1000 [19:29<1:15:07,  5.68s/it][Succeeded / Failed / Skipped / Total] 93 / 112 / 1 / 206:  21%|██        | 206/1000 [19:29<1:15:07,  5.68s/it][Succeeded / Failed / Skipped / Total] 93 / 112 / 1 / 206:  21%|██        | 207/1000 [19:29<1:14:40,  5.65s/it][Succeeded / Failed / Skipped / Total] 93 / 113 / 1 / 207:  21%|██        | 207/1000 [19:29<1:14:40,  5.65s/it][Succeeded / Failed / Skipped / Total] 93 / 113 / 1 / 207:  21%|██        | 208/1000 [19:42<1:15:01,  5.68s/it][Succeeded / Failed / Skipped / Total] 94 / 113 / 1 / 208:  21%|██        | 208/1000 [19:42<1:15:01,  5.68s/it][Succeeded / Failed / Skipped / Total] 94 / 113 / 1 / 208:  21%|██        | 209/1000 [19:49<1:15:01,  5.69s/it][Succeeded / Failed / Skipped / Total] 94 / 114 / 1 / 209:  21%|██        | 209/1000 [19:49<1:15:01,  5.69s/it][Succeeded / Failed / Skipped / Total] 94 / 114 / 1 / 209:  21%|██        | 210/1000 [19:54<1:14:52,  5.69s/it][Succeeded / Failed / Skipped / Total] 94 / 115 / 1 / 210:  21%|██        | 210/1000 [19:54<1:14:52,  5.69s/it][Succeeded / Failed / Skipped / Total] 94 / 115 / 1 / 210:  21%|██        | 211/1000 [19:59<1:14:45,  5.69s/it]--------------------------------------------- Result 204 ---------------------------------------------
Creates a text encryptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[text]] ( CharSequence [[password]] , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( standard ( [[password]] , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[type]] ( CharSequence [[object]] , CharSequence [[version]] ) { return new HexEncodingTextEncryptor ( standard ( [[object]] , [[version]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 205 ---------------------------------------------
Determines the target URL . --> Perform authentication . --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[determineTargetUrl]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String [[authentication]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[authentication]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 206 ---------------------------------------------
Returns a text encryptor --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[queryableText]] ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[b]] ( CharSequence password , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 207 ---------------------------------------------
Create a new WebExchangeMatcher for the given path patterns . --> [[[FAILED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[pathMatchers]] ( HttpMethod [[method]] , String ... [[patterns]] ) { List < ServerWebExchangeMatcher > [[matchers]] = new ArrayList <> ( [[patterns]] . length ) ; for ( String pattern : [[patterns]] ) { [[matchers]] . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , [[method]] ) ) ; } return new OrServerWebExchangeMatcher ( [[matchers]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[d]] ( HttpMethod [[file]] , String ... [[parameter]] ) { List < ServerWebExchangeMatcher > [[c]] = new ArrayList <> ( [[parameter]] . length ) ; for ( String pattern : [[parameter]] ) { [[c]] . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , [[file]] ) ) ; } return new OrServerWebExchangeMatcher ( [[c]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 208 ---------------------------------------------
Sets the target URL parameter . --> End position --> Socre: 1.0

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String [[targetUrlParameter]] ) { if ( [[targetUrlParameter]] != null ) { Assert . hasText ( [[targetUrlParameter]] , "targetUrlParameter cannot be empty" ) ; } this . [[targetUrlParameter]] = [[targetUrlParameter]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[end]] ( String [[i]] ) { if ( [[i]] != null ) { Assert . hasText ( [[i]] , "targetUrlParameter cannot be empty" ) ; } this . [[i]] = [[i]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 209 ---------------------------------------------
Determines the target URL . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest [[request]] , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[mail]] ( HttpServletRequest [[ed]] , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 210 ---------------------------------------------
Write headers to response . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeHeaders]] ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[allowFromValue]] = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[allowFromValue]] ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[allowFromValue]] != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[allowFromValue]] ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void [[declare]] ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String [[wait]] = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( [[wait]] ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( [[wait]] != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + [[wait]] ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 211 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 95 / 115 / 1 / 211:  21%|██        | 211/1000 [19:59<1:14:45,  5.69s/it][Succeeded / Failed / Skipped / Total] 95 / 115 / 1 / 211:  21%|██        | 212/1000 [20:02<1:14:28,  5.67s/it][Succeeded / Failed / Skipped / Total] 96 / 115 / 1 / 212:  21%|██        | 212/1000 [20:02<1:14:28,  5.67s/it][Succeeded / Failed / Skipped / Total] 96 / 115 / 1 / 212:  21%|██▏       | 213/1000 [20:04<1:14:09,  5.65s/it][Succeeded / Failed / Skipped / Total] 97 / 115 / 1 / 213:  21%|██▏       | 213/1000 [20:04<1:14:09,  5.65s/it][Succeeded / Failed / Skipped / Total] 97 / 115 / 1 / 213:  21%|██▏       | 214/1000 [20:10<1:14:04,  5.65s/it][Succeeded / Failed / Skipped / Total] 98 / 115 / 1 / 214:  21%|██▏       | 214/1000 [20:10<1:14:04,  5.65s/it][Succeeded / Failed / Skipped / Total] 98 / 115 / 1 / 214:  22%|██▏       | 215/1000 [20:11<1:13:41,  5.63s/it][Succeeded / Failed / Skipped / Total] 98 / 116 / 1 / 215:  22%|██▏       | 215/1000 [20:11<1:13:41,  5.63s/it][Succeeded / Failed / Skipped / Total] 98 / 116 / 1 / 215:  22%|██▏       | 216/1000 [20:21<1:13:54,  5.66s/it][Succeeded / Failed / Skipped / Total] 99 / 116 / 1 / 216:  22%|██▏       | 216/1000 [20:21<1:13:54,  5.66s/it][Succeeded / Failed / Skipped / Total] 99 / 116 / 1 / 216:  22%|██▏       | 217/1000 [20:25<1:13:42,  5.65s/it][Succeeded / Failed / Skipped / Total] 99 / 117 / 1 / 217:  22%|██▏       | 217/1000 [20:25<1:13:42,  5.65s/it][Succeeded / Failed / Skipped / Total] 99 / 117 / 1 / 217:  22%|██▏       | 218/1000 [20:33<1:13:44,  5.66s/it][Succeeded / Failed / Skipped / Total] 99 / 118 / 1 / 218:  22%|██▏       | 218/1000 [20:33<1:13:44,  5.66s/it][Succeeded / Failed / Skipped / Total] 99 / 118 / 1 / 218:  22%|██▏       | 219/1000 [20:38<1:13:37,  5.66s/it]Gets the Directory with the immediate parent directory . --> Index the given block . --> Socre: 1.0

[[[[Adv]]]]: private Directory [[getDirectoryWithImmediateParentPopulated]] ( final Long [[id]] ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { [[id]] } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int [[rowNumber]] ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory [[index]] ( final Long [[block]] ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { [[block]] } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int [[j]] ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 212 ---------------------------------------------
Build the distinguished name . --> returns a DistinguishedName --> Socre: 1.0

[[[[Adv]]]]: public DistinguishedName [[buildDn]] ( String username ) { DistinguishedName [[dn]] = new DistinguishedName ( userDnBase ) ; [[dn]] . add ( usernameAttribute , username ) ; return [[dn]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName [[test]] ( String username ) { DistinguishedName [[z]] = new DistinguishedName ( userDnBase ) ; [[z]] . add ( usernameAttribute , username ) ; return [[z]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 213 ---------------------------------------------
Creates a map of shared objects . --> Generate a group of groups . --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > [[sharedObjects]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[sharedObjects]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[sharedObjects]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[sharedObjects]] . put ( ApplicationContext . class , context ) ; [[sharedObjects]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[sharedObjects]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[sharedObjects]] ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[group]] ( ) { Map < Class < ? extends Object > , Object > [[string]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[string]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[string]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[string]] . put ( ApplicationContext . class , context ) ; [[string]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[string]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[string]] ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 214 ---------------------------------------------
Internal parse method . --> Utility routine for looping --> Socre: 1.0

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String value , DateFormat [ ] formats ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < formats . length ) ; i ++ ) { try { date = formats [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[loop]] ( String value , DateFormat [ ] formats ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < formats . length ) ; i ++ ) { try { date = formats [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 215 ---------------------------------------------
Get current date --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long [[now]] = System . currentTimeMillis ( ) ; if ( ( [[now]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[now]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[now]] ; currentDate = format . format ( new Date ( [[now]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[http]] ( ) { long [[day]] = System . currentTimeMillis ( ) ; if ( ( [[day]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[day]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[day]] ; currentDate = format . format ( new Date ( [[day]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 216 ---------------------------------------------
Updates cache . --> This method is used for testing purposes --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap cache , Object key , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , [[value]] ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[test]] ( HashMap cache , Object key , Object [[frame]] ) { if ( [[frame]] == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , [[frame]] ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 217 ---------------------------------------------
Set authentication details . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[password]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 218 ---------------------------------------------
Determines the security name for the subject . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String userSecurityName = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[fix]] ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String userSecurityName = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 219 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 99 / 119 / 1 / 219:  22%|██▏       | 219/1000 [20:38<1:13:37,  5.66s/it][Succeeded / Failed / Skipped / Total] 99 / 119 / 1 / 219:  22%|██▏       | 220/1000 [20:39<1:13:13,  5.63s/it][Succeeded / Failed / Skipped / Total] 100 / 119 / 1 / 220:  22%|██▏       | 220/1000 [20:39<1:13:13,  5.63s/it][Succeeded / Failed / Skipped / Total] 100 / 119 / 1 / 220:  22%|██▏       | 221/1000 [20:39<1:12:48,  5.61s/it][Succeeded / Failed / Skipped / Total] 101 / 119 / 1 / 221:  22%|██▏       | 221/1000 [20:39<1:12:48,  5.61s/it][Succeeded / Failed / Skipped / Total] 101 / 119 / 1 / 221:  22%|██▏       | 222/1000 [21:00<1:13:37,  5.68s/it][Succeeded / Failed / Skipped / Total] 101 / 120 / 1 / 222:  22%|██▏       | 222/1000 [21:00<1:13:37,  5.68s/it][Succeeded / Failed / Skipped / Total] 101 / 120 / 1 / 222:  22%|██▏       | 223/1000 [21:00<1:13:12,  5.65s/it][Succeeded / Failed / Skipped / Total] 101 / 120 / 2 / 223:  22%|██▏       | 223/1000 [21:00<1:13:12,  5.65s/it][Succeeded / Failed / Skipped / Total] 101 / 120 / 2 / 223:  22%|██▏       | 224/1000 [21:01<1:12:50,  5.63s/it][Succeeded / Failed / Skipped / Total] 101 / 121 / 2 / 224:  22%|██▏       | 224/1000 [21:01<1:12:50,  5.63s/it][Succeeded / Failed / Skipped / Total] 101 / 121 / 2 / 224:  22%|██▎       | 225/1000 [21:07<1:12:46,  5.63s/it][Succeeded / Failed / Skipped / Total] 101 / 122 / 2 / 225:  22%|██▎       | 225/1000 [21:07<1:12:46,  5.63s/it][Succeeded / Failed / Skipped / Total] 101 / 122 / 2 / 225:  23%|██▎       | 226/1000 [21:09<1:12:26,  5.62s/it]Configure the jaas using the configuration . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[configureJaasUsingLoop]] ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void [[option]] ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 220 ---------------------------------------------
Build the Group LDAP --> Build the GroupDn --> Socre: 1.0

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String [[group]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[group]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String [[build]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[build]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 221 ---------------------------------------------
Returns a list of webSphere groups . --> Creates a list of strings --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[getWebSphereGroups]] ( final String [[securityName]] ) { Context [[ic]] = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[object]] ( final String [[error]] ) { Context [[command]] = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 222 ---------------------------------------------
Gets the filters matching the given request . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Filter > [[getFilters]] ( HttpServletRequest [[request]] ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( [[request]] ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > [[by]] ( HttpServletRequest [[ram]] ) { for ( SecurityFilterChain chain : filterChains ) { if ( chain . matches ( [[ram]] ) ) { return chain . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 223 ---------------------------------------------
Returns all filters matching the specified URL --> [[[SKIPPED]]]

[[[[Adv]]]]: public List < Filter > getFilters ( String url ) { return getFilters ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 224 ---------------------------------------------
Copy authentication details from source to destination . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[main]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) dest ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 225 ---------------------------------------------
Throws an exception if the session is exceeded . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[allowableSessionsExceeded]] ( List < SessionInformation > sessions , int allowableSessions , SessionRegistry [[registry]] ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void [[begin]] ( List < SessionInformation > sessions , int allowableSessions , SessionRegistry [[es]] ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( sessions == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 226 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 101 / 123 / 2 / 226:  23%|██▎       | 226/1000 [21:09<1:12:26,  5.62s/it][Succeeded / Failed / Skipped / Total] 101 / 123 / 2 / 226:  23%|██▎       | 227/1000 [21:18<1:12:34,  5.63s/it][Succeeded / Failed / Skipped / Total] 101 / 124 / 2 / 227:  23%|██▎       | 227/1000 [21:18<1:12:34,  5.63s/it][Succeeded / Failed / Skipped / Total] 101 / 124 / 2 / 227:  23%|██▎       | 228/1000 [21:24<1:12:30,  5.64s/it][Succeeded / Failed / Skipped / Total] 101 / 125 / 2 / 228:  23%|██▎       | 228/1000 [21:24<1:12:30,  5.64s/it][Succeeded / Failed / Skipped / Total] 101 / 125 / 2 / 228:  23%|██▎       | 229/1000 [21:31<1:12:28,  5.64s/it][Succeeded / Failed / Skipped / Total] 101 / 126 / 2 / 229:  23%|██▎       | 229/1000 [21:31<1:12:28,  5.64s/it][Succeeded / Failed / Skipped / Total] 101 / 126 / 2 / 229:  23%|██▎       | 230/1000 [21:42<1:12:39,  5.66s/it][Succeeded / Failed / Skipped / Total] 101 / 127 / 2 / 230:  23%|██▎       | 230/1000 [21:42<1:12:39,  5.66s/it][Succeeded / Failed / Skipped / Total] 101 / 127 / 2 / 230:  23%|██▎       | 231/1000 [21:46<1:12:28,  5.65s/it][Succeeded / Failed / Skipped / Total] 101 / 128 / 2 / 231:  23%|██▎       | 231/1000 [21:46<1:12:28,  5.65s/it][Succeeded / Failed / Skipped / Total] 101 / 128 / 2 / 231:  23%|██▎       | 232/1000 [21:47<1:12:09,  5.64s/it][Succeeded / Failed / Skipped / Total] 101 / 129 / 2 / 232:  23%|██▎       | 232/1000 [21:47<1:12:09,  5.64s/it][Succeeded / Failed / Skipped / Total] 101 / 129 / 2 / 232:  23%|██▎       | 233/1000 [21:59<1:12:23,  5.66s/it]Change the password for the current user . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[changePassword]] ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void [[main]] ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 227 ---------------------------------------------
Get the required web application context . --> [[[FAILED]]]

[[[[Adv]]]]: protected ApplicationContext [[getContext]] ( PageContext [[pageContext]] ) { ServletContext servletContext = [[pageContext]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext [[instance]] ( PageContext [[environment]] ) { ServletContext servletContext = [[environment]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 228 ---------------------------------------------
Sets session attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[of]] ( Map < String , Object > [[element]] ) { notNull ( [[element]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[element]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 229 ---------------------------------------------
Adds a list of filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > [[filters]] ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[main]] ( List < Filter > [[b]] ) { Validate . notNull ( [[main]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[main]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 230 ---------------------------------------------
Creates a basic authentication scheme with the specified user name and password . --> [[[FAILED]]]

[[[[Adv]]]]: public AuthenticationScheme [[basic]] ( String userName , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme [[authentication]] ( String userName , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 231 ---------------------------------------------
Registers the given filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( Filter [[filter]] , Filter ... [[additionalFilters]] ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( [[additionalFilters]] != null ) { Collections . addAll ( RestAssured . filters , [[additionalFilters]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[filter]] ( Filter [[name]] , Filter ... [[channel]] ) { Validate . notNull ( [[name]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[name]] ) ; if ( [[channel]] != null ) { Collections . addAll ( RestAssured . filters , [[channel]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 232 ---------------------------------------------
Returns the full DN of the specified distinguished name . --> [[[FAILED]]]

[[[[Adv]]]]: public static DistinguishedName [[getFullDn]] ( DistinguishedName [[dn]] , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( [[dn]] . contains ( baseDn ) ) { return [[dn]] ; } baseDn . append ( [[dn]] ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName [[extension]] ( DistinguishedName [[x]] , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( [[x]] . contains ( baseDn ) ) { return [[x]] ; } baseDn . append ( [[x]] ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 233 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 101 / 130 / 2 / 233:  23%|██▎       | 233/1000 [21:59<1:12:23,  5.66s/it][Succeeded / Failed / Skipped / Total] 101 / 130 / 2 / 233:  23%|██▎       | 234/1000 [22:04<1:12:15,  5.66s/it][Succeeded / Failed / Skipped / Total] 101 / 131 / 2 / 234:  23%|██▎       | 234/1000 [22:04<1:12:15,  5.66s/it][Succeeded / Failed / Skipped / Total] 101 / 131 / 2 / 234:  24%|██▎       | 235/1000 [22:04<1:11:52,  5.64s/it][Succeeded / Failed / Skipped / Total] 102 / 131 / 2 / 235:  24%|██▎       | 235/1000 [22:04<1:11:52,  5.64s/it][Succeeded / Failed / Skipped / Total] 102 / 131 / 2 / 235:  24%|██▎       | 236/1000 [22:11<1:11:50,  5.64s/it][Succeeded / Failed / Skipped / Total] 103 / 131 / 2 / 236:  24%|██▎       | 236/1000 [22:11<1:11:50,  5.64s/it][Succeeded / Failed / Skipped / Total] 104 / 131 / 2 / 237:  24%|██▎       | 237/1000 [22:11<1:11:26,  5.62s/it][Succeeded / Failed / Skipped / Total] 104 / 131 / 2 / 237:  24%|██▍       | 238/1000 [22:11<1:11:03,  5.60s/it][Succeeded / Failed / Skipped / Total] 104 / 131 / 3 / 238:  24%|██▍       | 238/1000 [22:11<1:11:03,  5.60s/it][Succeeded / Failed / Skipped / Total] 105 / 131 / 3 / 239:  24%|██▍       | 239/1000 [22:18<1:11:02,  5.60s/it][Succeeded / Failed / Skipped / Total] 105 / 131 / 3 / 239:  24%|██▍       | 240/1000 [22:19<1:10:40,  5.58s/it][Succeeded / Failed / Skipped / Total] 106 / 131 / 3 / 240:  24%|██▍       | 240/1000 [22:19<1:10:40,  5.58s/it]Specify the proxy for the given URI . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[proxy]] ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[proxy]] ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void [[call]] ( URI [[log]] ) { if ( [[log]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[call]] ( new ProxySpecification ( [[log]] . getHost ( ) , [[log]] . getPort ( ) , [[log]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 234 ---------------------------------------------
Creates a basic authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[basic]] ( String userName , String [[password]] ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[password]] ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[library]] ( String userName , String [[domain]] ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[domain]] ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 235 ---------------------------------------------
Creates a new authentication scheme with the given username and password . --> Create a new FormAuth scheme --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme [[form]] ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[scheme]] = new FormAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setConfig ( config ) ; return [[scheme]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme [[d]] ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[z]] = new FormAuthScheme ( ) ; [[z]] . setUserName ( userName ) ; [[z]] . setPassword ( password ) ; [[z]] . setConfig ( config ) ; return [[z]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 236 ---------------------------------------------
Sets the encoding charset to use . --> Configure Encoder configuration . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[array]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 237 ---------------------------------------------
Configured config with redirect . --> Default configuration for RestAssociation --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredConfig redirect ( RedirectConfig [[redirectConfig]] ) { notNull ( [[redirectConfig]] , "Redirect config" ) ; return new RestAssuredConfig ( [[redirectConfig]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig redirect ( RedirectConfig [[string]] ) { notNull ( [[string]] , "Redirect config" ) ; return new RestAssuredConfig ( [[string]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 238 ---------------------------------------------
Configure Jackson ObjectMapperFactory --> [[[SKIPPED]]]

[[[[Adv]]]]: public ObjectMapperConfig jaxbObjectMapperFactory ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 239 ---------------------------------------------
Sets the default object mapper type . --> returns a new ObjectMapper --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[defaultObjectMapperType]] ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , [[defaultObjectMapperType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig [[generator]] ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , [[generator]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 240 ---------------------------------------------
Sets the log config . --> Create a new instance of RestAssuredMockConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig logConfig ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[file]] ( LogConfig logConfig ) { notNull ( [[file]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[file]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 241 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 107 / 131 / 3 / 241:  24%|██▍       | 241/1000 [22:26<1:10:41,  5.59s/it][Succeeded / Failed / Skipped / Total] 107 / 131 / 3 / 241:  24%|██▍       | 242/1000 [22:35<1:10:44,  5.60s/it][Succeeded / Failed / Skipped / Total] 108 / 131 / 3 / 242:  24%|██▍       | 242/1000 [22:35<1:10:44,  5.60s/it][Succeeded / Failed / Skipped / Total] 108 / 131 / 3 / 242:  24%|██▍       | 243/1000 [22:36<1:10:26,  5.58s/it][Succeeded / Failed / Skipped / Total] 109 / 131 / 3 / 243:  24%|██▍       | 243/1000 [22:36<1:10:26,  5.58s/it][Succeeded / Failed / Skipped / Total] 109 / 131 / 3 / 243:  24%|██▍       | 244/1000 [22:44<1:10:27,  5.59s/it][Succeeded / Failed / Skipped / Total] 110 / 131 / 3 / 244:  24%|██▍       | 244/1000 [22:44<1:10:27,  5.59s/it][Succeeded / Failed / Skipped / Total] 110 / 131 / 3 / 244:  24%|██▍       | 245/1000 [22:49<1:10:19,  5.59s/it][Succeeded / Failed / Skipped / Total] 110 / 132 / 3 / 245:  24%|██▍       | 245/1000 [22:49<1:10:19,  5.59s/it][Succeeded / Failed / Skipped / Total] 110 / 132 / 3 / 245:  25%|██▍       | 246/1000 [22:51<1:10:03,  5.58s/it][Succeeded / Failed / Skipped / Total] 110 / 133 / 3 / 246:  25%|██▍       | 246/1000 [22:51<1:10:03,  5.58s/it][Succeeded / Failed / Skipped / Total] 110 / 133 / 3 / 246:  25%|██▍       | 247/1000 [22:51<1:09:42,  5.55s/it][Succeeded / Failed / Skipped / Total] 111 / 133 / 3 / 247:  25%|██▍       | 247/1000 [22:51<1:09:42,  5.55s/it][Succeeded / Failed / Skipped / Total] 111 / 133 / 3 / 247:  25%|██▍       | 248/1000 [22:52<1:09:20,  5.53s/it][Succeeded / Failed / Skipped / Total] 111 / 133 / 4 / 248:  25%|██▍       | 248/1000 [22:52<1:09:20,  5.53s/it][Succeeded / Failed / Skipped / Total] 111 / 133 / 4 / 248:  25%|██▍       | 249/1000 [22:57<1:09:14,  5.53s/it]Sets the rest of the session config . --> Create a new instance of RestAssured MockConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sessionConfig]] ( SessionConfig sessionConfig ) { notNull ( [[sessionConfig]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[sessionConfig]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[foo]] ( SessionConfig sessionConfig ) { notNull ( [[foo]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[foo]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 242 ---------------------------------------------
Sets the RestAssuredMock configuration . --> Create a new RestAssured MockConfig object --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig jsonConfig ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[foo]] ( JsonConfig jsonConfig ) { notNull ( [[foo]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[foo]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 243 ---------------------------------------------
Sets the restured mapper config . --> Create an instance of RestAssuredMockConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig [[objectMapperConfig]] ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[i]] ( ObjectMapperConfig [[ia]] ) { notNull ( [[i]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[i]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 244 ---------------------------------------------
Sets the mock encoder config . --> Create a RestAssuredMock object . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[encoderConfig]] ( EncoderConfig encoderConfig ) { notNull ( [[encoderConfig]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[encoderConfig]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[element]] ( EncoderConfig encoderConfig ) { notNull ( [[element]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[element]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 245 ---------------------------------------------
Creates an NTLMuth scheme for the given user name and password . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String [[password]] , String workstation , String domain ) { final NTLMAuthScheme scheme = new NTLMAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[password]] ) ; scheme . setWorkstation ( workstation ) ; scheme . setDomain ( domain ) ; return scheme ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String [[message]] , String workstation , String domain ) { final NTLMAuthScheme scheme = new NTLMAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[message]] ) ; scheme . setWorkstation ( workstation ) ; scheme . setDomain ( domain ) ; return scheme ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 246 ---------------------------------------------
Sets the RestAssured configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig [[xmlConfig]] ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[object]] ( XmlConfig [[itself]] ) { notNull ( [[object]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[object]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 247 ---------------------------------------------
Sets the HTTP header configuration . --> Creates a new instance of RestAssured MockConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[headerConfig]] ( HeaderConfig headerConfig ) { notNull ( [[headerConfig]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[headerConfig]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[client]] ( HeaderConfig headerConfig ) { notNull ( [[client]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[client]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 248 ---------------------------------------------
Sets a mock mapper configuration . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig multiPartConfig ( MultiPartConfig multiPartConfig ) { notNull ( multiPartConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 249 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 112 / 133 / 4 / 249:  25%|██▍       | 249/1000 [22:57<1:09:14,  5.53s/it][Succeeded / Failed / Skipped / Total] 112 / 133 / 4 / 249:  25%|██▌       | 250/1000 [23:00<1:09:00,  5.52s/it][Succeeded / Failed / Skipped / Total] 113 / 133 / 4 / 250:  25%|██▌       | 250/1000 [23:00<1:09:00,  5.52s/it][Succeeded / Failed / Skipped / Total] 113 / 133 / 4 / 250:  25%|██▌       | 251/1000 [23:01<1:08:42,  5.50s/it][Succeeded / Failed / Skipped / Total] 114 / 133 / 4 / 251:  25%|██▌       | 251/1000 [23:01<1:08:42,  5.50s/it][Succeeded / Failed / Skipped / Total] 114 / 133 / 4 / 251:  25%|██▌       | 252/1000 [23:05<1:08:32,  5.50s/it][Succeeded / Failed / Skipped / Total] 115 / 133 / 4 / 252:  25%|██▌       | 252/1000 [23:05<1:08:32,  5.50s/it][Succeeded / Failed / Skipped / Total] 115 / 133 / 4 / 252:  25%|██▌       | 253/1000 [23:06<1:08:13,  5.48s/it][Succeeded / Failed / Skipped / Total] 115 / 134 / 4 / 253:  25%|██▌       | 253/1000 [23:06<1:08:13,  5.48s/it][Succeeded / Failed / Skipped / Total] 115 / 134 / 4 / 253:  25%|██▌       | 254/1000 [23:08<1:07:58,  5.47s/it][Succeeded / Failed / Skipped / Total] 115 / 135 / 4 / 254:  25%|██▌       | 254/1000 [23:08<1:07:58,  5.47s/it][Succeeded / Failed / Skipped / Total] 115 / 135 / 4 / 254:  26%|██▌       | 255/1000 [23:09<1:07:38,  5.45s/it]Sets the RestAssuredM config . --> Create a RestAssuredMockConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[asyncConfig]] ( AsyncConfig asyncConfig ) { notNull ( [[asyncConfig]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[asyncConfig]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[element]] ( AsyncConfig asyncConfig ) { notNull ( [[element]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[element]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 250 ---------------------------------------------
Create a new RestAssuredM configured for the given param config . --> Creates an instance configured for RestAssociation configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[paramConfig]] ( MockMvcParamConfig paramConfig ) { notNull ( [[paramConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[paramConfig]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[bus]] ( MockMvcParamConfig paramConfig ) { notNull ( [[bus]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , [[bus]] , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 251 ---------------------------------------------
Create a new RestAssignedMock configured with the given mock configuration . --> Create a new RESTAssured MvcConfig object . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig [[mockMvcConfig]] ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig [[array]] ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 252 ---------------------------------------------
Sets the restured matcher configuration . --> End configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[matcherConfig]] ( MatcherConfig matcherConfig ) { notNull ( [[matcherConfig]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[matcherConfig]] ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[end]] ( MatcherConfig matcherConfig ) { notNull ( [[end]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[end]] ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 253 ---------------------------------------------
Allow all hostnames to be allowed . --> [[[FAILED]]]

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[group]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 254 ---------------------------------------------
Prints the response as a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[print]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream [[stream]] , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; [[stream]] . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String [[builder]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream [[master]] , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; [[master]] . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 255 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 116 / 135 / 4 / 255:  26%|██▌       | 255/1000 [23:09<1:07:38,  5.45s/it][Succeeded / Failed / Skipped / Total] 116 / 135 / 4 / 255:  26%|██▌       | 256/1000 [23:21<1:07:53,  5.48s/it][Succeeded / Failed / Skipped / Total] 117 / 135 / 4 / 256:  26%|██▌       | 256/1000 [23:21<1:07:53,  5.48s/it][Succeeded / Failed / Skipped / Total] 117 / 135 / 4 / 256:  26%|██▌       | 257/1000 [23:35<1:08:11,  5.51s/it][Succeeded / Failed / Skipped / Total] 117 / 136 / 4 / 257:  26%|██▌       | 257/1000 [23:35<1:08:11,  5.51s/it][Succeeded / Failed / Skipped / Total] 117 / 136 / 4 / 257:  26%|██▌       | 258/1000 [23:50<1:08:33,  5.54s/it][Succeeded / Failed / Skipped / Total] 117 / 137 / 4 / 258:  26%|██▌       | 258/1000 [23:50<1:08:33,  5.54s/it][Succeeded / Failed / Skipped / Total] 117 / 137 / 4 / 258:  26%|██▌       | 259/1000 [23:51<1:08:16,  5.53s/it][Succeeded / Failed / Skipped / Total] 117 / 138 / 4 / 259:  26%|██▌       | 259/1000 [23:51<1:08:16,  5.53s/it][Succeeded / Failed / Skipped / Total] 117 / 138 / 4 / 259:  26%|██▌       | 260/1000 [23:56<1:08:08,  5.52s/it][Succeeded / Failed / Skipped / Total] 117 / 139 / 4 / 260:  26%|██▌       | 260/1000 [23:56<1:08:08,  5.52s/it][Succeeded / Failed / Skipped / Total] 117 / 139 / 4 / 260:  26%|██▌       | 261/1000 [23:57<1:07:50,  5.51s/it][Succeeded / Failed / Skipped / Total] 117 / 140 / 4 / 261:  26%|██▌       | 261/1000 [23:57<1:07:50,  5.51s/it][Succeeded / Failed / Skipped / Total] 117 / 140 / 4 / 261:  26%|██▌       | 262/1000 [24:02<1:07:44,  5.51s/it][Succeeded / Failed / Skipped / Total] 118 / 140 / 4 / 262:  26%|██▌       | 262/1000 [24:02<1:07:44,  5.51s/it][Succeeded / Failed / Skipped / Total] 118 / 140 / 4 / 262:  26%|██▋       | 263/1000 [24:09<1:07:41,  5.51s/it]Declare the XML path configuration . --> Create a new XMLPathConfig instance --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[library]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 256 ---------------------------------------------
Set the proxy to use . --> Start a new thread --> Socre: 1.0

[[[[Adv]]]]: public void [[setProxy]] ( String host , int port , String [[scheme]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , [[scheme]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[thread]] ( String host , int port , String [[end]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , [[end]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 257 ---------------------------------------------
Sets the headers . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setHeaders]] ( Map < ? , ? > headers ) { this . [[defaultRequestHeaders]] . clear ( ) ; if ( headers == null ) return ; for ( Object key : headers . keySet ( ) ) { Object val = headers . get ( key ) ; if ( val == null ) continue ; this . [[defaultRequestHeaders]] . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void [[after]] ( Map < ? , ? > headers ) { this . [[bit]] . clear ( ) ; if ( headers == null ) return ; for ( Object key : headers . keySet ( ) ) { Object val = headers . get ( key ) ; if ( val == null ) continue ; this . [[bit]] . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 258 ---------------------------------------------
Declares a namespace with the specified prefix . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig declaredNamespace ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > [[updatedNamespaces]] = new HashMap < String , String > ( declaredNamespaces ) ; [[updatedNamespaces]] . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[updatedNamespaces]] , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig declaredNamespace ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > [[by]] = new HashMap < String , String > ( declaredNamespaces ) ; [[by]] . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[by]] , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 259 ---------------------------------------------
Sets the control name . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String controlName ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . [[controlName]] = [[controlName]] ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[a]] ( String controlName ) { Validate . notEmpty ( [[a]] , "Control name cannot be empty" ) ; this . [[date]] = [[a]] ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 260 ---------------------------------------------
Sets a multi - part header . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String name , String value ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[at]] ( String name , String value ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 261 ---------------------------------------------
Issues a HTTP request . --> [[[FAILED]]]

[[[[Adv]]]]: public Object request ( String method , boolean hasBody , Closure [[configClosure]] ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , [[configClosure]] ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object request ( String method , boolean hasBody , Closure [[call]] ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , [[call]] ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 262 ---------------------------------------------
Reset the configuration . --> Clean up resources --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[filter]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 263 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 119 / 140 / 4 / 263:  26%|██▋       | 263/1000 [24:09<1:07:41,  5.51s/it][Succeeded / Failed / Skipped / Total] 119 / 140 / 4 / 263:  26%|██▋       | 264/1000 [24:20<1:07:52,  5.53s/it][Succeeded / Failed / Skipped / Total] 119 / 141 / 4 / 264:  26%|██▋       | 264/1000 [24:20<1:07:52,  5.53s/it][Succeeded / Failed / Skipped / Total] 119 / 141 / 4 / 264:  26%|██▋       | 265/1000 [24:23<1:07:38,  5.52s/it][Succeeded / Failed / Skipped / Total] 119 / 142 / 4 / 265:  26%|██▋       | 265/1000 [24:23<1:07:38,  5.52s/it][Succeeded / Failed / Skipped / Total] 119 / 142 / 4 / 265:  27%|██▋       | 266/1000 [24:27<1:07:28,  5.52s/it][Succeeded / Failed / Skipped / Total] 119 / 143 / 4 / 266:  27%|██▋       | 266/1000 [24:27<1:07:28,  5.52s/it][Succeeded / Failed / Skipped / Total] 119 / 143 / 4 / 266:  27%|██▋       | 267/1000 [24:31<1:07:19,  5.51s/it][Succeeded / Failed / Skipped / Total] 119 / 144 / 4 / 267:  27%|██▋       | 267/1000 [24:31<1:07:19,  5.51s/it][Succeeded / Failed / Skipped / Total] 119 / 144 / 4 / 267:  27%|██▋       | 268/1000 [24:35<1:07:09,  5.50s/it][Succeeded / Failed / Skipped / Total] 119 / 145 / 4 / 268:  27%|██▋       | 268/1000 [24:35<1:07:09,  5.50s/it][Succeeded / Failed / Skipped / Total] 119 / 145 / 4 / 268:  27%|██▋       | 269/1000 [24:40<1:07:02,  5.50s/it][Succeeded / Failed / Skipped / Total] 119 / 146 / 4 / 269:  27%|██▋       | 269/1000 [24:40<1:07:02,  5.50s/it][Succeeded / Failed / Skipped / Total] 119 / 146 / 4 / 269:  27%|██▋       | 270/1000 [24:41<1:06:46,  5.49s/it][Succeeded / Failed / Skipped / Total] 119 / 147 / 4 / 270:  27%|██▋       | 270/1000 [24:41<1:06:46,  5.49s/it][Succeeded / Failed / Skipped / Total] 119 / 147 / 4 / 270:  27%|██▋       | 271/1000 [24:46<1:06:38,  5.48s/it][Succeeded / Failed / Skipped / Total] 119 / 148 / 4 / 271:  27%|██▋       | 271/1000 [24:46<1:06:38,  5.48s/it][Succeeded / Failed / Skipped / Total] 119 / 148 / 4 / 271:  27%|██▋       | 272/1000 [24:49<1:06:25,  5.47s/it]Sets the response header . --> Sets alternative headers . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder [[setHeader]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder [[alt]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 264 ---------------------------------------------
Build the REST response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response [[build]] ( ) { final int [[statusCode]] = restAssuredResponse . statusCode ( ) ; if ( [[statusCode]] < 100 || [[statusCode]] >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , [[statusCode]] ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[text]] ( ) { final int [[i]] = restAssuredResponse . statusCode ( ) ; if ( [[i]] < 100 || [[i]] >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , [[i]] ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 265 ---------------------------------------------
Sets the basic authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[basic]] ( String host , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[builder]] ( String host , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 266 ---------------------------------------------
Create a new Headers object based on the specified header . --> [[[FAILED]]]

[[[[Adv]]]]: public static Headers [[headers]] ( Header header , Header ... additionalHeaders ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( additionalHeaders != null ) { Collections . addAll ( headerList , additionalHeaders ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers [[heap]] ( Header header , Header ... additionalHeaders ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( additionalHeaders != null ) { Collections . addAll ( headerList , additionalHeaders ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 267 ---------------------------------------------
Sets the NTLM credentials . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[ntlm]] ( String host , int port , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[build]] ( String host , int port , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 268 ---------------------------------------------
Matches a cookie in the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > valueMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , valueMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[query]] ( Matcher < ? super String > valueMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , valueMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
Applies a cookie to the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[comment]] ( Matcher < ? super String > [[commentMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[commentMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[since]] ( Matcher < ? super String > [[label]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[label]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 270 ---------------------------------------------
Creates a cookieMatcher that matches expiry date . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[b]] ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
Creates a cookie matching the given domain matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > [[domainMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[domainMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[log]] ( Matcher < ? super String > [[list]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[list]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
[Succeeded / Failed / Skipped / Total] 119 / 149 / 4 / 272:  27%|██▋       | 272/1000 [24:49<1:06:25,  5.47s/it][Succeeded / Failed / Skipped / Total] 119 / 149 / 4 / 272:  27%|██▋       | 273/1000 [24:57<1:06:27,  5.48s/it][Succeeded / Failed / Skipped / Total] 119 / 150 / 4 / 273:  27%|██▋       | 273/1000 [24:57<1:06:27,  5.48s/it][Succeeded / Failed / Skipped / Total] 119 / 150 / 4 / 273:  27%|██▋       | 274/1000 [24:58<1:06:11,  5.47s/it][Succeeded / Failed / Skipped / Total] 119 / 151 / 4 / 274:  27%|██▋       | 274/1000 [24:58<1:06:11,  5.47s/it][Succeeded / Failed / Skipped / Total] 119 / 151 / 4 / 274:  28%|██▊       | 275/1000 [25:00<1:05:54,  5.46s/it][Succeeded / Failed / Skipped / Total] 119 / 152 / 4 / 275:  28%|██▊       | 275/1000 [25:00<1:05:54,  5.46s/it][Succeeded / Failed / Skipped / Total] 119 / 152 / 4 / 275:  28%|██▊       | 276/1000 [25:02<1:05:42,  5.45s/it][Succeeded / Failed / Skipped / Total] 119 / 153 / 4 / 276:  28%|██▊       | 276/1000 [25:02<1:05:42,  5.45s/it][Succeeded / Failed / Skipped / Total] 119 / 153 / 4 / 276:  28%|██▊       | 277/1000 [25:16<1:05:57,  5.47s/it][Succeeded / Failed / Skipped / Total] 119 / 154 / 4 / 277:  28%|██▊       | 277/1000 [25:16<1:05:57,  5.47s/it][Succeeded / Failed / Skipped / Total] 119 / 154 / 4 / 277:  28%|██▊       | 278/1000 [25:20<1:05:48,  5.47s/it][Succeeded / Failed / Skipped / Total] 119 / 155 / 4 / 278:  28%|██▊       | 278/1000 [25:20<1:05:48,  5.47s/it][Succeeded / Failed / Skipped / Total] 119 / 155 / 4 / 278:  28%|██▊       | 279/1000 [25:20<1:05:30,  5.45s/it][Succeeded / Failed / Skipped / Total] 119 / 156 / 4 / 279:  28%|██▊       | 279/1000 [25:20<1:05:30,  5.45s/it][Succeeded / Failed / Skipped / Total] 119 / 156 / 4 / 279:  28%|██▊       | 280/1000 [25:22<1:05:14,  5.44s/it][Succeeded / Failed / Skipped / Total] 119 / 157 / 4 / 280:  28%|██▊       | 280/1000 [25:22<1:05:14,  5.44s/it][Succeeded / Failed / Skipped / Total] 119 / 157 / 4 / 280:  28%|██▊       | 281/1000 [25:23<1:04:57,  5.42s/it][Succeeded / Failed / Skipped / Total] 120 / 157 / 4 / 281:  28%|██▊       | 281/1000 [25:23<1:04:57,  5.42s/it][Succeeded / Failed / Skipped / Total] 120 / 157 / 4 / 281:  28%|██▊       | 282/1000 [25:26<1:04:46,  5.41s/it][Succeeded / Failed / Skipped / Total] 121 / 157 / 4 / 282:  28%|██▊       | 282/1000 [25:26<1:04:46,  5.41s/it][Succeeded / Failed / Skipped / Total] 121 / 157 / 4 / 282:  28%|██▊       | 283/1000 [25:27<1:04:28,  5.40s/it]--------------------------------------------- Result 272 ---------------------------------------------
Applies a cookie to the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[path]] ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[test]] ( Matcher < ? super String > [[length]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[length]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 273 ---------------------------------------------
Convenience method to match http only . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > [[httpOnlyMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[httpOnlyMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[name]] ( Matcher < ? super Boolean > [[i]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[i]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
Matches the given cookie against the secured cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[secured]] ( Matcher < ? super Boolean > securedMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , securedMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[end]] ( Matcher < ? super Boolean > securedMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , securedMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 275 ---------------------------------------------
Applies the version to cookieMatcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[client]] ( Matcher < ? super Integer > [[extension]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[extension]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 276 ---------------------------------------------
Applies a cookie to the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[log]] ( Matcher < ? super Integer > [[field]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[field]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 277 ---------------------------------------------
Returns a proxy specification with the specified host name . --> [[[FAILED]]]

[[[[Adv]]]]: public ProxySpecification withHost ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification withHost ( String [[array]] ) { return new ProxySpecification ( [[array]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 278 ---------------------------------------------
Expect a header to be an expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , Matcher < String > expectedValueMatcher ) { spec . header ( [[headerName]] , expectedValueMatcher ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder [[man]] ( String [[b]] , Matcher < String > expectedValueMatcher ) { spec . header ( [[b]] , expectedValueMatcher ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 279 ---------------------------------------------
Expect a cookie with expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectCookie]] ( String [[cookieName]] , String [[expectedValue]] ) { spec . cookie ( [[cookieName]] , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[t]] ( String [[address]] , String [[command]] ) { spec . cookie ( [[address]] , [[command]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 280 ---------------------------------------------
Expect a header with an expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , String [[expectedValue]] ) { spec . header ( [[headerName]] , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[payload]] ( String [[expect]] , String [[wait]] ) { spec . header ( [[expect]] , [[wait]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 281 ---------------------------------------------
Configures a JsonPathConfig . --> Configure a JsonPathConfig with the given number of values --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[numberReturnType]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[numberReturnType]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig [[by]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[by]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 282 ---------------------------------------------
Sets default logging for this request . --> Add extension validation --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream printStream ) { return new LogConfig ( printStream , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[extension]] ( PrintStream printStream ) { return new LogConfig ( printStream , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 283 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 122 / 157 / 4 / 283:  28%|██▊       | 283/1000 [25:27<1:04:28,  5.40s/it][Succeeded / Failed / Skipped / Total] 122 / 157 / 4 / 283:  28%|██▊       | 284/1000 [25:30<1:04:17,  5.39s/it][Succeeded / Failed / Skipped / Total] 123 / 157 / 4 / 284:  28%|██▊       | 284/1000 [25:30<1:04:17,  5.39s/it][Succeeded / Failed / Skipped / Total] 123 / 157 / 4 / 284:  28%|██▊       | 285/1000 [25:40<1:04:25,  5.41s/it][Succeeded / Failed / Skipped / Total] 124 / 157 / 4 / 285:  28%|██▊       | 285/1000 [25:40<1:04:25,  5.41s/it][Succeeded / Failed / Skipped / Total] 124 / 157 / 4 / 285:  29%|██▊       | 286/1000 [25:44<1:04:15,  5.40s/it][Succeeded / Failed / Skipped / Total] 125 / 157 / 4 / 286:  29%|██▊       | 286/1000 [25:44<1:04:15,  5.40s/it][Succeeded / Failed / Skipped / Total] 125 / 157 / 4 / 286:  29%|██▊       | 287/1000 [25:53<1:04:20,  5.41s/it][Succeeded / Failed / Skipped / Total] 125 / 158 / 4 / 287:  29%|██▊       | 287/1000 [25:53<1:04:20,  5.41s/it][Succeeded / Failed / Skipped / Total] 125 / 158 / 4 / 287:  29%|██▉       | 288/1000 [25:54<1:04:03,  5.40s/it][Succeeded / Failed / Skipped / Total] 126 / 158 / 4 / 288:  29%|██▉       | 288/1000 [25:54<1:04:03,  5.40s/it][Succeeded / Failed / Skipped / Total] 126 / 158 / 4 / 288:  29%|██▉       | 289/1000 [25:58<1:03:53,  5.39s/it][Succeeded / Failed / Skipped / Total] 127 / 158 / 4 / 289:  29%|██▉       | 289/1000 [25:58<1:03:53,  5.39s/it][Succeeded / Failed / Skipped / Total] 127 / 158 / 4 / 289:  29%|██▉       | 290/1000 [26:05<1:03:52,  5.40s/it][Succeeded / Failed / Skipped / Total] 127 / 159 / 4 / 290:  29%|██▉       | 290/1000 [26:05<1:03:52,  5.40s/it][Succeeded / Failed / Skipped / Total] 127 / 159 / 4 / 290:  29%|██▉       | 291/1000 [26:06<1:03:36,  5.38s/it][Succeeded / Failed / Skipped / Total] 128 / 159 / 4 / 291:  29%|██▉       | 291/1000 [26:06<1:03:36,  5.38s/it][Succeeded / Failed / Skipped / Total] 128 / 159 / 4 / 291:  29%|██▉       | 292/1000 [26:15<1:03:40,  5.40s/it]Sets the default parser type . --> Create a new JsonPathConfig instance --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[extension]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[extension]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 284 ---------------------------------------------
Enable logging of request and response . --> Configure daemon . --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[enableLoggingOfRequestAndResponseIfValidationFails]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig [[daemon]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 285 ---------------------------------------------
Default configuration . --> Set the input buffer --> Socre: 1.0

[[[[Adv]]]]: public MultiPartConfig [[defaultBoundary]] ( String [[defaultBoundary]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[defaultBoundary]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig [[buffer]] ( String [[foo]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[buffer]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 286 ---------------------------------------------
Adds an attribute to the request . --> Set the image content . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addAttribute]] ( String [[attributeName]] , Object attributeValue ) { spec . attribute ( [[attributeName]] , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[image]] ( String [[content]] , Object attributeValue ) { spec . attribute ( [[content]] , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 287 ---------------------------------------------
Adds a header to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String headerName , String headerValue ) { spec . header ( headerName , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[message]] ( String headerName , String headerValue ) { spec . header ( headerName , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 288 ---------------------------------------------
Add result handlers . --> Sets the code . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addResultHandlers]] ( ResultHandler [[resultHandler]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[resultHandler]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[code]] ( ResultHandler [[example]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[example]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 289 ---------------------------------------------
Creates an HttpRequestBase based on the given URI and type . --> Create HttpRequestBase --> Socre: 1.0

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI [[uri]] , String httpMethod , boolean hasBody ) { String [[method]] = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > [[type]] = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( [[method]] ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI [[bus]] , String httpMethod , boolean hasBody ) { String [[array]] = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > [[element]] = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( [[array]] ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 290 ---------------------------------------------
Adds a multi - part request . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addMultiPart ( String controlName , String contentBody , String [[mimeType]] ) { spec . multiPart ( controlName , [[mimeType]] ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addMultiPart ( String controlName , String contentBody , String [[syntax]] ) { spec . multiPart ( controlName , [[syntax]] ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 291 ---------------------------------------------
Configure the HttpClientFactory --> Configure HttpClientFactory --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig httpClientFactory ( HttpClientFactory [[httpClientFactory]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig httpClientFactory ( HttpClientFactory [[r]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 292 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 128 / 160 / 4 / 292:  29%|██▉       | 292/1000 [26:15<1:03:40,  5.40s/it][Succeeded / Failed / Skipped / Total] 128 / 160 / 4 / 292:  29%|██▉       | 293/1000 [26:21<1:03:36,  5.40s/it][Succeeded / Failed / Skipped / Total] 129 / 160 / 4 / 293:  29%|██▉       | 293/1000 [26:21<1:03:36,  5.40s/it][Succeeded / Failed / Skipped / Total] 129 / 160 / 4 / 293:  29%|██▉       | 294/1000 [26:26<1:03:29,  5.40s/it][Succeeded / Failed / Skipped / Total] 129 / 161 / 4 / 294:  29%|██▉       | 294/1000 [26:26<1:03:29,  5.40s/it][Succeeded / Failed / Skipped / Total] 129 / 161 / 4 / 294:  30%|██▉       | 295/1000 [26:29<1:03:17,  5.39s/it][Succeeded / Failed / Skipped / Total] 130 / 161 / 4 / 295:  30%|██▉       | 295/1000 [26:29<1:03:17,  5.39s/it][Succeeded / Failed / Skipped / Total] 130 / 161 / 4 / 295:  30%|██▉       | 296/1000 [26:29<1:03:00,  5.37s/it][Succeeded / Failed / Skipped / Total] 130 / 162 / 4 / 296:  30%|██▉       | 296/1000 [26:29<1:03:00,  5.37s/it][Succeeded / Failed / Skipped / Total] 130 / 162 / 4 / 296:  30%|██▉       | 297/1000 [26:32<1:02:49,  5.36s/it][Succeeded / Failed / Skipped / Total] 130 / 163 / 4 / 297:  30%|██▉       | 297/1000 [26:32<1:02:49,  5.36s/it][Succeeded / Failed / Skipped / Total] 130 / 163 / 4 / 297:  30%|██▉       | 298/1000 [26:36<1:02:40,  5.36s/it][Succeeded / Failed / Skipped / Total] 130 / 164 / 4 / 298:  30%|██▉       | 298/1000 [26:36<1:02:40,  5.36s/it][Succeeded / Failed / Skipped / Total] 130 / 164 / 4 / 298:  30%|██▉       | 299/1000 [26:43<1:02:40,  5.36s/it][Succeeded / Failed / Skipped / Total] 131 / 164 / 4 / 299:  30%|██▉       | 299/1000 [26:43<1:02:40,  5.36s/it][Succeeded / Failed / Skipped / Total] 131 / 165 / 4 / 300:  30%|███       | 300/1000 [26:44<1:02:22,  5.35s/it][Succeeded / Failed / Skipped / Total] 131 / 165 / 4 / 300:  30%|███       | 301/1000 [26:49<1:02:17,  5.35s/it][Succeeded / Failed / Skipped / Total] 131 / 166 / 4 / 301:  30%|███       | 301/1000 [26:49<1:02:17,  5.35s/it][Succeeded / Failed / Skipped / Total] 131 / 167 / 4 / 302:  30%|███       | 302/1000 [27:02<1:02:30,  5.37s/it][Succeeded / Failed / Skipped / Total] 131 / 167 / 4 / 302:  30%|███       | 303/1000 [27:08<1:02:25,  5.37s/it][Succeeded / Failed / Skipped / Total] 131 / 168 / 4 / 303:  30%|███       | 303/1000 [27:08<1:02:25,  5.37s/it][Succeeded / Failed / Skipped / Total] 131 / 168 / 4 / 303:  30%|███       | 304/1000 [27:10<1:02:13,  5.36s/it]Sets a parameter for this HTTP client . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[HttpClientConfig]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new [[HttpClientConfig]] ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > [[format]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new [[format]] ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 293 ---------------------------------------------
Sets the Http Multipart mode . --> Create a new HttpClientConfig --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpMultipartMode]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[httpMultipartMode]] , shouldReuseHttpClientInstance , httpClient , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig [[extension]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[extension]] , shouldReuseHttpClientInstance , httpClient , "[[a]]" == "[[a]]" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 294 ---------------------------------------------
Gets a value . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object [[json]] = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) jsonAssertion . getResult ( [[json]] , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[character]] > [[character]] get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object [[word]] = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[character]] ) jsonAssertion . getResult ( [[word]] , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 295 ---------------------------------------------
Gets int . --> Start a new index --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[begin]] ( String [[a]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 296 ---------------------------------------------
Add http client parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig [[addParams]] ( Map < String , ? > [[httpClientParams]] ) { notNull ( [[httpClientParams]] , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( [[httpClientParams]] ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig [[program]] ( Map < String , ? > [[anonymous]] ) { notNull ( [[anonymous]] , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( [[anonymous]] ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[box]]" == "[[box]]" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 297 ---------------------------------------------
Returns the byte value for the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public byte [[getByte]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[message]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 298 ---------------------------------------------
Get short . --> [[[FAILED]]]

[[[[Adv]]]]: public short [[getShort]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[branch]] ( String [[q]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 299 ---------------------------------------------
Gets long . --> execute procedure procedure --> Socre: 1.0

[[[[Adv]]]]: public long [[getLong]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[procedure]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 300 ---------------------------------------------
Get a double . --> [[[FAILED]]]

[[[[Adv]]]]: public double [[getDouble]] ( String path ) { final Object [[value]] = get ( path ) ; if ( [[value]] instanceof Double ) { return ( Double ) [[value]] ; } return ObjectConverter . convertObjectTo ( [[value]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[procedure]] ( String path ) { final Object [[tree]] = get ( path ) ; if ( [[tree]] instanceof Double ) { return ( Double ) [[tree]] ; } return ObjectConverter . convertObjectTo ( [[tree]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 301 ---------------------------------------------
Gets a float . --> [[[FAILED]]]

[[[[Adv]]]]: public float [[getFloat]] ( String path ) { final Object value = get ( path ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[be]] ( String path ) { final Object value = get ( path ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 302 ---------------------------------------------
Get a map element . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[K]] , V > Map < [[K]] , V > [[getMap]] ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < [[um]] , V > Map < [[um]] , V > [[start]] ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 303 ---------------------------------------------
Gets the object as object . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] getObject ( String path , Class < [[T]] > objectType ) { Object object = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < [[template]] > [[template]] getObject ( String path , Class < [[template]] > objectType ) { Object object = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 304 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 131 / 169 / 4 / 304:  30%|███       | 304/1000 [27:10<1:02:13,  5.36s/it][Succeeded / Failed / Skipped / Total] 131 / 169 / 4 / 304:  30%|███       | 305/1000 [27:20<1:02:17,  5.38s/it][Succeeded / Failed / Skipped / Total] 132 / 169 / 4 / 305:  30%|███       | 305/1000 [27:20<1:02:17,  5.38s/it][Succeeded / Failed / Skipped / Total] 132 / 169 / 4 / 305:  31%|███       | 306/1000 [27:24<1:02:10,  5.38s/it][Succeeded / Failed / Skipped / Total] 132 / 170 / 4 / 306:  31%|███       | 306/1000 [27:24<1:02:10,  5.38s/it][Succeeded / Failed / Skipped / Total] 132 / 170 / 4 / 306:  31%|███       | 307/1000 [27:33<1:02:12,  5.39s/it][Succeeded / Failed / Skipped / Total] 132 / 171 / 4 / 307:  31%|███       | 307/1000 [27:33<1:02:12,  5.39s/it][Succeeded / Failed / Skipped / Total] 132 / 171 / 4 / 307:  31%|███       | 308/1000 [27:41<1:02:13,  5.39s/it][Succeeded / Failed / Skipped / Total] 132 / 172 / 4 / 308:  31%|███       | 308/1000 [27:41<1:02:13,  5.39s/it][Succeeded / Failed / Skipped / Total] 132 / 172 / 4 / 308:  31%|███       | 309/1000 [27:42<1:01:58,  5.38s/it][Succeeded / Failed / Skipped / Total] 132 / 173 / 4 / 309:  31%|███       | 309/1000 [27:42<1:01:58,  5.38s/it][Succeeded / Failed / Skipped / Total] 132 / 173 / 4 / 309:  31%|███       | 310/1000 [27:47<1:01:50,  5.38s/it][Succeeded / Failed / Skipped / Total] 132 / 174 / 4 / 310:  31%|███       | 310/1000 [27:47<1:01:50,  5.38s/it][Succeeded / Failed / Skipped / Total] 132 / 174 / 4 / 310:  31%|███       | 311/1000 [27:51<1:01:44,  5.38s/it][Succeeded / Failed / Skipped / Total] 133 / 174 / 4 / 311:  31%|███       | 311/1000 [27:51<1:01:44,  5.38s/it][Succeeded / Failed / Skipped / Total] 133 / 174 / 4 / 311:  31%|███       | 312/1000 [27:53<1:01:30,  5.36s/it][Succeeded / Failed / Skipped / Total] 133 / 175 / 4 / 312:  31%|███       | 312/1000 [27:53<1:01:30,  5.36s/it][Succeeded / Failed / Skipped / Total] 133 / 175 / 4 / 312:  31%|███▏      | 313/1000 [27:57<1:01:22,  5.36s/it][Succeeded / Failed / Skipped / Total] 134 / 175 / 4 / 313:  31%|███▏      | 313/1000 [27:57<1:01:22,  5.36s/it][Succeeded / Failed / Skipped / Total] 134 / 175 / 4 / 313:  31%|███▏      | 314/1000 [28:08<1:01:28,  5.38s/it]Sets the request body . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[setBody]] ( Object object , ObjectMapper mapper ) { spec . body ( object , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder [[est]] ( Object object , ObjectMapper mapper ) { spec . body ( object , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 305 ---------------------------------------------
Adds a parameter to the request . --> Adds multiple parameters --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Object ... parameterValues ) { spec . param ( [[parameterName]] , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[a]] ( String [[objects]] , Object ... parameterValues ) { spec . param ( [[objects]] , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 306 ---------------------------------------------
Adds a cookie to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addCookie]] ( String key , Object [[value]] , Object ... [[cookieNameValuePairs]] ) { spec . cookie ( key , [[value]] , [[cookieNameValuePairs]] ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[am]] ( String key , Object [[identity]] , Object ... [[object]] ) { spec . cookie ( key , [[identity]] , [[object]] ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 307 ---------------------------------------------
Adds a parameter to the request specification . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Collection < ? > parameterValues ) { spec . param ( [[parameterName]] , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[ee]] ( String [[objects]] , Collection < ? > parameterValues ) { spec . param ( [[objects]] , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 308 ---------------------------------------------
Replace the custom update strategy . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[daemon]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "[[check]]" == "[[check]]" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 309 ---------------------------------------------
Get the path for the specified path . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > List < T > [[getList]] ( String [[path]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( [[path]] ) ; final List < T > [[newList]] = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > [[fetch]] ( String [[data]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( [[data]] ) ; final List < T > [[actual]] = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 310 ---------------------------------------------
Log a response to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static Filter [[logResponseToIfMatches]] ( PrintStream [[stream]] , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( [[stream]] , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter [[mode]] ( PrintStream [[ner]] , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( [[ner]] , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 311 ---------------------------------------------
Converts a constant string to a constant binding implementation . --> Create output for output --> Socre: 1.0

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > key , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[output]] ( Key < T > key , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 312 ---------------------------------------------
Index bindings for explicit bindings . --> [[[FAILED]]]

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > [[binding]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[binding]] . getKey ( ) . getTypeLiteral ( ) , [[binding]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[alice]] ( ) { for ( Binding < ? > [[declaration]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[declaration]] . getKey ( ) . getTypeLiteral ( ) , [[declaration]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 313 ---------------------------------------------
Clean up data from the backing map . --> Echo j --> Socre: 1.0

[[[[Adv]]]]: private void [[cleanUpForCollectedState]] ( Set < KeyAndSource > [[keysAndSources]] ) { synchronized ( lock ) { for ( KeyAndSource [[keyAndSource]] : [[keysAndSources]] ) { Multiset < Object > set = backingMap . get ( [[keyAndSource]] . key ) ; if ( set != null ) { set . remove ( [[keyAndSource]] . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( [[keyAndSource]] . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void [[echo]] ( Set < KeyAndSource > [[j]] ) { synchronized ( lock ) { for ( KeyAndSource [[i]] : [[j]] ) { Multiset < Object > set = backingMap . get ( [[i]] . key ) ; if ( set != null ) { set . remove ( [[i]] . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( [[i]] . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 314 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 134 / 176 / 4 / 314:  31%|███▏      | 314/1000 [28:08<1:01:28,  5.38s/it][Succeeded / Failed / Skipped / Total] 134 / 176 / 4 / 314:  32%|███▏      | 315/1000 [28:09<1:01:12,  5.36s/it][Succeeded / Failed / Skipped / Total] 135 / 176 / 4 / 315:  32%|███▏      | 315/1000 [28:09<1:01:12,  5.36s/it][Succeeded / Failed / Skipped / Total] 135 / 176 / 4 / 315:  32%|███▏      | 316/1000 [28:11<1:01:01,  5.35s/it][Succeeded / Failed / Skipped / Total] 135 / 177 / 4 / 316:  32%|███▏      | 316/1000 [28:11<1:01:01,  5.35s/it][Succeeded / Failed / Skipped / Total] 135 / 177 / 4 / 316:  32%|███▏      | 317/1000 [28:26<1:01:15,  5.38s/it][Succeeded / Failed / Skipped / Total] 135 / 178 / 4 / 317:  32%|███▏      | 317/1000 [28:26<1:01:15,  5.38s/it][Succeeded / Failed / Skipped / Total] 135 / 178 / 4 / 317:  32%|███▏      | 318/1000 [28:32<1:01:12,  5.39s/it][Succeeded / Failed / Skipped / Total] 136 / 178 / 4 / 318:  32%|███▏      | 318/1000 [28:32<1:01:12,  5.39s/it][Succeeded / Failed / Skipped / Total] 136 / 178 / 4 / 318:  32%|███▏      | 319/1000 [28:40<1:01:13,  5.39s/it][Succeeded / Failed / Skipped / Total] 136 / 179 / 4 / 319:  32%|███▏      | 319/1000 [28:40<1:01:13,  5.39s/it][Succeeded / Failed / Skipped / Total] 136 / 179 / 4 / 319:  32%|███▏      | 320/1000 [28:46<1:01:09,  5.40s/it][Succeeded / Failed / Skipped / Total] 137 / 179 / 4 / 320:  32%|███▏      | 320/1000 [28:46<1:01:09,  5.40s/it][Succeeded / Failed / Skipped / Total] 137 / 179 / 4 / 320:  32%|███▏      | 321/1000 [28:49<1:00:58,  5.39s/it]Gets the internal dependencies of a binding . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > [[binding]] ) { if ( [[binding]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[binding]] ) . getInternalDependencies ( ) ; } else if ( [[binding]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[binding]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[test]] ( BindingImpl < ? > [[foo]] ) { if ( [[foo]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[foo]] ) . getInternalDependencies ( ) ; } else if ( [[foo]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[foo]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 315 ---------------------------------------------
Adds additional cookies to the request . --> Convenience factory method --> Socre: 1.0

[[[[Adv]]]]: public static Cookies cookies ( Cookie [[cookie]] , Cookie ... [[additionalCookies]] ) { AssertParameter . notNull ( [[cookie]] , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( [[cookie]] ) ; Collections . addAll ( cookieList , [[additionalCookies]] ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies cookies ( Cookie [[hall]] , Cookie ... [[house]] ) { AssertParameter . notNull ( [[hall]] , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( [[hall]] ) ; Collections . addAll ( cookieList , [[house]] ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 316 ---------------------------------------------
Removes a failed binding . --> [[[FAILED]]]

[[[[Adv]]]]: private void removeFailedJitBinding ( Binding < ? > [[binding]] , InjectionPoint [[ip]] ) { failedJitBindings . add ( [[binding]] . getKey ( ) ) ; jitBindings . remove ( [[binding]] . getKey ( ) ) ; membersInjectorStore . remove ( [[binding]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[binding]] ) ; if ( [[ip]] != null ) { constructors . remove ( [[ip]] ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void removeFailedJitBinding ( Binding < ? > [[etc]] , InjectionPoint [[bridge]] ) { failedJitBindings . add ( [[etc]] . getKey ( ) ) ; jitBindings . remove ( [[etc]] . getKey ( ) ) ; membersInjectorStore . remove ( [[etc]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[etc]] ) ; if ( [[bridge]] != null ) { constructors . remove ( [[bridge]] ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 317 ---------------------------------------------
Creates an uninitialized binding . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[ErrorsException]] { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[assignment]] { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 318 ---------------------------------------------
Gets all parameters . --> Get all parameters from the context --> Socre: 1.0

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext context , SingleParameterInjector < ? > [ ] [[parameterInjectors]] ) throws InternalProvisionException { if ( [[parameterInjectors]] == null ) { return NO_ARGUMENTS ; } int [[size]] = [[parameterInjectors]] . length ; Object [ ] parameters = new Object [ [[size]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext context , SingleParameterInjector < ? > [ ] [[context]] ) throws InternalProvisionException { if ( [[context]] == null ) { return NO_ARGUMENTS ; } int [[variable]] = [[context]] . length ; Object [ ] parameters = new Object [ [[variable]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 319 ---------------------------------------------
Helper method to bind an injector . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[bindInjector]] ( InjectorImpl [[injector]] ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( [[injector]] ) ; [[injector]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( [[injector]] , key , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void [[main]] ( InjectorImpl [[version]] ) { Key < Injector > key = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( [[version]] ) ; [[version]] . state . putBinding ( key , new ProviderInstanceBindingImpl < Injector > ( [[version]] , key , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 320 ---------------------------------------------
Returns true if the two methods are overridden . --> Compare two methods --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[overrides]] ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[a]] ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 321 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 137 / 180 / 4 / 321:  32%|███▏      | 321/1000 [28:49<1:00:58,  5.39s/it][Succeeded / Failed / Skipped / Total] 137 / 180 / 4 / 321:  32%|███▏      | 322/1000 [28:54<1:00:53,  5.39s/it][Succeeded / Failed / Skipped / Total] 137 / 181 / 4 / 322:  32%|███▏      | 322/1000 [28:54<1:00:53,  5.39s/it][Succeeded / Failed / Skipped / Total] 137 / 181 / 4 / 322:  32%|███▏      | 323/1000 [29:03<1:00:53,  5.40s/it][Succeeded / Failed / Skipped / Total] 137 / 182 / 4 / 323:  32%|███▏      | 323/1000 [29:03<1:00:53,  5.40s/it][Succeeded / Failed / Skipped / Total] 137 / 182 / 4 / 323:  32%|███▏      | 324/1000 [29:09<1:00:50,  5.40s/it][Succeeded / Failed / Skipped / Total] 137 / 183 / 4 / 324:  32%|███▏      | 324/1000 [29:09<1:00:50,  5.40s/it][Succeeded / Failed / Skipped / Total] 137 / 183 / 4 / 324:  32%|███▎      | 325/1000 [29:11<1:00:37,  5.39s/it][Succeeded / Failed / Skipped / Total] 138 / 183 / 4 / 325:  32%|███▎      | 325/1000 [29:11<1:00:37,  5.39s/it][Succeeded / Failed / Skipped / Total] 138 / 183 / 4 / 325:  33%|███▎      | 326/1000 [29:14<1:00:28,  5.38s/it][Succeeded / Failed / Skipped / Total] 139 / 183 / 4 / 326:  33%|███▎      | 326/1000 [29:14<1:00:28,  5.38s/it][Succeeded / Failed / Skipped / Total] 139 / 183 / 4 / 326:  33%|███▎      | 327/1000 [29:26<1:00:34,  5.40s/it][Succeeded / Failed / Skipped / Total] 139 / 184 / 4 / 327:  33%|███▎      | 327/1000 [29:26<1:00:34,  5.40s/it][Succeeded / Failed / Skipped / Total] 139 / 184 / 4 / 327:  33%|███▎      | 328/1000 [29:29<1:00:25,  5.40s/it][Succeeded / Failed / Skipped / Total] 139 / 185 / 4 / 328:  33%|███▎      | 328/1000 [29:29<1:00:25,  5.40s/it][Succeeded / Failed / Skipped / Total] 139 / 185 / 4 / 328:  33%|███▎      | 329/1000 [29:30<1:00:11,  5.38s/it]Binds the logger . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[bindLogger]] ( InjectorImpl injector ) { Key < Logger > [[key]] = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( [[key]] , new ProviderInstanceBindingImpl < Logger > ( injector , [[key]] , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void [[main]] ( InjectorImpl injector ) { Key < Logger > [[access]] = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( [[access]] , new ProviderInstanceBindingImpl < Logger > ( injector , [[access]] , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 322 ---------------------------------------------
The type of the provider . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[thread]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 323 ---------------------------------------------
Initializes the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( MembersInjector < T > delegate ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void [[include]] ( MembersInjector < T > delegate ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 324 ---------------------------------------------
Cleans up the internal dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[cleanup]] ( BindingImpl < ? > [[binding]] , Set < Key > [[encountered]] ) { boolean bindingFailed = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( [[binding]] ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint [[ip]] = dep . getInjectionPoint ( ) ; if ( [[encountered]] . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean [[s]] ( BindingImpl < ? > [[functions]] , Set < Key > [[function]] ) { boolean bindingFailed = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( [[functions]] ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint [[handler]] = dep . getInjectionPoint ( ) ; if ( [[function]] . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 325 ---------------------------------------------
Resolves a list of type literals . --> Resolves a type literal --> Socre: 1.0

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[resolveAll]] ( Type [ ] [[types]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[types]] . length ] ; for ( int t = 0 ; t < [[types]] . length ; t ++ ) { result [ t ] = resolve ( [[types]] [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[solve]] ( Type [ ] [[header]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[header]] . length ] ; for ( int t = 0 ; t < [[header]] . length ; t ++ ) { result [ t ] = resolve ( [[header]] [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 326 ---------------------------------------------
Prepare built - in converters . --> Map the injector --> Socre: 1.0

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[map]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 327 ---------------------------------------------
Converts the given class loader to a canonical class loader . --> [[[FAILED]]]

[[[[Adv]]]]: private static ClassLoader [[canonicalize]] ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader [[call]] ( ClassLoader [[program]] ) { return [[program]] != null ? [[program]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 328 ---------------------------------------------
Returns a type literal for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[canonicalizeForKey]] ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[on]] ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 329 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 139 / 186 / 4 / 329:  33%|███▎      | 329/1000 [29:30<1:00:11,  5.38s/it][Succeeded / Failed / Skipped / Total] 139 / 186 / 4 / 329:  33%|███▎      | 330/1000 [29:37<1:00:07,  5.38s/it][Succeeded / Failed / Skipped / Total] 140 / 186 / 4 / 330:  33%|███▎      | 330/1000 [29:37<1:00:07,  5.38s/it][Succeeded / Failed / Skipped / Total] 140 / 186 / 4 / 330:  33%|███▎      | 331/1000 [29:39<59:56,  5.38s/it]  [Succeeded / Failed / Skipped / Total] 140 / 187 / 4 / 331:  33%|███▎      | 331/1000 [29:39<59:56,  5.38s/it][Succeeded / Failed / Skipped / Total] 140 / 187 / 4 / 331:  33%|███▎      | 332/1000 [29:40<59:41,  5.36s/it][Succeeded / Failed / Skipped / Total] 140 / 188 / 4 / 332:  33%|███▎      | 332/1000 [29:40<59:41,  5.36s/it][Succeeded / Failed / Skipped / Total] 140 / 188 / 4 / 332:  33%|███▎      | 333/1000 [29:58<1:00:02,  5.40s/it][Succeeded / Failed / Skipped / Total] 140 / 189 / 4 / 333:  33%|███▎      | 333/1000 [29:58<1:00:02,  5.40s/it][Succeeded / Failed / Skipped / Total] 140 / 189 / 4 / 333:  33%|███▎      | 334/1000 [30:01<59:52,  5.39s/it]  [Succeeded / Failed / Skipped / Total] 140 / 190 / 4 / 334:  33%|███▎      | 334/1000 [30:01<59:52,  5.39s/it][Succeeded / Failed / Skipped / Total] 140 / 190 / 4 / 334:  34%|███▎      | 335/1000 [30:05<59:45,  5.39s/it][Succeeded / Failed / Skipped / Total] 140 / 191 / 4 / 335:  34%|███▎      | 335/1000 [30:05<59:45,  5.39s/it][Succeeded / Failed / Skipped / Total] 140 / 191 / 4 / 335:  34%|███▎      | 336/1000 [30:12<59:41,  5.39s/it]looks to see if there are duplicate binding annotations --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[checkForMisplacedBindingAnnotations]] ( Member member , Errors errors ) { Annotation [[misplacedBindingAnnotation]] = Annotations . findBindingAnnotation ( errors , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( [[misplacedBindingAnnotation]] == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean [[sort]] ( Member member , Errors errors ) { Annotation [[check]] = Annotations . findBindingAnnotation ( errors , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( [[check]] == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 330 ---------------------------------------------
Checks if the class has the same version of the same version . --> capture a fast class --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader [[classLoader]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[classLoader]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[capture]] ( ClassLoader [[f]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[f]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 331 ---------------------------------------------
Fix annotations . --> [[[FAILED]]]

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 332 ---------------------------------------------
Requests the specified injection point . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[provisionCallback]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[label]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 333 ---------------------------------------------
Create a new instance of the class with the given arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[newInstance]] ( Object [ ] [[args]] ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T [[execute]] ( Object [ ] [[n]] ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( [[n]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 334 ---------------------------------------------
Create a ServletRequest with the dispatcher . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[withDispatcher]] ( ServletRequest servletRequest , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[authentication]] ( ServletRequest servletRequest , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 335 ---------------------------------------------
Validates that all injections have been processed . --> [[[FAILED]]]

[[[[Adv]]]]: void [[validateOustandingInjections]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void [[start]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 336 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 140 / 192 / 4 / 336:  34%|███▎      | 336/1000 [30:12<59:41,  5.39s/it][Succeeded / Failed / Skipped / Total] 140 / 192 / 4 / 336:  34%|███▎      | 337/1000 [30:17<59:36,  5.39s/it][Succeeded / Failed / Skipped / Total] 141 / 192 / 4 / 337:  34%|███▎      | 337/1000 [30:17<59:36,  5.39s/it][Succeeded / Failed / Skipped / Total] 141 / 192 / 4 / 337:  34%|███▍      | 338/1000 [30:18<59:22,  5.38s/it][Succeeded / Failed / Skipped / Total] 141 / 193 / 4 / 338:  34%|███▍      | 338/1000 [30:18<59:22,  5.38s/it][Succeeded / Failed / Skipped / Total] 141 / 193 / 4 / 338:  34%|███▍      | 339/1000 [30:28<59:25,  5.39s/it][Succeeded / Failed / Skipped / Total] 142 / 193 / 4 / 339:  34%|███▍      | 339/1000 [30:28<59:25,  5.39s/it][Succeeded / Failed / Skipped / Total] 142 / 193 / 4 / 339:  34%|███▍      | 340/1000 [30:39<59:30,  5.41s/it][Succeeded / Failed / Skipped / Total] 142 / 194 / 4 / 340:  34%|███▍      | 340/1000 [30:39<59:30,  5.41s/it][Succeeded / Failed / Skipped / Total] 142 / 194 / 4 / 340:  34%|███▍      | 341/1000 [30:51<59:38,  5.43s/it][Succeeded / Failed / Skipped / Total] 142 / 195 / 4 / 341:  34%|███▍      | 341/1000 [30:51<59:38,  5.43s/it][Succeeded / Failed / Skipped / Total] 142 / 195 / 4 / 341:  34%|███▍      | 342/1000 [30:52<59:24,  5.42s/it][Succeeded / Failed / Skipped / Total] 142 / 196 / 4 / 342:  34%|███▍      | 342/1000 [30:52<59:24,  5.42s/it][Succeeded / Failed / Skipped / Total] 142 / 196 / 4 / 342:  34%|███▍      | 343/1000 [30:58<59:19,  5.42s/it]Checks whether the given member is public or not . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[isPubliclyCallable]] ( Member [[member]] ) { if ( ! Modifier . isPublic ( [[member]] . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] [[parameterTypes]] ; if ( [[member]] instanceof Constructor ) { [[parameterTypes]] = ( ( Constructor ) [[member]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[member]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } [[parameterTypes]] = method . getParameterTypes ( ) ; } for ( Class < ? > [[type]] : [[parameterTypes]] ) { if ( ! Modifier . isPublic ( [[type]] . getModifiers ( ) ) ) { return "False" != "False" ; } } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean [[method]] ( Member [[list]] ) { if ( ! Modifier . isPublic ( [[list]] . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] [[c]] ; if ( [[list]] instanceof Constructor ) { [[c]] = ( ( Constructor ) [[list]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[list]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } [[c]] = method . getParameterTypes ( ) ; } for ( Class < ? > [[membership]] : [[c]] ) { if ( ! Modifier . isPublic ( [[membership]] . getModifiers ( ) ) ) { return "False" != "False" ; } } return "[[true]]" == "[[true]]" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 337 ---------------------------------------------
Normalize the given path . --> Add the query string to the id --> Socre: 1.0

[[[[Adv]]]]: static String [[normalizePath]] ( String [[path]] ) { StringBuilder sb = new StringBuilder ( [[path]] . length ( ) ) ; int queryStart = [[path]] . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = [[path]] . substring ( queryStart ) ; [[path]] = [[path]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String [[add]] ( String [[id]] ) { StringBuilder sb = new StringBuilder ( [[id]] . length ( ) ) ; int queryStart = [[id]] . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = [[id]] . substring ( queryStart ) ; [[id]] = [[id]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 338 ---------------------------------------------
Returns an annotation for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[rt]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 339 ---------------------------------------------
Returns a scope based on the given scope . --> region ScopeFactory --> Socre: 1.0

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping [[scoping]] ) { if ( [[scoping]] . isNoScope ( ) ) { return creator ; } Scope scope = [[scoping]] . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping [[client]] ) { if ( [[client]] . isNoScope ( ) ) { return creator ; } Scope scope = [[client]] . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 340 ---------------------------------------------
Checks if retention at runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > [[annotationType]] ) { Retention retention = [[annotationType]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[assertion]] ( Class < ? extends Annotation > [[b]] ) { Retention retention = [[b]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 341 ---------------------------------------------
Find scope annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static Class < ? extends Annotation > [[findScopeAnnotation]] ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > [[compare]] ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 342 ---------------------------------------------
Makes the given scoping binding . --> [[[FAILED]]]

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping [[scoping]] , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = [[scoping]] . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return [[scoping]] ; } ScopeBinding scope = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping [[context]] , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = [[context]] . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return [[context]] ; } ScopeBinding scope = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
[Succeeded / Failed / Skipped / Total] 142 / 197 / 4 / 343:  34%|███▍      | 343/1000 [30:58<59:19,  5.42s/it][Succeeded / Failed / Skipped / Total] 142 / 197 / 4 / 343:  34%|███▍      | 344/1000 [31:04<59:15,  5.42s/it][Succeeded / Failed / Skipped / Total] 142 / 198 / 4 / 344:  34%|███▍      | 344/1000 [31:04<59:15,  5.42s/it][Succeeded / Failed / Skipped / Total] 142 / 198 / 4 / 344:  34%|███▍      | 345/1000 [31:08<59:06,  5.42s/it][Succeeded / Failed / Skipped / Total] 142 / 199 / 4 / 345:  34%|███▍      | 345/1000 [31:08<59:06,  5.42s/it][Succeeded / Failed / Skipped / Total] 142 / 199 / 4 / 345:  35%|███▍      | 346/1000 [31:21<59:16,  5.44s/it][Succeeded / Failed / Skipped / Total] 142 / 200 / 4 / 346:  35%|███▍      | 346/1000 [31:21<59:16,  5.44s/it][Succeeded / Failed / Skipped / Total] 142 / 200 / 4 / 346:  35%|███▍      | 347/1000 [31:21<59:01,  5.42s/it][Succeeded / Failed / Skipped / Total] 142 / 201 / 4 / 347:  35%|███▍      | 347/1000 [31:21<59:01,  5.42s/it][Succeeded / Failed / Skipped / Total] 142 / 201 / 4 / 347:  35%|███▍      | 348/1000 [31:36<59:12,  5.45s/it][Succeeded / Failed / Skipped / Total] 143 / 201 / 4 / 348:  35%|███▍      | 348/1000 [31:36<59:12,  5.45s/it][Succeeded / Failed / Skipped / Total] 143 / 201 / 4 / 348:  35%|███▍      | 349/1000 [31:37<58:59,  5.44s/it][Succeeded / Failed / Skipped / Total] 143 / 202 / 4 / 349:  35%|███▍      | 349/1000 [31:37<58:59,  5.44s/it][Succeeded / Failed / Skipped / Total] 143 / 202 / 4 / 349:  35%|███▌      | 350/1000 [31:43<58:55,  5.44s/it][Succeeded / Failed / Skipped / Total] 144 / 202 / 4 / 350:  35%|███▌      | 350/1000 [31:43<58:55,  5.44s/it][Succeeded / Failed / Skipped / Total] 144 / 202 / 4 / 350:  35%|███▌      | 351/1000 [31:50<58:53,  5.44s/it]--------------------------------------------- Result 343 ---------------------------------------------
Returns the name of the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > [[annotationType]] = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( [[annotationType]] ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[main]] ( Key < ? > key ) { Annotation annotation = key . getAnnotation ( ) ; Class < ? extends Annotation > [[parameter]] = key . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( [[parameter]] ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 344 ---------------------------------------------
Helper method to add explicit type binding --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[main]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 345 ---------------------------------------------
Initializes the delegate provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > [[delegate]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[overhead]] ( Provider < T > [[a]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[a]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 346 ---------------------------------------------
Retrieve a constructor from the cache . --> [[[FAILED]]]

[[[[Adv]]]]: public ConstructorInjector < ? > [[get]] ( InjectionPoint constructorInjector , Errors errors ) throws ErrorsException { return cache . get ( constructorInjector , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > [[program]] ( InjectionPoint constructorInjector , Errors errors ) throws ErrorsException { return cache . get ( constructorInjector , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 347 ---------------------------------------------
Returns the binding for the given type and annotations . --> [[[FAILED]]]

[[[[Adv]]]]: public static Key < ? > [[getKey]] ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , annotations ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > [[find]] ( TypeLiteral < ? > type , Member member , Annotation [ ] annotations , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , member , annotations ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 348 ---------------------------------------------
Checks whether interceptor has scope annotation . --> Checks whether interceptor is procedure or not --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasScope]] ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation [[annotation]] : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[annotation]] . annotationType ( ) ) ) { return "[[True]]" == "[[True]]" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean [[procedure]] ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation [[classes]] : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[classes]] . annotationType ( ) ) ) { return "[[declaration]]" == "[[declaration]]" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 349 ---------------------------------------------
Gets the key for a new value . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[entrySetBinder]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[valueKey]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[entrySetBinder]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[entrySetBinder]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[valueKey]] ) ) ; return [[valueKey]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[object]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[server]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[object]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[object]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[server]] ) ) ; return [[server]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 350 ---------------------------------------------
Returns the module for the given module . --> Java operator --> Socre: 1.0

[[[[Adv]]]]: static Module [[forModule]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[operator]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 351 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 144 / 203 / 4 / 351:  35%|███▌      | 351/1000 [31:50<58:53,  5.44s/it][Succeeded / Failed / Skipped / Total] 144 / 203 / 4 / 351:  35%|███▌      | 352/1000 [31:55<58:45,  5.44s/it][Succeeded / Failed / Skipped / Total] 144 / 204 / 4 / 352:  35%|███▌      | 352/1000 [31:55<58:45,  5.44s/it][Succeeded / Failed / Skipped / Total] 144 / 204 / 4 / 352:  35%|███▌      | 353/1000 [31:56<58:32,  5.43s/it][Succeeded / Failed / Skipped / Total] 144 / 205 / 4 / 353:  35%|███▌      | 353/1000 [31:56<58:32,  5.43s/it][Succeeded / Failed / Skipped / Total] 144 / 205 / 4 / 353:  35%|███▌      | 354/1000 [31:58<58:21,  5.42s/it][Succeeded / Failed / Skipped / Total] 144 / 206 / 4 / 354:  35%|███▌      | 354/1000 [31:58<58:21,  5.42s/it][Succeeded / Failed / Skipped / Total] 144 / 206 / 4 / 354:  36%|███▌      | 355/1000 [32:32<59:07,  5.50s/it][Succeeded / Failed / Skipped / Total] 144 / 207 / 4 / 355:  36%|███▌      | 355/1000 [32:32<59:07,  5.50s/it][Succeeded / Failed / Skipped / Total] 144 / 207 / 4 / 355:  36%|███▌      | 356/1000 [32:35<58:57,  5.49s/it][Succeeded / Failed / Skipped / Total] 144 / 208 / 4 / 356:  36%|███▌      | 356/1000 [32:35<58:57,  5.49s/it][Succeeded / Failed / Skipped / Total] 144 / 208 / 4 / 356:  36%|███▌      | 357/1000 [32:37<58:45,  5.48s/it]Returns all registered methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[methods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 352 ---------------------------------------------
Write the source code . --> [[[FAILED]]]

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int [[i]] = 0 ; [[i]] < sourcesAsStrings . length ; [[i]] ++ ) { sourcesAsStrings [ [[i]] ] = Errors . convert ( sourcesAsStrings [ [[i]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int [[e]] = 0 ; [[e]] < sourcesAsStrings . length ; [[e]] ++ ) { sourcesAsStrings [ [[e]] ] = Errors . convert ( sourcesAsStrings [ [[e]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 353 ---------------------------------------------
Creates a new instance of the construction . --> [[[FAILED]]]

[[[[Adv]]]]: private T [[provision]] ( InternalContext [[context]] , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T [[t]] ; try { Object [ ] parameters = SingleParameterInjector . getAll ( [[context]] , parameterInjectors ) ; [[t]] = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( [[t]] ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T [[ht]] ( InternalContext [[a]] , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T [[completion]] ; try { Object [ ] parameters = SingleParameterInjector . getAll ( [[a]] , parameterInjectors ) ; [[completion]] = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( [[completion]] ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 354 ---------------------------------------------
Creates a real map binder for the given key and value type . --> [[[FAILED]]]

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > [[newRealMapBinder]] ( Binder [[binder]] , TypeLiteral < K > [[keyType]] , Key < V > valueTypeAndAnnotation ) { [[binder]] = [[binder]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > [[valueType]] = valueTypeAndAnnotation . getTypeLiteral ( ) ; return [[newRealMapBinder]] ( [[binder]] , [[keyType]] , [[valueType]] , valueTypeAndAnnotation . ofType ( mapOf ( [[keyType]] , [[valueType]] ) ) , RealMultibinder . newRealSetBinder ( [[binder]] , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( [[keyType]] , [[valueType]] ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > [[end]] ( Binder [[gate]] , TypeLiteral < K > [[base]] , Key < V > valueTypeAndAnnotation ) { [[gate]] = [[gate]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > [[name]] = valueTypeAndAnnotation . getTypeLiteral ( ) ; return [[end]] ( [[gate]] , [[base]] , [[name]] , valueTypeAndAnnotation . ofType ( mapOf ( [[base]] , [[name]] ) ) , RealMultibinder . newRealSetBinder ( [[gate]] , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( [[base]] , [[name]] ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 355 ---------------------------------------------
Removes the specified dependencies from the given dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > [[removeAssistedDeps]] ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : deps ) { Class < ? > [[annotationType]] = dep . getKey ( ) . getAnnotationType ( ) ; if ( [[annotationType]] == null || ! [[annotationType]] . equals ( Assisted . class ) ) { builder . add ( dep ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > [[python]] ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : deps ) { Class < ? > [[state]] = dep . getKey ( ) . getAnnotationType ( ) ; if ( [[state]] == null || ! [[state]] . equals ( Assisted . class ) ) { builder . add ( dep ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 356 ---------------------------------------------
Get the dependencies for the given ctor . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint ctorPoint , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint [[ip]] : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { builder . addAll ( [[ip]] . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[build]] ( InjectionPoint ctorPoint , TypeLiteral < ? > implementation ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! implementation . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint [[developer]] : InjectionPoint . forInstanceMethodsAndFields ( implementation ) ) { builder . addAll ( [[developer]] . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 357 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 144 / 209 / 4 / 357:  36%|███▌      | 357/1000 [32:37<58:45,  5.48s/it][Succeeded / Failed / Skipped / Total] 144 / 209 / 4 / 357:  36%|███▌      | 358/1000 [32:44<58:43,  5.49s/it][Succeeded / Failed / Skipped / Total] 145 / 209 / 4 / 358:  36%|███▌      | 358/1000 [32:44<58:43,  5.49s/it][Succeeded / Failed / Skipped / Total] 145 / 209 / 4 / 358:  36%|███▌      | 359/1000 [32:52<58:42,  5.49s/it][Succeeded / Failed / Skipped / Total] 145 / 210 / 4 / 359:  36%|███▌      | 359/1000 [32:52<58:42,  5.49s/it][Succeeded / Failed / Skipped / Total] 145 / 210 / 4 / 359:  36%|███▌      | 360/1000 [33:13<59:03,  5.54s/it][Succeeded / Failed / Skipped / Total] 145 / 211 / 4 / 360:  36%|███▌      | 360/1000 [33:13<59:03,  5.54s/it][Succeeded / Failed / Skipped / Total] 145 / 211 / 4 / 360:  36%|███▌      | 361/1000 [33:13<58:48,  5.52s/it][Succeeded / Failed / Skipped / Total] 145 / 212 / 4 / 361:  36%|███▌      | 361/1000 [33:13<58:48,  5.52s/it][Succeeded / Failed / Skipped / Total] 145 / 212 / 4 / 361:  36%|███▌      | 362/1000 [33:18<58:42,  5.52s/it][Succeeded / Failed / Skipped / Total] 146 / 212 / 4 / 362:  36%|███▌      | 362/1000 [33:18<58:42,  5.52s/it][Succeeded / Failed / Skipped / Total] 146 / 212 / 4 / 362:  36%|███▋      | 363/1000 [33:23<58:36,  5.52s/it][Succeeded / Failed / Skipped / Total] 147 / 212 / 4 / 363:  36%|███▋      | 363/1000 [33:23<58:36,  5.52s/it][Succeeded / Failed / Skipped / Total] 147 / 212 / 4 / 363:  36%|███▋      | 364/1000 [33:24<58:22,  5.51s/it]Checks if a type is defined . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isTypeNotSpecified]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > [[messages]] = ce . getErrorMessages ( ) ; if ( [[messages]] . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( [[messages]] ) . getMessage ( ) ) ; } else { return "[[False]]" != "[[False]]" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean [[check]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > [[i]] = ce . getErrorMessages ( ) ; if ( [[i]] . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( [[i]] ) . getMessage ( ) ) ; } else { return "[[data]]" != "[[data]]" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 358 ---------------------------------------------
Invokes the specified method on the proxy . --> Overrides default implementation --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object [[invoke]] ( Object proxy , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object [[foo]] ( Object proxy , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 359 ---------------------------------------------
Generates an error message for a given key . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[sb]] = new StringBuilder ( ) ; [[sb]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[test]] = new StringBuilder ( ) ; [[test]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 360 ---------------------------------------------
Returns true if the given injector should be used for optimization purposes . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > [[badDeps]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[command]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > [[statement]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 361 ---------------------------------------------
Returns the binding from the given injector . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > [[getBindingFromNewInjector]] ( final Method [[method]] , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > [[returnType]] = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > [[test]] ( final Method [[list]] , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > [[i]] = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 362 ---------------------------------------------
Instantiates real MultisetBinder . --> helper method to install a real Multibinder --> Socre: 1.0

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[newRealSetBinder]] ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[result]] = new RealMultibinder <> ( binder , key ) ; binder . install ( [[result]] ) ; return [[result]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[hack]] ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[d]] = new RealMultibinder <> ( binder , key ) ; binder . install ( [[d]] ) ; return [[d]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 363 ---------------------------------------------
Checks whether the constructor matches the given constructor . --> Iterate over the parameters of a constructor --> Socre: 1.0

[[[[Adv]]]]: private boolean [[constructorHasMatchingParams]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] [[paramAnnotations]] = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > [[paramKey]] = Annotations . getKey ( param , constructor , [[paramAnnotations]] [ p ++ ] , errors ) ; constructorKeys . add ( [[paramKey]] ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean [[generator]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] [[types]] = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > [[groups]] = Annotations . getKey ( param , constructor , [[types]] [ p ++ ] , errors ) ; constructorKeys . add ( [[groups]] ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 364 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 147 / 213 / 4 / 364:  36%|███▋      | 364/1000 [33:24<58:22,  5.51s/it][Succeeded / Failed / Skipped / Total] 147 / 213 / 4 / 364:  36%|███▋      | 365/1000 [33:29<58:16,  5.51s/it][Succeeded / Failed / Skipped / Total] 147 / 214 / 4 / 365:  36%|███▋      | 365/1000 [33:29<58:16,  5.51s/it][Succeeded / Failed / Skipped / Total] 147 / 214 / 4 / 365:  37%|███▋      | 366/1000 [33:34<58:08,  5.50s/it][Succeeded / Failed / Skipped / Total] 147 / 215 / 4 / 366:  37%|███▋      | 366/1000 [33:34<58:08,  5.50s/it][Succeeded / Failed / Skipped / Total] 147 / 215 / 4 / 366:  37%|███▋      | 367/1000 [33:37<57:59,  5.50s/it][Succeeded / Failed / Skipped / Total] 147 / 216 / 4 / 367:  37%|███▋      | 367/1000 [33:37<57:59,  5.50s/it][Succeeded / Failed / Skipped / Total] 147 / 216 / 4 / 367:  37%|███▋      | 368/1000 [33:45<57:59,  5.51s/it][Succeeded / Failed / Skipped / Total] 147 / 217 / 4 / 368:  37%|███▋      | 368/1000 [33:45<57:59,  5.51s/it][Succeeded / Failed / Skipped / Total] 147 / 217 / 4 / 368:  37%|███▋      | 369/1000 [33:49<57:50,  5.50s/it][Succeeded / Failed / Skipped / Total] 147 / 218 / 4 / 369:  37%|███▋      | 369/1000 [33:49<57:50,  5.50s/it][Succeeded / Failed / Skipped / Total] 147 / 218 / 4 / 369:  37%|███▋      | 370/1000 [33:53<57:42,  5.50s/it][Succeeded / Failed / Skipped / Total] 147 / 219 / 4 / 370:  37%|███▋      | 370/1000 [33:53<57:42,  5.50s/it][Succeeded / Failed / Skipped / Total] 147 / 219 / 4 / 370:  37%|███▋      | 371/1000 [34:07<57:52,  5.52s/it][Succeeded / Failed / Skipped / Total] 147 / 220 / 4 / 371:  37%|███▋      | 371/1000 [34:07<57:52,  5.52s/it][Succeeded / Failed / Skipped / Total] 147 / 220 / 4 / 371:  37%|███▋      | 372/1000 [34:13<57:46,  5.52s/it][Succeeded / Failed / Skipped / Total] 147 / 221 / 4 / 372:  37%|███▋      | 372/1000 [34:13<57:46,  5.52s/it][Succeeded / Failed / Skipped / Total] 147 / 221 / 4 / 372:  37%|███▋      | 373/1000 [34:14<57:33,  5.51s/it]Gets the internal constructor . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[execute]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 365 ---------------------------------------------
Returns true if the constructor has at least one annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor cxtor ) { return cxtor . isAnnotationPresent ( Inject . class ) || cxtor . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[query]] ( Constructor cxtor ) { return cxtor . isAnnotationPresent ( Inject . class ) || cxtor . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 366 ---------------------------------------------
Find the next filter matching the given request . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter findNextFilter ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter [[filter]] = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( [[filter]] != null ) { return [[filter]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter findNextFilter ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter [[field]] = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( [[field]] != null ) { return [[field]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 367 ---------------------------------------------
Returns the set of internal dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[modify]] ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 368 ---------------------------------------------
Gets the line number for the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member [[member]] ) { Preconditions . checkArgument ( type == [[member]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[member]] , [[member]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[member]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[main]] ( Member [[array]] ) { Preconditions . checkArgument ( type == [[array]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[array]] , [[array]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[array]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 369 ---------------------------------------------
Initializes the lookup . --> [[[FAILED]]]

[[[[Adv]]]]: void [[initialize]] ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[engineer]] ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 370 ---------------------------------------------
Searches for a module . --> [[[FAILED]]]

[[[[Adv]]]]: public static Module [[forModule]] ( Object module , ModuleAnnotatedMethodScanner scanner ) { return forObject ( module , "False" != "False" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[program]] ( Object module , ModuleAnnotatedMethodScanner scanner ) { return forObject ( module , "False" != "False" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 371 ---------------------------------------------
Converts the callable into a Callable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[transferRequest]] ( Callable < T > callable ) { return wrap ( callable , [[transferRequest]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > [[begin]] ( Callable < T > callable ) { return wrap ( callable , [[begin]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 372 ---------------------------------------------
Wraps the given callable with the given seed map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > [[callable]] , Map < Key < ? > , Object > [[seedMap]] ) { return wrap ( [[callable]] , [[continueRequest]] ( [[seedMap]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[request]] ( Callable < T > [[type]] , Map < Key < ? > , Object > [[style]] ) { return wrap ( [[type]] , [[request]] ( [[style]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 373 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 147 / 222 / 4 / 373:  37%|███▋      | 373/1000 [34:14<57:33,  5.51s/it][Succeeded / Failed / Skipped / Total] 147 / 222 / 4 / 373:  37%|███▋      | 374/1000 [34:20<57:29,  5.51s/it][Succeeded / Failed / Skipped / Total] 147 / 223 / 4 / 374:  37%|███▋      | 374/1000 [34:20<57:29,  5.51s/it][Succeeded / Failed / Skipped / Total] 147 / 223 / 4 / 374:  38%|███▊      | 375/1000 [34:32<57:33,  5.53s/it][Succeeded / Failed / Skipped / Total] 147 / 224 / 4 / 375:  38%|███▊      | 375/1000 [34:32<57:33,  5.53s/it][Succeeded / Failed / Skipped / Total] 147 / 224 / 4 / 375:  38%|███▊      | 376/1000 [34:44<57:39,  5.54s/it][Succeeded / Failed / Skipped / Total] 147 / 225 / 4 / 376:  38%|███▊      | 376/1000 [34:44<57:39,  5.54s/it][Succeeded / Failed / Skipped / Total] 147 / 225 / 4 / 376:  38%|███▊      | 377/1000 [34:46<57:27,  5.53s/it][Succeeded / Failed / Skipped / Total] 147 / 226 / 4 / 377:  38%|███▊      | 377/1000 [34:46<57:27,  5.53s/it][Succeeded / Failed / Skipped / Total] 147 / 226 / 4 / 377:  38%|███▊      | 378/1000 [34:49<57:17,  5.53s/it][Succeeded / Failed / Skipped / Total] 147 / 227 / 4 / 378:  38%|███▊      | 378/1000 [34:49<57:17,  5.53s/it][Succeeded / Failed / Skipped / Total] 147 / 227 / 4 / 378:  38%|███▊      | 379/1000 [34:52<57:08,  5.52s/it]Finds an annotation on the specified method . --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation getAnnotation ( Binder [[binder]] , Method [[method]] ) { if ( [[method]] . isBridge ( ) || [[method]] . isSynthetic ( ) ) { return null ; } Annotation [[annotation]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = [[method]] . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( [[annotation]] != null ) { [[binder]] . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , [[method]] ) ; return null ; } [[annotation]] = foundAnnotation ; } } return [[annotation]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation getAnnotation ( Binder [[flow]] , Method [[database]] ) { if ( [[database]] . isBridge ( ) || [[database]] . isSynthetic ( ) ) { return null ; } Annotation [[order]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = [[database]] . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( [[order]] != null ) { [[flow]] . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , [[database]] ) ; return null ; } [[order]] = foundAnnotation ; } } return [[order]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 374 ---------------------------------------------
Checks that the given value is compatible with the given key . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > key , Object [[object]] ) { if ( [[object]] == null || [[object]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[object]] ) ) { throw new IllegalArgumentException ( "Value[" + [[object]] + "] of type[" + [[object]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return [[object]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[var]] ( Key < ? > key , Object [[statement]] ) { if ( [[statement]] == null || [[statement]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[statement]] ) ) { throw new IllegalArgumentException ( "Value[" + [[statement]] + "] of type[" + [[statement]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return [[statement]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 375 ---------------------------------------------
Create a new instance of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > [[get]] ( Class < T > type , AnnotationStrategy annotationStrategy ) { return new Key < T > ( type , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > [[add]] ( Class < T > type , AnnotationStrategy annotationStrategy ) { return new Key < T > ( type , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 376 ---------------------------------------------
Returns a strategy instance for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Annotation [[annotation]] ) { checkNotNull ( [[annotation]] , "annotation" ) ; Class < ? extends Annotation > [[annotationType]] = [[annotation]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; if ( Annotations . isMarker ( [[annotationType]] ) ) { return new AnnotationTypeStrategy ( [[annotationType]] , [[annotation]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[annotation]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy [[a]] ( Annotation [[foo]] ) { checkNotNull ( [[foo]] , "annotation" ) ; Class < ? extends Annotation > [[file]] = [[foo]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[file]] ) ; ensureIsBindingAnnotation ( [[file]] ) ; if ( Annotations . isMarker ( [[file]] ) ) { return new AnnotationTypeStrategy ( [[file]] , [[foo]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[foo]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 377 ---------------------------------------------
Returns a strategy for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return [[strategyFor]] ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy [[end]] ( Class < ? extends Annotation > [[system]] ) { [[system]] = Annotations . canonicalizeIfNamed ( [[system]] ) ; if ( isAllDefaultMethods ( [[system]] ) ) { return [[end]] ( generateAnnotation ( [[system]] ) ) ; } checkNotNull ( [[system]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[system]] ) ; ensureIsBindingAnnotation ( [[system]] ) ; return new AnnotationTypeStrategy ( [[system]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 378 ---------------------------------------------
Gets the injectors for a given injection point . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint [[injectionPoint]] : injectionPoints ) { try { Errors errorsForMember = [[injectionPoint]] . isOptional ( ) ? new Errors ( [[injectionPoint]] ) : errors . withSource ( [[injectionPoint]] ) ; SingleMemberInjector injector = [[injectionPoint]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , [[injectionPoint]] , errorsForMember ) : new SingleMethodInjector ( this . injector , [[injectionPoint]] , errorsForMember ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint [[lists]] : injectionPoints ) { try { Errors errorsForMember = [[lists]] . isOptional ( ) ? new Errors ( [[lists]] ) : errors . withSource ( [[lists]] ) ; SingleMemberInjector injector = [[lists]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , [[lists]] , errorsForMember ) : new SingleMethodInjector ( this . injector , [[lists]] , errorsForMember ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 379 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 147 / 228 / 4 / 379:  38%|███▊      | 379/1000 [34:52<57:08,  5.52s/it][Succeeded / Failed / Skipped / Total] 147 / 228 / 4 / 379:  38%|███▊      | 380/1000 [35:10<57:23,  5.55s/it][Succeeded / Failed / Skipped / Total] 148 / 228 / 4 / 380:  38%|███▊      | 380/1000 [35:10<57:23,  5.55s/it][Succeeded / Failed / Skipped / Total] 148 / 228 / 4 / 380:  38%|███▊      | 381/1000 [35:32<57:45,  5.60s/it][Succeeded / Failed / Skipped / Total] 148 / 229 / 4 / 381:  38%|███▊      | 381/1000 [35:32<57:45,  5.60s/it][Succeeded / Failed / Skipped / Total] 148 / 229 / 4 / 381:  38%|███▊      | 382/1000 [35:48<57:55,  5.62s/it][Succeeded / Failed / Skipped / Total] 148 / 230 / 4 / 382:  38%|███▊      | 382/1000 [35:48<57:55,  5.62s/it][Succeeded / Failed / Skipped / Total] 148 / 230 / 4 / 382:  38%|███▊      | 383/1000 [35:49<57:43,  5.61s/it][Succeeded / Failed / Skipped / Total] 148 / 231 / 4 / 383:  38%|███▊      | 383/1000 [35:49<57:43,  5.61s/it][Succeeded / Failed / Skipped / Total] 148 / 231 / 4 / 383:  38%|███▊      | 384/1000 [36:01<57:46,  5.63s/it][Succeeded / Failed / Skipped / Total] 149 / 231 / 4 / 384:  38%|███▊      | 384/1000 [36:01<57:46,  5.63s/it][Succeeded / Failed / Skipped / Total] 149 / 231 / 4 / 384:  38%|███▊      | 385/1000 [36:07<57:41,  5.63s/it]Returns the binding source . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[relation]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 380 ---------------------------------------------
Creates a message with the specified format and arguments . --> Shortcut method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Message [[create]] ( String messageFormat , Object ... [[arguments]] ) { return [[create]] ( null , messageFormat , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message [[test]] ( String messageFormat , Object ... [[t]] ) { return [[test]] ( null , messageFormat , [[t]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 381 ---------------------------------------------
Prune the stack trace of the given exception . --> [[[FAILED]]]

[[[[Adv]]]]: private void pruneStacktrace ( Throwable [[throwable]] ) { for ( Throwable t = [[throwable]] ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] stackTrace = t . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } t . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void pruneStacktrace ( Throwable [[size]] ) { for ( Throwable t = [[size]] ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] stackTrace = t . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } t . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 382 ---------------------------------------------
Creates a new member injector for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[createWithListeners]] ( TypeLiteral < T > [[type]] , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( [[type]] ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > [[injectors]] = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > [[alreadySeenListeners]] = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! [[alreadySeenListeners]] . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( [[type]] ) ) { [[alreadySeenListeners]] . add ( typeListener ) ; try { typeListener . hear ( [[type]] , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , [[type]] , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , [[type]] , encounter , [[injectors]] ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[var]] ( TypeLiteral < T > [[errors]] , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( [[errors]] ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > [[tested]] = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > [[encountered]] = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! [[encountered]] . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( [[errors]] ) ) { [[encountered]] . add ( typeListener ) ; try { typeListener . hear ( [[errors]] , encounter ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , [[errors]] , e ) ; } } } encounter . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , [[errors]] , encounter , [[tested]] ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 383 ---------------------------------------------
Creates a message with the specified message and stack trace . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message create ( Throwable [[cause]] , String messageFormat , Object ... [[arguments]] ) { return create ( [[cause]] , ImmutableList . of ( ) , messageFormat , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message create ( Throwable [[ra]] , String messageFormat , Object ... [[java]] ) { return create ( [[ra]] , ImmutableList . of ( ) , messageFormat , [[java]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 384 ---------------------------------------------
Converts the given object to the declaring element . --> Binary B --> Socre: 1.0

[[[[Adv]]]]: static Object [[convert]] ( Object o ) { ElementSource [[source]] = null ; if ( o instanceof ElementSource ) { [[source]] = ( ElementSource ) o ; o = [[source]] . getDeclaringSource ( ) ; } return [[convert]] ( o , [[source]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object [[b]] ( Object o ) { ElementSource [[ur]] = null ; if ( o instanceof ElementSource ) { [[ur]] = ( ElementSource ) o ; o = [[ur]] . getDeclaringSource ( ) ; } return [[b]] ( o , [[ur]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 385 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 149 / 232 / 4 / 385:  38%|███▊      | 385/1000 [36:07<57:41,  5.63s/it][Succeeded / Failed / Skipped / Total] 149 / 232 / 4 / 385:  39%|███▊      | 386/1000 [36:11<57:33,  5.63s/it][Succeeded / Failed / Skipped / Total] 150 / 232 / 4 / 386:  39%|███▊      | 386/1000 [36:11<57:33,  5.63s/it][Succeeded / Failed / Skipped / Total] 150 / 232 / 4 / 386:  39%|███▊      | 387/1000 [36:26<57:43,  5.65s/it][Succeeded / Failed / Skipped / Total] 150 / 233 / 4 / 387:  39%|███▊      | 387/1000 [36:26<57:43,  5.65s/it][Succeeded / Failed / Skipped / Total] 150 / 233 / 4 / 387:  39%|███▉      | 388/1000 [36:27<57:30,  5.64s/it][Succeeded / Failed / Skipped / Total] 150 / 234 / 4 / 388:  39%|███▉      | 388/1000 [36:27<57:30,  5.64s/it][Succeeded / Failed / Skipped / Total] 150 / 234 / 4 / 388:  39%|███▉      | 389/1000 [36:33<57:24,  5.64s/it][Succeeded / Failed / Skipped / Total] 151 / 234 / 4 / 389:  39%|███▉      | 389/1000 [36:33<57:24,  5.64s/it][Succeeded / Failed / Skipped / Total] 151 / 234 / 4 / 389:  39%|███▉      | 390/1000 [36:39<57:19,  5.64s/it][Succeeded / Failed / Skipped / Total] 152 / 234 / 4 / 390:  39%|███▉      | 390/1000 [36:39<57:19,  5.64s/it][Succeeded / Failed / Skipped / Total] 152 / 234 / 4 / 390:  39%|███▉      | 391/1000 [36:44<57:13,  5.64s/it][Succeeded / Failed / Skipped / Total] 152 / 235 / 4 / 391:  39%|███▉      | 391/1000 [36:44<57:13,  5.64s/it][Succeeded / Failed / Skipped / Total] 152 / 235 / 4 / 391:  39%|███▉      | 392/1000 [36:46<57:03,  5.63s/it][Succeeded / Failed / Skipped / Total] 153 / 235 / 4 / 392:  39%|███▉      | 392/1000 [36:46<57:03,  5.63s/it][Succeeded / Failed / Skipped / Total] 153 / 235 / 4 / 392:  39%|███▉      | 393/1000 [36:47<56:48,  5.62s/it]Determines whether a class should be skipped . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[use]] ( String [[mother]] ) { return ( parent != null && parent . shouldBeSkipped ( [[mother]] ) ) || classNamesToSkip . contains ( [[mother]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 386 ---------------------------------------------
Convenience method to create a message with the given message format . --> generate flow --> Socre: 1.0

[[[[Adv]]]]: public static Message [[create]] ( Throwable [[cause]] , List < Object > sources , String [[messageFormat]] , Object ... arguments ) { String [[message]] = format ( [[messageFormat]] , arguments ) ; return new Message ( sources , [[message]] , [[cause]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message [[flow]] ( Throwable [[forms]] , List < Object > sources , String [[messaging]] , Object ... arguments ) { String [[file]] = format ( [[messaging]] , arguments ) ; return new Message ( sources , [[file]] , [[forms]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 387 ---------------------------------------------
Gets the object from the module names . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getFromClassNames]] ( List < String > [[moduleClassNames]] ) { Preconditions . checkNotNull ( [[moduleClassNames]] , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : [[moduleClassNames]] ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object [[name]] ( List < String > [[a]] ) { Preconditions . checkNotNull ( [[a]] , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : [[a]] ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 388 ---------------------------------------------
Main method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[main]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void [[exception]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 389 ---------------------------------------------
Sends the push state . --> Push a key --> Socre: 1.0

[[[[Adv]]]]: void [[pushState]] ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void [[product]] ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 390 ---------------------------------------------
Returns an initializable instance for the given instance . --> Execute the given clause --> Socre: 1.0

[[[[Adv]]]]: static < T > Initializable < T > [[of]] ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > [[execute]] ( final T [[clause]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[clause]] ; } @ Override public String toString ( ) { return String . valueOf ( [[clause]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 391 ---------------------------------------------
Adds the given dependency to this context . --> [[[FAILED]]]

[[[[Adv]]]]: Dependency < ? > pushDependency ( Dependency < ? > dependency , Object [[source]] ) { Dependency < ? > previous = this . [[dependency]] ; this . [[dependency]] = dependency ; doPushState ( dependency , [[source]] ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > pushDependency ( Dependency < ? > dependency , Object [[relational]] ) { Dependency < ? > previous = this . [[com]] ; this . [[com]] = dependency ; doPushState ( dependency , [[relational]] ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 392 ---------------------------------------------
Called when a connection event is received . --> Process an event --> Socre: 1.0

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String [[remoteAddr]] , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( [[remoteAddr]] , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String [[array]] , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( [[array]] , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 393 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 153 / 236 / 4 / 393:  39%|███▉      | 393/1000 [36:47<56:48,  5.62s/it][Succeeded / Failed / Skipped / Total] 153 / 236 / 4 / 393:  39%|███▉      | 394/1000 [36:53<56:44,  5.62s/it][Succeeded / Failed / Skipped / Total] 154 / 236 / 4 / 394:  39%|███▉      | 394/1000 [36:53<56:44,  5.62s/it][Succeeded / Failed / Skipped / Total] 154 / 236 / 4 / 394:  40%|███▉      | 395/1000 [36:57<56:36,  5.61s/it][Succeeded / Failed / Skipped / Total] 154 / 237 / 4 / 395:  40%|███▉      | 395/1000 [36:57<56:36,  5.61s/it][Succeeded / Failed / Skipped / Total] 154 / 237 / 4 / 395:  40%|███▉      | 396/1000 [37:11<56:43,  5.64s/it][Succeeded / Failed / Skipped / Total] 155 / 237 / 4 / 396:  40%|███▉      | 396/1000 [37:11<56:43,  5.64s/it][Succeeded / Failed / Skipped / Total] 155 / 237 / 4 / 396:  40%|███▉      | 397/1000 [37:12<56:31,  5.62s/it][Succeeded / Failed / Skipped / Total] 155 / 238 / 4 / 397:  40%|███▉      | 397/1000 [37:12<56:31,  5.62s/it][Succeeded / Failed / Skipped / Total] 155 / 238 / 4 / 397:  40%|███▉      | 398/1000 [37:13<56:18,  5.61s/it]Format error messages . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[formatMessages]] ( String heading , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String [[collections]] ( String heading , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 394 ---------------------------------------------
Supports a throwable . --> Throw an unchecked exception . --> Socre: 1.0

[[[[Adv]]]]: public static void [[launderThrowable]] ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable

[[[[Adv]]]]: public static void [[add]] ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 395 ---------------------------------------------
Gets the future task result . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] getFutureTaskResult ( RunStateRecordedFutureTask < [[T]] > task , Logger logger ) { [[T]] t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < [[field]] > [[field]] getFutureTaskResult ( RunStateRecordedFutureTask < [[field]] > task , Logger logger ) { [[field]] t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 396 ---------------------------------------------
Adds a connection event processor . --> Adds a line to the database --> Socre: 1.0

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType [[type]] , ConnectionEventProcessor [[processor]] ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[type]] ) ; if ( processorList == null ) { this . processors . putIfAbsent ( [[type]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( [[type]] ) ; } processorList . add ( [[processor]] ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[line]] ( ConnectionEventType [[memory]] , ConnectionEventProcessor [[array]] ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[memory]] ) ; if ( processorList == null ) { this . processors . putIfAbsent ( [[memory]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( [[memory]] ) ; } processorList . add ( [[array]] ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 397 ---------------------------------------------
Method called by the provider . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[provision]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T [[on]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 398 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 156 / 238 / 4 / 398:  40%|███▉      | 398/1000 [37:13<56:18,  5.61s/it][Succeeded / Failed / Skipped / Total] 156 / 238 / 4 / 398:  40%|███▉      | 399/1000 [37:16<56:08,  5.60s/it][Succeeded / Failed / Skipped / Total] 157 / 238 / 4 / 399:  40%|███▉      | 399/1000 [37:16<56:08,  5.60s/it][Succeeded / Failed / Skipped / Total] 157 / 238 / 4 / 399:  40%|████      | 400/1000 [37:18<55:58,  5.60s/it][Succeeded / Failed / Skipped / Total] 158 / 238 / 4 / 400:  40%|████      | 400/1000 [37:18<55:58,  5.60s/it][Succeeded / Failed / Skipped / Total] 158 / 238 / 4 / 400:  40%|████      | 401/1000 [37:19<55:44,  5.58s/it][Succeeded / Failed / Skipped / Total] 158 / 238 / 5 / 401:  40%|████      | 401/1000 [37:19<55:44,  5.58s/it][Succeeded / Failed / Skipped / Total] 158 / 238 / 5 / 401:  40%|████      | 402/1000 [37:24<55:38,  5.58s/it][Succeeded / Failed / Skipped / Total] 159 / 238 / 5 / 402:  40%|████      | 402/1000 [37:24<55:38,  5.58s/it][Succeeded / Failed / Skipped / Total] 159 / 238 / 5 / 402:  40%|████      | 403/1000 [37:25<55:27,  5.57s/it][Succeeded / Failed / Skipped / Total] 160 / 238 / 5 / 403:  40%|████      | 403/1000 [37:25<55:27,  5.57s/it][Succeeded / Failed / Skipped / Total] 160 / 238 / 5 / 403:  40%|████      | 404/1000 [37:31<55:21,  5.57s/it][Succeeded / Failed / Skipped / Total] 160 / 239 / 5 / 404:  40%|████      | 404/1000 [37:31<55:21,  5.57s/it][Succeeded / Failed / Skipped / Total] 160 / 239 / 5 / 404:  40%|████      | 405/1000 [37:37<55:16,  5.57s/it][Succeeded / Failed / Skipped / Total] 161 / 239 / 5 / 405:  40%|████      | 405/1000 [37:37<55:16,  5.57s/it][Succeeded / Failed / Skipped / Total] 161 / 239 / 5 / 405:  41%|████      | 406/1000 [37:38<55:04,  5.56s/it]Register the default processor --> Registers a defaultProcessor --> Socre: 1.0

[[[[Adv]]]]: public void registerDefaultProcessor ( RemotingProcessor < ? > [[processor]] ) { if ( this . [[defaultProcessor]] == null ) { this . [[defaultProcessor]] = [[processor]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[defaultProcessor]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void registerDefaultProcessor ( RemotingProcessor < ? > [[loop]] ) { if ( this . [[program]] == null ) { this . [[program]] = [[loop]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[program]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 399 ---------------------------------------------
Register a remoting processor . --> Quick fix for remoting --> Socre: 1.0

[[[[Adv]]]]: public void [[registerProcessor]] ( CommandCode [[cmdCode]] , RemotingProcessor < ? > processor ) { if ( this . [[cmd2processors]] . containsKey ( [[cmdCode]] ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , [[cmdCode]] , cmd2processors . get ( [[cmdCode]] ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . [[cmd2processors]] . put ( [[cmdCode]] , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void [[fix]] ( CommandCode [[compiler]] , RemotingProcessor < ? > processor ) { if ( this . [[be]] . containsKey ( [[compiler]] ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , [[compiler]] , cmd2processors . get ( [[compiler]] ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . [[be]] . put ( [[compiler]] , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 400 ---------------------------------------------
Tries to get a given URL . --> Gets a Url for a given URL . --> Socre: 1.0

[[[[Adv]]]]: private Url [[tryGet]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache

[[[[Adv]]]]: private Url [[a]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 401 ---------------------------------------------
Scans for connections that have expired . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public void scan ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 402 ---------------------------------------------
Gets all connections in the cluster . --> region > getConnectionPool --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > getAll ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool [[pool]] = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != [[pool]] ) { allConnections . put ( entry . getKey ( ) , [[pool]] . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > getAll ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool [[er]] = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != [[er]] ) { allConnections . put ( entry . getKey ( ) , [[er]] . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 403 ---------------------------------------------
Retrieves and creates a new connection . --> ID - 1 --> Socre: 1.0

[[[[Adv]]]]: @ Override public Connection [[getAndCreateIfAbsent]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection [[id]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 404 ---------------------------------------------
Decodes Protocol Code . --> [[[FAILED]]]

[[[[Adv]]]]: protected ProtocolCode [[decodeProtocolCode]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; in . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode [[l]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; in . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 405 ---------------------------------------------
Create a new connection to the remote server . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url [[url]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[fix]] ( Url [[i]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 406 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 162 / 239 / 5 / 406:  41%|████      | 406/1000 [37:38<55:04,  5.56s/it][Succeeded / Failed / Skipped / Total] 162 / 239 / 5 / 406:  41%|████      | 407/1000 [37:39<54:52,  5.55s/it][Succeeded / Failed / Skipped / Total] 162 / 240 / 5 / 407:  41%|████      | 407/1000 [37:39<54:52,  5.55s/it][Succeeded / Failed / Skipped / Total] 162 / 240 / 5 / 407:  41%|████      | 408/1000 [37:44<54:45,  5.55s/it][Succeeded / Failed / Skipped / Total] 163 / 240 / 5 / 408:  41%|████      | 408/1000 [37:44<54:45,  5.55s/it][Succeeded / Failed / Skipped / Total] 163 / 240 / 5 / 408:  41%|████      | 409/1000 [37:44<54:32,  5.54s/it][Succeeded / Failed / Skipped / Total] 164 / 240 / 5 / 409:  41%|████      | 409/1000 [37:44<54:32,  5.54s/it][Succeeded / Failed / Skipped / Total] 164 / 240 / 5 / 409:  41%|████      | 410/1000 [37:45<54:19,  5.52s/it][Succeeded / Failed / Skipped / Total] 165 / 240 / 5 / 410:  41%|████      | 410/1000 [37:45<54:19,  5.52s/it][Succeeded / Failed / Skipped / Total] 165 / 240 / 5 / 410:  41%|████      | 411/1000 [38:07<54:38,  5.57s/it][Succeeded / Failed / Skipped / Total] 166 / 240 / 5 / 411:  41%|████      | 411/1000 [38:07<54:38,  5.57s/it][Succeeded / Failed / Skipped / Total] 166 / 240 / 5 / 411:  41%|████      | 412/1000 [38:08<54:25,  5.55s/it][Succeeded / Failed / Skipped / Total] 166 / 241 / 5 / 412:  41%|████      | 412/1000 [38:08<54:25,  5.55s/it]Remove task task from pool . --> Called to close a connection . --> Socre: 1.0

[[[[Adv]]]]: private void [[removeTask]] ( String [[poolKey]] ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( [[poolKey]] ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void [[console]] ( String [[field]] ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( [[field]] ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 407 ---------------------------------------------
Get the remoting processor for a command . --> [[[FAILED]]]

[[[[Adv]]]]: public RemotingProcessor < ? > [[getProcessor]] ( CommandCode [[cmdCode]] ) { RemotingProcessor < ? > processor = this . [[cmd2processors]] . get ( [[cmdCode]] ) ; if ( processor != null ) { return processor ; } return this . [[defaultProcessor]] ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > [[write]] ( CommandCode [[name]] ) { RemotingProcessor < ? > processor = this . [[pac]] . get ( [[name]] ) ; if ( processor != null ) { return processor ; } return this . [[com]] ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 408 ---------------------------------------------
Create connection . --> sync connection number --> Socre: 1.0

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool pool , final String taskName , final int [[syncCreateNumWhenNotWarmup]] ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( [[syncCreateNumWhenNotWarmup]] < 0 || [[syncCreateNumWhenNotWarmup]] > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool pool , final String taskName , final int [[array]] ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( [[array]] < 0 || [[array]] > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 409 ---------------------------------------------
Closes a connection . --> Remove an exception . --> Socre: 1.0

[[[[Adv]]]]: public void [[closeConnection]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void [[exception]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 410 ---------------------------------------------
Tries to repair if needed . --> Fetches bucket . --> Socre: 1.0

[[[[Adv]]]]: private void [[healIfNeed]] ( ConnectionPool pool , Url [[url]] ) throws RemotingException , InterruptedException { String poolKey = [[url]] . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void [[fetch]] ( ConnectionPool pool , Url [[bucket]] ) throws RemotingException , InterruptedException { String poolKey = [[bucket]] . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 411 ---------------------------------------------
Register user processor --> Initiate process --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerUserProcessor]] ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > [[userProcessors]] ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { [[registerUserProcessor]] ( ( MultiInterestUserProcessor ) processor , [[userProcessors]] ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = [[userProcessors]] . putIfAbsent ( processor . interest ( ) , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void [[suppose]] ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > [[loop]] ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { [[suppose]] ( ( MultiInterestUserProcessor ) processor , [[loop]] ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = [[loop]] . putIfAbsent ( processor . interest ( ) , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 412 ---------------------------------------------
Sets the specified attribute to the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[setAttributeIfAbsent]] ( String key , Object value ) { return attributes . putIfAbsent ( key , value ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object [[keys]] ( String key , Object value ) { return attributes . putIfAbsent ( key , value ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 413 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 166 / 242 / 5 / 413:  41%|████▏     | 413/1000 [38:08<54:12,  5.54s/it][Succeeded / Failed / Skipped / Total] 166 / 242 / 5 / 413:  41%|████▏     | 414/1000 [38:08<53:59,  5.53s/it][Succeeded / Failed / Skipped / Total] 166 / 242 / 6 / 414:  41%|████▏     | 414/1000 [38:08<53:59,  5.53s/it][Succeeded / Failed / Skipped / Total] 166 / 243 / 6 / 415:  42%|████▏     | 415/1000 [38:10<53:48,  5.52s/it][Succeeded / Failed / Skipped / Total] 166 / 243 / 6 / 415:  42%|████▏     | 416/1000 [38:14<53:41,  5.52s/it][Succeeded / Failed / Skipped / Total] 167 / 243 / 6 / 416:  42%|████▏     | 416/1000 [38:14<53:41,  5.52s/it][Succeeded / Failed / Skipped / Total] 168 / 243 / 6 / 417:  42%|████▏     | 417/1000 [38:15<53:29,  5.51s/it][Succeeded / Failed / Skipped / Total] 168 / 243 / 6 / 417:  42%|████▏     | 418/1000 [38:18<53:20,  5.50s/it][Succeeded / Failed / Skipped / Total] 169 / 243 / 6 / 418:  42%|████▏     | 418/1000 [38:18<53:20,  5.50s/it]Called when the connection is closed . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onClose]] ( ) { Iterator < Entry < Integer , InvokeFuture > > [[iter]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[iter]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = [[iter]] . next ( ) ; [[iter]] . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void [[after]] ( ) { Iterator < Entry < Integer , InvokeFuture > > [[answer]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[answer]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = [[answer]] . next ( ) ; [[answer]] . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 414 ---------------------------------------------
Send RpcRequestCommandCommand --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean deserializeRequestCommand ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 415 ---------------------------------------------
Close the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[close]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[future]] ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , [[future]] . isSuccess ( ) , [[future]] . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void [[add]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[function]] ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[web]] . getChannel ( ) ) , [[function]] . isSuccess ( ) , [[function]] . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[web]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 416 ---------------------------------------------
Register a user - specific processor --> Ends the process --> Socre: 1.0

[[[[Adv]]]]: private static void [[registerUserProcessor]] ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : processor . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void [[end]] ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : processor . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 417 ---------------------------------------------
Pre - processes the remoting context . --> Binding request command --> Socre: 1.0

[[[[Adv]]]]: private void [[preProcessRemotingContext]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void [[bolt]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 418 ---------------------------------------------
Dispatch request to user processor --> Dispatches the RpcRequestCommandCommandCommand . --> Socre: 1.0

[[[[Adv]]]]: private void dispatchToUserProcessor ( RemotingContext [[ctx]] , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void dispatchToUserProcessor ( RemotingContext [[al]] , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 419 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 170 / 243 / 6 / 419:  42%|████▏     | 419/1000 [38:19<53:08,  5.49s/it][Succeeded / Failed / Skipped / Total] 170 / 243 / 6 / 419:  42%|████▏     | 420/1000 [38:27<53:06,  5.49s/it][Succeeded / Failed / Skipped / Total] 171 / 243 / 6 / 420:  42%|████▏     | 420/1000 [38:27<53:06,  5.49s/it][Succeeded / Failed / Skipped / Total] 172 / 243 / 6 / 421:  42%|████▏     | 421/1000 [38:35<53:04,  5.50s/it][Succeeded / Failed / Skipped / Total] 172 / 243 / 6 / 421:  42%|████▏     | 422/1000 [38:35<52:51,  5.49s/it]Debug log message . --> Callback after the RpcRequest command . --> Socre: 1.0

[[[[Adv]]]]: private void [[debugLog]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void [[after]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 420 ---------------------------------------------
Performs invocation on a remote request . --> Helper method for invoking the InvokeCallback --> Socre: 1.0

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int [[timeoutMillis]] ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , [[timeoutMillis]] , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int [[list]] ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , [[list]] , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 421 ---------------------------------------------
Log timeout log . --> Security security --> Socre: 1.0

[[[[Adv]]]]: private void [[timeoutLog]] ( final RpcRequestCommand [[cmd]] , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , [[cmd]] . getId ( ) , currentTimestamp , [[cmd]] . getArriveTime ( ) , ( currentTimestamp - [[cmd]] . getArriveTime ( ) ) , [[cmd]] . getTimeout ( ) ) ; } String [[remoteAddr]] = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { [[remoteAddr]] = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , [[cmd]] . getId ( ) , [[remoteAddr]] , ( currentTimestamp - [[cmd]] . getArriveTime ( ) ) , [[cmd]] . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void [[security]] ( final RpcRequestCommand [[file]] , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , [[file]] . getId ( ) , currentTimestamp , [[file]] . getArriveTime ( ) , ( currentTimestamp - [[file]] . getArriveTime ( ) ) , [[file]] . getTimeout ( ) ) ; } String [[end]] = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { [[end]] = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , [[file]] . getId ( ) , [[end]] , ( currentTimestamp - [[file]] . getArriveTime ( ) ) , [[file]] . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 422 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 173 / 243 / 6 / 422:  42%|████▏     | 422/1000 [38:35<52:51,  5.49s/it][Succeeded / Failed / Skipped / Total] 173 / 243 / 7 / 423:  42%|████▏     | 423/1000 [38:35<52:39,  5.48s/it][Succeeded / Failed / Skipped / Total] 173 / 243 / 7 / 423:  42%|████▏     | 424/1000 [38:41<52:33,  5.47s/it][Succeeded / Failed / Skipped / Total] 174 / 243 / 7 / 424:  42%|████▏     | 424/1000 [38:41<52:33,  5.47s/it][Succeeded / Failed / Skipped / Total] 175 / 243 / 7 / 425:  42%|████▎     | 425/1000 [38:42<52:21,  5.46s/it][Succeeded / Failed / Skipped / Total] 175 / 243 / 7 / 425:  43%|████▎     | 426/1000 [38:43<52:10,  5.45s/it][Succeeded / Failed / Skipped / Total] 175 / 244 / 7 / 426:  43%|████▎     | 426/1000 [38:43<52:10,  5.45s/it][Succeeded / Failed / Skipped / Total] 175 / 245 / 7 / 427:  43%|████▎     | 427/1000 [38:47<52:02,  5.45s/it][Succeeded / Failed / Skipped / Total] 175 / 245 / 7 / 427:  43%|████▎     | 428/1000 [38:51<51:55,  5.45s/it]Convert a bit set to a byte value . --> Calculates the bus of bits . --> Socre: 1.0

[[[[Adv]]]]: public static byte [[toByte]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte [[bus]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 423 ---------------------------------------------
Convert an integer value into a BitSet . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static BitSet toBitSet ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 424 ---------------------------------------------
Stop the process . --> Called after the process has finished . --> Socre: 1.0

[[[[Adv]]]]: public void [[stop]] ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread

[[[[Adv]]]]: public void [[after]] ( ) { if ( ! this . started ) { return ; } this . started = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 425 ---------------------------------------------
Add a reconnect task . --> Set apache on apache --> Socre: 1.0

[[[[Adv]]]]: public void [[addReconnectTask]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void [[apache]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 426 ---------------------------------------------
Process the message --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[process]] ( RemotingContext ctx , T msg , ExecutorService [[defaultExecutor]] ) throws Exception { ProcessTask task = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { [[defaultExecutor]] . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void [[empty]] ( RemotingContext ctx , T msg , ExecutorService [[command]] ) throws Exception { ProcessTask task = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { [[command]] . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 427 ---------------------------------------------
Send a command . --> [[[FAILED]]]

[[[[Adv]]]]: protected void oneway ( final Connection [[conn]] , final RemotingCommand request ) { try { [[conn]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[conn]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void oneway ( final Connection [[event]] , final RemotingCommand request ) { try { [[event]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[event]] . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[event]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[event]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 428 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 176 / 245 / 7 / 428:  43%|████▎     | 428/1000 [38:51<51:55,  5.45s/it][Succeeded / Failed / Skipped / Total] 177 / 245 / 7 / 429:  43%|████▎     | 429/1000 [38:51<51:43,  5.44s/it][Succeeded / Failed / Skipped / Total] 177 / 245 / 7 / 429:  43%|████▎     | 430/1000 [38:53<51:32,  5.43s/it]Monitor connections . --> Filters the connection pools . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[monitor]] ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off

[[[[Adv]]]]: @ Override public void [[after]] ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 429 ---------------------------------------------
Filter a list of connections --> Filters the list of services based on the service status --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection [[connection]] : connections ) { String serviceStatus = ( String ) [[connection]] . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( [[connection]] . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( [[connection]] ) ) { serviceOffConnections . add ( [[connection]] ) ; } } else { serviceOnConnections . add ( [[connection]] ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection [[description]] : connections ) { String serviceStatus = ( String ) [[description]] . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( [[description]] . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( [[description]] ) ) { serviceOffConnections . add ( [[description]] ) ; } } else { serviceOnConnections . add ( [[description]] ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 430 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 178 / 245 / 7 / 430:  43%|████▎     | 430/1000 [38:53<51:32,  5.43s/it][Succeeded / Failed / Skipped / Total] 179 / 245 / 7 / 431:  43%|████▎     | 431/1000 [38:57<51:25,  5.42s/it][Succeeded / Failed / Skipped / Total] 179 / 245 / 7 / 431:  43%|████▎     | 432/1000 [39:00<51:16,  5.42s/it][Succeeded / Failed / Skipped / Total] 180 / 245 / 7 / 432:  43%|████▎     | 432/1000 [39:00<51:16,  5.42s/it][Succeeded / Failed / Skipped / Total] 181 / 245 / 7 / 433:  43%|████▎     | 433/1000 [39:01<51:06,  5.41s/it][Succeeded / Failed / Skipped / Total] 181 / 245 / 7 / 433:  43%|████▎     | 434/1000 [39:01<50:53,  5.40s/it][Succeeded / Failed / Skipped / Total] 181 / 245 / 8 / 434:  43%|████▎     | 434/1000 [39:01<50:53,  5.40s/it][Succeeded / Failed / Skipped / Total] 182 / 245 / 8 / 435:  44%|████▎     | 435/1000 [39:06<50:48,  5.40s/it][Succeeded / Failed / Skipped / Total] 182 / 245 / 8 / 435:  44%|████▎     | 436/1000 [39:15<50:47,  5.40s/it][Succeeded / Failed / Skipped / Total] 182 / 246 / 8 / 436:  44%|████▎     | 436/1000 [39:15<50:47,  5.40s/it][Succeeded / Failed / Skipped / Total] 182 / 246 / 8 / 436:  44%|████▎     | 437/1000 [39:15<50:35,  5.39s/it][Succeeded / Failed / Skipped / Total] 182 / 247 / 8 / 437:  44%|████▎     | 437/1000 [39:15<50:35,  5.39s/it][Succeeded / Failed / Skipped / Total] 182 / 247 / 8 / 437:  44%|████▍     | 438/1000 [39:21<50:29,  5.39s/it][Succeeded / Failed / Skipped / Total] 183 / 247 / 8 / 438:  44%|████▍     | 438/1000 [39:21<50:29,  5.39s/it][Succeeded / Failed / Skipped / Total] 183 / 247 / 8 / 438:  44%|████▍     | 439/1000 [39:27<50:25,  5.39s/it]Tries to close fresh connections . --> Main method . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeFreshSelectConnections]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void [[main]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 431 ---------------------------------------------
Write info to info log --> Logs information about a address . --> Socre: 1.0

[[[[Adv]]]]: private void [[infoLog]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void [[after]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 432 ---------------------------------------------
Gets a boolean property . --> Returns the boolean value of the given key . --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[getBool]] ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property

[[[[Adv]]]]: public static boolean [[agent]] ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 433 ---------------------------------------------
Returns true if the request is a request timeout . --> Returns true if the client should receive a client . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isRequestTimeout]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean [[client]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 434 ---------------------------------------------
Retrieves the value of the given key . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . context . get ( key ) != null ? ( T ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 435 ---------------------------------------------
Get a property by its name . --> Gets alice . --> Socre: 1.0

[[[[Adv]]]]: public String [[getProperty]] ( String key ) { if ( properties == null ) { return null ; } return properties . getProperty ( key ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[alice]] ( String key ) { if ( properties == null ) { return null ; } return properties . getProperty ( key ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 436 ---------------------------------------------
Converts a request to a remoting command --> [[[FAILED]]]

[[[[Adv]]]]: protected RemotingCommand [[toRemotingCommand]] ( Object request , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand [[command]] = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand [[execution]] ( Object request , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand [[array]] = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 437 ---------------------------------------------
Retrieves a user processor by its class name . --> [[[FAILED]]]

[[[[Adv]]]]: public UserProcessor < ? > [[getUserProcessor]] ( String [[className]] ) { return StringUtils . isBlank ( [[className]] ) ? null : this . [[userProcessors]] . get ( [[className]] ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > [[list]] ( String [[integer]] ) { return StringUtils . isBlank ( [[integer]] ) ? null : this . [[i]] . get ( [[integer]] ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 438 ---------------------------------------------
Get a random connection . --> Returns a random field from the list of connections . --> Socre: 1.0

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int [[tries]] = 0 ; Connection [[result]] = null ; while ( ( [[result]] == null || ! [[result]] . isFine ( ) ) && [[tries]] ++ < MAX_TIMES ) { [[result]] = conns . get ( this . random . nextInt ( size ) ) ; } if ( [[result]] != null && ! [[result]] . isFine ( ) ) { [[result]] = null ; } return [[result]] ; }
[[[[Nl]]]]: get one connection randomly

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int [[rank]] = 0 ; Connection [[field]] = null ; while ( ( [[field]] == null || ! [[field]] . isFine ( ) ) && [[rank]] ++ < MAX_TIMES ) { [[field]] = conns . get ( this . random . nextInt ( size ) ) ; } if ( [[field]] != null && ! [[field]] . isFine ( ) ) { [[field]] = null ; } return [[field]] ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 439 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 184 / 247 / 8 / 439:  44%|████▍     | 439/1000 [39:27<50:25,  5.39s/it][Succeeded / Failed / Skipped / Total] 184 / 247 / 8 / 439:  44%|████▍     | 440/1000 [39:28<50:14,  5.38s/it][Succeeded / Failed / Skipped / Total] 184 / 248 / 8 / 440:  44%|████▍     | 440/1000 [39:28<50:14,  5.38s/it][Succeeded / Failed / Skipped / Total] 184 / 248 / 8 / 440:  44%|████▍     | 441/1000 [39:31<50:06,  5.38s/it][Succeeded / Failed / Skipped / Total] 185 / 248 / 8 / 441:  44%|████▍     | 441/1000 [39:31<50:06,  5.38s/it][Succeeded / Failed / Skipped / Total] 185 / 248 / 8 / 441:  44%|████▍     | 442/1000 [39:34<49:57,  5.37s/it][Succeeded / Failed / Skipped / Total] 186 / 248 / 8 / 442:  44%|████▍     | 442/1000 [39:34<49:57,  5.37s/it][Succeeded / Failed / Skipped / Total] 186 / 248 / 8 / 442:  44%|████▍     | 443/1000 [39:37<49:49,  5.37s/it][Succeeded / Failed / Skipped / Total] 187 / 248 / 8 / 443:  44%|████▍     | 443/1000 [39:37<49:49,  5.37s/it][Succeeded / Failed / Skipped / Total] 187 / 248 / 8 / 443:  44%|████▍     | 444/1000 [39:47<49:49,  5.38s/it][Succeeded / Failed / Skipped / Total] 188 / 248 / 8 / 444:  44%|████▍     | 444/1000 [39:47<49:49,  5.38s/it][Succeeded / Failed / Skipped / Total] 188 / 248 / 8 / 444:  44%|████▍     | 445/1000 [39:52<49:43,  5.38s/it]Deserialize response object . --> Deserialize RpcResponseCommand --> Socre: 1.0

[[[[Adv]]]]: private static Object [[toResponseObject]] ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) [[responseCommand]] ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object [[transformation]] ( ResponseCommand [[data]] ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) [[data]] ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 440 ---------------------------------------------
Resolve response object . --> [[[FAILED]]]

[[[[Adv]]]]: public static Object [[resolveResponseObject]] ( ResponseCommand responseCommand , String [[addr]] ) throws RemotingException { preProcess ( responseCommand , [[addr]] ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , [[addr]] , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object [[handler]] ( ResponseCommand responseCommand , String [[null]] ) throws RemotingException { preProcess ( responseCommand , [[null]] ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , [[null]] , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 441 ---------------------------------------------
detail of error message --> Convert RpcResponseCommand to string representation . --> Socre: 1.0

[[[[Adv]]]]: private static String [[detailErrMsg]] ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand [[resp]] = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( [[resp]] . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , [[resp]] . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String [[command]] ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand [[i]] = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( [[i]] . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , [[i]] . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 442 ---------------------------------------------
Print the connection trace log . --> This method is invoked after the invoke context . --> Socre: 1.0

[[[[Adv]]]]: public static void [[printConnectionTraceLog]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void [[after]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 443 ---------------------------------------------
Convert response command to a throwable . --> Returns the event --> Socre: 1.0

[[[[Adv]]]]: private static Throwable [[toThrowable]] ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) [[responseCommand]] ; resp . deserialize ( ) ; Object [[ex]] = resp . getResponseObject ( ) ; if ( [[ex]] != null && [[ex]] instanceof Throwable ) { return ( Throwable ) [[ex]] ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable [[event]] ( ResponseCommand [[commands]] ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) [[commands]] ; resp . deserialize ( ) ; Object [[path]] = resp . getResponseObject ( ) ; if ( [[path]] != null && [[path]] instanceof Throwable ) { return ( Throwable ) [[path]] ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 444 ---------------------------------------------
Creates an event loop group . --> Creates a new EventLoopGroup --> Socre: 1.0

[[[[Adv]]]]: public static EventLoopGroup [[newEventLoopGroup]] ( int [[nThreads]] , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( [[nThreads]] , threadFactory ) : new NioEventLoopGroup ( [[nThreads]] , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup [[c]] ( int [[b]] , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( [[b]] , threadFactory ) : new NioEventLoopGroup ( [[b]] , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 445 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 188 / 249 / 8 / 445:  44%|████▍     | 445/1000 [39:52<49:43,  5.38s/it][Succeeded / Failed / Skipped / Total] 188 / 249 / 8 / 445:  45%|████▍     | 446/1000 [39:58<49:38,  5.38s/it][Succeeded / Failed / Skipped / Total] 188 / 250 / 8 / 446:  45%|████▍     | 446/1000 [39:58<49:38,  5.38s/it][Succeeded / Failed / Skipped / Total] 188 / 250 / 8 / 446:  45%|████▍     | 447/1000 [40:03<49:33,  5.38s/it][Succeeded / Failed / Skipped / Total] 188 / 251 / 8 / 447:  45%|████▍     | 447/1000 [40:03<49:33,  5.38s/it][Succeeded / Failed / Skipped / Total] 188 / 251 / 8 / 447:  45%|████▍     | 448/1000 [40:06<49:25,  5.37s/it][Succeeded / Failed / Skipped / Total] 189 / 251 / 8 / 448:  45%|████▍     | 448/1000 [40:06<49:25,  5.37s/it][Succeeded / Failed / Skipped / Total] 189 / 251 / 8 / 448:  45%|████▍     | 449/1000 [40:07<49:14,  5.36s/it][Succeeded / Failed / Skipped / Total] 190 / 251 / 8 / 449:  45%|████▍     | 449/1000 [40:07<49:14,  5.36s/it][Succeeded / Failed / Skipped / Total] 190 / 251 / 8 / 449:  45%|████▌     | 450/1000 [40:16<49:13,  5.37s/it][Succeeded / Failed / Skipped / Total] 190 / 252 / 8 / 450:  45%|████▌     | 450/1000 [40:16<49:13,  5.37s/it][Succeeded / Failed / Skipped / Total] 190 / 252 / 8 / 450:  45%|████▌     | 451/1000 [40:19<49:04,  5.36s/it][Succeeded / Failed / Skipped / Total] 190 / 253 / 8 / 451:  45%|████▌     | 451/1000 [40:19<49:04,  5.36s/it][Succeeded / Failed / Skipped / Total] 190 / 253 / 8 / 451:  45%|████▌     | 452/1000 [40:23<48:58,  5.36s/it][Succeeded / Failed / Skipped / Total] 191 / 253 / 8 / 452:  45%|████▌     | 452/1000 [40:23<48:58,  5.36s/it][Succeeded / Failed / Skipped / Total] 191 / 253 / 8 / 452:  45%|████▌     | 453/1000 [40:27<48:50,  5.36s/it]Parses the remote address from the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress remote = channel . remoteAddress ( ) ; return doParse ( remote != null ? remote . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[bus]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress remote = channel . remoteAddress ( ) ; return doParse ( remote != null ? remote . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 446 ---------------------------------------------
Returns the local address of the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress [[local]] = [[channel]] . localAddress ( ) ; return doParse ( [[local]] != null ? [[local]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[control]] ( final Channel [[name]] ) { if ( null == [[name]] ) { return StringUtils . EMPTY ; } final SocketAddress [[foo]] = [[name]] . localAddress ( ) ; return doParse ( [[foo]] != null ? [[foo]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 447 ---------------------------------------------
Get the remote IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[var]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 448 ---------------------------------------------
Creates a RpcServerException from a Throwable . --> Helper method to end an RpcServerException --> Socre: 1.0

[[[[Adv]]]]: private RpcServerException [[createServerException]] ( Throwable [[t]] , String errMsg ) { String [[formattedErrMsg]] = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , [[t]] . getClass ( ) . getName ( ) , [[t]] . getMessage ( ) , errMsg ) ; RpcServerException [[e]] = new RpcServerException ( [[formattedErrMsg]] ) ; [[e]] . setStackTrace ( [[t]] . getStackTrace ( ) ) ; return [[e]] ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException [[end]] ( Throwable [[end]] , String errMsg ) { String [[string]] = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , [[end]] . getClass ( ) . getName ( ) , [[end]] . getMessage ( ) , errMsg ) ; RpcServerException [[event]] = new RpcServerException ( [[string]] ) ; [[event]] . setStackTrace ( [[end]] . getStackTrace ( ) ) ; return [[event]] ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 449 ---------------------------------------------
Returns the hostname of the remote host . --> Get console name --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[console]] ( final Channel [[map]] ) { if ( null == [[map]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[map]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 450 ---------------------------------------------
Returns the local IP address of the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalIP]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[local]] = ( InetSocketAddress ) channel . localAddress ( ) ; if ( [[local]] != null ) { return [[local]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String [[set]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[mode]] = ( InetSocketAddress ) channel . localAddress ( ) ; if ( [[mode]] != null ) { return [[mode]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 451 ---------------------------------------------
Get the remote port . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseRemotePort]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int [[thread]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 452 ---------------------------------------------
Get local port . --> Returns operating system name --> Socre: 1.0

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress [[local]] = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( [[local]] != null ) { return [[local]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[os]] ( final Channel [[number]] ) { if ( null == [[number]] ) { return - 1 ; } final InetSocketAddress [[channel]] = ( InetSocketAddress ) [[number]] . localAddress ( ) ; if ( [[channel]] != null ) { return [[channel]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 453 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 192 / 253 / 8 / 453:  45%|████▌     | 453/1000 [40:27<48:50,  5.36s/it][Succeeded / Failed / Skipped / Total] 192 / 253 / 8 / 453:  45%|████▌     | 454/1000 [40:32<48:45,  5.36s/it][Succeeded / Failed / Skipped / Total] 192 / 254 / 8 / 454:  45%|████▌     | 454/1000 [40:32<48:45,  5.36s/it][Succeeded / Failed / Skipped / Total] 192 / 254 / 8 / 454:  46%|████▌     | 455/1000 [40:35<48:37,  5.35s/it][Succeeded / Failed / Skipped / Total] 193 / 254 / 8 / 455:  46%|████▌     | 455/1000 [40:35<48:37,  5.35s/it][Succeeded / Failed / Skipped / Total] 193 / 254 / 8 / 455:  46%|████▌     | 456/1000 [40:40<48:31,  5.35s/it][Succeeded / Failed / Skipped / Total] 194 / 254 / 8 / 456:  46%|████▌     | 456/1000 [40:40<48:31,  5.35s/it][Succeeded / Failed / Skipped / Total] 194 / 254 / 8 / 456:  46%|████▌     | 457/1000 [40:43<48:23,  5.35s/it][Succeeded / Failed / Skipped / Total] 195 / 254 / 8 / 457:  46%|████▌     | 457/1000 [40:43<48:23,  5.35s/it][Succeeded / Failed / Skipped / Total] 195 / 254 / 8 / 457:  46%|████▌     | 458/1000 [40:48<48:17,  5.35s/it][Succeeded / Failed / Skipped / Total] 196 / 254 / 8 / 458:  46%|████▌     | 458/1000 [40:48<48:17,  5.35s/it][Succeeded / Failed / Skipped / Total] 196 / 254 / 8 / 458:  46%|████▌     | 459/1000 [40:49<48:06,  5.34s/it][Succeeded / Failed / Skipped / Total] 196 / 255 / 8 / 459:  46%|████▌     | 459/1000 [40:49<48:06,  5.34s/it][Succeeded / Failed / Skipped / Total] 196 / 255 / 8 / 459:  46%|████▌     | 460/1000 [40:51<47:58,  5.33s/it][Succeeded / Failed / Skipped / Total] 196 / 256 / 8 / 460:  46%|████▌     | 460/1000 [40:51<47:58,  5.33s/it][Succeeded / Failed / Skipped / Total] 196 / 256 / 8 / 460:  46%|████▌     | 461/1000 [40:57<47:53,  5.33s/it]Removes a connection . --> Remove and close the given length . --> Socre: 1.0

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[connection]] ) { if ( null == [[connection]] ) { return ; } boolean res = this . conns . remove ( [[connection]] ) ; if ( res ) { [[connection]] . decreaseRef ( ) ; } if ( [[connection]] . noRef ( ) ) { [[connection]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[length]] ) { if ( null == [[length]] ) { return ; } boolean res = this . conns . remove ( [[length]] ) ; if ( res ) { [[length]] . decreaseRef ( ) ; } if ( [[length]] . noRef ( ) ) { [[length]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 454 ---------------------------------------------
Parse socket address to host IP . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseSocketAddressToHostIp]] ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress [[addr]] = addrs . getAddress ( ) ; if ( null != [[addr]] ) { return [[addr]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String [[load]] ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress [[f]] = addrs . getAddress ( ) ; if ( null != [[f]] ) { return [[f]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 455 ---------------------------------------------
Gets the current connection . --> Gets the current user . --> Socre: 1.0

[[[[Adv]]]]: public Connection get ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . [[strategy]] . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection get ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . [[person]] . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 456 ---------------------------------------------
Adds a new connection . --> Adds an array to the pool . --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Connection [[connection]] ) { markAccess ( ) ; if ( null == [[connection]] ) { return ; } boolean [[res]] = this . conns . addIfAbsent ( [[connection]] ) ; if ( [[res]] ) { [[connection]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void [[alice]] ( Connection [[array]] ) { markAccess ( ) ; if ( null == [[array]] ) { return ; } boolean [[thread]] = this . conns . addIfAbsent ( [[array]] ) ; if ( [[thread]] ) { [[array]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 457 ---------------------------------------------
Gets custom serializer by class name . --> Loop through a string --> Socre: 1.0

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( String [[className]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[className]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer [[loop]] ( String [[a]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[a]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 458 ---------------------------------------------
Start connection monitor . --> Starts the connection monitor thread . --> Socre: 1.0

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "[[True]]" == "[[True]]" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "[[log]]" == "[[log]]" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 459 ---------------------------------------------
Register a custom serializer for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String className , CustomSerializer serializer ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( className , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + className + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[main]] ( String className , CustomSerializer serializer ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( className , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + className + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 460 ---------------------------------------------
Get custom serializer --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode code ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( code ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[load]] ( CommandCode code ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( code ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 461 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 197 / 256 / 8 / 461:  46%|████▌     | 461/1000 [40:57<47:53,  5.33s/it][Succeeded / Failed / Skipped / Total] 197 / 256 / 8 / 461:  46%|████▌     | 462/1000 [40:57<47:41,  5.32s/it][Succeeded / Failed / Skipped / Total] 197 / 256 / 9 / 462:  46%|████▌     | 462/1000 [40:57<47:41,  5.32s/it][Succeeded / Failed / Skipped / Total] 197 / 256 / 9 / 462:  46%|████▋     | 463/1000 [40:58<47:31,  5.31s/it][Succeeded / Failed / Skipped / Total] 198 / 256 / 9 / 463:  46%|████▋     | 463/1000 [40:58<47:31,  5.31s/it][Succeeded / Failed / Skipped / Total] 198 / 256 / 9 / 463:  46%|████▋     | 464/1000 [41:03<47:26,  5.31s/it][Succeeded / Failed / Skipped / Total] 198 / 257 / 9 / 464:  46%|████▋     | 464/1000 [41:03<47:26,  5.31s/it][Succeeded / Failed / Skipped / Total] 198 / 257 / 9 / 464:  46%|████▋     | 465/1000 [41:06<47:17,  5.30s/it][Succeeded / Failed / Skipped / Total] 199 / 257 / 9 / 465:  46%|████▋     | 465/1000 [41:06<47:17,  5.30s/it][Succeeded / Failed / Skipped / Total] 199 / 257 / 9 / 465:  47%|████▋     | 466/1000 [41:10<47:11,  5.30s/it][Succeeded / Failed / Skipped / Total] 200 / 257 / 9 / 466:  47%|████▋     | 466/1000 [41:10<47:11,  5.30s/it][Succeeded / Failed / Skipped / Total] 200 / 257 / 9 / 466:  47%|████▋     | 467/1000 [41:14<47:04,  5.30s/it][Succeeded / Failed / Skipped / Total] 201 / 257 / 9 / 467:  47%|████▋     | 467/1000 [41:14<47:04,  5.30s/it][Succeeded / Failed / Skipped / Total] 201 / 257 / 9 / 467:  47%|████▋     | 468/1000 [41:19<46:58,  5.30s/it][Succeeded / Failed / Skipped / Total] 201 / 258 / 9 / 468:  47%|████▋     | 468/1000 [41:19<46:58,  5.30s/it][Succeeded / Failed / Skipped / Total] 201 / 258 / 9 / 468:  47%|████▋     | 469/1000 [41:20<46:48,  5.29s/it]Initialize write buffer water mark . --> Main entry point . --> Socre: 1.0

[[[[Adv]]]]: private void [[initWriteBufferWaterMark]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void [[main]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 462 ---------------------------------------------
Batch message . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 463 ---------------------------------------------
Factory method for creating Frame . --> Factory method for creating frames . --> Socre: 1.0

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[opcode]] ) { if ( [[opcode]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[opcode]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode [[foo]] ) { if ( [[foo]] == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( [[foo]] ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 464 ---------------------------------------------
Registers custom serializer for command code . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode code , CustomSerializer [[serializer]] ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( code , [[serializer]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[assume]] ( CommandCode code , CustomSerializer [[list]] ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( code , [[list]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 465 ---------------------------------------------
Sets the code . --> Sets minimum . --> Socre: 1.0

[[[[Adv]]]]: public void [[setCode]] ( int code ) { this . code = code ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[min]] ( int code ) { this . code = code ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 466 ---------------------------------------------
Update the payload . --> Write argument . --> Socre: 1.0

[[[[Adv]]]]: private void [[updatePayload]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void [[argument]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 467 ---------------------------------------------
Check if the requested protocol contains the requested protocol . --> Selects a handshake state . --> Socre: 1.0

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[f]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 468 ---------------------------------------------
Check if the remote address is connected . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isConnected]] ( String [[remoteAddr]] ) { Url [[url]] = this . [[rpcRemoting]] . addressParser . parse ( [[remoteAddr]] ) ; return this . isConnected ( [[url]] ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean [[procedure]] ( String [[message]] ) { Url [[q]] = this . [[person]] . addressParser . parse ( [[message]] ) ; return this . isConnected ( [[q]] ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 469 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 202 / 258 / 9 / 469:  47%|████▋     | 469/1000 [41:20<46:48,  5.29s/it][Succeeded / Failed / Skipped / Total] 202 / 258 / 9 / 469:  47%|████▋     | 470/1000 [41:25<46:43,  5.29s/it][Succeeded / Failed / Skipped / Total] 203 / 258 / 9 / 470:  47%|████▋     | 470/1000 [41:25<46:43,  5.29s/it][Succeeded / Failed / Skipped / Total] 203 / 258 / 9 / 470:  47%|████▋     | 471/1000 [41:29<46:35,  5.29s/it][Succeeded / Failed / Skipped / Total] 204 / 258 / 9 / 471:  47%|████▋     | 471/1000 [41:29<46:35,  5.29s/it][Succeeded / Failed / Skipped / Total] 204 / 258 / 9 / 471:  47%|████▋     | 472/1000 [41:38<46:34,  5.29s/it][Succeeded / Failed / Skipped / Total] 205 / 258 / 9 / 472:  47%|████▋     | 472/1000 [41:38<46:34,  5.29s/it][Succeeded / Failed / Skipped / Total] 205 / 258 / 9 / 472:  47%|████▋     | 473/1000 [41:40<46:26,  5.29s/it][Succeeded / Failed / Skipped / Total] 206 / 258 / 9 / 473:  47%|████▋     | 473/1000 [41:40<46:26,  5.29s/it][Succeeded / Failed / Skipped / Total] 206 / 258 / 9 / 473:  47%|████▋     | 474/1000 [41:41<46:15,  5.28s/it][Succeeded / Failed / Skipped / Total] 206 / 259 / 9 / 474:  47%|████▋     | 474/1000 [41:41<46:15,  5.28s/it][Succeeded / Failed / Skipped / Total] 206 / 259 / 9 / 474:  48%|████▊     | 475/1000 [41:45<46:09,  5.27s/it][Succeeded / Failed / Skipped / Total] 207 / 259 / 9 / 475:  48%|████▊     | 475/1000 [41:45<46:09,  5.27s/it][Succeeded / Failed / Skipped / Total] 207 / 259 / 9 / 475:  48%|████▊     | 476/1000 [41:46<45:59,  5.27s/it]Validate that the payload is valid --> Writes a utf - 8 string --> Socre: 1.0

[[[[Adv]]]]: private void [[validateUtf8]] ( ByteBuffer [[payload]] , int mark ) throws InvalidDataException { try { [[payload]] . position ( [[payload]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[payload]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[payload]] . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void [[foo]] ( ByteBuffer [[j]] , int mark ) throws InvalidDataException { try { [[j]] . position ( [[j]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[j]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[j]] . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 470 ---------------------------------------------
Generate final key . --> Returns the encrypted password . --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[exit]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 471 ---------------------------------------------
Translate single frame length limit . --> Throws LimitExceededException . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long [[length]] ) throws LimitExceededException { if ( [[length]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[length]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[length]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[length]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[exception]] ( long [[foo]] ) throws LimitExceededException { if ( [[foo]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[foo]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[foo]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[foo]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 472 ---------------------------------------------
Logs runtime exception --> Calls onWebSocketMessage . --> Socre: 1.0

[[[[Adv]]]]: private void [[logRuntimeException]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void [[call]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 473 ---------------------------------------------
Processes a binary frame . --> Handles websocket message . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameBinary]] ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , [[frame]] . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void [[find]] ( WebSocketImpl webSocketImpl , Framedata [[ga]] ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , [[ga]] . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 474 ---------------------------------------------
Processes a frame --> [[[FAILED]]]

[[[[Adv]]]]: private void [[processFrameContinuousAndNonFin]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void [[empty]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 475 ---------------------------------------------
Translate a single frame size checker . --> Emit a message . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckPacketSize]] ( int [[maxpacketsize]] , int [[realpacketsize]] ) throws IncompleteException { if ( [[maxpacketsize]] < [[realpacketsize]] ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( [[realpacketsize]] ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void [[echo]] ( int [[ab]] , int [[c]] ) throws IncompleteException { if ( [[ab]] < [[c]] ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( [[c]] ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 476 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 208 / 259 / 9 / 476:  48%|████▊     | 476/1000 [41:46<45:59,  5.27s/it][Succeeded / Failed / Skipped / Total] 208 / 259 / 9 / 476:  48%|████▊     | 477/1000 [41:50<45:52,  5.26s/it][Succeeded / Failed / Skipped / Total] 209 / 259 / 9 / 477:  48%|████▊     | 477/1000 [41:50<45:52,  5.26s/it][Succeeded / Failed / Skipped / Total] 209 / 259 / 9 / 477:  48%|████▊     | 478/1000 [41:54<45:45,  5.26s/it][Succeeded / Failed / Skipped / Total] 209 / 260 / 9 / 478:  48%|████▊     | 478/1000 [41:54<45:45,  5.26s/it][Succeeded / Failed / Skipped / Total] 209 / 260 / 9 / 478:  48%|████▊     | 479/1000 [41:55<45:36,  5.25s/it][Succeeded / Failed / Skipped / Total] 209 / 261 / 9 / 479:  48%|████▊     | 479/1000 [41:55<45:36,  5.25s/it][Succeeded / Failed / Skipped / Total] 209 / 261 / 9 / 479:  48%|████▊     | 480/1000 [41:59<45:29,  5.25s/it][Succeeded / Failed / Skipped / Total] 210 / 261 / 9 / 480:  48%|████▊     | 480/1000 [41:59<45:29,  5.25s/it][Succeeded / Failed / Skipped / Total] 210 / 261 / 9 / 480:  48%|████▊     | 481/1000 [42:05<45:25,  5.25s/it]Processes a text message . --> Calls websocket message . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameText]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void [[call]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 477 ---------------------------------------------
Process a frame . --> Main method . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameClosing]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void [[main]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 478 ---------------------------------------------
Processes the next frame . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata [[frame]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[frame]] ; addToBufferList ( [[frame]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[block]] ( Framedata [[rt]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[rt]] ; addToBufferList ( [[rt]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 479 ---------------------------------------------
Processes the current frame . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[execute]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 480 ---------------------------------------------
Gets the payload from the buffer list . --> Index buffer . --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { resultingByteBuffer . put ( buffer ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[index]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { resultingByteBuffer . put ( buffer ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 481 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 211 / 261 / 9 / 481:  48%|████▊     | 481/1000 [42:05<45:25,  5.25s/it][Succeeded / Failed / Skipped / Total] 211 / 261 / 9 / 481:  48%|████▊     | 482/1000 [42:07<45:16,  5.24s/it][Succeeded / Failed / Skipped / Total] 212 / 261 / 9 / 482:  48%|████▊     | 482/1000 [42:07<45:16,  5.24s/it][Succeeded / Failed / Skipped / Total] 212 / 261 / 9 / 482:  48%|████▊     | 483/1000 [42:07<45:05,  5.23s/it][Succeeded / Failed / Skipped / Total] 213 / 261 / 9 / 483:  48%|████▊     | 483/1000 [42:07<45:05,  5.23s/it][Succeeded / Failed / Skipped / Total] 213 / 261 / 9 / 483:  48%|████▊     | 484/1000 [42:12<44:59,  5.23s/it][Succeeded / Failed / Skipped / Total] 214 / 261 / 9 / 484:  48%|████▊     | 484/1000 [42:12<44:59,  5.23s/it][Succeeded / Failed / Skipped / Total] 214 / 261 / 9 / 484:  48%|████▊     | 485/1000 [42:13<44:49,  5.22s/it][Succeeded / Failed / Skipped / Total] 215 / 261 / 9 / 485:  48%|████▊     | 485/1000 [42:13<44:49,  5.22s/it][Succeeded / Failed / Skipped / Total] 215 / 261 / 9 / 485:  49%|████▊     | 486/1000 [42:13<44:39,  5.21s/it][Succeeded / Failed / Skipped / Total] 216 / 261 / 9 / 486:  49%|████▊     | 486/1000 [42:13<44:39,  5.21s/it][Succeeded / Failed / Skipped / Total] 216 / 261 / 9 / 486:  49%|████▊     | 487/1000 [42:17<44:32,  5.21s/it][Succeeded / Failed / Skipped / Total] 217 / 261 / 9 / 487:  49%|████▊     | 487/1000 [42:17<44:32,  5.21s/it][Succeeded / Failed / Skipped / Total] 217 / 261 / 9 / 487:  49%|████▉     | 488/1000 [42:19<44:24,  5.20s/it]Checks if the limit is exceeded . --> Main method . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkBufferLimit]] ( ) throws LimitExceededException { long [[totalSize]] = getByteBufferListSize ( ) ; if ( [[totalSize]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[totalSize]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void [[main]] ( ) throws LimitExceededException { long [[code]] = getByteBufferListSize ( ) ; if ( [[code]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[code]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 482 ---------------------------------------------
Translate handshake . --> Appends at least one or more line tokens . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpServer]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder [[ator]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 483 ---------------------------------------------
Translate the handshake . --> Utility method to add an ant . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpClient]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder [[ant]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 484 ---------------------------------------------
Decodes the packet . --> Decodes a handshake message . --> Socre: 1.0

[[[[Adv]]]]: public void decode ( ByteBuffer [[socketBuffer]] ) { assert ( [[socketBuffer]] . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , [[socketBuffer]] . remaining ( ) , ( [[socketBuffer]] . remaining ( ) > 1000 ? "too big to display" : new String ( [[socketBuffer]] . array ( ) , [[socketBuffer]] . position ( ) , [[socketBuffer]] . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( [[socketBuffer]] ) ; } } else { if ( decodeHandshake ( [[socketBuffer]] ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != [[socketBuffer]] . hasRemaining ( ) || ! [[socketBuffer]] . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void decode ( ByteBuffer [[a]] ) { assert ( [[a]] . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , [[a]] . remaining ( ) , ( [[a]] . remaining ( ) > 1000 ? "too big to display" : new String ( [[a]] . array ( ) , [[a]] . position ( ) , [[a]] . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( [[a]] ) ; } } else { if ( decodeHandshake ( [[a]] ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != [[a]] . hasRemaining ( ) || ! [[a]] . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 485 ---------------------------------------------
Closes the connection . --> Add an invalid data exception . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToWrongHandshake]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void [[add]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 486 ---------------------------------------------
Send a connection to the server --> Called when an exception occurs . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[call]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 487 ---------------------------------------------
Returns the total size of the ByteBufferList in bytes . --> Count byte number . --> Socre: 1.0

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long [[totalSize]] = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer [[buffer]] : byteBufferList ) { [[totalSize]] += [[buffer]] . limit ( ) ; } } return [[totalSize]] ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[foo]] ( ) { long [[bit]] = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer [[pattern]] : byteBufferList ) { [[bit]] += [[pattern]] . limit ( ) ; } } return [[bit]] ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 488 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 218 / 261 / 9 / 488:  49%|████▉     | 488/1000 [42:19<44:24,  5.20s/it][Succeeded / Failed / Skipped / Total] 218 / 261 / 9 / 488:  49%|████▉     | 489/1000 [42:23<44:17,  5.20s/it][Succeeded / Failed / Skipped / Total] 218 / 262 / 9 / 489:  49%|████▉     | 489/1000 [42:23<44:17,  5.20s/it][Succeeded / Failed / Skipped / Total] 218 / 262 / 9 / 489:  49%|████▉     | 490/1000 [42:23<44:07,  5.19s/it][Succeeded / Failed / Skipped / Total] 219 / 262 / 9 / 490:  49%|████▉     | 490/1000 [42:23<44:07,  5.19s/it][Succeeded / Failed / Skipped / Total] 219 / 262 / 9 / 490:  49%|████▉     | 491/1000 [42:27<44:00,  5.19s/it][Succeeded / Failed / Skipped / Total] 220 / 262 / 9 / 491:  49%|████▉     | 491/1000 [42:27<44:00,  5.19s/it][Succeeded / Failed / Skipped / Total] 220 / 262 / 9 / 491:  49%|████▉     | 492/1000 [42:29<43:52,  5.18s/it][Succeeded / Failed / Skipped / Total] 221 / 262 / 9 / 492:  49%|████▉     | 492/1000 [42:29<43:52,  5.18s/it][Succeeded / Failed / Skipped / Total] 221 / 262 / 9 / 492:  49%|████▉     | 493/1000 [42:29<43:42,  5.17s/it]Reset the connection . --> Add the websocket . --> Socre: 1.0

[[[[Adv]]]]: private void [[reset]] ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect

[[[[Adv]]]]: private void [[add]] ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 489 ---------------------------------------------
Start the connect thread . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[client]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 490 ---------------------------------------------
Send a text to a WebSocketImpl --> Called from WebSocketImpl --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[send]] ( String [[text]] ) { if ( [[text]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[send]] ( draft . createFrames ( [[text]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void [[main]] ( String [[role]] ) { if ( [[role]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[main]] ( draft . createFrames ( [[role]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 491 ---------------------------------------------
Generate HTTP response from an error . --> todo support --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[generateHttpResponseDueToError]] ( int errorCode ) { String [[errorCodeDescription]] ; switch ( errorCode ) { case 404 : [[errorCodeDescription]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[errorCodeDescription]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[errorCodeDescription]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[errorCodeDescription]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[errorCodeDescription]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer [[test]] ( int errorCode ) { String [[drop]] ; switch ( errorCode ) { case 404 : [[drop]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[drop]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[drop]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[drop]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[drop]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 492 ---------------------------------------------
Send the handshake . --> Bridge method . --> Socre: 1.0

[[[[Adv]]]]: private void [[sendHandshake]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void [[bridge]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 493 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 222 / 262 / 9 / 493:  49%|████▉     | 493/1000 [42:29<43:42,  5.17s/it][Succeeded / Failed / Skipped / Total] 222 / 262 / 9 / 493:  49%|████▉     | 494/1000 [42:34<43:36,  5.17s/it][Succeeded / Failed / Skipped / Total] 223 / 262 / 9 / 494:  49%|████▉     | 494/1000 [42:34<43:36,  5.17s/it][Succeeded / Failed / Skipped / Total] 223 / 262 / 9 / 494:  50%|████▉     | 495/1000 [42:36<43:27,  5.16s/it][Succeeded / Failed / Skipped / Total] 224 / 262 / 9 / 495:  50%|████▉     | 495/1000 [42:36<43:27,  5.16s/it][Succeeded / Failed / Skipped / Total] 224 / 262 / 9 / 495:  50%|████▉     | 496/1000 [42:41<43:22,  5.16s/it][Succeeded / Failed / Skipped / Total] 225 / 262 / 9 / 496:  50%|████▉     | 496/1000 [42:41<43:22,  5.16s/it][Succeeded / Failed / Skipped / Total] 225 / 262 / 9 / 496:  50%|████▉     | 497/1000 [42:44<43:15,  5.16s/it][Succeeded / Failed / Skipped / Total] 225 / 263 / 9 / 497:  50%|████▉     | 497/1000 [42:44<43:15,  5.16s/it][Succeeded / Failed / Skipped / Total] 225 / 263 / 9 / 497:  50%|████▉     | 498/1000 [42:45<43:06,  5.15s/it][Succeeded / Failed / Skipped / Total] 225 / 264 / 9 / 498:  50%|████▉     | 498/1000 [42:45<43:06,  5.15s/it][Succeeded / Failed / Skipped / Total] 225 / 264 / 9 / 498:  50%|████▉     | 499/1000 [42:53<43:04,  5.16s/it][Succeeded / Failed / Skipped / Total] 226 / 264 / 9 / 499:  50%|████▉     | 499/1000 [42:53<43:04,  5.16s/it][Succeeded / Failed / Skipped / Total] 226 / 264 / 9 / 499:  50%|█████     | 500/1000 [43:02<43:02,  5.16s/it]Sets the connection lost in milliseconds . --> Called by websocket connection . --> Socre: 1.0

[[[[Adv]]]]: public void [[setConnectionLostTimeout]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void [[connected]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 494 ---------------------------------------------
Stops connection lost timer . --> Performs backup . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[backup]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 495 ---------------------------------------------
Starts the connection lost timer . --> Execute websocket shutdown . --> Socre: 1.0

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[execute]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 496 ---------------------------------------------
Cancel connection lost timer . --> Main method . --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[main]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 497 ---------------------------------------------
Returns the port . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getPort]] ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return port ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[difference]] ( ) { int port = uri . getPort ( ) ; if ( port == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return port ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 498 ---------------------------------------------
Restart the connection lost timeout . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[restartConnectionLostTimer]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void [[show]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 499 ---------------------------------------------
Stops the queue . --> Stop --> Socre: 1.0

[[[[Adv]]]]: public void stop ( int [[timeout]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "[[False]]" != "[[False]]" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void stop ( int [[hello]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "[[true]]" != "[[true]]" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 500 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 226 / 265 / 9 / 500:  50%|█████     | 500/1000 [43:02<43:02,  5.16s/it][Succeeded / Failed / Skipped / Total] 226 / 265 / 9 / 500:  50%|█████     | 501/1000 [43:04<42:53,  5.16s/it][Succeeded / Failed / Skipped / Total] 226 / 266 / 9 / 501:  50%|█████     | 501/1000 [43:04<42:53,  5.16s/it][Succeeded / Failed / Skipped / Total] 226 / 266 / 9 / 501:  50%|█████     | 502/1000 [43:10<42:49,  5.16s/it][Succeeded / Failed / Skipped / Total] 227 / 266 / 9 / 502:  50%|█████     | 502/1000 [43:10<42:49,  5.16s/it][Succeeded / Failed / Skipped / Total] 227 / 266 / 9 / 502:  50%|█████     | 503/1000 [43:10<42:39,  5.15s/it][Succeeded / Failed / Skipped / Total] 227 / 266 / 10 / 503:  50%|█████     | 503/1000 [43:10<42:39,  5.15s/it][Succeeded / Failed / Skipped / Total] 227 / 267 / 10 / 504:  50%|█████     | 504/1000 [43:10<42:29,  5.14s/it][Succeeded / Failed / Skipped / Total] 227 / 267 / 10 / 504:  50%|█████     | 505/1000 [43:11<42:20,  5.13s/it][Succeeded / Failed / Skipped / Total] 228 / 267 / 10 / 505:  50%|█████     | 505/1000 [43:11<42:20,  5.13s/it][Succeeded / Failed / Skipped / Total] 228 / 267 / 11 / 506:  51%|█████     | 506/1000 [43:11<42:10,  5.12s/it][Succeeded / Failed / Skipped / Total] 228 / 267 / 11 / 506:  51%|█████     | 507/1000 [43:12<42:01,  5.11s/it]Sends a ping frame . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[onWebsocketPing]] ( WebSocket [[conn]] , Framedata [[f]] ) { [[conn]] . sendFrame ( new PongFrame ( ( PingFrame ) [[f]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void [[link]] ( WebSocket [[d]] , Framedata [[t]] ) { [[d]] . sendFrame ( new PongFrame ( ( PingFrame ) [[t]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 501 ---------------------------------------------
Get the port . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getPort]] ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[main]] ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 502 ---------------------------------------------
Accepts a single connection . --> Accepts an iterator . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAccept]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation

[[[[Adv]]]]: private void [[accept]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 503 ---------------------------------------------
Reads data from the input . --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 504 ---------------------------------------------
Initiate handshake . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 505 ---------------------------------------------
Perform additional read . --> Adds a new connection to the queue . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAdditionalRead]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read

[[[[Adv]]]]: private void [[add]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 506 ---------------------------------------------
Ensure that single thread is currently open . --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 507 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 228 / 268 / 11 / 507:  51%|█████     | 507/1000 [43:12<42:01,  5.11s/it][Succeeded / Failed / Skipped / Total] 229 / 268 / 11 / 508:  51%|█████     | 508/1000 [43:15<41:53,  5.11s/it][Succeeded / Failed / Skipped / Total] 229 / 268 / 11 / 508:  51%|█████     | 509/1000 [43:17<41:45,  5.10s/it][Succeeded / Failed / Skipped / Total] 230 / 268 / 11 / 509:  51%|█████     | 509/1000 [43:17<41:45,  5.10s/it][Succeeded / Failed / Skipped / Total] 231 / 268 / 11 / 510:  51%|█████     | 510/1000 [43:18<41:36,  5.09s/it][Succeeded / Failed / Skipped / Total] 231 / 268 / 11 / 510:  51%|█████     | 511/1000 [43:22<41:30,  5.09s/it][Succeeded / Failed / Skipped / Total] 232 / 268 / 11 / 511:  51%|█████     | 511/1000 [43:22<41:30,  5.09s/it]Handles a connection lost ping . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[executeConnectionLostDetection]] ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl [[webSocketImpl]] = ( WebSocketImpl ) webSocket ; if ( [[webSocketImpl]] . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , [[webSocketImpl]] ) ; [[webSocketImpl]] . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( [[webSocketImpl]] . isOpen ( ) ) { [[webSocketImpl]] . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , [[webSocketImpl]] ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void [[call]] ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl [[result]] = ( WebSocketImpl ) webSocket ; if ( [[result]] . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , [[result]] ) ; [[result]] . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( [[result]] . isOpen ( ) ) { [[result]] . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , [[result]] ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 508 ---------------------------------------------
Handles a single write . --> Batch batch read . --> Socre: 1.0

[[[[Adv]]]]: private void [[doWrite]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation

[[[[Adv]]]]: private void [[batch]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 509 ---------------------------------------------
Setup selector and server thread . --> Fetches web socket . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doSetupSelectorAndServerThread]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean [[fetch]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 510 ---------------------------------------------
Performs shutdown . --> Close all decoders . --> Socre: 1.0

[[[[Adv]]]]: private void [[doServerShutdown]] ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown

[[[[Adv]]]]: private void [[add]] ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 511 ---------------------------------------------
Broadcast data to all clients . --> Called after data has been received . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[broadcast]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void [[after]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[after]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 512 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 233 / 268 / 11 / 512:  51%|█████     | 512/1000 [43:26<41:23,  5.09s/it][Succeeded / Failed / Skipped / Total] 233 / 268 / 11 / 512:  51%|█████▏    | 513/1000 [43:28<41:16,  5.08s/it][Succeeded / Failed / Skipped / Total] 234 / 268 / 11 / 513:  51%|█████▏    | 513/1000 [43:28<41:16,  5.08s/it][Succeeded / Failed / Skipped / Total] 235 / 268 / 11 / 514:  51%|█████▏    | 514/1000 [43:29<41:07,  5.08s/it][Succeeded / Failed / Skipped / Total] 235 / 268 / 11 / 514:  52%|█████▏    | 515/1000 [43:32<41:00,  5.07s/it][Succeeded / Failed / Skipped / Total] 235 / 269 / 11 / 515:  52%|█████▏    | 515/1000 [43:32<41:00,  5.07s/it][Succeeded / Failed / Skipped / Total] 236 / 269 / 11 / 516:  52%|█████▏    | 516/1000 [43:33<40:51,  5.06s/it][Succeeded / Failed / Skipped / Total] 236 / 269 / 11 / 516:  52%|█████▏    | 517/1000 [43:36<40:43,  5.06s/it][Succeeded / Failed / Skipped / Total] 237 / 269 / 11 / 517:  52%|█████▏    | 517/1000 [43:36<40:43,  5.06s/it][Succeeded / Failed / Skipped / Total] 238 / 269 / 11 / 518:  52%|█████▏    | 518/1000 [43:45<40:42,  5.07s/it][Succeeded / Failed / Skipped / Total] 238 / 269 / 11 / 518:  52%|█████▏    | 519/1000 [43:45<40:33,  5.06s/it][Succeeded / Failed / Skipped / Total] 239 / 269 / 11 / 519:  52%|█████▏    | 519/1000 [43:45<40:33,  5.06s/it]Broadcast data to all registered clients . --> Performs a broadcast broadcast . --> Socre: 1.0

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > [[clients]] ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : [[clients]] ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > [[b]] ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : [[b]] ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 513 ---------------------------------------------
Fills the frames from a draft --> Assumes that a draft has already been created --> Socre: 1.0

[[[[Adv]]]]: private void [[fillFrames]] ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast

[[[[Adv]]]]: private void [[assume]] ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , "False" != "False" ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 514 ---------------------------------------------
Broadcast a text to all clients . --> End the multicast channel . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( String [[text]] , Collection < WebSocket > clients ) { if ( [[text]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[text]] , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void [[end]] ( String [[arrays]] , Collection < WebSocket > clients ) { if ( [[arrays]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[arrays]] , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 515 ---------------------------------------------
Gets the socket . --> [[[FAILED]]]

[[[[Adv]]]]: private Socket [[getSocket]] ( WebSocket [[conn]] ) { WebSocketImpl impl = ( WebSocketImpl ) [[conn]] ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket [[bit]] ( WebSocket [[line]] ) { WebSocketImpl impl = ( WebSocketImpl ) [[line]] ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 516 ---------------------------------------------
Transfers source to destination . --> Puts source into destination buffer . --> Socre: 1.0

[[[[Adv]]]]: public static int [[transferByteBuffer]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int [[di]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 517 ---------------------------------------------
Starts the entity manager . --> Register a new EntityManagerFactory --> Socre: 1.0

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[ft]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 518 ---------------------------------------------
Converts the given arguments to Scala buffer . --> Convenience method for generic operations --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... [[args]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[args]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[generic]] ( final Object ... [[client]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[client]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 519 ---------------------------------------------
Enables a transaction with a transaction . --> Performs like like query --> Socre: 1.0

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > [[block]] ) { [[withTransaction]] ( em -> { [[block]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[like]] ( Consumer < EntityManager > [[com]] ) { [[like]] ( em -> { [[com]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 520 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 239 / 270 / 11 / 520:  52%|█████▏    | 520/1000 [43:51<40:28,  5.06s/it][Succeeded / Failed / Skipped / Total] 239 / 270 / 11 / 520:  52%|█████▏    | 521/1000 [43:54<40:22,  5.06s/it][Succeeded / Failed / Skipped / Total] 240 / 270 / 11 / 521:  52%|█████▏    | 521/1000 [43:54<40:22,  5.06s/it][Succeeded / Failed / Skipped / Total] 240 / 271 / 11 / 522:  52%|█████▏    | 522/1000 [43:56<40:14,  5.05s/it][Succeeded / Failed / Skipped / Total] 240 / 271 / 11 / 522:  52%|█████▏    | 523/1000 [44:12<40:19,  5.07s/it][Succeeded / Failed / Skipped / Total] 240 / 272 / 11 / 523:  52%|█████▏    | 523/1000 [44:12<40:19,  5.07s/it][Succeeded / Failed / Skipped / Total] 240 / 272 / 11 / 523:  52%|█████▏    | 524/1000 [44:20<40:17,  5.08s/it][Succeeded / Failed / Skipped / Total] 240 / 273 / 11 / 524:  52%|█████▏    | 524/1000 [44:20<40:17,  5.08s/it][Succeeded / Failed / Skipped / Total] 240 / 273 / 11 / 524:  52%|█████▎    | 525/1000 [44:21<40:08,  5.07s/it][Succeeded / Failed / Skipped / Total] 240 / 274 / 11 / 525:  52%|█████▎    | 525/1000 [44:21<40:08,  5.07s/it][Succeeded / Failed / Skipped / Total] 240 / 274 / 11 / 525:  53%|█████▎    | 526/1000 [44:27<40:03,  5.07s/it][Succeeded / Failed / Skipped / Total] 240 / 275 / 11 / 526:  53%|█████▎    | 526/1000 [44:27<40:03,  5.07s/it][Succeeded / Failed / Skipped / Total] 240 / 275 / 11 / 526:  53%|█████▎    | 527/1000 [44:35<40:01,  5.08s/it][Succeeded / Failed / Skipped / Total] 240 / 276 / 11 / 527:  53%|█████▎    | 527/1000 [44:35<40:01,  5.08s/it][Succeeded / Failed / Skipped / Total] 240 / 276 / 11 / 527:  53%|█████▎    | 528/1000 [44:36<39:52,  5.07s/it][Succeeded / Failed / Skipped / Total] 241 / 276 / 11 / 528:  53%|█████▎    | 528/1000 [44:36<39:52,  5.07s/it][Succeeded / Failed / Skipped / Total] 241 / 276 / 11 / 528:  53%|█████▎    | 529/1000 [44:39<39:45,  5.07s/it][Succeeded / Failed / Skipped / Total] 241 / 277 / 11 / 529:  53%|█████▎    | 529/1000 [44:39<39:45,  5.07s/it][Succeeded / Failed / Skipped / Total] 241 / 277 / 11 / 529:  53%|█████▎    | 530/1000 [44:47<39:42,  5.07s/it][Succeeded / Failed / Skipped / Total] 242 / 277 / 11 / 530:  53%|█████▎    | 530/1000 [44:47<39:42,  5.07s/it][Succeeded / Failed / Skipped / Total] 242 / 277 / 11 / 530:  53%|█████▎    | 531/1000 [44:50<39:36,  5.07s/it]Returns the entity manager for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( String name ) { EntityManagerFactory emf = emfs . get ( name ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager [[bug]] ( String name ) { EntityManagerFactory emf = emfs . get ( name ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 521 ---------------------------------------------
Gets a localized message . --> Exchange a list of key - value pairs with arguments --> Socre: 1.0

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String [[exchange]] ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 522 ---------------------------------------------
Wraps the given arguments if necessary . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[wrapArgsToListIfNeeded]] ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[result]] ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 523 ---------------------------------------------
Display preferred messages for this request . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Http . RequestHeader request ) { play . api . i18n . Messages [[msgs]] = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages [[header]] ( Http . RequestHeader request ) { play . api . i18n . Messages [[sent]] = messages . preferred ( request ) ; return new MessagesImpl ( new Lang ( [[sent]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 524 ---------------------------------------------
Checks if key is defined at the specified key . --> [[[FAILED]]]

[[[[Adv]]]]: public Boolean isDefinedAt ( play . api . i18n . Lang [[lang]] , String [[key]] ) { return messages . isDefinedAt ( [[key]] , [[lang]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean isDefinedAt ( play . api . i18n . Lang [[bridge]] , String [[strings]] ) { return messages . isDefinedAt ( [[strings]] , [[bridge]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 525 ---------------------------------------------
Gets the localized message . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang [[lang]] , String [[key]] , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[key]] , scalaArgs , [[lang]] ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String [[transfer]] ( play . api . i18n . Lang [[box]] , String [[format]] , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[format]] , scalaArgs , [[box]] ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 526 ---------------------------------------------
Returns the preferred messages for this language . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Collection < Lang > candidates ) { Seq < Lang > [[cs]] = Scala . asScala ( candidates ) ; play . api . i18n . Messages [[msgs]] = messages . preferred ( ( Seq ) [[cs]] ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages [[group]] ( Collection < Lang > candidates ) { Seq < Lang > [[challenge]] = Scala . asScala ( candidates ) ; play . api . i18n . Messages [[how]] = messages . preferred ( ( Seq ) [[challenge]] ) ; return new MessagesImpl ( new Lang ( [[how]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 527 ---------------------------------------------
Define a set of bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[REPLACEME0]] ( play . api . inject . Binding < ? > ... [[REPLACEME0]] ) { return [[REPLACEME0]] ( Guiceable . bindings ( [[REPLACEME0]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .

[[[[Adv]]]]: public final Self [[bus]] ( play . api . inject . Binding < ? > ... [[bus]] ) { return [[bus]] ( Guiceable . bindings ( [[bus]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 528 ---------------------------------------------
Adds bindings for the given modules . --> Define a new method with the given file --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( play . api . inject . Module ... [[modules]] ) { return [[bindings]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self [[method]] ( play . api . inject . Module ... [[file]] ) { return [[method]] ( Guiceable . [[file]] ( [[file]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 529 ---------------------------------------------
Convenience factory method . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[bindings]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . bindings ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self [[broken]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . bindings ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 530 ---------------------------------------------
Overrides the delegate set of given modules . --> Execute a set of delegate functions --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . overrides ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self [[execution]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . overrides ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 531 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 243 / 277 / 11 / 531:  53%|█████▎    | 531/1000 [44:50<39:36,  5.07s/it][Succeeded / Failed / Skipped / Total] 243 / 277 / 11 / 531:  53%|█████▎    | 532/1000 [44:51<39:28,  5.06s/it][Succeeded / Failed / Skipped / Total] 244 / 277 / 11 / 532:  53%|█████▎    | 532/1000 [44:51<39:28,  5.06s/it][Succeeded / Failed / Skipped / Total] 244 / 277 / 11 / 532:  53%|█████▎    | 533/1000 [44:55<39:22,  5.06s/it][Succeeded / Failed / Skipped / Total] 245 / 277 / 11 / 533:  53%|█████▎    | 533/1000 [44:55<39:22,  5.06s/it][Succeeded / Failed / Skipped / Total] 245 / 277 / 11 / 533:  53%|█████▎    | 534/1000 [44:56<39:13,  5.05s/it][Succeeded / Failed / Skipped / Total] 245 / 278 / 11 / 534:  53%|█████▎    | 534/1000 [44:56<39:13,  5.05s/it][Succeeded / Failed / Skipped / Total] 245 / 278 / 11 / 534:  54%|█████▎    | 535/1000 [44:57<39:04,  5.04s/it][Succeeded / Failed / Skipped / Total] 245 / 278 / 12 / 535:  54%|█████▎    | 535/1000 [44:57<39:04,  5.04s/it][Succeeded / Failed / Skipped / Total] 245 / 278 / 12 / 535:  54%|█████▎    | 536/1000 [44:57<38:54,  5.03s/it][Succeeded / Failed / Skipped / Total] 245 / 278 / 13 / 536:  54%|█████▎    | 536/1000 [44:57<38:54,  5.03s/it][Succeeded / Failed / Skipped / Total] 245 / 278 / 13 / 536:  54%|█████▎    | 537/1000 [45:02<38:50,  5.03s/it][Succeeded / Failed / Skipped / Total] 245 / 279 / 13 / 537:  54%|█████▎    | 537/1000 [45:02<38:50,  5.03s/it][Succeeded / Failed / Skipped / Total] 245 / 279 / 13 / 537:  54%|█████▍    | 538/1000 [45:03<38:41,  5.02s/it][Succeeded / Failed / Skipped / Total] 245 / 280 / 13 / 538:  54%|█████▍    | 538/1000 [45:03<38:41,  5.02s/it][Succeeded / Failed / Skipped / Total] 245 / 280 / 13 / 538:  54%|█████▍    | 539/1000 [45:04<38:32,  5.02s/it][Succeeded / Failed / Skipped / Total] 245 / 281 / 13 / 539:  54%|█████▍    | 539/1000 [45:04<38:32,  5.02s/it][Succeeded / Failed / Skipped / Total] 245 / 281 / 13 / 539:  54%|█████▍    | 540/1000 [45:19<38:36,  5.04s/it][Succeeded / Failed / Skipped / Total] 245 / 282 / 13 / 540:  54%|█████▍    | 540/1000 [45:19<38:36,  5.04s/it][Succeeded / Failed / Skipped / Total] 245 / 282 / 13 / 540:  54%|█████▍    | 541/1000 [45:27<38:33,  5.04s/it][Succeeded / Failed / Skipped / Total] 245 / 283 / 13 / 541:  54%|█████▍    | 541/1000 [45:27<38:33,  5.04s/it][Succeeded / Failed / Skipped / Total] 245 / 283 / 13 / 541:  54%|█████▍    | 542/1000 [45:29<38:26,  5.04s/it][Succeeded / Failed / Skipped / Total] 246 / 283 / 13 / 542:  54%|█████▍    | 542/1000 [45:29<38:26,  5.04s/it][Succeeded / Failed / Skipped / Total] 246 / 283 / 13 / 542:  54%|█████▍    | 543/1000 [45:34<38:21,  5.04s/it][Succeeded / Failed / Skipped / Total] 246 / 284 / 13 / 543:  54%|█████▍    | 543/1000 [45:34<38:21,  5.04s/it][Succeeded / Failed / Skipped / Total] 246 / 284 / 13 / 543:  54%|█████▍    | 544/1000 [45:36<38:13,  5.03s/it]Set the language of the result . --> Encode operator --> Socre: 1.0

[[[[Adv]]]]: public Result [[setLang]] ( Result result , Lang [[lang]] ) { return messages . setLang ( result . asScala ( ) , [[lang]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result [[operator]] ( Result result , Lang [[data]] ) { return messages . setLang ( result . asScala ( ) , [[data]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 532 ---------------------------------------------
Set overrides the default overrides . --> Add a controller to the module --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Module ... [[modules]] ) { return [[overrides]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self [[controller]] ( play . api . inject . Module ... [[com]] ) { return [[controller]] ( Guiceable . [[com]] ( [[com]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 533 ---------------------------------------------
Disable the given modules . --> Defines a path to be executed on the server --> Socre: 1.0

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[path]] ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 534 ---------------------------------------------
Sets the overrides of the specified bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[overrides]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self [[method]] ( play . api . inject . Binding < ? > ... [[page]] ) { return [[method]] ( Guiceable . [[page]] ( [[page]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 535 ---------------------------------------------
Static factory method . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static < A , B > Tuple < A , B > Tuple ( A a , B b ) { return new Tuple < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 536 ---------------------------------------------
Static factory method for creating Tuple5 objects . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static < A , B , C , D , E > Tuple5 < A , B , C , D , E > Tuple5 ( A a , B b , C c , D d , E e ) { return new Tuple5 < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 537 ---------------------------------------------
Call the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public CompletionStage < Result > [[call]] ( Request [[req]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > [[foo]] ( Request [[log]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 538 ---------------------------------------------
Converts an annotation into a Java binding . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[stage]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 539 ---------------------------------------------
Gets an existing file . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > [[getExistingFile]] ( String [[relativePath]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[relativePath]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > [[fix]] ( String [[empty]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[empty]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 540 ---------------------------------------------
Converts the given ExecutionContext to Executor . --> [[[FAILED]]]

[[[[Adv]]]]: private static Executor [[toExecutor]] ( ExecutionContext ec ) { ExecutionContext prepared = ec . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor [[session]] ( ExecutionContext ec ) { ExecutionContext prepared = ec . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 541 ---------------------------------------------
Creates a JAConfig configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[of]] ( String name , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig [[log]] ( String name , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 542 ---------------------------------------------
Create a stream of bytes . --> meta data --> Socre: 1.0

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[string]] ( String [[callbackName]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[comet]] ( String [[s]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[s]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 543 ---------------------------------------------
Creates a default JAConfig . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[of]] ( String n1 , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig [[mode]] ( String n1 , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 544 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 246 / 285 / 13 / 544:  54%|█████▍    | 544/1000 [45:36<38:13,  5.03s/it][Succeeded / Failed / Skipped / Total] 246 / 285 / 13 / 544:  55%|█████▍    | 545/1000 [45:40<38:07,  5.03s/it][Succeeded / Failed / Skipped / Total] 246 / 286 / 13 / 545:  55%|█████▍    | 545/1000 [45:40<38:07,  5.03s/it][Succeeded / Failed / Skipped / Total] 246 / 286 / 13 / 545:  55%|█████▍    | 546/1000 [45:42<37:59,  5.02s/it][Succeeded / Failed / Skipped / Total] 246 / 287 / 13 / 546:  55%|█████▍    | 546/1000 [45:42<37:59,  5.02s/it][Succeeded / Failed / Skipped / Total] 246 / 287 / 13 / 546:  55%|█████▍    | 547/1000 [45:47<37:55,  5.02s/it][Succeeded / Failed / Skipped / Total] 246 / 288 / 13 / 547:  55%|█████▍    | 547/1000 [45:47<37:55,  5.02s/it][Succeeded / Failed / Skipped / Total] 246 / 288 / 13 / 547:  55%|█████▍    | 548/1000 [46:01<37:57,  5.04s/it][Succeeded / Failed / Skipped / Total] 246 / 289 / 13 / 548:  55%|█████▍    | 548/1000 [46:01<37:57,  5.04s/it][Succeeded / Failed / Skipped / Total] 246 / 289 / 13 / 548:  55%|█████▍    | 549/1000 [46:01<37:48,  5.03s/it][Succeeded / Failed / Skipped / Total] 247 / 289 / 13 / 549:  55%|█████▍    | 549/1000 [46:01<37:48,  5.03s/it][Succeeded / Failed / Skipped / Total] 247 / 289 / 13 / 549:  55%|█████▌    | 550/1000 [46:05<37:42,  5.03s/it][Succeeded / Failed / Skipped / Total] 247 / 290 / 13 / 550:  55%|█████▌    | 550/1000 [46:05<37:42,  5.03s/it][Succeeded / Failed / Skipped / Total] 247 / 290 / 13 / 550:  55%|█████▌    | 551/1000 [46:09<37:37,  5.03s/it]Create a new instance from a map of properties . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[from]] ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig [[at]] ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 545 ---------------------------------------------
Create a JsonNode for JSON nodes . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[json]] ( String callbackName ) { return Flow . of ( JsonNode . class ) . map ( [[json]] -> { return ByteString . fromString ( Json . stringify ( [[json]] ) ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[be]] ( String callbackName ) { return Flow . of ( JsonNode . class ) . map ( [[be]] -> { return ByteString . fromString ( Json . stringify ( [[be]] ) ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 546 ---------------------------------------------
Adds a mapped constraint for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public < T [[extends]] ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T [[end]] ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 547 ---------------------------------------------
Returns a new instance of the given key . --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < T extends ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 548 ---------------------------------------------
Handle bad request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader request , String [[message]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , [[message]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[construct]] ( RequestHeader request , String [[result]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , [[result]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 549 ---------------------------------------------
Display a forbidden page . --> Override this method for subclasses --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onForbidden]] ( RequestHeader request , String [[message]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > [[execution]] ( RequestHeader request , String [[executed]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 550 ---------------------------------------------
Invokes the onClientError with the given status code . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onClientError]] ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[test]] ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 551 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 247 / 291 / 13 / 551:  55%|█████▌    | 551/1000 [46:09<37:37,  5.03s/it][Succeeded / Failed / Skipped / Total] 247 / 291 / 13 / 551:  55%|█████▌    | 552/1000 [46:11<37:29,  5.02s/it][Succeeded / Failed / Skipped / Total] 248 / 291 / 13 / 552:  55%|█████▌    | 552/1000 [46:11<37:29,  5.02s/it][Succeeded / Failed / Skipped / Total] 248 / 291 / 13 / 552:  55%|█████▌    | 553/1000 [46:21<37:28,  5.03s/it][Succeeded / Failed / Skipped / Total] 248 / 292 / 13 / 553:  55%|█████▌    | 553/1000 [46:21<37:28,  5.03s/it][Succeeded / Failed / Skipped / Total] 248 / 292 / 13 / 553:  55%|█████▌    | 554/1000 [46:24<37:21,  5.03s/it][Succeeded / Failed / Skipped / Total] 248 / 293 / 13 / 554:  55%|█████▌    | 554/1000 [46:24<37:21,  5.03s/it][Succeeded / Failed / Skipped / Total] 248 / 293 / 13 / 554:  56%|█████▌    | 555/1000 [46:30<37:17,  5.03s/it][Succeeded / Failed / Skipped / Total] 248 / 294 / 13 / 555:  56%|█████▌    | 555/1000 [46:30<37:17,  5.03s/it][Succeeded / Failed / Skipped / Total] 249 / 294 / 13 / 556:  56%|█████▌    | 556/1000 [46:30<37:08,  5.02s/it][Succeeded / Failed / Skipped / Total] 249 / 294 / 13 / 556:  56%|█████▌    | 557/1000 [46:38<37:06,  5.02s/it][Succeeded / Failed / Skipped / Total] 249 / 295 / 13 / 557:  56%|█████▌    | 557/1000 [46:38<37:06,  5.02s/it]Returns the matching method matching the given name and parameter types . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > cls , final String [[methodName]] , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( [[methodName]] , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[declare]] ( final Class < ? > cls , final String [[c]] , final Class < ? > ... parameterTypes ) { try { final Method method = cls . getMethod ( [[c]] , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 552 ---------------------------------------------
Logs internal error . --> Print error message --> Socre: 1.0

[[[[Adv]]]]: protected void [[logServerError]] ( RequestHeader request , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , request . method ( ) , request . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void [[var]] ( RequestHeader request , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , request . method ( ) , request . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 553 ---------------------------------------------
Handles not found exceptions . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onNotFound]] ( RequestHeader request , String [[message]] ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > [[o]] ( RequestHeader request , String [[operator]] ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 554 ---------------------------------------------
Convert a throwable to useful exception --> [[[FAILED]]]

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[methods]] ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 555 ---------------------------------------------
Handle error rendering . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onDevServerError ( RequestHeader [[request]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > onDevServerError ( RequestHeader [[invalid]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , [[invalid]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 556 ---------------------------------------------
Handles server error . --> region ServerException --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onServerError]] ( RequestHeader [[request]] , Throwable exception ) { try { UsefulException [[usefulException]] = throwableToUsefulException ( exception ) ; logServerError ( [[request]] , [[usefulException]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[request]] , [[usefulException]] ) ; default : return onDevServerError ( [[request]] , [[usefulException]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[get]] ( RequestHeader [[point]] , Throwable exception ) { try { UsefulException [[t]] = throwableToUsefulException ( exception ) ; logServerError ( [[point]] , [[t]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[point]] , [[t]] ) ; default : return onDevServerError ( [[point]] , [[t]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 557 ---------------------------------------------
Default implementation for error rendering . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onProdServerError]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > [[by]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 558 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 250 / 295 / 13 / 558:  56%|█████▌    | 558/1000 [46:39<36:57,  5.02s/it][Succeeded / Failed / Skipped / Total] 250 / 295 / 13 / 558:  56%|█████▌    | 559/1000 [46:48<36:55,  5.02s/it][Succeeded / Failed / Skipped / Total] 250 / 296 / 13 / 559:  56%|█████▌    | 559/1000 [46:48<36:55,  5.02s/it][Succeeded / Failed / Skipped / Total] 251 / 296 / 13 / 560:  56%|█████▌    | 560/1000 [46:56<36:53,  5.03s/it][Succeeded / Failed / Skipped / Total] 251 / 296 / 13 / 560:  56%|█████▌    | 561/1000 [46:56<36:44,  5.02s/it][Succeeded / Failed / Skipped / Total] 252 / 296 / 13 / 561:  56%|█████▌    | 561/1000 [46:56<36:44,  5.02s/it][Succeeded / Failed / Skipped / Total] 252 / 297 / 13 / 562:  56%|█████▌    | 562/1000 [47:10<36:45,  5.04s/it][Succeeded / Failed / Skipped / Total] 252 / 297 / 13 / 562:  56%|█████▋    | 563/1000 [47:21<36:45,  5.05s/it][Succeeded / Failed / Skipped / Total] 252 / 298 / 13 / 563:  56%|█████▋    | 563/1000 [47:21<36:45,  5.05s/it][Succeeded / Failed / Skipped / Total] 252 / 298 / 13 / 563:  56%|█████▋    | 564/1000 [47:25<36:39,  5.04s/it][Succeeded / Failed / Skipped / Total] 252 / 299 / 13 / 564:  56%|█████▋    | 564/1000 [47:25<36:39,  5.04s/it][Succeeded / Failed / Skipped / Total] 252 / 299 / 13 / 564:  56%|█████▋    | 565/1000 [47:29<36:34,  5.04s/it][Succeeded / Failed / Skipped / Total] 253 / 299 / 13 / 565:  56%|█████▋    | 565/1000 [47:29<36:34,  5.04s/it][Succeeded / Failed / Skipped / Total] 253 / 299 / 13 / 565:  57%|█████▋    | 566/1000 [47:31<36:26,  5.04s/it]Creates a build doc handler for a given directory . --> On build doc . --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base ) { return [[fromDirectoryAndJar]] ( directory , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[on]] ( File directory , JarFile jarFile , String base ) { return [[on]] ( directory , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 559 ---------------------------------------------
Creates a new documentation handler for the given directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File directory ) { FileRepository repo = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[parameter]] ( File directory ) { FileRepository repo = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 560 ---------------------------------------------
Consumes all data from the layer into a ByteString . --> Concatenate a new ByteString --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[procedure]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 561 ---------------------------------------------
Creates a documentation handler for a given directory and a jar file . --> Creates documentation handler --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository [[jarRepo]] = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , [[jarRepo]] } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , [[jarRepo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[into]] ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository [[access]] = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , [[access]] } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , [[access]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 562 ---------------------------------------------
Create a documentation handler from a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromJar]] ( JarFile jarFile , String base ) { FileRepository repo = new JarRepository ( jarFile , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[extension]] ( JarFile jarFile , String base ) { FileRepository repo = new JarRepository ( jarFile , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 563 ---------------------------------------------
Create a new HttpEntity from a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String content , String charset ) { return new Strict ( ByteString . fromString ( content , charset ) , Optional . of ( "text/plain; charset=" + charset ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[extension]] ( String content , String charset ) { return new Strict ( ByteString . fromString ( content , charset ) , Optional . of ( "text/plain; charset=" + charset ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 564 ---------------------------------------------
Create HttpEntity from content . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[fromContent]] ( Content content , String [[charset]] ) { String [[body]] ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity [[file]] ( Content content , String [[index]] ) { String [[array]] ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 565 ---------------------------------------------
Creates a chunked entity . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > [[data]] , Optional < String > contentType ) { return new Chunked ( [[data]] . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[test]] ( Source < ByteString , ? > [[file]] , Optional < String > contentType ) { return new Chunked ( [[file]] . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 566 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 253 / 300 / 13 / 566:  57%|█████▋    | 566/1000 [47:31<36:26,  5.04s/it][Succeeded / Failed / Skipped / Total] 253 / 300 / 13 / 566:  57%|█████▋    | 567/1000 [47:36<36:21,  5.04s/it][Succeeded / Failed / Skipped / Total] 254 / 300 / 13 / 567:  57%|█████▋    | 567/1000 [47:36<36:21,  5.04s/it][Succeeded / Failed / Skipped / Total] 254 / 300 / 13 / 567:  57%|█████▋    | 568/1000 [47:53<36:25,  5.06s/it][Succeeded / Failed / Skipped / Total] 255 / 300 / 13 / 568:  57%|█████▋    | 568/1000 [47:53<36:25,  5.06s/it][Succeeded / Failed / Skipped / Total] 255 / 300 / 13 / 568:  57%|█████▋    | 569/1000 [47:53<36:16,  5.05s/it][Succeeded / Failed / Skipped / Total] 255 / 300 / 14 / 569:  57%|█████▋    | 569/1000 [47:53<36:16,  5.05s/it][Succeeded / Failed / Skipped / Total] 255 / 300 / 14 / 569:  57%|█████▋    | 570/1000 [47:54<36:08,  5.04s/it][Succeeded / Failed / Skipped / Total] 256 / 300 / 14 / 570:  57%|█████▋    | 570/1000 [47:54<36:08,  5.04s/it][Succeeded / Failed / Skipped / Total] 256 / 300 / 14 / 570:  57%|█████▋    | 571/1000 [48:00<36:04,  5.04s/it][Succeeded / Failed / Skipped / Total] 257 / 300 / 14 / 571:  57%|█████▋    | 571/1000 [48:00<36:04,  5.04s/it][Succeeded / Failed / Skipped / Total] 257 / 300 / 14 / 571:  57%|█████▋    | 572/1000 [48:01<35:56,  5.04s/it][Succeeded / Failed / Skipped / Total] 257 / 301 / 14 / 572:  57%|█████▋    | 572/1000 [48:01<35:56,  5.04s/it][Succeeded / Failed / Skipped / Total] 257 / 301 / 14 / 572:  57%|█████▋    | 573/1000 [48:01<35:47,  5.03s/it][Succeeded / Failed / Skipped / Total] 257 / 302 / 14 / 573:  57%|█████▋    | 573/1000 [48:01<35:47,  5.03s/it][Succeeded / Failed / Skipped / Total] 257 / 302 / 14 / 573:  57%|█████▋    | 574/1000 [48:06<35:42,  5.03s/it][Succeeded / Failed / Skipped / Total] 257 / 303 / 14 / 574:  57%|█████▋    | 574/1000 [48:06<35:42,  5.03s/it][Succeeded / Failed / Skipped / Total] 257 / 303 / 14 / 574:  57%|█████▊    | 575/1000 [48:12<35:38,  5.03s/it][Succeeded / Failed / Skipped / Total] 257 / 304 / 14 / 575:  57%|█████▊    | 575/1000 [48:12<35:38,  5.03s/it][Succeeded / Failed / Skipped / Total] 257 / 304 / 14 / 575:  58%|█████▊    | 576/1000 [48:14<35:30,  5.02s/it][Succeeded / Failed / Skipped / Total] 258 / 304 / 14 / 576:  58%|█████▊    | 576/1000 [48:14<35:30,  5.02s/it][Succeeded / Failed / Skipped / Total] 258 / 304 / 14 / 576:  58%|█████▊    | 577/1000 [48:15<35:22,  5.02s/it]Creates a BuildDocHandler from a list of files . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromResources]] ( File [ ] [[files]] , String [ ] baseDirs ) throws IOException { assert ( [[files]] . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ [[files]] . length ] ; List < JarFile > [[jarFiles]] = new ArrayList <> ( ) ; for ( int [[i]] = 0 ; [[i]] < [[files]] . length ; [[i]] ++ ) { File file = [[files]] [ [[i]] ] ; String baseDir = baseDirs [ [[i]] ] ; if ( file . isDirectory ( ) ) { repositories [ [[i]] ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler [[procedure]] ( File [ ] [[types]] , String [ ] baseDirs ) throws IOException { assert ( [[types]] . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ [[types]] . length ] ; List < JarFile > [[integer]] = new ArrayList <> ( ) ; for ( int [[x]] = 0 ; [[x]] < [[types]] . length ; [[x]] ++ ) { File file = [[types]] [ [[x]] ] ; String baseDir = baseDirs [ [[x]] ] ; if ( file . isDirectory ( ) ) { repositories [ [[x]] ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 567 ---------------------------------------------
Creates a JSON response with the given content and content . --> Returns name of word --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , JsonNode content ) { return [[status]] ( [[status]] , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result [[name]] ( int [[word]] , JsonNode content ) { return [[name]] ( [[name]] , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 568 ---------------------------------------------
Creates a new HTTP status response . --> Request an item --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , byte [ ] content ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[status]] , new HttpEntity . Strict ( ByteString . fromArray ( content ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result [[item]] ( int [[x]] , byte [ ] content ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[item]] , new HttpEntity . Strict ( ByteString . fromArray ( content ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 569 ---------------------------------------------
Find a user by id --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 570 ---------------------------------------------
Sends a status message . --> Stack with given name --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , InputStream [[content]] , long [[contentLength]] ) { return [[status]] ( [[status]] ) . sendInputStream ( [[content]] , [[contentLength]] ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result [[stack]] ( int status , InputStream [[name]] , long [[stack]] ) { return [[stack]] ( [[stack]] ) . sendInputStream ( [[name]] , [[stack]] ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 571 ---------------------------------------------
Returns a unique unique identifier . --> Options --> Socre: 1.0

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[option]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 572 ---------------------------------------------
Creates a status message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int status , File [[content]] ) { return [[status]] ( [[status]] , [[content]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[sets]] ( int status , File [[level]] ) { return [[sets]] ( [[sets]] , [[level]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 573 ---------------------------------------------
Sends a JSON response to the specified JSON node . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result status ( int status , JsonNode content , JsonEncoding [[encoding]] ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( content , [[encoding]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result status ( int status , JsonNode content , JsonEncoding [[request]] ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( content , [[request]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 574 ---------------------------------------------
Selects the preferred language . --> [[[FAILED]]]

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > [[candidates]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[candidates]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[pace]] ( Collection < Lang > [[max]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[max]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 575 ---------------------------------------------
Returns a new call with the specified fragment . --> [[[FAILED]]]

[[[[Adv]]]]: public Call [[withFragment]] ( String [[fragment]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fragment]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call [[vector]] ( String [[array]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[array]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 576 ---------------------------------------------
Returns the web socket URL for the given request . --> Join the current request --> Socre: 1.0

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request [[request]] ) { return [[webSocketURL]] ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[join]] ( Http . Request [[http]] ) { return [[join]] ( [[http]] . secure ( ) , [[http]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
[Succeeded / Failed / Skipped / Total] 259 / 304 / 14 / 577:  58%|█████▊    | 577/1000 [48:15<35:22,  5.02s/it][Succeeded / Failed / Skipped / Total] 259 / 304 / 14 / 577:  58%|█████▊    | 578/1000 [48:27<35:22,  5.03s/it][Succeeded / Failed / Skipped / Total] 259 / 305 / 14 / 578:  58%|█████▊    | 578/1000 [48:27<35:22,  5.03s/it][Succeeded / Failed / Skipped / Total] 259 / 305 / 14 / 578:  58%|█████▊    | 579/1000 [48:27<35:14,  5.02s/it][Succeeded / Failed / Skipped / Total] 259 / 306 / 14 / 579:  58%|█████▊    | 579/1000 [48:27<35:14,  5.02s/it][Succeeded / Failed / Skipped / Total] 259 / 306 / 14 / 579:  58%|█████▊    | 580/1000 [48:34<35:10,  5.02s/it][Succeeded / Failed / Skipped / Total] 260 / 306 / 14 / 580:  58%|█████▊    | 580/1000 [48:34<35:10,  5.02s/it][Succeeded / Failed / Skipped / Total] 260 / 306 / 14 / 580:  58%|█████▊    | 581/1000 [48:39<35:05,  5.02s/it][Succeeded / Failed / Skipped / Total] 260 / 307 / 14 / 581:  58%|█████▊    | 581/1000 [48:39<35:05,  5.02s/it][Succeeded / Failed / Skipped / Total] 260 / 307 / 14 / 581:  58%|█████▊    | 582/1000 [48:40<34:57,  5.02s/it][Succeeded / Failed / Skipped / Total] 260 / 308 / 14 / 582:  58%|█████▊    | 582/1000 [48:40<34:57,  5.02s/it][Succeeded / Failed / Skipped / Total] 260 / 308 / 14 / 582:  58%|█████▊    | 583/1000 [48:41<34:49,  5.01s/it][Succeeded / Failed / Skipped / Total] 260 / 309 / 14 / 583:  58%|█████▊    | 583/1000 [48:41<34:49,  5.01s/it][Succeeded / Failed / Skipped / Total] 260 / 309 / 14 / 583:  58%|█████▊    | 584/1000 [48:41<34:41,  5.00s/it][Succeeded / Failed / Skipped / Total] 261 / 309 / 14 / 584:  58%|█████▊    | 584/1000 [48:41<34:41,  5.00s/it][Succeeded / Failed / Skipped / Total] 261 / 309 / 14 / 584:  58%|█████▊    | 585/1000 [48:56<34:43,  5.02s/it][Succeeded / Failed / Skipped / Total] 261 / 310 / 14 / 585:  58%|█████▊    | 585/1000 [48:56<34:43,  5.02s/it][Succeeded / Failed / Skipped / Total] 261 / 310 / 14 / 585:  59%|█████▊    | 586/1000 [49:00<34:37,  5.02s/it]--------------------------------------------- Result 577 ---------------------------------------------
Returns the absolute URL of the given request . --> Returns the list of URLs for a given HTTP request --> Socre: 1.0

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request [[request]] ) { return [[absoluteURL]] ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[list]] ( Http . Request [[able]] ) { return [[list]] ( [[able]] . secure ( ) , [[able]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 578 ---------------------------------------------
To json node . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[client]] ( final Object [[description]] ) { try { return mapper ( ) . valueToTree ( [[description]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 579 ---------------------------------------------
Returns a connection function that applies a connection function . --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > block ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[connection]] ) { try { return block . call ( [[connection]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > block ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[definition]] ) { try { return block . call ( [[definition]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 580 ---------------------------------------------
Deserialize a JsonNode from a JsonNode . --> Creates an object from json . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[es]] > [[es]] fromJson ( JsonNode json , Class < [[es]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 581 ---------------------------------------------
Creates a function that returns a function that executes the given connection . --> [[[FAILED]]]

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > connectionFunction ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection [[connection]] ) { try { block . run ( [[connection]] ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > connectionFunction ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection [[fails]] ) { try { block . run ( [[fails]] ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 582 ---------------------------------------------
Parse the given string into a JsonNode . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[parse]] ( String src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[on]] ( String src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 583 ---------------------------------------------
Creates a server for the given Router . --> [[[FAILED]]]

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode mode , int [[port]] , Function < BuiltInComponents , Router > [[block]] ) { return new Builder ( ) . mode ( mode ) . http ( [[port]] ) . build ( [[block]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[code]] ( Mode mode , int [[builder]] , Function < BuiltInComponents , Router > [[parameter]] ) { return new Builder ( ) . mode ( mode ) . http ( [[builder]] ) . build ( [[parameter]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 584 ---------------------------------------------
Parse a JsonNode from a stream . --> Parse an input stream --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode parse ( java . io . InputStream [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode parse ( java . io . InputStream [[z]] ) { try { return mapper ( ) . readTree ( [[z]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 585 ---------------------------------------------
Returns a list of constraints which match the given constraints . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayableConstraint]] ( Set < ConstraintDescriptor < ? > > [[constraints]] ) { return [[constraints]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayableConstraint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[list]] ( Set < ConstraintDescriptor < ? > > [[array]] ) { return [[array]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[list]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 586 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 261 / 311 / 14 / 586:  59%|█████▊    | 586/1000 [49:00<34:37,  5.02s/it][Succeeded / Failed / Skipped / Total] 261 / 311 / 14 / 586:  59%|█████▊    | 587/1000 [49:02<34:30,  5.01s/it][Succeeded / Failed / Skipped / Total] 261 / 312 / 14 / 587:  59%|█████▊    | 587/1000 [49:02<34:30,  5.01s/it][Succeeded / Failed / Skipped / Total] 261 / 312 / 14 / 587:  59%|█████▉    | 588/1000 [49:07<34:25,  5.01s/it][Succeeded / Failed / Skipped / Total] 262 / 312 / 14 / 588:  59%|█████▉    | 588/1000 [49:07<34:25,  5.01s/it][Succeeded / Failed / Skipped / Total] 262 / 312 / 14 / 588:  59%|█████▉    | 589/1000 [49:08<34:17,  5.01s/it][Succeeded / Failed / Skipped / Total] 263 / 312 / 14 / 589:  59%|█████▉    | 589/1000 [49:08<34:17,  5.01s/it][Succeeded / Failed / Skipped / Total] 263 / 312 / 14 / 589:  59%|█████▉    | 590/1000 [49:14<34:12,  5.01s/it][Succeeded / Failed / Skipped / Total] 264 / 312 / 14 / 590:  59%|█████▉    | 590/1000 [49:14<34:12,  5.01s/it][Succeeded / Failed / Skipped / Total] 264 / 312 / 14 / 590:  59%|█████▉    | 591/1000 [49:15<34:05,  5.00s/it][Succeeded / Failed / Skipped / Total] 265 / 312 / 14 / 591:  59%|█████▉    | 591/1000 [49:15<34:05,  5.00s/it][Succeeded / Failed / Skipped / Total] 265 / 312 / 14 / 591:  59%|█████▉    | 592/1000 [49:23<34:02,  5.01s/it][Succeeded / Failed / Skipped / Total] 266 / 312 / 14 / 592:  59%|█████▉    | 592/1000 [49:23<34:02,  5.01s/it][Succeeded / Failed / Skipped / Total] 266 / 312 / 14 / 592:  59%|█████▉    | 593/1000 [49:26<33:56,  5.00s/it]Displays a displayable constraint . --> [[[FAILED]]]

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[displayableConstraint]] ( ConstraintDescriptor < ? > [[constraint]] ) { final Display displayAnnotation = [[constraint]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[constraint]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[print]] ( ConstraintDescriptor < ? > [[parameters]] ) { final Display displayAnnotation = [[parameters]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[parameters]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 587 ---------------------------------------------
Computes relative path relative to startPath --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[relative]] ( String startPath , String targetPath ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[program]] ( String startPath , String targetPath ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 588 ---------------------------------------------
Parse cron expression . --> Get date array --> Socre: 1.0

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String cron ) { try { return new CronExpression ( cron ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[array]] ( String cron ) { try { return new CronExpression ( cron ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 589 ---------------------------------------------
Returns canonical version of the given URL . --> End of bridge --> Socre: 1.0

[[[[Adv]]]]: public static String [[canonical]] ( String [[url]] ) { String [ ] urlPath = toSegments ( [[url]] ) ; Stack < String > [[canonical]] = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[canonical]] . empty ( ) && [[canonical]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[canonical]] . push ( comp ) ; else [[canonical]] . pop ( ) ; } String prefixSep = [[url]] . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String [[trailingSep]] = [[url]] . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[canonical]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + [[trailingSep]] ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String [[end]] ( String [[bridge]] ) { String [ ] urlPath = toSegments ( [[bridge]] ) ; Stack < String > [[end]] = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[end]] . empty ( ) && [[end]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[end]] . push ( comp ) ; else [[end]] . pop ( ) ; } String prefixSep = [[bridge]] . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String [[border]] = [[bridge]] . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[end]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + [[border]] ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 590 ---------------------------------------------
Get the next interval --> Get cron interval --> Socre: 1.0

[[[[Adv]]]]: public static long cronInterval ( String [[cron]] , Date date ) { try { return new CronExpression ( [[cron]] ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long cronInterval ( String [[age]] , Date date ) { try { return new CronExpression ( [[age]] ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[age]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 591 ---------------------------------------------
Checks whether the given class array is assignable to the given class . --> Compare two boolean arrays --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean [[autoboxing]] ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( [[isAssignable]] ( classArray [ i ] , toClassArray [ i ] , [[autoboxing]] ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[array]] ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean [[array]] ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( [[array]] ( classArray [ i ] , toClassArray [ i ] , [[array]] ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 592 ---------------------------------------------
Default implementation . --> Display the requested request --> Socre: 1.0

[[[[Adv]]]]: public static Result TODO ( Request [[request]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[request]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result TODO ( Request [[able]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[able]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 593 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 266 / 313 / 14 / 593:  59%|█████▉    | 593/1000 [49:26<33:56,  5.00s/it][Succeeded / Failed / Skipped / Total] 266 / 313 / 14 / 593:  59%|█████▉    | 594/1000 [49:41<33:58,  5.02s/it][Succeeded / Failed / Skipped / Total] 267 / 313 / 14 / 594:  59%|█████▉    | 594/1000 [49:41<33:58,  5.02s/it][Succeeded / Failed / Skipped / Total] 267 / 313 / 14 / 594:  60%|█████▉    | 595/1000 [49:42<33:50,  5.01s/it][Succeeded / Failed / Skipped / Total] 268 / 313 / 14 / 595:  60%|█████▉    | 595/1000 [49:42<33:50,  5.01s/it][Succeeded / Failed / Skipped / Total] 268 / 313 / 14 / 595:  60%|█████▉    | 596/1000 [49:43<33:42,  5.01s/it][Succeeded / Failed / Skipped / Total] 268 / 314 / 14 / 596:  60%|█████▉    | 596/1000 [49:43<33:42,  5.01s/it][Succeeded / Failed / Skipped / Total] 268 / 314 / 14 / 596:  60%|█████▉    | 597/1000 [49:44<33:34,  5.00s/it][Succeeded / Failed / Skipped / Total] 268 / 315 / 14 / 597:  60%|█████▉    | 597/1000 [49:44<33:34,  5.00s/it][Succeeded / Failed / Skipped / Total] 268 / 315 / 14 / 597:  60%|█████▉    | 598/1000 [49:48<33:28,  5.00s/it][Succeeded / Failed / Skipped / Total] 268 / 316 / 14 / 598:  60%|█████▉    | 598/1000 [49:48<33:28,  5.00s/it][Succeeded / Failed / Skipped / Total] 268 / 316 / 14 / 598:  60%|█████▉    | 599/1000 [49:49<33:21,  4.99s/it][Succeeded / Failed / Skipped / Total] 268 / 317 / 14 / 599:  60%|█████▉    | 599/1000 [49:49<33:21,  4.99s/it][Succeeded / Failed / Skipped / Total] 268 / 317 / 14 / 599:  60%|██████    | 600/1000 [49:50<33:13,  4.98s/it][Succeeded / Failed / Skipped / Total] 269 / 317 / 14 / 600:  60%|██████    | 600/1000 [49:50<33:13,  4.98s/it][Succeeded / Failed / Skipped / Total] 269 / 317 / 14 / 600:  60%|██████    | 601/1000 [49:54<33:08,  4.98s/it][Succeeded / Failed / Skipped / Total] 269 / 318 / 14 / 601:  60%|██████    | 601/1000 [49:54<33:08,  4.98s/it][Succeeded / Failed / Skipped / Total] 269 / 318 / 14 / 601:  60%|██████    | 602/1000 [49:55<33:00,  4.98s/it][Succeeded / Failed / Skipped / Total] 269 / 319 / 14 / 602:  60%|██████    | 602/1000 [49:55<33:00,  4.98s/it][Succeeded / Failed / Skipped / Total] 269 / 319 / 14 / 602:  60%|██████    | 603/1000 [49:55<32:52,  4.97s/it][Succeeded / Failed / Skipped / Total] 270 / 319 / 14 / 603:  60%|██████    | 603/1000 [49:55<32:52,  4.97s/it][Succeeded / Failed / Skipped / Total] 270 / 319 / 14 / 603:  60%|██████    | 604/1000 [50:08<32:52,  4.98s/it]Returns a new Guice application initialized with the given context . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context [[context]] ) { return initialBuilder . in ( [[context]] . environment ( ) ) . loadConfig ( [[context]] . initialConfig ( ) ) . overrides ( overrides ( [[context]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[at]] ( ApplicationLoader . Context [[end]] ) { return initialBuilder . in ( [[end]] . environment ( ) ) . loadConfig ( [[end]] . initialConfig ( ) ) . overrides ( overrides ( [[end]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 594 ---------------------------------------------
Registers a session with the given key . --> Swap two strings --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[session]] ( String [[key]] , String value ) { [[session]] ( ) . put ( [[key]] , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void [[swap]] ( String [[list]] , String value ) { [[swap]] ( ) . put ( [[list]] , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 595 ---------------------------------------------
Sets a value to flash . --> Quick fix for debugging --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[flash]] ( String [[key]] , String value ) { [[flash]] ( ) . put ( [[key]] , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void [[fix]] ( String [[block]] , String value ) { [[fix]] ( ) . put ( [[block]] , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 596 ---------------------------------------------
Create an ahc client . --> [[[FAILED]]]

[[[[Adv]]]]: public static AhcWSClient [[create]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient [[client]] = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( [[client]] , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient [[administrator]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient [[a]] = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( [[a]] , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 597 ---------------------------------------------
Performs a timeout on the completion stage . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[timeout]] ( final CompletionStage < A > [[stage]] , final long amount , final TimeUnit unit ) { requireNonNull ( [[stage]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> [[stage]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[end]] ( final CompletionStage < A > [[process]] , final long amount , final TimeUnit unit ) { requireNonNull ( [[process]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> [[process]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 598 ---------------------------------------------
Qualify the binding key . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[binding]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 599 ---------------------------------------------
Returns the binding key of this binding . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[flow]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 600 ---------------------------------------------
Converts this binding to the given provider . --> Convenience method for setting a customer --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > provider ) { return underlying . to ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[customer]] ( final Provider < ? extends T > provider ) { return underlying . to ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 601 ---------------------------------------------
Converts this binding to a Java binding . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[p]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 602 ---------------------------------------------
Converts this binding to a Java binding . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Class < ? extends T > implementation ) { return underlying . to ( implementation ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > [[binding]] ( final Class < ? extends T > implementation ) { return underlying . to ( implementation ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 603 ---------------------------------------------
Converts the binding to a Java binding . --> Create a procedure --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > key ) { return underlying . to ( key . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[procedure]] ( final BindingKey < ? extends T > key ) { return underlying . to ( key . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 604 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 270 / 320 / 14 / 604:  60%|██████    | 604/1000 [50:08<32:52,  4.98s/it][Succeeded / Failed / Skipped / Total] 270 / 320 / 14 / 604:  60%|██████    | 605/1000 [50:09<32:44,  4.97s/it][Succeeded / Failed / Skipped / Total] 271 / 320 / 14 / 605:  60%|██████    | 605/1000 [50:09<32:44,  4.97s/it][Succeeded / Failed / Skipped / Total] 271 / 320 / 14 / 605:  61%|██████    | 606/1000 [50:23<32:45,  4.99s/it][Succeeded / Failed / Skipped / Total] 271 / 321 / 14 / 606:  61%|██████    | 606/1000 [50:23<32:45,  4.99s/it][Succeeded / Failed / Skipped / Total] 271 / 321 / 14 / 606:  61%|██████    | 607/1000 [50:31<32:42,  4.99s/it][Succeeded / Failed / Skipped / Total] 271 / 322 / 14 / 607:  61%|██████    | 607/1000 [50:31<32:42,  4.99s/it][Succeeded / Failed / Skipped / Total] 271 / 322 / 14 / 607:  61%|██████    | 608/1000 [50:34<32:36,  4.99s/it][Succeeded / Failed / Skipped / Total] 271 / 323 / 14 / 608:  61%|██████    | 608/1000 [50:34<32:36,  4.99s/it][Succeeded / Failed / Skipped / Total] 271 / 323 / 14 / 608:  61%|██████    | 609/1000 [50:42<32:33,  5.00s/it][Succeeded / Failed / Skipped / Total] 271 / 324 / 14 / 609:  61%|██████    | 609/1000 [50:42<32:33,  5.00s/it][Succeeded / Failed / Skipped / Total] 271 / 324 / 14 / 609:  61%|██████    | 610/1000 [50:48<32:29,  5.00s/it][Succeeded / Failed / Skipped / Total] 271 / 325 / 14 / 610:  61%|██████    | 610/1000 [50:48<32:29,  5.00s/it][Succeeded / Failed / Skipped / Total] 271 / 325 / 14 / 610:  61%|██████    | 611/1000 [50:49<32:21,  4.99s/it][Succeeded / Failed / Skipped / Total] 271 / 326 / 14 / 611:  61%|██████    | 611/1000 [50:49<32:21,  4.99s/it][Succeeded / Failed / Skipped / Total] 271 / 326 / 14 / 611:  61%|██████    | 612/1000 [50:54<32:16,  4.99s/it]Converts the underlying provider to a Java provider . --> [[[FAILED]]]

[[[[Adv]]]]: public < P [[extends]] Provider < ? extends T > > Binding < T > [[toProvider]] ( final Class < P > provider ) { return underlying . toProvider ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P [[to]] Provider < ? extends T > > Binding < T > [[foo]] ( final Class < P > provider ) { return underlying . toProvider ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 605 ---------------------------------------------
Creates a new EvolutionsReader from a map of Evolutions . --> Format the evolution --> Socre: 1.0

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > [[evolutions]] ) { return new SimpleEvolutionsReader ( [[evolutions]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . [[b]] . EvolutionsReader [[format]] ( Map < String , List < Evolution > > [[b]] ) { return new SimpleEvolutionsReader ( [[b]] ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 606 ---------------------------------------------
Returns a list of available languages . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Lang > [[availables]] ( Application [[app]] ) { play . api . i18n . Langs langs = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[availableLangs]] = Scala . asJava ( langs . availables ( ) ) ; return [[availableLangs]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > [[version]] ( Application [[platform]] ) { play . api . i18n . Langs langs = [[platform]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[application]] = Scala . asJava ( langs . availables ( ) ) ; return [[application]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 607 ---------------------------------------------
Creates a reader for the Evolutions . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[forDefault]] ( Evolution ... evolutions ) { Map < String , List < Evolution > > [[map]] = new HashMap < String , List < Evolution > > ( ) ; [[map]] . put ( "default" , Arrays . asList ( evolutions ) ) ; return fromMap ( [[map]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[flow]] ( Evolution ... evolutions ) { Map < String , List < Evolution > > [[structure]] = new HashMap < String , List < Evolution > > ( ) ; [[structure]] . put ( "default" , Arrays . asList ( evolutions ) ) ; return fromMap ( [[structure]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 608 ---------------------------------------------
Returns the preferred . --> [[[FAILED]]]

[[[[Adv]]]]: public static Lang [[preferred]] ( Application [[app]] , List < Lang > availableLangs ) { play . api . i18n . Langs langs = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[core]] ( Application [[context]] , List < Lang > availableLangs ) { play . api . i18n . Langs langs = [[context]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 609 ---------------------------------------------
Sets a configuration loader based on the provided environment . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[withConfigLoader]] ( Function < Environment , Config > [[load]] ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( [[load]] . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[program]] ( Function < Environment , Config > [[end]] ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( [[end]] . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 610 ---------------------------------------------
Deletes all evictions . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[cleanupEvolutions]] ( Database [[database]] , boolean autocommit , String schema ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( [[database]] . asScala ( ) , schema ) ; evolutions . evolve ( evolutions . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void [[template]] ( Database [[attributes]] , boolean autocommit , String schema ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( [[attributes]] . asScala ( ) , schema ) ; evolutions . evolve ( evolutions . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 611 ---------------------------------------------
Load a Guice application from the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[log]] ( GuiceableModule ... [[link]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[link]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 612 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 271 / 327 / 14 / 612:  61%|██████    | 612/1000 [50:54<32:16,  4.99s/it][Succeeded / Failed / Skipped / Total] 271 / 327 / 14 / 612:  61%|██████▏   | 613/1000 [50:55<32:08,  4.98s/it][Succeeded / Failed / Skipped / Total] 271 / 328 / 14 / 613:  61%|██████▏   | 613/1000 [50:55<32:08,  4.98s/it][Succeeded / Failed / Skipped / Total] 271 / 328 / 14 / 613:  61%|██████▏   | 614/1000 [51:00<32:03,  4.98s/it][Succeeded / Failed / Skipped / Total] 271 / 329 / 14 / 614:  61%|██████▏   | 614/1000 [51:00<32:03,  4.98s/it][Succeeded / Failed / Skipped / Total] 271 / 329 / 14 / 614:  62%|██████▏   | 615/1000 [51:02<31:57,  4.98s/it][Succeeded / Failed / Skipped / Total] 271 / 330 / 14 / 615:  62%|██████▏   | 615/1000 [51:02<31:57,  4.98s/it][Succeeded / Failed / Skipped / Total] 271 / 330 / 14 / 615:  62%|██████▏   | 616/1000 [51:07<31:52,  4.98s/it][Succeeded / Failed / Skipped / Total] 271 / 331 / 14 / 616:  62%|██████▏   | 616/1000 [51:07<31:52,  4.98s/it][Succeeded / Failed / Skipped / Total] 271 / 331 / 14 / 616:  62%|██████▏   | 617/1000 [51:16<31:49,  4.99s/it][Succeeded / Failed / Skipped / Total] 271 / 332 / 14 / 617:  62%|██████▏   | 617/1000 [51:16<31:49,  4.99s/it][Succeeded / Failed / Skipped / Total] 271 / 332 / 14 / 617:  62%|██████▏   | 618/1000 [51:18<31:42,  4.98s/it][Succeeded / Failed / Skipped / Total] 271 / 333 / 14 / 618:  62%|██████▏   | 618/1000 [51:18<31:42,  4.98s/it][Succeeded / Failed / Skipped / Total] 271 / 333 / 14 / 618:  62%|██████▏   | 619/1000 [51:25<31:39,  4.98s/it][Succeeded / Failed / Skipped / Total] 272 / 333 / 14 / 619:  62%|██████▏   | 619/1000 [51:25<31:39,  4.98s/it][Succeeded / Failed / Skipped / Total] 272 / 333 / 14 / 619:  62%|██████▏   | 620/1000 [51:38<31:39,  5.00s/it][Succeeded / Failed / Skipped / Total] 273 / 333 / 14 / 620:  62%|██████▏   | 620/1000 [51:38<31:39,  5.00s/it][Succeeded / Failed / Skipped / Total] 273 / 333 / 14 / 620:  62%|██████▏   | 621/1000 [51:45<31:35,  5.00s/it]Adds a loader to the Guice application . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[withModuleLoader]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[console]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 613 ---------------------------------------------
Loads the application with the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( com . google . inject . Module ... modules ) { return [[load]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[program]] ( com . google . inject . Module ... modules ) { return [[program]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 614 ---------------------------------------------
Loads the Guice application with the given bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[load]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder [[console]] ( play . api . inject . Binding < ? > ... [[api]] ) { return [[console]] ( Guiceable . [[api]] ( [[api]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 615 ---------------------------------------------
Loads the application with the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Module ... modules ) { return [[load]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[generator]] ( play . api . inject . Module ... modules ) { return [[generator]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 616 ---------------------------------------------
Returns a builder for the GuiceApplicationBuilder . --> [[[FAILED]]]

[[[[Adv]]]]: protected GuiceApplicationBuilder [[newBuilder]] ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder [[version]] ( play . api . inject . guice . GuiceApplicationBuilder builder ) { return new GuiceApplicationBuilder ( builder ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 617 ---------------------------------------------
Gets the entity manager . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( ) { Deque < EntityManager > ems = this . emStack ( "True" == "True" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager [[operator]] ( ) { Deque < EntityManager > ems = this . emStack ( "True" == "True" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 618 ---------------------------------------------
Encodes a cookie into a string . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; [[encode]] ( buf , cookie ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String [[start]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; [[start]] ( buf , cookie ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 619 ---------------------------------------------
Creates a flow with the given flow . --> End with end --> Socre: 1.0

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[bypassWith]] ( Function < In , F . Either < FlowIn , Out > > [[splitter]] , Flow < FlowIn , Out , ? > flow ) { return [[bypassWith]] ( Flow . < In > create ( ) . map ( [[splitter]] :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[end]] ( Function < In , F . Either < FlowIn , Out > > [[end]] , Flow < FlowIn , Out , ? > flow ) { return [[end]] ( Flow . < In > create ( ) . map ( [[end]] :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 620 ---------------------------------------------
Creates a flow of actors . --> Programmatic methods --> Socre: 1.0

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > [[actorRef]] ( Function < ActorRef , Props > props , int [[bufferSize]] , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , [[bufferSize]] , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < In , Out > Flow < In , Out , ? > [[program]] ( Function < ActorRef , Props > props , int [[shows]] , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , [[shows]] , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 621 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 273 / 334 / 14 / 621:  62%|██████▏   | 621/1000 [51:45<31:35,  5.00s/it][Succeeded / Failed / Skipped / Total] 273 / 334 / 14 / 621:  62%|██████▏   | 622/1000 [51:54<31:32,  5.01s/it][Succeeded / Failed / Skipped / Total] 274 / 334 / 14 / 622:  62%|██████▏   | 622/1000 [51:54<31:32,  5.01s/it][Succeeded / Failed / Skipped / Total] 274 / 334 / 14 / 622:  62%|██████▏   | 623/1000 [51:55<31:25,  5.00s/it][Succeeded / Failed / Skipped / Total] 274 / 335 / 14 / 623:  62%|██████▏   | 623/1000 [51:55<31:25,  5.00s/it][Succeeded / Failed / Skipped / Total] 274 / 335 / 14 / 623:  62%|██████▏   | 624/1000 [51:58<31:18,  5.00s/it][Succeeded / Failed / Skipped / Total] 274 / 336 / 14 / 624:  62%|██████▏   | 624/1000 [51:58<31:18,  5.00s/it][Succeeded / Failed / Skipped / Total] 274 / 336 / 14 / 624:  62%|██████▎   | 625/1000 [52:00<31:12,  4.99s/it][Succeeded / Failed / Skipped / Total] 274 / 337 / 14 / 625:  62%|██████▎   | 625/1000 [52:00<31:12,  4.99s/it][Succeeded / Failed / Skipped / Total] 274 / 337 / 14 / 625:  63%|██████▎   | 626/1000 [52:11<31:10,  5.00s/it][Succeeded / Failed / Skipped / Total] 275 / 337 / 14 / 626:  63%|██████▎   | 626/1000 [52:11<31:10,  5.00s/it][Succeeded / Failed / Skipped / Total] 275 / 337 / 14 / 626:  63%|██████▎   | 627/1000 [52:15<31:05,  5.00s/it][Succeeded / Failed / Skipped / Total] 275 / 338 / 14 / 627:  63%|██████▎   | 627/1000 [52:15<31:05,  5.00s/it][Succeeded / Failed / Skipped / Total] 275 / 338 / 14 / 627:  63%|██████▎   | 628/1000 [52:18<30:59,  5.00s/it][Succeeded / Failed / Skipped / Total] 275 / 339 / 14 / 628:  63%|██████▎   | 628/1000 [52:18<30:59,  5.00s/it][Succeeded / Failed / Skipped / Total] 275 / 339 / 14 / 628:  63%|██████▎   | 629/1000 [52:22<30:53,  5.00s/it]Returns the em stack from the current thread . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[emStack]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[use]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 622 ---------------------------------------------
Convert error arguments . --> Remove declared message source --> Socre: 1.0

[[[[Adv]]]]: private List < Object > [[convertErrorArguments]] ( Object [ ] [[arguments]] ) { if ( [[arguments]] == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( [[arguments]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > [[sacrifice]] ( Object [ ] [[declared]] ) { if ( [[declared]] == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( [[declared]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 623 ---------------------------------------------
Pops the given EntityManager . --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[main]] ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 624 ---------------------------------------------
Creates a new form with the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: public Form < T > [[fill]] ( T value ) { if ( value == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( value ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > [[ref]] ( T value ) { if ( value == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( value ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 625 ---------------------------------------------
Returns all validation errors . --> [[[FAILED]]]

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[data]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 626 ---------------------------------------------
Gets the value associated with the given key . --> Get procedure . --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > [[value]] ( String [[key]] ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( [[key]] ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[procedure]] ( String [[sub]] ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( [[sub]] ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 627 ---------------------------------------------
Create a flow with the given splitter and merge it with the given splitter . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[In]] , FlowIn , Out > Flow < [[In]] , Out , ? > [[bypassWith]] ( Flow < [[In]] , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > [[mergeStrategy]] , Flow < FlowIn , Out , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < [[center]] , FlowIn , Out > Flow < [[center]] , Out , ? > [[begin]] ( Flow < [[center]] , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > [[edges]] , Flow < FlowIn , Out , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 628 ---------------------------------------------
Converts the given text to an object . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[converting]] > [[converting]] parse ( String text , Class < [[converting]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 629 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 276 / 339 / 14 / 629:  63%|██████▎   | 629/1000 [52:22<30:53,  5.00s/it][Succeeded / Failed / Skipped / Total] 277 / 339 / 14 / 630:  63%|██████▎   | 630/1000 [52:22<30:45,  4.99s/it][Succeeded / Failed / Skipped / Total] 277 / 339 / 14 / 630:  63%|██████▎   | 631/1000 [52:24<30:38,  4.98s/it][Succeeded / Failed / Skipped / Total] 277 / 340 / 14 / 631:  63%|██████▎   | 631/1000 [52:24<30:38,  4.98s/it][Succeeded / Failed / Skipped / Total] 277 / 341 / 14 / 632:  63%|██████▎   | 632/1000 [52:26<30:32,  4.98s/it][Succeeded / Failed / Skipped / Total] 277 / 341 / 14 / 632:  63%|██████▎   | 633/1000 [52:27<30:24,  4.97s/it][Succeeded / Failed / Skipped / Total] 277 / 342 / 14 / 633:  63%|██████▎   | 633/1000 [52:27<30:24,  4.97s/it][Succeeded / Failed / Skipped / Total] 278 / 342 / 14 / 634:  63%|██████▎   | 634/1000 [52:29<30:18,  4.97s/it][Succeeded / Failed / Skipped / Total] 278 / 342 / 14 / 634:  64%|██████▎   | 635/1000 [52:30<30:10,  4.96s/it][Succeeded / Failed / Skipped / Total] 279 / 342 / 14 / 635:  64%|██████▎   | 635/1000 [52:30<30:10,  4.96s/it][Succeeded / Failed / Skipped / Total] 280 / 342 / 14 / 636:  64%|██████▎   | 636/1000 [52:45<30:11,  4.98s/it][Succeeded / Failed / Skipped / Total] 280 / 342 / 14 / 636:  64%|██████▎   | 637/1000 [52:57<30:10,  4.99s/it]Print a value --> Print by type --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[by]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[by]] . class ) ) { return conversion . convert ( t , [[by]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 630 ---------------------------------------------
Converts a text value to a type . --> Parse the given text . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[command]] > [[command]] parse ( Field field , String text ) { return ( [[command]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 631 ---------------------------------------------
Fills the form . --> [[[FAILED]]]

[[[[Adv]]]]: public DynamicForm [[fill]] ( Map < String , Object > [[value]] ) { Form < Dynamic > [[form]] = super . fill ( new Dynamic ( [[value]] ) ) ; return new DynamicForm ( [[form]] . rawData ( ) , [[form]] . files ( ) , [[form]] . errors ( ) , [[form]] . [[value]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm [[using]] ( Map < String , Object > [[image]] ) { Form < Dynamic > [[objects]] = super . fill ( new Dynamic ( [[image]] ) ) ; return new DynamicForm ( [[objects]] . rawData ( ) , [[objects]] . files ( ) , [[objects]] . errors ( ) , [[objects]] . [[image]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 632 ---------------------------------------------
Prints the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[ex]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[ex]] . class ) ) ) { return ( [[ex]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[ex]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[ex]] . class ) ) { return conversion . convert ( t , [[ex]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 633 ---------------------------------------------
Prints a type descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > String print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > String print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 634 ---------------------------------------------
Converts errors into JSON representation . --> Concatenate error messages --> Socre: 1.0

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang [[lang]] ) { Map < String , List < String > > [[allMessages]] = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > [[messages]] = new ArrayList <> ( ) ; if ( messagesApi != null && [[lang]] != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; [[messages]] . add ( messagesApi . get ( [[lang]] , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , [[lang]] ) ) ) ; } else { [[messages]] . add ( error . message ( ) ) ; } [[allMessages]] . put ( error . key ( ) , [[messages]] ) ; } } ) ; return play . libs . Json . toJson ( [[allMessages]] ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[cat]] ( Lang [[search]] ) { Map < String , List < String > > [[replace]] = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > [[check]] = new ArrayList <> ( ) ; if ( messagesApi != null && [[search]] != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; [[check]] . add ( messagesApi . get ( [[search]] , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , [[search]] ) ) ) ; } else { [[check]] . add ( error . message ( ) ) ; } [[replace]] . put ( error . key ( ) , [[check]] ) ; } } ) ; return play . libs . Json . toJson ( [[replace]] ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 635 ---------------------------------------------
Register custom converter . --> Add a conversionters to the output format . --> Socre: 1.0

[[[[Adv]]]]: private Formatters [[registerOptional]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String

[[[[Adv]]]]: private Formatters [[hort]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 636 ---------------------------------------------
Selects all nodes matching the given node . --> Create a nested node at the given path --> Socre: 1.0

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String path , Object [[node]] ) { return [[selectNodes]] ( path , [[node]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[array]] ( String path , Object [[array]] ) { return [[array]] ( path , [[array]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 637 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 280 / 343 / 14 / 637:  64%|██████▎   | 637/1000 [52:57<30:10,  4.99s/it][Succeeded / Failed / Skipped / Total] 280 / 343 / 14 / 637:  64%|██████▍   | 638/1000 [52:58<30:03,  4.98s/it][Succeeded / Failed / Skipped / Total] 280 / 344 / 14 / 638:  64%|██████▍   | 638/1000 [52:58<30:03,  4.98s/it][Succeeded / Failed / Skipped / Total] 280 / 344 / 14 / 638:  64%|██████▍   | 639/1000 [52:58<29:55,  4.97s/it][Succeeded / Failed / Skipped / Total] 281 / 344 / 14 / 639:  64%|██████▍   | 639/1000 [52:58<29:55,  4.97s/it][Succeeded / Failed / Skipped / Total] 281 / 344 / 14 / 639:  64%|██████▍   | 640/1000 [53:07<29:52,  4.98s/it][Succeeded / Failed / Skipped / Total] 282 / 344 / 14 / 640:  64%|██████▍   | 640/1000 [53:07<29:52,  4.98s/it][Succeeded / Failed / Skipped / Total] 282 / 344 / 14 / 640:  64%|██████▍   | 641/1000 [53:07<29:45,  4.97s/it][Succeeded / Failed / Skipped / Total] 282 / 344 / 15 / 641:  64%|██████▍   | 641/1000 [53:07<29:45,  4.97s/it][Succeeded / Failed / Skipped / Total] 282 / 344 / 15 / 641:  64%|██████▍   | 642/1000 [53:08<29:37,  4.97s/it][Succeeded / Failed / Skipped / Total] 282 / 345 / 15 / 642:  64%|██████▍   | 642/1000 [53:08<29:37,  4.97s/it][Succeeded / Failed / Skipped / Total] 282 / 345 / 15 / 642:  64%|██████▍   | 643/1000 [53:12<29:32,  4.97s/it]Registers a formatter for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String [[text]] , Locale locale ) throws java . [[text]] . ParseException { return formatter . parse ( [[text]] , locale ) ; } public String print ( T [[t]] , Locale locale ) { return formatter . print ( [[t]] , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String [[field]] , Locale locale ) throws java . [[field]] . ParseException { return formatter . parse ( [[field]] , locale ) ; } public String print ( T [[extension]] , Locale locale ) { return formatter . print ( [[extension]] , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 638 ---------------------------------------------
Convert a Java List into a Java sequence . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[where]] ( java . util . List < T > [[arrays]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[arrays]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 639 ---------------------------------------------
Encodes a cookie . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public String [[encode]] ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String [[name]] = [[cookie]] . name ( ) ; final String [[value]] = [[cookie]] . value ( ) != null ? [[cookie]] . value ( ) : "" ; validateCookie ( [[name]] , [[value]] ) ; StringBuilder buf = new StringBuilder ( ) ; if ( [[cookie]] . wrap ( ) ) { addQuoted ( buf , [[name]] , [[value]] ) ; } else { add ( buf , [[name]] , [[value]] ) ; } if ( [[cookie]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , [[cookie]] . maxAge ( ) ) ; Date expires = [[cookie]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String [[test]] ( Cookie [[strings]] ) { if ( [[strings]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String [[bin]] = [[strings]] . name ( ) ; final String [[bin]] = [[strings]] . value ( ) != null ? [[strings]] . value ( ) : "" ; validateCookie ( [[bin]] , [[bin]] ) ; StringBuilder buf = new StringBuilder ( ) ; if ( [[strings]] . wrap ( ) ) { addQuoted ( buf , [[bin]] , [[bin]] ) ; } else { add ( buf , [[bin]] , [[bin]] ) ; } if ( [[strings]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , [[strings]] . maxAge ( ) ) ; Date expires = [[strings]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 640 ---------------------------------------------
Creates a MappedWebSocketAcceptor from the given type . --> Creates a MappedWebSocketAcceptor --> Socre: 1.0

[[[[Adv]]]]: public static < In , Out > MappedWebSocketAcceptor < In , Out > json ( Class < In > [[in]] ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , [[in]] ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , [[in]] ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .

[[[[Adv]]]]: public static < In , Out > MappedWebSocketAcceptor < In , Out > json ( Class < In > [[list]] ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , [[list]] ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , [[list]] ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 641 ---------------------------------------------
Accepts and returns an Acceptor --> [[[SKIPPED]]]

[[[[Adv]]]]: private static < In , Out > WebSocket acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new WebSocket ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 642 ---------------------------------------------
Converts an array into a sequence . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[where]] ( T [ ] [[operator]] ) { return [[where]] ( java . util . Arrays . asList ( [[operator]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 643 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 282 / 346 / 15 / 643:  64%|██████▍   | 643/1000 [53:12<29:32,  4.97s/it][Succeeded / Failed / Skipped / Total] 282 / 346 / 15 / 643:  64%|██████▍   | 644/1000 [53:17<29:27,  4.96s/it][Succeeded / Failed / Skipped / Total] 283 / 346 / 15 / 644:  64%|██████▍   | 644/1000 [53:17<29:27,  4.96s/it][Succeeded / Failed / Skipped / Total] 283 / 346 / 15 / 644:  64%|██████▍   | 645/1000 [53:22<29:22,  4.96s/it][Succeeded / Failed / Skipped / Total] 283 / 347 / 15 / 645:  64%|██████▍   | 645/1000 [53:22<29:22,  4.96s/it][Succeeded / Failed / Skipped / Total] 283 / 347 / 15 / 645:  65%|██████▍   | 646/1000 [53:34<29:21,  4.98s/it][Succeeded / Failed / Skipped / Total] 283 / 348 / 15 / 646:  65%|██████▍   | 646/1000 [53:34<29:21,  4.98s/it][Succeeded / Failed / Skipped / Total] 283 / 348 / 15 / 646:  65%|██████▍   | 647/1000 [53:36<29:14,  4.97s/it]Create a sequence of variables from the given array . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > varargs ( T ... [[array]] ) { return toSeq ( [[array]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > varargs ( T ... [[bit]] ) { return toSeq ( [[bit]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 644 ---------------------------------------------
Checks if the given object is accessible . --> Checks if the given object is accessible or not --> Socre: 1.0

[[[[Adv]]]]: static boolean setAccessibleWorkaround ( final AccessibleObject [[o]] ) { if ( [[o]] == null || [[o]] . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) [[o]] ; if ( ! [[o]] . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { [[o]] . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean setAccessibleWorkaround ( final AccessibleObject [[w]] ) { if ( [[w]] == null || [[w]] . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) [[w]] ; if ( ! [[w]] . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { [[w]] . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 645 ---------------------------------------------
Register converter . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { return ( [[sourceType]] . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { final A [[a]] = ( A ) [[sourceType]] . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( [[a]] , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[sourceType]] , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { final A [[a]] = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( [[a]] , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[sourceType]] , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor [[c]] , TypeDescriptor targetType ) { return ( [[c]] . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[c]] , TypeDescriptor targetType ) { final A [[model]] = ( A ) [[c]] . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( [[model]] , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[c]] , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor [[c]] , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor [[c]] , TypeDescriptor targetType ) { final A [[model]] = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( [[model]] , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[c]] , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 646 ---------------------------------------------
Get the promotion cost for primitive class . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getPrimitivePromotionCost]] ( final Class < ? > srcClass , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float [[swap]] ( final Class < ? > srcClass , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 647 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 284 / 348 / 15 / 647:  65%|██████▍   | 647/1000 [53:36<29:14,  4.97s/it][Succeeded / Failed / Skipped / Total] 284 / 348 / 15 / 647:  65%|██████▍   | 648/1000 [53:39<29:08,  4.97s/it][Succeeded / Failed / Skipped / Total] 285 / 348 / 15 / 648:  65%|██████▍   | 648/1000 [53:39<29:08,  4.97s/it][Succeeded / Failed / Skipped / Total] 285 / 348 / 15 / 648:  65%|██████▍   | 649/1000 [53:45<29:04,  4.97s/it][Succeeded / Failed / Skipped / Total] 285 / 349 / 15 / 649:  65%|██████▍   | 649/1000 [53:45<29:04,  4.97s/it][Succeeded / Failed / Skipped / Total] 285 / 349 / 15 / 649:  65%|██████▌   | 650/1000 [53:56<29:02,  4.98s/it][Succeeded / Failed / Skipped / Total] 285 / 350 / 15 / 650:  65%|██████▌   | 650/1000 [53:56<29:02,  4.98s/it][Succeeded / Failed / Skipped / Total] 285 / 350 / 15 / 650:  65%|██████▌   | 651/1000 [53:58<28:56,  4.98s/it][Succeeded / Failed / Skipped / Total] 285 / 351 / 15 / 651:  65%|██████▌   | 651/1000 [53:58<28:56,  4.98s/it][Succeeded / Failed / Skipped / Total] 285 / 351 / 15 / 651:  65%|██████▌   | 652/1000 [54:10<28:54,  4.99s/it][Succeeded / Failed / Skipped / Total] 286 / 351 / 15 / 652:  65%|██████▌   | 652/1000 [54:10<28:54,  4.99s/it][Succeeded / Failed / Skipped / Total] 286 / 351 / 15 / 652:  65%|██████▌   | 653/1000 [54:14<28:49,  4.98s/it][Succeeded / Failed / Skipped / Total] 287 / 351 / 15 / 653:  65%|██████▌   | 653/1000 [54:14<28:49,  4.98s/it][Succeeded / Failed / Skipped / Total] 287 / 351 / 15 / 653:  65%|██████▌   | 654/1000 [54:16<28:42,  4.98s/it][Succeeded / Failed / Skipped / Total] 288 / 351 / 15 / 654:  65%|██████▌   | 654/1000 [54:16<28:42,  4.98s/it][Succeeded / Failed / Skipped / Total] 288 / 351 / 15 / 654:  66%|██████▌   | 655/1000 [54:16<28:35,  4.97s/it][Succeeded / Failed / Skipped / Total] 288 / 351 / 16 / 655:  66%|██████▌   | 655/1000 [54:16<28:35,  4.97s/it][Succeeded / Failed / Skipped / Total] 288 / 351 / 16 / 655:  66%|██████▌   | 656/1000 [54:20<28:29,  4.97s/it]Gets a message by key . --> setter for messages --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( String key , Object ... [[args]] ) { return messagesApi . get ( lang , key , [[args]] ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String [[set]] ( String key , Object ... [[name]] ) { return messagesApi . get ( lang , key , [[name]] ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 648 ---------------------------------------------
Gets message by key . --> Copy a list of messages --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[copy]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 649 ---------------------------------------------
Get the total transformation cost . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] [[srcArgs]] , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean [[isVarArgs]] = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[procedure]] ( final Class < ? > [ ] [[array]] , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean [[program]] = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 650 ---------------------------------------------
Create a parallel Sorter . --> [[[FAILED]]]

[[[[Adv]]]]: public static ParallelSorter [[create]] ( Object [ ] arrays ) { Generator gen = new Generator ( ) ; gen . setArrays ( arrays ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter [[a]] ( Object [ ] arrays ) { Generator gen = new Generator ( ) ; gen . setArrays ( arrays ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 651 ---------------------------------------------
Create a new database from the specified parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public static Database [[createFrom]] ( String driver , String url , Map < String , ? extends Object > config ) { return [[createFrom]] ( "default" , driver , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database [[description]] ( String driver , String url , Map < String , ? extends Object > config ) { return [[description]] ( "default" , driver , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 652 ---------------------------------------------
Merge sort algorithm . --> Quick fix for MergeSort --> Socre: 1.0

[[[[Adv]]]]: public void [[mergeSort]] ( int index , int [[lo]] , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( [[lo]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[fix]] ( int index , int [[a]] , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( [[a]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 653 ---------------------------------------------
Quick sort method . --> Add a new entry at a given index --> Socre: 1.0

[[[[Adv]]]]: public void [[quickSort]] ( int [[index]] , int [[lo]] , int hi , Comparator cmp ) { chooseComparer ( [[index]] , cmp ) ; super . quickSort ( [[lo]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void [[add]] ( int [[main]] , int [[pointer]] , int hi , Comparator cmp ) { chooseComparer ( [[main]] , cmp ) ; super . quickSort ( [[pointer]] , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 654 ---------------------------------------------
Cast a numeric value to the stack . --> Generate instruction code . --> Socre: 1.0

[[[[Adv]]]]: public void [[cast_numeric]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void [[c]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[c]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[c]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[c]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 655 ---------------------------------------------
Emit a field . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 656 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 288 / 352 / 16 / 656:  66%|██████▌   | 656/1000 [54:20<28:29,  4.97s/it][Succeeded / Failed / Skipped / Total] 288 / 352 / 16 / 656:  66%|██████▌   | 657/1000 [54:26<28:25,  4.97s/it][Succeeded / Failed / Skipped / Total] 288 / 353 / 16 / 657:  66%|██████▌   | 657/1000 [54:26<28:25,  4.97s/it][Succeeded / Failed / Skipped / Total] 288 / 354 / 16 / 658:  66%|██████▌   | 658/1000 [54:26<28:17,  4.96s/it][Succeeded / Failed / Skipped / Total] 288 / 354 / 16 / 658:  66%|██████▌   | 659/1000 [54:26<28:10,  4.96s/it][Succeeded / Failed / Skipped / Total] 288 / 354 / 17 / 659:  66%|██████▌   | 659/1000 [54:26<28:10,  4.96s/it][Succeeded / Failed / Skipped / Total] 288 / 355 / 17 / 660:  66%|██████▌   | 660/1000 [54:27<28:03,  4.95s/it][Succeeded / Failed / Skipped / Total] 288 / 355 / 17 / 660:  66%|██████▌   | 661/1000 [54:43<28:03,  4.97s/it][Succeeded / Failed / Skipped / Total] 289 / 355 / 17 / 661:  66%|██████▌   | 661/1000 [54:43<28:03,  4.97s/it][Succeeded / Failed / Skipped / Total] 289 / 355 / 17 / 661:  66%|██████▌   | 662/1000 [54:43<27:56,  4.96s/it][Succeeded / Failed / Skipped / Total] 289 / 356 / 17 / 662:  66%|██████▌   | 662/1000 [54:43<27:56,  4.96s/it][Succeeded / Failed / Skipped / Total] 289 / 356 / 17 / 662:  66%|██████▋   | 663/1000 [54:57<27:56,  4.97s/it]Invoke the protected method . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[invoke]] ( Object [[obj]] , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , [[obj]] , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object [[element]] ( Object [[input]] , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , [[input]] , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 657 ---------------------------------------------
push a zero or null --> [[[FAILED]]]

[[[[Adv]]]]: public void [[zero_or_null]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[change]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 658 ---------------------------------------------
Loads a single argument . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[load_arg]] ( int [[index]] ) { load_local ( state . argumentTypes [ [[index]] ] , state . localOffset + skipArgs ( [[index]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void [[call]] ( int [[var]] ) { load_local ( state . argumentTypes [ [[var]] ] , state . localOffset + skipArgs ( [[var]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 659 ---------------------------------------------
implements NullPointer --> [[[SKIPPED]]]

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 660 ---------------------------------------------
Compute the cost of object transformation between sourceClass and destinationClass . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getObjectTransformationCost]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * [[an]] Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float [[transfer]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float cost = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination class is null, we've traveled all the way up to * [[my]] Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 661 ---------------------------------------------
Finds all methods on the superclass and interfaces . --> Quick fix for exceptions --> Socre: 1.0

[[[[Adv]]]]: public static void [[getMethods]] ( Class superclass , Class [ ] interfaces , List [[methods]] ) { [[getMethods]] ( superclass , interfaces , [[methods]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void [[fix]] ( Class superclass , Class [ ] interfaces , List [[exception]] ) { [[fix]] ( superclass , interfaces , [[exception]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 662 ---------------------------------------------
Unbox the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[unbox_or_zero]] ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { if ( [[type]] != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( [[type]] ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( [[type]] ) ; mark ( end ) ; } } else { checkcast ( [[type]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void [[fix]] ( Type [[f]] ) { if ( TypeUtils . isPrimitive ( [[f]] ) ) { if ( [[f]] != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( [[f]] ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( [[f]] ) ; mark ( end ) ; } } else { checkcast ( [[f]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 663 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 289 / 357 / 17 / 663:  66%|██████▋   | 663/1000 [54:57<27:56,  4.97s/it][Succeeded / Failed / Skipped / Total] 289 / 357 / 17 / 663:  66%|██████▋   | 664/1000 [54:57<27:48,  4.97s/it][Succeeded / Failed / Skipped / Total] 289 / 357 / 18 / 664:  66%|██████▋   | 664/1000 [54:57<27:48,  4.97s/it][Succeeded / Failed / Skipped / Total] 289 / 357 / 18 / 664:  66%|██████▋   | 665/1000 [55:09<27:47,  4.98s/it][Succeeded / Failed / Skipped / Total] 289 / 358 / 18 / 665:  66%|██████▋   | 665/1000 [55:09<27:47,  4.98s/it][Succeeded / Failed / Skipped / Total] 289 / 358 / 18 / 665:  67%|██████▋   | 666/1000 [55:09<27:39,  4.97s/it][Succeeded / Failed / Skipped / Total] 289 / 358 / 19 / 666:  67%|██████▋   | 666/1000 [55:09<27:39,  4.97s/it][Succeeded / Failed / Skipped / Total] 289 / 358 / 19 / 666:  67%|██████▋   | 667/1000 [55:13<27:34,  4.97s/it][Succeeded / Failed / Skipped / Total] 289 / 359 / 19 / 667:  67%|██████▋   | 667/1000 [55:13<27:34,  4.97s/it][Succeeded / Failed / Skipped / Total] 289 / 359 / 19 / 667:  67%|██████▋   | 668/1000 [55:13<27:26,  4.96s/it][Succeeded / Failed / Skipped / Total] 289 / 359 / 20 / 668:  67%|██████▋   | 668/1000 [55:13<27:26,  4.96s/it][Succeeded / Failed / Skipped / Total] 289 / 359 / 20 / 668:  67%|██████▋   | 669/1000 [55:16<27:21,  4.96s/it][Succeeded / Failed / Skipped / Total] 289 / 360 / 20 / 669:  67%|██████▋   | 669/1000 [55:16<27:21,  4.96s/it][Succeeded / Failed / Skipped / Total] 289 / 360 / 20 / 669:  67%|██████▋   | 670/1000 [55:23<27:17,  4.96s/it][Succeeded / Failed / Skipped / Total] 290 / 360 / 20 / 670:  67%|██████▋   | 670/1000 [55:23<27:17,  4.96s/it][Succeeded / Failed / Skipped / Total] 290 / 360 / 20 / 670:  67%|██████▋   | 671/1000 [55:24<27:10,  4.96s/it]Sets the class . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setSuperclass]] ( Class [[superclass]] ) { if ( [[superclass]] != null && [[superclass]] . equals ( Object . class ) ) { [[superclass]] = null ; } this . superclass = [[superclass]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[main]] ( Class [[c]] ) { if ( [[c]] != null && [[c]] . equals ( Object . class ) ) { [[c]] = null ; } this . superclass = [[c]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 664 ---------------------------------------------
Gets a field with the given names . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 665 ---------------------------------------------
Add a method to the signature list . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]] ( Method [[method]] ) { [[add]] ( ReflectUtils . getSignature ( [[method]] ) , ReflectUtils . getExceptionTypes ( [[method]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[object]] ( Method [[sign]] ) { [[object]] ( ReflectUtils . getSignature ( [[sign]] ) , ReflectUtils . getExceptionTypes ( [[sign]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 666 ---------------------------------------------
Calculates the cardinality --> [[[SKIPPED]]]

[[[[Adv]]]]: public int cardinality ( ) { int w = value ; int c = 0 ; while ( w != 0 ) { c += T [ w & 255 ] ; w >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 667 ---------------------------------------------
Filter the given constructors in the given class --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[filterConstructors]] ( Class [[sc]] , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( [[sc]] , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[sc]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void [[fix]] ( Class [[attributes]] , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( [[attributes]] , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[attributes]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 668 ---------------------------------------------
Finds and returns the array of methods in the given array . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 669 ---------------------------------------------
Process an array . --> [[[FAILED]]]

[[[[Adv]]]]: public static void process_array ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type [[componentType]] = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( [[componentType]] ) ; callback . processElement ( [[componentType]] ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void process_array ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type [[cast]] = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( [[cast]] ) ; callback . processElement ( [[cast]] ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 670 ---------------------------------------------
Resolve child path . --> Resolve command --> Socre: 1.0

[[[[Adv]]]]: public static Path [[resolve]] ( final Path base , String [[child]] ) { if ( StringUtil . startsWithChar ( [[child]] , File . separatorChar ) ) { [[child]] = [[child]] . substring ( 1 ) ; } return base . resolve ( [[child]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path [[foo]] ( final Path base , String [[command]] ) { if ( StringUtil . startsWithChar ( [[command]] , File . separatorChar ) ) { [[command]] = [[command]] . substring ( 1 ) ; } return base . resolve ( [[command]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 671 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 290 / 361 / 20 / 671:  67%|██████▋   | 671/1000 [55:24<27:10,  4.96s/it][Succeeded / Failed / Skipped / Total] 290 / 361 / 20 / 671:  67%|██████▋   | 672/1000 [55:27<27:04,  4.95s/it][Succeeded / Failed / Skipped / Total] 290 / 362 / 20 / 672:  67%|██████▋   | 672/1000 [55:27<27:04,  4.95s/it][Succeeded / Failed / Skipped / Total] 290 / 362 / 20 / 672:  67%|██████▋   | 673/1000 [55:39<27:02,  4.96s/it][Succeeded / Failed / Skipped / Total] 291 / 362 / 20 / 673:  67%|██████▋   | 673/1000 [55:39<27:02,  4.96s/it][Succeeded / Failed / Skipped / Total] 291 / 362 / 20 / 673:  67%|██████▋   | 674/1000 [55:39<26:55,  4.95s/it][Succeeded / Failed / Skipped / Total] 291 / 363 / 20 / 674:  67%|██████▋   | 674/1000 [55:39<26:55,  4.95s/it][Succeeded / Failed / Skipped / Total] 291 / 363 / 20 / 674:  68%|██████▊   | 675/1000 [55:40<26:48,  4.95s/it][Succeeded / Failed / Skipped / Total] 291 / 364 / 20 / 675:  68%|██████▊   | 675/1000 [55:40<26:48,  4.95s/it][Succeeded / Failed / Skipped / Total] 291 / 364 / 20 / 675:  68%|██████▊   | 676/1000 [55:41<26:41,  4.94s/it][Succeeded / Failed / Skipped / Total] 291 / 365 / 20 / 676:  68%|██████▊   | 676/1000 [55:41<26:41,  4.94s/it][Succeeded / Failed / Skipped / Total] 291 / 365 / 20 / 676:  68%|██████▊   | 677/1000 [55:46<26:36,  4.94s/it][Succeeded / Failed / Skipped / Total] 292 / 365 / 20 / 677:  68%|██████▊   | 677/1000 [55:46<26:36,  4.94s/it][Succeeded / Failed / Skipped / Total] 292 / 365 / 20 / 677:  68%|██████▊   | 678/1000 [55:49<26:30,  4.94s/it][Succeeded / Failed / Skipped / Total] 292 / 366 / 20 / 678:  68%|██████▊   | 678/1000 [55:49<26:30,  4.94s/it][Succeeded / Failed / Skipped / Total] 292 / 366 / 20 / 678:  68%|██████▊   | 679/1000 [55:50<26:24,  4.93s/it][Succeeded / Failed / Skipped / Total] 292 / 367 / 20 / 679:  68%|██████▊   | 679/1000 [55:50<26:24,  4.93s/it][Succeeded / Failed / Skipped / Total] 292 / 367 / 20 / 679:  68%|██████▊   | 680/1000 [55:51<26:17,  4.93s/it][Succeeded / Failed / Skipped / Total] 292 / 368 / 20 / 680:  68%|██████▊   | 680/1000 [55:51<26:17,  4.93s/it][Succeeded / Failed / Skipped / Total] 292 / 368 / 20 / 680:  68%|██████▊   | 681/1000 [55:55<26:11,  4.93s/it][Succeeded / Failed / Skipped / Total] 293 / 368 / 20 / 681:  68%|██████▊   | 681/1000 [55:55<26:11,  4.93s/it][Succeeded / Failed / Skipped / Total] 293 / 368 / 20 / 681:  68%|██████▊   | 682/1000 [55:58<26:06,  4.92s/it]Sets the naming policy --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[after]] ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 672 ---------------------------------------------
Resolves all bridge bridges . --> [[[FAILED]]]

[[[[Adv]]]]: public Map [[resolveAll]] ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set [[bridges]] = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[bridges]] , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map [[update]] ( ) { Map resolved = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set [[access]] = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[access]] , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 673 ---------------------------------------------
Create a new HttpRequest with the given method and destination . --> Saves search content to destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[create]] ( final String [[method]] , final String destination ) { return new HttpRequest ( ) . [[method]] ( [[method]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest [[form]] ( final String [[search]] , final String destination ) { return new HttpRequest ( ) . [[search]] ( [[search]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 674 ---------------------------------------------
Start connect request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[ator]] ( final String [[add]] ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( [[add]] ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 675 ---------------------------------------------
Reads a string from a file . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readString]] ( final Path path ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ) { StringWriter [[writer]] = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[document]] ( final Path path ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ) { StringWriter [[type]] = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 676 ---------------------------------------------
Sets the Http request host . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[host]] ( final String [[host]] ) { this . [[host]] = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[address]] ( final String [[array]] ) { this . [[include]] = [[address]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[address]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 677 ---------------------------------------------
Create a PUT request --> Start http session --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[session]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 678 ---------------------------------------------
Create a GET request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[pointer]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 679 ---------------------------------------------
Start HTTP POST request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[pointer]] ( final String [[element]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[element]] ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 680 ---------------------------------------------
Start HTTP PATCH request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[ator]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 681 ---------------------------------------------
Create a HEAD request --> Start http session --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[session]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 682 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 293 / 369 / 20 / 682:  68%|██████▊   | 682/1000 [55:58<26:06,  4.92s/it][Succeeded / Failed / Skipped / Total] 293 / 369 / 20 / 682:  68%|██████▊   | 683/1000 [56:02<26:00,  4.92s/it][Succeeded / Failed / Skipped / Total] 293 / 370 / 20 / 683:  68%|██████▊   | 683/1000 [56:02<26:00,  4.92s/it][Succeeded / Failed / Skipped / Total] 293 / 370 / 20 / 683:  68%|██████▊   | 684/1000 [56:03<25:53,  4.92s/it][Succeeded / Failed / Skipped / Total] 293 / 371 / 20 / 684:  68%|██████▊   | 684/1000 [56:03<25:53,  4.92s/it][Succeeded / Failed / Skipped / Total] 293 / 371 / 20 / 684:  68%|██████▊   | 685/1000 [56:06<25:48,  4.91s/it][Succeeded / Failed / Skipped / Total] 294 / 371 / 20 / 685:  68%|██████▊   | 685/1000 [56:06<25:48,  4.91s/it][Succeeded / Failed / Skipped / Total] 294 / 371 / 20 / 685:  69%|██████▊   | 686/1000 [56:07<25:41,  4.91s/it][Succeeded / Failed / Skipped / Total] 295 / 371 / 20 / 686:  69%|██████▊   | 686/1000 [56:07<25:41,  4.91s/it][Succeeded / Failed / Skipped / Total] 295 / 371 / 20 / 686:  69%|██████▊   | 687/1000 [56:12<25:36,  4.91s/it][Succeeded / Failed / Skipped / Total] 296 / 371 / 20 / 687:  69%|██████▊   | 687/1000 [56:12<25:36,  4.91s/it][Succeeded / Failed / Skipped / Total] 296 / 371 / 20 / 687:  69%|██████▉   | 688/1000 [56:23<25:34,  4.92s/it][Succeeded / Failed / Skipped / Total] 297 / 371 / 20 / 688:  69%|██████▉   | 688/1000 [56:23<25:34,  4.92s/it][Succeeded / Failed / Skipped / Total] 297 / 372 / 20 / 689:  69%|██████▉   | 689/1000 [56:23<25:27,  4.91s/it][Succeeded / Failed / Skipped / Total] 297 / 372 / 20 / 689:  69%|██████▉   | 690/1000 [56:23<25:20,  4.90s/it][Succeeded / Failed / Skipped / Total] 297 / 373 / 20 / 690:  69%|██████▉   | 690/1000 [56:23<25:20,  4.90s/it][Succeeded / Failed / Skipped / Total] 298 / 373 / 20 / 691:  69%|██████▉   | 691/1000 [56:33<25:17,  4.91s/it][Succeeded / Failed / Skipped / Total] 298 / 373 / 20 / 691:  69%|██████▉   | 692/1000 [56:36<25:11,  4.91s/it]Create a DELETE request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[pointer]] ( final String [[message]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[message]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 683 ---------------------------------------------
Start OPTIONS request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[options]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest [[of]] ( final String [[foo]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[foo]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 684 ---------------------------------------------
Start a TRACE request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[of]] ( final String [[query]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[query]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 685 ---------------------------------------------
Sets the cookies in the request . --> Set cookie headers --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[REPLACEME0]] ( final Cookie ... [[REPLACEME0]] ) { if ( [[REPLACEME0]] . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie cookie : [[REPLACEME0]] ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { cookieString . append ( "; " ) ; } first = "False" != "False" ; cookieString . append ( cookie . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest [[ron]] ( final Cookie ... [[ron]] ) { if ( [[ron]] . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie cookie : [[ron]] ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { cookieString . append ( "; " ) ; } first = "False" != "False" ; cookieString . append ( cookie . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 686 ---------------------------------------------
Sets the Http request path . --> Add an array element --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[path]] ( String [[path]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[array]] ( String [[i]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 687 ---------------------------------------------
Gets the query string . --> Get the hash of this request --> Socre: 1.0

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[hash]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 688 ---------------------------------------------
Set the query parameter . --> Set the HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest queryString ( final String queryString , final boolean [[decode]] ) { this . [[query]] = HttpUtil . parseQuery ( queryString , [[decode]] ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest queryString ( final String queryString , final boolean [[procedure]] ) { this . [[table]] = HttpUtil . parseQuery ( queryString , [[procedure]] ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 689 ---------------------------------------------
Gets the host URL . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[prefix]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 690 ---------------------------------------------
Add query map . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[query]] ( final Map < String , String > [[queryMap]] ) { for ( Map . Entry < String , String > entry : [[queryMap]] . entrySet ( ) ) { [[query]] . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest [[e]] ( final Map < String , String > [[pointer]] ) { for ( Map . Entry < String , String > entry : [[pointer]] . entrySet ( ) ) { [[e]] . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 691 ---------------------------------------------
Adds a query parameter to the request . --> Add two values --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[query]] ( final String name1 , final Object value1 , final Object ... [[parameters]] ) { [[query]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < [[parameters]] . length ; i += 2 ) { String name = [[parameters]] [ i ] . toString ( ) ; String value = [[parameters]] [ i + 1 ] . toString ( ) ; [[query]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest [[e]] ( final String name1 , final Object value1 , final Object ... [[array]] ) { [[e]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < [[array]] . length ; i += 2 ) { String name = [[array]] [ i ] . toString ( ) ; String value = [[array]] [ i + 1 ] . toString ( ) ; [[e]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 692 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 299 / 373 / 20 / 692:  69%|██████▉   | 692/1000 [56:36<25:11,  4.91s/it][Succeeded / Failed / Skipped / Total] 299 / 373 / 20 / 692:  69%|██████▉   | 693/1000 [56:37<25:05,  4.90s/it][Succeeded / Failed / Skipped / Total] 300 / 373 / 20 / 693:  69%|██████▉   | 693/1000 [56:37<25:05,  4.90s/it][Succeeded / Failed / Skipped / Total] 300 / 373 / 20 / 693:  69%|██████▉   | 694/1000 [56:40<24:59,  4.90s/it][Succeeded / Failed / Skipped / Total] 300 / 374 / 20 / 694:  69%|██████▉   | 694/1000 [56:40<24:59,  4.90s/it][Succeeded / Failed / Skipped / Total] 300 / 374 / 20 / 694:  70%|██████▉   | 695/1000 [56:50<24:56,  4.91s/it][Succeeded / Failed / Skipped / Total] 301 / 374 / 20 / 695:  70%|██████▉   | 695/1000 [56:50<24:56,  4.91s/it][Succeeded / Failed / Skipped / Total] 301 / 374 / 20 / 695:  70%|██████▉   | 696/1000 [56:55<24:51,  4.91s/it][Succeeded / Failed / Skipped / Total] 301 / 375 / 20 / 696:  70%|██████▉   | 696/1000 [56:55<24:51,  4.91s/it][Succeeded / Failed / Skipped / Total] 301 / 375 / 20 / 696:  70%|██████▉   | 697/1000 [56:57<24:45,  4.90s/it][Succeeded / Failed / Skipped / Total] 301 / 376 / 20 / 697:  70%|██████▉   | 697/1000 [56:57<24:45,  4.90s/it][Succeeded / Failed / Skipped / Total] 301 / 376 / 20 / 697:  70%|██████▉   | 698/1000 [57:03<24:41,  4.90s/it][Succeeded / Failed / Skipped / Total] 301 / 377 / 20 / 698:  70%|██████▉   | 698/1000 [57:03<24:41,  4.90s/it][Succeeded / Failed / Skipped / Total] 301 / 377 / 20 / 698:  70%|██████▉   | 699/1000 [57:03<24:34,  4.90s/it][Succeeded / Failed / Skipped / Total] 301 / 378 / 20 / 699:  70%|██████▉   | 699/1000 [57:03<24:34,  4.90s/it][Succeeded / Failed / Skipped / Total] 301 / 378 / 20 / 699:  70%|███████   | 700/1000 [57:08<24:29,  4.90s/it][Succeeded / Failed / Skipped / Total] 301 / 379 / 20 / 700:  70%|███████   | 700/1000 [57:08<24:29,  4.90s/it][Succeeded / Failed / Skipped / Total] 301 / 379 / 20 / 700:  70%|███████   | 701/1000 [57:09<24:22,  4.89s/it][Succeeded / Failed / Skipped / Total] 302 / 379 / 20 / 701:  70%|███████   | 701/1000 [57:09<24:22,  4.89s/it][Succeeded / Failed / Skipped / Total] 302 / 379 / 20 / 701:  70%|███████   | 702/1000 [57:16<24:18,  4.90s/it][Succeeded / Failed / Skipped / Total] 302 / 380 / 20 / 702:  70%|███████   | 702/1000 [57:16<24:18,  4.90s/it][Succeeded / Failed / Skipped / Total] 302 / 380 / 20 / 702:  70%|███████   | 703/1000 [57:19<24:13,  4.89s/it]Returns the buffer . --> region Selector --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Buffer [[buffer]] ( final boolean [[fullRequest]] ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer [[select]] ( final boolean [[argument]] ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 693 ---------------------------------------------
Sets the host header . --> Overwrites the hostname of the request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String hostPort = this . [[host]] ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[ride]] ( ) { String hostPort = this . [[terminal]] ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 694 ---------------------------------------------
Send and receive response . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[R]] > [[R]] sendAndReceive ( final Function < HttpResponse , [[R]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < [[post]] > [[post]] sendAndReceive ( final Function < HttpResponse , [[post]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 695 ---------------------------------------------
Set basic authentication header . --> Set the authority for a password --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String [[username]] , final String password ) { if ( [[username]] != null && password != null ) { String [[data]] = [[username]] . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( [[data]] ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[rel]] ( final String [[reference]] , final String password ) { if ( [[reference]] != null && password != null ) { String [[object]] = [[reference]] . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( [[object]] ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 696 ---------------------------------------------
Collects all action interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > [[interceptorValues]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[interceptorValues]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[adversary]] ( ) { final Collection < ? extends ActionInterceptor > [[end]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[end]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 697 ---------------------------------------------
Returns the length of the exception table . --> [[[FAILED]]]

[[[[Adv]]]]: static int [[getExceptionTableLength]] ( final Handler firstHandler ) { int length = 0 ; Handler handler = firstHandler ; while ( handler != null ) { length ++ ; handler = handler . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int [[main]] ( final Handler firstHandler ) { int length = 0 ; Handler handler = firstHandler ; while ( handler != null ) { length ++ ; handler = handler . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 698 ---------------------------------------------
Collects all action filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > [[filterValues]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filterValues]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[string]] ( ) { final Collection < ? extends ActionFilter > [[methods]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[methods]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 699 ---------------------------------------------
Collect all action - timestimes . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[take]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 700 ---------------------------------------------
Collect all action results . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > [[resultsValues]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[resultsValues]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[take]] ( ) { final Collection < ActionResult > [[process]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[process]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 701 ---------------------------------------------
Sets a simple property . --> Called by BeanProperty --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[product]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 702 ---------------------------------------------
Returns the writer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[interpreter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
[Succeeded / Failed / Skipped / Total] 302 / 381 / 20 / 703:  70%|███████   | 703/1000 [57:19<24:13,  4.89s/it][Succeeded / Failed / Skipped / Total] 302 / 381 / 20 / 703:  70%|███████   | 704/1000 [57:24<24:08,  4.89s/it][Succeeded / Failed / Skipped / Total] 303 / 381 / 20 / 704:  70%|███████   | 704/1000 [57:24<24:08,  4.89s/it][Succeeded / Failed / Skipped / Total] 303 / 381 / 20 / 704:  70%|███████   | 705/1000 [57:26<24:02,  4.89s/it][Succeeded / Failed / Skipped / Total] 304 / 381 / 20 / 705:  70%|███████   | 705/1000 [57:26<24:02,  4.89s/it][Succeeded / Failed / Skipped / Total] 304 / 381 / 20 / 705:  71%|███████   | 706/1000 [57:28<23:55,  4.88s/it][Succeeded / Failed / Skipped / Total] 305 / 381 / 20 / 706:  71%|███████   | 706/1000 [57:28<23:55,  4.88s/it][Succeeded / Failed / Skipped / Total] 305 / 381 / 20 / 706:  71%|███████   | 707/1000 [57:40<23:54,  4.90s/it][Succeeded / Failed / Skipped / Total] 306 / 381 / 20 / 707:  71%|███████   | 707/1000 [57:40<23:54,  4.90s/it][Succeeded / Failed / Skipped / Total] 306 / 381 / 20 / 707:  71%|███████   | 708/1000 [57:43<23:48,  4.89s/it][Succeeded / Failed / Skipped / Total] 307 / 381 / 20 / 708:  71%|███████   | 708/1000 [57:43<23:48,  4.89s/it][Succeeded / Failed / Skipped / Total] 307 / 381 / 20 / 708:  71%|███████   | 709/1000 [57:45<23:42,  4.89s/it][Succeeded / Failed / Skipped / Total] 308 / 381 / 20 / 709:  71%|███████   | 709/1000 [57:45<23:42,  4.89s/it][Succeeded / Failed / Skipped / Total] 308 / 381 / 20 / 709:  71%|███████   | 710/1000 [57:50<23:37,  4.89s/it][Succeeded / Failed / Skipped / Total] 308 / 382 / 20 / 710:  71%|███████   | 710/1000 [57:50<23:37,  4.89s/it][Succeeded / Failed / Skipped / Total] 308 / 382 / 20 / 710:  71%|███████   | 711/1000 [58:00<23:34,  4.90s/it][Succeeded / Failed / Skipped / Total] 308 / 383 / 20 / 711:  71%|███████   | 711/1000 [58:00<23:34,  4.90s/it][Succeeded / Failed / Skipped / Total] 308 / 383 / 20 / 711:  71%|███████   | 712/1000 [58:02<23:28,  4.89s/it]--------------------------------------------- Result 703 ---------------------------------------------
Gets the index property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( [[T]] ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( [[T]] ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[example]] > [[example]] getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( [[example]] ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( [[example]] ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 704 ---------------------------------------------
Get object reference by name . --> Get template by name --> Socre: 1.0

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[template]] ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 705 ---------------------------------------------
Remove range from start and endpoints --> Shortcut for debugging purposes --> Socre: 1.0

[[[[Adv]]]]: static Handler [[removeRange]] ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[removeRange]] ( firstHandler . nextHandler , start , end ) ; } int [[handlerStart]] = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler [[string]] ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[string]] ( firstHandler . nextHandler , start , end ) ; } int [[be]] = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 706 ---------------------------------------------
Extract the property from the property name --> Get oracle from string --> Socre: 1.0

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String [[propertyName]] ) { int [[ndx]] = StringUtil . indexOfChars ( [[propertyName]] , INDEX_CHARS ) ; if ( [[ndx]] == - 1 ) { return [[propertyName]] ; } return [[propertyName]] . substring ( 0 , [[ndx]] ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[oracle]] ( final String [[string]] ) { int [[attribute]] = StringUtil . indexOfChars ( [[string]] , INDEX_CHARS ) ; if ( [[attribute]] == - 1 ) { return [[string]] ; } return [[string]] . substring ( 0 , [[attribute]] ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 707 ---------------------------------------------
Sets an object reference . --> Associate with end and end --> Socre: 1.0

[[[[Adv]]]]: public void [[setObjectReference]] ( final String [[name]] , final Object [[object]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[name]] , [[object]] ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[pair]] ( final String [[end]] , final Object [[match]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[end]] , [[match]] ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 708 ---------------------------------------------
Lookup an object reference . --> Get a method definition by definition --> Socre: 1.0

[[[[Adv]]]]: public Object [[lookupObject]] ( final String [[ref]] ) { Object [[value]] = getObjectReference ( [[ref]] ) ; if ( [[value]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[ref]] ) ; } return [[value]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[method]] ( final String [[definition]] ) { Object [[meta]] = getObjectReference ( [[definition]] ) ; if ( [[meta]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[definition]] ) ; } return [[meta]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 709 ---------------------------------------------
Find table descriptor by column reference . --> Returns the path for the given address --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String [[columnRef]] ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( [[columnRef]] ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[path]] ( final String [[address]] ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( [[address]] ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 710 ---------------------------------------------
Returns the descriptor for the given table reference . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor [[getTableDescriptor]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( [[tableRef]] ) ; return [[t]] == null ? null : [[t]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor [[since]] ( final String [[null]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[c]] = tableRefs . get ( [[null]] ) ; return [[c]] == null ? null : [[c]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 711 ---------------------------------------------
Register hint . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[like]] ( final String [[element]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[element]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 712 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 308 / 384 / 20 / 712:  71%|███████   | 712/1000 [58:02<23:28,  4.89s/it][Succeeded / Failed / Skipped / Total] 308 / 384 / 20 / 712:  71%|███████▏  | 713/1000 [58:04<23:22,  4.89s/it][Succeeded / Failed / Skipped / Total] 308 / 385 / 20 / 713:  71%|███████▏  | 713/1000 [58:04<23:22,  4.89s/it][Succeeded / Failed / Skipped / Total] 308 / 385 / 20 / 713:  71%|███████▏  | 714/1000 [58:07<23:17,  4.89s/it][Succeeded / Failed / Skipped / Total] 309 / 385 / 20 / 714:  71%|███████▏  | 714/1000 [58:07<23:17,  4.89s/it][Succeeded / Failed / Skipped / Total] 309 / 385 / 20 / 714:  72%|███████▏  | 715/1000 [58:18<23:14,  4.89s/it][Succeeded / Failed / Skipped / Total] 309 / 386 / 20 / 715:  72%|███████▏  | 715/1000 [58:18<23:14,  4.89s/it][Succeeded / Failed / Skipped / Total] 309 / 386 / 20 / 715:  72%|███████▏  | 716/1000 [58:46<23:18,  4.92s/it][Succeeded / Failed / Skipped / Total] 309 / 387 / 20 / 716:  72%|███████▏  | 716/1000 [58:46<23:18,  4.92s/it][Succeeded / Failed / Skipped / Total] 309 / 387 / 20 / 716:  72%|███████▏  | 717/1000 [58:58<23:16,  4.94s/it][Succeeded / Failed / Skipped / Total] 310 / 387 / 20 / 717:  72%|███████▏  | 717/1000 [58:58<23:16,  4.94s/it][Succeeded / Failed / Skipped / Total] 310 / 387 / 20 / 717:  72%|███████▏  | 718/1000 [59:00<23:10,  4.93s/it][Succeeded / Failed / Skipped / Total] 310 / 388 / 20 / 718:  72%|███████▏  | 718/1000 [59:00<23:10,  4.93s/it][Succeeded / Failed / Skipped / Total] 310 / 388 / 20 / 718:  72%|███████▏  | 719/1000 [59:04<23:05,  4.93s/it]Returns the alias for the given table reference . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getTableAlias]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[tableRef]] ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[id]] ( final String [[name]] ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( [[name]] ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 713 ---------------------------------------------
Lookup a table reference . --> [[[FAILED]]]

[[[[Adv]]]]: protected DbEntityDescriptor [[lookupTableRef]] ( final String [[tableRef]] ) { DbEntityDescriptor [[ded]] = getTableDescriptor ( [[tableRef]] ) ; if ( [[ded]] == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[tableRef]] ) ; } return [[ded]] ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor [[array]] ( final String [[argument]] ) { DbEntityDescriptor [[range]] = getTableDescriptor ( [[argument]] ) ; if ( [[range]] == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[argument]] ) ; } return [[range]] ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 714 ---------------------------------------------
Serialize the given value to the given context . --> Serialize the given object --> Socre: 1.0

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext jsonContext , final T [[value]] ) { if ( jsonContext . pushValue ( [[value]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext jsonContext , final T [[ld]] ) { if ( jsonContext . pushValue ( [[ld]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 715 ---------------------------------------------
Register a table reference . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerTableReference]] ( final String [[tableReference]] , final DbEntityDescriptor [[ded]] , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[t]] = new TableRefData ( [[ded]] , tableAlias ) ; if ( tableRefs . put ( [[tableReference]] , [[t]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + [[tableReference]] ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[merge]] ( final String [[attribute]] , final DbEntityDescriptor [[data]] , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[v]] = new TableRefData ( [[data]] , tableAlias ) ; if ( tableRefs . put ( [[attribute]] , [[v]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + [[attribute]] ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 716 ---------------------------------------------
Convert a property name to the column name --> [[[FAILED]]]

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String [[propertyName]] ) { StringBuilder tableName = new StringBuilder ( [[propertyName]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( [[propertyName]] , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( [[propertyName]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[list]] ( final String [[form]] ) { StringBuilder tableName = new StringBuilder ( [[form]] . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( [[form]] , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( [[form]] ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 717 ---------------------------------------------
Converts a column name to a property name --> Returns the length of the string --> Socre: 1.0

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int [[len]] = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < [[len]] ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[length]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int [[s]] = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < [[s]] ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 718 ---------------------------------------------
Inject attribute values . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectAttributes]] ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > attributeNames = servletRequest . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object [[attrValue]] = servletRequest . getAttribute ( attrName ) ; target . writeValue ( name , [[attrValue]] , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void [[status]] ( final HttpServletRequest servletRequest , final Targets targets ) { final Enumeration < String > attributeNames = servletRequest . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object [[position]] = servletRequest . getAttribute ( attrName ) ; target . writeValue ( name , [[position]] , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 719 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 311 / 388 / 20 / 719:  72%|███████▏  | 719/1000 [59:04<23:05,  4.93s/it][Succeeded / Failed / Skipped / Total] 311 / 388 / 20 / 719:  72%|███████▏  | 720/1000 [59:09<23:00,  4.93s/it][Succeeded / Failed / Skipped / Total] 311 / 389 / 20 / 720:  72%|███████▏  | 720/1000 [59:09<23:00,  4.93s/it][Succeeded / Failed / Skipped / Total] 311 / 389 / 20 / 720:  72%|███████▏  | 721/1000 [59:10<22:54,  4.93s/it][Succeeded / Failed / Skipped / Total] 311 / 390 / 20 / 721:  72%|███████▏  | 721/1000 [59:10<22:54,  4.93s/it][Succeeded / Failed / Skipped / Total] 311 / 390 / 20 / 721:  72%|███████▏  | 722/1000 [59:23<22:52,  4.94s/it][Succeeded / Failed / Skipped / Total] 311 / 391 / 20 / 722:  72%|███████▏  | 722/1000 [59:23<22:52,  4.94s/it][Succeeded / Failed / Skipped / Total] 311 / 391 / 20 / 722:  72%|███████▏  | 723/1000 [59:27<22:46,  4.93s/it][Succeeded / Failed / Skipped / Total] 311 / 392 / 20 / 723:  72%|███████▏  | 723/1000 [59:27<22:46,  4.93s/it][Succeeded / Failed / Skipped / Total] 311 / 392 / 20 / 723:  72%|███████▏  | 724/1000 [59:29<22:40,  4.93s/it]Convert to column name . --> Get font --> Socre: 1.0

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String columnName ) { String propertyName = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[font]] ( final String columnName ) { String propertyName = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 720 ---------------------------------------------
Inject uploaded files . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectUploadedFiles]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void [[main]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 721 ---------------------------------------------
Prepares the value for the given target type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[E]] > [[E]] prepareGetValue ( final T t , final Class < [[E]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[E]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[context]] > [[context]] prepareGetValue ( final T t , final Class < [[context]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[context]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 722 ---------------------------------------------
Replies the set of wrappers . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > [[set]] = new HashSet <> ( wrappers . size ( ) ) ; [[set]] . addAll ( wrappers . values ( ) ) ; return [[set]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[flags]] ( ) { final Set < T > [[a]] = new HashSet <> ( wrappers . size ( ) ) ; [[a]] . addAll ( wrappers . values ( ) ) ; return [[a]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 723 ---------------------------------------------
Inject parameters in the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[injectParameters]] ( final HttpServletRequest servletRequest , final Targets [[targets]] ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > [[paramNames]] = servletRequest . getParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { final String paramName = [[paramNames]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } [[targets]] . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "[[True]]" == "[[True]]" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void [[pair]] ( final HttpServletRequest servletRequest , final Targets [[label]] ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > [[data]] = servletRequest . getParameterNames ( ) ; while ( [[data]] . hasMoreElements ( ) ) { final String paramName = [[data]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } [[label]] . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "[[gets]]" == "[[gets]]" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 724 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 311 / 393 / 20 / 724:  72%|███████▏  | 724/1000 [59:29<22:40,  4.93s/it][Succeeded / Failed / Skipped / Total] 311 / 393 / 20 / 724:  72%|███████▎  | 725/1000 [59:37<22:36,  4.93s/it][Succeeded / Failed / Skipped / Total] 311 / 394 / 20 / 725:  72%|███████▎  | 725/1000 [59:37<22:36,  4.93s/it][Succeeded / Failed / Skipped / Total] 311 / 394 / 20 / 725:  73%|███████▎  | 726/1000 [59:40<22:31,  4.93s/it][Succeeded / Failed / Skipped / Total] 311 / 395 / 20 / 726:  73%|███████▎  | 726/1000 [59:40<22:31,  4.93s/it][Succeeded / Failed / Skipped / Total] 311 / 395 / 20 / 726:  73%|███████▎  | 727/1000 [59:43<22:25,  4.93s/it][Succeeded / Failed / Skipped / Total] 311 / 396 / 20 / 727:  73%|███████▎  | 727/1000 [59:43<22:25,  4.93s/it][Succeeded / Failed / Skipped / Total] 311 / 396 / 20 / 727:  73%|███████▎  | 728/1000 [59:47<22:20,  4.93s/it][Succeeded / Failed / Skipped / Total] 312 / 396 / 20 / 728:  73%|███████▎  | 728/1000 [59:47<22:20,  4.93s/it][Succeeded / Failed / Skipped / Total] 312 / 396 / 20 / 728:  73%|███████▎  | 729/1000 [59:48<22:14,  4.92s/it][Succeeded / Failed / Skipped / Total] 313 / 396 / 20 / 729:  73%|███████▎  | 729/1000 [59:48<22:14,  4.92s/it][Succeeded / Failed / Skipped / Total] 313 / 396 / 20 / 729:  73%|███████▎  | 730/1000 [59:53<22:09,  4.92s/it][Succeeded / Failed / Skipped / Total] 313 / 397 / 20 / 730:  73%|███████▎  | 730/1000 [59:53<22:09,  4.92s/it][Succeeded / Failed / Skipped / Total] 313 / 397 / 20 / 730:  73%|███████▎  | 731/1000 [59:55<22:03,  4.92s/it][Succeeded / Failed / Skipped / Total] 314 / 397 / 20 / 731:  73%|███████▎  | 731/1000 [59:55<22:03,  4.92s/it][Succeeded / Failed / Skipped / Total] 314 / 397 / 20 / 731:  73%|███████▎  | 732/1000 [59:57<21:57,  4.92s/it][Succeeded / Failed / Skipped / Total] 315 / 397 / 20 / 732:  73%|███████▎  | 732/1000 [59:57<21:57,  4.92s/it][Succeeded / Failed / Skipped / Total] 315 / 397 / 20 / 732:  73%|███████▎  | 733/1000 [1:00:01<21:51,  4.91s/it]Creates an instance of the specified wrapper class . --> [[[FAILED]]]

[[[[Adv]]]]: protected < R [[extends]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R [[of]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 725 ---------------------------------------------
Stores a value in the table . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[storeValue]] ( final PreparedStatement st , final int index , final Object value , final int [[dbSqlType]] ) throws SQLException { T [[t]] = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , [[t]] , [[dbSqlType]] ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void [[end]] ( final PreparedStatement st , final int index , final Object value , final int [[database]] ) throws SQLException { T [[ge]] = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , [[ge]] , [[database]] ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 726 ---------------------------------------------
Converts the given path separators into system separators . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[type]] ( final String [[command]] ) { if ( [[command]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[command]] ) ; } else { return separatorsToUnix ( [[command]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 727 ---------------------------------------------
Resolves a wrapper for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > [[wrapperClass]] ) { String [[wrapperClassName]] = [[wrapperClass]] . getName ( ) ; T wrapper = lookup ( [[wrapperClassName]] ) ; if ( wrapper == null ) { wrapper = createWrapper ( [[wrapperClass]] ) ; initializeWrapper ( wrapper ) ; wrappers . put ( [[wrapperClassName]] , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > [[c]] ) { String [[string]] = [[c]] . getName ( ) ; T wrapper = lookup ( [[string]] ) ; if ( wrapper == null ) { wrapper = createWrapper ( [[c]] ) ; initializeWrapper ( wrapper ) ; wrappers . put ( [[string]] , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 728 ---------------------------------------------
Relative path . --> List targetPath --> Socre: 1.0

[[[[Adv]]]]: public static String [[relativePath]] ( final String targetPath , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[list]] ( final String targetPath , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 729 ---------------------------------------------
Register a madvoc component . --> Register a command --> Socre: 1.0

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[command]] ) { Objects . requireNonNull ( [[command]] ) ; madvocComponents . add ( ClassConsumer . of ( [[command]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 730 ---------------------------------------------
Register an action config for the given action type . --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A extends ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 731 ---------------------------------------------
Start the webapp . --> Description of the WebApp --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[description]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 732 ---------------------------------------------
Registers the default values for the agent . --> Alarm management methods --> Socre: 1.0

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[alice]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 733 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 315 / 398 / 20 / 733:  73%|███████▎  | 733/1000 [1:00:01<21:51,  4.91s/it][Succeeded / Failed / Skipped / Total] 315 / 398 / 20 / 733:  73%|███████▎  | 734/1000 [1:00:16<21:50,  4.93s/it][Succeeded / Failed / Skipped / Total] 315 / 399 / 20 / 734:  73%|███████▎  | 734/1000 [1:00:16<21:50,  4.93s/it][Succeeded / Failed / Skipped / Total] 315 / 399 / 20 / 734:  74%|███████▎  | 735/1000 [1:00:18<21:44,  4.92s/it][Succeeded / Failed / Skipped / Total] 315 / 400 / 20 / 735:  74%|███████▎  | 735/1000 [1:00:18<21:44,  4.92s/it][Succeeded / Failed / Skipped / Total] 315 / 400 / 20 / 735:  74%|███████▎  | 736/1000 [1:00:24<21:40,  4.92s/it][Succeeded / Failed / Skipped / Total] 316 / 400 / 20 / 736:  74%|███████▎  | 736/1000 [1:00:24<21:40,  4.92s/it][Succeeded / Failed / Skipped / Total] 316 / 400 / 20 / 736:  74%|███████▎  | 737/1000 [1:00:30<21:35,  4.93s/it][Succeeded / Failed / Skipped / Total] 316 / 401 / 20 / 737:  74%|███████▎  | 737/1000 [1:00:30<21:35,  4.93s/it][Succeeded / Failed / Skipped / Total] 316 / 401 / 20 / 737:  74%|███████▍  | 738/1000 [1:00:35<21:30,  4.93s/it]Registers the madvo components . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[call]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 734 ---------------------------------------------
Exclude jars from the classpath . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner excludeJars ( final String ... [[excludedJars]] ) { for ( final String [[excludedJar]] : [[excludedJars]] ) { rulesJars . exclude ( [[excludedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner excludeJars ( final String ... [[exception]] ) { for ( final String [[after]] : [[exception]] ) { rulesJars . exclude ( [[after]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 735 ---------------------------------------------
Includes specified jars . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[includeJars]] ( final String ... [[includedJars]] ) { for ( final String [[includedJar]] : [[includedJars]] ) { rulesJars . include ( [[includedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner [[at]] ( final String ... [[create]] ) { for ( final String [[definition]] : [[create]] ) { rulesJars . include ( [[definition]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 736 ---------------------------------------------
Split the given filename into an array . --> Call the flow method --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[split]] ( final String [[filename]] ) { String [[prefix]] = getPrefix ( [[filename]] ) ; if ( [[prefix]] == null ) { [[prefix]] = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[filename]] ) ; int lastExtensionIndex = indexOfExtension ( [[filename]] ) ; String path ; String [[baseName]] ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { [[baseName]] = [[filename]] . substring ( [[prefix]] . length ( ) ) ; extension = StringPool . EMPTY ; } else { [[baseName]] = [[filename]] . substring ( [[prefix]] . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[filename]] . substring ( [[prefix]] . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { [[baseName]] = [[filename]] . substring ( [[prefix]] . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { [[baseName]] = [[filename]] . substring ( [[prefix]] . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { [[prefix]] , path , [[baseName]] , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] [[call]] ( final String [[integer]] ) { String [[flow]] = getPrefix ( [[integer]] ) ; if ( [[flow]] == null ) { [[flow]] = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[integer]] ) ; int lastExtensionIndex = indexOfExtension ( [[integer]] ) ; String path ; String [[method]] ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { [[method]] = [[integer]] . substring ( [[flow]] . length ( ) ) ; extension = StringPool . EMPTY ; } else { [[method]] = [[integer]] . substring ( [[flow]] . length ( ) , lastExtensionIndex ) ; extension = [[integer]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[integer]] . substring ( [[flow]] . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { [[method]] = [[integer]] . substring ( [[flow]] . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { [[method]] = [[integer]] . substring ( [[flow]] . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[integer]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { [[flow]] , path , [[method]] , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 737 ---------------------------------------------
Includes given entries . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... includedEntries ) { for ( final String includedEntry : includedEntries ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... includedEntries ) { for ( final String includedEntry : includedEntries ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 738 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 316 / 402 / 20 / 738:  74%|███████▍  | 738/1000 [1:00:35<21:30,  4.93s/it][Succeeded / Failed / Skipped / Total] 316 / 402 / 20 / 738:  74%|███████▍  | 739/1000 [1:00:51<21:29,  4.94s/it][Succeeded / Failed / Skipped / Total] 316 / 403 / 20 / 739:  74%|███████▍  | 739/1000 [1:00:51<21:29,  4.94s/it][Succeeded / Failed / Skipped / Total] 316 / 403 / 20 / 739:  74%|███████▍  | 740/1000 [1:01:06<21:28,  4.95s/it][Succeeded / Failed / Skipped / Total] 316 / 404 / 20 / 740:  74%|███████▍  | 740/1000 [1:01:06<21:28,  4.95s/it][Succeeded / Failed / Skipped / Total] 316 / 404 / 20 / 740:  74%|███████▍  | 741/1000 [1:01:19<21:25,  4.97s/it][Succeeded / Failed / Skipped / Total] 316 / 405 / 20 / 741:  74%|███████▍  | 741/1000 [1:01:19<21:25,  4.97s/it][Succeeded / Failed / Skipped / Total] 316 / 405 / 20 / 741:  74%|███████▍  | 742/1000 [1:01:24<21:20,  4.96s/it][Succeeded / Failed / Skipped / Total] 316 / 406 / 20 / 742:  74%|███████▍  | 742/1000 [1:01:24<21:20,  4.96s/it][Succeeded / Failed / Skipped / Total] 316 / 406 / 20 / 742:  74%|███████▍  | 743/1000 [1:01:24<21:14,  4.96s/it][Succeeded / Failed / Skipped / Total] 316 / 407 / 20 / 743:  74%|███████▍  | 743/1000 [1:01:24<21:14,  4.96s/it][Succeeded / Failed / Skipped / Total] 316 / 407 / 20 / 743:  74%|███████▍  | 744/1000 [1:01:30<21:09,  4.96s/it]Excludes entries that should be scanned . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[excludeEntries]] ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner [[bar]] ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 739 ---------------------------------------------
Returns the signature of a bytecode of a given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class type ) { final String name = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[format]] ( final Class type ) { final String name = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 740 ---------------------------------------------
Scan class files . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[scan]] ( final String ... paths ) { for ( final String path : paths ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner [[write]] ( final String ... paths ) { for ( final String path : paths ) { filesToScan . add ( new File ( path ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 741 ---------------------------------------------
Scans the scanner . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[alert]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 742 ---------------------------------------------
Scans classpath . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[scanClassPath]] ( final File [[root]] ) { String [[rootPath]] = [[root]] . getAbsolutePath ( ) ; if ( ! [[rootPath]] . endsWith ( File . separator ) ) { [[rootPath]] += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( [[rootPath]] ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , [[rootPath]] , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , [[rootPath]] , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void [[list]] ( final File [[source]] ) { String [[end]] = [[source]] . getAbsolutePath ( ) ; if ( ! [[end]] . endsWith ( File . separator ) ) { [[end]] += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( [[end]] ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String filePath = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , [[end]] , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , [[end]] , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 743 ---------------------------------------------
Scans a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[scanJarFile]] ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void [[release]] ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 744 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 316 / 408 / 20 / 744:  74%|███████▍  | 744/1000 [1:01:30<21:09,  4.96s/it][Succeeded / Failed / Skipped / Total] 316 / 408 / 20 / 744:  74%|███████▍  | 745/1000 [1:01:44<21:07,  4.97s/it][Succeeded / Failed / Skipped / Total] 316 / 409 / 20 / 745:  74%|███████▍  | 745/1000 [1:01:44<21:07,  4.97s/it][Succeeded / Failed / Skipped / Total] 316 / 409 / 20 / 745:  75%|███████▍  | 746/1000 [1:01:50<21:03,  4.97s/it][Succeeded / Failed / Skipped / Total] 317 / 409 / 20 / 746:  75%|███████▍  | 746/1000 [1:01:50<21:03,  4.97s/it][Succeeded / Failed / Skipped / Total] 317 / 409 / 20 / 746:  75%|███████▍  | 747/1000 [1:01:54<20:58,  4.97s/it][Succeeded / Failed / Skipped / Total] 318 / 409 / 20 / 747:  75%|███████▍  | 747/1000 [1:01:54<20:58,  4.97s/it][Succeeded / Failed / Skipped / Total] 318 / 409 / 20 / 747:  75%|███████▍  | 748/1000 [1:02:01<20:53,  4.98s/it][Succeeded / Failed / Skipped / Total] 318 / 410 / 20 / 748:  75%|███████▍  | 748/1000 [1:02:01<20:53,  4.98s/it][Succeeded / Failed / Skipped / Total] 318 / 410 / 20 / 748:  75%|███████▍  | 749/1000 [1:02:27<20:55,  5.00s/it][Succeeded / Failed / Skipped / Total] 318 / 411 / 20 / 749:  75%|███████▍  | 749/1000 [1:02:27<20:55,  5.00s/it][Succeeded / Failed / Skipped / Total] 318 / 411 / 20 / 749:  75%|███████▌  | 750/1000 [1:02:45<20:55,  5.02s/it][Succeeded / Failed / Skipped / Total] 319 / 411 / 20 / 750:  75%|███████▌  | 750/1000 [1:02:45<20:55,  5.02s/it][Succeeded / Failed / Skipped / Total] 319 / 411 / 20 / 750:  75%|███████▌  | 751/1000 [1:02:47<20:49,  5.02s/it]Returns the default scope for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[he]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 745 ---------------------------------------------
Returns or init scope of specified class . --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > [[madvocScopeType]] ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( [[madvocScopeType]] ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > [[be]] ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( [[be]] ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 746 ---------------------------------------------
Decode characters . --> Performs procedure procedure --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[decode]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] [[procedure]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 747 ---------------------------------------------
Create a new transaction with the specified scope . --> Override this method to return a list of transactions --> Socre: 1.0

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode [[tm]] , final Object [[scope]] , final boolean [[active]] ) { return new DbJtxTransaction ( this , [[tm]] , [[scope]] , [[active]] ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[list]] ( final JtxTransactionMode [[nction]] , final Object [[functional]] , final boolean [[expression]] ) { return new DbJtxTransaction ( this , [[nction]] , [[functional]] , [[expression]] ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 748 ---------------------------------------------
Creates a new scope for a given scope . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[forScope]] ( final Class < ? extends MadvocScope > [[scopeType]] , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope [[scope]] = getOrInitScope ( [[scopeType]] ) ; madvocScopeConsumer . accept ( [[scope]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void [[after]] ( final Class < ? extends MadvocScope > [[net]] , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope [[type]] = getOrInitScope ( [[net]] ) ; madvocScopeConsumer . accept ( [[type]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 749 ---------------------------------------------
Generates a CSRF token . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[prepareCsrfToken]] ( final HttpSession [[session]] , final int timeToLive ) { Set < Token > [[tokenSet]] = ( Set < Token > ) [[session]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[tokenSet]] == null ) { [[tokenSet]] = new HashSet <> ( ) ; [[session]] . setAttribute ( CSRF_TOKEN_SET , [[tokenSet]] ) ; } String value ; boolean [[unique]] ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[tokenSet]] ) ; [[unique]] = [[tokenSet]] . add ( new Token ( value , timeToLive ) ) ; } while ( ! [[unique]] ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[end]] ( final HttpSession [[bar]] , final int timeToLive ) { Set < Token > [[access]] = ( Set < Token > ) [[bar]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[access]] == null ) { [[access]] = new HashSet <> ( ) ; [[bar]] . setAttribute ( CSRF_TOKEN_SET , [[access]] ) ; } String value ; boolean [[parameter]] ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[access]] ) ; [[parameter]] = [[access]] . add ( new Token ( value , timeToLive ) ) ; } while ( ! [[parameter]] ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 750 ---------------------------------------------
Creates a copy of a Bean . --> Create bean copy from given handler --> Socre: 1.0

[[[[Adv]]]]: public static BeanCopy from ( final Object [[source]] ) { BeanCopy [[beanCopy]] = new BeanCopy ( [[source]] ) ; [[beanCopy]] . isSourceMap = [[source]] instanceof Map ; return [[beanCopy]] ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy from ( final Object [[handler]] ) { BeanCopy [[tree]] = new BeanCopy ( [[handler]] ) ; [[tree]] . isSourceMap = [[handler]] instanceof Map ; return [[tree]] ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 751 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 319 / 412 / 20 / 751:  75%|███████▌  | 751/1000 [1:02:47<20:49,  5.02s/it][Succeeded / Failed / Skipped / Total] 319 / 412 / 20 / 751:  75%|███████▌  | 752/1000 [1:02:51<20:43,  5.02s/it][Succeeded / Failed / Skipped / Total] 320 / 412 / 20 / 752:  75%|███████▌  | 752/1000 [1:02:51<20:43,  5.02s/it][Succeeded / Failed / Skipped / Total] 320 / 412 / 20 / 752:  75%|███████▌  | 753/1000 [1:03:08<20:42,  5.03s/it][Succeeded / Failed / Skipped / Total] 321 / 412 / 20 / 753:  75%|███████▌  | 753/1000 [1:03:08<20:42,  5.03s/it][Succeeded / Failed / Skipped / Total] 321 / 412 / 20 / 753:  75%|███████▌  | 754/1000 [1:03:10<20:36,  5.03s/it][Succeeded / Failed / Skipped / Total] 321 / 413 / 20 / 754:  75%|███████▌  | 754/1000 [1:03:10<20:36,  5.03s/it][Succeeded / Failed / Skipped / Total] 321 / 413 / 20 / 754:  76%|███████▌  | 755/1000 [1:03:23<20:34,  5.04s/it][Succeeded / Failed / Skipped / Total] 321 / 414 / 20 / 755:  76%|███████▌  | 755/1000 [1:03:23<20:34,  5.04s/it][Succeeded / Failed / Skipped / Total] 321 / 414 / 20 / 755:  76%|███████▌  | 756/1000 [1:03:31<20:30,  5.04s/it][Succeeded / Failed / Skipped / Total] 321 / 415 / 20 / 756:  76%|███████▌  | 756/1000 [1:03:31<20:30,  5.04s/it]Ensure that the token set is valid . --> [[[FAILED]]]

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[tokenSet]] ) { if ( [[tokenSet]] . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = [[tokenSet]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; tokenToRemove = token ; } } if ( ( tokenToRemove != null ) && ( [[tokenSet]] . size ( ) >= maxTokensPerSession ) ) { [[tokenSet]] . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[foo]] ) { if ( [[foo]] . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = [[foo]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; tokenToRemove = token ; } } if ( ( tokenToRemove != null ) && ( [[foo]] . size ( ) >= maxTokensPerSession ) ) { [[foo]] . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 752 ---------------------------------------------
Copies this bean . --> Define a declared bean --> Socre: 1.0

[[[[Adv]]]]: public void [[copy]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void [[fred]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 753 ---------------------------------------------
Visits property . --> Handle bus event --> Socre: 1.0

[[[[Adv]]]]: @ Override protected boolean [[visitProperty]] ( String [[name]] , final Object [[value]] ) { if ( isTargetMap ) { [[name]] = LEFT_SQ_BRACKET + [[name]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[name]] , [[value]] ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean [[bus]] ( String [[payload]] , final Object [[list]] ) { if ( isTargetMap ) { [[payload]] = LEFT_SQ_BRACKET + [[payload]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[payload]] , [[list]] ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 754 ---------------------------------------------
Checks to see if a CSRF token has expired . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[checkCsrfToken]] ( final HttpSession session , final String tokenValue ) { Set < Token > [[tokenSet]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( [[tokenSet]] == null ) && ( tokenValue == null ) ) { return "True" == "True" ; } if ( ( [[tokenSet]] == null ) || ( tokenValue == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > it = [[tokenSet]] . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[find]] ( final HttpSession session , final String tokenValue ) { Set < Token > [[t]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( [[t]] == null ) && ( tokenValue == null ) ) { return "True" == "True" ; } if ( ( [[t]] == null ) || ( tokenValue == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > it = [[t]] . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 755 ---------------------------------------------
Resolves a scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[i]] Scope > S resolveScope ( final Class < S > scopeType ) { S scope = ( S ) scopes . get ( scopeType ) ; if ( scope == null ) { try { scope = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , scope ) ; scopes . put ( scopeType , scope ) ; } return scope ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 756 ---------------------------------------------
Initialize the table reference . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[init]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object [[object]] = templateData . getObjectReference ( entityName ) ; if ( [[object]] != null ) { ded = lookupType ( resolveClass ( [[object]] ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . [[tableReference]] ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void [[name]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object [[a]] = templateData . getObjectReference ( entityName ) ; if ( [[a]] != null ) { ded = lookupType ( resolveClass ( [[a]] ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . [[compare]] ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 757 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 322 / 415 / 20 / 757:  76%|███████▌  | 757/1000 [1:03:31<20:23,  5.03s/it][Succeeded / Failed / Skipped / Total] 322 / 415 / 20 / 757:  76%|███████▌  | 758/1000 [1:03:41<20:20,  5.04s/it][Succeeded / Failed / Skipped / Total] 323 / 415 / 20 / 758:  76%|███████▌  | 758/1000 [1:03:41<20:20,  5.04s/it][Succeeded / Failed / Skipped / Total] 323 / 415 / 20 / 758:  76%|███████▌  | 759/1000 [1:04:01<20:19,  5.06s/it][Succeeded / Failed / Skipped / Total] 323 / 416 / 20 / 759:  76%|███████▌  | 759/1000 [1:04:01<20:19,  5.06s/it][Succeeded / Failed / Skipped / Total] 323 / 416 / 20 / 759:  76%|███████▌  | 760/1000 [1:04:42<20:26,  5.11s/it][Succeeded / Failed / Skipped / Total] 323 / 417 / 20 / 760:  76%|███████▌  | 760/1000 [1:04:42<20:26,  5.11s/it][Succeeded / Failed / Skipped / Total] 323 / 417 / 20 / 760:  76%|███████▌  | 761/1000 [1:04:44<20:20,  5.11s/it][Succeeded / Failed / Skipped / Total] 323 / 418 / 20 / 761:  76%|███████▌  | 761/1000 [1:04:44<20:20,  5.11s/it][Succeeded / Failed / Skipped / Total] 323 / 418 / 20 / 761:  76%|███████▌  | 762/1000 [1:04:51<20:15,  5.11s/it]Registers a bean definition . --> Register a new procedure --> Socre: 1.0

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition [[beanDefinition]] ) { beans . put ( name , [[beanDefinition]] ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = [[beanDefinition]] . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition [[procedure]] ) { beans . put ( name , [[procedure]] ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = [[procedure]] . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 758 ---------------------------------------------
Remove a bean from the context . --> Set empty elements --> Socre: 1.0

[[[[Adv]]]]: public void [[removeBean]] ( final Class [[type]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[empty]] ( final Class [[end]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 759 ---------------------------------------------
Register a bean definition with the given type and scope . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > BeanDefinition < T > registerPetiteBean ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > [[consumer]] ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > registerPetiteBean ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > [[array]] ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 760 ---------------------------------------------
Gets the path . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[doGetPath]] ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int [[prefix]] = getPrefixLength ( filename ) ; if ( [[prefix]] < 0 ) { return null ; } int [[index]] = indexOfLastSeparator ( filename ) ; int [[endIndex]] = [[index]] + separatorAdd ; if ( [[prefix]] >= filename . length ( ) || [[index]] < 0 || [[prefix]] >= [[endIndex]] ) { return StringPool . EMPTY ; } return filename . substring ( [[prefix]] , [[endIndex]] ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[x]] ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int [[item]] = getPrefixLength ( filename ) ; if ( [[item]] < 0 ) { return null ; } int [[icon]] = indexOfLastSeparator ( filename ) ; int [[xml]] = [[icon]] + separatorAdd ; if ( [[item]] >= filename . length ( ) || [[icon]] < 0 || [[item]] >= [[xml]] ) { return StringPool . EMPTY ; } return filename . substring ( [[item]] , [[xml]] ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 761 ---------------------------------------------
Resolve bean names for a given type . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class type ) { String [ ] [[beanNames]] = beanCollections . get ( type ) ; if ( [[beanNames]] != null ) { return [[beanNames]] ; } ArrayList < String > [[list]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , type ) ) { String [[beanName]] = entry . getKey ( ) ; [[list]] . add ( [[beanName]] ) ; } } if ( [[list]] . isEmpty ( ) ) { [[beanNames]] = StringPool . EMPTY_ARRAY ; } else { [[beanNames]] = [[list]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , [[beanNames]] ) ; return [[beanNames]] ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[contains]] ( final Class type ) { String [ ] [[type]] = beanCollections . get ( type ) ; if ( [[type]] != null ) { return [[type]] ; } ArrayList < String > [[field]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , type ) ) { String [[category]] = entry . getKey ( ) ; [[field]] . add ( [[category]] ) ; } } if ( [[field]] . isEmpty ( ) ) { [[type]] = StringPool . EMPTY_ARRAY ; } else { [[type]] = [[field]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , [[type]] ) ; return [[type]] ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 762 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 324 / 418 / 20 / 762:  76%|███████▌  | 762/1000 [1:04:51<20:15,  5.11s/it][Succeeded / Failed / Skipped / Total] 324 / 418 / 20 / 762:  76%|███████▋  | 763/1000 [1:05:00<20:11,  5.11s/it][Succeeded / Failed / Skipped / Total] 324 / 419 / 20 / 763:  76%|███████▋  | 763/1000 [1:05:00<20:11,  5.11s/it][Succeeded / Failed / Skipped / Total] 324 / 419 / 20 / 763:  76%|███████▋  | 764/1000 [1:05:37<20:16,  5.15s/it][Succeeded / Failed / Skipped / Total] 324 / 420 / 20 / 764:  76%|███████▋  | 764/1000 [1:05:37<20:16,  5.15s/it][Succeeded / Failed / Skipped / Total] 324 / 420 / 20 / 764:  76%|███████▋  | 765/1000 [1:06:04<20:17,  5.18s/it]Register a Petite Set InjectionPoint --> Register a new Petite SetInjectionPoint --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint [[sip]] = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( [[sip]] ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint [[d]] = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( [[d]] ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 763 ---------------------------------------------
Register the proper injection point for this bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteCtorInjectionPoint ( final String [[beanName]] , final Class [ ] paramTypes , final String [ ] [[references]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor [[constructor]] = null ; if ( paramTypes == null ) { CtorDescriptor [ ] [[ctors]] = cd . getAllCtorDescriptors ( ) ; if ( [[ctors]] != null && [[ctors]] . length > 0 ) { if ( [[ctors]] . length > 1 ) { throw new PetiteException ( [[ctors]] . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } [[constructor]] = [[ctors]] [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "[[True]]" == "[[True]]" ) ; if ( ctorDescriptor != null ) { [[constructor]] = ctorDescriptor . getConstructor ( ) ; } } if ( [[constructor]] == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[constructor]] , [[references]] ) ; beanDefinition . ctor = new CtorInjectionPoint ( [[constructor]] , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void registerPetiteCtorInjectionPoint ( final String [[name]] , final Class [ ] paramTypes , final String [ ] [[files]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[name]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor [[ex]] = null ; if ( paramTypes == null ) { CtorDescriptor [ ] [[rs]] = cd . getAllCtorDescriptors ( ) ; if ( [[rs]] != null && [[rs]] . length > 0 ) { if ( [[rs]] . length > 1 ) { throw new PetiteException ( [[rs]] . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } [[ex]] = [[rs]] [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "[[n]]" == "[[n]]" ) ; if ( ctorDescriptor != null ) { [[ex]] = ctorDescriptor . getConstructor ( ) ; } } if ( [[ex]] == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[ex]] , [[files]] ) ; beanDefinition . ctor = new CtorInjectionPoint ( [[ex]] , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 764 ---------------------------------------------
Register a property injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String [[property]] , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[property]] , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[property]] ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String [[address]] , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[address]] , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[address]] ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 765 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 325 / 420 / 20 / 765:  76%|███████▋  | 765/1000 [1:06:04<20:17,  5.18s/it][Succeeded / Failed / Skipped / Total] 325 / 420 / 20 / 765:  77%|███████▋  | 766/1000 [1:06:39<20:21,  5.22s/it][Succeeded / Failed / Skipped / Total] 325 / 421 / 20 / 766:  77%|███████▋  | 766/1000 [1:06:39<20:21,  5.22s/it][Succeeded / Failed / Skipped / Total] 325 / 421 / 20 / 766:  77%|███████▋  | 767/1000 [1:06:55<20:19,  5.24s/it][Succeeded / Failed / Skipped / Total] 326 / 421 / 20 / 767:  77%|███████▋  | 767/1000 [1:06:55<20:19,  5.24s/it][Succeeded / Failed / Skipped / Total] 326 / 421 / 20 / 767:  77%|███████▋  | 768/1000 [1:07:05<20:15,  5.24s/it][Succeeded / Failed / Skipped / Total] 326 / 422 / 20 / 768:  77%|███████▋  | 768/1000 [1:07:05<20:15,  5.24s/it][Succeeded / Failed / Skipped / Total] 326 / 422 / 20 / 768:  77%|███████▋  | 769/1000 [1:07:12<20:11,  5.24s/it][Succeeded / Failed / Skipped / Total] 326 / 423 / 20 / 769:  77%|███████▋  | 769/1000 [1:07:12<20:11,  5.24s/it][Succeeded / Failed / Skipped / Total] 326 / 423 / 20 / 769:  77%|███████▋  | 770/1000 [1:07:26<20:08,  5.26s/it]Register poison methods . --> Register poison methods with test --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... [[destroyMethodNames]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( [[destroyMethodNames]] == null ) { [[destroyMethodNames]] = StringPool . EMPTY_ARRAY ; } int total = [[destroyMethodNames]] . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[destroyMethodNames]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[destroyMethodNames]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "[[True]]" == "[[True]]" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + [[destroyMethodNames]] [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... [[test]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( [[test]] == null ) { [[test]] = StringPool . EMPTY_ARRAY ; } int total = [[test]] . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[test]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[test]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "[[a]]" == "[[a]]" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + [[test]] [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 766 ---------------------------------------------
Registers the Petite init methods for the given bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteInitMethods]] ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... [[initMethodNames]] ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; if ( [[initMethodNames]] == null ) { [[initMethodNames]] = StringPool . EMPTY_ARRAY ; } int total = [[initMethodNames]] . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[initMethodNames]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[initMethodNames]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[initMethodNames]] [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } [[beanDefinition]] . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void [[begin]] ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... [[list]] ) { BeanDefinition [[a]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[a]] . type ) ; if ( [[list]] == null ) { [[list]] = StringPool . EMPTY_ARRAY ; } int total = [[list]] . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ total ] ; int i ; for ( i = 0 ; i < [[list]] . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( [[list]] [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + [[a]] . type . getName ( ) + ' ' + [[list]] [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } [[a]] . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 767 ---------------------------------------------
Iterate over all beans in the given type . --> Take a bean name and pass it to a consumer --> Socre: 1.0

[[[[Adv]]]]: public void [[forEachBeanType]] ( final Class [[type]] , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[type]] ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void [[take]] ( final Class [[product]] , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[product]] ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 768 ---------------------------------------------
Register a Petite provider --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition [[beanDefinition]] = lookupBeanDefinition ( beanName ) ; if ( [[beanDefinition]] == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = [[beanDefinition]] . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void [[payload]] ( final String providerName , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition [[bb]] = lookupBeanDefinition ( beanName ) ; if ( [[bb]] == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = [[bb]] . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 769 ---------------------------------------------
Define a set of parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > [[properties]] ) { for ( Map . Entry < ? , ? > entry : [[properties]] . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[var]] ( final Map < ? , ? > [[client]] ) { for ( Map . Entry < ? , ? > entry : [[client]] . entrySet ( ) ) { defineParameter ( entry . getKey ( ) . toString ( ) , entry . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 770 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 326 / 424 / 20 / 770:  77%|███████▋  | 770/1000 [1:07:26<20:08,  5.26s/it][Succeeded / Failed / Skipped / Total] 326 / 424 / 20 / 770:  77%|███████▋  | 771/1000 [1:07:36<20:04,  5.26s/it][Succeeded / Failed / Skipped / Total] 326 / 425 / 20 / 771:  77%|███████▋  | 771/1000 [1:07:36<20:04,  5.26s/it][Succeeded / Failed / Skipped / Total] 326 / 425 / 20 / 771:  77%|███████▋  | 772/1000 [1:07:50<20:02,  5.27s/it][Succeeded / Failed / Skipped / Total] 326 / 426 / 20 / 772:  77%|███████▋  | 772/1000 [1:07:50<20:02,  5.27s/it][Succeeded / Failed / Skipped / Total] 326 / 426 / 20 / 772:  77%|███████▋  | 773/1000 [1:07:52<19:55,  5.27s/it][Succeeded / Failed / Skipped / Total] 327 / 426 / 20 / 773:  77%|███████▋  | 773/1000 [1:07:52<19:55,  5.27s/it][Succeeded / Failed / Skipped / Total] 327 / 426 / 20 / 773:  77%|███████▋  | 774/1000 [1:07:57<19:50,  5.27s/it][Succeeded / Failed / Skipped / Total] 327 / 427 / 20 / 774:  77%|███████▋  | 774/1000 [1:07:57<19:50,  5.27s/it][Succeeded / Failed / Skipped / Total] 327 / 427 / 20 / 774:  78%|███████▊  | 775/1000 [1:08:04<19:45,  5.27s/it][Succeeded / Failed / Skipped / Total] 328 / 427 / 20 / 775:  78%|███████▊  | 775/1000 [1:08:04<19:45,  5.27s/it][Succeeded / Failed / Skipped / Total] 328 / 427 / 20 / 775:  78%|███████▊  | 776/1000 [1:08:05<19:39,  5.26s/it]Register a new provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String providerName , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor [[md]] = [[cd]] . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( [[md]] == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , [[md]] . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void [[use]] ( final String providerName , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor [[cc]] = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor [[g]] = [[cc]] . getMethodDescriptor ( staticMethodName , arguments , "True" == "True" ) ; if ( [[g]] == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , [[g]] . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 771 ---------------------------------------------
Intercept the action request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object [[intercept]] ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long [[startTime]] = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long [[executionTime]] = System . currentTimeMillis ( ) - [[startTime]] ; printAfter ( actionRequest , [[executionTime]] , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object [[find]] ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long [[cause]] = System . currentTimeMillis ( ) ; Object result = null ; try { result = actionRequest . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long [[be]] = System . currentTimeMillis ( ) - [[cause]] ; printAfter ( actionRequest , [[be]] , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 772 ---------------------------------------------
Push an integer onto the stack . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[pushInt]] ( final MethodVisitor mv , final int [[value]] ) { if ( [[value]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[value]] ) ; } else if ( [[value]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[value]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[value]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void [[before]] ( final MethodVisitor mv , final int [[command]] ) { if ( [[command]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[command]] ) ; } else if ( [[command]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[command]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[command]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 773 ---------------------------------------------
Returns the Java version . --> Test to see if a loop is running --> Socre: 1.0

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int [[version]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = javaVersionNumber - 8 + 52 ; return [[version]] > platformVersion ? [[version]] : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[test]] ( final int [[loop]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = javaVersionNumber - 8 + 52 ; return [[loop]] > platformVersion ? [[loop]] : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 774 ---------------------------------------------
Checks that the argument index is valid . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[checkArgumentIndex]] ( final MethodInfo methodInfo , final int [[argIndex]] ) { if ( ( [[argIndex]] < 1 ) || ( [[argIndex]] > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[argIndex]] ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void [[c]] ( final MethodInfo methodInfo , final int [[a]] ) { if ( ( [[a]] < 1 ) || ( [[a]] > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[a]] ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 775 ---------------------------------------------
Generate field name . --> Generate a string representation of an array --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String [[name]] , final int index ) { return ProxettaNames . fieldPrefix + [[name]] + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[object]] ( final String [[array]] , final int index ) { return ProxettaNames . fieldPrefix + [[array]] + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 776 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 328 / 428 / 20 / 776:  78%|███████▊  | 776/1000 [1:08:05<19:39,  5.26s/it][Succeeded / Failed / Skipped / Total] 328 / 428 / 20 / 776:  78%|███████▊  | 777/1000 [1:08:06<19:32,  5.26s/it][Succeeded / Failed / Skipped / Total] 329 / 428 / 20 / 777:  78%|███████▊  | 777/1000 [1:08:06<19:32,  5.26s/it][Succeeded / Failed / Skipped / Total] 329 / 428 / 20 / 777:  78%|███████▊  | 778/1000 [1:08:16<19:28,  5.27s/it][Succeeded / Failed / Skipped / Total] 330 / 428 / 20 / 778:  78%|███████▊  | 778/1000 [1:08:16<19:28,  5.27s/it][Succeeded / Failed / Skipped / Total] 330 / 428 / 20 / 778:  78%|███████▊  | 779/1000 [1:08:32<19:26,  5.28s/it][Succeeded / Failed / Skipped / Total] 330 / 429 / 20 / 779:  78%|███████▊  | 779/1000 [1:08:32<19:26,  5.28s/it][Succeeded / Failed / Skipped / Total] 330 / 429 / 20 / 779:  78%|███████▊  | 780/1000 [1:08:32<19:19,  5.27s/it][Succeeded / Failed / Skipped / Total] 330 / 430 / 20 / 780:  78%|███████▊  | 780/1000 [1:08:32<19:19,  5.27s/it][Succeeded / Failed / Skipped / Total] 330 / 430 / 20 / 780:  78%|███████▊  | 781/1000 [1:08:40<19:15,  5.28s/it][Succeeded / Failed / Skipped / Total] 331 / 430 / 20 / 781:  78%|███████▊  | 781/1000 [1:08:40<19:15,  5.28s/it][Succeeded / Failed / Skipped / Total] 331 / 430 / 20 / 781:  78%|███████▊  | 782/1000 [1:08:48<19:10,  5.28s/it]Register a method injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteMethodInjectionPoint]] ( final String beanName , final String methodName , final Class [ ] [[arguments]] , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( [[arguments]] == null ) { MethodDescriptor [ ] [[methods]] = cd . getAllMethodDescriptors ( methodName ) ; if ( [[methods]] != null && [[methods]] . length > 0 ) { if ( [[methods]] . length > 1 ) { throw new PetiteException ( [[methods]] . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = [[methods]] [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , [[arguments]] , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint [[mip]] = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( [[mip]] ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void [[assume]] ( final String beanName , final String methodName , final Class [ ] [[access]] , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( [[access]] == null ) { MethodDescriptor [ ] [[arguments]] = cd . getAllMethodDescriptors ( methodName ) ; if ( [[arguments]] != null && [[arguments]] . length > 0 ) { if ( [[arguments]] . length > 1 ) { throw new PetiteException ( [[arguments]] . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = [[arguments]] [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , [[access]] , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint [[table]] = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( [[table]] ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 777 ---------------------------------------------
Generate advice method name . --> Convert address and index to address --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String [[name]] , final int index ) { return ProxettaNames . methodPrefix + [[name]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[address]] ( final String [[addressing]] , final int index ) { return ProxettaNames . methodPrefix + [[addressing]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 778 ---------------------------------------------
load special method arguments --> Quick fix to fix the stack instructions --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo ) { [[mv]] . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[mv]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[fix]] ( final MethodVisitor [[ium]] , final MethodInfo methodInfo ) { [[ium]] . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[ium]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 779 ---------------------------------------------
Load static methods from the given method . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadStaticMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[mv]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void [[main]] ( final MethodVisitor [[ex]] , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[ex]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 780 ---------------------------------------------
Load virtual method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadVirtualMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int [[i]] = 1 ; [[i]] <= methodInfo . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( mv , methodInfo , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void [[python]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int [[vs]] = 1 ; [[vs]] <= methodInfo . getArgumentsCount ( ) ; [[vs]] ++ ) { loadMethodArgument ( mv , methodInfo , [[vs]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 781 ---------------------------------------------
Create method signature key . --> Generates a group of details --> Socre: 1.0

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[group]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 782 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 331 / 431 / 20 / 782:  78%|███████▊  | 782/1000 [1:08:48<19:10,  5.28s/it][Succeeded / Failed / Skipped / Total] 331 / 431 / 20 / 782:  78%|███████▊  | 783/1000 [1:08:54<19:05,  5.28s/it][Succeeded / Failed / Skipped / Total] 331 / 432 / 20 / 783:  78%|███████▊  | 783/1000 [1:08:54<19:05,  5.28s/it][Succeeded / Failed / Skipped / Total] 331 / 432 / 20 / 783:  78%|███████▊  | 784/1000 [1:09:01<19:00,  5.28s/it][Succeeded / Failed / Skipped / Total] 331 / 433 / 20 / 784:  78%|███████▊  | 784/1000 [1:09:01<19:00,  5.28s/it][Succeeded / Failed / Skipped / Total] 331 / 433 / 20 / 784:  78%|███████▊  | 785/1000 [1:09:01<18:54,  5.28s/it][Succeeded / Failed / Skipped / Total] 331 / 434 / 20 / 785:  78%|███████▊  | 785/1000 [1:09:01<18:54,  5.28s/it][Succeeded / Failed / Skipped / Total] 331 / 434 / 20 / 785:  79%|███████▊  | 786/1000 [1:09:09<18:49,  5.28s/it]Loads a method argument . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int [[index]] ) { int offset = methodInfo . getArgumentOffset ( [[index]] ) ; int type = methodInfo . getArgument ( [[index]] ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[program]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int [[id]] ) { int offset = methodInfo . getArgumentOffset ( [[id]] ) ; int type = methodInfo . getArgument ( [[id]] ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 783 ---------------------------------------------
Stores a method argument . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeMethodArgument]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int [[index]] ) { int offset = methodInfo . getArgumentOffset ( [[index]] ) ; int type = methodInfo . getArgument ( [[index]] ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[fix]] ( final MethodVisitor mv , final MethodInfo methodInfo , final int [[list]] ) { int offset = methodInfo . getArgumentOffset ( [[list]] ) ; int type = methodInfo . getArgument ( [[list]] ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 784 ---------------------------------------------
Generates instructions for a new array type . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[newArray]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void [[atomic]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 785 ---------------------------------------------
Prepares the return value . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareReturnValue]] ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void [[test]] ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 786 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 331 / 435 / 20 / 786:  79%|███████▊  | 786/1000 [1:09:09<18:49,  5.28s/it][Succeeded / Failed / Skipped / Total] 331 / 435 / 20 / 786:  79%|███████▊  | 787/1000 [1:09:17<18:45,  5.28s/it][Succeeded / Failed / Skipped / Total] 332 / 435 / 20 / 787:  79%|███████▊  | 787/1000 [1:09:17<18:45,  5.28s/it][Succeeded / Failed / Skipped / Total] 332 / 435 / 20 / 787:  79%|███████▉  | 788/1000 [1:09:19<18:39,  5.28s/it][Succeeded / Failed / Skipped / Total] 332 / 436 / 20 / 788:  79%|███████▉  | 788/1000 [1:09:19<18:39,  5.28s/it][Succeeded / Failed / Skipped / Total] 332 / 436 / 20 / 788:  79%|███████▉  | 789/1000 [1:09:27<18:34,  5.28s/it][Succeeded / Failed / Skipped / Total] 333 / 436 / 20 / 789:  79%|███████▉  | 789/1000 [1:09:27<18:34,  5.28s/it][Succeeded / Failed / Skipped / Total] 333 / 436 / 20 / 789:  79%|███████▉  | 790/1000 [1:09:28<18:27,  5.28s/it][Succeeded / Failed / Skipped / Total] 333 / 437 / 20 / 790:  79%|███████▉  | 790/1000 [1:09:28<18:27,  5.28s/it][Succeeded / Failed / Skipped / Total] 333 / 437 / 20 / 790:  79%|███████▉  | 791/1000 [1:09:40<18:24,  5.28s/it][Succeeded / Failed / Skipped / Total] 334 / 437 / 20 / 791:  79%|███████▉  | 791/1000 [1:09:40<18:24,  5.28s/it][Succeeded / Failed / Skipped / Total] 334 / 437 / 20 / 791:  79%|███████▉  | 792/1000 [1:09:42<18:18,  5.28s/it][Succeeded / Failed / Skipped / Total] 335 / 437 / 20 / 792:  79%|███████▉  | 792/1000 [1:09:42<18:18,  5.28s/it][Succeeded / Failed / Skipped / Total] 335 / 437 / 20 / 792:  79%|███████▉  | 793/1000 [1:09:44<18:12,  5.28s/it]Store into an array . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeIntoArray]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void [[merge]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 787 ---------------------------------------------
Resolve bearer token . --> Get the apache Authorization header from the request --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveAuthBearerToken]] ( final HttpServletRequest [[request]] ) { String header = [[request]] . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String [[apache]] ( final HttpServletRequest [[ment]] ) { String header = [[ment]] . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 788 ---------------------------------------------
Extracts the encoding from a content type . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String contentType , String defaultEncoding ) { String [[encoding]] = [[extractEncoding]] ( contentType ) ; if ( [[encoding]] == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } [[encoding]] = defaultEncoding ; } return [[encoding]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[input]] ( final String contentType , String defaultEncoding ) { String [[a]] = [[input]] ( contentType ) ; if ( [[a]] == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } [[a]] = defaultEncoding ; } return [[a]] ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 789 ---------------------------------------------
Sets the response . --> Properly set content type --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareResponse]] ( final HttpServletResponse response , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void [[procedure]] ( final HttpServletResponse response , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 790 ---------------------------------------------
Require authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[requireAuthentication]] ( final HttpServletResponse resp , final String [[realm]] ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[realm]] + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void [[use]] ( final HttpServletResponse resp , final String [[key]] ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[key]] + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 791 ---------------------------------------------
Returns true if the flags are empty . --> returns true if false otherwise . --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isEmptyFlags]] ( Flags [[flags]] ) { if ( [[flags]] == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = [[flags]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = [[flags]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean [[hold]] ( Flags [[end]] ) { if ( [[end]] == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = [[end]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = [[end]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 792 ---------------------------------------------
Get all cookies with the given name . --> Get cookie by hash --> Socre: 1.0

[[[[Adv]]]]: public static Cookie [ ] [[getAllCookies]] ( final HttpServletRequest request , final String [[cookieName]] ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( [[cookieName]] ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] [[cookie]] ( final HttpServletRequest request , final String [[hash]] ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( [[hash]] ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 793 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 335 / 438 / 20 / 793:  79%|███████▉  | 793/1000 [1:09:44<18:12,  5.28s/it][Succeeded / Failed / Skipped / Total] 335 / 438 / 20 / 793:  79%|███████▉  | 794/1000 [1:09:53<18:07,  5.28s/it][Succeeded / Failed / Skipped / Total] 335 / 439 / 20 / 794:  79%|███████▉  | 794/1000 [1:09:53<18:07,  5.28s/it][Succeeded / Failed / Skipped / Total] 335 / 439 / 20 / 794:  80%|███████▉  | 795/1000 [1:10:01<18:03,  5.29s/it][Succeeded / Failed / Skipped / Total] 336 / 439 / 20 / 795:  80%|███████▉  | 795/1000 [1:10:01<18:03,  5.29s/it][Succeeded / Failed / Skipped / Total] 336 / 439 / 20 / 795:  80%|███████▉  | 796/1000 [1:10:14<18:00,  5.29s/it][Succeeded / Failed / Skipped / Total] 336 / 440 / 20 / 796:  80%|███████▉  | 796/1000 [1:10:14<18:00,  5.29s/it][Succeeded / Failed / Skipped / Total] 336 / 440 / 20 / 796:  80%|███████▉  | 797/1000 [1:10:16<17:54,  5.29s/it][Succeeded / Failed / Skipped / Total] 336 / 441 / 20 / 797:  80%|███████▉  | 797/1000 [1:10:16<17:54,  5.29s/it][Succeeded / Failed / Skipped / Total] 336 / 441 / 20 / 797:  80%|███████▉  | 798/1000 [1:10:19<17:48,  5.29s/it][Succeeded / Failed / Skipped / Total] 337 / 441 / 20 / 798:  80%|███████▉  | 798/1000 [1:10:19<17:48,  5.29s/it][Succeeded / Failed / Skipped / Total] 337 / 441 / 20 / 798:  80%|███████▉  | 799/1000 [1:10:22<17:42,  5.29s/it]Prepares response . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse response , final File file , final String [[mimeType]] ) { if ( ! file . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + file ) ; } if ( file . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + file ) ; } prepareResponse ( response , file . getAbsolutePath ( ) , [[mimeType]] , ( int ) file . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[procedure]] ( final HttpServletResponse response , final File file , final String [[address]] ) { if ( ! file . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + file ) ; } if ( file . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + file ) ; } prepareResponse ( response , file . getAbsolutePath ( ) , [[address]] , ( int ) file . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 794 ---------------------------------------------
Read request body . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest request ) throws IOException { BufferedReader buff = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[exchange]] ( final HttpServletRequest request ) throws IOException { BufferedReader buff = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 795 ---------------------------------------------
Checks to see if a parameter is a GET request . --> Determines whether a file contains a file name --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isGetParameter]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean [[file]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 796 ---------------------------------------------
Stores the context path in the servlet context . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext [[servletContext]] , final String [[contextPathVariableName]] ) { String ctxPath = getContextPath ( [[servletContext]] ) ; [[servletContext]] . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[queue]] ( final ServletContext [[ent]] , final String [[wait]] ) { String ctxPath = getContextPath ( [[ent]] ) ; [[ent]] . setAttribute ( [[wait]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 797 ---------------------------------------------
Read request body from request . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readRequestBodyFromStream]] ( final HttpServletRequest request ) throws IOException { String charEncoding = request . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter [[charArrayWriter]] = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , [[charArrayWriter]] ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return [[charArrayWriter]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[echo]] ( final HttpServletRequest request ) throws IOException { String charEncoding = request . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter [[d]] = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = request . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , [[d]] ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return [[d]] . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 798 ---------------------------------------------
Prepare parameter array . --> Print array values --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[prepareParameters]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int [[emptyCount]] = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { [[emptyCount]] ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { [[emptyCount]] ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( [[emptyCount]] == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] [[print]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int [[i]] = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { [[i]] ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { [[i]] ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( [[i]] == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 799 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 338 / 441 / 20 / 799:  80%|███████▉  | 799/1000 [1:10:22<17:42,  5.29s/it][Succeeded / Failed / Skipped / Total] 338 / 441 / 20 / 799:  80%|████████  | 800/1000 [1:10:28<17:37,  5.29s/it][Succeeded / Failed / Skipped / Total] 338 / 442 / 20 / 800:  80%|████████  | 800/1000 [1:10:28<17:37,  5.29s/it][Succeeded / Failed / Skipped / Total] 338 / 442 / 20 / 800:  80%|████████  | 801/1000 [1:10:37<17:32,  5.29s/it][Succeeded / Failed / Skipped / Total] 338 / 443 / 20 / 801:  80%|████████  | 801/1000 [1:10:37<17:32,  5.29s/it][Succeeded / Failed / Skipped / Total] 338 / 443 / 20 / 801:  80%|████████  | 802/1000 [1:10:40<17:26,  5.29s/it][Succeeded / Failed / Skipped / Total] 338 / 444 / 20 / 802:  80%|████████  | 802/1000 [1:10:40<17:26,  5.29s/it][Succeeded / Failed / Skipped / Total] 338 / 444 / 20 / 802:  80%|████████  | 803/1000 [1:10:47<17:22,  5.29s/it][Succeeded / Failed / Skipped / Total] 338 / 445 / 20 / 803:  80%|████████  | 803/1000 [1:10:47<17:22,  5.29s/it][Succeeded / Failed / Skipped / Total] 338 / 445 / 20 / 803:  80%|████████  | 804/1000 [1:10:49<17:15,  5.28s/it][Succeeded / Failed / Skipped / Total] 338 / 446 / 20 / 804:  80%|████████  | 804/1000 [1:10:49<17:15,  5.28s/it][Succeeded / Failed / Skipped / Total] 338 / 446 / 20 / 804:  80%|████████  | 805/1000 [1:11:00<17:11,  5.29s/it][Succeeded / Failed / Skipped / Total] 338 / 447 / 20 / 805:  80%|████████  | 805/1000 [1:11:00<17:11,  5.29s/it][Succeeded / Failed / Skipped / Total] 338 / 447 / 20 / 805:  81%|████████  | 806/1000 [1:11:07<17:07,  5.29s/it][Succeeded / Failed / Skipped / Total] 338 / 448 / 20 / 806:  81%|████████  | 806/1000 [1:11:07<17:07,  5.29s/it][Succeeded / Failed / Skipped / Total] 338 / 448 / 20 / 806:  81%|████████  | 807/1000 [1:11:15<17:02,  5.30s/it][Succeeded / Failed / Skipped / Total] 339 / 448 / 20 / 807:  81%|████████  | 807/1000 [1:11:15<17:02,  5.30s/it][Succeeded / Failed / Skipped / Total] 339 / 448 / 20 / 807:  81%|████████  | 808/1000 [1:11:18<16:56,  5.30s/it]Stores the context path in the request context . --> HttpServletHandler --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final PageContext [[pageContext]] , final String contextPathVariableName ) { String ctxPath = getContextPath ( [[pageContext]] ) ; HttpServletRequest request = ( HttpServletRequest ) [[pageContext]] . getRequest ( ) ; request . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = [[pageContext]] . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void [[hello]] ( final PageContext [[access]] , final String contextPathVariableName ) { String ctxPath = getContextPath ( [[access]] ) ; HttpServletRequest request = ( HttpServletRequest ) [[access]] . getRequest ( ) ; request . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = [[access]] . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 800 ---------------------------------------------
Invokes a tag . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment [[body]] ) throws JspException { if ( [[body]] == null ) { return ; } try { [[body]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[assume]] ( final JspFragment [[object]] ) throws JspException { if ( [[object]] == null ) { return ; } try { [[object]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 801 ---------------------------------------------
Renders the given fragment . --> [[[FAILED]]]

[[[[Adv]]]]: public static char [ ] [[renderBody]] ( final JspFragment [[body]] ) throws JspException { FastCharArrayWriter [[writer]] = new FastCharArrayWriter ( ) ; invokeBody ( [[body]] , [[writer]] ) ; return [[writer]] . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] [[id]] ( final JspFragment [[ator]] ) throws JspException { FastCharArrayWriter [[a]] = new FastCharArrayWriter ( ) ; invokeBody ( [[ator]] , [[a]] ) ; return [[a]] . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 802 ---------------------------------------------
Renders the given fragment to a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment body ) throws JspException { char [ ] [[result]] = renderBody ( body ) ; return new String ( [[result]] ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[c]] ( final JspFragment body ) throws JspException { char [ ] [[i]] = renderBody ( body ) ; return new String ( [[i]] ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 803 ---------------------------------------------
Call destroy method . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[callDestroyMethods]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void [[fly]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 804 ---------------------------------------------
Invokes init methods . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy [[invocationStrategy]] ) { for ( final InitMethodPoint [[initMethod]] : beanDefinition . initMethodPoints ( ) ) { if ( [[invocationStrategy]] != [[initMethod]] . invocationStrategy ) { continue ; } try { [[initMethod]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + [[initMethod]] , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[take]] ( final InitMethodInvocationStrategy [[bean]] ) { for ( final InitMethodPoint [[results]] : beanDefinition . initMethodPoints ( ) ) { if ( [[bean]] != [[results]] . invocationStrategy ) { continue ; } try { [[results]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + [[results]] , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 805 ---------------------------------------------
Instantiate bean instance . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] [[args]] = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[vector]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] [[i]] = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 806 ---------------------------------------------
Inject bean parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager paramManager , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[after]] ( final ParamManager paramManager , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 807 ---------------------------------------------
Puts a value into the properties map . --> Method to create a props entry --> Socre: 1.0

[[[[Adv]]]]: protected void [[put]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void [[of]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 808 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 340 / 448 / 20 / 808:  81%|████████  | 808/1000 [1:11:18<16:56,  5.30s/it][Succeeded / Failed / Skipped / Total] 340 / 448 / 20 / 808:  81%|████████  | 809/1000 [1:11:20<16:50,  5.29s/it][Succeeded / Failed / Skipped / Total] 341 / 448 / 20 / 809:  81%|████████  | 809/1000 [1:11:20<16:50,  5.29s/it][Succeeded / Failed / Skipped / Total] 341 / 448 / 20 / 809:  81%|████████  | 810/1000 [1:11:26<16:45,  5.29s/it][Succeeded / Failed / Skipped / Total] 342 / 448 / 20 / 810:  81%|████████  | 810/1000 [1:11:26<16:45,  5.29s/it][Succeeded / Failed / Skipped / Total] 342 / 448 / 20 / 810:  81%|████████  | 811/1000 [1:11:27<16:39,  5.29s/it][Succeeded / Failed / Skipped / Total] 342 / 449 / 20 / 811:  81%|████████  | 811/1000 [1:11:27<16:39,  5.29s/it][Succeeded / Failed / Skipped / Total] 342 / 449 / 20 / 811:  81%|████████  | 812/1000 [1:11:37<16:34,  5.29s/it][Succeeded / Failed / Skipped / Total] 343 / 449 / 20 / 812:  81%|████████  | 812/1000 [1:11:37<16:34,  5.29s/it][Succeeded / Failed / Skipped / Total] 343 / 449 / 20 / 812:  81%|████████▏ | 813/1000 [1:11:41<16:29,  5.29s/it][Succeeded / Failed / Skipped / Total] 344 / 449 / 20 / 813:  81%|████████▏ | 813/1000 [1:11:41<16:29,  5.29s/it][Succeeded / Failed / Skipped / Total] 344 / 449 / 20 / 813:  81%|████████▏ | 814/1000 [1:11:45<16:23,  5.29s/it][Succeeded / Failed / Skipped / Total] 345 / 449 / 20 / 814:  81%|████████▏ | 814/1000 [1:11:45<16:23,  5.29s/it][Succeeded / Failed / Skipped / Total] 345 / 449 / 20 / 814:  82%|████████▏ | 815/1000 [1:12:06<16:22,  5.31s/it][Succeeded / Failed / Skipped / Total] 346 / 449 / 20 / 815:  82%|████████▏ | 815/1000 [1:12:06<16:22,  5.31s/it][Succeeded / Failed / Skipped / Total] 346 / 449 / 20 / 815:  82%|████████▏ | 816/1000 [1:12:07<16:15,  5.30s/it]Rewrite the action path . --> Helper method to get a list of strings --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[rewrite]] ( final HttpServletRequest [[servletRequest]] , final String [[actionPath]] , final String httpMethod ) { return [[actionPath]] ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String [[strings]] ( final HttpServletRequest [[ted]] , final String [[payload]] , final String httpMethod ) { return [[payload]] ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 809 ---------------------------------------------
Adds a header . --> Draw a bit --> Socre: 1.0

[[[[Adv]]]]: public void [[addHeader]] ( final String name , final String [[value]] ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , [[value]] ) ; return ; } super . remove ( name ) ; valuesList . add ( [[value]] ) ; super . addAll ( name , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void [[draw]] ( final String name , final String [[bit]] ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , [[bit]] ) ; return ; } super . remove ( name ) ; valuesList . add ( [[bit]] ) ; super . addAll ( name , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 810 ---------------------------------------------
Get a profile from profile --> Get a properties file --> Socre: 1.0

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[file]] ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 811 ---------------------------------------------
Copy all parameters from the given servlet request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[copyParamsToAttributes]] ( final HttpServletRequest servletRequest , final boolean [[treatEmptyParamsAsNull]] , final boolean [[ignoreEmptyRequestParams]] ) { Enumeration [[paramNames]] = servletRequest . getParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { String paramName = ( String ) [[paramNames]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } String [ ] [[paramValues]] = servletRequest . getParameterValues ( paramName ) ; [[paramValues]] = prepareParameters ( [[paramValues]] , [[treatEmptyParamsAsNull]] , [[ignoreEmptyRequestParams]] ) ; if ( [[paramValues]] == null ) { continue ; } servletRequest . setAttribute ( paramName , [[paramValues]] . length == 1 ? [[paramValues]] [ 0 ] : [[paramValues]] ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void [[hold]] ( final HttpServletRequest servletRequest , final boolean [[set]] , final boolean [[line]] ) { Enumeration [[condition]] = servletRequest . getParameterNames ( ) ; while ( [[condition]] . hasMoreElements ( ) ) { String paramName = ( String ) [[condition]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } String [ ] [[level]] = servletRequest . getParameterValues ( paramName ) ; [[level]] = prepareParameters ( [[level]] , [[set]] , [[line]] ) ; if ( [[level]] == null ) { continue ; } servletRequest . setAttribute ( paramName , [[level]] . length == 1 ? [[level]] [ 0 ] : [[level]] ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 812 ---------------------------------------------
Add a base property to the baseProperties . --> Add a key to the properties file --> Socre: 1.0

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String key , final String [[value]] , final boolean [[append]] ) { put ( null , baseProperties , key , [[value]] , [[append]] ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[box]] ( final String key , final String [[book]] , final boolean [[label]] ) { put ( null , baseProperties , key , [[book]] , [[label]] ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 813 ---------------------------------------------
Resolves the given string with the given profiles . --> Get the extension string --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveMacros]] ( String [[value]] , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String [[extension]] ( String [[base]] , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 814 ---------------------------------------------
Reads a word toword --> Reads the stream toword --> Socre: 1.0

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] offp ) { int i ; int [[word]] = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { [[word]] = ( [[word]] << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return [[word]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] offp ) { int i ; int [[b]] = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { [[b]] = ( [[b]] << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return [[b]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 815 ---------------------------------------------
Compare the given plaintext --> Checks the given string against the pwd --> Socre: 1.0

[[[[Adv]]]]: public static boolean checkpw ( String plaintext , String [[hashed]] ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( plaintext , [[hashed]] ) ; hashed_bytes = [[hashed]] . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean checkpw ( String plaintext , String [[foo]] ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( plaintext , [[foo]] ) ; hashed_bytes = [[foo]] . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 816 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 346 / 450 / 20 / 816:  82%|████████▏ | 816/1000 [1:12:07<16:15,  5.30s/it][Succeeded / Failed / Skipped / Total] 346 / 450 / 20 / 816:  82%|████████▏ | 817/1000 [1:12:12<16:10,  5.30s/it][Succeeded / Failed / Skipped / Total] 346 / 451 / 20 / 817:  82%|████████▏ | 817/1000 [1:12:12<16:10,  5.30s/it][Succeeded / Failed / Skipped / Total] 346 / 451 / 20 / 817:  82%|████████▏ | 818/1000 [1:12:39<16:09,  5.33s/it][Succeeded / Failed / Skipped / Total] 346 / 452 / 20 / 818:  82%|████████▏ | 818/1000 [1:12:39<16:09,  5.33s/it][Succeeded / Failed / Skipped / Total] 346 / 452 / 20 / 818:  82%|████████▏ | 819/1000 [1:12:39<16:03,  5.32s/it][Succeeded / Failed / Skipped / Total] 347 / 452 / 20 / 819:  82%|████████▏ | 819/1000 [1:12:39<16:03,  5.32s/it][Succeeded / Failed / Skipped / Total] 347 / 452 / 20 / 819:  82%|████████▏ | 820/1000 [1:12:45<15:58,  5.32s/it][Succeeded / Failed / Skipped / Total] 347 / 453 / 20 / 820:  82%|████████▏ | 820/1000 [1:12:45<15:58,  5.32s/it][Succeeded / Failed / Skipped / Total] 347 / 453 / 20 / 820:  82%|████████▏ | 821/1000 [1:12:56<15:54,  5.33s/it][Succeeded / Failed / Skipped / Total] 347 / 454 / 20 / 821:  82%|████████▏ | 821/1000 [1:12:56<15:54,  5.33s/it][Succeeded / Failed / Skipped / Total] 347 / 454 / 20 / 821:  82%|████████▏ | 822/1000 [1:13:00<15:48,  5.33s/it][Succeeded / Failed / Skipped / Total] 347 / 455 / 20 / 822:  82%|████████▏ | 822/1000 [1:13:00<15:48,  5.33s/it][Succeeded / Failed / Skipped / Total] 347 / 455 / 20 / 822:  82%|████████▏ | 823/1000 [1:13:12<15:44,  5.34s/it][Succeeded / Failed / Skipped / Total] 347 / 456 / 20 / 823:  82%|████████▏ | 823/1000 [1:13:12<15:44,  5.34s/it][Succeeded / Failed / Skipped / Total] 347 / 456 / 20 / 823:  82%|████████▏ | 824/1000 [1:13:20<15:39,  5.34s/it]Extract a map from profiles and profiles . --> [[[FAILED]]]

[[[[Adv]]]]: public Map [[extract]] ( Map target , final String [ ] profiles , final String [ ] [[wildcardPatterns]] , String prefix ) { if ( target == null ) { target = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map [[function]] ( Map target , final String [ ] profiles , final String [ ] [[attributes]] , String prefix ) { if ( target == null ) { target = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 817 ---------------------------------------------
Adds a profile property . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String key , final String value , final String [[profile]] , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( [[profile]] , k -> new HashMap <> ( ) ) ; put ( [[profile]] , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[remove]] ( final String key , final String value , final String [[location]] , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( [[location]] , k -> new HashMap <> ( ) ) ; put ( [[location]] , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 818 ---------------------------------------------
Copies all data from the stream to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[copyAll]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int [[data]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 819 ---------------------------------------------
Hashes a password . --> Calculates salt --> Socre: 1.0

[[[[Adv]]]]: public static String [[hashpw]] ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] passwordb , [[saltb]] , hashed ; char [[minor]] = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { [[minor]] = salt . charAt ( 2 ) ; if ( [[minor]] != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String [[alt]] ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] passwordb , [[end]] , hashed ; char [[et]] = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { [[et]] = salt . charAt ( 2 ) ; if ( [[et]] != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 820 ---------------------------------------------
Copies bytes to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[copyMax]] ( final OutputStream out , final int [[maxBytes]] ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; if ( count == [[maxBytes]] ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int [[call]] ( final OutputStream out , final int [[back]] ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; if ( count == [[back]] ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 821 ---------------------------------------------
Resolves the action config . --> [[[FAILED]]]

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > annotationType ; if ( annotationValues == null ) { annotationType = Action . class ; } else { annotationType = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[template]] ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > annotationType ; if ( annotationValues == null ) { annotationType = Action . class ; } else { annotationType = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 822 ---------------------------------------------
Parses the action configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime [[parse]] ( final Class < ? > actionClass , final Method [[actionMethod]] , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( [[actionMethod]] ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime [[extension]] ( final Class < ? > actionClass , final Method [[option]] , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( [[option]] ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 823 ---------------------------------------------
Detect and register alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[detectAndRegisterAlias]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void [[execute]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 824 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 347 / 457 / 20 / 824:  82%|████████▏ | 824/1000 [1:13:20<15:39,  5.34s/it][Succeeded / Failed / Skipped / Total] 347 / 457 / 20 / 824:  82%|████████▎ | 825/1000 [1:13:26<15:34,  5.34s/it][Succeeded / Failed / Skipped / Total] 347 / 458 / 20 / 825:  82%|████████▎ | 825/1000 [1:13:26<15:34,  5.34s/it][Succeeded / Failed / Skipped / Total] 347 / 458 / 20 / 825:  83%|████████▎ | 826/1000 [1:13:29<15:28,  5.34s/it][Succeeded / Failed / Skipped / Total] 347 / 459 / 20 / 826:  83%|████████▎ | 826/1000 [1:13:29<15:28,  5.34s/it][Succeeded / Failed / Skipped / Total] 347 / 459 / 20 / 826:  83%|████████▎ | 827/1000 [1:13:29<15:22,  5.33s/it][Succeeded / Failed / Skipped / Total] 347 / 459 / 21 / 827:  83%|████████▎ | 827/1000 [1:13:29<15:22,  5.33s/it][Succeeded / Failed / Skipped / Total] 347 / 459 / 21 / 827:  83%|████████▎ | 828/1000 [1:13:40<15:18,  5.34s/it][Succeeded / Failed / Skipped / Total] 348 / 459 / 21 / 828:  83%|████████▎ | 828/1000 [1:13:40<15:18,  5.34s/it][Succeeded / Failed / Skipped / Total] 348 / 459 / 21 / 828:  83%|████████▎ | 829/1000 [1:13:41<15:12,  5.33s/it][Succeeded / Failed / Skipped / Total] 348 / 460 / 21 / 829:  83%|████████▎ | 829/1000 [1:13:41<15:12,  5.33s/it][Succeeded / Failed / Skipped / Total] 348 / 460 / 21 / 829:  83%|████████▎ | 830/1000 [1:13:42<15:05,  5.33s/it][Succeeded / Failed / Skipped / Total] 348 / 461 / 21 / 830:  83%|████████▎ | 830/1000 [1:13:42<15:05,  5.33s/it][Succeeded / Failed / Skipped / Total] 348 / 461 / 21 / 830:  83%|████████▎ | 831/1000 [1:13:48<15:00,  5.33s/it][Succeeded / Failed / Skipped / Total] 349 / 461 / 21 / 831:  83%|████████▎ | 831/1000 [1:13:48<15:00,  5.33s/it][Succeeded / Failed / Skipped / Total] 349 / 461 / 21 / 831:  83%|████████▎ | 832/1000 [1:13:59<14:56,  5.34s/it][Succeeded / Failed / Skipped / Total] 349 / 462 / 21 / 832:  83%|████████▎ | 832/1000 [1:13:59<14:56,  5.34s/it][Succeeded / Failed / Skipped / Total] 349 / 462 / 21 / 832:  83%|████████▎ | 833/1000 [1:14:04<14:51,  5.34s/it][Succeeded / Failed / Skipped / Total] 349 / 463 / 21 / 833:  83%|████████▎ | 833/1000 [1:14:04<14:51,  5.34s/it][Succeeded / Failed / Skipped / Total] 349 / 463 / 21 / 833:  83%|████████▎ | 834/1000 [1:14:06<14:45,  5.33s/it]Reads the interceptors for the given element . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[readActionInterceptors]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] [[result]] = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { [[result]] = interceptedBy . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[list]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] [[null]] = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { [[null]] = interceptedBy . value ( ) ; if ( [[null]] . length == 0 ) { [[null]] = null ; } } return [[null]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 825 ---------------------------------------------
Read package action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[var]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 826 ---------------------------------------------
Reads the filtered filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[readActionFilters]] ( final AnnotatedElement [[actionClassOrMethod]] ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = [[actionClassOrMethod]] . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[test]] ( final AnnotatedElement [[ary]] ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy filteredBy = [[ary]] . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { result = filteredBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 827 ---------------------------------------------
Sets the last modified response . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 828 ---------------------------------------------
Parses the alias . --> Extract an attribute from an ActionAnnotationValues --> Socre: 1.0

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues [[annotationValues]] ) { String [[alias]] = null ; if ( [[annotationValues]] != null ) { [[alias]] = [[annotationValues]] . alias ( ) ; } return [[alias]] ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[array]] ( final ActionAnnotationValues [[of]] ) { String [[alt]] = null ; if ( [[of]] != null ) { [[alt]] = [[of]] . alias ( ) ; } return [[alt]] ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 829 ---------------------------------------------
Read method action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String [[methodName]] , final ActionAnnotationValues annotationValues , final ActionConfig [[actionConfig]] ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[using]] ( final String [[name]] , final ActionAnnotationValues annotationValues , final ActionConfig [[pointer]] ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 830 ---------------------------------------------
Applies the advice for the given target class . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] applyAdvice ( final Class < [[T]] > targetClass ) { Class [[adviceClass]] = cache . get ( targetClass ) ; if ( [[adviceClass]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < [[client]] > [[client]] applyAdvice ( final Class < [[client]] > targetClass ) { Class [[a]] = cache . get ( targetClass ) ; if ( [[a]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 831 ---------------------------------------------
Resolves real name . --> Returns the stack for the given jsonName --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( jsonIndex == - 1 ) { return jsonName ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[stack]] ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( jsonIndex == - 1 ) { return jsonName ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 832 ---------------------------------------------
Visits an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String [[descriptor]] , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( [[descriptor]] , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[a]] ( final String [[top]] , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( [[top]] , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 833 ---------------------------------------------
Resolves real name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int [[realIndex]] = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( [[realIndex]] == - 1 ) { return [[realName]] ; } return jsonNames [ [[realIndex]] ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[method]] ( final String [[literal]] ) { if ( realNames == null ) { return [[literal]] ; } int [[object]] = ArraysUtil . indexOf ( realNames , [[literal]] ) ; if ( [[object]] == - 1 ) { return [[literal]] ; } return jsonNames [ [[object]] ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 834 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 350 / 463 / 21 / 834:  83%|████████▎ | 834/1000 [1:14:06<14:45,  5.33s/it][Succeeded / Failed / Skipped / Total] 350 / 463 / 21 / 834:  84%|████████▎ | 835/1000 [1:14:17<14:40,  5.34s/it][Succeeded / Failed / Skipped / Total] 351 / 463 / 21 / 835:  84%|████████▎ | 835/1000 [1:14:17<14:40,  5.34s/it][Succeeded / Failed / Skipped / Total] 351 / 463 / 21 / 835:  84%|████████▎ | 836/1000 [1:14:21<14:35,  5.34s/it][Succeeded / Failed / Skipped / Total] 351 / 464 / 21 / 836:  84%|████████▎ | 836/1000 [1:14:21<14:35,  5.34s/it][Succeeded / Failed / Skipped / Total] 351 / 464 / 21 / 836:  84%|████████▎ | 837/1000 [1:14:27<14:30,  5.34s/it][Succeeded / Failed / Skipped / Total] 351 / 465 / 21 / 837:  84%|████████▎ | 837/1000 [1:14:27<14:30,  5.34s/it][Succeeded / Failed / Skipped / Total] 351 / 465 / 21 / 837:  84%|████████▍ | 838/1000 [1:14:34<14:25,  5.34s/it][Succeeded / Failed / Skipped / Total] 351 / 466 / 21 / 838:  84%|████████▍ | 838/1000 [1:14:34<14:25,  5.34s/it][Succeeded / Failed / Skipped / Total] 351 / 466 / 21 / 838:  84%|████████▍ | 839/1000 [1:14:37<14:19,  5.34s/it][Succeeded / Failed / Skipped / Total] 352 / 466 / 21 / 839:  84%|████████▍ | 839/1000 [1:14:37<14:19,  5.34s/it][Succeeded / Failed / Skipped / Total] 352 / 466 / 21 / 839:  84%|████████▍ | 840/1000 [1:14:44<14:14,  5.34s/it][Succeeded / Failed / Skipped / Total] 353 / 466 / 21 / 840:  84%|████████▍ | 840/1000 [1:14:44<14:14,  5.34s/it][Succeeded / Failed / Skipped / Total] 353 / 466 / 21 / 840:  84%|████████▍ | 841/1000 [1:14:48<14:08,  5.34s/it][Succeeded / Failed / Skipped / Total] 353 / 467 / 21 / 841:  84%|████████▍ | 841/1000 [1:14:48<14:08,  5.34s/it][Succeeded / Failed / Skipped / Total] 353 / 467 / 21 / 841:  84%|████████▍ | 842/1000 [1:14:49<14:02,  5.33s/it][Succeeded / Failed / Skipped / Total] 353 / 468 / 21 / 842:  84%|████████▍ | 842/1000 [1:14:49<14:02,  5.33s/it][Succeeded / Failed / Skipped / Total] 353 / 468 / 21 / 842:  84%|████████▍ | 843/1000 [1:14:56<13:57,  5.33s/it]Inject target object . --> Sets the agent variable on the agent --> Socre: 1.0

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object [[proxy]] , final Object target ) { Class proxyClass = [[proxy]] . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( [[proxy]] , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[var]] ( final Object [[agent]] , final Object target ) { Class proxyClass = [[agent]] . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( [[agent]] , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 835 ---------------------------------------------
Find type data . --> Get rity --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[findSubclassTypeData]] ( final Class type ) { final Class < ? extends Annotation > [[defaultAnnotation]] = jsonAnnotation ; if ( type . getAnnotation ( [[defaultAnnotation]] ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData [[rity]] ( final Class type ) { final Class < ? extends Annotation > [[h]] = jsonAnnotation ; if ( type . getAnnotation ( [[h]] ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 836 ---------------------------------------------
Looks up the type data for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public TypeData [[lookupTypeData]] ( final Class [[type]] ) { TypeData [[typeData]] = typeDataMap . get ( [[type]] ) ; if ( [[typeData]] == null ) { if ( serializationSubclassAware ) { [[typeData]] = findSubclassTypeData ( [[type]] ) ; } if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , [[typeData]] ) ; } } return [[typeData]] ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData [[algorithm]] ( final Class [[results]] ) { TypeData [[result]] = typeDataMap . get ( [[results]] ) ; if ( [[result]] == null ) { if ( serializationSubclassAware ) { [[result]] = findSubclassTypeData ( [[results]] ) ; } if ( [[result]] == null ) { [[result]] = scanClassForAnnotations ( [[results]] ) ; typeDataMap . put ( [[results]] , [[result]] ) ; } } return [[result]] ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 837 ---------------------------------------------
Looks up the type data for the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData _lookupTypeData ( final Class [[type]] ) { TypeData typeData = typeDataMap . get ( [[type]] ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData _lookupTypeData ( final Class [[exception]] ) { TypeData typeData = typeDataMap . get ( [[exception]] ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( [[exception]] ) ; typeDataMap . put ( [[exception]] , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 838 ---------------------------------------------
Returns the content of the temp file . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[i]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 839 ---------------------------------------------
Resolves the real name for the given JSON name . --> Resolves JsonName and JsonName --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class [[type]] , final String jsonName ) { TypeData typeData = lookupTypeData ( [[type]] ) ; return typeData . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[j]] ( final Class [[key]] , final String jsonName ) { TypeData typeData = lookupTypeData ( [[key]] ) ; return typeData . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 840 ---------------------------------------------
Copy bootstrap methods . --> Exception --> Socre: 1.0

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader classReader , final char [ ] [[charBuffer]] ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[exception]] ( final ClassReader classReader , final char [ ] [[command]] ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 841 ---------------------------------------------
Resolves a JsonName by name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveJsonName]] ( final Class type , final String [[name]] ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( [[name]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String [[procedure]] ( final Class type , final String [[array]] ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( [[array]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 842 ---------------------------------------------
Create action runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime [[createActionRuntime]] ( final ActionHandler actionHandler , final Class [[actionClass]] , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , [[actionClass]] , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( [[actionClass]] ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime [[daemon]] ( final ActionHandler actionHandler , final Class [[switches]] , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , [[switches]] , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( [[switches]] ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 843 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 353 / 469 / 21 / 843:  84%|████████▍ | 843/1000 [1:14:56<13:57,  5.33s/it][Succeeded / Failed / Skipped / Total] 353 / 469 / 21 / 843:  84%|████████▍ | 844/1000 [1:14:59<13:51,  5.33s/it][Succeeded / Failed / Skipped / Total] 353 / 470 / 21 / 844:  84%|████████▍ | 844/1000 [1:14:59<13:51,  5.33s/it][Succeeded / Failed / Skipped / Total] 353 / 470 / 21 / 844:  84%|████████▍ | 845/1000 [1:15:06<13:46,  5.33s/it][Succeeded / Failed / Skipped / Total] 353 / 471 / 21 / 845:  84%|████████▍ | 845/1000 [1:15:06<13:46,  5.33s/it][Succeeded / Failed / Skipped / Total] 353 / 471 / 21 / 845:  85%|████████▍ | 846/1000 [1:15:25<13:43,  5.35s/it][Succeeded / Failed / Skipped / Total] 353 / 472 / 21 / 846:  85%|████████▍ | 846/1000 [1:15:25<13:43,  5.35s/it][Succeeded / Failed / Skipped / Total] 353 / 472 / 21 / 846:  85%|████████▍ | 847/1000 [1:15:42<13:40,  5.36s/it][Succeeded / Failed / Skipped / Total] 353 / 473 / 21 / 847:  85%|████████▍ | 847/1000 [1:15:42<13:40,  5.36s/it][Succeeded / Failed / Skipped / Total] 353 / 473 / 21 / 847:  85%|████████▍ | 848/1000 [1:15:43<13:34,  5.36s/it][Succeeded / Failed / Skipped / Total] 353 / 474 / 21 / 848:  85%|████████▍ | 848/1000 [1:15:43<13:34,  5.36s/it][Succeeded / Failed / Skipped / Total] 353 / 474 / 21 / 848:  85%|████████▍ | 849/1000 [1:15:59<13:30,  5.37s/it][Succeeded / Failed / Skipped / Total] 353 / 475 / 21 / 849:  85%|████████▍ | 849/1000 [1:15:59<13:30,  5.37s/it][Succeeded / Failed / Skipped / Total] 353 / 475 / 21 / 849:  85%|████████▌ | 850/1000 [1:16:05<13:25,  5.37s/it]Puts a constant pool entry into the given byte vector . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector [[output]] ) { [[output]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[console]] ( final ByteVector [[code]] ) { [[code]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 844 ---------------------------------------------
Puts the bootstrap methods . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[string]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 845 ---------------------------------------------
Sets the major version and class name . --> [[[FAILED]]]

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int majorVersion , final String className ) { this . majorVersion = majorVersion ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[add]] ( final int majorVersion , final String className ) { this . majorVersion = majorVersion ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 846 ---------------------------------------------
Generates a constant fieldref tag . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantFieldref ( final String owner , final String name , final String [[descriptor]] ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , name , [[descriptor]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantFieldref ( final String owner , final String name , final String [[file]] ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , name , [[file]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 847 ---------------------------------------------
Adds a constant member reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int index , final int tag , final String [[owner]] , final String name , final String descriptor ) { add ( new Entry ( index , tag , [[owner]] , name , descriptor , 0 , hash ( tag , [[owner]] , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[addition]] ( final int index , final int tag , final String [[token]] , final String name , final String descriptor ) { add ( new Entry ( index , tag , [[token]] , name , descriptor , 0 , hash ( tag , [[token]] , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 848 ---------------------------------------------
Adds a constant reference to a constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantMethodref]] ( final String owner , final String name , final String descriptor , final boolean [[isInterface]] ) { int [[tag]] = [[isInterface]] ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( [[tag]] , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[attribute]] ( final String owner , final String name , final String descriptor , final boolean [[attribute]] ) { int [[function]] = [[attribute]] ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( [[function]] , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 849 ---------------------------------------------
Adds a constant reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry [[addConstantMemberReference]] ( final int [[tag]] , final String owner , final String name , final String descriptor ) { int hashCode = hash ( [[tag]] , owner , name , descriptor ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == [[tag]] && [[entry]] . hashCode == hashCode && [[entry]] . owner . equals ( owner ) && [[entry]] . name . equals ( name ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( [[tag]] , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , owner , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry [[fetch]] ( final int [[integer]] , final String owner , final String name , final String descriptor ) { int hashCode = hash ( [[integer]] , owner , name , descriptor ) ; Entry [[array]] = get ( hashCode ) ; while ( [[array]] != null ) { if ( [[array]] . tag == [[integer]] && [[array]] . hashCode == hashCode && [[array]] . owner . equals ( owner ) && [[array]] . name . equals ( name ) && [[array]] . value . equals ( descriptor ) ) { return [[array]] ; } [[array]] = [[array]] . next ; } constantPool . put122 ( [[integer]] , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[integer]] , owner , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 850 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 353 / 476 / 21 / 850:  85%|████████▌ | 850/1000 [1:16:05<13:25,  5.37s/it][Succeeded / Failed / Skipped / Total] 353 / 476 / 21 / 850:  85%|████████▌ | 851/1000 [1:16:09<13:20,  5.37s/it][Succeeded / Failed / Skipped / Total] 353 / 477 / 21 / 851:  85%|████████▌ | 851/1000 [1:16:09<13:20,  5.37s/it][Succeeded / Failed / Skipped / Total] 353 / 477 / 21 / 851:  85%|████████▌ | 852/1000 [1:16:26<13:16,  5.38s/it][Succeeded / Failed / Skipped / Total] 353 / 478 / 21 / 852:  85%|████████▌ | 852/1000 [1:16:26<13:16,  5.38s/it][Succeeded / Failed / Skipped / Total] 353 / 478 / 21 / 852:  85%|████████▌ | 853/1000 [1:16:36<13:12,  5.39s/it][Succeeded / Failed / Skipped / Total] 353 / 479 / 21 / 853:  85%|████████▌ | 853/1000 [1:16:36<13:12,  5.39s/it][Succeeded / Failed / Skipped / Total] 353 / 479 / 21 / 853:  85%|████████▌ | 854/1000 [1:16:44<13:07,  5.39s/it][Succeeded / Failed / Skipped / Total] 353 / 480 / 21 / 854:  85%|████████▌ | 854/1000 [1:16:44<13:07,  5.39s/it][Succeeded / Failed / Skipped / Total] 353 / 480 / 21 / 854:  86%|████████▌ | 855/1000 [1:16:50<13:01,  5.39s/it][Succeeded / Failed / Skipped / Total] 353 / 481 / 21 / 855:  86%|████████▌ | 855/1000 [1:16:50<13:01,  5.39s/it][Succeeded / Failed / Skipped / Total] 353 / 481 / 21 / 855:  86%|████████▌ | 856/1000 [1:16:55<12:56,  5.39s/it]Adds a constant or float integer or float integer constant . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int index , final int tag , final int value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[extra]] ( final int index , final int tag , final int value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 851 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantIntegerOrFloat ( final int tag , final int value ) { int hashCode = hash ( tag , value ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . data == value ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantIntegerOrFloat ( final int tag , final int value ) { int hashCode = hash ( tag , value ) ; Entry [[id]] = get ( hashCode ) ; while ( [[id]] != null ) { if ( [[id]] . tag == tag && [[id]] . hashCode == hashCode && [[id]] . data == value ) { return [[id]] ; } [[id]] = [[id]] . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 852 ---------------------------------------------
Adds a constant or double . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantLongOrDouble ( final int [[index]] , final int [[tag]] , final long [[value]] ) { add ( new Entry ( [[index]] , [[tag]] , [[value]] , hash ( [[tag]] , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantLongOrDouble ( final int [[constant]] , final int [[current]] , final long [[wise]] ) { add ( new Entry ( [[constant]] , [[current]] , [[wise]] , hash ( [[current]] , [[wise]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 853 ---------------------------------------------
Adds a constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantLongOrDouble ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantLongOrDouble ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 854 ---------------------------------------------
Adds a constant name and type . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int index , final String name , final String descriptor ) { final int [[tag]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , [[tag]] , name , descriptor , hash ( [[tag]] , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[exit]] ( final int index , final String name , final String descriptor ) { final int [[attribute]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , [[attribute]] , name , descriptor , hash ( [[attribute]] , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 855 ---------------------------------------------
Adds a constant name and descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantNameAndType]] ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[define]] ( final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( tag , name , descriptor ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( name ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , name , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 856 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 353 / 482 / 21 / 856:  86%|████████▌ | 856/1000 [1:16:55<12:56,  5.39s/it][Succeeded / Failed / Skipped / Total] 353 / 482 / 21 / 856:  86%|████████▌ | 857/1000 [1:17:00<12:50,  5.39s/it][Succeeded / Failed / Skipped / Total] 353 / 483 / 21 / 857:  86%|████████▌ | 857/1000 [1:17:00<12:50,  5.39s/it][Succeeded / Failed / Skipped / Total] 353 / 483 / 21 / 857:  86%|████████▌ | 858/1000 [1:17:29<12:49,  5.42s/it][Succeeded / Failed / Skipped / Total] 353 / 484 / 21 / 858:  86%|████████▌ | 858/1000 [1:17:29<12:49,  5.42s/it][Succeeded / Failed / Skipped / Total] 353 / 484 / 21 / 858:  86%|████████▌ | 859/1000 [1:17:50<12:46,  5.44s/it][Succeeded / Failed / Skipped / Total] 353 / 485 / 21 / 859:  86%|████████▌ | 859/1000 [1:17:50<12:46,  5.44s/it][Succeeded / Failed / Skipped / Total] 353 / 485 / 21 / 859:  86%|████████▌ | 860/1000 [1:17:50<12:40,  5.43s/it][Succeeded / Failed / Skipped / Total] 353 / 486 / 21 / 860:  86%|████████▌ | 860/1000 [1:17:50<12:40,  5.43s/it][Succeeded / Failed / Skipped / Total] 353 / 486 / 21 / 860:  86%|████████▌ | 861/1000 [1:17:55<12:34,  5.43s/it][Succeeded / Failed / Skipped / Total] 353 / 487 / 21 / 861:  86%|████████▌ | 861/1000 [1:17:55<12:34,  5.43s/it][Succeeded / Failed / Skipped / Total] 353 / 487 / 21 / 861:  86%|████████▌ | 862/1000 [1:18:19<12:32,  5.45s/it][Succeeded / Failed / Skipped / Total] 353 / 488 / 21 / 862:  86%|████████▌ | 862/1000 [1:18:19<12:32,  5.45s/it][Succeeded / Failed / Skipped / Total] 353 / 488 / 21 / 862:  86%|████████▋ | 863/1000 [1:18:24<12:26,  5.45s/it]Adds a UTF8 constant . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantUtf8]] ( final String value ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == Symbol . CONSTANT_UTF8_TAG && [[entry]] . hashCode == hashCode && [[entry]] . value . equals ( value ) ) { return [[entry]] . index ; } [[entry]] = [[entry]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[fetch]] ( final String value ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry [[array]] = get ( hashCode ) ; while ( [[array]] != null ) { if ( [[array]] . tag == Symbol . CONSTANT_UTF8_TAG && [[array]] . hashCode == hashCode && [[array]] . value . equals ( value ) ) { return [[array]] . index ; } [[array]] = [[array]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 857 ---------------------------------------------
Adds a utf - 8 string constant . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int [[index]] , final String value ) { add ( new Entry ( [[index]] , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[main]] ( final int [[array]] , final String value ) { add ( new Entry ( [[array]] , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 858 ---------------------------------------------
Adds a constant - handle method handle . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantMethodHandle]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[structure]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 859 ---------------------------------------------
Adds a constant method handle . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMethodHandle]] ( final int index , final int referenceKind , final String [[owner]] , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , [[owner]] , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , [[owner]] , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[construct]] ( final int index , final int referenceKind , final String [[profile]] , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , [[profile]] , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , [[profile]] , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 860 ---------------------------------------------
Generates a constant with a bootstrap constant . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantDynamic ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... [[bootstrapMethodArguments]] ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , [[bootstrapMethodArguments]] ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantDynamic ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... [[alias]] ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , [[alias]] ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 861 ---------------------------------------------
Creates a synthetic method invocation . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantInvokeDynamic]] ( final String [[name]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , [[name]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[array]] ( final String [[key]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , [[key]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 862 ---------------------------------------------
Adds a constant to the constant map . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8Reference]] ( final int index , final int tag , final String [[value]] ) { add ( new Entry ( index , tag , [[value]] , hash ( tag , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[access]] ( final int index , final int tag , final String [[status]] ) { add ( new Entry ( index , tag , [[status]] , hash ( tag , [[status]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 863 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 353 / 489 / 21 / 863:  86%|████████▋ | 863/1000 [1:18:24<12:26,  5.45s/it][Succeeded / Failed / Skipped / Total] 353 / 489 / 21 / 863:  86%|████████▋ | 864/1000 [1:18:33<12:21,  5.46s/it][Succeeded / Failed / Skipped / Total] 353 / 490 / 21 / 864:  86%|████████▋ | 864/1000 [1:18:33<12:21,  5.46s/it][Succeeded / Failed / Skipped / Total] 353 / 490 / 21 / 864:  86%|████████▋ | 865/1000 [1:18:36<12:16,  5.45s/it][Succeeded / Failed / Skipped / Total] 354 / 490 / 21 / 865:  86%|████████▋ | 865/1000 [1:18:36<12:16,  5.45s/it][Succeeded / Failed / Skipped / Total] 354 / 490 / 21 / 865:  87%|████████▋ | 866/1000 [1:18:42<12:10,  5.45s/it][Succeeded / Failed / Skipped / Total] 355 / 490 / 21 / 866:  87%|████████▋ | 866/1000 [1:18:42<12:10,  5.45s/it][Succeeded / Failed / Skipped / Total] 355 / 490 / 21 / 866:  87%|████████▋ | 867/1000 [1:18:44<12:04,  5.45s/it][Succeeded / Failed / Skipped / Total] 355 / 491 / 21 / 867:  87%|████████▋ | 867/1000 [1:18:44<12:04,  5.45s/it][Succeeded / Failed / Skipped / Total] 355 / 491 / 21 / 867:  87%|████████▋ | 868/1000 [1:18:49<11:59,  5.45s/it][Succeeded / Failed / Skipped / Total] 355 / 492 / 21 / 868:  87%|████████▋ | 868/1000 [1:18:49<11:59,  5.45s/it][Succeeded / Failed / Skipped / Total] 355 / 492 / 21 / 868:  87%|████████▋ | 869/1000 [1:18:50<11:53,  5.44s/it][Succeeded / Failed / Skipped / Total] 356 / 492 / 21 / 869:  87%|████████▋ | 869/1000 [1:18:50<11:53,  5.44s/it][Succeeded / Failed / Skipped / Total] 356 / 492 / 21 / 869:  87%|████████▋ | 870/1000 [1:19:07<11:49,  5.46s/it]Adds a constant or dynamic reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantDynamicOrInvokeDynamicReference]] ( final int [[tag]] , final String [[name]] , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( [[tag]] , [[name]] , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( [[name]] ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( [[tag]] , bootstrapMethodIndex , addConstantNameAndType ( [[name]] , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , null , [[name]] , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[store]] ( final int [[fetch]] , final String [[output]] , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( [[fetch]] , [[output]] , descriptor , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[fetch]] && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( [[output]] ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( [[fetch]] , bootstrapMethodIndex , addConstantNameAndType ( [[output]] , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[fetch]] , null , [[output]] , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 864 ---------------------------------------------
Adds a constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantUtf8Reference]] ( final int tag , final String value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[store]] ( final int tag , final String value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 865 ---------------------------------------------
Add merged type . --> Begin with test --> Socre: 1.0

[[[[Adv]]]]: int [[addMergedType]] ( final int typeTableIndex1 , final int [[typeTableIndex2]] ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int [[begin]] ( final int typeTableIndex1 , final int [[test]] ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 866 ---------------------------------------------
Clear the map . --> Clear all entries --> Socre: 1.0

[[[[Adv]]]]: public HttpMultiMap < V > clear ( ) { for ( int [[i]] = 0 ; [[i]] < entries . length ; [[i]] ++ ) { entries [ [[i]] ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > clear ( ) { for ( int [[row]] = 0 ; [[row]] < entries . length ; [[row]] ++ ) { entries [ [[row]] ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 867 ---------------------------------------------
Adds a bootstrap method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[ize]] ( final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 868 ---------------------------------------------
Add constant or invoke dynamic or invoke dynamic reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final int index , final String name , final String [[descriptor]] , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , [[descriptor]] , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , [[descriptor]] , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[construct]] ( final int tag , final int index , final String name , final String [[element]] , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , [[element]] , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , [[element]] , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 869 ---------------------------------------------
Returns the hash of the given name . --> Returns - 1 if not found --> Socre: 1.0

[[[[Adv]]]]: private int [[hash]] ( final String name ) { int [[h]] = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } [[h]] = 31 * [[h]] + c ; } if ( [[h]] > 0 ) { return [[h]] ; } if ( [[h]] == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - [[h]] ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int [[main]] ( final String name ) { int [[f]] = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } [[f]] = 31 * [[f]] + c ; } if ( [[f]] > 0 ) { return [[f]] ; } if ( [[f]] == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - [[f]] ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 870 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 356 / 493 / 21 / 870:  87%|████████▋ | 870/1000 [1:19:07<11:49,  5.46s/it][Succeeded / Failed / Skipped / Total] 356 / 493 / 21 / 870:  87%|████████▋ | 871/1000 [1:19:11<11:43,  5.45s/it][Succeeded / Failed / Skipped / Total] 356 / 494 / 21 / 871:  87%|████████▋ | 871/1000 [1:19:11<11:43,  5.45s/it][Succeeded / Failed / Skipped / Total] 356 / 494 / 21 / 871:  87%|████████▋ | 872/1000 [1:19:14<11:37,  5.45s/it][Succeeded / Failed / Skipped / Total] 357 / 494 / 21 / 872:  87%|████████▋ | 872/1000 [1:19:14<11:37,  5.45s/it][Succeeded / Failed / Skipped / Total] 357 / 494 / 21 / 872:  87%|████████▋ | 873/1000 [1:19:26<11:33,  5.46s/it][Succeeded / Failed / Skipped / Total] 357 / 495 / 21 / 873:  87%|████████▋ | 873/1000 [1:19:26<11:33,  5.46s/it][Succeeded / Failed / Skipped / Total] 357 / 495 / 21 / 873:  87%|████████▋ | 874/1000 [1:19:27<11:27,  5.45s/it][Succeeded / Failed / Skipped / Total] 357 / 496 / 21 / 874:  87%|████████▋ | 874/1000 [1:19:27<11:27,  5.45s/it][Succeeded / Failed / Skipped / Total] 357 / 497 / 21 / 875:  88%|████████▊ | 875/1000 [1:19:27<11:21,  5.45s/it][Succeeded / Failed / Skipped / Total] 357 / 497 / 21 / 875:  88%|████████▊ | 876/1000 [1:19:31<11:15,  5.45s/it][Succeeded / Failed / Skipped / Total] 358 / 497 / 21 / 876:  88%|████████▊ | 876/1000 [1:19:31<11:15,  5.45s/it][Succeeded / Failed / Skipped / Total] 358 / 498 / 21 / 877:  88%|████████▊ | 877/1000 [1:19:39<11:10,  5.45s/it][Succeeded / Failed / Skipped / Total] 358 / 498 / 21 / 877:  88%|████████▊ | 878/1000 [1:19:42<11:04,  5.45s/it][Succeeded / Failed / Skipped / Total] 358 / 499 / 21 / 878:  88%|████████▊ | 878/1000 [1:19:42<11:04,  5.45s/it][Succeeded / Failed / Skipped / Total] 358 / 499 / 21 / 878:  88%|████████▊ | 879/1000 [1:19:44<10:58,  5.44s/it]Iterates over the elements in the iterator . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[iterator]] ( ) { final MapEntry [ ] [[e]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[e]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = [[e]] [ 0 ] ; [[e]] [ 0 ] = [[e]] [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[before]] ( ) { final MapEntry [ ] [[sequence]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[sequence]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = [[sequence]] [ 0 ] ; [[sequence]] [ 0 ] = [[sequence]] [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 871 ---------------------------------------------
Returns all the entries in the list . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > all = new LinkedList <> ( ) ; MapEntry < V > [[e]] = head . after ; while ( [[e]] != head ) { all . add ( [[e]] ) ; [[e]] = [[e]] . after ; } return all ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[fix]] ( ) { List < Map . Entry < String , V > > all = new LinkedList <> ( ) ; MapEntry < V > [[index]] = head . after ; while ( [[index]] != head ) { all . add ( [[index]] ) ; [[index]] = [[index]] . after ; } return all ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 872 ---------------------------------------------
Appends a character sequence to this buffer . --> Overrides methods --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence csq , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { [[append]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[method]] ( final CharSequence csq , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { [[method]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 873 ---------------------------------------------
Increases the capacity if necessary . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[grow]] ( final int [[minCapacity]] ) { final int oldCapacity = buffer . length ; int newCapacity = oldCapacity << 1 ; if ( newCapacity - [[minCapacity]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[line]] ( final int [[x]] ) { final int oldCapacity = buffer . length ; int newCapacity = oldCapacity << 1 ; if ( newCapacity - [[x]] < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 874 ---------------------------------------------
Create proxy methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[visitEnd]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void [[mask]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 875 ---------------------------------------------
Get all values with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public List < V > [[getAll]] ( final String [[name]] ) { LinkedList < V > [[values]] = new LinkedList <> ( ) ; int h = hash ( [[name]] ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( [[name]] , e . key ) ) { [[values]] . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return [[values]] ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > [[of]] ( final String [[z]] ) { LinkedList < V > [[c]] = new LinkedList <> ( ) ; int h = hash ( [[z]] ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( [[z]] , e . key ) ) { [[c]] . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return [[c]] ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 876 ---------------------------------------------
Create first chain delegate delegate . --> region Branch Implementation --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[branch]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 877 ---------------------------------------------
Parse a string representation of a path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path [[parse]] ( final String path ) { return path == null ? new Path ( ) : new Path ( StringUtil . splitc ( path , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path [[procedure]] ( final String path ) { return path == null ? new Path ( ) : new Path ( StringUtil . splitc ( path , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 878 ---------------------------------------------
Adds a field to the path . --> [[[FAILED]]]

[[[[Adv]]]]: public Path [[push]] ( final CharSequence [[field]] ) { _push ( [[field]] ) ; if ( altPath != null ) { altPath . push ( [[field]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[test]] ( final CharSequence [[set]] ) { _push ( [[set]] ) ; if ( altPath != null ) { altPath . push ( [[set]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 879 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 359 / 499 / 21 / 879:  88%|████████▊ | 879/1000 [1:19:44<10:58,  5.44s/it][Succeeded / Failed / Skipped / Total] 359 / 499 / 21 / 879:  88%|████████▊ | 880/1000 [1:19:44<10:52,  5.44s/it][Succeeded / Failed / Skipped / Total] 359 / 500 / 21 / 880:  88%|████████▊ | 880/1000 [1:19:44<10:52,  5.44s/it][Succeeded / Failed / Skipped / Total] 359 / 500 / 21 / 880:  88%|████████▊ | 881/1000 [1:19:47<10:46,  5.43s/it][Succeeded / Failed / Skipped / Total] 360 / 500 / 21 / 881:  88%|████████▊ | 881/1000 [1:19:47<10:46,  5.43s/it][Succeeded / Failed / Skipped / Total] 360 / 500 / 21 / 881:  88%|████████▊ | 882/1000 [1:19:48<10:40,  5.43s/it][Succeeded / Failed / Skipped / Total] 360 / 501 / 21 / 882:  88%|████████▊ | 882/1000 [1:19:48<10:40,  5.43s/it][Succeeded / Failed / Skipped / Total] 360 / 501 / 21 / 882:  88%|████████▊ | 883/1000 [1:19:56<10:35,  5.43s/it][Succeeded / Failed / Skipped / Total] 361 / 501 / 21 / 883:  88%|████████▊ | 883/1000 [1:19:56<10:35,  5.43s/it][Succeeded / Failed / Skipped / Total] 361 / 501 / 21 / 883:  88%|████████▊ | 884/1000 [1:20:04<10:30,  5.44s/it]Configure the servlet context . --> Add an exception handler --> Socre: 1.0

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[exception]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 880 ---------------------------------------------
Visits an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public AnnotationVisitor [[visitAnnotation]] ( final String [[desc]] , final boolean visible ) { AnnotationVisitor [[destAnn]] = methodVisitor . visitAnnotation ( [[desc]] , visible ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor [[db]] ( final String [[base]] , final boolean visible ) { AnnotationVisitor [[das]] = methodVisitor . visitAnnotation ( [[base]] , visible ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 881 ---------------------------------------------
execute this method --> Execute the target --> Socre: 1.0

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class [[returnType]] = [[returnType]] ( ) ; Object next = pathref . continueWith ( this , methodName , [[returnType]] ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class [[access]] = [[access]] ( ) ; Object next = pathref . continueWith ( this , methodName , [[access]] ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 882 ---------------------------------------------
Create a delegate to the first chain of the first chain . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "[[False]]" != "[[False]]" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "[[False]]" != "[[False]]" ) ; } visitReturn ( methodVisitor , tmd . msign , "[[False]]" != "[[False]]" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[empty]] ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "[[map]]" != "[[map]]" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "[[map]]" != "[[map]]" ) ; } visitReturn ( methodVisitor , tmd . msign , "[[map]]" != "[[map]]" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 883 ---------------------------------------------
Create a proxy definition for the proxy . --> Override this to create a BeanDefinition --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[originalType]] = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , [[originalType]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[id]] = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , [[id]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 884 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 361 / 502 / 21 / 884:  88%|████████▊ | 884/1000 [1:20:04<10:30,  5.44s/it][Succeeded / Failed / Skipped / Total] 361 / 502 / 21 / 884:  88%|████████▊ | 885/1000 [1:20:15<10:25,  5.44s/it][Succeeded / Failed / Skipped / Total] 362 / 502 / 21 / 885:  88%|████████▊ | 885/1000 [1:20:15<10:25,  5.44s/it][Succeeded / Failed / Skipped / Total] 362 / 502 / 21 / 885:  89%|████████▊ | 886/1000 [1:20:16<10:19,  5.44s/it][Succeeded / Failed / Skipped / Total] 363 / 502 / 21 / 886:  89%|████████▊ | 886/1000 [1:20:16<10:19,  5.44s/it][Succeeded / Failed / Skipped / Total] 363 / 502 / 21 / 886:  89%|████████▊ | 887/1000 [1:20:27<10:14,  5.44s/it][Succeeded / Failed / Skipped / Total] 363 / 503 / 21 / 887:  89%|████████▊ | 887/1000 [1:20:27<10:14,  5.44s/it][Succeeded / Failed / Skipped / Total] 363 / 503 / 21 / 887:  89%|████████▉ | 888/1000 [1:20:29<10:09,  5.44s/it][Succeeded / Failed / Skipped / Total] 363 / 504 / 21 / 888:  89%|████████▉ | 888/1000 [1:20:29<10:09,  5.44s/it][Succeeded / Failed / Skipped / Total] 363 / 504 / 21 / 888:  89%|████████▉ | 889/1000 [1:20:46<10:05,  5.45s/it][Succeeded / Failed / Skipped / Total] 363 / 505 / 21 / 889:  89%|████████▉ | 889/1000 [1:20:46<10:05,  5.45s/it][Succeeded / Failed / Skipped / Total] 363 / 505 / 21 / 889:  89%|████████▉ | 890/1000 [1:20:48<09:59,  5.45s/it][Succeeded / Failed / Skipped / Total] 363 / 506 / 21 / 890:  89%|████████▉ | 890/1000 [1:20:48<09:59,  5.45s/it][Succeeded / Failed / Skipped / Total] 363 / 506 / 21 / 890:  89%|████████▉ | 891/1000 [1:21:01<09:54,  5.46s/it][Succeeded / Failed / Skipped / Total] 363 / 507 / 21 / 891:  89%|████████▉ | 891/1000 [1:21:01<09:54,  5.46s/it][Succeeded / Failed / Skipped / Total] 363 / 507 / 21 / 891:  89%|████████▉ | 892/1000 [1:21:05<09:49,  5.45s/it]Convert transaction mode to DBTransactionMode . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode txMode ) { final int [[isolation]] ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : [[isolation]] = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : [[isolation]] = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : [[isolation]] = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : [[isolation]] = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : [[isolation]] = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : [[isolation]] = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( [[isolation]] , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode txMode ) { final int [[c]] ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : [[c]] = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : [[c]] = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : [[c]] = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : [[c]] = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : [[c]] = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : [[c]] = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( [[c]] , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 885 ---------------------------------------------
Reads property . --> Invokes the getter method on the end --> Socre: 1.0

[[[[Adv]]]]: private Object [[readProperty]] ( final Object [[source]] , final PropertyDescriptor [[propertyDescriptor]] ) { Getter getter = [[propertyDescriptor]] . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( [[source]] ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[method]] ( final Object [[test]] , final PropertyDescriptor [[end]] ) { Getter getter = [[end]] . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( [[test]] ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 886 ---------------------------------------------
Append a buffer to the list . --> Group a block --> Socre: 1.0

[[[[Adv]]]]: public Buffer [[append]] ( final Buffer [[buffer]] ) { if ( [[buffer]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer [[group]] ( final Buffer [[block]] ) { if ( [[block]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 887 ---------------------------------------------
Copies all entries from the given map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map t ) { for ( Object [[o]] : t . entrySet ( ) ) { Map . Entry [[e]] = ( Map . Entry ) [[o]] ; put ( [[e]] . getKey ( ) , [[e]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[end]] ( final Map t ) { for ( Object [[boundary]] : t . entrySet ( ) ) { Map . Entry [[boundary]] = ( Map . Entry ) [[boundary]] ; put ( [[boundary]] . getKey ( ) , [[boundary]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 888 ---------------------------------------------
Returns an array of FieldDescriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor [[fieldDescriptor]] : fieldsMap . values ( ) ) { allFields [ index ] = [[fieldDescriptor]] ; index ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor [[integer]] : fieldsMap . values ( ) ) { allFields [ index ] = [[integer]] ; index ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 889 ---------------------------------------------
Write the progress to the given output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream out , final HttpProgressListener [[progressListener]] ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[exception]] ( final OutputStream out , final HttpProgressListener [[age]] ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 890 ---------------------------------------------
Returns the string value associated with the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getString]] ( final String [[key]] ) { CharSequence cs = ( CharSequence ) map . get ( [[key]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String [[merge]] ( final String [[form]] ) { CharSequence cs = ( CharSequence ) map . get ( [[form]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 891 ---------------------------------------------
Writes the list to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream [[out]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; [[out]] . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[out]] ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void [[hold]] ( final OutputStream [[node]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; [[node]] . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[node]] ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
[Succeeded / Failed / Skipped / Total] 363 / 508 / 21 / 892:  89%|████████▉ | 892/1000 [1:21:05<09:49,  5.45s/it][Succeeded / Failed / Skipped / Total] 363 / 508 / 21 / 892:  89%|████████▉ | 893/1000 [1:21:05<09:42,  5.45s/it][Succeeded / Failed / Skipped / Total] 364 / 508 / 21 / 893:  89%|████████▉ | 893/1000 [1:21:05<09:42,  5.45s/it][Succeeded / Failed / Skipped / Total] 364 / 508 / 21 / 893:  89%|████████▉ | 894/1000 [1:21:12<09:37,  5.45s/it][Succeeded / Failed / Skipped / Total] 365 / 508 / 21 / 894:  89%|████████▉ | 894/1000 [1:21:12<09:37,  5.45s/it][Succeeded / Failed / Skipped / Total] 365 / 508 / 21 / 894:  90%|████████▉ | 895/1000 [1:21:13<09:31,  5.45s/it][Succeeded / Failed / Skipped / Total] 365 / 509 / 21 / 895:  90%|████████▉ | 895/1000 [1:21:13<09:31,  5.45s/it][Succeeded / Failed / Skipped / Total] 365 / 509 / 21 / 895:  90%|████████▉ | 896/1000 [1:21:15<09:25,  5.44s/it][Succeeded / Failed / Skipped / Total] 366 / 509 / 21 / 896:  90%|████████▉ | 896/1000 [1:21:15<09:25,  5.44s/it][Succeeded / Failed / Skipped / Total] 366 / 509 / 21 / 896:  90%|████████▉ | 897/1000 [1:21:17<09:20,  5.44s/it][Succeeded / Failed / Skipped / Total] 367 / 509 / 21 / 897:  90%|████████▉ | 897/1000 [1:21:17<09:20,  5.44s/it][Succeeded / Failed / Skipped / Total] 367 / 509 / 21 / 897:  90%|████████▉ | 898/1000 [1:21:24<09:14,  5.44s/it][Succeeded / Failed / Skipped / Total] 368 / 509 / 21 / 898:  90%|████████▉ | 898/1000 [1:21:24<09:14,  5.44s/it][Succeeded / Failed / Skipped / Total] 368 / 509 / 21 / 898:  90%|████████▉ | 899/1000 [1:21:28<09:09,  5.44s/it][Succeeded / Failed / Skipped / Total] 368 / 510 / 21 / 899:  90%|████████▉ | 899/1000 [1:21:28<09:09,  5.44s/it][Succeeded / Failed / Skipped / Total] 368 / 510 / 21 / 899:  90%|█████████ | 900/1000 [1:21:32<09:03,  5.44s/it][Succeeded / Failed / Skipped / Total] 369 / 510 / 21 / 900:  90%|█████████ | 900/1000 [1:21:32<09:03,  5.44s/it][Succeeded / Failed / Skipped / Total] 369 / 510 / 21 / 900:  90%|█████████ | 901/1000 [1:21:37<08:58,  5.44s/it]--------------------------------------------- Result 892 ---------------------------------------------
Get a property as Integer . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getInteger]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer [[input]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 893 ---------------------------------------------
Get a long value . --> Looks up a bold array --> Socre: 1.0

[[[[Adv]]]]: public Long [[getLong]] ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Long ) { return ( Long ) [[number]] ; } return [[number]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long [[array]] ( final String key ) { Number [[bold]] = ( Number ) map . get ( key ) ; if ( [[bold]] == null ) { return null ; } if ( [[bold]] instanceof Long ) { return ( Long ) [[bold]] ; } return [[bold]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 894 ---------------------------------------------
Get a double . --> Get a bit from a string --> Socre: 1.0

[[[[Adv]]]]: public Double [[getDouble]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double [[bit]] ( final String [[a]] ) { Number number = ( Number ) map . get ( [[a]] ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 895 ---------------------------------------------
Write the stream to a writer . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final Writer [[writer]] ) throws IOException { for ( Object [[o]] : list ) { if ( [[o]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[o]] ; byte [ ] array = fastByteBuffer . toArray ( ) ; [[writer]] . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( [[o]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[o]] ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[writer]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void [[take]] ( final Writer [[character]] ) throws IOException { for ( Object [[text]] : list ) { if ( [[text]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[text]] ; byte [ ] array = fastByteBuffer . toArray ( ) ; [[character]] . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( [[text]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[text]] ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[character]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 896 ---------------------------------------------
Get a float value . --> Get by string --> Socre: 1.0

[[[[Adv]]]]: public Float [[getFloat]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[by]] ( final String [[a]] ) { Number number = ( Number ) map . get ( [[a]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 897 ---------------------------------------------
Returns the value associated with the given key . --> Get a hook --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] getValue ( final String key ) { [[T]] [[val]] = ( [[T]] ) map . get ( key ) ; if ( [[val]] instanceof Map ) { return ( [[T]] ) new JsonObject ( ( Map ) [[val]] ) ; } if ( [[val]] instanceof List ) { return ( [[T]] ) new JsonArray ( ( List ) [[val]] ) ; } return [[val]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[hook]] > [[hook]] getValue ( final String key ) { [[hook]] [[key]] = ( [[hook]] ) map . get ( key ) ; if ( [[key]] instanceof Map ) { return ( [[hook]] ) new JsonObject ( ( Map ) [[key]] ) ; } if ( [[key]] instanceof List ) { return ( [[hook]] ) new JsonArray ( ( List ) [[key]] ) ; } return [[key]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 898 ---------------------------------------------
Updates the flags in the mailbox . --> Main method for testing --> Socre: 1.0

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[main]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 899 ---------------------------------------------
Add a value to the JsonObject --> [[[FAILED]]]

[[[[Adv]]]]: public JsonObject [[put]] ( final String key , final String value ) { Objects . requireNonNull ( key ) ; map . put ( key , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject [[procedure]] ( final String key , final String value ) { Objects . requireNonNull ( key ) ; map . put ( key , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 900 ---------------------------------------------
Close the folder if it is opened . --> Close the Directory --> Socre: 1.0

[[[[Adv]]]]: protected void [[closeFolderIfOpened]] ( final Folder [[folder]] ) { if ( [[folder]] != null ) { try { [[folder]] . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void [[foo]] ( final Folder [[support]] ) { if ( [[support]] != null ) { try { [[support]] . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 901 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 370 / 510 / 21 / 901:  90%|█████████ | 901/1000 [1:21:37<08:58,  5.44s/it][Succeeded / Failed / Skipped / Total] 370 / 510 / 21 / 901:  90%|█████████ | 902/1000 [1:21:44<08:52,  5.44s/it][Succeeded / Failed / Skipped / Total] 371 / 510 / 21 / 902:  90%|█████████ | 902/1000 [1:21:44<08:52,  5.44s/it][Succeeded / Failed / Skipped / Total] 371 / 510 / 21 / 902:  90%|█████████ | 903/1000 [1:21:51<08:47,  5.44s/it][Succeeded / Failed / Skipped / Total] 371 / 511 / 21 / 903:  90%|█████████ | 903/1000 [1:21:51<08:47,  5.44s/it][Succeeded / Failed / Skipped / Total] 371 / 511 / 21 / 903:  90%|█████████ | 904/1000 [1:21:54<08:41,  5.44s/it][Succeeded / Failed / Skipped / Total] 371 / 512 / 21 / 904:  90%|█████████ | 904/1000 [1:21:54<08:41,  5.44s/it][Succeeded / Failed / Skipped / Total] 371 / 512 / 21 / 904:  90%|█████████ | 905/1000 [1:21:58<08:36,  5.44s/it][Succeeded / Failed / Skipped / Total] 372 / 512 / 21 / 905:  90%|█████████ | 905/1000 [1:21:58<08:36,  5.44s/it][Succeeded / Failed / Skipped / Total] 372 / 512 / 21 / 905:  91%|█████████ | 906/1000 [1:22:02<08:30,  5.43s/it][Succeeded / Failed / Skipped / Total] 372 / 513 / 21 / 906:  91%|█████████ | 906/1000 [1:22:02<08:30,  5.43s/it][Succeeded / Failed / Skipped / Total] 372 / 513 / 21 / 906:  91%|█████████ | 907/1000 [1:22:10<08:25,  5.44s/it][Succeeded / Failed / Skipped / Total] 372 / 514 / 21 / 907:  91%|█████████ | 907/1000 [1:22:10<08:25,  5.44s/it][Succeeded / Failed / Skipped / Total] 372 / 514 / 21 / 907:  91%|█████████ | 908/1000 [1:22:13<08:19,  5.43s/it][Succeeded / Failed / Skipped / Total] 372 / 515 / 21 / 908:  91%|█████████ | 908/1000 [1:22:13<08:19,  5.43s/it][Succeeded / Failed / Skipped / Total] 372 / 515 / 21 / 908:  91%|█████████ | 909/1000 [1:22:18<08:14,  5.43s/it][Succeeded / Failed / Skipped / Total] 372 / 516 / 21 / 909:  91%|█████████ | 909/1000 [1:22:18<08:14,  5.43s/it][Succeeded / Failed / Skipped / Total] 372 / 516 / 21 / 909:  91%|█████████ | 910/1000 [1:22:20<08:08,  5.43s/it][Succeeded / Failed / Skipped / Total] 373 / 516 / 21 / 910:  91%|█████████ | 910/1000 [1:22:20<08:08,  5.43s/it][Succeeded / Failed / Skipped / Total] 373 / 516 / 21 / 910:  91%|█████████ | 911/1000 [1:22:22<08:02,  5.43s/it]Use this method to open the specified folder . --> Use this method to open the catalog --> Socre: 1.0

[[[[Adv]]]]: public void useFolder ( final String [[folderName]] ) { closeFolderIfOpened ( folder ) ; try { this . [[folderName]] = [[folderName]] ; this . [[folder]] = getService ( ) . getFolder ( [[folderName]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[folderName]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void useFolder ( final String [[access]] ) { closeFolderIfOpened ( folder ) ; try { this . [[access]] = [[access]] ; this . [[catalog]] = getService ( ) . getFolder ( [[access]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[access]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 902 ---------------------------------------------
Create an alias for the target . --> Append an array of Strings --> Socre: 1.0

[[[[Adv]]]]: protected String [[alias]] ( final String [[target]] ) { return StringPool . LEFT_CHEV . concat ( [[target]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String [[array]] ( final String [[id]] ) { return StringPool . LEFT_CHEV . concat ( [[id]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 903 ---------------------------------------------
Looks up a named parameter . --> [[[FAILED]]]

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String name ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( name ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[ip]] ( final String name ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( name ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 904 ---------------------------------------------
Perform validation action . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[validateAction]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean [[action]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 905 ---------------------------------------------
Sets the mime type . --> Sets the raw data . --> Socre: 1.0

[[[[Adv]]]]: public RawData as ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . [[mimeType]] = mimeOrExtension ; } else { this . [[mimeType]] = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData as ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . [[a]] = mimeOrExtension ; } else { this . [[a]] = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 906 ---------------------------------------------
Adds a violation . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addViolation]] ( final String name , final Object [[invalidValue]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , [[invalidValue]] ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void [[copy]] ( final String name , final Object [[system]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( name , this , [[system]] ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 907 ---------------------------------------------
Sets the target . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[lc]] ( final InputStream target ) { assertTargetIsNotDefined ( ) ; targetInputStream = target ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 908 ---------------------------------------------
Sets the target . --> [[[FAILED]]]

[[[[Adv]]]]: protected T setTarget ( final String [[targetName]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[targetName]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[targetName]] ) ; } targetClassName = [[targetName]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[targetName]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T setTarget ( final String [[end]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[end]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[end]] ) ; } targetClassName = [[end]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[end]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 909 ---------------------------------------------
Sets the download file content . --> [[[FAILED]]]

[[[[Adv]]]]: public RawData [[downloadableAs]] ( final String downloadFileName ) { this . [[downloadFileName]] = downloadFileName ; this . [[mimeType]] = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData [[bit]] ( final String downloadFileName ) { this . [[me]] = downloadFileName ; this . [[fm]] = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 910 ---------------------------------------------
Attempt to process the target class . --> Main method for testing --> Socre: 1.0

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[main]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 911 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 373 / 517 / 21 / 911:  91%|█████████ | 911/1000 [1:22:22<08:02,  5.43s/it][Succeeded / Failed / Skipped / Total] 373 / 517 / 21 / 911:  91%|█████████ | 912/1000 [1:22:31<07:57,  5.43s/it][Succeeded / Failed / Skipped / Total] 374 / 517 / 21 / 912:  91%|█████████ | 912/1000 [1:22:31<07:57,  5.43s/it][Succeeded / Failed / Skipped / Total] 374 / 517 / 21 / 912:  91%|█████████▏| 913/1000 [1:22:36<07:52,  5.43s/it][Succeeded / Failed / Skipped / Total] 374 / 518 / 21 / 913:  91%|█████████▏| 913/1000 [1:22:36<07:52,  5.43s/it][Succeeded / Failed / Skipped / Total] 374 / 518 / 21 / 913:  91%|█████████▏| 914/1000 [1:22:37<07:46,  5.42s/it][Succeeded / Failed / Skipped / Total] 375 / 518 / 21 / 914:  91%|█████████▏| 914/1000 [1:22:37<07:46,  5.42s/it][Succeeded / Failed / Skipped / Total] 375 / 518 / 21 / 914:  92%|█████████▏| 915/1000 [1:22:45<07:41,  5.43s/it][Succeeded / Failed / Skipped / Total] 376 / 518 / 21 / 915:  92%|█████████▏| 915/1000 [1:22:45<07:41,  5.43s/it][Succeeded / Failed / Skipped / Total] 376 / 518 / 21 / 915:  92%|█████████▏| 916/1000 [1:22:45<07:35,  5.42s/it][Succeeded / Failed / Skipped / Total] 376 / 519 / 21 / 916:  92%|█████████▏| 916/1000 [1:22:45<07:35,  5.42s/it][Succeeded / Failed / Skipped / Total] 376 / 519 / 21 / 916:  92%|█████████▏| 917/1000 [1:22:51<07:29,  5.42s/it]Sets the target . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[setTarget]] ( final Class target ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( target ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + target . getName ( ) ) ; } targetClass = target ; targetClassName = target . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + target . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[lk]] ( final Class target ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( target ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + target . getName ( ) ) ; } targetClass = target ; targetClassName = target . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + target . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 912 ---------------------------------------------
Create the proxy . --> Send the message to the debug folder --> Socre: 1.0

[[[[Adv]]]]: public byte [ ] [[create]] ( ) { process ( ) ; byte [ ] [[result]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[result]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] [[message]] ( ) { process ( ) ; byte [ ] [[capture]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[capture]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[capture]] ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 913 ---------------------------------------------
Returns a new instance of the ProteProxy . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[declaration]] ( ) { Class type = define ( ) ; try { return ClassUtil . newInstance ( type ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 914 ---------------------------------------------
Writes the class in debug folder . --> Write the debug directory --> Socre: 1.0

[[[[Adv]]]]: protected void [[dumpClassInDebugFolder]] ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void [[dir]] ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 915 ---------------------------------------------
Set the email address . --> Add a person to a person --> Socre: 1.0

[[[[Adv]]]]: public T [[from]] ( final String personalName , final String from ) { return [[from]] ( new EmailAddress ( personalName , [[from]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T [[f]] ( final String personalName , final String from ) { return [[f]] ( new EmailAddress ( personalName , [[f]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 916 ---------------------------------------------
Receives messages matching the specified filter . --> [[[FAILED]]]

[[[[Adv]]]]: ReceivedEmail [ ] [[receiveMessages]] ( final EmailFilter [[filter]] , final Flags flagsToSet , final Flags flagsToUnset , final boolean [[envelope]] , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( [[filter]] == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( [[filter]] . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( [[envelope]] ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] [[responses]] ( final EmailFilter [[box]] , final Flags flagsToSet , final Flags flagsToUnset , final boolean [[bucket]] , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( [[box]] == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( [[box]] . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( [[bucket]] ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 917 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 376 / 520 / 21 / 917:  92%|█████████▏| 917/1000 [1:22:51<07:29,  5.42s/it][Succeeded / Failed / Skipped / Total] 376 / 520 / 21 / 917:  92%|█████████▏| 918/1000 [1:22:56<07:24,  5.42s/it][Succeeded / Failed / Skipped / Total] 376 / 521 / 21 / 918:  92%|█████████▏| 918/1000 [1:22:56<07:24,  5.42s/it][Succeeded / Failed / Skipped / Total] 376 / 521 / 21 / 918:  92%|█████████▏| 919/1000 [1:22:58<07:18,  5.42s/it][Succeeded / Failed / Skipped / Total] 377 / 521 / 21 / 919:  92%|█████████▏| 919/1000 [1:22:58<07:18,  5.42s/it][Succeeded / Failed / Skipped / Total] 377 / 521 / 21 / 919:  92%|█████████▏| 920/1000 [1:22:59<07:13,  5.41s/it][Succeeded / Failed / Skipped / Total] 378 / 521 / 21 / 920:  92%|█████████▏| 920/1000 [1:22:59<07:13,  5.41s/it][Succeeded / Failed / Skipped / Total] 378 / 521 / 21 / 920:  92%|█████████▏| 921/1000 [1:23:10<07:08,  5.42s/it][Succeeded / Failed / Skipped / Total] 379 / 521 / 21 / 921:  92%|█████████▏| 921/1000 [1:23:10<07:08,  5.42s/it][Succeeded / Failed / Skipped / Total] 379 / 521 / 21 / 921:  92%|█████████▏| 922/1000 [1:23:15<07:02,  5.42s/it][Succeeded / Failed / Skipped / Total] 379 / 522 / 21 / 922:  92%|█████████▏| 922/1000 [1:23:15<07:02,  5.42s/it][Succeeded / Failed / Skipped / Total] 379 / 522 / 21 / 922:  92%|█████████▏| 923/1000 [1:23:20<06:57,  5.42s/it][Succeeded / Failed / Skipped / Total] 379 / 523 / 21 / 923:  92%|█████████▏| 923/1000 [1:23:20<06:57,  5.42s/it][Succeeded / Failed / Skipped / Total] 379 / 523 / 21 / 923:  92%|█████████▏| 924/1000 [1:23:20<06:51,  5.41s/it][Succeeded / Failed / Skipped / Total] 380 / 523 / 21 / 924:  92%|█████████▏| 924/1000 [1:23:20<06:51,  5.41s/it][Succeeded / Failed / Skipped / Total] 380 / 523 / 21 / 924:  92%|█████████▎| 925/1000 [1:23:38<06:46,  5.43s/it][Succeeded / Failed / Skipped / Total] 380 / 524 / 21 / 925:  92%|█████████▎| 925/1000 [1:23:38<06:46,  5.43s/it][Succeeded / Failed / Skipped / Total] 380 / 524 / 21 / 925:  93%|█████████▎| 926/1000 [1:23:39<06:41,  5.42s/it]Define the proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public Class [[define]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class [[cause]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 918 ---------------------------------------------
Set the recipient address . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[to]] ( final EmailAddress to ) { this . to = ArraysUtil . append ( this . to , [[to]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T [[lk]] ( final EmailAddress to ) { this . to = ArraysUtil . append ( this . to , [[lk]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 919 ---------------------------------------------
Add a recipient to a recipient --> Create a new l --> Socre: 1.0

[[[[Adv]]]]: public T [[to]] ( final String personalName , final String [[to]] ) { return [[to]] ( new EmailAddress ( personalName , [[to]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T [[l]] ( final String personalName , final String [[it]] ) { return [[l]] ( new EmailAddress ( personalName , [[l]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 920 ---------------------------------------------
Sets the reply to reply to . --> W wiggers --> Socre: 1.0

[[[[Adv]]]]: public T [[REPLACEME0]] ( final EmailAddress ... [[REPLACEME0]] ) { this . [[replyTo]] = ArraysUtil . join ( this . [[replyTo]] , valueOrEmptyArray ( [[REPLACEME0]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T [[wig]] ( final EmailAddress ... [[wig]] ) { this . [[h]] = ArraysUtil . join ( this . [[h]] , valueOrEmptyArray ( [[wig]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 921 ---------------------------------------------
Sets the cc recipient address . --> Add link to the server --> Socre: 1.0

[[[[Adv]]]]: public T [[cc]] ( final EmailAddress ... [[ccs]] ) { this . [[cc]] = ArraysUtil . join ( this . [[cc]] , valueOrEmptyArray ( [[ccs]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T [[pr]] ( final EmailAddress ... [[link]] ) { this . [[port]] = ArraysUtil . join ( this . [[port]] , valueOrEmptyArray ( [[link]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 922 ---------------------------------------------
Sets a header . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[header]] ( final String [[name]] , final String value ) { headers . put ( [[name]] , value ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[lm]] ( final String [[end]] , final String value ) { headers . put ( [[end]] , value ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 923 ---------------------------------------------
Add a text message . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[textMessage]] ( final String [[text]] , final String encoding ) { return message ( new EmailMessage ( [[text]] , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[mp]] ( final String [[alphabet]] , final String encoding ) { return message ( new EmailMessage ( [[alphabet]] , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 924 ---------------------------------------------
Create an email message with the specified encoding . --> Add a file to the email --> Socre: 1.0

[[[[Adv]]]]: public T [[htmlMessage]] ( final String [[html]] , final String encoding ) { return message ( new EmailMessage ( [[html]] , MimeTypes . MIME_TEXT_HTML , encoding ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[file]] ( final String [[style]] , final String encoding ) { return message ( new EmailMessage ( [[style]] , MimeTypes . MIME_TEXT_HTML , encoding ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 925 ---------------------------------------------
Returns the value of the specified property . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[get]] ( final String name , final String defaultValue ) { Objects . requireNonNull ( name ) ; String [[value]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[value]] = System . getProperty ( name ) ; } else { [[value]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( [[value]] == null ) { return defaultValue ; } return [[value]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String [[list]] ( final String name , final String defaultValue ) { Objects . requireNonNull ( name ) ; String [[foo]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[foo]] = System . getProperty ( name ) ; } else { [[foo]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( [[foo]] == null ) { return defaultValue ; } return [[foo]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 926 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 381 / 524 / 21 / 926:  93%|█████████▎| 926/1000 [1:23:39<06:41,  5.42s/it][Succeeded / Failed / Skipped / Total] 381 / 524 / 21 / 926:  93%|█████████▎| 927/1000 [1:23:41<06:35,  5.42s/it][Succeeded / Failed / Skipped / Total] 382 / 524 / 21 / 927:  93%|█████████▎| 927/1000 [1:23:41<06:35,  5.42s/it][Succeeded / Failed / Skipped / Total] 382 / 524 / 21 / 927:  93%|█████████▎| 928/1000 [1:23:45<06:29,  5.42s/it][Succeeded / Failed / Skipped / Total] 382 / 525 / 21 / 928:  93%|█████████▎| 928/1000 [1:23:45<06:29,  5.42s/it][Succeeded / Failed / Skipped / Total] 382 / 525 / 21 / 928:  93%|█████████▎| 929/1000 [1:23:46<06:24,  5.41s/it][Succeeded / Failed / Skipped / Total] 383 / 525 / 21 / 929:  93%|█████████▎| 929/1000 [1:23:46<06:24,  5.41s/it][Succeeded / Failed / Skipped / Total] 383 / 525 / 21 / 929:  93%|█████████▎| 930/1000 [1:23:51<06:18,  5.41s/it][Succeeded / Failed / Skipped / Total] 384 / 525 / 21 / 930:  93%|█████████▎| 930/1000 [1:23:51<06:18,  5.41s/it][Succeeded / Failed / Skipped / Total] 384 / 525 / 21 / 930:  93%|█████████▎| 931/1000 [1:24:02<06:13,  5.42s/it][Succeeded / Failed / Skipped / Total] 385 / 525 / 21 / 931:  93%|█████████▎| 931/1000 [1:24:02<06:13,  5.42s/it][Succeeded / Failed / Skipped / Total] 385 / 525 / 21 / 931:  93%|█████████▎| 932/1000 [1:24:04<06:08,  5.41s/it][Succeeded / Failed / Skipped / Total] 385 / 526 / 21 / 932:  93%|█████████▎| 932/1000 [1:24:04<06:08,  5.41s/it][Succeeded / Failed / Skipped / Total] 385 / 526 / 21 / 932:  93%|█████████▎| 933/1000 [1:24:16<06:03,  5.42s/it][Succeeded / Failed / Skipped / Total] 386 / 526 / 21 / 933:  93%|█████████▎| 933/1000 [1:24:16<06:03,  5.42s/it][Succeeded / Failed / Skipped / Total] 386 / 526 / 21 / 933:  93%|█████████▎| 934/1000 [1:24:24<05:57,  5.42s/it]Returns the long value . --> Get option by name --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLong]] ( final String name , final long defaultValue ) { String [[value]] = get ( name ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[option]] ( final String name , final long defaultValue ) { String [[end]] = get ( name ) ; if ( [[end]] == null ) { return defaultValue ; } [[end]] = [[end]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[end]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 927 ---------------------------------------------
Returns the integer value for the specified name . --> Get a variable from variable name --> Socre: 1.0

[[[[Adv]]]]: public static long [[getInt]] ( final String name , final int defaultValue ) { String [[value]] = get ( name ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long [[var]] ( final String name , final int defaultValue ) { String [[string]] = get ( name ) ; if ( [[string]] == null ) { return defaultValue ; } [[string]] = [[string]] . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( [[string]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 928 ---------------------------------------------
Gets the resolved parameters . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[c]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 929 ---------------------------------------------
Get boolean . --> Uses variable name to variable value --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[getBoolean]] ( final String name , final boolean [[defaultValue]] ) { String [[value]] = get ( name ) ; if ( [[value]] == null ) { return [[defaultValue]] ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; switch ( [[value]] ) { case "true" : case "yes" : case "1" : case "on" : return "[[True]]" == "[[True]]" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean [[use]] ( final String name , final boolean [[variable]] ) { String [[command]] = get ( name ) ; if ( [[command]] == null ) { return [[variable]] ; } [[command]] = [[command]] . trim ( ) . toLowerCase ( ) ; switch ( [[command]] ) { case "true" : case "yes" : case "1" : case "on" : return "[[back]]" == "[[back]]" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return [[variable]] ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 930 ---------------------------------------------
Resolve result path . --> Set the value of this ResultPath --> Socre: 1.0

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String path , String value ) { boolean absolutePath = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[id]] ( String path , String value ) { boolean absolutePath = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 931 ---------------------------------------------
Serializes the given key and value . --> Helper method for loop processing --> Socre: 1.0

[[[[Adv]]]]: protected int [[serializeKeyValue]] ( final JsonContext [[jsonContext]] , final Path currentPath , final Object key , final Object [[value]] , int count ) { if ( ( [[value]] == null ) && [[jsonContext]] . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int [[loop]] ( final JsonContext [[al]] , final Path currentPath , final Object key , final Object [[pointer]] , int count ) { if ( ( [[pointer]] == null ) && [[al]] . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 932 ---------------------------------------------
Looks up a path by alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String lookupAlias ( final String alias ) { String [[value]] = actionsManager . lookupPathAlias ( alias ) ; if ( [[value]] == null ) { ActionRuntime [[cfg]] = actionsManager . lookup ( alias ) ; if ( [[cfg]] != null ) { [[value]] = [[cfg]] . getActionPath ( ) ; } } return [[value]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String lookupAlias ( final String alias ) { String [[access]] = actionsManager . lookupPathAlias ( alias ) ; if ( [[access]] == null ) { ActionRuntime [[d]] = actionsManager . lookup ( alias ) ; if ( [[d]] != null ) { [[access]] = [[d]] . getActionPath ( ) ; } } return [[access]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 933 ---------------------------------------------
Resolve alias . --> Extracts the prefix of the string --> Socre: 1.0

[[[[Adv]]]]: protected String [[resolveAlias]] ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String [[foo]] ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 934 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 386 / 527 / 21 / 934:  93%|█████████▎| 934/1000 [1:24:24<05:57,  5.42s/it][Succeeded / Failed / Skipped / Total] 386 / 527 / 21 / 934:  94%|█████████▎| 935/1000 [1:24:25<05:52,  5.42s/it][Succeeded / Failed / Skipped / Total] 386 / 528 / 21 / 935:  94%|█████████▎| 935/1000 [1:24:25<05:52,  5.42s/it][Succeeded / Failed / Skipped / Total] 386 / 528 / 21 / 935:  94%|█████████▎| 936/1000 [1:24:31<05:46,  5.42s/it][Succeeded / Failed / Skipped / Total] 387 / 528 / 21 / 936:  94%|█████████▎| 936/1000 [1:24:31<05:46,  5.42s/it][Succeeded / Failed / Skipped / Total] 387 / 528 / 21 / 936:  94%|█████████▎| 937/1000 [1:24:33<05:41,  5.41s/it][Succeeded / Failed / Skipped / Total] 387 / 529 / 21 / 937:  94%|█████████▎| 937/1000 [1:24:33<05:41,  5.41s/it][Succeeded / Failed / Skipped / Total] 387 / 529 / 21 / 937:  94%|█████████▍| 938/1000 [1:24:39<05:35,  5.42s/it][Succeeded / Failed / Skipped / Total] 388 / 529 / 21 / 938:  94%|█████████▍| 938/1000 [1:24:39<05:35,  5.42s/it][Succeeded / Failed / Skipped / Total] 388 / 529 / 21 / 938:  94%|█████████▍| 939/1000 [1:24:40<05:30,  5.41s/it][Succeeded / Failed / Skipped / Total] 388 / 530 / 21 / 939:  94%|█████████▍| 939/1000 [1:24:40<05:30,  5.41s/it][Succeeded / Failed / Skipped / Total] 388 / 530 / 21 / 939:  94%|█████████▍| 940/1000 [1:24:46<05:24,  5.41s/it][Succeeded / Failed / Skipped / Total] 389 / 530 / 21 / 940:  94%|█████████▍| 940/1000 [1:24:46<05:24,  5.41s/it][Succeeded / Failed / Skipped / Total] 389 / 530 / 21 / 940:  94%|█████████▍| 941/1000 [1:24:47<05:18,  5.41s/it][Succeeded / Failed / Skipped / Total] 389 / 530 / 22 / 941:  94%|█████████▍| 941/1000 [1:24:47<05:18,  5.41s/it][Succeeded / Failed / Skipped / Total] 389 / 530 / 22 / 941:  94%|█████████▍| 942/1000 [1:24:47<05:13,  5.40s/it][Succeeded / Failed / Skipped / Total] 390 / 530 / 22 / 942:  94%|█████████▍| 942/1000 [1:24:47<05:13,  5.40s/it][Succeeded / Failed / Skipped / Total] 390 / 530 / 22 / 942:  94%|█████████▍| 943/1000 [1:24:57<05:08,  5.41s/it][Succeeded / Failed / Skipped / Total] 391 / 530 / 22 / 943:  94%|█████████▍| 943/1000 [1:24:57<05:08,  5.41s/it][Succeeded / Failed / Skipped / Total] 391 / 530 / 22 / 943:  94%|█████████▍| 944/1000 [1:25:04<05:02,  5.41s/it]Resolve the path with the given path and value . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String [[path]] , final String value ) { final ResultPath resultPath = resolveResultPath ( [[path]] , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[operator]] ( final String [[action]] , final String value ) { final ResultPath resultPath = resolveResultPath ( [[action]] , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 935 ---------------------------------------------
Gets the index of the last dot after dot . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String [[str]] ) { int [[slashNdx]] = [[str]] . lastIndexOf ( ' ' ) ; [[slashNdx]] ++ ; return StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[test]] ( final String [[t]] ) { int [[a]] = [[t]] . lastIndexOf ( ' ' ) ; [[a]] ++ ; return StringUtil . lastIndexOf ( [[t]] , ' ' , [[t]] . length ( ) , [[a]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 936 ---------------------------------------------
Strip last camel word . --> Returns the first letter of the given name --> Socre: 1.0

[[[[Adv]]]]: public static String [[stripLastCamelWord]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String [[bin]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 937 ---------------------------------------------
Returns the index of the last dot in the given string . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < str . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[line]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < str . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 938 ---------------------------------------------
Initializes the sketch with the given key and tweak parameters . --> Record a new line --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final long [ ] key , final long [ ] tweak ) { final int newNw = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void [[line]] ( final long [ ] key , final long [ ] tweak ) { final int newNw = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 939 ---------------------------------------------
Returns the index of the first dot after a dot . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[indexOfDotAfterSlash]] ( final String [[str]] ) { int slashNdx = [[str]] . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return [[str]] . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int [[i]] ( final String [[q]] ) { int slashNdx = [[q]] . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return [[q]] . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 940 ---------------------------------------------
Multiply x . --> Test for x and y --> Socre: 1.0

[[[[Adv]]]]: private void [[mix]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void [[test]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 941 ---------------------------------------------
Schedule key schedule --> [[[SKIPPED]]]

[[[[Adv]]]]: private void keySchedule ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 942 ---------------------------------------------
Dexes the polynomix . --> Copied from j --> Socre: 1.0

[[[[Adv]]]]: private void [[demix]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void [[a]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 943 ---------------------------------------------
Resolves the schema name . --> Get the operator for the given class --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveSchemaName]] ( final Class < ? > [[type]] , final String defaultSchemaName ) { String [[schemaName]] = null ; final DbTable [[dbTable]] = [[type]] . getAnnotation ( DbTable . class ) ; if ( [[dbTable]] != null ) { [[schemaName]] = [[dbTable]] . schema ( ) . trim ( ) ; } if ( ( [[schemaName]] == null ) || ( [[schemaName]] . length ( ) == 0 ) ) { [[schemaName]] = defaultSchemaName ; } return [[schemaName]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String [[operator]] ( final Class < ? > [[max]] , final String defaultSchemaName ) { String [[function]] = null ; final DbTable [[code]] = [[max]] . getAnnotation ( DbTable . class ) ; if ( [[code]] != null ) { [[function]] = [[code]] . schema ( ) . trim ( ) ; } if ( ( [[function]] == null ) || ( [[function]] . length ( ) == 0 ) ) { [[function]] = defaultSchemaName ; } return [[function]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 944 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 392 / 530 / 22 / 944:  94%|█████████▍| 944/1000 [1:25:04<05:02,  5.41s/it][Succeeded / Failed / Skipped / Total] 392 / 530 / 22 / 944:  94%|█████████▍| 945/1000 [1:25:08<04:57,  5.41s/it][Succeeded / Failed / Skipped / Total] 393 / 530 / 22 / 945:  94%|█████████▍| 945/1000 [1:25:08<04:57,  5.41s/it][Succeeded / Failed / Skipped / Total] 393 / 530 / 22 / 945:  95%|█████████▍| 946/1000 [1:25:14<04:51,  5.41s/it][Succeeded / Failed / Skipped / Total] 394 / 530 / 22 / 946:  95%|█████████▍| 946/1000 [1:25:14<04:51,  5.41s/it][Succeeded / Failed / Skipped / Total] 394 / 530 / 22 / 946:  95%|█████████▍| 947/1000 [1:25:25<04:46,  5.41s/it][Succeeded / Failed / Skipped / Total] 395 / 530 / 22 / 947:  95%|█████████▍| 947/1000 [1:25:25<04:46,  5.41s/it][Succeeded / Failed / Skipped / Total] 395 / 530 / 22 / 947:  95%|█████████▍| 948/1000 [1:25:31<04:41,  5.41s/it][Succeeded / Failed / Skipped / Total] 395 / 531 / 22 / 948:  95%|█████████▍| 948/1000 [1:25:31<04:41,  5.41s/it][Succeeded / Failed / Skipped / Total] 395 / 531 / 22 / 948:  95%|█████████▍| 949/1000 [1:25:31<04:35,  5.41s/it][Succeeded / Failed / Skipped / Total] 395 / 531 / 23 / 949:  95%|█████████▍| 949/1000 [1:25:31<04:35,  5.41s/it][Succeeded / Failed / Skipped / Total] 395 / 531 / 23 / 949:  95%|█████████▌| 950/1000 [1:25:42<04:30,  5.41s/it][Succeeded / Failed / Skipped / Total] 396 / 531 / 23 / 950:  95%|█████████▌| 950/1000 [1:25:42<04:30,  5.41s/it][Succeeded / Failed / Skipped / Total] 396 / 531 / 23 / 950:  95%|█████████▌| 951/1000 [1:25:51<04:25,  5.42s/it]Convert a byte array to a long array . --> Properly procedure --> Socre: 1.0

[[[[Adv]]]]: protected static long [ ] [[bytesToLongs]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] [[procedure]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 945 ---------------------------------------------
Encrypt a block --> Tag the given set at the given position --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[encryptBlock]] ( final byte [ ] [[content]] , final int [[offset]] ) { long [ ] contentBlock = bytesToLongs ( [[content]] , [[offset]] , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] [[tag]] ( final byte [ ] [[set]] , final int [[j]] ) { long [ ] contentBlock = bytesToLongs ( [[set]] , [[j]] , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 946 ---------------------------------------------
Gets the path . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[fix]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[fix]] ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 947 ---------------------------------------------
Remove any bounding . --> Shortcut method for example --> Socre: 1.0

[[[[Adv]]]]: private static String [[removeAnyBounding]] ( final char [[s]] , final char e , final String str ) { if ( str == null || str . length ( ) < 2 ) { return str ; } if ( str . startsWith ( String . valueOf ( [[s]] ) ) && str . endsWith ( String . valueOf ( e ) ) ) { return str . substring ( 1 , str . length ( ) - 1 ) ; } return str ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String [[example]] ( final char [[a1]] , final char e , final String str ) { if ( str == null || str . length ( ) < 2 ) { return str ; } if ( str . startsWith ( String . valueOf ( [[a1]] ) ) && str . endsWith ( String . valueOf ( e ) ) ) { return str . substring ( 1 , str . length ( ) - 1 ) ; } return str ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 948 ---------------------------------------------
Resolve column descriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbEntityColumnDescriptor resolveColumnDescriptors ( final DbEntityDescriptor [[dbEntityDescriptor]] , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor resolveColumnDescriptors ( final DbEntityDescriptor [[object]] , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 949 ---------------------------------------------
Ungzip a file --> [[[SKIPPED]]]

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 950 ---------------------------------------------
Zips a given file --> Returns the description of the closure --> Socre: 1.0

[[[[Adv]]]]: public static File [[zlib]] ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String [[zlibFileName]] = [[file]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( [[zlibFileName]] ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( [[zlibFileName]] ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File [[description]] ( final File [[closure]] ) throws IOException { if ( [[closure]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( [[closure]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String [[abs]] = [[closure]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( [[abs]] ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( [[abs]] ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 951 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 396 / 532 / 23 / 951:  95%|█████████▌| 951/1000 [1:25:51<04:25,  5.42s/it][Succeeded / Failed / Skipped / Total] 396 / 532 / 23 / 951:  95%|█████████▌| 952/1000 [1:25:53<04:19,  5.41s/it][Succeeded / Failed / Skipped / Total] 397 / 532 / 23 / 952:  95%|█████████▌| 952/1000 [1:25:53<04:19,  5.41s/it][Succeeded / Failed / Skipped / Total] 397 / 532 / 23 / 952:  95%|█████████▌| 953/1000 [1:26:08<04:14,  5.42s/it][Succeeded / Failed / Skipped / Total] 397 / 533 / 23 / 953:  95%|█████████▌| 953/1000 [1:26:08<04:14,  5.42s/it][Succeeded / Failed / Skipped / Total] 397 / 533 / 23 / 953:  95%|█████████▌| 954/1000 [1:26:35<04:10,  5.45s/it][Succeeded / Failed / Skipped / Total] 397 / 534 / 23 / 954:  95%|█████████▌| 954/1000 [1:26:35<04:10,  5.45s/it][Succeeded / Failed / Skipped / Total] 397 / 534 / 23 / 954:  96%|█████████▌| 955/1000 [1:26:45<04:05,  5.45s/it][Succeeded / Failed / Skipped / Total] 397 / 535 / 23 / 955:  96%|█████████▌| 955/1000 [1:26:45<04:05,  5.45s/it][Succeeded / Failed / Skipped / Total] 397 / 535 / 23 / 955:  96%|█████████▌| 956/1000 [1:26:46<03:59,  5.45s/it][Succeeded / Failed / Skipped / Total] 397 / 536 / 23 / 956:  96%|█████████▌| 956/1000 [1:26:46<03:59,  5.45s/it][Succeeded / Failed / Skipped / Total] 397 / 536 / 23 / 956:  96%|█████████▌| 957/1000 [1:27:00<03:54,  5.46s/it][Succeeded / Failed / Skipped / Total] 397 / 537 / 23 / 957:  96%|█████████▌| 957/1000 [1:27:00<03:54,  5.46s/it][Succeeded / Failed / Skipped / Total] 397 / 537 / 23 / 957:  96%|█████████▌| 958/1000 [1:27:09<03:49,  5.46s/it]Gzip a file --> [[[FAILED]]]

[[[[Adv]]]]: public static File [[gzip]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; String gzipName = file . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File [[driver]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; String gzipName = file . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 952 ---------------------------------------------
Initializes the key with the specified message . --> Empty an empty array --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final String keyMessage , final long [[tweak1]] , final long tweak2 ) { long [ ] [[tweak]] = new long [ ] { [[tweak1]] , tweak2 } ; byte [ ] [[key]] = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , [[key]] , 0 , [[key]] . length < keyData . length ? [[key]] . length : keyData . length ) ; [[init]] ( bytesToLongs ( [[key]] ) , [[tweak]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void [[empty]] ( final String keyMessage , final long [[array]] , final long tweak2 ) { long [ ] [[format]] = new long [ ] { [[array]] , tweak2 } ; byte [ ] [[height]] = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , [[height]] , 0 , [[height]] . length < keyData . length ? [[height]] . length : keyData . length ) ; [[empty]] ( bytesToLongs ( [[height]] ) , [[format]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 953 ---------------------------------------------
Unzips a directory recursively . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[unzip]] ( final String [[zipFile]] , final String destDir , final String ... patterns ) throws IOException { [[unzip]] ( new File ( [[zipFile]] ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void [[type]] ( final String [[alias]] , final String destDir , final String ... patterns ) throws IOException { [[type]] ( new File ( [[alias]] ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 954 ---------------------------------------------
Adds content to a ZIP output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void [[main]] ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 955 ---------------------------------------------
Returns the FieldDescriptor with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor getFieldDescriptor ( final String [[name]] , final boolean [[declared]] ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( [[name]] ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( [[declared]] ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor getFieldDescriptor ( final String [[loaded]] , final boolean [[declaration]] ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( [[loaded]] ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( [[declaration]] ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 956 ---------------------------------------------
Lists all entries in a zip file . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < String > [[listZip]] ( final File [[zipFile]] ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[zipFile]] ) ; Enumeration [[zipEntries]] = zip . entries ( ) ; while ( [[zipEntries]] . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) [[zipEntries]] . nextElement ( ) ; String [[entryName]] = entry . getName ( ) ; entries . add ( [[entryName]] ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > [[loop]] ( final File [[preview]] ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[preview]] ) ; Enumeration [[area]] = zip . entries ( ) ; while ( [[area]] . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) [[area]] . nextElement ( ) ; String [[data]] = entry . getName ( ) ; entries . add ( [[data]] ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 957 ---------------------------------------------
Adds the given file to the ZIP output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream [[zos]] , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[unless]] ( final ZipOutputStream [[end]] , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
[Succeeded / Failed / Skipped / Total] 397 / 538 / 23 / 958:  96%|█████████▌| 958/1000 [1:27:09<03:49,  5.46s/it][Succeeded / Failed / Skipped / Total] 397 / 538 / 23 / 958:  96%|█████████▌| 959/1000 [1:27:10<03:43,  5.45s/it][Succeeded / Failed / Skipped / Total] 397 / 539 / 23 / 959:  96%|█████████▌| 959/1000 [1:27:10<03:43,  5.45s/it][Succeeded / Failed / Skipped / Total] 397 / 539 / 23 / 959:  96%|█████████▌| 960/1000 [1:27:11<03:37,  5.45s/it][Succeeded / Failed / Skipped / Total] 397 / 540 / 23 / 960:  96%|█████████▌| 960/1000 [1:27:11<03:37,  5.45s/it][Succeeded / Failed / Skipped / Total] 397 / 540 / 23 / 960:  96%|█████████▌| 961/1000 [1:27:18<03:32,  5.45s/it][Succeeded / Failed / Skipped / Total] 397 / 541 / 23 / 961:  96%|█████████▌| 961/1000 [1:27:18<03:32,  5.45s/it][Succeeded / Failed / Skipped / Total] 397 / 541 / 23 / 961:  96%|█████████▌| 962/1000 [1:27:20<03:26,  5.45s/it][Succeeded / Failed / Skipped / Total] 397 / 542 / 23 / 962:  96%|█████████▌| 962/1000 [1:27:20<03:26,  5.45s/it][Succeeded / Failed / Skipped / Total] 397 / 542 / 23 / 962:  96%|█████████▋| 963/1000 [1:27:28<03:21,  5.45s/it][Succeeded / Failed / Skipped / Total] 397 / 543 / 23 / 963:  96%|█████████▋| 963/1000 [1:27:28<03:21,  5.45s/it][Succeeded / Failed / Skipped / Total] 397 / 543 / 23 / 963:  96%|█████████▋| 964/1000 [1:27:40<03:16,  5.46s/it][Succeeded / Failed / Skipped / Total] 397 / 544 / 23 / 964:  96%|█████████▋| 964/1000 [1:27:40<03:16,  5.46s/it][Succeeded / Failed / Skipped / Total] 397 / 544 / 23 / 964:  96%|█████████▋| 965/1000 [1:27:43<03:10,  5.45s/it][Succeeded / Failed / Skipped / Total] 397 / 545 / 23 / 965:  96%|█████████▋| 965/1000 [1:27:43<03:10,  5.45s/it][Succeeded / Failed / Skipped / Total] 397 / 545 / 23 / 965:  97%|█████████▋| 966/1000 [1:27:49<03:05,  5.45s/it]--------------------------------------------- Result 958 ---------------------------------------------
Sets the request bundle name . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest request , final String [[bundleName]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[bundleName]] ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[bundleName]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[assume]] ( final ServletRequest request , final String [[error]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[error]] ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[error]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 959 ---------------------------------------------
Sets a session locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession [[session]] , final String localeCode ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + localeCode ) ; } Locale locale = Locale . forLanguageTag ( localeCode ) ; [[session]] . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[after]] ( final HttpSession [[data]] , final String localeCode ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + localeCode ) ; } Locale locale = Locale . forLanguageTag ( localeCode ) ; [[data]] . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 960 ---------------------------------------------
Returns the property descriptor with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String [[name]] , final boolean declared ) { PropertyDescriptor [[propertyDescriptor]] = getProperties ( ) . getPropertyDescriptor ( [[name]] ) ; if ( ( [[propertyDescriptor]] != null ) && [[propertyDescriptor]] . matchDeclared ( declared ) ) { return [[propertyDescriptor]] ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String [[defined]] , final boolean declared ) { PropertyDescriptor [[f]] = getProperties ( ) . getPropertyDescriptor ( [[defined]] ) ; if ( ( [[f]] != null ) && [[f]] . matchDeclared ( declared ) ) { return [[f]] ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 961 ---------------------------------------------
Gets the locale from session . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession [[session]] ) { Locale [[locale]] = ( Locale ) [[session]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[locale]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[locale]] ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[provider]] ( final HttpSession [[service]] ) { Locale [[path]] = ( Locale ) [[service]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[path]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[path]] ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 962 ---------------------------------------------
Adds profiles . --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntries [[profile]] ( final String ... [[profiles]] ) { if ( [[profiles]] == null ) { return this ; } for ( String [[profile]] : [[profiles]] ) { addProfiles ( [[profile]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries [[after]] ( final String ... [[loop]] ) { if ( [[loop]] == null ) { return this ; } for ( String [[after]] : [[loop]] ) { addProfiles ( [[after]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 963 ---------------------------------------------
Reads a big endian long from the given array of bytes . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] buf , final int offset ) { return ( ( long ) buf [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[jump]] ( final byte [ ] buf , final int offset ) { return ( ( long ) buf [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 964 ---------------------------------------------
Reads a label . --> [[[FAILED]]]

[[[[Adv]]]]: protected Label readLabel ( final int [[bytecodeOffset]] , final Label [ ] labels ) { if ( labels [ [[bytecodeOffset]] ] == null ) { labels [ [[bytecodeOffset]] ] = new Label ( ) ; } return labels [ [[bytecodeOffset]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label readLabel ( final int [[variables]] , final Label [ ] labels ) { if ( labels [ [[variables]] ] == null ) { labels [ [[variables]] ] = new Label ( ) ; } return labels [ [[variables]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 965 ---------------------------------------------
Filters parameters for a bean --> [[[FAILED]]]

[[[[Adv]]]]: public String [ ] [[filterParametersForBeanName]] ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] [[procedure]] ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 966 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 397 / 546 / 23 / 966:  97%|█████████▋| 966/1000 [1:27:49<03:05,  5.45s/it][Succeeded / Failed / Skipped / Total] 397 / 546 / 23 / 966:  97%|█████████▋| 967/1000 [1:28:04<03:00,  5.46s/it][Succeeded / Failed / Skipped / Total] 397 / 547 / 23 / 967:  97%|█████████▋| 967/1000 [1:28:04<03:00,  5.46s/it][Succeeded / Failed / Skipped / Total] 397 / 547 / 23 / 967:  97%|█████████▋| 968/1000 [1:28:13<02:55,  5.47s/it][Succeeded / Failed / Skipped / Total] 398 / 547 / 23 / 968:  97%|█████████▋| 968/1000 [1:28:13<02:55,  5.47s/it][Succeeded / Failed / Skipped / Total] 398 / 547 / 23 / 968:  97%|█████████▋| 969/1000 [1:28:14<02:49,  5.46s/it][Succeeded / Failed / Skipped / Total] 398 / 548 / 23 / 969:  97%|█████████▋| 969/1000 [1:28:14<02:49,  5.46s/it][Succeeded / Failed / Skipped / Total] 398 / 548 / 23 / 969:  97%|█████████▋| 970/1000 [1:28:28<02:44,  5.47s/it][Succeeded / Failed / Skipped / Total] 398 / 549 / 23 / 970:  97%|█████████▋| 970/1000 [1:28:28<02:44,  5.47s/it][Succeeded / Failed / Skipped / Total] 398 / 549 / 23 / 970:  97%|█████████▋| 971/1000 [1:28:31<02:38,  5.47s/it]Returns the offset of a type annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] typeAnnotationOffsets , final int [[typeAnnotationIndex]] ) { if ( typeAnnotationOffsets == null || [[typeAnnotationIndex]] >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ [[typeAnnotationIndex]] ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ [[typeAnnotationIndex]] ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[begin]] ( final int [ ] typeAnnotationOffsets , final int [[empty]] ) { if ( typeAnnotationOffsets == null || [[empty]] >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ [[empty]] ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ [[empty]] ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 967 ---------------------------------------------
Reads the contents of a stream into a byte array . --> [[[FAILED]]]

[[[[Adv]]]]: private static byte [ ] [[readStream]] ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int [[bytesRead]] ; while ( ( [[bytesRead]] = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , [[bytesRead]] ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] [[function]] ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int [[back]] ; while ( ( [[back]] = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , [[back]] ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 968 ---------------------------------------------
Read all bootstrap methods attribute . --> Print an echo --> Socre: 1.0

[[[[Adv]]]]: private int [ ] [[readBootstrapMethodsAttribute]] ( final int maxStringLength ) { char [ ] [[charBuffer]] = new char [ maxStringLength ] ; int [[currentAttributeOffset]] = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( [[currentAttributeOffset]] - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] [[echo]] ( final int maxStringLength ) { char [ ] [[alt]] = new char [ maxStringLength ] ; int [[a]] = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( [[a]] - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 969 ---------------------------------------------
Read element values . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[function]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 970 ---------------------------------------------
Retrieve a map from the request attributes . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { return ( Map < String , TransientBeanData > ) [[servletRequest]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[run]] ( final HttpServletRequest [[rant]] ) { return ( Map < String , TransientBeanData > ) [[rant]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 971 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 399 / 549 / 23 / 971:  97%|█████████▋| 971/1000 [1:28:31<02:38,  5.47s/it][Succeeded / Failed / Skipped / Total] 399 / 549 / 23 / 971:  97%|█████████▋| 972/1000 [1:28:45<02:33,  5.48s/it][Succeeded / Failed / Skipped / Total] 399 / 550 / 23 / 972:  97%|█████████▋| 972/1000 [1:28:45<02:33,  5.48s/it][Succeeded / Failed / Skipped / Total] 399 / 550 / 23 / 972:  97%|█████████▋| 973/1000 [1:28:47<02:27,  5.48s/it][Succeeded / Failed / Skipped / Total] 399 / 551 / 23 / 973:  97%|█████████▋| 973/1000 [1:28:47<02:27,  5.48s/it][Succeeded / Failed / Skipped / Total] 399 / 551 / 23 / 973:  97%|█████████▋| 974/1000 [1:28:50<02:22,  5.47s/it][Succeeded / Failed / Skipped / Total] 400 / 551 / 23 / 974:  97%|█████████▋| 974/1000 [1:28:50<02:22,  5.47s/it][Succeeded / Failed / Skipped / Total] 400 / 551 / 23 / 974:  98%|█████████▊| 975/1000 [1:28:54<02:16,  5.47s/it][Succeeded / Failed / Skipped / Total] 401 / 551 / 23 / 975:  98%|█████████▊| 975/1000 [1:28:54<02:16,  5.47s/it][Succeeded / Failed / Skipped / Total] 401 / 551 / 23 / 975:  98%|█████████▊| 976/1000 [1:28:59<02:11,  5.47s/it][Succeeded / Failed / Skipped / Total] 401 / 552 / 23 / 976:  98%|█████████▊| 976/1000 [1:28:59<02:11,  5.47s/it][Succeeded / Failed / Skipped / Total] 401 / 552 / 23 / 976:  98%|█████████▊| 977/1000 [1:29:06<02:05,  5.47s/it][Succeeded / Failed / Skipped / Total] 402 / 552 / 23 / 977:  98%|█████████▊| 977/1000 [1:29:06<02:05,  5.47s/it][Succeeded / Failed / Skipped / Total] 402 / 552 / 23 / 977:  98%|█████████▊| 978/1000 [1:29:09<02:00,  5.47s/it]Read verification type information . --> Start processing instructions --> Socre: 1.0

[[[[Adv]]]]: private int [[readVerificationTypeInfo]] ( final int verificationTypeInfoOffset , final Object [ ] [[frame]] , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : [[frame]] [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : [[frame]] [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : [[frame]] [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : [[frame]] [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : [[frame]] [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : [[frame]] [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : [[frame]] [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : [[frame]] [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : [[frame]] [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int [[start]] ( final int verificationTypeInfoOffset , final Object [ ] [[beads]] , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : [[beads]] [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : [[beads]] [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : [[beads]] [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : [[beads]] [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : [[beads]] [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : [[beads]] [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : [[beads]] [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : [[beads]] [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : [[beads]] [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 972 ---------------------------------------------
Returns the ctor descriptor for the given arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public CtorDescriptor [[getCtorDescriptor]] ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != args . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != args [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor [[line]] ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != args . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != args [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 973 ---------------------------------------------
Create a request map from the servlet attributes . --> [[[FAILED]]]

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[createRequestMap]] ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > [[map]] = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , [[map]] ) ; return [[map]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[fix]] ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > [[end]] = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , [[end]] ) ; return [[end]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 974 ---------------------------------------------
Initializes the filter . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[fix]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 975 ---------------------------------------------
Adds a file consumer to the find file . --> Adds a Files that will be scanned for files --> Socre: 1.0

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[returns]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[returns]] ) ; } else { consumers . add ( [[returns]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 976 ---------------------------------------------
Convert array to array . --> [[[FAILED]]]

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object [[value]] ) { final Class valueComponentType = [[value]] . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( valueComponentType . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( [[value]] , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[cause]] ( final Object [[a]] ) { final Class valueComponentType = [[a]] . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( valueComponentType . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( [[a]] , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 977 ---------------------------------------------
Add a search path . --> Add a file type --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI searchPath ) { File [[file]] ; try { [[file]] = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( [[file]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[type]] ( final URI searchPath ) { File [[string]] ; try { [[string]] = new File ( [[type]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[type]] , ex ) ; } addPath ( [[string]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 978 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 402 / 553 / 23 / 978:  98%|█████████▊| 978/1000 [1:29:09<02:00,  5.47s/it][Succeeded / Failed / Skipped / Total] 402 / 553 / 23 / 978:  98%|█████████▊| 979/1000 [1:29:11<01:54,  5.47s/it][Succeeded / Failed / Skipped / Total] 403 / 553 / 23 / 979:  98%|█████████▊| 979/1000 [1:29:11<01:54,  5.47s/it][Succeeded / Failed / Skipped / Total] 403 / 553 / 23 / 979:  98%|█████████▊| 980/1000 [1:29:18<01:49,  5.47s/it][Succeeded / Failed / Skipped / Total] 403 / 554 / 23 / 980:  98%|█████████▊| 980/1000 [1:29:18<01:49,  5.47s/it][Succeeded / Failed / Skipped / Total] 403 / 554 / 23 / 980:  98%|█████████▊| 981/1000 [1:29:19<01:43,  5.46s/it][Succeeded / Failed / Skipped / Total] 403 / 555 / 23 / 981:  98%|█████████▊| 981/1000 [1:29:19<01:43,  5.46s/it][Succeeded / Failed / Skipped / Total] 403 / 555 / 23 / 981:  98%|█████████▊| 982/1000 [1:29:27<01:38,  5.47s/it][Succeeded / Failed / Skipped / Total] 404 / 555 / 23 / 982:  98%|█████████▊| 982/1000 [1:29:27<01:38,  5.47s/it][Succeeded / Failed / Skipped / Total] 404 / 555 / 23 / 982:  98%|█████████▊| 983/1000 [1:29:27<01:32,  5.46s/it][Succeeded / Failed / Skipped / Total] 405 / 555 / 23 / 983:  98%|█████████▊| 983/1000 [1:29:27<01:32,  5.46s/it][Succeeded / Failed / Skipped / Total] 405 / 555 / 23 / 983:  98%|█████████▊| 984/1000 [1:29:29<01:27,  5.46s/it][Succeeded / Failed / Skipped / Total] 405 / 556 / 23 / 984:  98%|█████████▊| 984/1000 [1:29:29<01:27,  5.46s/it][Succeeded / Failed / Skipped / Total] 405 / 556 / 23 / 984:  98%|█████████▊| 985/1000 [1:29:36<01:21,  5.46s/it][Succeeded / Failed / Skipped / Total] 406 / 556 / 23 / 985:  98%|█████████▊| 985/1000 [1:29:36<01:21,  5.46s/it][Succeeded / Failed / Skipped / Total] 406 / 556 / 23 / 985:  99%|█████████▊| 986/1000 [1:29:42<01:16,  5.46s/it][Succeeded / Failed / Skipped / Total] 406 / 557 / 23 / 986:  99%|█████████▊| 986/1000 [1:29:42<01:16,  5.46s/it][Succeeded / Failed / Skipped / Total] 406 / 557 / 23 / 986:  99%|█████████▊| 987/1000 [1:29:43<01:10,  5.45s/it]Obtains a list of constructor descriptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] [[ctors]] = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ [[ctors]] . length ] ; for ( int [[i]] = 0 ; [[i]] < [[ctors]] . length ; [[i]] ++ ) { Constructor [[ctor]] = [[ctors]] [ [[i]] ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( [[ctor]] ) ; allCtors [ [[i]] ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] [[context]] = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ [[context]] . length ] ; for ( int [[value]] = 0 ; [[value]] < [[context]] . length ; [[value]] ++ ) { Constructor [[x]] = [[context]] [ [[value]] ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( [[x]] ) ; allCtors [ [[value]] ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 979 ---------------------------------------------
Add a search path . --> Add a file view --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL [[searchPath]] ) { File file = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[view]] ( final URL [[element]] ) { File file = FileUtil . toContainerFile ( [[view]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[view]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 980 ---------------------------------------------
Includes specified patterns . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[include]] ( final String ... [[patterns]] ) { for ( String [[pattern]] : [[patterns]] ) { rules . include ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile [[list]] ( final String ... [[end]] ) { for ( String [[includes]] : [[end]] ) { rules . include ( [[includes]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 981 ---------------------------------------------
Add a path to the list . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addPath]] ( final File [[path]] ) { if ( ! [[path]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[path]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void [[type]] ( final File [[sequence]] ) { if ( ! [[sequence]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[sequence]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 982 ---------------------------------------------
Excludes given patterns . --> Excludes files after a header --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[exclude]] ( final String ... [[patterns]] ) { for ( String pattern : [[patterns]] ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile [[after]] ( final String ... [[header]] ) { for ( String pattern : [[header]] ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 983 ---------------------------------------------
Returns an iterator over all of the files in this directory . --> For testing purposes only --> Socre: 1.0

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[after]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 984 ---------------------------------------------
Returns all the files in the stream . --> [[[FAILED]]]

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > allFiles = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { allFiles . add ( file ) ; } return allFiles ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[end]] ( ) { List < File > allFiles = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { allFiles . add ( file ) ; } return allFiles ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 985 ---------------------------------------------
Returns a new PrintWriter instance . --> Style PrintWriter --> Socre: 1.0

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[style]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 986 ---------------------------------------------
Returns the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[header]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 987 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 407 / 557 / 23 / 987:  99%|█████████▊| 987/1000 [1:29:43<01:10,  5.45s/it][Succeeded / Failed / Skipped / Total] 407 / 557 / 23 / 987:  99%|█████████▉| 988/1000 [1:29:45<01:05,  5.45s/it][Succeeded / Failed / Skipped / Total] 407 / 558 / 23 / 988:  99%|█████████▉| 988/1000 [1:29:45<01:05,  5.45s/it][Succeeded / Failed / Skipped / Total] 407 / 558 / 23 / 988:  99%|█████████▉| 989/1000 [1:29:59<01:00,  5.46s/it][Succeeded / Failed / Skipped / Total] 407 / 559 / 23 / 989:  99%|█████████▉| 989/1000 [1:29:59<01:00,  5.46s/it][Succeeded / Failed / Skipped / Total] 407 / 559 / 23 / 989:  99%|█████████▉| 990/1000 [1:30:04<00:54,  5.46s/it][Succeeded / Failed / Skipped / Total] 407 / 560 / 23 / 990:  99%|█████████▉| 990/1000 [1:30:04<00:54,  5.46s/it][Succeeded / Failed / Skipped / Total] 407 / 560 / 23 / 990:  99%|█████████▉| 991/1000 [1:30:09<00:49,  5.46s/it][Succeeded / Failed / Skipped / Total] 408 / 560 / 23 / 991:  99%|█████████▉| 991/1000 [1:30:09<00:49,  5.46s/it][Succeeded / Failed / Skipped / Total] 408 / 560 / 23 / 991:  99%|█████████▉| 992/1000 [1:30:14<00:43,  5.46s/it][Succeeded / Failed / Skipped / Total] 408 / 561 / 23 / 992:  99%|█████████▉| 992/1000 [1:30:14<00:43,  5.46s/it][Succeeded / Failed / Skipped / Total] 408 / 561 / 23 / 992:  99%|█████████▉| 993/1000 [1:30:15<00:38,  5.45s/it]Initialize rules . --> Mask the rules --> Socre: 1.0

[[[[Adv]]]]: protected void [[init]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void [[mask]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 988 ---------------------------------------------
Resolves the wiring mode . --> [[[FAILED]]]

[[[[Adv]]]]: public WiringMode [[resolveBeanWiringMode]] ( final Class [[type]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[type]] ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode [[end]] ( final Class [[operator]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[operator]] ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 989 ---------------------------------------------
Gets the class name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getClassName]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String [[null]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 990 ---------------------------------------------
Resolves the name of the bean . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveBeanName]] ( final Class type , final boolean useLongTypeName ) { PetiteBean [[petiteBean]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( [[petiteBean]] != null ) { name = [[petiteBean]] . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String [[z]] ( final Class type , final boolean useLongTypeName ) { PetiteBean [[m]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String name = null ; if ( [[m]] != null ) { name = [[m]] . value ( ) . trim ( ) ; } if ( ( name == null ) || ( name . length ( ) == 0 ) ) { if ( useLongTypeName ) { name = type . getName ( ) ; } else { name = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return name ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 991 ---------------------------------------------
Gets the constructor descriptor . --> Prints a library description --> Socre: 1.0

[[[[Adv]]]]: public static String [[getConstructorDescriptor]] ( final Constructor < ? > constructor ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] parameters = constructor . getParameterTypes ( ) ; for ( Class < ? > [[parameter]] : parameters ) { appendDescriptor ( [[parameter]] , [[stringBuilder]] ) ; } return [[stringBuilder]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String [[library]] ( final Constructor < ? > constructor ) { StringBuilder [[c]] = new StringBuilder ( ) ; [[c]] . append ( ' ' ) ; Class < ? > [ ] parameters = constructor . getParameterTypes ( ) ; for ( Class < ? > [[define]] : parameters ) { appendDescriptor ( [[define]] , [[c]] ) ; } return [[c]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 992 ---------------------------------------------
Append descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[appendDescriptor]] ( final StringBuilder stringBuilder ) { if ( sort == OBJECT ) { stringBuilder . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { stringBuilder . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { stringBuilder . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void [[foo]] ( final StringBuilder stringBuilder ) { if ( sort == OBJECT ) { stringBuilder . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { stringBuilder . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { stringBuilder . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 993 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 408 / 562 / 23 / 993:  99%|█████████▉| 993/1000 [1:30:15<00:38,  5.45s/it][Succeeded / Failed / Skipped / Total] 408 / 562 / 23 / 993:  99%|█████████▉| 994/1000 [1:30:20<00:32,  5.45s/it][Succeeded / Failed / Skipped / Total] 409 / 562 / 23 / 994:  99%|█████████▉| 994/1000 [1:30:20<00:32,  5.45s/it][Succeeded / Failed / Skipped / Total] 409 / 562 / 23 / 994: 100%|█████████▉| 995/1000 [1:30:23<00:27,  5.45s/it][Succeeded / Failed / Skipped / Total] 409 / 563 / 23 / 995: 100%|█████████▉| 995/1000 [1:30:23<00:27,  5.45s/it][Succeeded / Failed / Skipped / Total] 409 / 563 / 23 / 995: 100%|█████████▉| 996/1000 [1:30:26<00:21,  5.45s/it][Succeeded / Failed / Skipped / Total] 410 / 563 / 23 / 996: 100%|█████████▉| 996/1000 [1:30:26<00:21,  5.45s/it][Succeeded / Failed / Skipped / Total] 410 / 563 / 23 / 996: 100%|█████████▉| 997/1000 [1:30:26<00:16,  5.44s/it][Succeeded / Failed / Skipped / Total] 410 / 564 / 23 / 997: 100%|█████████▉| 997/1000 [1:30:26<00:16,  5.44s/it][Succeeded / Failed / Skipped / Total] 410 / 564 / 23 / 997: 100%|█████████▉| 998/1000 [1:30:49<00:10,  5.46s/it][Succeeded / Failed / Skipped / Total] 410 / 565 / 23 / 998: 100%|█████████▉| 998/1000 [1:30:49<00:10,  5.46s/it][Succeeded / Failed / Skipped / Total] 410 / 565 / 23 / 998: 100%|█████████▉| 999/1000 [1:30:51<00:05,  5.46s/it]Gets the size of this object . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[main]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 994 ---------------------------------------------
Set rollback only . --> fix rollback --> Socre: 1.0

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[fix]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 995 ---------------------------------------------
Gets the method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Type returnType , final Type ... argumentTypes ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type [[argumentType]] : argumentTypes ) { [[argumentType]] . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; returnType . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String [[exception]] ( final Type returnType , final Type ... argumentTypes ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type [[base]] : argumentTypes ) { [[base]] . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; returnType . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 996 ---------------------------------------------
Calculates and returns the number of arguments required for the method . --> Encode procedure --> Socre: 1.0

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String methodDescriptor ) { int [[argumentsSize]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[procedure]] ( final String methodDescriptor ) { int [[result]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 997 ---------------------------------------------
Gets the method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method method ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > [[parameter]] : parameters ) { appendDescriptor ( [[parameter]] , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[coordinator]] ( final Method method ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > [[status]] : parameters ) { appendDescriptor ( [[status]] , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 998 ---------------------------------------------
Commit or rollback . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[commitOrRollback]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void [[assuming]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .
--------------------------------------------- Result 999 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 410 / 566 / 23 / 999: 100%|█████████▉| 999/1000 [1:30:51<00:05,  5.46s/it][Succeeded / Failed / Skipped / Total] 410 / 566 / 23 / 999: 100%|██████████| 1000/1000 [1:30:58<00:00,  5.46s/it][Succeeded / Failed / Skipped / Total] 410 / 567 / 23 / 1000: 100%|██████████| 1000/1000 [1:30:58<00:00,  5.46s/it]Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  delete
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapMaskedLM(
    (method):  bae
    (masked_lm_name):  BertForMaskedLM
    (max_length):  512
    (max_candidates):  50
    (min_confidence):  0.0
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 410 / 567 / 23 / 1000: 100%|██████████| 1000/1000 [1:31:00<00:00,  5.46s/it]Performs a rollback . --> [[[FAILED]]]

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > [[it]] = resources . iterator ( ) ; while ( [[it]] . hasNext ( ) ) { JtxResource resource = [[it]] . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { [[it]] . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > [[area]] = resources . iterator ( ) ; while ( [[area]] . hasNext ( ) ) { JtxResource resource = [[area]] . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { [[area]] . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .
--------------------------------------------- Result 1000 ---------------------------------------------
Request resource from transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[E]] > [[E]] requestResource ( final Class < [[E]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[E]] [[resource]] = lookupResource ( resourceType ) ; if ( [[resource]] == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[E]] > [[resourceManager]] = txManager . lookupResourceManager ( resourceType ) ; [[resource]] = [[resourceManager]] . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , [[resourceManager]] , [[resource]] ) ) ; } return [[resource]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < [[body]] > [[body]] requestResource ( final Class < [[body]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[body]] [[name]] = lookupResource ( resourceType ) ; if ( [[name]] == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[body]] > [[item]] = txManager . lookupResourceManager ( resourceType ) ; [[name]] = [[item]] . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , [[item]] , [[name]] ) ) ; } return [[name]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 410    |
| Number of failed attacks:     | 567    |
| Number of skipped attacks:    | 23     |
| Original accuracy:            | 97.7%  |
| Accuracy under attack:        | 56.7%  |
| Attack success rate:          | 41.97% |
| Average perturbed word %:     | 53.42% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 135.64 |
| Original BLEU-4:              | 17.95  |
| Perturbed BLEU-4:             | 4.06   |
+-------------------------------+--------+


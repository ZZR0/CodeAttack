Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertForMaskedLM: ['cls.seq_relationship.weight', 'cls.seq_relationship.bias']
- This IS expected if you are initializing BertForMaskedLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing BertForMaskedLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
textattack: Running 4 worker(s) on 4 GPU(s).
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 1/1000 [00:00<00:01, 606.81it/s][Succeeded / Failed / Skipped / Total] 1 / 1 / 0 / 2:   0%|          | 2/1000 [00:00<00:01, 752.75it/s][Succeeded / Failed / Skipped / Total] 1 / 1 / 0 / 2:   0%|          | 3/1000 [00:03<20:17,  1.22s/it] [Succeeded / Failed / Skipped / Total] 2 / 1 / 0 / 3:   0%|          | 3/1000 [00:03<20:17,  1.22s/it][Succeeded / Failed / Skipped / Total] 2 / 2 / 0 / 4:   0%|          | 4/1000 [00:05<23:51,  1.44s/it][Succeeded / Failed / Skipped / Total] 3 / 2 / 0 / 5:   0%|          | 5/1000 [00:16<53:16,  3.21s/it][Succeeded / Failed / Skipped / Total] 3 / 2 / 0 / 5:   1%|          | 6/1000 [00:25<1:11:25,  4.31s/it][Succeeded / Failed / Skipped / Total] 3 / 3 / 0 / 6:   1%|          | 6/1000 [00:25<1:11:25,  4.31s/it][Succeeded / Failed / Skipped / Total] 3 / 3 / 0 / 6:   1%|          | 7/1000 [00:26<1:02:01,  3.75s/it]--------------------------------------------- Result 1 ---------------------------------------------
Fast implementation for fast - path elements . --> Enqueue a value --> Socre: 1.0

[[[[Adv]]]]: protected final void [[fastPathOrderedEmit]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void [[dasguidefiointumberve]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , observer , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 2 ---------------------------------------------
Wrap the given Observable into an Observable . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[box]] ( ObservableSource < T > source ) { ObjectHelper . requireNonNull ( source , "source is null" ) ; if ( source instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) source ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( source ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 3 ---------------------------------------------
Create a new processor . --> Create a new instance of this processor --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[add]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 4 ---------------------------------------------
Returns an observable sorted by the specified comparator . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > sorted ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > sorted ( Comparator < ? super T > [[castalnu]] ) { ObjectHelper . requireNonNull ( [[castalnu]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[castalnu]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 5 ---------------------------------------------
Convert a scalar value to a stream --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Flowable < U > [[scalarXMap]] ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > [[reginatxytup]] ( final T value , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( value , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 6 ---------------------------------------------
Reset all settings . --> [[[FAILED]]]

[[[[Adv]]]]: public static void reset ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[False]]" != "[[False]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void reset ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[verify]]" != "[[verify]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 7 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 3 / 4 / 0 / 7:   1%|          | 7/1000 [00:26<1:02:01,  3.75s/it][Succeeded / Failed / Skipped / Total] 3 / 4 / 0 / 7:   1%|          | 8/1000 [00:36<1:15:41,  4.58s/it][Succeeded / Failed / Skipped / Total] 4 / 4 / 0 / 8:   1%|          | 8/1000 [00:36<1:15:41,  4.58s/it][Succeeded / Failed / Skipped / Total] 4 / 4 / 0 / 8:   1%|          | 9/1000 [00:37<1:09:33,  4.21s/it][Succeeded / Failed / Skipped / Total] 5 / 4 / 0 / 9:   1%|          | 9/1000 [00:37<1:09:33,  4.21s/it][Succeeded / Failed / Skipped / Total] 5 / 4 / 0 / 9:   1%|          | 10/1000 [00:42<1:09:41,  4.22s/it][Succeeded / Failed / Skipped / Total] 5 / 5 / 0 / 10:   1%|          | 10/1000 [00:42<1:09:41,  4.22s/it][Succeeded / Failed / Skipped / Total] 5 / 5 / 0 / 10:   1%|          | 11/1000 [00:42<1:04:15,  3.90s/it][Succeeded / Failed / Skipped / Total] 5 / 6 / 0 / 11:   1%|          | 11/1000 [00:42<1:04:15,  3.90s/it][Succeeded / Failed / Skipped / Total] 5 / 6 / 0 / 11:   1%|          | 12/1000 [00:43<1:00:15,  3.66s/it][Succeeded / Failed / Skipped / Total] 5 / 7 / 0 / 12:   1%|          | 12/1000 [00:43<1:00:15,  3.66s/it][Succeeded / Failed / Skipped / Total] 5 / 7 / 0 / 12:   1%|▏         | 13/1000 [00:49<1:02:11,  3.78s/it]Create a new instance of this processor . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int [[capacityHint]] , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( [[capacityHint]] , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[access]] ( int [[contextsulther]] , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( [[contextsulther]] , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 8 ---------------------------------------------
Tries to apply a scalar function to a Publisher --> Implements the function with the result --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > [[r]] ; try { [[r]] = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( [[r]] instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) [[r]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { [[r]] . subscribe ( subscriber ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[saishiggeemdsunrise]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } Publisher < ? extends R > [[rt]] ; try { [[rt]] = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( [[rt]] instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) [[rt]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( subscriber ) ; return "True" == "True" ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , u ) ) ; } else { [[rt]] . subscribe ( subscriber ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 9 ---------------------------------------------
Adapts a CompletableObservable to a ConnectableObservable . --> Create a new observable from an observable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[observeOn]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > [[observable]] = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , [[observable]] ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[employeeo]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > [[inssingce]] = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , [[inssingce]] ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 10 ---------------------------------------------
Construct a Maybe from a single value . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[maildlingre]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 11 ---------------------------------------------
Construct a Maybe from a Completable --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource [[completableSource]] ) { ObjectHelper . requireNonNull ( [[completableSource]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[completableSource]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[backafponepoint]] ( CompletableSource [[chaputillpoolvarfold]] ) { ObjectHelper . requireNonNull ( [[chaputillpoolvarfold]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[chaputillpoolvarfold]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 12 ---------------------------------------------
Ensures that the specified object is not null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[st]] > [[st]] requireNonNull ( [[st]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 13 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 6 / 7 / 0 / 13:   1%|▏         | 13/1000 [00:49<1:02:11,  3.78s/it][Succeeded / Failed / Skipped / Total] 6 / 7 / 0 / 13:   1%|▏         | 14/1000 [00:53<1:02:25,  3.80s/it][Succeeded / Failed / Skipped / Total] 6 / 8 / 0 / 14:   1%|▏         | 14/1000 [00:53<1:02:25,  3.80s/it][Succeeded / Failed / Skipped / Total] 6 / 8 / 0 / 14:   2%|▏         | 15/1000 [00:53<59:03,  3.60s/it]  [Succeeded / Failed / Skipped / Total] 7 / 8 / 0 / 15:   2%|▏         | 15/1000 [00:53<59:03,  3.60s/it][Succeeded / Failed / Skipped / Total] 7 / 8 / 0 / 15:   2%|▏         | 16/1000 [00:55<56:36,  3.45s/it][Succeeded / Failed / Skipped / Total] 8 / 8 / 0 / 16:   2%|▏         | 16/1000 [00:55<56:36,  3.45s/it][Succeeded / Failed / Skipped / Total] 8 / 8 / 0 / 16:   2%|▏         | 17/1000 [01:04<1:01:56,  3.78s/it][Succeeded / Failed / Skipped / Total] 8 / 9 / 0 / 17:   2%|▏         | 17/1000 [01:04<1:01:56,  3.78s/it][Succeeded / Failed / Skipped / Total] 8 / 9 / 0 / 17:   2%|▏         | 18/1000 [01:07<1:01:17,  3.74s/it][Succeeded / Failed / Skipped / Total] 8 / 10 / 0 / 18:   2%|▏         | 18/1000 [01:07<1:01:17,  3.74s/it][Succeeded / Failed / Skipped / Total] 8 / 10 / 0 / 18:   2%|▏         | 19/1000 [01:12<1:02:48,  3.84s/it][Succeeded / Failed / Skipped / Total] 9 / 10 / 0 / 19:   2%|▏         | 19/1000 [01:12<1:02:48,  3.84s/it][Succeeded / Failed / Skipped / Total] 9 / 10 / 0 / 19:   2%|▏         | 20/1000 [01:16<1:02:23,  3.82s/it][Succeeded / Failed / Skipped / Total] 9 / 11 / 0 / 20:   2%|▏         | 20/1000 [01:16<1:02:23,  3.82s/it][Succeeded / Failed / Skipped / Total] 9 / 11 / 0 / 20:   2%|▏         | 21/1000 [01:17<1:00:10,  3.69s/it][Succeeded / Failed / Skipped / Total] 10 / 11 / 0 / 21:   2%|▏         | 21/1000 [01:17<1:00:10,  3.69s/it][Succeeded / Failed / Skipped / Total] 10 / 11 / 0 / 21:   2%|▏         | 22/1000 [01:23<1:02:07,  3.81s/it][Succeeded / Failed / Skipped / Total] 10 / 12 / 0 / 22:   2%|▏         | 22/1000 [01:23<1:02:07,  3.81s/it][Succeeded / Failed / Skipped / Total] 10 / 12 / 0 / 22:   2%|▏         | 23/1000 [01:31<1:05:01,  3.99s/it]Wrapper function . --> Wrapper functions --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Function < T , U > justFunction ( U [[value]] ) { return new JustValue < T , U > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < T , U > Function < T , U > justFunction ( U [[function]] ) { return new JustValue < T , U > ( [[function]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 14 ---------------------------------------------
Returns an identity function . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[T]] > Function < [[T]] , [[T]] > [[identity]] ( ) { return ( Function < [[T]] , [[T]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[art]] > Function < [[art]] , [[art]] > [[artist]] ( ) { return ( Function < [[art]] , [[art]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 15 ---------------------------------------------
Wraps the given value . --> Utility method for converting attribute --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > [[justCallable]] ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > [[justmalruper]] ( T [[attribute]] ) { return new JustValue < Object , T > ( [[attribute]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 16 ---------------------------------------------
Retries the given number of times . --> Perform a refort on this thread --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[retry]] ( long [[times]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[times]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[reforted]] ( long [[clocks]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[clocks]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 17 ---------------------------------------------
Create a new unicast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[engineer]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 18 ---------------------------------------------
Cast function . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[castFunction]] ( Class < U > target ) { return new CastToClass < [[T]] , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < [[τ]] , U > Function < [[τ]] , U > [[castblocksty]] ( Class < U > target ) { return new CastToClass < [[τ]] , U > ( target ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 19 ---------------------------------------------
Create a new unicast subject with the specified capacity . --> Print a unicast subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[print]] ( int [[moodhear0]] ) { return new UnicastSubject < T > ( [[moodhear0]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 20 ---------------------------------------------
Get an error from the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[dreadneteraort]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 21 ---------------------------------------------
Create a new unicast subject . --> Shortcut method for constructors --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( boolean [[delayError]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[delayError]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[array]] ( boolean [[rearelport]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[rearelport]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 22 ---------------------------------------------
Create a new instance of the specified capacity . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int capacityHint , Runnable [[onTerminate]] ) { return new UnicastSubject < T > ( capacityHint , [[onTerminate]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[capture]] ( int capacityHint , Runnable [[anaryror]] ) { return new UnicastSubject < T > ( capacityHint , [[anaryror]] , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 23 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 11 / 12 / 0 / 23:   2%|▏         | 23/1000 [01:31<1:05:01,  3.99s/it][Succeeded / Failed / Skipped / Total] 11 / 12 / 0 / 23:   2%|▏         | 24/1000 [01:36<1:05:25,  4.02s/it][Succeeded / Failed / Skipped / Total] 12 / 12 / 0 / 24:   2%|▏         | 24/1000 [01:36<1:05:25,  4.02s/it][Succeeded / Failed / Skipped / Total] 12 / 12 / 0 / 24:   2%|▎         | 25/1000 [01:37<1:03:12,  3.89s/it][Succeeded / Failed / Skipped / Total] 12 / 13 / 0 / 25:   2%|▎         | 25/1000 [01:37<1:03:12,  3.89s/it][Succeeded / Failed / Skipped / Total] 12 / 13 / 0 / 25:   3%|▎         | 26/1000 [01:48<1:07:52,  4.18s/it][Succeeded / Failed / Skipped / Total] 12 / 14 / 0 / 26:   3%|▎         | 26/1000 [01:48<1:07:53,  4.18s/it][Succeeded / Failed / Skipped / Total] 12 / 14 / 0 / 26:   3%|▎         | 27/1000 [01:57<1:10:49,  4.37s/it][Succeeded / Failed / Skipped / Total] 12 / 15 / 0 / 27:   3%|▎         | 27/1000 [01:57<1:10:49,  4.37s/it][Succeeded / Failed / Skipped / Total] 12 / 15 / 0 / 27:   3%|▎         | 28/1000 [02:03<1:11:33,  4.42s/it][Succeeded / Failed / Skipped / Total] 12 / 16 / 0 / 28:   3%|▎         | 28/1000 [02:03<1:11:33,  4.42s/it][Succeeded / Failed / Skipped / Total] 12 / 16 / 0 / 28:   3%|▎         | 29/1000 [02:10<1:12:35,  4.49s/it][Succeeded / Failed / Skipped / Total] 13 / 16 / 0 / 29:   3%|▎         | 29/1000 [02:10<1:12:35,  4.49s/it][Succeeded / Failed / Skipped / Total] 13 / 16 / 0 / 29:   3%|▎         | 30/1000 [02:20<1:15:44,  4.69s/it]Waits for the task to be executed . --> Await for errors --> Socre: 1.0

[[[[Adv]]]]: public boolean blockingAwait ( long [[timeout]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean blockingAwait ( long [[walkout]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[walkout]] , unit ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return "[[valid]]" == "[[valid]]" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 24 ---------------------------------------------
Request a synchronous request . --> Performs performance performance --> Socre: 1.0

[[[[Adv]]]]: public static void [[request]] ( Subscription [[s]] , int prefetch ) { [[s]] . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void [[performance]] ( Subscription [[h]] , int prefetch ) { [[h]] . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 25 ---------------------------------------------
Get an error from the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( long [[timeout]] , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , [[unit]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[timeout]] , [[unit]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable [[staticimeerroom]] ( long [[dayo]] , TimeUnit [[shell]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[dayo]] , [[shell]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( [[dayo]] , [[shell]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 26 ---------------------------------------------
Returns the value associated with this notification . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object [[o]] = value ; if ( [[o]] != null && ! NotificationLite . isError ( [[o]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[searchabthing]] ( ) { Object [[n]] = value ; if ( [[n]] != null && ! NotificationLite . isError ( [[n]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 27 ---------------------------------------------
Completes the current value . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[complete]] ( R n ) { long [[p]] = produced ; if ( [[p]] != 0 ) { BackpressureHelper . produced ( this , [[p]] ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void [[general]] ( R n ) { long [[c]] = produced ; if ( [[c]] != 0 ) { BackpressureHelper . produced ( this , [[c]] ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 28 ---------------------------------------------
Gets the error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[lookgarrel]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 29 ---------------------------------------------
Determines if two streams are disjoint --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[validate]] ( Disposable upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[documenta]] ( Disposable upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 30 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 13 / 17 / 0 / 30:   3%|▎         | 30/1000 [02:20<1:15:44,  4.69s/it][Succeeded / Failed / Skipped / Total] 13 / 17 / 0 / 30:   3%|▎         | 31/1000 [02:22<1:14:14,  4.60s/it][Succeeded / Failed / Skipped / Total] 14 / 17 / 0 / 31:   3%|▎         | 31/1000 [02:22<1:14:14,  4.60s/it][Succeeded / Failed / Skipped / Total] 14 / 17 / 0 / 31:   3%|▎         | 32/1000 [02:29<1:15:11,  4.66s/it][Succeeded / Failed / Skipped / Total] 15 / 17 / 0 / 32:   3%|▎         | 32/1000 [02:29<1:15:11,  4.66s/it][Succeeded / Failed / Skipped / Total] 15 / 17 / 0 / 32:   3%|▎         | 33/1000 [02:33<1:15:09,  4.66s/it][Succeeded / Failed / Skipped / Total] 16 / 17 / 0 / 33:   3%|▎         | 33/1000 [02:33<1:15:09,  4.66s/it][Succeeded / Failed / Skipped / Total] 16 / 17 / 0 / 33:   3%|▎         | 34/1000 [02:38<1:15:15,  4.67s/it][Succeeded / Failed / Skipped / Total] 17 / 17 / 0 / 34:   3%|▎         | 34/1000 [02:38<1:15:15,  4.67s/it][Succeeded / Failed / Skipped / Total] 17 / 17 / 0 / 34:   4%|▎         | 35/1000 [02:51<1:18:36,  4.89s/it][Succeeded / Failed / Skipped / Total] 17 / 18 / 0 / 35:   4%|▎         | 35/1000 [02:51<1:18:36,  4.89s/it][Succeeded / Failed / Skipped / Total] 17 / 18 / 0 / 35:   4%|▎         | 36/1000 [02:56<1:18:46,  4.90s/it][Succeeded / Failed / Skipped / Total] 18 / 18 / 0 / 36:   4%|▎         | 36/1000 [02:56<1:18:46,  4.90s/it][Succeeded / Failed / Skipped / Total] 18 / 18 / 0 / 36:   4%|▎         | 37/1000 [03:08<1:21:51,  5.10s/it]Post complete completion . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > void [[postComplete]] ( Subscriber < ? super T > actual , Queue < T > [[queue]] , AtomicLong state , BooleanSupplier isCancelled ) { if ( [[queue]] . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , [[queue]] , state , isCancelled ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void [[detrammarad]] ( Subscriber < ? super T > actual , Queue < T > [[band]] , AtomicLong state , BooleanSupplier isCancelled ) { if ( [[band]] . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( state . get ( ) , actual , [[band]] , state , isCancelled ) ) { return ; } for ( ; ; ) { long r = state . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 31 ---------------------------------------------
Validate two Subscription --> Compare two streams --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[validate]] ( Subscription upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[staticete]] ( Subscription upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 32 ---------------------------------------------
Adds a capacity to the long . --> Add o to o --> Socre: 1.0

[[[[Adv]]]]: public static long addCap ( long [[a]] , long b ) { long u = [[a]] + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long addCap ( long [[o]] , long b ) { long u = [[o]] + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 33 ---------------------------------------------
Returns the capacity of a long . --> Multiply a capacity by w --> Socre: 1.0

[[[[Adv]]]]: public static long multiplyCap ( long a , long [[b]] ) { long u = a * [[b]] ; if ( ( ( a | [[b]] ) >>> 31 ) != 0 ) { if ( u / a != [[b]] ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long multiplyCap ( long a , long [[w]] ) { long u = a * [[w]] ; if ( ( ( a | [[w]] ) >>> 31 ) != 0 ) { if ( u / a != [[w]] ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 34 ---------------------------------------------
Atomically updates the AtomicReference with the given AtomicReference . --> same as above --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Disposable > [[upstream]] , Disposable [[next]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , [[next]] ) ) { [[next]] . dispose ( ) ; if ( [[upstream]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean [[esgate]] ( AtomicReference < Disposable > [[incoming]] , Disposable [[successor]] , Class < ? > observer ) { ObjectHelper . requireNonNull ( [[successor]] , "next is null" ) ; if ( ! [[incoming]] . compareAndSet ( null , [[successor]] ) ) { [[successor]] . dispose ( ) ; if ( [[incoming]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 35 ---------------------------------------------
Drains the maximum number of items in the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean [[d]] = qd . done ( ) ; T v = q . poll ( ) ; boolean [[empty]] = v == null ; if ( checkTerminated ( [[d]] , [[empty]] , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( [[empty]] ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean [[h]] = qd . done ( ) ; T v = q . poll ( ) ; boolean [[a]] = v == null ; if ( checkTerminated ( [[h]] , [[a]] , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( [[a]] ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 36 ---------------------------------------------
Add an object to the list --> Add additional parameter --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[additional]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 37 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 18 / 19 / 0 / 37:   4%|▎         | 37/1000 [03:08<1:21:51,  5.10s/it][Succeeded / Failed / Skipped / Total] 18 / 19 / 0 / 37:   4%|▍         | 38/1000 [03:10<1:20:29,  5.02s/it][Succeeded / Failed / Skipped / Total] 18 / 20 / 0 / 38:   4%|▍         | 38/1000 [03:10<1:20:29,  5.02s/it][Succeeded / Failed / Skipped / Total] 18 / 20 / 0 / 38:   4%|▍         | 39/1000 [03:11<1:18:37,  4.91s/it][Succeeded / Failed / Skipped / Total] 18 / 21 / 0 / 39:   4%|▍         | 39/1000 [03:11<1:18:37,  4.91s/it][Succeeded / Failed / Skipped / Total] 18 / 21 / 0 / 39:   4%|▍         | 40/1000 [03:14<1:17:41,  4.86s/it][Succeeded / Failed / Skipped / Total] 19 / 21 / 0 / 40:   4%|▍         | 40/1000 [03:14<1:17:41,  4.86s/it][Succeeded / Failed / Skipped / Total] 19 / 21 / 0 / 40:   4%|▍         | 41/1000 [03:27<1:20:42,  5.05s/it][Succeeded / Failed / Skipped / Total] 20 / 21 / 0 / 41:   4%|▍         | 41/1000 [03:27<1:20:42,  5.05s/it][Succeeded / Failed / Skipped / Total] 20 / 21 / 0 / 41:   4%|▍         | 42/1000 [03:29<1:19:42,  4.99s/it][Succeeded / Failed / Skipped / Total] 20 / 22 / 0 / 42:   4%|▍         | 42/1000 [03:29<1:19:42,  4.99s/it][Succeeded / Failed / Skipped / Total] 20 / 22 / 0 / 42:   4%|▍         | 43/1000 [03:34<1:19:34,  4.99s/it][Succeeded / Failed / Skipped / Total] 20 / 23 / 0 / 43:   4%|▍         | 43/1000 [03:34<1:19:34,  4.99s/it][Succeeded / Failed / Skipped / Total] 20 / 23 / 0 / 43:   4%|▍         | 44/1000 [03:45<1:21:47,  5.13s/it][Succeeded / Failed / Skipped / Total] 20 / 24 / 0 / 44:   4%|▍         | 44/1000 [03:45<1:21:47,  5.13s/it][Succeeded / Failed / Skipped / Total] 20 / 24 / 0 / 44:   4%|▍         | 45/1000 [03:46<1:20:17,  5.04s/it]Converts a Throwable to a NullPointerException --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException [[toNpe]] ( Throwable [[ex]] ) { NullPointerException [[npe]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[npe]] . initCause ( [[ex]] ) ; return [[npe]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException [[hotpen]] ( Throwable [[abs]] ) { NullPointerException [[dene]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[dene]] . initCause ( [[abs]] ) ; return [[dene]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 38 ---------------------------------------------
Atomically updates the upstream AtomicReference with the given AtomicReference . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Subscription > upstream , Subscription [[next]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! upstream . compareAndSet ( null , [[next]] ) ) { [[next]] . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean [[bundlepac]] ( AtomicReference < Subscription > upstream , Subscription [[east]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[east]] , "next is null" ) ; if ( ! upstream . compareAndSet ( null , [[east]] ) ) { [[east]] . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "[[that]]" == "[[that]]" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 39 ---------------------------------------------
Shuts down the thread pool . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[dubage]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 40 ---------------------------------------------
Atomically adds n to the specified long . --> Optimized implementation --> Socre: 1.0

[[[[Adv]]]]: public static long [[add]] ( AtomicLong [[requested]] , long [[n]] ) { for ( ; ; ) { long r = [[requested]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , [[n]] ) ; if ( [[requested]] . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long [[approach]] ( AtomicLong [[sought]] , long [[ŋ]] ) { for ( ; ; ) { long r = [[sought]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , [[ŋ]] ) ; if ( [[sought]] . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 41 ---------------------------------------------
Wraps an exception into a RuntimeException . --> package - private for testing --> Socre: 1.0

[[[[Adv]]]]: public static RuntimeException [[wrapOrThrow]] ( Throwable error ) { if ( error instanceof Error ) { throw ( Error ) error ; } if ( error instanceof RuntimeException ) { return ( RuntimeException ) error ; } return new RuntimeException ( error ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException [[packageuhf]] ( Throwable error ) { if ( error instanceof Error ) { throw ( Error ) error ; } if ( error instanceof RuntimeException ) { return ( RuntimeException ) error ; } return new RuntimeException ( error ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 42 ---------------------------------------------
Process the loop . --> [[[FAILED]]]

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[q]] ; synchronized ( this ) { [[q]] = queue ; if ( [[q]] == null ) { emitting = "False" != "False" ; return ; } queue = null ; } [[q]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[secrling]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[c]] ; synchronized ( this ) { [[c]] = queue ; if ( [[c]] == null ) { emitting = "False" != "False" ; return ; } queue = null ; } [[c]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 43 ---------------------------------------------
Create a scheduled executor service . --> [[[FAILED]]]

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory [[factory]] ) { final ScheduledExecutorService [[exec]] = Executors . newScheduledThreadPool ( 1 , [[factory]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[exec]] ) ; return [[exec]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[artist]] ( ThreadFactory [[base]] ) { final ScheduledExecutorService [[xex]] = Executors . newScheduledThreadPool ( 1 , [[base]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[xex]] ) ; return [[xex]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 44 ---------------------------------------------
Checks if the given exception is an exception . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[E]] extends Throwable > Exception throwIfThrowable ( Throwable e ) throws [[E]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[E]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[display]] extends Throwable > Exception throwIfThrowable ( Throwable e ) throws [[display]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[display]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 45 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 21 / 24 / 0 / 45:   4%|▍         | 45/1000 [03:46<1:20:17,  5.04s/it][Succeeded / Failed / Skipped / Total] 21 / 24 / 0 / 45:   5%|▍         | 46/1000 [03:48<1:19:00,  4.97s/it][Succeeded / Failed / Skipped / Total] 22 / 24 / 0 / 46:   5%|▍         | 46/1000 [03:48<1:19:00,  4.97s/it][Succeeded / Failed / Skipped / Total] 22 / 24 / 0 / 46:   5%|▍         | 47/1000 [03:59<1:20:52,  5.09s/it][Succeeded / Failed / Skipped / Total] 22 / 25 / 0 / 47:   5%|▍         | 47/1000 [03:59<1:20:53,  5.09s/it][Succeeded / Failed / Skipped / Total] 22 / 25 / 0 / 47:   5%|▍         | 48/1000 [04:00<1:19:34,  5.01s/it][Succeeded / Failed / Skipped / Total] 23 / 25 / 0 / 48:   5%|▍         | 48/1000 [04:00<1:19:34,  5.01s/it][Succeeded / Failed / Skipped / Total] 23 / 25 / 0 / 48:   5%|▍         | 49/1000 [04:05<1:19:20,  5.01s/it][Succeeded / Failed / Skipped / Total] 23 / 26 / 0 / 49:   5%|▍         | 49/1000 [04:05<1:19:20,  5.01s/it][Succeeded / Failed / Skipped / Total] 23 / 26 / 0 / 49:   5%|▌         | 50/1000 [04:10<1:19:14,  5.00s/it]Removes all resources . --> Translates resources --> Socre: 1.0

[[[[Adv]]]]: public void [[clear]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[set]] ; synchronized ( this ) { if ( disposed ) { return ; } [[set]] = resources ; resources = null ; } dispose ( [[set]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void [[covert]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[collected]] ; synchronized ( this ) { if ( disposed ) { return ; } [[collected]] = resources ; resources = null ; } dispose ( [[collected]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 46 ---------------------------------------------
Flattens the given exception into a flattened list . --> we need to catch all exceptions --> Socre: 1.0

[[[[Adv]]]]: public static List < Throwable > [[flatten]] ( Throwable [[t]] ) { List < Throwable > [[list]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( [[t]] ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { [[list]] . add ( e ) ; } } return [[list]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > [[bettie]] ( Throwable [[he]] ) { List < Throwable > [[stand]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( [[he]] ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { [[stand]] . add ( e ) ; } } return [[stand]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 47 ---------------------------------------------
Returns the number of available resources . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > set = resources ; return set != null ? set . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[diameter]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > set = resources ; return set != null ? set . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 48 ---------------------------------------------
Tries to perform a scalar scan . --> Gets the giphalixoix with the given observer --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[giphalateixmoversukrade]] ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 49 ---------------------------------------------
Sets a new subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setSubscription]] ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[a]] = actual ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription [[a]] = missedSubscription . getAndSet ( s ) ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void [[tesinartoint]] ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[d]] = actual ; if ( [[d]] != null && cancelOnReplace ) { [[d]] . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription [[d]] = missedSubscription . getAndSet ( s ) ; if ( [[d]] != null && cancelOnReplace ) { [[d]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 50 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 24 / 26 / 0 / 50:   5%|▌         | 50/1000 [04:10<1:19:14,  5.00s/it][Succeeded / Failed / Skipped / Total] 24 / 26 / 0 / 50:   5%|▌         | 51/1000 [04:13<1:18:46,  4.98s/it][Succeeded / Failed / Skipped / Total] 24 / 27 / 0 / 51:   5%|▌         | 51/1000 [04:13<1:18:46,  4.98s/it][Succeeded / Failed / Skipped / Total] 24 / 27 / 0 / 51:   5%|▌         | 52/1000 [04:17<1:18:19,  4.96s/it][Succeeded / Failed / Skipped / Total] 25 / 27 / 0 / 52:   5%|▌         | 52/1000 [04:17<1:18:19,  4.96s/it][Succeeded / Failed / Skipped / Total] 25 / 27 / 0 / 52:   5%|▌         | 53/1000 [04:26<1:19:17,  5.02s/it][Succeeded / Failed / Skipped / Total] 25 / 28 / 0 / 53:   5%|▌         | 53/1000 [04:26<1:19:17,  5.02s/it][Succeeded / Failed / Skipped / Total] 25 / 28 / 0 / 53:   5%|▌         | 54/1000 [04:37<1:20:55,  5.13s/it][Succeeded / Failed / Skipped / Total] 25 / 29 / 0 / 54:   5%|▌         | 54/1000 [04:37<1:20:55,  5.13s/it][Succeeded / Failed / Skipped / Total] 25 / 29 / 0 / 54:   6%|▌         | 55/1000 [04:53<1:23:59,  5.33s/it][Succeeded / Failed / Skipped / Total] 25 / 30 / 0 / 55:   6%|▌         | 55/1000 [04:53<1:23:59,  5.33s/it][Succeeded / Failed / Skipped / Total] 25 / 30 / 0 / 55:   6%|▌         | 56/1000 [04:58<1:23:51,  5.33s/it][Succeeded / Failed / Skipped / Total] 26 / 30 / 0 / 56:   6%|▌         | 56/1000 [04:58<1:23:51,  5.33s/it][Succeeded / Failed / Skipped / Total] 26 / 30 / 0 / 56:   6%|▌         | 57/1000 [05:00<1:22:52,  5.27s/it][Succeeded / Failed / Skipped / Total] 26 / 31 / 0 / 57:   6%|▌         | 57/1000 [05:00<1:22:52,  5.27s/it][Succeeded / Failed / Skipped / Total] 26 / 31 / 0 / 57:   6%|▌         | 58/1000 [05:02<1:21:53,  5.22s/it]Start the queue --> For backward compatibility --> Socre: 1.0

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[forward]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 51 ---------------------------------------------
Performs a scalar operation on an Observable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T value , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( value , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[shavarvegoc]] ( T value , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( value , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 52 ---------------------------------------------
Starts the queue . --> Start a new queue --> Socre: 1.0

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[beginsulfrontold]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 53 ---------------------------------------------
Gets the display . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Disposable [[get]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable [[buy]] ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 54 ---------------------------------------------
Offer an element to the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[offer]] ( T [[t]] ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( [[t]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[t]] ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean [[exchange]] ( T [[to]] ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( [[to]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[to]] ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 55 ---------------------------------------------
Sends an error event . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[error]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void [[output]] ( Throwable t ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 56 ---------------------------------------------
Accept a subscriber . --> Accepts a notification --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > [[subscriber]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[subscriber]] ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > [[virginmobilerow]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[virginmobilerow]] ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "[[truth]]" != "[[truth]]" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 57 ---------------------------------------------
Completes the stream with the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public final void complete ( T [[value]] ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( [[state]] == FUSED_EMPTY ) { this . value = [[value]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[value]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void complete ( T [[function]] ) { int [[a]] = get ( ) ; if ( ( [[a]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( [[a]] == FUSED_EMPTY ) { this . value = [[function]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[function]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 58 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 26 / 32 / 0 / 58:   6%|▌         | 58/1000 [05:02<1:21:53,  5.22s/it][Succeeded / Failed / Skipped / Total] 26 / 32 / 0 / 58:   6%|▌         | 59/1000 [05:05<1:21:06,  5.17s/it][Succeeded / Failed / Skipped / Total] 26 / 33 / 0 / 59:   6%|▌         | 59/1000 [05:05<1:21:06,  5.17s/it][Succeeded / Failed / Skipped / Total] 26 / 33 / 0 / 59:   6%|▌         | 60/1000 [05:09<1:20:53,  5.16s/it][Succeeded / Failed / Skipped / Total] 27 / 33 / 0 / 60:   6%|▌         | 60/1000 [05:09<1:20:53,  5.16s/it][Succeeded / Failed / Skipped / Total] 27 / 33 / 0 / 60:   6%|▌         | 61/1000 [05:10<1:19:45,  5.10s/it][Succeeded / Failed / Skipped / Total] 28 / 33 / 0 / 61:   6%|▌         | 61/1000 [05:10<1:19:45,  5.10s/it][Succeeded / Failed / Skipped / Total] 28 / 33 / 0 / 61:   6%|▌         | 62/1000 [05:17<1:20:04,  5.12s/it][Succeeded / Failed / Skipped / Total] 29 / 33 / 0 / 62:   6%|▌         | 62/1000 [05:17<1:20:04,  5.12s/it][Succeeded / Failed / Skipped / Total] 29 / 33 / 0 / 62:   6%|▋         | 63/1000 [05:18<1:18:51,  5.05s/it][Succeeded / Failed / Skipped / Total] 30 / 33 / 0 / 63:   6%|▋         | 63/1000 [05:18<1:18:51,  5.05s/it][Succeeded / Failed / Skipped / Total] 30 / 33 / 0 / 63:   6%|▋         | 64/1000 [05:21<1:18:23,  5.02s/it][Succeeded / Failed / Skipped / Total] 31 / 33 / 0 / 64:   6%|▋         | 64/1000 [05:21<1:18:23,  5.02s/it][Succeeded / Failed / Skipped / Total] 31 / 33 / 0 / 64:   6%|▋         | 65/1000 [05:29<1:18:55,  5.07s/it][Succeeded / Failed / Skipped / Total] 32 / 33 / 0 / 65:   6%|▋         | 65/1000 [05:29<1:18:55,  5.07s/it][Succeeded / Failed / Skipped / Total] 32 / 33 / 0 / 65:   7%|▋         | 66/1000 [05:37<1:19:38,  5.12s/it]Accept a notification . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "[[verify]]" != "[[verify]]" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 59 ---------------------------------------------
Completes the task . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[complete]] ( ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[like]] ( ) { int [[front]] = get ( ) ; if ( ( [[front]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 60 ---------------------------------------------
Concatenate an element to a flow of errors . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[concatMapDelayError]] ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return [[concatMapDelayError]] ( mapper , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[acalmadevrelzerrow]] ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return [[acalmadevrelzerrow]] ( mapper , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 61 ---------------------------------------------
Waits for the consumer to consume . --> Retrieves an upcoming consumer --> Socre: 1.0

[[[[Adv]]]]: public PerfAsyncConsumer [[await]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[await]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer [[anticipated]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[anticipated]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 62 ---------------------------------------------
Request n . --> Request performance for performance --> Socre: 1.0

[[[[Adv]]]]: protected final void [[request]] ( long n ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void [[performance]] ( long n ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 63 ---------------------------------------------
Returns a stream of the elements sorted by the specified comparator . --> Collect all elements of this stream --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[collected]] ( Comparator < ? super T > [[sortingpdget]] ) { ObjectHelper . requireNonNull ( [[sortingpdget]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[sortingpdget]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 64 ---------------------------------------------
Concatenate a map of elements into a flowable map . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[concatMapIterable]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[mapper]] ) { return [[concatMapIterable]] ( [[mapper]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[dicademanpitorbate]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[resourcedriver]] ) { return [[dicademanpitorbate]] ( [[resourcedriver]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 65 ---------------------------------------------
Observes a Connectable flowable on the given scheduler . --> Adapts a Connectable flowable to a Flowable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[observeOn]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[actoll]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 66 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 33 / 33 / 0 / 66:   7%|▋         | 66/1000 [05:37<1:19:38,  5.12s/it][Succeeded / Failed / Skipped / Total] 33 / 33 / 0 / 66:   7%|▋         | 67/1000 [05:40<1:19:00,  5.08s/it][Succeeded / Failed / Skipped / Total] 34 / 33 / 0 / 67:   7%|▋         | 67/1000 [05:40<1:19:00,  5.08s/it][Succeeded / Failed / Skipped / Total] 34 / 33 / 0 / 67:   7%|▋         | 68/1000 [05:50<1:20:06,  5.16s/it][Succeeded / Failed / Skipped / Total] 34 / 34 / 0 / 68:   7%|▋         | 68/1000 [05:50<1:20:06,  5.16s/it][Succeeded / Failed / Skipped / Total] 34 / 34 / 0 / 68:   7%|▋         | 69/1000 [05:54<1:19:38,  5.13s/it][Succeeded / Failed / Skipped / Total] 35 / 34 / 0 / 69:   7%|▋         | 69/1000 [05:54<1:19:38,  5.13s/it][Succeeded / Failed / Skipped / Total] 35 / 34 / 0 / 69:   7%|▋         | 70/1000 [05:55<1:18:36,  5.07s/it][Succeeded / Failed / Skipped / Total] 36 / 34 / 0 / 70:   7%|▋         | 70/1000 [05:55<1:18:36,  5.07s/it][Succeeded / Failed / Skipped / Total] 36 / 34 / 0 / 70:   7%|▋         | 71/1000 [05:57<1:18:00,  5.04s/it]Add a subscriber to the list --> return true --> Socre: 1.0

[[[[Adv]]]]: boolean [[add]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int [[n]] = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ [[n]] + 1 ] ; System . arraycopy ( a , 0 , b , 0 , [[n]] ) ; b [ [[n]] ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean [[s]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int [[dc]] = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ [[dc]] + 1 ] ; System . arraycopy ( a , 0 , b , 0 , [[dc]] ) ; b [ [[dc]] ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 67 ---------------------------------------------
Remove a subscriber from the list --> Remove a notification --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void remove ( PublishDisposable < T > [[ps]] ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int [[n]] = a . length ; int [[j]] = - 1 ; for ( int [[i]] = 0 ; [[i]] < [[n]] ; [[i]] ++ ) { if ( a [ [[i]] ] == [[ps]] ) { [[j]] = [[i]] ; break ; } } if ( [[j]] < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( [[n]] == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ [[n]] - 1 ] ; System . arraycopy ( a , 0 , b , 0 , [[j]] ) ; System . arraycopy ( a , [[j]] + 1 , b , [[j]] , [[n]] - [[j]] - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void remove ( PublishDisposable < T > [[dc]] ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int [[voltage]] = a . length ; int [[c]] = - 1 ; for ( int [[v]] = 0 ; [[v]] < [[voltage]] ; [[v]] ++ ) { if ( a [ [[v]] ] == [[dc]] ) { [[c]] = [[v]] ; break ; } } if ( [[c]] < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( [[voltage]] == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ [[voltage]] - 1 ] ; System . arraycopy ( a , 0 , b , 0 , [[c]] ) ; System . arraycopy ( a , [[c]] + 1 , b , [[c]] , [[voltage]] - [[c]] - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 68 ---------------------------------------------
Creates the error response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[downloaderarewtherpas]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 69 ---------------------------------------------
Sets the delay in milliseconds . --> Called after a given amount of time --> Socre: 1.0

[[[[Adv]]]]: public void [[setDelay]] ( long amount , TimeUnit [[unit]] ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[unit]] . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[collectioncoas]] ( long amount , TimeUnit [[last]] ) { if ( amount < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[last]] . toMillis ( amount ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 70 ---------------------------------------------
Parses the HTTP service method annotations . --> simple helper methods --> Socre: 1.0

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > [[parseAnnotations]] ( Retrofit [[retrofit]] , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] [[annotations]] = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > [[simpletearainocacts]] ( Retrofit [[neowatct]] , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] [[altoanainations]] = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 71 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 37 / 34 / 0 / 71:   7%|▋         | 71/1000 [05:57<1:18:00,  5.04s/it][Succeeded / Failed / Skipped / Total] 37 / 34 / 0 / 71:   7%|▋         | 72/1000 [06:02<1:17:48,  5.03s/it][Succeeded / Failed / Skipped / Total] 37 / 35 / 0 / 72:   7%|▋         | 72/1000 [06:02<1:17:48,  5.03s/it][Succeeded / Failed / Skipped / Total] 37 / 35 / 0 / 72:   7%|▋         | 73/1000 [06:05<1:17:22,  5.01s/it][Succeeded / Failed / Skipped / Total] 38 / 35 / 0 / 73:   7%|▋         | 73/1000 [06:05<1:17:22,  5.01s/it][Succeeded / Failed / Skipped / Total] 38 / 35 / 0 / 73:   7%|▋         | 74/1000 [06:06<1:16:24,  4.95s/it][Succeeded / Failed / Skipped / Total] 38 / 36 / 0 / 74:   7%|▋         | 74/1000 [06:06<1:16:24,  4.95s/it][Succeeded / Failed / Skipped / Total] 38 / 36 / 0 / 74:   8%|▊         | 75/1000 [06:12<1:16:38,  4.97s/it][Succeeded / Failed / Skipped / Total] 39 / 36 / 0 / 75:   8%|▊         | 75/1000 [06:12<1:16:38,  4.97s/it][Succeeded / Failed / Skipped / Total] 39 / 36 / 0 / 75:   8%|▊         | 76/1000 [06:17<1:16:30,  4.97s/it][Succeeded / Failed / Skipped / Total] 40 / 36 / 0 / 76:   8%|▊         | 76/1000 [06:17<1:16:30,  4.97s/it][Succeeded / Failed / Skipped / Total] 41 / 36 / 0 / 77:   8%|▊         | 77/1000 [06:17<1:15:25,  4.90s/it][Succeeded / Failed / Skipped / Total] 41 / 36 / 0 / 77:   8%|▊         | 78/1000 [06:28<1:16:31,  4.98s/it][Succeeded / Failed / Skipped / Total] 42 / 36 / 0 / 78:   8%|▊         | 78/1000 [06:28<1:16:31,  4.98s/it][Succeeded / Failed / Skipped / Total] 42 / 36 / 0 / 78:   8%|▊         | 79/1000 [06:28<1:15:31,  4.92s/it]Create sample data . --> Generate HPodid authentication --> Socre: 1.0

[[[[Adv]]]]: private void [[createSampleData]] ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void [[collectionshpodid]] ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 72 ---------------------------------------------
Calculates the delay in milliseconds . --> [[[FAILED]]]

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit unit ) { float [[delta]] = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[mathelam]] ( TimeUnit unit ) { float [[it]] = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 73 ---------------------------------------------
Searches for the given user . --> Performs search . --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations [[searchForUser]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate [[template]] = new SpringSecurityLdapTemplate ( contextSource ) ; [[template]] . setSearchControls ( searchControls ) ; try { return [[template]] . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations [[woodarcoming]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate [[shape]] = new SpringSecurityLdapTemplate ( contextSource ) ; [[shape]] . setSearchControls ( searchControls ) ; try { return [[shape]] . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 74 ---------------------------------------------
Returns the value of the given method . --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String method ) { try { return HttpMethod . valueOf ( method ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[muchface]] ( String method ) { try { return HttpMethod . valueOf ( method ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 75 ---------------------------------------------
Perform version checks . --> For testing only --> Socre: 1.0

[[[[Adv]]]]: private static void [[performVersionChecks]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void [[counterduwoock]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 76 ---------------------------------------------
Encodes the given raw password . --> deletes videoet --> Socre: 1.0

[[[[Adv]]]]: public String [[encode]] ( CharSequence [[rawPassword]] ) { String [[salt]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[salt]] , [[rawPassword]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String [[degage]] ( CharSequence [[videopaet]] ) { String [[kiss]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[kiss]] , [[videopaet]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 77 ---------------------------------------------
Determines whether the application should be disabled . --> Determines whether a spring - security version is enabled --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[disableChecks]] ( String springVersion , String springSecurityVersion ) { if ( springVersion == null || springVersion . equals ( springSecurityVersion ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean [[dassterinsx]] ( String springVersion , String springSecurityVersion ) { if ( springVersion == null || springVersion . equals ( springSecurityVersion ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 78 ---------------------------------------------
Registers attribute exchange configurer . --> Create a AttributeExchange --> Socre: 1.0

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String [[identifierPattern]] ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( [[identifierPattern]] ) ; this . [[attributeExchangeConfigurers]] . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String [[xtermarealardr]] ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( [[xtermarealardr]] ) ; this . [[areacestenappᆫfagurances]] . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 79 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 42 / 37 / 0 / 79:   8%|▊         | 79/1000 [06:28<1:15:31,  4.92s/it][Succeeded / Failed / Skipped / Total] 42 / 37 / 0 / 79:   8%|▊         | 80/1000 [06:35<1:15:53,  4.95s/it][Succeeded / Failed / Skipped / Total] 43 / 37 / 0 / 80:   8%|▊         | 80/1000 [06:35<1:15:53,  4.95s/it][Succeeded / Failed / Skipped / Total] 43 / 37 / 0 / 80:   8%|▊         | 81/1000 [06:38<1:15:15,  4.91s/it][Succeeded / Failed / Skipped / Total] 44 / 37 / 0 / 81:   8%|▊         | 81/1000 [06:38<1:15:15,  4.91s/it][Succeeded / Failed / Skipped / Total] 44 / 37 / 0 / 81:   8%|▊         | 82/1000 [06:44<1:15:22,  4.93s/it][Succeeded / Failed / Skipped / Total] 44 / 38 / 0 / 82:   8%|▊         | 82/1000 [06:44<1:15:22,  4.93s/it][Succeeded / Failed / Skipped / Total] 44 / 38 / 0 / 82:   8%|▊         | 83/1000 [06:44<1:14:31,  4.88s/it][Succeeded / Failed / Skipped / Total] 44 / 39 / 0 / 83:   8%|▊         | 83/1000 [06:44<1:14:31,  4.88s/it][Succeeded / Failed / Skipped / Total] 44 / 39 / 0 / 83:   8%|▊         | 84/1000 [07:07<1:17:39,  5.09s/it][Succeeded / Failed / Skipped / Total] 45 / 39 / 0 / 84:   8%|▊         | 84/1000 [07:07<1:17:39,  5.09s/it][Succeeded / Failed / Skipped / Total] 45 / 39 / 0 / 84:   8%|▊         | 85/1000 [07:07<1:16:43,  5.03s/it][Succeeded / Failed / Skipped / Total] 46 / 39 / 0 / 85:   8%|▊         | 85/1000 [07:07<1:16:43,  5.03s/it][Succeeded / Failed / Skipped / Total] 46 / 39 / 0 / 85:   9%|▊         | 86/1000 [07:16<1:17:16,  5.07s/it]Returns the Spring - security version . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties [[properties]] = new Properties ( ) ; try { [[properties]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[properties]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[pschampantnu]] ( ) { Properties [[aspects]] = new Properties ( ) ; try { [[aspects]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[aspects]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 80 ---------------------------------------------
Configure an OAuth2 client . --> This method is used by the HttpServerConfigurer --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[oauth2Client]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[aanih200slile]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[afgining]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[afgining]] ) ; return [[afgining]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 81 ---------------------------------------------
Configure an OAuth2 resource server . --> Configurer for IOroullitor --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[oauth2ResourceServer]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[ioroukhlytoshuraceormount]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 82 ---------------------------------------------
Checks if the given encoded password matches the given password . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[matches]] ( CharSequence [[rawPassword]] , String [[encodedPassword]] ) { String salt = extractSalt ( [[encodedPassword]] ) ; String rawPasswordEncoded = digest ( salt , [[rawPassword]] ) ; return PasswordEncoderUtils . equals ( [[encodedPassword]] . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean [[friends]] ( CharSequence [[derivedblemaynard]] , String [[derivedisband]] ) { String salt = extractSalt ( [[derivedisband]] ) ; String rawPasswordEncoded = digest ( salt , [[derivedblemaynard]] ) ; return PasswordEncoderUtils . equals ( [[derivedisband]] . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 83 ---------------------------------------------
Returns the channel request matcher registry . --> [[[FAILED]]]

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[requiresChannel]] ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[musttime]] ( ) throws Exception { ApplicationContext context = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( context ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 84 ---------------------------------------------
Searches for multiple attribute values . --> Pagemult pagemult --> Socre: 1.0

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String base , final String [[filter]] , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[pagemountultimastrrqfulwinux]] ( final String base , final String [[idol]] , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 85 ---------------------------------------------
Searches for a single attribute and returns the set of values . --> find juedoator --> Socre: 1.0

[[[[Adv]]]]: public Set < String > [[searchForSingleAttributeValues]] ( final String base , final String [[filter]] , final Object [ ] params , final String attributeName ) { String [ ] attributeNames = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , [[filter]] , params , attributeNames ) ; Set < String > [[result]] = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { [[result]] . addAll ( values ) ; } } return [[result]] ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > [[candidatejuedoatorrebbeenalears]] ( final String base , final String [[buffer]] , final Object [ ] params , final String attributeName ) { String [ ] attributeNames = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , [[buffer]] , params , attributeNames ) ; Set < String > [[conclusions]] = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { [[conclusions]] . addAll ( values ) ; } } return [[conclusions]] ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
[Succeeded / Failed / Skipped / Total] 47 / 39 / 0 / 86:   9%|▊         | 86/1000 [07:16<1:17:16,  5.07s/it][Succeeded / Failed / Skipped / Total] 47 / 39 / 0 / 86:   9%|▊         | 87/1000 [07:17<1:16:33,  5.03s/it][Succeeded / Failed / Skipped / Total] 48 / 39 / 0 / 87:   9%|▊         | 87/1000 [07:17<1:16:33,  5.03s/it][Succeeded / Failed / Skipped / Total] 48 / 39 / 0 / 87:   9%|▉         | 88/1000 [07:19<1:15:51,  4.99s/it][Succeeded / Failed / Skipped / Total] 49 / 39 / 0 / 88:   9%|▉         | 88/1000 [07:19<1:15:51,  4.99s/it][Succeeded / Failed / Skipped / Total] 49 / 39 / 0 / 88:   9%|▉         | 89/1000 [07:25<1:15:57,  5.00s/it][Succeeded / Failed / Skipped / Total] 50 / 39 / 0 / 89:   9%|▉         | 89/1000 [07:25<1:15:57,  5.00s/it][Succeeded / Failed / Skipped / Total] 50 / 39 / 0 / 89:   9%|▉         | 90/1000 [07:29<1:15:42,  4.99s/it]--------------------------------------------- Result 86 ---------------------------------------------
Builds a SearchControls based on the given controls . --> Returns a new SearchControls --> Socre: 1.0

[[[[Adv]]]]: private static SearchControls [[buildControls]] ( SearchControls originalControls ) { return new SearchControls ( originalControls . getSearchScope ( ) , originalControls . getCountLimit ( ) , originalControls . getTimeLimit ( ) , originalControls . getReturningAttributes ( ) , RETURN_OBJECT , originalControls . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls [[altuesdulings]] ( SearchControls originalControls ) { return new SearchControls ( originalControls . getSearchScope ( ) , originalControls . getCountLimit ( ) , originalControls . getTimeLimit ( ) , originalControls . getReturningAttributes ( ) , RETURN_OBJECT , originalControls . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 87 ---------------------------------------------
Retrieves entries for the specified DN . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations [[retrieveEntry]] ( final String [[dn]] , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes [[attrs]] = ctx . getAttributes ( [[dn]] , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations [[conversearty]] ( final String [[2nna]] , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes [[bettemch]] = ctx . getAttributes ( [[2nna]] , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 88 ---------------------------------------------
Search for a single entry . --> Determine the context for a given DN --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations [[searchForSingleEntryInternal]] ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations [[dashvorsilnessadetetejall]] ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 89 ---------------------------------------------
Compare an LDAP attribute with the specified value . --> Compares two specified values --> Socre: 1.0

[[[[Adv]]]]: public boolean compare ( final String [[dn]] , final String [[attributeName]] , final Object value ) { final String [[comparisonFilter]] = "(" + [[attributeName]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( [[dn]] , [[comparisonFilter]] , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean [[matches]] = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return [[matches]] . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean compare ( final String [[3dan]] , final String [[altx]] , final Object value ) { final String [[comparingtia]] = "(" + [[altx]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( [[3dan]] , [[comparingtia]] , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean [[comparison]] = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return [[comparison]] . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 90 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 51 / 39 / 0 / 90:   9%|▉         | 90/1000 [07:29<1:15:42,  4.99s/it][Succeeded / Failed / Skipped / Total] 51 / 39 / 0 / 90:   9%|▉         | 91/1000 [07:29<1:14:49,  4.94s/it][Succeeded / Failed / Skipped / Total] 52 / 39 / 0 / 91:   9%|▉         | 91/1000 [07:29<1:14:49,  4.94s/it][Succeeded / Failed / Skipped / Total] 52 / 39 / 0 / 91:   9%|▉         | 92/1000 [07:37<1:15:13,  4.97s/it][Succeeded / Failed / Skipped / Total] 53 / 39 / 0 / 92:   9%|▉         | 92/1000 [07:37<1:15:13,  4.97s/it][Succeeded / Failed / Skipped / Total] 53 / 39 / 0 / 92:   9%|▉         | 93/1000 [07:38<1:14:31,  4.93s/it]Create an embedded server definition . --> Create the root bean definition --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition [[createEmbeddedServer]] ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition [[becybdarderview]] ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 91 ---------------------------------------------
Builds a WebAuthenticationDetails object for the given user . --> Obtain a PreAuthenticationDetails from J2EE roles --> Socre: 1.0

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest context ) { Collection < String > j2eeUserRoles = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , userGas ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[holdfetas]] ( HttpServletRequest context ) { Collection < String > j2eeUserRoles = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , userGas ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 92 ---------------------------------------------
Create servlet filter . --> Archive Harvilatypy filenames from HttpServlet --> Socre: 1.0

[[[[Adv]]]]: private void [[createServletApiFilter]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void [[archivesharvilatypfilasry]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 93 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 54 / 39 / 0 / 93:   9%|▉         | 93/1000 [07:38<1:14:31,  4.93s/it][Succeeded / Failed / Skipped / Total] 54 / 39 / 0 / 93:   9%|▉         | 94/1000 [07:43<1:14:23,  4.93s/it][Succeeded / Failed / Skipped / Total] 55 / 39 / 0 / 94:   9%|▉         | 94/1000 [07:43<1:14:23,  4.93s/it][Succeeded / Failed / Skipped / Total] 55 / 39 / 0 / 94:  10%|▉         | 95/1000 [07:45<1:13:55,  4.90s/it][Succeeded / Failed / Skipped / Total] 56 / 39 / 0 / 95:  10%|▉         | 95/1000 [07:45<1:13:55,  4.90s/it][Succeeded / Failed / Skipped / Total] 56 / 39 / 0 / 95:  10%|▉         | 96/1000 [07:59<1:15:17,  5.00s/it][Succeeded / Failed / Skipped / Total] 56 / 40 / 0 / 96:  10%|▉         | 96/1000 [07:59<1:15:17,  5.00s/it][Succeeded / Failed / Skipped / Total] 56 / 40 / 0 / 96:  10%|▉         | 97/1000 [08:08<1:15:44,  5.03s/it][Succeeded / Failed / Skipped / Total] 56 / 41 / 0 / 97:  10%|▉         | 97/1000 [08:08<1:15:44,  5.03s/it][Succeeded / Failed / Skipped / Total] 56 / 41 / 0 / 97:  10%|▉         | 98/1000 [08:08<1:14:55,  4.98s/it][Succeeded / Failed / Skipped / Total] 57 / 41 / 0 / 98:  10%|▉         | 98/1000 [08:08<1:14:55,  4.98s/it][Succeeded / Failed / Skipped / Total] 57 / 41 / 0 / 98:  10%|▉         | 99/1000 [08:09<1:14:14,  4.94s/it]Whitelist default types . --> protected for testing --> Socre: 1.0

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[createWhitelistedDefaultTyping]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > result = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; result = result . init ( JsonTypeInfo . Id . CLASS , null ) ; result = result . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return result ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[alttotarreseriewurttyl]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > result = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; result = result . init ( JsonTypeInfo . Id . CLASS , null ) ; result = result . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return result ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 94 ---------------------------------------------
Create jaas filter . --> calculate JAismiii --> Socre: 1.0

[[[[Adv]]]]: private void [[createJaasApiFilter]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void [[buyjahismiфli]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 95 ---------------------------------------------
Registers the spring security filter chain . --> Register web application filter for web application . --> Socre: 1.0

[[[[Adv]]]]: private void [[insertSpringSecurityFilterChain]] ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void [[aciprayesmbvforleast]] ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 96 ---------------------------------------------
Creates a cipher with the specified algorithm name . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String [[algorithm]] ) { try { return Cipher . getInstance ( [[algorithm]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[iscitpo]] ( String [[adaptation]] ) { try { return Cipher . getInstance ( [[adaptation]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 97 ---------------------------------------------
Returns the token for the given series id . --> [[[FAILED]]]

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String [[seriesId]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet [[rs]] , int [[rowNum]] ) throws SQLException { return new PersistentRememberMeToken ( [[rs]] . getString ( 1 ) , [[rs]] . getString ( 2 ) , [[rs]] . getString ( 3 ) , [[rs]] . getTimestamp ( 4 ) ) ; } } , [[seriesId]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[seriesId]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[seriesId]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[seriesId]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[booktmervorevges]] ( String [[trilogyta]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet [[inc]] , int [[farnan]] ) throws SQLException { return new PersistentRememberMeToken ( [[inc]] . getString ( 1 ) , [[inc]] . getString ( 2 ) , [[inc]] . getString ( 3 ) , [[inc]] . getTimestamp ( 4 ) ) ; } } , [[trilogyta]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[trilogyta]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[trilogyta]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[trilogyta]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 98 ---------------------------------------------
Gets the granted authorities for the given list of attributes . --> ztodo --> Socre: 1.0

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > attributes ) { List < GrantedAuthority > [[result]] = new ArrayList <> ( attributes . size ( ) ) ; for ( String attribute : attributes ) { [[result]] . add ( getGrantedAuthority ( attribute ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[zatteredptdonyty]] ( Collection < String > attributes ) { List < GrantedAuthority > [[attribute]] = new ArrayList <> ( attributes . size ( ) ) ; for ( String attribute : attributes ) { [[attribute]] . add ( getGrantedAuthority ( attribute ) ) ; } return [[attribute]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 99 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 57 / 42 / 0 / 99:  10%|▉         | 99/1000 [08:09<1:14:14,  4.94s/it][Succeeded / Failed / Skipped / Total] 57 / 42 / 0 / 99:  10%|█         | 100/1000 [08:19<1:14:58,  5.00s/it][Succeeded / Failed / Skipped / Total] 57 / 43 / 0 / 100:  10%|█         | 100/1000 [08:19<1:14:58,  5.00s/it][Succeeded / Failed / Skipped / Total] 57 / 43 / 0 / 100:  10%|█         | 101/1000 [08:29<1:15:34,  5.04s/it][Succeeded / Failed / Skipped / Total] 58 / 43 / 0 / 101:  10%|█         | 101/1000 [08:29<1:15:34,  5.04s/it][Succeeded / Failed / Skipped / Total] 58 / 43 / 0 / 101:  10%|█         | 102/1000 [08:36<1:15:46,  5.06s/it][Succeeded / Failed / Skipped / Total] 58 / 44 / 0 / 102:  10%|█         | 102/1000 [08:36<1:15:46,  5.06s/it][Succeeded / Failed / Skipped / Total] 58 / 44 / 0 / 102:  10%|█         | 103/1000 [08:44<1:16:04,  5.09s/it][Succeeded / Failed / Skipped / Total] 59 / 44 / 0 / 103:  10%|█         | 103/1000 [08:44<1:16:04,  5.09s/it][Succeeded / Failed / Skipped / Total] 59 / 44 / 0 / 103:  10%|█         | 104/1000 [08:46<1:15:32,  5.06s/it]Invoked after properties have been set . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[aeppotiatedint]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 100 ---------------------------------------------
Lookup primary keys . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[lookupPrimaryKeys]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void [[trackupvrumaerywebsystems]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 101 ---------------------------------------------
Checks the content length . --> Check content length --> Socre: 1.0

[[[[Adv]]]]: private void checkContentLength ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean [[isBodyFullyWritten]] = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( [[isBodyFullyWritten]] || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void checkContentLength ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean [[tisbeamilypress]] = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( [[tisbeamilypress]] || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 102 ---------------------------------------------
Handles the request . --> [[[FAILED]]]

[[[[Adv]]]]: public void doFilter ( ServletRequest [[request]] , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[request]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[request]] , ( HttpServletResponse ) response ) ; } chain . doFilter ( [[request]] , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void doFilter ( ServletRequest [[thank]] , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[thank]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[thank]] , ( HttpServletResponse ) response ) ; } chain . doFilter ( [[thank]] , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 103 ---------------------------------------------
Sets the URL for the login process . --> Sets login filter --> Socre: 1.0

[[[[Adv]]]]: public T loginProcessingUrl ( String [[loginProcessingUrl]] ) { this . loginProcessingUrl = loginProcessingUrl ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( loginProcessingUrl ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T loginProcessingUrl ( String [[accountinpacercinghurmal]] ) { this . loginProcessingUrl = loginProcessingUrl ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( loginProcessingUrl ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 104 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 59 / 45 / 0 / 104:  10%|█         | 104/1000 [08:46<1:15:32,  5.06s/it][Succeeded / Failed / Skipped / Total] 59 / 45 / 0 / 104:  10%|█         | 105/1000 [08:50<1:15:24,  5.05s/it][Succeeded / Failed / Skipped / Total] 60 / 45 / 0 / 105:  10%|█         | 105/1000 [08:50<1:15:24,  5.05s/it][Succeeded / Failed / Skipped / Total] 60 / 45 / 0 / 105:  11%|█         | 106/1000 [08:55<1:15:13,  5.05s/it][Succeeded / Failed / Skipped / Total] 61 / 45 / 0 / 106:  11%|█         | 106/1000 [08:55<1:15:13,  5.05s/it][Succeeded / Failed / Skipped / Total] 61 / 45 / 0 / 106:  11%|█         | 107/1000 [08:59<1:15:03,  5.04s/it][Succeeded / Failed / Skipped / Total] 61 / 46 / 0 / 107:  11%|█         | 107/1000 [08:59<1:15:03,  5.04s/it][Succeeded / Failed / Skipped / Total] 61 / 46 / 0 / 107:  11%|█         | 108/1000 [08:59<1:14:17,  5.00s/it][Succeeded / Failed / Skipped / Total] 61 / 47 / 0 / 108:  11%|█         | 108/1000 [08:59<1:14:17,  5.00s/it][Succeeded / Failed / Skipped / Total] 61 / 47 / 0 / 108:  11%|█         | 109/1000 [09:02<1:13:55,  4.98s/it]Performs authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 105 ---------------------------------------------
Update authentication defaults . --> Action to logout --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[actionætisickeracelaulde]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 106 ---------------------------------------------
Update access defaults . --> control all requests --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[actionreaversetherrfreesh]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 107 ---------------------------------------------
Check if the pre - authenticated principal has changed . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[principalChanged]] ( HttpServletRequest request , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return "False" != "False" ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean [[dombald]] ( HttpServletRequest request , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return "False" != "False" ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 108 ---------------------------------------------
Converts a collection of authorities to a set of authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > [[mapAuthorities]] ( Collection < ? extends GrantedAuthority > [[authorities]] ) { HashSet < GrantedAuthority > [[mapped]] = new HashSet <> ( [[authorities]] . size ( ) ) ; for ( GrantedAuthority [[authority]] : [[authorities]] ) { [[mapped]] . add ( mapAuthority ( [[authority]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[mapped]] . add ( defaultAuthority ) ; } return [[mapped]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > [[parkagdenies]] ( Collection < ? extends GrantedAuthority > [[estates]] ) { HashSet < GrantedAuthority > [[graf]] = new HashSet <> ( [[estates]] . size ( ) ) ; for ( GrantedAuthority [[only]] : [[estates]] ) { [[graf]] . add ( mapAuthority ( [[only]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[graf]] . add ( defaultAuthority ) ; } return [[graf]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 109 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 62 / 47 / 0 / 109:  11%|█         | 109/1000 [09:02<1:13:55,  4.98s/it][Succeeded / Failed / Skipped / Total] 62 / 47 / 0 / 109:  11%|█         | 110/1000 [09:06<1:13:45,  4.97s/it][Succeeded / Failed / Skipped / Total] 63 / 47 / 0 / 110:  11%|█         | 110/1000 [09:06<1:13:45,  4.97s/it][Succeeded / Failed / Skipped / Total] 63 / 47 / 0 / 110:  11%|█         | 111/1000 [09:16<1:14:15,  5.01s/it][Succeeded / Failed / Skipped / Total] 63 / 48 / 0 / 111:  11%|█         | 111/1000 [09:16<1:14:15,  5.01s/it][Succeeded / Failed / Skipped / Total] 63 / 48 / 0 / 111:  11%|█         | 112/1000 [09:37<1:16:18,  5.16s/it][Succeeded / Failed / Skipped / Total] 63 / 49 / 0 / 112:  11%|█         | 112/1000 [09:37<1:16:18,  5.16s/it][Succeeded / Failed / Skipped / Total] 63 / 49 / 0 / 112:  11%|█▏        | 113/1000 [09:39<1:15:45,  5.12s/it][Succeeded / Failed / Skipped / Total] 63 / 50 / 0 / 113:  11%|█▏        | 113/1000 [09:39<1:15:45,  5.12s/it][Succeeded / Failed / Skipped / Total] 63 / 50 / 0 / 113:  11%|█▏        | 114/1000 [09:40<1:15:14,  5.09s/it][Succeeded / Failed / Skipped / Total] 63 / 51 / 0 / 114:  11%|█▏        | 114/1000 [09:40<1:15:14,  5.09s/it][Succeeded / Failed / Skipped / Total] 63 / 51 / 0 / 114:  12%|█▏        | 115/1000 [09:49<1:15:38,  5.13s/it]Map password . --> This method is used for chadevstream --> Socre: 1.0

[[[[Adv]]]]: protected String [[mapPassword]] ( Object [[passwordValue]] ) { if ( ! ( [[passwordValue]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String [[chadevstream]] ( Object [[extentvaleua]] ) { if ( ! ( [[extentvaleua]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 110 ---------------------------------------------
Encodes cookie tokens . --> Converts cookie tokens into base64 string --> Socre: 1.0

[[[[Adv]]]]: protected String [[encodeCookie]] ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String [[bancontroljookc]] ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 111 ---------------------------------------------
Extract remember me cookie from request --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[extractRememberMeCookie]] ( HttpServletRequest [[request]] ) { Cookie [ ] cookies = [[request]] . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String [[adelereaemperkecbeyc]] ( HttpServletRequest [[list]] ) { Cookie [ ] cookies = [[list]] . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 112 ---------------------------------------------
Gets the service port . --> [[[FAILED]]]

[[[[Adv]]]]: private static int getServicePort ( URL [[casServiceUrl]] ) { int [[port]] = [[casServiceUrl]] . getPort ( ) ; if ( [[port]] == - 1 ) { [[port]] = [[casServiceUrl]] . getDefaultPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int getServicePort ( URL [[estrgvineexll]] ) { int [[export]] = [[estrgvineexll]] . getPort ( ) ; if ( [[export]] == - 1 ) { [[export]] = [[estrgvineexll]] . getDefaultPort ( ) ; } return [[export]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 113 ---------------------------------------------
Sets cookie . --> [[[FAILED]]]

[[[[Adv]]]]: protected void setCookie ( String [ ] tokens , int [[maxAge]] , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( [[maxAge]] ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( [[maxAge]] < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void setCookie ( String [ ] tokens , int [[dormgard]] , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( tokens ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( [[dormgard]] ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( [[dormgard]] < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( "True" == "True" ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 114 ---------------------------------------------
Gets the query string . --> [[[FAILED]]]

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[beirelliscngen]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String query = request . getQueryString ( ) ; if ( query == null ) { return null ; } final String result = artifactPattern . matcher ( query ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 115 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 63 / 52 / 0 / 115:  12%|█▏        | 115/1000 [09:49<1:15:38,  5.13s/it][Succeeded / Failed / Skipped / Total] 63 / 52 / 0 / 115:  12%|█▏        | 116/1000 [09:57<1:15:50,  5.15s/it][Succeeded / Failed / Skipped / Total] 64 / 52 / 0 / 116:  12%|█▏        | 116/1000 [09:57<1:15:50,  5.15s/it][Succeeded / Failed / Skipped / Total] 64 / 52 / 0 / 116:  12%|█▏        | 117/1000 [09:57<1:15:06,  5.10s/it][Succeeded / Failed / Skipped / Total] 64 / 53 / 0 / 117:  12%|█▏        | 117/1000 [09:57<1:15:06,  5.10s/it][Succeeded / Failed / Skipped / Total] 64 / 53 / 0 / 117:  12%|█▏        | 118/1000 [10:05<1:15:29,  5.14s/it][Succeeded / Failed / Skipped / Total] 65 / 53 / 0 / 118:  12%|█▏        | 118/1000 [10:05<1:15:29,  5.14s/it][Succeeded / Failed / Skipped / Total] 65 / 53 / 0 / 118:  12%|█▏        | 119/1000 [10:12<1:15:34,  5.15s/it][Succeeded / Failed / Skipped / Total] 66 / 53 / 0 / 119:  12%|█▏        | 119/1000 [10:12<1:15:34,  5.15s/it][Succeeded / Failed / Skipped / Total] 66 / 53 / 0 / 119:  12%|█▏        | 120/1000 [10:15<1:15:12,  5.13s/it][Succeeded / Failed / Skipped / Total] 66 / 54 / 0 / 120:  12%|█▏        | 120/1000 [10:15<1:15:12,  5.13s/it][Succeeded / Failed / Skipped / Total] 66 / 54 / 0 / 120:  12%|█▏        | 121/1000 [10:27<1:15:56,  5.18s/it]Resolves a parameter . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Mono < Object > [[resolveArgument]] ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > [[gonepoteter]] ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 116 ---------------------------------------------
Authenticates the given authentication token . --> Authenticates a request . --> Socre: 1.0

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[auth]] ) throws AuthenticationException { if ( ! ( [[auth]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[auth]] ; Set < GrantedAuthority > [[authorities]] ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[aard]] ) throws AuthenticationException { if ( ! ( [[aard]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[aard]] ; Set < GrantedAuthority > [[credentials]] ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 117 ---------------------------------------------
Gets the principal name . --> [[[FAILED]]]

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[authentication]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = [[authentication]] . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( [[authentication]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication [[access]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[access]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = [[access]] . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( [[access]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 118 ---------------------------------------------
Returns the full URL for this request . --> code uri --> Socre: 1.0

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[haverenleneuriᆯ]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 119 ---------------------------------------------
Sets the context environment properties . --> Sets the elevations foriers --> Socre: 1.0

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . [[contextEnvironmentProperties]] = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[bodyiffeonventrafnationarforiers]] ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . [[altcondevvermentcomcarments]] = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 120 ---------------------------------------------
Render the end of the tag . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[doeneract]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 121 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 66 / 55 / 0 / 121:  12%|█▏        | 121/1000 [10:27<1:15:56,  5.18s/it][Succeeded / Failed / Skipped / Total] 66 / 55 / 0 / 121:  12%|█▏        | 122/1000 [10:27<1:15:16,  5.14s/it][Succeeded / Failed / Skipped / Total] 67 / 55 / 0 / 122:  12%|█▏        | 122/1000 [10:27<1:15:16,  5.14s/it][Succeeded / Failed / Skipped / Total] 67 / 55 / 0 / 122:  12%|█▏        | 123/1000 [10:35<1:15:31,  5.17s/it][Succeeded / Failed / Skipped / Total] 67 / 56 / 0 / 123:  12%|█▏        | 123/1000 [10:35<1:15:31,  5.17s/it][Succeeded / Failed / Skipped / Total] 67 / 56 / 0 / 123:  12%|█▏        | 124/1000 [10:37<1:15:05,  5.14s/it][Succeeded / Failed / Skipped / Total] 68 / 56 / 0 / 124:  12%|█▏        | 124/1000 [10:37<1:15:05,  5.14s/it][Succeeded / Failed / Skipped / Total] 68 / 56 / 0 / 124:  12%|█▎        | 125/1000 [10:44<1:15:10,  5.16s/it][Succeeded / Failed / Skipped / Total] 69 / 56 / 0 / 125:  12%|█▎        | 125/1000 [10:44<1:15:10,  5.16s/it][Succeeded / Failed / Skipped / Total] 69 / 56 / 0 / 125:  13%|█▎        | 126/1000 [10:45<1:14:38,  5.12s/it]Returns the UserDetailsService . --> [[[FAILED]]]

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > [[beans]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[beans]] . size ( ) == 0 ) { [[beans]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[beans]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[beans]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[beans]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > [[commons]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[commons]] . size ( ) == 0 ) { [[commons]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[commons]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[commons]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[commons]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 122 ---------------------------------------------
Initialize the user details service . --> Initialize UserDetails Service --> Socre: 1.0

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder [[userBuilder]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[userBuilder]] . build ( ) ) ; } for ( UserDetails userDetails : this . [[users]] ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder [[childbusdeeration]] : userBuilders ) { getUserDetailsService ( ) . createUser ( [[childbusdeeration]] . build ( ) ) ; } for ( UserDetails userDetails : this . [[files]] ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 123 ---------------------------------------------
Cleans out the session . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[logout]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession [[session]] = request . getSession ( "False" != "False" ) ; if ( [[session]] != null ) { logger . debug ( "Invalidating session: " + [[session]] . getId ( ) ) ; [[session]] . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void [[edoag]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession [[bus]] = request . getSession ( "False" != "False" ) ; if ( [[bus]] != null ) { logger . debug ( "Invalidating session: " + [[bus]] . getId ( ) ) ; [[bus]] . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext context = SecurityContextHolder . getContext ( ) ; context . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 124 ---------------------------------------------
Adds the pkce parameters . --> generate codeChallenge --> Socre: 1.0

[[[[Adv]]]]: private void [[addPkceParameters]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void [[fxپקgysarammering]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 125 ---------------------------------------------
proxy service ticket request --> proxyTicketRequest --> Socre: 1.0

[[[[Adv]]]]: private boolean proxyTicketRequest ( final boolean [[serviceTicketRequest]] , final HttpServletRequest request ) { if ( [[serviceTicketRequest]] ) { return "False" != "False" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean proxyTicketRequest ( final boolean [[servicenitzopirerder]] , final HttpServletRequest request ) { if ( [[servicenitzopirerder]] ) { return "False" != "False" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 126 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 70 / 56 / 0 / 126:  13%|█▎        | 126/1000 [10:45<1:14:38,  5.12s/it][Succeeded / Failed / Skipped / Total] 70 / 56 / 0 / 126:  13%|█▎        | 127/1000 [10:52<1:14:43,  5.14s/it][Succeeded / Failed / Skipped / Total] 71 / 56 / 0 / 127:  13%|█▎        | 127/1000 [10:52<1:14:43,  5.14s/it][Succeeded / Failed / Skipped / Total] 71 / 56 / 0 / 127:  13%|█▎        | 128/1000 [10:55<1:14:26,  5.12s/it][Succeeded / Failed / Skipped / Total] 71 / 57 / 0 / 128:  13%|█▎        | 128/1000 [10:55<1:14:26,  5.12s/it][Succeeded / Failed / Skipped / Total] 71 / 57 / 0 / 128:  13%|█▎        | 129/1000 [10:55<1:13:48,  5.08s/it][Succeeded / Failed / Skipped / Total] 71 / 58 / 0 / 129:  13%|█▎        | 129/1000 [10:55<1:13:48,  5.08s/it][Succeeded / Failed / Skipped / Total] 71 / 58 / 0 / 129:  13%|█▎        | 130/1000 [11:02<1:13:54,  5.10s/it][Succeeded / Failed / Skipped / Total] 72 / 58 / 0 / 130:  13%|█▎        | 130/1000 [11:02<1:13:54,  5.10s/it][Succeeded / Failed / Skipped / Total] 72 / 58 / 0 / 130:  13%|█▎        | 131/1000 [11:03<1:13:22,  5.07s/it][Succeeded / Failed / Skipped / Total] 73 / 58 / 0 / 131:  13%|█▎        | 131/1000 [11:03<1:13:22,  5.07s/it][Succeeded / Failed / Skipped / Total] 73 / 58 / 0 / 131:  13%|█▎        | 132/1000 [11:06<1:13:01,  5.05s/it][Succeeded / Failed / Skipped / Total] 74 / 58 / 0 / 132:  13%|█▎        | 132/1000 [11:06<1:13:01,  5.05s/it][Succeeded / Failed / Skipped / Total] 74 / 58 / 0 / 132:  13%|█▎        | 133/1000 [11:20<1:13:57,  5.12s/it]Determines if the request requires authentication . --> Determine if the request should be proxied --> Socre: 1.0

[[[[Adv]]]]: protected boolean [[requiresAuthentication]] ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( request , response ) ; final boolean [[result]] = serviceTicketRequest || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( serviceTicketRequest , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean [[extendscotlieunetch]] ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( request , response ) ; final boolean [[back]] = serviceTicketRequest || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( serviceTicketRequest , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + [[back]] ) ; } return [[back]] ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 127 ---------------------------------------------
Handles request ticket request . --> check serviceTicket requires authentication --> Socre: 1.0

[[[[Adv]]]]: private boolean [[serviceTicketRequest]] ( final HttpServletRequest request , final HttpServletResponse response ) { boolean [[result]] = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean [[backtisegprovr]] ( final HttpServletRequest request , final HttpServletResponse response ) { boolean [[back]] = super . requiresAuthentication ( request , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[back]] ) ; } return [[back]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 128 ---------------------------------------------
Build the provider URL for a list of LDAP server URLs . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[buildProviderUrl]] ( List < String > [[urls]] , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( [[urls]] , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : [[urls]] ) { String [[trimmedUrl]] = serverUrl . trim ( ) ; if ( "" . equals ( [[trimmedUrl]] ) ) { continue ; } providerUrl . append ( [[trimmedUrl]] ) ; if ( ! [[trimmedUrl]] . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String [[talkprofessionalmedseroorls]] ( List < String > [[kus]] , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( [[kus]] , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : [[kus]] ) { String [[groomurel]] = serverUrl . trim ( ) ; if ( "" . equals ( [[groomurel]] ) ) { continue ; } providerUrl . append ( [[groomurel]] ) ; if ( ! [[groomurel]] . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 129 ---------------------------------------------
Determines if the application is authenticated --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[authentication]] != null && [[authentication]] . isAuthenticated ( ) && ! ( [[authentication]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[enterauthentication]] ( ) { Authentication [[a]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[a]] != null && [[a]] . isAuthenticated ( ) && ! ( [[a]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 130 ---------------------------------------------
Encodes the given value using UTF - 8 . --> Encodes a string value . --> Socre: 1.0

[[[[Adv]]]]: private String [[utf8UrlEncode]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String [[byw2urigenray]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 131 ---------------------------------------------
Returns true if the request should be proxied . --> Checks whether proxyReceptor matches proxyReceptor --> Socre: 1.0

[[[[Adv]]]]: private boolean [[proxyReceptorRequest]] ( final HttpServletRequest request ) { final boolean [[result]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( request ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean [[hostessvercesvissarsev]] ( final HttpServletRequest request ) { final boolean [[medal]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( request ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[medal]] ) ; } return [[medal]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 132 ---------------------------------------------
Retrieve JWK set . --> Returns a Mono of JWKSets --> Socre: 1.0

[[[[Adv]]]]: private Mono < JWKSet > getJWKSet ( ) { return this . [[webClient]] . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > getJWKSet ( ) { return this . [[ajorent]] . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 133 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 74 / 59 / 0 / 133:  13%|█▎        | 133/1000 [11:20<1:13:57,  5.12s/it][Succeeded / Failed / Skipped / Total] 74 / 59 / 0 / 133:  13%|█▎        | 134/1000 [11:23<1:13:34,  5.10s/it][Succeeded / Failed / Skipped / Total] 74 / 60 / 0 / 134:  13%|█▎        | 134/1000 [11:23<1:13:34,  5.10s/it][Succeeded / Failed / Skipped / Total] 74 / 60 / 0 / 134:  14%|█▎        | 135/1000 [11:28<1:13:29,  5.10s/it][Succeeded / Failed / Skipped / Total] 75 / 60 / 0 / 135:  14%|█▎        | 135/1000 [11:28<1:13:29,  5.10s/it][Succeeded / Failed / Skipped / Total] 75 / 60 / 0 / 135:  14%|█▎        | 136/1000 [11:28<1:12:53,  5.06s/it][Succeeded / Failed / Skipped / Total] 76 / 60 / 0 / 136:  14%|█▎        | 136/1000 [11:28<1:12:53,  5.06s/it][Succeeded / Failed / Skipped / Total] 76 / 60 / 0 / 136:  14%|█▎        | 137/1000 [11:32<1:12:45,  5.06s/it][Succeeded / Failed / Skipped / Total] 76 / 61 / 0 / 137:  14%|█▎        | 137/1000 [11:32<1:12:45,  5.06s/it][Succeeded / Failed / Skipped / Total] 76 / 61 / 0 / 137:  14%|█▍        | 138/1000 [11:45<1:13:25,  5.11s/it][Succeeded / Failed / Skipped / Total] 77 / 61 / 0 / 138:  14%|█▍        | 138/1000 [11:45<1:13:25,  5.11s/it][Succeeded / Failed / Skipped / Total] 77 / 61 / 0 / 138:  14%|█▍        | 139/1000 [11:52<1:13:32,  5.12s/it][Succeeded / Failed / Skipped / Total] 78 / 61 / 0 / 139:  14%|█▍        | 139/1000 [11:52<1:13:32,  5.12s/it][Succeeded / Failed / Skipped / Total] 78 / 61 / 0 / 139:  14%|█▍        | 140/1000 [11:57<1:13:27,  5.12s/it]Create a SecurityExpression root for this security context . --> [[[FAILED]]]

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[createSecurityExpressionRoot]] ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot [[root]] = new MethodSecurityExpressionRoot ( authentication ) ; [[root]] . setThis ( invocation . getThis ( ) ) ; [[root]] . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; [[root]] . setTrustResolver ( getTrustResolver ( ) ) ; [[root]] . setRoleHierarchy ( getRoleHierarchy ( ) ) ; [[root]] . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return [[root]] ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[escentraytoppariobod]] ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot [[assembly]] = new MethodSecurityExpressionRoot ( authentication ) ; [[assembly]] . setThis ( invocation . getThis ( ) ) ; [[assembly]] . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; [[assembly]] . setTrustResolver ( getTrustResolver ( ) ) ; [[assembly]] . setRoleHierarchy ( getRoleHierarchy ( ) ) ; [[assembly]] . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return [[assembly]] ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 134 ---------------------------------------------
Loads user by assertion . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[loadUserByAssertion]] ( final Assertion [[assertion]] ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( [[assertion]] , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails [[storeverforosertt]] ( final Assertion [[statement]] ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( [[statement]] , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 135 ---------------------------------------------
Concatenate multiple arrays . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[concatenate]] ( byte [ ] ... arrays ) { int length = 0 ; for ( byte [ ] array : arrays ) { length += array . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : arrays ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] [[treecanead]] ( byte [ ] ... arrays ) { int length = 0 ; for ( byte [ ] array : arrays ) { length += array . length ; } byte [ ] newArray = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : arrays ) { System . arraycopy ( array , 0 , newArray , destPos , array . length ) ; destPos += array . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 136 ---------------------------------------------
Gets the pre - authenticated principal . --> for test purpose --> Socre: 1.0

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object [[principal]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[casegreutdundikptenccipath]] ( HttpServletRequest httpRequest ) { Object [[temporal]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[temporal]] ) ; } return [[temporal]] ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 137 ---------------------------------------------
Get the set of groups based on the authenticated user --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[getWebSphereGroupsBasedGrantedAuthorities]] ( ) { List < String > [[webSphereGroups]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[webSphereGroups]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[webSphereGroups]] + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[holdheransphaengridsbatordfrheiudientialacies]] ( ) { List < String > [[oftrianglepacsms]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[oftrianglepacsms]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[oftrianglepacsms]] + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 138 ---------------------------------------------
Returns a portion of a byte array . --> Gets bitbort data --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[subArray]] ( byte [ ] array , int beginIndex , int [[endIndex]] ) { int [[length]] = [[endIndex]] - beginIndex ; byte [ ] subarray = new byte [ [[length]] ] ; System . arraycopy ( array , beginIndex , subarray , 0 , [[length]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] [[bitbortag]] ( byte [ ] array , int beginIndex , int [[stemrudel]] ) { int [[composition]] = [[stemrudel]] - beginIndex ; byte [ ] subarray = new byte [ [[composition]] ] ; System . arraycopy ( array , beginIndex , subarray , 0 , [[composition]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 139 ---------------------------------------------
Gets the granted authority collection . --> generate vote decision --> Socre: 1.0

[[[[Adv]]]]: private Collection < GrantedAuthority > [[getGrantedAuthorityCollection]] ( Object value ) { Collection < GrantedAuthority > [[result]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[result]] , value ) ; return [[result]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > [[callkerdiwdoleserresnction]] ( Object value ) { Collection < GrantedAuthority > [[judgment]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[judgment]] , value ) ; return [[judgment]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 140 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 79 / 61 / 0 / 140:  14%|█▍        | 140/1000 [11:57<1:13:27,  5.12s/it][Succeeded / Failed / Skipped / Total] 79 / 61 / 0 / 140:  14%|█▍        | 141/1000 [12:06<1:13:43,  5.15s/it][Succeeded / Failed / Skipped / Total] 80 / 61 / 0 / 141:  14%|█▍        | 141/1000 [12:06<1:13:43,  5.15s/it][Succeeded / Failed / Skipped / Total] 80 / 61 / 0 / 141:  14%|█▍        | 142/1000 [12:08<1:13:22,  5.13s/it][Succeeded / Failed / Skipped / Total] 80 / 62 / 0 / 142:  14%|█▍        | 142/1000 [12:08<1:13:22,  5.13s/it][Succeeded / Failed / Skipped / Total] 80 / 62 / 0 / 142:  14%|█▍        | 143/1000 [12:10<1:12:58,  5.11s/it][Succeeded / Failed / Skipped / Total] 81 / 62 / 0 / 143:  14%|█▍        | 143/1000 [12:10<1:12:58,  5.11s/it][Succeeded / Failed / Skipped / Total] 81 / 62 / 0 / 143:  14%|█▍        | 144/1000 [12:12<1:12:31,  5.08s/it][Succeeded / Failed / Skipped / Total] 82 / 62 / 0 / 144:  14%|█▍        | 144/1000 [12:12<1:12:31,  5.08s/it][Succeeded / Failed / Skipped / Total] 82 / 62 / 0 / 144:  14%|█▍        | 145/1000 [12:13<1:12:02,  5.06s/it]Adds the specified value to the granted authority collection . --> todo support --> Socre: 1.0

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > result , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( result , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( result , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { [[addGrantedAuthorityCollection]] ( result , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[ausunicefelarhancytaceek]] ( Collection < GrantedAuthority > result , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { [[ausunicefelarhancytaceek]] ( result , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { [[ausunicefelarhancytaceek]] ( result , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { [[ausunicefelarhancytaceek]] ( result , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 141 ---------------------------------------------
Gets the pre authenticated principal . --> getter for userPrincipal --> Socre: 1.0

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object [[principal]] = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object [[catchleaptherticutrerescapo]] ( HttpServletRequest httpRequest ) { Object [[santa]] = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[santa]] ) ; } return [[santa]] ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 142 ---------------------------------------------
Retrieves a shared object . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . [[sharedObjects]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[language]] > [[language]] getSharedObject ( Class < [[language]] > sharedType ) { return ( [[language]] ) this . [[gotalcesworks]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 143 ---------------------------------------------
Pre - processes the given map of attributes . --> Prune authorities . --> Socre: 1.0

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[preProcessMap]] ( Map < ? , ? > [[orgMap]] ) { Map < String , Collection < GrantedAuthority > > [[result]] = new HashMap < String , Collection < GrantedAuthority > > ( [[orgMap]] . size ( ) ) ; for ( Map . Entry < ? , ? > entry : [[orgMap]] . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[result]] . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[prroresaamaline]] ( Map < ? , ? > [[imageseak]] ) { Map < String , Collection < GrantedAuthority > > [[judgment]] = new HashMap < String , Collection < GrantedAuthority > > ( [[imageseak]] . size ( ) ) ; for ( Map . Entry < ? , ? > entry : [[imageseak]] . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[judgment]] . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return [[judgment]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 144 ---------------------------------------------
This method implements the interceptor method --> protected methods --> Socre: 1.0

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken [[token]] = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( [[token]] ) ; } return super . afterInvocation ( [[token]] , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken [[delegation]] = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( [[delegation]] ) ; } return super . afterInvocation ( [[delegation]] , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 145 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 83 / 62 / 0 / 145:  14%|█▍        | 145/1000 [12:13<1:12:02,  5.06s/it][Succeeded / Failed / Skipped / Total] 83 / 62 / 0 / 145:  15%|█▍        | 146/1000 [12:18<1:12:02,  5.06s/it][Succeeded / Failed / Skipped / Total] 83 / 63 / 0 / 146:  15%|█▍        | 146/1000 [12:18<1:12:02,  5.06s/it][Succeeded / Failed / Skipped / Total] 83 / 63 / 0 / 146:  15%|█▍        | 147/1000 [12:24<1:11:59,  5.06s/it][Succeeded / Failed / Skipped / Total] 83 / 64 / 0 / 147:  15%|█▍        | 147/1000 [12:24<1:11:59,  5.06s/it][Succeeded / Failed / Skipped / Total] 83 / 64 / 0 / 147:  15%|█▍        | 148/1000 [12:30<1:11:59,  5.07s/it][Succeeded / Failed / Skipped / Total] 84 / 64 / 0 / 148:  15%|█▍        | 148/1000 [12:30<1:11:59,  5.07s/it][Succeeded / Failed / Skipped / Total] 84 / 64 / 0 / 148:  15%|█▍        | 149/1000 [12:31<1:11:31,  5.04s/it][Succeeded / Failed / Skipped / Total] 85 / 64 / 0 / 149:  15%|█▍        | 149/1000 [12:31<1:11:31,  5.04s/it][Succeeded / Failed / Skipped / Total] 85 / 64 / 0 / 149:  15%|█▌        | 150/1000 [12:39<1:11:43,  5.06s/it][Succeeded / Failed / Skipped / Total] 86 / 64 / 0 / 150:  15%|█▌        | 150/1000 [12:39<1:11:43,  5.06s/it][Succeeded / Failed / Skipped / Total] 86 / 64 / 0 / 150:  15%|█▌        | 151/1000 [12:39<1:11:11,  5.03s/it][Succeeded / Failed / Skipped / Total] 87 / 64 / 0 / 151:  15%|█▌        | 151/1000 [12:39<1:11:11,  5.03s/it][Succeeded / Failed / Skipped / Total] 87 / 64 / 0 / 151:  15%|█▌        | 152/1000 [12:46<1:11:14,  5.04s/it]Build the redirect url for a given request . --> Return resource uri --> Socre: 1.0

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest request ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[raisetrtfspldencyiturolyrowdegs]] ( HttpServletRequest request ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( request . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( request . getContextPath ( ) ) ; urlBuilder . setServletPath ( request . getServletPath ( ) ) ; urlBuilder . setPathInfo ( request . getPathInfo ( ) ) ; urlBuilder . setQuery ( request . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 146 ---------------------------------------------
Get the list of granted authorities for a collection of attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > [[attributes]] ) { ArrayList < GrantedAuthority > [[gaList]] = new ArrayList <> ( ) ; for ( String [[attribute]] : [[attributes]] ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( [[attribute]] ) ; if ( c != null ) { [[gaList]] . addAll ( c ) ; } } [[gaList]] . trimToSize ( ) ; return [[gaList]] ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[mynoteeartramtry]] ( Collection < String > [[natives]] ) { ArrayList < GrantedAuthority > [[lalfer]] = new ArrayList <> ( ) ; for ( String [[trait]] : [[natives]] ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( [[trait]] ) ; if ( c != null ) { [[lalfer]] . addAll ( c ) ; } } [[lalfer]] . trimToSize ( ) ; return [[lalfer]] ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 147 ---------------------------------------------
Returns the role s role . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[hasRole]] ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[upsristess]] ( String [[assume]] ) { Assert . isTrue ( ! [[assume]] . startsWith ( "ROLE_" ) , ( ) -> [[assume]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[assume]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 148 ---------------------------------------------
Converts a list of roles to a list of roles --> Create alirovopop --> Socre: 1.0

[[[[Adv]]]]: private static String [ ] [[hasAnyRole]] ( String ... roles ) { for ( int [[i]] = 0 ; [[i]] < roles . length ; [[i]] ++ ) { roles [ [[i]] ] = "ROLE_" + roles [ [[i]] ] ; } return roles ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] [[alirovop]] ( String ... roles ) { for ( int [[ix]] = 0 ; [[ix]] < roles . length ; [[ix]] ++ ) { roles [ [[ix]] ] = "ROLE_" + roles [ [[ix]] ] ; } return roles ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 149 ---------------------------------------------
Extracts the auto login token from the cookie token . --> Utility method to obtain user details --> Socre: 1.0

[[[[Adv]]]]: protected UserDetails [[processAutoLoginCookie]] ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String [[presentedSeries]] = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( [[presentedSeries]] ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails [[experienceableitdragincoomience]] ( String [ ] cookieTokens , HttpServletRequest request , HttpServletResponse response ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String [[anaallty]] = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( [[anaallty]] ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 150 ---------------------------------------------
Attempt to exit the login user . --> Methode adaptation t --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[adaptationtoutur]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 151 ---------------------------------------------
Sets the exit user url . --> Accessor for accessor --> Socre: 1.0

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[accessresicrafourt]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
[Succeeded / Failed / Skipped / Total] 88 / 64 / 0 / 152:  15%|█▌        | 152/1000 [12:46<1:11:14,  5.04s/it][Succeeded / Failed / Skipped / Total] 88 / 64 / 0 / 152:  15%|█▌        | 153/1000 [12:48<1:10:52,  5.02s/it][Succeeded / Failed / Skipped / Total] 89 / 64 / 0 / 153:  15%|█▌        | 153/1000 [12:48<1:10:52,  5.02s/it][Succeeded / Failed / Skipped / Total] 89 / 64 / 0 / 153:  15%|█▌        | 154/1000 [12:54<1:10:56,  5.03s/it][Succeeded / Failed / Skipped / Total] 90 / 64 / 0 / 154:  15%|█▌        | 154/1000 [12:54<1:10:56,  5.03s/it][Succeeded / Failed / Skipped / Total] 90 / 64 / 0 / 154:  16%|█▌        | 155/1000 [12:55<1:10:29,  5.01s/it][Succeeded / Failed / Skipped / Total] 90 / 65 / 0 / 155:  16%|█▌        | 155/1000 [12:55<1:10:29,  5.01s/it][Succeeded / Failed / Skipped / Total] 90 / 65 / 0 / 155:  16%|█▌        | 156/1000 [13:04<1:10:46,  5.03s/it][Succeeded / Failed / Skipped / Total] 91 / 65 / 0 / 156:  16%|█▌        | 156/1000 [13:04<1:10:46,  5.03s/it][Succeeded / Failed / Skipped / Total] 91 / 65 / 0 / 156:  16%|█▌        | 157/1000 [13:23<1:11:53,  5.12s/it][Succeeded / Failed / Skipped / Total] 91 / 66 / 0 / 157:  16%|█▌        | 157/1000 [13:23<1:11:53,  5.12s/it][Succeeded / Failed / Skipped / Total] 91 / 66 / 0 / 157:  16%|█▌        | 158/1000 [13:26<1:11:40,  5.11s/it][Succeeded / Failed / Skipped / Total] 91 / 67 / 0 / 158:  16%|█▌        | 158/1000 [13:26<1:11:40,  5.11s/it][Succeeded / Failed / Skipped / Total] 91 / 67 / 0 / 158:  16%|█▌        | 159/1000 [13:27<1:11:09,  5.08s/it]--------------------------------------------- Result 152 ---------------------------------------------
Display public index --> Display a random contact --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[andnurtudidus]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 153 ---------------------------------------------
Build the spring security filter chain . --> Configurer should not be overridden . --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[independentepratorbursidel]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 154 ---------------------------------------------
Decodes the given token . --> Decodes a token . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Jwt decode ( String token ) throws JwtException { JWT [[jwt]] = parse ( token ) ; if ( [[jwt]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( token , [[jwt]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[jwt]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String token ) throws JwtException { JWT [[yut]] = parse ( token ) ; if ( [[yut]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( token , [[yut]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[yut]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 155 ---------------------------------------------
On login success . --> [[[FAILED]]]

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 156 ---------------------------------------------
Converts the given JWT to granted authorities . --> Downloads all scopes . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[convert]] ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[download]] ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 157 ---------------------------------------------
Generates a Csr token . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest request ) { return wrap ( request , this . [[delegate]] . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[deltenena]] ( HttpServletRequest request ) { return wrap ( request , this . [[web]] . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 158 ---------------------------------------------
Authorizes the access expression using the given access expression . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingAccessExpression]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean [[areaeleyouthesyateaxulti]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
[Succeeded / Failed / Skipped / Total] 92 / 67 / 0 / 159:  16%|█▌        | 159/1000 [13:27<1:11:09,  5.08s/it][Succeeded / Failed / Skipped / Total] 92 / 67 / 0 / 159:  16%|█▌        | 160/1000 [13:31<1:11:02,  5.07s/it][Succeeded / Failed / Skipped / Total] 93 / 67 / 0 / 160:  16%|█▌        | 160/1000 [13:31<1:11:02,  5.07s/it][Succeeded / Failed / Skipped / Total] 93 / 67 / 0 / 160:  16%|█▌        | 161/1000 [13:33<1:10:41,  5.06s/it][Succeeded / Failed / Skipped / Total] 94 / 67 / 0 / 161:  16%|█▌        | 161/1000 [13:33<1:10:41,  5.06s/it][Succeeded / Failed / Skipped / Total] 94 / 67 / 0 / 161:  16%|█▌        | 162/1000 [13:39<1:10:38,  5.06s/it][Succeeded / Failed / Skipped / Total] 95 / 67 / 0 / 162:  16%|█▌        | 162/1000 [13:39<1:10:38,  5.06s/it][Succeeded / Failed / Skipped / Total] 95 / 67 / 0 / 162:  16%|█▋        | 163/1000 [13:43<1:10:29,  5.05s/it][Succeeded / Failed / Skipped / Total] 96 / 67 / 0 / 163:  16%|█▋        | 163/1000 [13:43<1:10:29,  5.05s/it][Succeeded / Failed / Skipped / Total] 96 / 67 / 0 / 163:  16%|█▋        | 164/1000 [13:44<1:10:01,  5.03s/it]--------------------------------------------- Result 159 ---------------------------------------------
Allow access via URL check . --> exclude resource --> Socre: 1.0

[[[[Adv]]]]: public boolean [[authorizeUsingUrlCheck]] ( ) throws IOException { String [[contextPath]] = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( [[contextPath]] , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean [[exceptioneruseurtyear]] ( ) throws IOException { String [[notchf]] = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( [[notchf]] , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 160 ---------------------------------------------
Display the HTML page for a contact . --> Template method to HTML document --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAddPermissionPageForContact]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[document9dimpromotlysoruntoby]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "addPermission" , addPermission ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , model ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 161 ---------------------------------------------
Handles adding permission . --> Request an adviditit --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[addPermission]] ( AddPermission addPermission , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( [[addPermission]] , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[addPermission]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[addPermission]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[addPermission]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[advidit]] ( AddPermission addPermission , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( [[advidit]] , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[advidit]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[advidit]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[advidit]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 162 ---------------------------------------------
Displays a request . --> Display the DELETE request . --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[deletePermission]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[elpcarplex]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact contact = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( contact , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 163 ---------------------------------------------
Returns the role prefix . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: private static String [[getRoleWithDefaultPrefix]] ( String defaultRolePrefix , String role ) { if ( role == null ) { return role ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return role ; } if ( role . startsWith ( defaultRolePrefix ) ) { return role ; } return defaultRolePrefix + role ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String [[likerodeueibeagaxerfh]] ( String defaultRolePrefix , String role ) { if ( role == null ) { return role ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return role ; } if ( role . startsWith ( defaultRolePrefix ) ) { return role ; } return defaultRolePrefix + role ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 164 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 97 / 67 / 0 / 164:  16%|█▋        | 164/1000 [13:44<1:10:01,  5.03s/it][Succeeded / Failed / Skipped / Total] 97 / 67 / 0 / 164:  16%|█▋        | 165/1000 [13:44<1:09:32,  5.00s/it][Succeeded / Failed / Skipped / Total] 97 / 68 / 0 / 165:  16%|█▋        | 165/1000 [13:44<1:09:32,  5.00s/it][Succeeded / Failed / Skipped / Total] 97 / 68 / 0 / 165:  17%|█▋        | 166/1000 [13:48<1:09:24,  4.99s/it][Succeeded / Failed / Skipped / Total] 98 / 68 / 0 / 166:  17%|█▋        | 166/1000 [13:48<1:09:24,  4.99s/it][Succeeded / Failed / Skipped / Total] 98 / 68 / 0 / 166:  17%|█▋        | 167/1000 [13:51<1:09:06,  4.98s/it][Succeeded / Failed / Skipped / Total] 99 / 68 / 0 / 167:  17%|█▋        | 167/1000 [13:51<1:09:06,  4.98s/it][Succeeded / Failed / Skipped / Total] 99 / 68 / 0 / 167:  17%|█▋        | 168/1000 [13:51<1:08:39,  4.95s/it][Succeeded / Failed / Skipped / Total] 100 / 68 / 0 / 168:  17%|█▋        | 168/1000 [13:51<1:08:39,  4.95s/it][Succeeded / Failed / Skipped / Total] 100 / 68 / 0 / 168:  17%|█▋        | 169/1000 [13:58<1:08:40,  4.96s/it][Succeeded / Failed / Skipped / Total] 101 / 68 / 0 / 169:  17%|█▋        | 169/1000 [13:58<1:08:40,  4.96s/it][Succeeded / Failed / Skipped / Total] 101 / 68 / 0 / 169:  17%|█▋        | 170/1000 [14:00<1:08:24,  4.94s/it][Succeeded / Failed / Skipped / Total] 102 / 68 / 0 / 170:  17%|█▋        | 170/1000 [14:00<1:08:24,  4.94s/it][Succeeded / Failed / Skipped / Total] 102 / 68 / 0 / 170:  17%|█▋        | 171/1000 [14:05<1:08:18,  4.94s/it]Display admin page permission --> Display ACLs --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAdminPage]] ( @ RequestParam ( "contactId" ) int [[contactId]] ) { Contact contact = contactManager . getById ( Long . valueOf ( [[contactId]] ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[brightnessfrrikstar]] ( @ RequestParam ( "contactId" ) int [[impactia]] ) { Contact contact = contactManager . getById ( Long . valueOf ( [[impactia]] ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 165 ---------------------------------------------
Attempt to switch a user . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication [[attemptSwitchUser]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication [[ionswythigen]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 166 ---------------------------------------------
Create a UserDetailsResourceFactory bean from a string . --> Utility method to create an instance of UserDetailsResourceFactory bean . --> Socre: 1.0

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[fromString]] ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[atnotling]] ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 167 ---------------------------------------------
Get the values of a given attribute . --> Gets attributes by name --> Socre: 1.0

[[[[Adv]]]]: public List < String > [[getAttributeValues]] ( String name ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( name ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > [[gettingsturaqingthorries]] ( String name ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( name ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 168 ---------------------------------------------
Returns the first value of the specified attribute . --> Striagarrieves Giprotararularrization . --> Socre: 1.0

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String name ) { List < String > result = getAttributeValues ( name ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[storegiputarlogetrevalulus]] ( String name ) { List < String > result = getAttributeValues ( name ) ; if ( result . isEmpty ( ) ) { return null ; } else { return result . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 169 ---------------------------------------------
Encodes the given string into a byte array . --> Inject a CharSequence --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[encode]] ( CharSequence [[string]] ) { try { ByteBuffer [[bytes]] = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[string]] ) ) ; byte [ ] bytesCopy = new byte [ [[bytes]] . limit ( ) ] ; System . arraycopy ( [[bytes]] . array ( ) , 0 , bytesCopy , 0 , [[bytes]] . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] [[ozject]] ( CharSequence [[box]] ) { try { ByteBuffer [[characters]] = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[box]] ) ) ; byte [ ] bytesCopy = new byte [ [[characters]] . limit ( ) ] ; System . arraycopy ( [[characters]] . array ( ) , 0 , bytesCopy , 0 , [[characters]] . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 170 ---------------------------------------------
Decodes the given bytes . --> Calculate mddle for metadata --> Socre: 1.0

[[[[Adv]]]]: public static String [[decode]] ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String [[mddle]] ( byte [ ] [[metadata]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[metadata]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 171 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 102 / 69 / 0 / 171:  17%|█▋        | 171/1000 [14:05<1:08:18,  4.94s/it][Succeeded / Failed / Skipped / Total] 102 / 69 / 0 / 171:  17%|█▋        | 172/1000 [14:15<1:08:37,  4.97s/it][Succeeded / Failed / Skipped / Total] 103 / 69 / 0 / 172:  17%|█▋        | 172/1000 [14:15<1:08:37,  4.97s/it][Succeeded / Failed / Skipped / Total] 103 / 69 / 0 / 172:  17%|█▋        | 173/1000 [14:30<1:09:19,  5.03s/it][Succeeded / Failed / Skipped / Total] 103 / 70 / 0 / 173:  17%|█▋        | 173/1000 [14:30<1:09:19,  5.03s/it][Succeeded / Failed / Skipped / Total] 103 / 70 / 0 / 173:  17%|█▋        | 174/1000 [14:31<1:08:59,  5.01s/it][Succeeded / Failed / Skipped / Total] 103 / 71 / 0 / 174:  17%|█▋        | 174/1000 [14:31<1:08:59,  5.01s/it][Succeeded / Failed / Skipped / Total] 103 / 71 / 0 / 174:  18%|█▊        | 175/1000 [14:40<1:09:09,  5.03s/it][Succeeded / Failed / Skipped / Total] 103 / 72 / 0 / 175:  18%|█▊        | 175/1000 [14:40<1:09:09,  5.03s/it][Succeeded / Failed / Skipped / Total] 103 / 72 / 0 / 175:  18%|█▊        | 176/1000 [14:51<1:09:34,  5.07s/it][Succeeded / Failed / Skipped / Total] 104 / 72 / 0 / 176:  18%|█▊        | 176/1000 [14:51<1:09:34,  5.07s/it][Succeeded / Failed / Skipped / Total] 104 / 72 / 0 / 176:  18%|█▊        | 177/1000 [14:54<1:09:21,  5.06s/it][Succeeded / Failed / Skipped / Total] 105 / 72 / 0 / 177:  18%|█▊        | 177/1000 [14:54<1:09:21,  5.06s/it][Succeeded / Failed / Skipped / Total] 105 / 72 / 0 / 177:  18%|█▊        | 178/1000 [15:05<1:09:39,  5.09s/it]Handle a contact . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[addContact]] ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact [[contact]] = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( [[contact]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[annexcanacts]] ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact [[interaction]] = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( [[interaction]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 172 ---------------------------------------------
Finds all attributes that match the specified method . --> Fetches configured config attributes --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[findAttributes]] ( Method method , Class < ? > [[targetClass]] ) { if ( [[targetClass]] == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , [[targetClass]] ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[gettthiuteples]] ( Method method , Class < ? > [[hostclass]] ) { if ( [[hostclass]] == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , [[hostclass]] ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 173 ---------------------------------------------
Adds a secure method . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod [[method]] , List < ConfigAttribute > attr ) { Assert . notNull ( [[method]] , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[method]] + "] with attributes [" + attr + "]" ) ; } this . [[methodMap]] . put ( [[method]] , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[addsiedanoid]] ( RegisteredMethod [[format]] , List < ConfigAttribute > attr ) { Assert . notNull ( [[format]] , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[format]] + "] with attributes [" + attr + "]" ) ; } this . [[classenapa]] . put ( [[format]] , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 174 ---------------------------------------------
Get all config attributes . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > getAllConfigAttributes ( ) { Set < ConfigAttribute > [[allAttributes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[allAttributes]] . addAll ( attributeList ) ; } return [[allAttributes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > getAllConfigAttributes ( ) { Set < ConfigAttribute > [[alaltrickboples]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { [[alaltrickboples]] . addAll ( attributeList ) ; } return [[alaltrickboples]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 175 ---------------------------------------------
Checks if the mapped name matches the mapped name --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isMatch]] ( String [[methodName]] , String mappedName ) { return ( mappedName . endsWith ( "*" ) && [[methodName]] . startsWith ( mappedName . substring ( 0 , mappedName . length ( ) - 1 ) ) ) || ( mappedName . startsWith ( "*" ) && [[methodName]] . endsWith ( mappedName . substring ( 1 , mappedName . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[outayn]] ( String [[dataman]] , String mappedName ) { return ( mappedName . endsWith ( "*" ) && [[dataman]] . startsWith ( mappedName . substring ( 0 , mappedName . length ( ) - 1 ) ) ) || ( mappedName . startsWith ( "*" ) && [[dataman]] . endsWith ( mappedName . substring ( 1 , mappedName . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 176 ---------------------------------------------
Handle a bind exception . --> Convenience method for debugging --> Socre: 1.0

[[[[Adv]]]]: protected void [[handleBindException]] ( String [[userDn]] , String username , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[userDn]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void [[classextgene]] ( String [[justadnie]] , String username , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[justadnie]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 177 ---------------------------------------------
Get a random contact --> Returns random contact reactactors --> Socre: 1.0

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[getRandomContact]] ( ) { logger . debug ( "Returning random contact" ) ; Random [[rnd]] = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = [[rnd]] . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact [[frontarxrorreactors]] ( ) { logger . debug ( "Returning random contact" ) ; Random [[rrl]] = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = [[rrl]] . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 178 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 105 / 73 / 0 / 178:  18%|█▊        | 178/1000 [15:05<1:09:39,  5.09s/it][Succeeded / Failed / Skipped / Total] 105 / 73 / 0 / 178:  18%|█▊        | 179/1000 [15:05<1:09:12,  5.06s/it][Succeeded / Failed / Skipped / Total] 105 / 74 / 0 / 179:  18%|█▊        | 179/1000 [15:05<1:09:12,  5.06s/it][Succeeded / Failed / Skipped / Total] 105 / 74 / 0 / 179:  18%|█▊        | 180/1000 [15:10<1:09:07,  5.06s/it][Succeeded / Failed / Skipped / Total] 106 / 74 / 0 / 180:  18%|█▊        | 180/1000 [15:10<1:09:07,  5.06s/it][Succeeded / Failed / Skipped / Total] 106 / 74 / 0 / 180:  18%|█▊        | 181/1000 [15:13<1:08:53,  5.05s/it][Succeeded / Failed / Skipped / Total] 107 / 74 / 0 / 181:  18%|█▊        | 181/1000 [15:13<1:08:53,  5.05s/it][Succeeded / Failed / Skipped / Total] 107 / 74 / 0 / 181:  18%|█▊        | 182/1000 [15:13<1:08:25,  5.02s/it][Succeeded / Failed / Skipped / Total] 108 / 74 / 0 / 182:  18%|█▊        | 182/1000 [15:13<1:08:25,  5.02s/it][Succeeded / Failed / Skipped / Total] 108 / 74 / 0 / 182:  18%|█▊        | 183/1000 [15:20<1:08:29,  5.03s/it][Succeeded / Failed / Skipped / Total] 109 / 74 / 0 / 183:  18%|█▊        | 183/1000 [15:20<1:08:29,  5.03s/it][Succeeded / Failed / Skipped / Total] 109 / 74 / 0 / 183:  18%|█▊        | 184/1000 [15:23<1:08:17,  5.02s/it][Succeeded / Failed / Skipped / Total] 109 / 75 / 0 / 184:  18%|█▊        | 184/1000 [15:23<1:08:17,  5.02s/it][Succeeded / Failed / Skipped / Total] 109 / 75 / 0 / 184:  18%|█▊        | 185/1000 [15:36<1:08:46,  5.06s/it]Find the parameter names for the given parameter . --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int [[parameterCount]] = parameterAnnotations . length ; String [ ] [[paramNames]] = new String [ [[parameterCount]] ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < [[parameterCount]] ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; [[paramNames]] [ i ] = parameterName ; } } return found ? [[paramNames]] : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int [[clientcaunda]] = parameterAnnotations . length ; String [ ] [[semewordsse]] = new String [ [[clientcaunda]] ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < [[clientcaunda]] ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; [[semewordsse]] [ i ] = parameterName ; } } return found ? [[semewordsse]] : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 179 ---------------------------------------------
Specifies that any request has been configured . --> [[[FAILED]]]

[[[[Adv]]]]: public C [[anyRequest]] ( ) { Assert . state ( ! this . [[anyRequestConfigured]] , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . [[anyRequestConfigured]] = "True" == "True" ; return configurer ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C [[hasleft]] ( ) { Assert . state ( ! this . [[yourocdevtfamounth]] , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . [[yourocdevtfamounth]] = "True" == "True" ; return configurer ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 180 ---------------------------------------------
Remove authentication attributes from the session . --> Remove user from browser --> Socre: 1.0

[[[[Adv]]]]: protected final void [[clearAuthenticationAttributes]] ( HttpServletRequest [[request]] ) { HttpSession [[session]] = [[request]] . getSession ( "False" != "False" ) ; if ( [[session]] == null ) { return ; } [[session]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void [[directoerregnodutbasebotis]] ( HttpServletRequest [[carol]] ) { HttpSession [[carol]] = [[carol]] . getSession ( "False" != "False" ) ; if ( [[carol]] == null ) { return ; } [[carol]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 181 ---------------------------------------------
Create redirect URL . --> Combine regexp urls --> Socre: 1.0

[[[[Adv]]]]: protected String [[createRedirectUrl]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[composergexcpurla]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 182 ---------------------------------------------
Creates the service url . --> Convenience method for creating Creationalvlan --> Socre: 1.0

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[creationalvoehlan]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 183 ---------------------------------------------
Check the filters stack . --> Apply filters . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkFilterStack]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void [[befoliadret]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 184 ---------------------------------------------
Returns the field of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public static Field [[getField]] ( Class < ? > [[clazz]] , String fieldName ) throws IllegalStateException { Assert . notNull ( [[clazz]] , "Class required" ) ; Assert . hasText ( fieldName , "Field name required" ) ; try { return [[clazz]] . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field [[claimclass]] ( Class < ? > [[poatzed]] , String fieldName ) throws IllegalStateException { Assert . notNull ( [[poatzed]] , "Class required" ) ; Assert . hasText ( fieldName , "Field name required" ) ; try { return [[poatzed]] . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
[Succeeded / Failed / Skipped / Total] 109 / 76 / 0 / 185:  18%|█▊        | 185/1000 [15:36<1:08:46,  5.06s/it][Succeeded / Failed / Skipped / Total] 109 / 76 / 0 / 185:  19%|█▊        | 186/1000 [15:37<1:08:24,  5.04s/it][Succeeded / Failed / Skipped / Total] 109 / 77 / 0 / 186:  19%|█▊        | 186/1000 [15:37<1:08:24,  5.04s/it][Succeeded / Failed / Skipped / Total] 109 / 77 / 0 / 186:  19%|█▊        | 187/1000 [15:45<1:08:31,  5.06s/it][Succeeded / Failed / Skipped / Total] 109 / 78 / 0 / 187:  19%|█▊        | 187/1000 [15:45<1:08:31,  5.06s/it][Succeeded / Failed / Skipped / Total] 109 / 78 / 0 / 187:  19%|█▉        | 188/1000 [15:49<1:08:21,  5.05s/it][Succeeded / Failed / Skipped / Total] 110 / 78 / 0 / 188:  19%|█▉        | 188/1000 [15:49<1:08:21,  5.05s/it][Succeeded / Failed / Skipped / Total] 110 / 78 / 0 / 188:  19%|█▉        | 189/1000 [15:50<1:07:58,  5.03s/it][Succeeded / Failed / Skipped / Total] 111 / 78 / 0 / 189:  19%|█▉        | 189/1000 [15:50<1:07:58,  5.03s/it][Succeeded / Failed / Skipped / Total] 111 / 78 / 0 / 189:  19%|█▉        | 190/1000 [16:01<1:08:18,  5.06s/it][Succeeded / Failed / Skipped / Total] 112 / 78 / 0 / 190:  19%|█▉        | 190/1000 [16:01<1:08:18,  5.06s/it][Succeeded / Failed / Skipped / Total] 112 / 78 / 0 / 190:  19%|█▉        | 191/1000 [16:05<1:08:11,  5.06s/it]--------------------------------------------- Result 185 ---------------------------------------------
Ends the authentication process . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[commence]] ( HttpServletRequest [[request]] , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void [[execute]] ( HttpServletRequest [[application]] , HttpServletResponse response , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 186 ---------------------------------------------
Extracts the prefix . --> [[[FAILED]]]

[[[[Adv]]]]: private String extractPrefix ( String [[encPass]] ) { if ( ! [[encPass]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[encPass]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[encPass]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String extractPrefix ( String [[enmpact]] ) { if ( ! [[enmpact]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[enmpact]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[enmpact]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 187 ---------------------------------------------
Returns the registered types . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[getRegisteredTypes]] ( ) { Set < Class < ? extends Throwable > > typeList = this . [[extractorMap]] . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[wasnevertlyimatesti]] ( ) { Set < Class < ? extends Throwable > > typeList = this . [[abstractclassgapl]] . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 188 ---------------------------------------------
Register the access manager bean . --> Generates codeant for accessor --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[registerAccessManager]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList [[voters]] = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { [[voters]] . add ( expressionVoter ) ; } [[voters]] . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; [[voters]] . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { [[voters]] . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( [[voters]] ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[codeantadresurture]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList [[s]] = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { [[s]] . add ( expressionVoter ) ; } [[s]] . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; [[s]] . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { [[s]] . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( [[s]] ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 189 ---------------------------------------------
Compares two byte arrays . --> Compares two alarms --> Socre: 1.0

[[[[Adv]]]]: private boolean [[matches]] ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean [[alarms]] ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 190 ---------------------------------------------
Resolve hidden inputs for the request . --> perform deserialise --> Socre: 1.0

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > resolveHiddenInputs ) { Assert . notNull ( resolveHiddenInputs , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = resolveHiddenInputs ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[zaesriuefeseenactse]] ( Function < HttpServletRequest , Map < String , String > > resolveHiddenInputs ) { Assert . notNull ( resolveHiddenInputs , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = resolveHiddenInputs ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 191 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 113 / 78 / 0 / 191:  19%|█▉        | 191/1000 [16:05<1:08:11,  5.06s/it][Succeeded / Failed / Skipped / Total] 113 / 79 / 0 / 192:  19%|█▉        | 192/1000 [16:05<1:07:45,  5.03s/it][Succeeded / Failed / Skipped / Total] 113 / 79 / 0 / 192:  19%|█▉        | 193/1000 [16:14<1:07:55,  5.05s/it][Succeeded / Failed / Skipped / Total] 113 / 80 / 0 / 193:  19%|█▉        | 193/1000 [16:14<1:07:55,  5.05s/it][Succeeded / Failed / Skipped / Total] 114 / 80 / 0 / 194:  19%|█▉        | 194/1000 [16:25<1:08:13,  5.08s/it][Succeeded / Failed / Skipped / Total] 114 / 80 / 0 / 194:  20%|█▉        | 195/1000 [16:28<1:07:59,  5.07s/it][Succeeded / Failed / Skipped / Total] 114 / 81 / 0 / 195:  20%|█▉        | 195/1000 [16:28<1:07:59,  5.07s/it][Succeeded / Failed / Skipped / Total] 114 / 81 / 0 / 195:  20%|█▉        | 196/1000 [16:30<1:07:44,  5.06s/it][Succeeded / Failed / Skipped / Total] 114 / 82 / 0 / 196:  20%|█▉        | 196/1000 [16:30<1:07:44,  5.06s/it][Succeeded / Failed / Skipped / Total] 114 / 82 / 0 / 196:  20%|█▉        | 197/1000 [17:00<1:09:17,  5.18s/it]Sets the default failure url . --> Match a custom fausefausefause --> Socre: 1.0

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String [[defaultFailureUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[defaultFailureUrl]] ) , ( ) -> "'" + [[defaultFailureUrl]] + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = [[defaultFailureUrl]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[matchgepausefauseorthurmal]] ( String [[customfylbreuseler]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[customfylbreuseler]] ) , ( ) -> "'" + [[customfylbreuseler]] + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = [[customfylbreuseler]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 192 ---------------------------------------------
Retrieves the cause of the given exception . --> [[[FAILED]]]

[[[[Adv]]]]: private Throwable [[extractCause]] ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > [[throwableType]] = entry . getKey ( ) ; if ( [[throwableType]] . isInstance ( throwable ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( throwable ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable [[evolutionucauru]] ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > entry : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > [[putmanport]] = entry . getKey ( ) ; if ( [[putmanport]] . isInstance ( throwable ) ) { ThrowableCauseExtractor extractor = entry . getValue ( ) ; return extractor . extractCause ( throwable ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 193 ---------------------------------------------
Converts a collection of user authorities to a set of authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public static Set < String > [[authorityListToSet]] ( Collection < ? extends GrantedAuthority > [[userAuthorities]] ) { Assert . notNull ( [[userAuthorities]] , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( [[userAuthorities]] . size ( ) ) ; for ( GrantedAuthority [[authority]] : [[userAuthorities]] ) { set . add ( [[authority]] . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > [[iplisttanting]] ( Collection < ? extends GrantedAuthority > [[poweragenirifies]] ) { Assert . notNull ( [[poweragenirifies]] , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( [[poweragenirifies]] . size ( ) ) ; for ( GrantedAuthority [[administration]] : [[poweragenirifies]] ) { set . add ( [[administration]] . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 194 ---------------------------------------------
Convert the given result set to a serializable identifier . --> Convert a JDBC ResultSet to a Class Object --> Socre: 1.0

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[identifier]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[identifier]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[identifier]] = convertFromStringTo ( ( String ) [[identifier]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[codeclassu]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[codeclassu]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[codeclassu]] = convertFromStringTo ( ( String ) [[codeclassu]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 195 ---------------------------------------------
Returns the attribute list for the given identifier . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > [[createAttributeList]] ( String identifier ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[entry]] : idToAttributes . entrySet ( ) ) { if ( [[entry]] . getKey ( ) . matcher ( identifier ) . matches ( ) ) { return [[entry]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > [[becomeartyvrali]] ( String identifier ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[application]] : idToAttributes . entrySet ( ) ) { if ( [[application]] . getKey ( ) . matcher ( identifier ) . matches ( ) ) { return [[application]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 196 ---------------------------------------------
Checks if the given URL is an absolute URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAbsoluteUrl]] ( String url ) { if ( url == null ) { return "[[False]]" != "[[False]]" ; } final Pattern [[ABSOLUTE_URL]] = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return [[ABSOLUTE_URL]] . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean [[umdeloturool]] ( String url ) { if ( url == null ) { return "[[y]]" != "[[y]]" ; } final Pattern [[actualmodelgum]] = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return [[actualmodelgum]] . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 197 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 114 / 83 / 0 / 197:  20%|█▉        | 197/1000 [17:00<1:09:17,  5.18s/it][Succeeded / Failed / Skipped / Total] 114 / 83 / 0 / 197:  20%|█▉        | 198/1000 [17:01<1:08:59,  5.16s/it][Succeeded / Failed / Skipped / Total] 115 / 83 / 0 / 198:  20%|█▉        | 198/1000 [17:01<1:08:59,  5.16s/it][Succeeded / Failed / Skipped / Total] 116 / 83 / 0 / 199:  20%|█▉        | 199/1000 [17:01<1:08:33,  5.14s/it][Succeeded / Failed / Skipped / Total] 116 / 83 / 0 / 199:  20%|██        | 200/1000 [17:14<1:08:57,  5.17s/it][Succeeded / Failed / Skipped / Total] 117 / 83 / 0 / 200:  20%|██        | 200/1000 [17:14<1:08:57,  5.17s/it][Succeeded / Failed / Skipped / Total] 118 / 83 / 0 / 201:  20%|██        | 201/1000 [17:14<1:08:32,  5.15s/it][Succeeded / Failed / Skipped / Total] 118 / 83 / 0 / 201:  20%|██        | 202/1000 [17:29<1:09:04,  5.19s/it]Create entries . --> [[[FAILED]]]

[[[[Adv]]]]: protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 198 ---------------------------------------------
Build a request URL --> Helper method to build a string --> Socre: 1.0

[[[[Adv]]]]: private static String [[buildRequestUrl]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder [[url]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[url]] . append ( servletPath ) ; if ( pathInfo != null ) { [[url]] . append ( pathInfo ) ; } } else { [[url]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { [[url]] . append ( "?" ) . append ( queryString ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String [[constructionrinthare]] ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder [[chaline]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[chaline]] . append ( servletPath ) ; if ( pathInfo != null ) { [[chaline]] . append ( pathInfo ) ; } } else { [[chaline]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { [[chaline]] . append ( "?" ) . append ( queryString ) ; } return [[chaline]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 199 ---------------------------------------------
Creates the object identity . --> Update artist unidentifier --> Socre: 1.0

[[[[Adv]]]]: protected void [[createObjectIdentity]] ( ObjectIdentity [[object]] , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( [[object]] . getType ( ) , "True" == "True" , [[object]] . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , [[object]] . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void [[artistunacegraencyts]] ( ObjectIdentity [[anti]] , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( [[anti]] . getType ( ) , "True" == "True" , [[anti]] . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , [[anti]] . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 200 ---------------------------------------------
Updates the object identity . --> updateObjectIdentity --> Socre: 1.0

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl [[acl]] ) { Long [[parentId]] = null ; if ( [[acl]] . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , [[acl]] . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl [[oii]] = ( ObjectIdentityImpl ) [[acl]] . getParentAcl ( ) . getObjectIdentity ( ) ; [[parentId]] = retrieveObjectIdentityPrimaryKey ( [[oii]] ) ; } Assert . notNull ( [[acl]] . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( [[acl]] . getOwner ( ) , "[[True]]" == "[[True]]" ) ; int count = jdbcOperations . update ( updateObjectIdentity , [[parentId]] , ownerSid , Boolean . valueOf ( [[acl]] . isEntriesInheriting ( ) ) , [[acl]] . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl [[celat]] ) { Long [[actualule]] = null ; if ( [[celat]] . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , [[celat]] . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl [[urɪ]] = ( ObjectIdentityImpl ) [[celat]] . getParentAcl ( ) . getObjectIdentity ( ) ; [[actualule]] = retrieveObjectIdentityPrimaryKey ( [[urɪ]] ) ; } Assert . notNull ( [[celat]] . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( [[celat]] . getOwner ( ) , "[[actual]]" == "[[actual]]" ) ; int count = jdbcOperations . update ( updateObjectIdentity , [[actualule]] , ownerSid , Boolean . valueOf ( [[celat]] . isEntriesInheriting ( ) ) , [[celat]] . getId ( ) ) ; if ( count != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 201 ---------------------------------------------
Matches an ANY of the server web exchange . --> Creates a mattexted matcher that can be used as an HTTP request . --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[anyExchange]] ( ) {
[[[[Nl]]]]: Matches any exchange

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[ancomtexted]] ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 202 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 118 / 84 / 0 / 202:  20%|██        | 202/1000 [17:29<1:09:04,  5.19s/it][Succeeded / Failed / Skipped / Total] 118 / 84 / 0 / 202:  20%|██        | 203/1000 [17:31<1:08:48,  5.18s/it][Succeeded / Failed / Skipped / Total] 118 / 85 / 0 / 203:  20%|██        | 203/1000 [17:31<1:08:48,  5.18s/it][Succeeded / Failed / Skipped / Total] 118 / 85 / 0 / 203:  20%|██        | 204/1000 [17:32<1:08:28,  5.16s/it][Succeeded / Failed / Skipped / Total] 118 / 86 / 0 / 204:  20%|██        | 204/1000 [17:32<1:08:28,  5.16s/it][Succeeded / Failed / Skipped / Total] 118 / 86 / 0 / 204:  20%|██        | 205/1000 [17:38<1:08:26,  5.17s/it][Succeeded / Failed / Skipped / Total] 119 / 86 / 0 / 205:  20%|██        | 205/1000 [17:38<1:08:26,  5.17s/it][Succeeded / Failed / Skipped / Total] 119 / 86 / 0 / 205:  21%|██        | 206/1000 [17:42<1:08:14,  5.16s/it][Succeeded / Failed / Skipped / Total] 120 / 86 / 0 / 206:  21%|██        | 206/1000 [17:42<1:08:14,  5.16s/it][Succeeded / Failed / Skipped / Total] 120 / 86 / 0 / 206:  21%|██        | 207/1000 [17:48<1:08:11,  5.16s/it][Succeeded / Failed / Skipped / Total] 120 / 87 / 0 / 207:  21%|██        | 207/1000 [17:48<1:08:11,  5.16s/it][Succeeded / Failed / Skipped / Total] 120 / 87 / 0 / 207:  21%|██        | 208/1000 [17:48<1:07:49,  5.14s/it][Succeeded / Failed / Skipped / Total] 121 / 87 / 0 / 208:  21%|██        | 208/1000 [17:48<1:07:49,  5.14s/it][Succeeded / Failed / Skipped / Total] 121 / 87 / 0 / 208:  21%|██        | 209/1000 [17:55<1:07:49,  5.15s/it]Returns a text encryption cipher . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence [[password]] , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( standard ( [[password]] , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor text ( CharSequence [[pseudonym]] , CharSequence [[etc]] ) { return new HexEncodingTextEncryptor ( standard ( [[pseudonym]] , [[etc]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 203 ---------------------------------------------
Creates a decryptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence password , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( stronger ( password , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence password , CharSequence [[cs]] ) { return new HexEncodingTextEncryptor ( stronger ( password , [[cs]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 204 ---------------------------------------------
Saves the request . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[saveRequest]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest [[savedRequest]] = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void [[coverreve]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest [[coverceclass]] = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 205 ---------------------------------------------
Write headers to the response . --> Write headers from comment to comment --> Socre: 1.0

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest [[request]] , HttpServletResponse [[response]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( [[request]] ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest [[ask]] , HttpServletResponse [[comment]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( [[ask]] ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! [[comment]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[comment]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! [[comment]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[comment]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { [[comment]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 206 ---------------------------------------------
Determines the target URL . --> Convenience method for attrible --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[determineTargetUrl]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String [[attorbedurle]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[attorbedurle]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 207 ---------------------------------------------
Creates a TextEncryptor which encodes the given password . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[queryableText]] ( CharSequence password , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[accesshardsecurity]] ( CharSequence password , CharSequence [[international]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , [[international]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 208 ---------------------------------------------
Create a server web exchange matcher for the given paths . --> Tree matchers --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[pathMatchers]] ( HttpMethod method , String ... [[patterns]] ) { List < ServerWebExchangeMatcher > [[matchers]] = new ArrayList <> ( [[patterns]] . length ) ; for ( String [[pattern]] : [[patterns]] ) { [[matchers]] . add ( new PathPatternParserServerWebExchangeMatcher ( [[pattern]] , method ) ) ; } return new OrServerWebExchangeMatcher ( [[matchers]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[treekatiers]] ( HttpMethod method , String ... [[rows]] ) { List < ServerWebExchangeMatcher > [[bridgepers]] = new ArrayList <> ( [[rows]] . length ) ; for ( String [[size]] : [[rows]] ) { [[bridgepers]] . add ( new PathPatternParserServerWebExchangeMatcher ( [[size]] , method ) ) ; } return new OrServerWebExchangeMatcher ( [[bridgepers]] ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 209 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 122 / 87 / 0 / 209:  21%|██        | 209/1000 [17:55<1:07:49,  5.15s/it][Succeeded / Failed / Skipped / Total] 122 / 87 / 0 / 209:  21%|██        | 210/1000 [17:57<1:07:33,  5.13s/it][Succeeded / Failed / Skipped / Total] 123 / 87 / 0 / 210:  21%|██        | 210/1000 [17:57<1:07:33,  5.13s/it][Succeeded / Failed / Skipped / Total] 123 / 87 / 0 / 210:  21%|██        | 211/1000 [18:11<1:08:00,  5.17s/it][Succeeded / Failed / Skipped / Total] 124 / 87 / 0 / 211:  21%|██        | 211/1000 [18:11<1:08:00,  5.17s/it][Succeeded / Failed / Skipped / Total] 124 / 87 / 0 / 211:  21%|██        | 212/1000 [18:15<1:07:51,  5.17s/it][Succeeded / Failed / Skipped / Total] 125 / 87 / 0 / 212:  21%|██        | 212/1000 [18:15<1:07:51,  5.17s/it][Succeeded / Failed / Skipped / Total] 125 / 87 / 0 / 212:  21%|██▏       | 213/1000 [18:22<1:07:55,  5.18s/it][Succeeded / Failed / Skipped / Total] 126 / 87 / 0 / 213:  21%|██▏       | 213/1000 [18:22<1:07:55,  5.18s/it][Succeeded / Failed / Skipped / Total] 126 / 87 / 0 / 213:  21%|██▏       | 214/1000 [18:24<1:07:36,  5.16s/it][Succeeded / Failed / Skipped / Total] 127 / 87 / 0 / 214:  21%|██▏       | 214/1000 [18:24<1:07:36,  5.16s/it][Succeeded / Failed / Skipped / Total] 127 / 87 / 0 / 214:  22%|██▏       | 215/1000 [18:25<1:07:17,  5.14s/it][Succeeded / Failed / Skipped / Total] 127 / 88 / 0 / 215:  22%|██▏       | 215/1000 [18:25<1:07:17,  5.14s/it][Succeeded / Failed / Skipped / Total] 127 / 88 / 0 / 215:  22%|██▏       | 216/1000 [18:31<1:07:14,  5.15s/it]Determine target URL . --> Determines Purel for Purel --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[decidegaardiedpurel]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 210 ---------------------------------------------
Sets the target URL parameter . --> zitareh position --> Socre: 1.0

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String [[targetUrlParameter]] ) { if ( [[targetUrlParameter]] != null ) { Assert . hasText ( [[targetUrlParameter]] , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = [[targetUrlParameter]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[zenarehduilmptarplify]] ( String [[positionuroopaparameter]] ) { if ( [[positionuroopaparameter]] != null ) { Assert . hasText ( [[positionuroopaparameter]] , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = [[positionuroopaparameter]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 211 ---------------------------------------------
Build the distinguished name . --> Modify and return a new DistinguishedName --> Socre: 1.0

[[[[Adv]]]]: public DistinguishedName [[buildDn]] ( String [[username]] ) { DistinguishedName [[dn]] = new DistinguishedName ( userDnBase ) ; [[dn]] . add ( usernameAttribute , [[username]] ) ; return [[dn]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName [[moditnc]] ( String [[guestc]] ) { DistinguishedName [[donenet]] = new DistinguishedName ( userDnBase ) ; [[donenet]] . add ( usernameAttribute , [[guestc]] ) ; return [[donenet]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 212 ---------------------------------------------
Creates a map of shared objects . --> Provides a map of covers to use for covers . --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > [[sharedObjects]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[sharedObjects]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[sharedObjects]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[sharedObjects]] . put ( ApplicationContext . class , context ) ; [[sharedObjects]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[sharedObjects]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[sharedObjects]] ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[coversrhecherwardsl]] ( ) { Map < Class < ? extends Object > , Object > [[commonarcuths]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[commonarcuths]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[commonarcuths]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[commonarcuths]] . put ( ApplicationContext . class , context ) ; [[commonarcuths]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[commonarcuths]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[commonarcuths]] ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 213 ---------------------------------------------
Gets current date . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long [[now]] = System . currentTimeMillis ( ) ; if ( ( [[now]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[now]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[now]] ; currentDate = format . format ( new Date ( [[now]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[takedrerriutdating]] ( ) { long [[ahead]] = System . currentTimeMillis ( ) ; if ( ( [[ahead]] - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( [[ahead]] - currentDateGenerated ) > 1000 ) { currentDateGenerated = [[ahead]] ; currentDate = format . format ( new Date ( [[ahead]] ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 214 ---------------------------------------------
Internal parse method . --> returns null if the value is invalid --> Socre: 1.0

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String value , DateFormat [ ] formats ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < formats . length ) ; i ++ ) { try { date = formats [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[abstimesalease]] ( String value , DateFormat [ ] formats ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < formats . length ) ; i ++ ) { try { date = formats [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 215 ---------------------------------------------
Gets the directory with the immediate parent directory . --> [[[FAILED]]]

[[[[Adv]]]]: private Directory [[getDirectoryWithImmediateParentPopulated]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory [[parentDirectory]] = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory [[netrifntynnotcomapuntcompmaid]] ( final Long id ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { id } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory [[childisrreuzia]] = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 216 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 128 / 88 / 0 / 216:  22%|██▏       | 216/1000 [18:31<1:07:14,  5.15s/it][Succeeded / Failed / Skipped / Total] 128 / 88 / 0 / 216:  22%|██▏       | 217/1000 [18:35<1:07:06,  5.14s/it][Succeeded / Failed / Skipped / Total] 129 / 88 / 0 / 217:  22%|██▏       | 217/1000 [18:35<1:07:06,  5.14s/it][Succeeded / Failed / Skipped / Total] 129 / 88 / 0 / 217:  22%|██▏       | 218/1000 [18:39<1:06:54,  5.13s/it][Succeeded / Failed / Skipped / Total] 130 / 88 / 0 / 218:  22%|██▏       | 218/1000 [18:39<1:06:54,  5.13s/it][Succeeded / Failed / Skipped / Total] 130 / 88 / 0 / 218:  22%|██▏       | 219/1000 [18:43<1:06:48,  5.13s/it][Succeeded / Failed / Skipped / Total] 131 / 88 / 0 / 219:  22%|██▏       | 219/1000 [18:43<1:06:48,  5.13s/it][Succeeded / Failed / Skipped / Total] 131 / 88 / 0 / 219:  22%|██▏       | 220/1000 [18:48<1:06:42,  5.13s/it][Succeeded / Failed / Skipped / Total] 131 / 89 / 0 / 220:  22%|██▏       | 220/1000 [18:48<1:06:42,  5.13s/it][Succeeded / Failed / Skipped / Total] 131 / 89 / 0 / 220:  22%|██▏       | 221/1000 [18:52<1:06:30,  5.12s/it][Succeeded / Failed / Skipped / Total] 132 / 89 / 0 / 221:  22%|██▏       | 221/1000 [18:52<1:06:30,  5.12s/it][Succeeded / Failed / Skipped / Total] 132 / 89 / 0 / 221:  22%|██▏       | 222/1000 [18:59<1:06:32,  5.13s/it][Succeeded / Failed / Skipped / Total] 133 / 89 / 0 / 222:  22%|██▏       | 222/1000 [18:59<1:06:32,  5.13s/it][Succeeded / Failed / Skipped / Total] 133 / 89 / 0 / 222:  22%|██▏       | 223/1000 [19:02<1:06:19,  5.12s/it][Succeeded / Failed / Skipped / Total] 134 / 89 / 0 / 223:  22%|██▏       | 223/1000 [19:02<1:06:19,  5.12s/it][Succeeded / Failed / Skipped / Total] 134 / 89 / 0 / 223:  22%|██▏       | 224/1000 [19:05<1:06:08,  5.11s/it]Sets authentication details . --> Add group delpts --> Socre: 1.0

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[groupdelpts]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 217 ---------------------------------------------
Updates cache . --> Exports an ached --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap cache , Object key , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , [[value]] ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[exportanched]] ( HashMap cache , Object key , Object [[name]] ) { if ( [[name]] == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , [[name]] ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 218 ---------------------------------------------
Sets the jaas using a loop configuration . --> Center loginyope --> Socre: 1.0

[[[[Adv]]]]: private void [[configureJaasUsingLoop]] ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean [[alreadySet]] = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String [[existing]] ; while ( ( [[existing]] = Security . getProperty ( prefix + n ) ) != null ) { [[alreadySet]] = [[existing]] . equals ( loginConfigUrl ) ; if ( [[alreadySet]] ) { break ; } n ++ ; } if ( ! [[alreadySet]] ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void [[centerfyiteyapsbinoope]] ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean [[alsoting]] = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String [[name]] ; while ( ( [[name]] = Security . getProperty ( prefix + n ) ) != null ) { [[alsoting]] = [[name]] . equals ( loginConfigUrl ) ; if ( [[alsoting]] ) { break ; } n ++ ; } if ( ! [[alsoting]] ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 219 ---------------------------------------------
Build the group DN --> Build the LDAP entity LDAP --> Socre: 1.0

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String [[group]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[group]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String [[ng]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[ng]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 220 ---------------------------------------------
Determines the security name for the Subject . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String [[userSecurityName]] = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[iscelineana]] ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String [[useecueplay]] = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 221 ---------------------------------------------
Returns a list of webSphere groups . --> Utility method to catch all unnotated users --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[getWebSphereGroups]] ( final String [[securityName]] ) { Context [[ic]] = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[catchnotbothunterigraphys]] ( final String [[personalterms]] ) { Context [[ac]] = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 222 ---------------------------------------------
Throws an exception if the session is exceeded . --> Throws an exception if the limit is exceeded --> Socre: 1.0

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > [[sessions]] , int [[allowableSessions]] , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[sessions]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( [[allowableSessions]] ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > [[campos]] , int [[ablelikechess]] , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[campos]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( [[ablelikechess]] ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 223 ---------------------------------------------
Copy authentication details from source to destination . --> use loginer --> Socre: 1.0

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken [[token]] = ( AbstractAuthenticationToken ) dest ; [[token]] . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[submissionerfus]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken [[credentials]] = ( AbstractAuthenticationToken ) dest ; [[credentials]] . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
[Succeeded / Failed / Skipped / Total] 135 / 89 / 0 / 224:  22%|██▏       | 224/1000 [19:05<1:06:08,  5.11s/it][Succeeded / Failed / Skipped / Total] 135 / 89 / 0 / 224:  22%|██▎       | 225/1000 [19:09<1:06:00,  5.11s/it][Succeeded / Failed / Skipped / Total] 135 / 90 / 0 / 225:  22%|██▎       | 225/1000 [19:09<1:06:00,  5.11s/it][Succeeded / Failed / Skipped / Total] 135 / 90 / 0 / 225:  23%|██▎       | 226/1000 [19:16<1:06:01,  5.12s/it][Succeeded / Failed / Skipped / Total] 135 / 91 / 0 / 226:  23%|██▎       | 226/1000 [19:16<1:06:01,  5.12s/it][Succeeded / Failed / Skipped / Total] 135 / 91 / 0 / 226:  23%|██▎       | 227/1000 [19:19<1:05:48,  5.11s/it][Succeeded / Failed / Skipped / Total] 136 / 91 / 0 / 227:  23%|██▎       | 227/1000 [19:19<1:05:48,  5.11s/it][Succeeded / Failed / Skipped / Total] 136 / 91 / 0 / 227:  23%|██▎       | 228/1000 [19:24<1:05:42,  5.11s/it][Succeeded / Failed / Skipped / Total] 137 / 91 / 0 / 228:  23%|██▎       | 228/1000 [19:24<1:05:42,  5.11s/it][Succeeded / Failed / Skipped / Total] 137 / 91 / 0 / 228:  23%|██▎       | 229/1000 [19:27<1:05:31,  5.10s/it][Succeeded / Failed / Skipped / Total] 138 / 91 / 0 / 229:  23%|██▎       | 229/1000 [19:27<1:05:31,  5.10s/it][Succeeded / Failed / Skipped / Total] 138 / 91 / 0 / 229:  23%|██▎       | 230/1000 [19:43<1:06:03,  5.15s/it][Succeeded / Failed / Skipped / Total] 138 / 92 / 0 / 230:  23%|██▎       | 230/1000 [19:43<1:06:03,  5.15s/it][Succeeded / Failed / Skipped / Total] 138 / 92 / 0 / 230:  23%|██▎       | 231/1000 [19:47<1:05:52,  5.14s/it]--------------------------------------------- Result 224 ---------------------------------------------
Returns filtered filters for the specified URL --> Performs a filter on the given URL --> Socre: 1.0

[[[[Adv]]]]: public List < Filter > [[getFilters]] ( String url ) { return [[getFilters]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > [[arefyurseing]] ( String url ) { return [[arefyurseing]] ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 225 ---------------------------------------------
Returns all filters matching the given request . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest [[request]] ) { for ( SecurityFilterChain [[chain]] : filterChains ) { if ( [[chain]] . matches ( [[request]] ) ) { return [[chain]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest [[rest]] ) { for ( SecurityFilterChain [[all]] : filterChains ) { if ( [[all]] . matches ( [[rest]] ) ) { return [[all]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 226 ---------------------------------------------
Change the password for the current user . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[changePassword]] ( final String [[oldPassword]] , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , [[oldPassword]] , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , [[oldPassword]] , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void [[getlightwrite]] ( final String [[archfswork]] , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , [[archfswork]] , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , [[archfswork]] , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 227 ---------------------------------------------
Gets the required web application context . --> Store xport --> Socre: 1.0

[[[[Adv]]]]: protected ApplicationContext [[getContext]] ( PageContext pageContext ) { ServletContext [[servletContext]] = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[servletContext]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext [[storexport]] ( PageContext pageContext ) { ServletContext [[arplidonnu]] = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[arplidonnu]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 228 ---------------------------------------------
Sets session attributes . --> Update the mockweight keywords --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[rnweightwords]] ( Map < String , Object > [[crisisartinbastion]] ) { notNull ( [[crisisartinbastion]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[crisisartinbastion]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 229 ---------------------------------------------
Adds a list of filters . --> Adds a list of bands --> Socre: 1.0

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > filters ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[bands]] ( List < Filter > filters ) { Validate . notNull ( [[bands]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[bands]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 230 ---------------------------------------------
Create a basic authentication scheme with the specified username and password . --> [[[FAILED]]]

[[[[Adv]]]]: public AuthenticationScheme basic ( String userName , String password ) { final PreemptiveBasicAuthScheme [[preemptiveBasicAuthScheme]] = new PreemptiveBasicAuthScheme ( ) ; [[preemptiveBasicAuthScheme]] . setUserName ( userName ) ; [[preemptiveBasicAuthScheme]] . setPassword ( password ) ; return [[preemptiveBasicAuthScheme]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme basic ( String userName , String password ) { final PreemptiveBasicAuthScheme [[uumpostsonsaoustchege]] = new PreemptiveBasicAuthScheme ( ) ; [[uumpostsonsaoustchege]] . setUserName ( userName ) ; [[uumpostsonsaoustchege]] . setPassword ( password ) ; return [[uumpostsonsaoustchege]] ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 231 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 139 / 92 / 0 / 231:  23%|██▎       | 231/1000 [19:47<1:05:52,  5.14s/it][Succeeded / Failed / Skipped / Total] 139 / 92 / 0 / 231:  23%|██▎       | 232/1000 [19:47<1:05:32,  5.12s/it][Succeeded / Failed / Skipped / Total] 139 / 93 / 0 / 232:  23%|██▎       | 232/1000 [19:47<1:05:32,  5.12s/it][Succeeded / Failed / Skipped / Total] 139 / 93 / 0 / 232:  23%|██▎       | 233/1000 [19:56<1:05:38,  5.13s/it][Succeeded / Failed / Skipped / Total] 139 / 94 / 0 / 233:  23%|██▎       | 233/1000 [19:56<1:05:38,  5.13s/it][Succeeded / Failed / Skipped / Total] 139 / 94 / 0 / 233:  23%|██▎       | 234/1000 [20:00<1:05:29,  5.13s/it][Succeeded / Failed / Skipped / Total] 139 / 95 / 0 / 234:  23%|██▎       | 234/1000 [20:00<1:05:29,  5.13s/it][Succeeded / Failed / Skipped / Total] 139 / 95 / 0 / 234:  24%|██▎       | 235/1000 [20:03<1:05:16,  5.12s/it][Succeeded / Failed / Skipped / Total] 140 / 95 / 0 / 235:  24%|██▎       | 235/1000 [20:03<1:05:16,  5.12s/it][Succeeded / Failed / Skipped / Total] 140 / 95 / 0 / 235:  24%|██▎       | 236/1000 [20:08<1:05:12,  5.12s/it]Gets the full dn . --> add more than one or more than one --> Socre: 1.0

[[[[Adv]]]]: public static DistinguishedName [[getFullDn]] ( DistinguishedName [[dn]] , Context [[baseCtx]] ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( [[baseCtx]] . getNameInNamespace ( ) ) ; if ( [[dn]] . contains ( baseDn ) ) { return [[dn]] ; } baseDn . append ( [[dn]] ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName [[casefewerline]] ( DistinguishedName [[adн]] , Context [[fieldgx]] ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( [[fieldgx]] . getNameInNamespace ( ) ) ; if ( [[adн]] . contains ( baseDn ) ) { return [[adн]] ; } baseDn . append ( [[adн]] ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 232 ---------------------------------------------
Registers the given filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( Filter filter , Filter ... [[additionalFilters]] ) { Validate . notNull ( filter , "Filter cannot be null" ) ; RestAssured . filters . add ( filter ) ; if ( [[additionalFilters]] != null ) { Collections . addAll ( RestAssured . filters , [[additionalFilters]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[shades]] ( Filter filter , Filter ... [[ongoingflacers]] ) { Validate . notNull ( filter , "Filter cannot be null" ) ; RestAssured . filters . add ( filter ) ; if ( [[ongoingflacers]] != null ) { Collections . addAll ( RestAssured . filters , [[ongoingflacers]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 233 ---------------------------------------------
Creates a basic authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[basic]] ( String [[userName]] , String [[password]] ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( [[userName]] ) ; scheme . setPassword ( [[password]] ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[framework]] ( String [[recipientprofile]] , String [[security]] ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( [[recipientprofile]] ) ; scheme . setPassword ( [[security]] ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 234 ---------------------------------------------
Enable proxy for given URI . --> [[[FAILED]]]

[[[[Adv]]]]: public static void proxy ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void proxy ( URI [[utri]] ) { if ( [[utri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } proxy ( new ProxySpecification ( [[utri]] . getHost ( ) , [[utri]] . getPort ( ) , [[utri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 235 ---------------------------------------------
Prints the response . --> Text output . --> Socre: 1.0

[[[[Adv]]]]: public static String [[print]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String [[text]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 236 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 141 / 95 / 0 / 236:  24%|██▎       | 236/1000 [20:08<1:05:12,  5.12s/it][Succeeded / Failed / Skipped / Total] 141 / 95 / 0 / 236:  24%|██▎       | 237/1000 [20:12<1:05:02,  5.11s/it][Succeeded / Failed / Skipped / Total] 142 / 95 / 0 / 237:  24%|██▎       | 237/1000 [20:12<1:05:02,  5.11s/it][Succeeded / Failed / Skipped / Total] 142 / 95 / 0 / 237:  24%|██▍       | 238/1000 [20:21<1:05:10,  5.13s/it][Succeeded / Failed / Skipped / Total] 143 / 95 / 0 / 238:  24%|██▍       | 238/1000 [20:21<1:05:10,  5.13s/it][Succeeded / Failed / Skipped / Total] 143 / 95 / 0 / 238:  24%|██▍       | 239/1000 [20:25<1:05:02,  5.13s/it][Succeeded / Failed / Skipped / Total] 143 / 96 / 0 / 239:  24%|██▍       | 239/1000 [20:25<1:05:02,  5.13s/it][Succeeded / Failed / Skipped / Total] 143 / 96 / 0 / 239:  24%|██▍       | 240/1000 [20:30<1:04:55,  5.13s/it][Succeeded / Failed / Skipped / Total] 143 / 97 / 0 / 240:  24%|██▍       | 240/1000 [20:30<1:04:55,  5.13s/it][Succeeded / Failed / Skipped / Total] 143 / 97 / 0 / 240:  24%|██▍       | 241/1000 [20:30<1:04:36,  5.11s/it][Succeeded / Failed / Skipped / Total] 144 / 97 / 0 / 241:  24%|██▍       | 241/1000 [20:30<1:04:36,  5.11s/it][Succeeded / Failed / Skipped / Total] 144 / 97 / 0 / 241:  24%|██▍       | 242/1000 [20:35<1:04:29,  5.10s/it][Succeeded / Failed / Skipped / Total] 145 / 97 / 0 / 242:  24%|██▍       | 242/1000 [20:35<1:04:29,  5.10s/it][Succeeded / Failed / Skipped / Total] 145 / 97 / 0 / 242:  24%|██▍       | 243/1000 [20:44<1:04:36,  5.12s/it]Configures the REST endpoint with redirect configuration . --> Add a REST endpoint --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredConfig [[redirect]] ( RedirectConfig redirectConfig ) { notNull ( redirectConfig , "Redirect config" ) ; return new RestAssuredConfig ( redirectConfig , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig [[addіce]] ( RedirectConfig redirectConfig ) { notNull ( redirectConfig , "Redirect config" ) ; return new RestAssuredConfig ( redirectConfig , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 237 ---------------------------------------------
Sets the default encoding charset . --> Returns a new encoder configuration --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[aperwayprveseapag]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 238 ---------------------------------------------
Configure the object mapperFactory . --> configure Jackson ObjectMapperFactory --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig jaxbObjectMapperFactory ( JAXBObjectMapperFactory [[jaxbObjectMapperFactory]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig jaxbObjectMapperFactory ( JAXBObjectMapperFactory [[cadebdftdapipass]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 239 ---------------------------------------------
Creates a new authentication scheme for the given user name and password . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[form]] ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme [[type]] ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( password ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 240 ---------------------------------------------
Sets the default object mapper type . --> [[[FAILED]]]

[[[[Adv]]]]: public ObjectMapperConfig defaultObjectMapperType ( ObjectMapperType [[defaultObjectMapperType]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig defaultObjectMapperType ( ObjectMapperType [[desktopibbehmagietype]] ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 241 ---------------------------------------------
Sets the config for RestAssociation . --> Create an instance of RestAssuredMockConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig logConfig ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[treeunvicg]] ( LogConfig logConfig ) { notNull ( [[treeunvicg]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[treeunvicg]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 242 ---------------------------------------------
Sets the session configuration . --> Create a new RestAssuredMockConfig object --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sessionConfig]] ( SessionConfig sessionConfig ) { notNull ( [[sessionConfig]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[sessionConfig]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[responsexفe]] ( SessionConfig sessionConfig ) { notNull ( [[responsexفe]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[responsexفe]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 243 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 146 / 97 / 0 / 243:  24%|██▍       | 243/1000 [20:44<1:04:36,  5.12s/it][Succeeded / Failed / Skipped / Total] 146 / 97 / 0 / 243:  24%|██▍       | 244/1000 [20:45<1:04:18,  5.10s/it][Succeeded / Failed / Skipped / Total] 147 / 97 / 0 / 244:  24%|██▍       | 244/1000 [20:45<1:04:18,  5.10s/it][Succeeded / Failed / Skipped / Total] 147 / 97 / 0 / 244:  24%|██▍       | 245/1000 [20:45<1:03:58,  5.08s/it][Succeeded / Failed / Skipped / Total] 147 / 98 / 0 / 245:  24%|██▍       | 245/1000 [20:45<1:03:58,  5.08s/it][Succeeded / Failed / Skipped / Total] 147 / 98 / 0 / 245:  25%|██▍       | 246/1000 [20:51<1:03:56,  5.09s/it][Succeeded / Failed / Skipped / Total] 148 / 98 / 0 / 246:  25%|██▍       | 246/1000 [20:51<1:03:56,  5.09s/it][Succeeded / Failed / Skipped / Total] 148 / 98 / 0 / 246:  25%|██▍       | 247/1000 [20:51<1:03:36,  5.07s/it][Succeeded / Failed / Skipped / Total] 148 / 98 / 1 / 247:  25%|██▍       | 247/1000 [20:51<1:03:36,  5.07s/it][Succeeded / Failed / Skipped / Total] 148 / 98 / 1 / 247:  25%|██▍       | 248/1000 [20:55<1:03:25,  5.06s/it][Succeeded / Failed / Skipped / Total] 149 / 98 / 1 / 248:  25%|██▍       | 248/1000 [20:55<1:03:25,  5.06s/it][Succeeded / Failed / Skipped / Total] 149 / 98 / 1 / 248:  25%|██▍       | 249/1000 [20:55<1:03:05,  5.04s/it][Succeeded / Failed / Skipped / Total] 150 / 98 / 1 / 249:  25%|██▍       | 249/1000 [20:55<1:03:05,  5.04s/it][Succeeded / Failed / Skipped / Total] 150 / 98 / 2 / 250:  25%|██▌       | 250/1000 [20:55<1:02:45,  5.02s/it][Succeeded / Failed / Skipped / Total] 150 / 98 / 2 / 250:  25%|██▌       | 251/1000 [20:55<1:02:26,  5.00s/it]Sets the restured config for the given JsonConfig . --> Create a new mock JsonConfig instance --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig jsonConfig ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[ᄌmccrossedfidesquare]] ( JsonConfig jsonConfig ) { notNull ( [[ᄌmccrossedfidesquare]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[ᄌmccrossedfidesquare]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 244 ---------------------------------------------
Sets the restured xml config . --> Create a new RestAssured MavenConfig object --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig xmlConfig ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[ngunfferq]] ( XmlConfig xmlConfig ) { notNull ( [[ngunfferq]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[ngunfferq]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 245 ---------------------------------------------
Build an NTLMuth scheme for the given user name password and domain . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String [[password]] , String workstation , String [[domain]] ) { final NTLMAuthScheme scheme = new NTLMAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[password]] ) ; scheme . setWorkstation ( workstation ) ; scheme . setDomain ( [[domain]] ) ; return scheme ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String [[sharing]] , String workstation , String [[surface]] ) { final NTLMAuthScheme scheme = new NTLMAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[sharing]] ) ; scheme . setWorkstation ( workstation ) ; scheme . setDomain ( [[surface]] ) ; return scheme ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 246 ---------------------------------------------
Sets the builder configuration . --> Default configuration for RestAssociation . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig encoderConfig ( EncoderConfig [[encoderConfig]] ) { notNull ( encoderConfig , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config

[[[[Adv]]]]: public RestAssuredMockMvcConfig encoderConfig ( EncoderConfig [[artsumerceconfortgging]] ) { notNull ( encoderConfig , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 247 ---------------------------------------------
Creates a new instance of RestAssured MvcConfig . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig mockMvcConfig ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 248 ---------------------------------------------
Sets the restured config . --> Construct a RestAssuredMockConfig object with custom configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[asyncConfig]] ( AsyncConfig asyncConfig ) { notNull ( [[asyncConfig]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[asyncConfig]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[acientbioconmign]] ( AsyncConfig asyncConfig ) { notNull ( [[acientbioconmign]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[acientbioconmign]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 249 ---------------------------------------------
Sets the HTTP header configuration . --> Create a new instance of RestAssuredService --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[headerConfig]] ( HeaderConfig headerConfig ) { notNull ( [[headerConfig]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[headerConfig]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[archiveeanфgp]] ( HeaderConfig headerConfig ) { notNull ( [[archiveeanфgp]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[archiveeanфgp]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 250 ---------------------------------------------
Create a new RestAssuredMockConfig object . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig paramConfig ( MockMvcParamConfig paramConfig ) { notNull ( paramConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 251 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 150 / 99 / 2 / 251:  25%|██▌       | 251/1000 [20:55<1:02:26,  5.00s/it][Succeeded / Failed / Skipped / Total] 151 / 99 / 2 / 252:  25%|██▌       | 252/1000 [21:03<1:02:29,  5.01s/it][Succeeded / Failed / Skipped / Total] 151 / 99 / 2 / 252:  25%|██▌       | 253/1000 [21:03<1:02:09,  4.99s/it][Succeeded / Failed / Skipped / Total] 151 / 100 / 2 / 253:  25%|██▌       | 253/1000 [21:03<1:02:09,  4.99s/it][Succeeded / Failed / Skipped / Total] 152 / 100 / 2 / 254:  25%|██▌       | 254/1000 [21:03<1:01:50,  4.97s/it][Succeeded / Failed / Skipped / Total] 152 / 100 / 2 / 254:  26%|██▌       | 255/1000 [21:03<1:01:31,  4.96s/it][Succeeded / Failed / Skipped / Total] 153 / 100 / 2 / 255:  26%|██▌       | 255/1000 [21:03<1:01:31,  4.96s/it][Succeeded / Failed / Skipped / Total] 154 / 100 / 2 / 256:  26%|██▌       | 256/1000 [21:11<1:01:35,  4.97s/it][Succeeded / Failed / Skipped / Total] 154 / 100 / 2 / 256:  26%|██▌       | 257/1000 [21:12<1:01:18,  4.95s/it][Succeeded / Failed / Skipped / Total] 155 / 100 / 2 / 257:  26%|██▌       | 257/1000 [21:12<1:01:18,  4.95s/it][Succeeded / Failed / Skipped / Total] 156 / 100 / 2 / 258:  26%|██▌       | 258/1000 [21:27<1:01:41,  4.99s/it][Succeeded / Failed / Skipped / Total] 156 / 100 / 2 / 258:  26%|██▌       | 259/1000 [21:32<1:01:37,  4.99s/it]Sets the RestAssuredMapper configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig [[objectMapperConfig]] ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[andwappedcrossedfarga]] ( ObjectMapperConfig [[itemseapihelfortgu]] ) { notNull ( [[andwappedcrossedfarga]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[andwappedcrossedfarga]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 252 ---------------------------------------------
Sets the restured matcher configuration . --> Default configuration for RestAssuredMatcher . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig matcherConfig ( MatcherConfig [[matcherConfig]] ) { notNull ( matcherConfig , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig matcherConfig ( MatcherConfig [[teamtypewarefk]] ) { notNull ( matcherConfig , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 253 ---------------------------------------------
Allow all host names . --> [[[FAILED]]]

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[allowingangointdlikeparents]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 254 ---------------------------------------------
Sets the mock mapper config . --> Creates a mock object configured for restarting . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[multiPartConfig]] ( MultiPartConfig multiPartConfig ) { notNull ( [[multiPartConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[multiPartConfig]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[biapateronging]] ( MultiPartConfig multiPartConfig ) { notNull ( [[biapateronging]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[biapateronging]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 255 ---------------------------------------------
Declare XMLPathConfig . --> return a new XmlPathConfig instance --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[_notserse]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 256 ---------------------------------------------
Sets the request headers . --> documentation inherited from HttpClient --> Socre: 1.0

[[[[Adv]]]]: public void [[setHeaders]] ( Map < ? , ? > headers ) { this . defaultRequestHeaders . clear ( ) ; if ( headers == null ) return ; for ( Object key : headers . keySet ( ) ) { Object val = headers . get ( key ) ; if ( val == null ) continue ; this . defaultRequestHeaders . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void [[graphedbs]] ( Map < ? , ? > headers ) { this . defaultRequestHeaders . clear ( ) ; if ( headers == null ) return ; for ( Object key : headers . keySet ( ) ) { Object val = headers . get ( key ) ; if ( val == null ) continue ; this . defaultRequestHeaders . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 257 ---------------------------------------------
Set the proxy to use . --> Perform a list of server --> Socre: 1.0

[[[[Adv]]]]: public void [[setProxy]] ( String host , int port , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[listvony]] ( String host , int port , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 258 ---------------------------------------------
Issues a HTTP request . --> Perform a command --> Socre: 1.0

[[[[Adv]]]]: public Object [[request]] ( String method , boolean hasBody , Closure [[configClosure]] ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , [[configClosure]] ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object [[command]] ( String method , boolean hasBody , Closure [[hostفxllisult]] ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . defaultContentType , hasBody , [[hostفxllisult]] ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 259 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 156 / 101 / 2 / 259:  26%|██▌       | 259/1000 [21:32<1:01:37,  4.99s/it][Succeeded / Failed / Skipped / Total] 156 / 101 / 2 / 259:  26%|██▌       | 260/1000 [21:39<1:01:39,  5.00s/it][Succeeded / Failed / Skipped / Total] 157 / 101 / 2 / 260:  26%|██▌       | 260/1000 [21:39<1:01:39,  5.00s/it][Succeeded / Failed / Skipped / Total] 157 / 101 / 2 / 260:  26%|██▌       | 261/1000 [21:44<1:01:34,  5.00s/it][Succeeded / Failed / Skipped / Total] 157 / 102 / 2 / 261:  26%|██▌       | 261/1000 [21:44<1:01:34,  5.00s/it][Succeeded / Failed / Skipped / Total] 157 / 102 / 2 / 261:  26%|██▌       | 262/1000 [21:50<1:01:31,  5.00s/it][Succeeded / Failed / Skipped / Total] 157 / 103 / 2 / 262:  26%|██▌       | 262/1000 [21:50<1:01:31,  5.00s/it][Succeeded / Failed / Skipped / Total] 157 / 103 / 2 / 262:  26%|██▋       | 263/1000 [21:58<1:01:33,  5.01s/it][Succeeded / Failed / Skipped / Total] 157 / 104 / 2 / 263:  26%|██▋       | 263/1000 [21:58<1:01:33,  5.01s/it][Succeeded / Failed / Skipped / Total] 157 / 104 / 2 / 263:  26%|██▋       | 264/1000 [21:58<1:01:16,  5.00s/it][Succeeded / Failed / Skipped / Total] 158 / 104 / 2 / 264:  26%|██▋       | 264/1000 [21:58<1:01:16,  5.00s/it][Succeeded / Failed / Skipped / Total] 158 / 104 / 2 / 264:  26%|██▋       | 265/1000 [22:01<1:01:05,  4.99s/it][Succeeded / Failed / Skipped / Total] 159 / 104 / 2 / 265:  26%|██▋       | 265/1000 [22:01<1:01:05,  4.99s/it][Succeeded / Failed / Skipped / Total] 159 / 104 / 2 / 265:  27%|██▋       | 266/1000 [22:04<1:00:55,  4.98s/it]Sets a multi - part header . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String [[name]] , String value ) { Validate . notEmpty ( [[name]] , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[chassis]] ( String [[line]] , String value ) { Validate . notEmpty ( [[line]] , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 260 ---------------------------------------------
Declares an XML path with the specified prefix . --> This method will not be overridden by subclasses --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declaredNamespace]] ( String [[prefix]] , String [[namespaceURI]] ) { Validate . notEmpty ( [[prefix]] , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[namespaceURI]] , "Namespace URI cannot be empty" ) ; Map < String , String > [[updatedNamespaces]] = new HashMap < String , String > ( declaredNamespaces ) ; [[updatedNamespaces]] . put ( [[prefix]] , [[namespaceURI]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[updatedNamespaces]] , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig [[becameremplate]] ( String [[robinson]] , String [[ofpacuni]] ) { Validate . notEmpty ( [[robinson]] , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[ofpacuni]] , "Namespace URI cannot be empty" ) ; Map < String , String > [[elasticemblemdrecity]] = new HashMap < String , String > ( declaredNamespaces ) ; [[elasticemblemdrecity]] . put ( [[robinson]] , [[ofpacuni]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[elasticemblemdrecity]] , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 261 ---------------------------------------------
Sets the control name . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String controlName ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . controlName = [[controlName]] ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[classbus]] ( String controlName ) { Validate . notEmpty ( [[classbus]] , "Control name cannot be empty" ) ; this . controlName = [[classbus]] ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 262 ---------------------------------------------
Reset resources . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[mit]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 263 ---------------------------------------------
Sets the credentials . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[basic]] ( String host , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[driver]] ( String host , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 264 ---------------------------------------------
Sets the response header . --> Sets the response headers --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder [[setHeader]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder [[angelptp]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 265 ---------------------------------------------
Create a new headers with the given header and additional headers . --> Concatenate header strings --> Socre: 1.0

[[[[Adv]]]]: public static Headers [[headers]] ( Header [[header]] , Header ... [[additionalHeaders]] ) { notNull ( [[header]] , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( [[header]] ) ; if ( [[additionalHeaders]] != null ) { Collections . addAll ( headerList , [[additionalHeaders]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers [[tensorstrings]] ( Header [[lists]] , Header ... [[addedheadser]] ) { notNull ( [[lists]] , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( [[lists]] ) ; if ( [[addedheadser]] != null ) { Collections . addAll ( headerList , [[addedheadser]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 266 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 160 / 104 / 2 / 266:  27%|██▋       | 266/1000 [22:04<1:00:55,  4.98s/it][Succeeded / Failed / Skipped / Total] 160 / 104 / 2 / 266:  27%|██▋       | 267/1000 [22:09<1:00:50,  4.98s/it][Succeeded / Failed / Skipped / Total] 160 / 105 / 2 / 267:  27%|██▋       | 267/1000 [22:09<1:00:50,  4.98s/it][Succeeded / Failed / Skipped / Total] 160 / 105 / 2 / 267:  27%|██▋       | 268/1000 [22:14<1:00:45,  4.98s/it][Succeeded / Failed / Skipped / Total] 160 / 106 / 2 / 268:  27%|██▋       | 268/1000 [22:14<1:00:45,  4.98s/it][Succeeded / Failed / Skipped / Total] 160 / 106 / 2 / 268:  27%|██▋       | 269/1000 [22:17<1:00:35,  4.97s/it][Succeeded / Failed / Skipped / Total] 160 / 107 / 2 / 269:  27%|██▋       | 269/1000 [22:17<1:00:35,  4.97s/it][Succeeded / Failed / Skipped / Total] 160 / 107 / 2 / 269:  27%|██▋       | 270/1000 [22:20<1:00:24,  4.97s/it][Succeeded / Failed / Skipped / Total] 160 / 108 / 2 / 270:  27%|██▋       | 270/1000 [22:20<1:00:24,  4.97s/it][Succeeded / Failed / Skipped / Total] 160 / 108 / 2 / 270:  27%|██▋       | 271/1000 [22:27<1:00:25,  4.97s/it][Succeeded / Failed / Skipped / Total] 160 / 109 / 2 / 271:  27%|██▋       | 271/1000 [22:27<1:00:25,  4.97s/it][Succeeded / Failed / Skipped / Total] 160 / 109 / 2 / 271:  27%|██▋       | 272/1000 [22:30<1:00:14,  4.96s/it][Succeeded / Failed / Skipped / Total] 160 / 110 / 2 / 272:  27%|██▋       | 272/1000 [22:30<1:00:14,  4.96s/it][Succeeded / Failed / Skipped / Total] 160 / 110 / 2 / 272:  27%|██▋       | 273/1000 [22:36<1:00:12,  4.97s/it][Succeeded / Failed / Skipped / Total] 160 / 111 / 2 / 273:  27%|██▋       | 273/1000 [22:36<1:00:12,  4.97s/it][Succeeded / Failed / Skipped / Total] 160 / 111 / 2 / 273:  27%|██▋       | 274/1000 [22:39<1:00:02,  4.96s/it][Succeeded / Failed / Skipped / Total] 160 / 112 / 2 / 274:  27%|██▋       | 274/1000 [22:39<1:00:02,  4.96s/it][Succeeded / Failed / Skipped / Total] 160 / 112 / 2 / 274:  28%|██▊       | 275/1000 [22:44<59:57,  4.96s/it]  [Succeeded / Failed / Skipped / Total] 160 / 113 / 2 / 275:  28%|██▊       | 275/1000 [22:44<59:57,  4.96s/it][Succeeded / Failed / Skipped / Total] 160 / 113 / 2 / 275:  28%|██▊       | 276/1000 [22:49<59:51,  4.96s/it]Build the REST response . --> Quick fix . --> Socre: 1.0

[[[[Adv]]]]: public Response [[build]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[fix]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 267 ---------------------------------------------
Sets the NTLM credentials . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[ntlm]] ( String host , int port , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[cume]] ( String host , int port , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 268 ---------------------------------------------
Matches cookie matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > [[valueMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[valueMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[table]] ( Matcher < ? super String > [[classwinner]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[classwinner]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
Matches cookie in cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher comment ( Matcher < ? super String > [[commentMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[commentMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher comment ( Matcher < ? super String > [[saymetlist]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[saymetlist]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 270 ---------------------------------------------
Creates a cookie matcher that matches expiry date . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher expiryDate ( Matcher < ? super Date > [[expiryDateMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[expiryDateMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher expiryDate ( Matcher < ? super Date > [[ncpirponelandsz]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[ncpirponelandsz]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
Applies a cookie to the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > [[domainMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[domainMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[network]] ( Matcher < ? super String > [[placewinr]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[placewinr]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 272 ---------------------------------------------
Applies a cookie to the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher path ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher path ( Matcher < ? super String > [[propertynetor]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[propertynetor]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 273 ---------------------------------------------
Applies a secured cookie to the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[secured]] ( Matcher < ? super Boolean > [[securedMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[securedMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[cookie]] ( Matcher < ? super Boolean > [[morganantimage]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[morganantimage]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
Creates a cookie matcher that matches HTTP only . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > [[httpOnlyMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[httpOnlyMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[fabricsmanui]] ( Matcher < ? super Boolean > [[fabricandfoldamar]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[fabricandfoldamar]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 275 ---------------------------------------------
Creates a cookie matcher that matches the version of the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[revision]] ( Matcher < ? super Integer > [[workratc]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[workratc]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 276 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 160 / 114 / 2 / 276:  28%|██▊       | 276/1000 [22:49<59:51,  4.96s/it][Succeeded / Failed / Skipped / Total] 160 / 114 / 2 / 276:  28%|██▊       | 277/1000 [23:00<1:00:02,  4.98s/it][Succeeded / Failed / Skipped / Total] 160 / 115 / 2 / 277:  28%|██▊       | 277/1000 [23:00<1:00:02,  4.98s/it][Succeeded / Failed / Skipped / Total] 160 / 115 / 2 / 277:  28%|██▊       | 278/1000 [23:04<59:54,  4.98s/it]  [Succeeded / Failed / Skipped / Total] 160 / 116 / 2 / 278:  28%|██▊       | 278/1000 [23:04<59:54,  4.98s/it][Succeeded / Failed / Skipped / Total] 160 / 116 / 2 / 278:  28%|██▊       | 279/1000 [23:05<59:39,  4.96s/it][Succeeded / Failed / Skipped / Total] 160 / 117 / 2 / 279:  28%|██▊       | 279/1000 [23:05<59:39,  4.96s/it][Succeeded / Failed / Skipped / Total] 160 / 117 / 2 / 279:  28%|██▊       | 280/1000 [23:06<59:25,  4.95s/it][Succeeded / Failed / Skipped / Total] 160 / 118 / 2 / 280:  28%|██▊       | 280/1000 [23:06<59:25,  4.95s/it][Succeeded / Failed / Skipped / Total] 160 / 118 / 2 / 280:  28%|██▊       | 281/1000 [23:08<59:13,  4.94s/it][Succeeded / Failed / Skipped / Total] 161 / 118 / 2 / 281:  28%|██▊       | 281/1000 [23:08<59:13,  4.94s/it][Succeeded / Failed / Skipped / Total] 161 / 118 / 2 / 281:  28%|██▊       | 282/1000 [23:13<59:07,  4.94s/it][Succeeded / Failed / Skipped / Total] 162 / 118 / 2 / 282:  28%|██▊       | 282/1000 [23:13<59:07,  4.94s/it][Succeeded / Failed / Skipped / Total] 162 / 118 / 2 / 282:  28%|██▊       | 283/1000 [23:14<58:52,  4.93s/it][Succeeded / Failed / Skipped / Total] 163 / 118 / 2 / 283:  28%|██▊       | 283/1000 [23:14<58:52,  4.93s/it][Succeeded / Failed / Skipped / Total] 163 / 118 / 2 / 283:  28%|██▊       | 284/1000 [23:20<58:50,  4.93s/it][Succeeded / Failed / Skipped / Total] 164 / 118 / 2 / 284:  28%|██▊       | 284/1000 [23:20<58:50,  4.93s/it][Succeeded / Failed / Skipped / Total] 164 / 118 / 2 / 284:  28%|██▊       | 285/1000 [23:20<58:34,  4.92s/it][Succeeded / Failed / Skipped / Total] 165 / 118 / 2 / 285:  28%|██▊       | 285/1000 [23:20<58:34,  4.92s/it][Succeeded / Failed / Skipped / Total] 165 / 118 / 2 / 285:  29%|██▊       | 286/1000 [23:22<58:20,  4.90s/it]Matches a cookie by matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher maxAge ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher maxAge ( Matcher < ? super Integer > [[tztywinrer]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[tztywinrer]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 277 ---------------------------------------------
Expect a header with expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , String [[expectedValue]] ) { spec . header ( [[headerName]] , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[anticipationredar]] ( String [[boxmail]] , String [[inputalu]] ) { spec . header ( [[boxmail]] , [[inputalu]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 278 ---------------------------------------------
Expect a cookie with expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectCookie]] ( String cookieName , String expectedValue ) { spec . cookie ( cookieName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[answericoouro]] ( String cookieName , String expectedValue ) { spec . cookie ( cookieName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 279 ---------------------------------------------
Expect a header to be expected . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String headerName , Matcher < String > [[expectedValueMatcher]] ) { spec . header ( headerName , [[expectedValueMatcher]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder [[alisonthira]] ( String headerName , Matcher < String > [[ingpmenatra]] ) { spec . header ( headerName , [[ingpmenatra]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 280 ---------------------------------------------
Returns a proxy configuration for the specified host . --> [[[FAILED]]]

[[[[Adv]]]]: public ProxySpecification [[withHost]] ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification [[atlast]] ( String [[central]] ) { return new ProxySpecification ( [[central]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 281 ---------------------------------------------
Configures a JsonPathConfig . --> Returns a new JsonPathConfig object --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[numberReturnType]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[numberReturnType]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig [[amutradeception]] ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( [[amutradeception]] , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 282 ---------------------------------------------
Sets the default parser type . --> Config for dynamic rassideviewType --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[dynamicrassideview]] ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , [[dynamicrassideview]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 283 ---------------------------------------------
Enable logging of request and response . --> Add a LogConfig --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[enableLoggingOfRequestAndResponseIfValidationFails]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig [[addressthorguelyegoeptownwasciegreemediachfoys]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 284 ---------------------------------------------
Sets the default log . --> Set 3rd flow --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream [[printStream]] ) { return new LogConfig ( [[printStream]] , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[3rdflow]] ( PrintStream [[backshear]] ) { return new LogConfig ( [[backshear]] , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 285 ---------------------------------------------
Sets default boundary . --> Configure basebata config --> Socre: 1.0

[[[[Adv]]]]: public MultiPartConfig [[defaultBoundary]] ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[defaultBoundary]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig [[basebataire]] ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[basebataire]] , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 286 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 166 / 118 / 2 / 286:  29%|██▊       | 286/1000 [23:22<58:20,  4.90s/it][Succeeded / Failed / Skipped / Total] 166 / 118 / 2 / 286:  29%|██▊       | 287/1000 [23:31<58:26,  4.92s/it][Succeeded / Failed / Skipped / Total] 166 / 119 / 2 / 287:  29%|██▊       | 287/1000 [23:31<58:26,  4.92s/it][Succeeded / Failed / Skipped / Total] 166 / 119 / 2 / 287:  29%|██▉       | 288/1000 [23:35<58:18,  4.91s/it][Succeeded / Failed / Skipped / Total] 167 / 119 / 2 / 288:  29%|██▉       | 288/1000 [23:35<58:18,  4.91s/it][Succeeded / Failed / Skipped / Total] 167 / 119 / 2 / 288:  29%|██▉       | 289/1000 [23:36<58:05,  4.90s/it][Succeeded / Failed / Skipped / Total] 167 / 120 / 2 / 289:  29%|██▉       | 289/1000 [23:36<58:05,  4.90s/it][Succeeded / Failed / Skipped / Total] 167 / 120 / 2 / 289:  29%|██▉       | 290/1000 [23:45<58:11,  4.92s/it][Succeeded / Failed / Skipped / Total] 168 / 120 / 2 / 290:  29%|██▉       | 290/1000 [23:45<58:11,  4.92s/it][Succeeded / Failed / Skipped / Total] 168 / 120 / 2 / 290:  29%|██▉       | 291/1000 [23:47<57:57,  4.90s/it][Succeeded / Failed / Skipped / Total] 168 / 121 / 2 / 291:  29%|██▉       | 291/1000 [23:47<57:57,  4.90s/it][Succeeded / Failed / Skipped / Total] 168 / 121 / 2 / 291:  29%|██▉       | 292/1000 [23:55<58:00,  4.92s/it][Succeeded / Failed / Skipped / Total] 168 / 122 / 2 / 292:  29%|██▉       | 292/1000 [23:55<58:00,  4.92s/it][Succeeded / Failed / Skipped / Total] 168 / 122 / 2 / 292:  29%|██▉       | 293/1000 [23:57<57:48,  4.91s/it][Succeeded / Failed / Skipped / Total] 169 / 122 / 2 / 293:  29%|██▉       | 293/1000 [23:57<57:48,  4.91s/it][Succeeded / Failed / Skipped / Total] 169 / 122 / 2 / 293:  29%|██▉       | 294/1000 [24:02<57:44,  4.91s/it][Succeeded / Failed / Skipped / Total] 170 / 122 / 2 / 294:  29%|██▉       | 294/1000 [24:02<57:44,  4.91s/it][Succeeded / Failed / Skipped / Total] 170 / 122 / 2 / 294:  30%|██▉       | 295/1000 [24:05<57:33,  4.90s/it][Succeeded / Failed / Skipped / Total] 171 / 122 / 2 / 295:  30%|██▉       | 295/1000 [24:05<57:33,  4.90s/it][Succeeded / Failed / Skipped / Total] 171 / 122 / 2 / 295:  30%|██▉       | 296/1000 [24:05<57:18,  4.88s/it]Creates a HttpRequestBase object based on the given HTTP method and HTTP method . --> Create HttpRequestBase --> Socre: 1.0

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI [[uri]] , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI [[cdei]] , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 287 ---------------------------------------------
Adds an attribute to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addAttribute]] ( String [[attributeName]] , Object attributeValue ) { spec . attribute ( [[attributeName]] , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[jectltredguator]] ( String [[assignedt]] , Object attributeValue ) { spec . attribute ( [[assignedt]] , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 288 ---------------------------------------------
Add result handlers . --> Sets the builder for the builder . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addResultHandlers]] ( ResultHandler [[resultHandler]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[resultHandler]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[anddeswalries]] ( ResultHandler [[2013heimerier]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[2013heimerier]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 289 ---------------------------------------------
Adds a header to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String [[headerName]] , String headerValue ) { spec . header ( [[headerName]] , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[jectactend]] ( String [[endtype]] , String headerValue ) { spec . header ( [[endtype]] , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 290 ---------------------------------------------
Sets the HttpClientFactory . --> Configure HttpClientFactory --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig httpClientFactory ( HttpClientFactory [[httpClientFactory]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig httpClientFactory ( HttpClientFactory [[appcarirress]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 291 ---------------------------------------------
Adds a multi - part request . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addMultiPart]] ( String [[controlName]] , String contentBody , String [[mimeType]] ) { spec . multiPart ( [[controlName]] , [[mimeType]] ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[zampulddroput]] ( String [[classfront]] , String contentBody , String [[ftmingv]] ) { spec . multiPart ( [[classfront]] , [[ftmingv]] ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 292 ---------------------------------------------
Sets a parameter for this HTTP client . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[HttpClientConfig]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[newParams]] = new HashMap < String , Object > ( httpClientParams ) ; [[newParams]] . put ( parameterName , parameterValue ) ; return new [[HttpClientConfig]] ( httpClientFactory , [[newParams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > [[sasdeliswarduft]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[newerenomps]] = new HashMap < String , Object > ( httpClientParams ) ; [[newerenomps]] . put ( parameterName , parameterValue ) ; return new [[sasdeliswarduft]] ( httpClientFactory , [[newerenomps]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 293 ---------------------------------------------
Configures the HTTP MultipartMode . --> Get aggregator configuration --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpMultipartMode]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[httpMultipartMode]] , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig [[aggregatorwuwticclasshoders]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[aggregatorwuwticclasshoders]] , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 294 ---------------------------------------------
Gets int . --> Send resonse to server --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[sendres]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 295 ---------------------------------------------
Gets the value . --> Gets resource --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion [[jsonAssertion]] = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) [[jsonAssertion]] . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[scope]] > [[scope]] get ( String path ) { final JSONAssertion [[thomassianuceratᆫ]] = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[scope]] ) [[thomassianuceratᆫ]] . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 296 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 172 / 122 / 2 / 296:  30%|██▉       | 296/1000 [24:05<57:18,  4.88s/it][Succeeded / Failed / Skipped / Total] 172 / 122 / 2 / 296:  30%|██▉       | 297/1000 [24:12<57:18,  4.89s/it][Succeeded / Failed / Skipped / Total] 173 / 122 / 2 / 297:  30%|██▉       | 297/1000 [24:12<57:18,  4.89s/it][Succeeded / Failed / Skipped / Total] 173 / 122 / 2 / 297:  30%|██▉       | 298/1000 [24:13<57:05,  4.88s/it][Succeeded / Failed / Skipped / Total] 174 / 122 / 2 / 298:  30%|██▉       | 298/1000 [24:13<57:05,  4.88s/it][Succeeded / Failed / Skipped / Total] 174 / 122 / 2 / 298:  30%|██▉       | 299/1000 [24:21<57:06,  4.89s/it][Succeeded / Failed / Skipped / Total] 174 / 123 / 2 / 299:  30%|██▉       | 299/1000 [24:21<57:06,  4.89s/it][Succeeded / Failed / Skipped / Total] 174 / 123 / 2 / 299:  30%|███       | 300/1000 [24:23<56:55,  4.88s/it][Succeeded / Failed / Skipped / Total] 175 / 123 / 2 / 300:  30%|███       | 300/1000 [24:23<56:55,  4.88s/it][Succeeded / Failed / Skipped / Total] 175 / 123 / 2 / 300:  30%|███       | 301/1000 [24:25<56:43,  4.87s/it][Succeeded / Failed / Skipped / Total] 176 / 123 / 2 / 301:  30%|███       | 301/1000 [24:25<56:43,  4.87s/it][Succeeded / Failed / Skipped / Total] 176 / 123 / 2 / 301:  30%|███       | 302/1000 [24:38<56:57,  4.90s/it][Succeeded / Failed / Skipped / Total] 176 / 124 / 2 / 302:  30%|███       | 302/1000 [24:38<56:57,  4.90s/it][Succeeded / Failed / Skipped / Total] 176 / 124 / 2 / 302:  30%|███       | 303/1000 [24:42<56:50,  4.89s/it][Succeeded / Failed / Skipped / Total] 176 / 125 / 2 / 303:  30%|███       | 303/1000 [24:42<56:50,  4.89s/it][Succeeded / Failed / Skipped / Total] 176 / 125 / 2 / 303:  30%|███       | 304/1000 [24:45<56:41,  4.89s/it][Succeeded / Failed / Skipped / Total] 177 / 125 / 2 / 304:  30%|███       | 304/1000 [24:45<56:41,  4.89s/it][Succeeded / Failed / Skipped / Total] 177 / 125 / 2 / 304:  30%|███       | 305/1000 [24:55<56:47,  4.90s/it][Succeeded / Failed / Skipped / Total] 177 / 126 / 2 / 305:  30%|███       | 305/1000 [24:55<56:47,  4.90s/it][Succeeded / Failed / Skipped / Total] 177 / 126 / 2 / 305:  31%|███       | 306/1000 [24:58<56:38,  4.90s/it][Succeeded / Failed / Skipped / Total] 178 / 126 / 2 / 306:  31%|███       | 306/1000 [24:58<56:38,  4.90s/it][Succeeded / Failed / Skipped / Total] 178 / 126 / 2 / 306:  31%|███       | 307/1000 [25:00<56:27,  4.89s/it][Succeeded / Failed / Skipped / Total] 178 / 127 / 2 / 307:  31%|███       | 307/1000 [25:00<56:27,  4.89s/it][Succeeded / Failed / Skipped / Total] 178 / 127 / 2 / 307:  31%|███       | 308/1000 [25:03<56:17,  4.88s/it]Returns the byte at the given path . --> Print manman file --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[printmanete]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 297 ---------------------------------------------
Returns the float value . --> Read ccl image --> Socre: 1.0

[[[[Adv]]]]: public float [[getFloat]] ( String path ) { final Object value = get ( path ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[holdclimage]] ( String path ) { final Object value = get ( path ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 298 ---------------------------------------------
Get short value . --> Specify route --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[aswith]] ( String [[route]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 299 ---------------------------------------------
Get the double value . --> [[[FAILED]]]

[[[[Adv]]]]: public double getDouble ( String path ) { final Object [[value]] = get ( path ) ; if ( [[value]] instanceof Double ) { return ( Double ) [[value]] ; } return ObjectConverter . convertObjectTo ( [[value]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double getDouble ( String path ) { final Object [[flag]] = get ( path ) ; if ( [[flag]] instanceof Double ) { return ( Double ) [[flag]] ; } return ObjectConverter . convertObjectTo ( [[flag]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 300 ---------------------------------------------
Get long . --> Elapsed time --> Socre: 1.0

[[[[Adv]]]]: public long [[getLong]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[alltime]] ( String [[bound]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 301 ---------------------------------------------
Adds the given http client parameters . --> Copied from HttpClientConfigHelper --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[addParams]] ( Map < String , ? > [[httpClientParams]] ) { notNull ( [[httpClientParams]] , "httpClientParams" ) ; final Map < String , Object > [[newParams]] = new HashMap < String , Object > ( this . [[httpClientParams]] ) ; [[newParams]] . putAll ( [[httpClientParams]] ) ; return new HttpClientConfig ( httpClientFactory , [[newParams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig [[fixmalies]] ( Map < String , ? > [[vafrientalsms]] ) { notNull ( [[vafrientalsms]] , "httpClientParams" ) ; final Map < String , Object > [[additionalgraveys]] = new HashMap < String , Object > ( this . [[limablonicanaps]] ) ; [[additionalgraveys]] . putAll ( [[vafrientalsms]] ) ; return new HttpClientConfig ( httpClientFactory , [[additionalgraveys]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 302 ---------------------------------------------
Get a map element . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[K]] , V > Map < [[K]] , V > [[getMap]] ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < [[point]] , V > Map < [[point]] , V > [[gorit]] ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 303 ---------------------------------------------
Gets the value of the object as a type . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] getObject ( String path , Class < [[T]] > objectType ) { Object [[object]] = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( [[object]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < [[following]] > [[following]] getObject ( String path , Class < [[following]] > objectType ) { Object [[end]] = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( [[end]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 304 ---------------------------------------------
Sets the body of the request . --> Set databus --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[setBody]] ( Object object , ObjectMapper [[mapper]] ) { spec . body ( object , [[mapper]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder [[databus]] ( Object object , ObjectMapper [[mountpers]] ) { spec . body ( object , [[mountpers]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 305 ---------------------------------------------
Adds a cookie to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addCookie]] ( String key , Object value , Object ... [[cookieNameValuePairs]] ) { spec . cookie ( key , value , [[cookieNameValuePairs]] ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[rycomutiess]] ( String key , Object value , Object ... [[dictionarylikeadweapils]] ) { spec . cookie ( key , value , [[dictionarylikeadweapils]] ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 306 ---------------------------------------------
Add a parameter to the request . --> Set path parameters --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Collection < ? > parameterValues ) { spec . param ( [[parameterName]] , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[askpathm]] ( String [[tankplay]] , Collection < ? > parameterValues ) { spec . param ( [[tankplay]] , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 307 ---------------------------------------------
Adds a parameter to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Object ... parameterValues ) { spec . param ( [[parameterName]] , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[endprock]] ( String [[basebus]] , Object ... parameterValues ) { spec . param ( [[basebus]] , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 308 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 179 / 127 / 2 / 308:  31%|███       | 308/1000 [25:03<56:17,  4.88s/it][Succeeded / Failed / Skipped / Total] 179 / 127 / 2 / 308:  31%|███       | 309/1000 [25:10<56:16,  4.89s/it][Succeeded / Failed / Skipped / Total] 179 / 128 / 2 / 309:  31%|███       | 309/1000 [25:10<56:16,  4.89s/it][Succeeded / Failed / Skipped / Total] 179 / 128 / 2 / 309:  31%|███       | 310/1000 [25:18<56:19,  4.90s/it][Succeeded / Failed / Skipped / Total] 180 / 128 / 2 / 310:  31%|███       | 310/1000 [25:18<56:19,  4.90s/it][Succeeded / Failed / Skipped / Total] 180 / 128 / 2 / 310:  31%|███       | 311/1000 [25:18<56:04,  4.88s/it][Succeeded / Failed / Skipped / Total] 181 / 128 / 2 / 311:  31%|███       | 311/1000 [25:18<56:04,  4.88s/it][Succeeded / Failed / Skipped / Total] 181 / 128 / 2 / 311:  31%|███       | 312/1000 [25:20<55:53,  4.87s/it][Succeeded / Failed / Skipped / Total] 181 / 129 / 2 / 312:  31%|███       | 312/1000 [25:20<55:53,  4.87s/it][Succeeded / Failed / Skipped / Total] 181 / 129 / 2 / 312:  31%|███▏      | 313/1000 [25:24<55:47,  4.87s/it][Succeeded / Failed / Skipped / Total] 182 / 129 / 2 / 313:  31%|███▏      | 313/1000 [25:24<55:47,  4.87s/it][Succeeded / Failed / Skipped / Total] 182 / 129 / 2 / 313:  31%|███▏      | 314/1000 [25:26<55:34,  4.86s/it][Succeeded / Failed / Skipped / Total] 183 / 129 / 2 / 314:  31%|███▏      | 314/1000 [25:26<55:34,  4.86s/it][Succeeded / Failed / Skipped / Total] 183 / 129 / 2 / 314:  32%|███▏      | 315/1000 [25:30<55:28,  4.86s/it][Succeeded / Failed / Skipped / Total] 184 / 129 / 2 / 315:  32%|███▏      | 315/1000 [25:30<55:28,  4.86s/it][Succeeded / Failed / Skipped / Total] 184 / 129 / 2 / 315:  32%|███▏      | 316/1000 [25:38<55:29,  4.87s/it]Logs the response to the given stream . --> logToFilter --> Socre: 1.0

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream [[stream]] , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( [[stream]] , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream [[creek]] , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( [[creek]] , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 309 ---------------------------------------------
Get the value of the specified type as a List . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > List < T > [[getList]] ( String path , Class < T > [[genericType]] ) { if ( [[genericType]] == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T [[e]] ; if ( t instanceof Map && ! [[genericType]] . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > [[canvasrise]] ( String path , Class < T > [[csname]] ) { if ( [[csname]] == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( path ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T [[g]] ; if ( t instanceof Map && ! [[csname]] . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 310 ---------------------------------------------
Create a custom update strategy . --> Create a mock service config --> Socre: 1.0

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy [[updateStrategy]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[updateStrategy]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[ripromisipguesalseɡ]] ( UpdateStrategy [[undotatteagen]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[undotatteagen]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 311 ---------------------------------------------
Adds additional cookies to the request . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Cookies cookies ( Cookie [[cookie]] , Cookie ... [[additionalCookies]] ) { AssertParameter . notNull ( [[cookie]] , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( [[cookie]] ) ; Collections . addAll ( cookieList , [[additionalCookies]] ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies cookies ( Cookie [[driver]] , Cookie ... [[atomicchoakien]] ) { AssertParameter . notNull ( [[driver]] , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( [[driver]] ) ; Collections . addAll ( cookieList , [[atomicchoakien]] ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 312 ---------------------------------------------
Indexes the bindings for this context . --> [[[FAILED]]]

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[add]] ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 313 ---------------------------------------------
Convert constant string representation to constant mapping . --> Private helper for testing --> Socre: 1.0

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > key , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[bridgeotesenenciesliceisbud]] ( Key < T > key , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 314 ---------------------------------------------
Clean up data from backing map . --> from interface Map --> Socre: 1.0

[[[[Adv]]]]: private void [[cleanUpForCollectedState]] ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > [[set]] = backingMap . get ( keyAndSource . key ) ; if ( [[set]] != null ) { [[set]] . remove ( keyAndSource . source ) ; if ( [[set]] . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void [[orchidxclepteteeact]] ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > [[hat]] = backingMap . get ( keyAndSource . key ) ; if ( [[hat]] != null ) { [[hat]] . remove ( keyAndSource . source ) ; if ( [[hat]] . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 315 ---------------------------------------------
Remove failed binding . --> Drops specified InjectionPoint --> Socre: 1.0

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[dropfleidedrirealink]] ( Binding < ? > binding , InjectionPoint ip ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 316 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 184 / 130 / 2 / 316:  32%|███▏      | 316/1000 [25:38<55:29,  4.87s/it][Succeeded / Failed / Skipped / Total] 184 / 130 / 2 / 316:  32%|███▏      | 317/1000 [25:44<55:28,  4.87s/it][Succeeded / Failed / Skipped / Total] 184 / 131 / 2 / 317:  32%|███▏      | 317/1000 [25:44<55:28,  4.87s/it][Succeeded / Failed / Skipped / Total] 184 / 131 / 2 / 317:  32%|███▏      | 318/1000 [25:48<55:21,  4.87s/it][Succeeded / Failed / Skipped / Total] 185 / 131 / 2 / 318:  32%|███▏      | 318/1000 [25:48<55:21,  4.87s/it][Succeeded / Failed / Skipped / Total] 185 / 131 / 2 / 318:  32%|███▏      | 319/1000 [26:02<55:36,  4.90s/it][Succeeded / Failed / Skipped / Total] 186 / 131 / 2 / 319:  32%|███▏      | 319/1000 [26:02<55:36,  4.90s/it][Succeeded / Failed / Skipped / Total] 186 / 131 / 2 / 319:  32%|███▏      | 320/1000 [26:10<55:37,  4.91s/it][Succeeded / Failed / Skipped / Total] 187 / 131 / 2 / 320:  32%|███▏      | 320/1000 [26:10<55:37,  4.91s/it][Succeeded / Failed / Skipped / Total] 187 / 131 / 2 / 320:  32%|███▏      | 321/1000 [26:11<55:23,  4.90s/it][Succeeded / Failed / Skipped / Total] 187 / 132 / 2 / 321:  32%|███▏      | 321/1000 [26:11<55:23,  4.90s/it][Succeeded / Failed / Skipped / Total] 187 / 132 / 2 / 321:  32%|███▏      | 322/1000 [26:16<55:19,  4.90s/it][Succeeded / Failed / Skipped / Total] 187 / 133 / 2 / 322:  32%|███▏      | 322/1000 [26:16<55:19,  4.90s/it][Succeeded / Failed / Skipped / Total] 187 / 133 / 2 / 322:  32%|███▏      | 323/1000 [26:25<55:23,  4.91s/it]Returns the internal dependencies of the given binding . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > [[binding]] ) { if ( [[binding]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[binding]] ) . getInternalDependencies ( ) ; } else if ( [[binding]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[binding]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[haveconrorazipathort]] ( BindingImpl < ? > [[framework]] ) { if ( [[framework]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[framework]] ) . getInternalDependencies ( ) ; } else if ( [[framework]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[framework]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 317 ---------------------------------------------
Creates an uninitialized binding . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[ErrorsException]] { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[argumentsongper]] { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 318 ---------------------------------------------
Gets all parameters . --> Get all the tankgiven objects --> Socre: 1.0

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext context , SingleParameterInjector < ? > [ ] [[parameterInjectors]] ) throws InternalProvisionException { if ( [[parameterInjectors]] == null ) { return NO_ARGUMENTS ; } int [[size]] = [[parameterInjectors]] . length ; Object [ ] parameters = new Object [ [[size]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext context , SingleParameterInjector < ? > [ ] [[tankgiquestions]] ) throws InternalProvisionException { if ( [[tankgiquestions]] == null ) { return NO_ARGUMENTS ; } int [[smaller]] = [[tankgiquestions]] . length ; Object [ ] parameters = new Object [ [[smaller]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 319 ---------------------------------------------
Binds the logger . --> Helper method for creating Kdragagard --> Socre: 1.0

[[[[Adv]]]]: private static void [[bindLogger]] ( InjectorImpl injector ) { Key < Logger > [[key]] = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( [[key]] , new ProviderInstanceBindingImpl < Logger > ( injector , [[key]] , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void [[kdragard]] ( InjectorImpl injector ) { Key < Logger > [[fin]] = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( [[fin]] , new ProviderInstanceBindingImpl < Logger > ( injector , [[fin]] , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 320 ---------------------------------------------
Returns true if the two methods overrides . --> Lieferts two methods --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[overrides]] ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[andlawwhile]] ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 321 ---------------------------------------------
Binds the given injector . --> [[[FAILED]]]

[[[[Adv]]]]: private static void bindInjector ( InjectorImpl injector ) { Key < Injector > [[key]] = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( [[key]] , new ProviderInstanceBindingImpl < Injector > ( injector , [[key]] , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void bindInjector ( InjectorImpl injector ) { Key < Injector > [[to]] = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( [[to]] , new ProviderInstanceBindingImpl < Injector > ( injector , [[to]] , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 322 ---------------------------------------------
The type of the provider . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[wwwthing]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 323 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 187 / 134 / 2 / 323:  32%|███▏      | 323/1000 [26:25<55:23,  4.91s/it][Succeeded / Failed / Skipped / Total] 187 / 134 / 2 / 323:  32%|███▏      | 324/1000 [26:31<55:21,  4.91s/it][Succeeded / Failed / Skipped / Total] 187 / 135 / 2 / 324:  32%|███▏      | 324/1000 [26:31<55:21,  4.91s/it][Succeeded / Failed / Skipped / Total] 187 / 135 / 2 / 324:  32%|███▎      | 325/1000 [26:35<55:13,  4.91s/it][Succeeded / Failed / Skipped / Total] 188 / 135 / 2 / 325:  32%|███▎      | 325/1000 [26:35<55:13,  4.91s/it][Succeeded / Failed / Skipped / Total] 188 / 135 / 2 / 325:  33%|███▎      | 326/1000 [26:37<55:02,  4.90s/it][Succeeded / Failed / Skipped / Total] 188 / 136 / 2 / 326:  33%|███▎      | 326/1000 [26:37<55:02,  4.90s/it][Succeeded / Failed / Skipped / Total] 188 / 136 / 2 / 326:  33%|███▎      | 327/1000 [26:41<54:56,  4.90s/it][Succeeded / Failed / Skipped / Total] 189 / 136 / 2 / 327:  33%|███▎      | 327/1000 [26:41<54:56,  4.90s/it][Succeeded / Failed / Skipped / Total] 189 / 136 / 2 / 327:  33%|███▎      | 328/1000 [26:46<54:50,  4.90s/it][Succeeded / Failed / Skipped / Total] 189 / 137 / 2 / 328:  33%|███▎      | 328/1000 [26:46<54:50,  4.90s/it][Succeeded / Failed / Skipped / Total] 189 / 137 / 2 / 328:  33%|███▎      | 329/1000 [26:49<54:42,  4.89s/it][Succeeded / Failed / Skipped / Total] 190 / 137 / 2 / 329:  33%|███▎      | 329/1000 [26:49<54:42,  4.89s/it][Succeeded / Failed / Skipped / Total] 190 / 137 / 2 / 329:  33%|███▎      | 330/1000 [26:52<54:34,  4.89s/it]Cleans the state of the given binding . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[cleanup]] ( BindingImpl < ? > [[binding]] , Set < Key > [[encountered]] ) { boolean [[bindingFailed]] = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( [[binding]] ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( [[encountered]] . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean [[maintenance]] ( BindingImpl < ? > [[null]] , Set < Key > [[encounter]] ) { boolean [[bindswallis]] = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( [[null]] ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( [[encounter]] . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 324 ---------------------------------------------
Initializes the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( MembersInjector < T > delegate ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void [[incizeranddict]] ( MembersInjector < T > delegate ) { checkState ( this . [[committee]] == null , "delegate already initialized" ) ; this . [[committee]] = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 325 ---------------------------------------------
Returns the TypeLiteral for the given key literal . --> Validates the typeLiteral --> Socre: 1.0

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[canonicalizeForKey]] ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > [[publicizedapx]] ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 326 ---------------------------------------------
Check if there are any binding annotations found in the given member . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean checkForMisplacedBindingAnnotations ( Member [[member]] , Errors errors ) { Annotation [[misplacedBindingAnnotation]] = Annotations . findBindingAnnotation ( errors , [[member]] , ( ( AnnotatedElement ) [[member]] ) . getAnnotations ( ) ) ; if ( [[misplacedBindingAnnotation]] == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean checkForMisplacedBindingAnnotations ( Member [[name]] , Errors errors ) { Annotation [[ysworthybugingappolito]] = Annotations . findBindingAnnotation ( errors , [[name]] , ( ( AnnotatedElement ) [[name]] ) . getAnnotations ( ) ) ; if ( [[ysworthybugingappolito]] == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 327 ---------------------------------------------
Prepare the built in converters . --> Enter hailedialfeans --> Socre: 1.0

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[enterbhailedialfeans]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 328 ---------------------------------------------
Resolves all types in the given array of types . --> [[[FAILED]]]

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[resolveAll]] ( Type [ ] [[types]] ) { TypeLiteral < ? > [ ] [[result]] = new TypeLiteral < ? > [ [[types]] . length ] ; for ( int t = 0 ; t < [[types]] . length ; t ++ ) { [[result]] [ t ] = resolve ( [[types]] [ t ] ) ; } return ImmutableList . copyOf ( [[result]] ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[dispositionat]] ( Type [ ] [[designs]] ) { TypeLiteral < ? > [ ] [[destination]] = new TypeLiteral < ? > [ [[designs]] . length ] ; for ( int t = 0 ; t < [[designs]] . length ; t ++ ) { [[destination]] [ t ] = resolve ( [[designs]] [ t ] ) ; } return ImmutableList . copyOf ( [[destination]] ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 329 ---------------------------------------------
Checks whether the given member is public or not . --> is public callable --> Socre: 1.0

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member member ) { if ( ! Modifier . isPublic ( member . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] [[parameterTypes]] ; if ( member instanceof Constructor ) { [[parameterTypes]] = ( ( Constructor ) member ) . getParameterTypes ( ) ; } else { Method method = ( Method ) member ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } [[parameterTypes]] = method . getParameterTypes ( ) ; } for ( Class < ? > type : [[parameterTypes]] ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member member ) { if ( ! Modifier . isPublic ( member . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] [[tankfected]] ; if ( member instanceof Constructor ) { [[tankfected]] = ( ( Constructor ) member ) . getParameterTypes ( ) ; } else { Method method = ( Method ) member ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } [[tankfected]] = method . getParameterTypes ( ) ; } for ( Class < ? > type : [[tankfected]] ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 330 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 191 / 137 / 2 / 330:  33%|███▎      | 330/1000 [26:52<54:34,  4.89s/it][Succeeded / Failed / Skipped / Total] 191 / 137 / 2 / 330:  33%|███▎      | 331/1000 [26:56<54:27,  4.88s/it][Succeeded / Failed / Skipped / Total] 191 / 138 / 2 / 331:  33%|███▎      | 331/1000 [26:56<54:27,  4.88s/it][Succeeded / Failed / Skipped / Total] 191 / 138 / 2 / 331:  33%|███▎      | 332/1000 [26:59<54:17,  4.88s/it][Succeeded / Failed / Skipped / Total] 192 / 138 / 2 / 332:  33%|███▎      | 332/1000 [26:59<54:17,  4.88s/it][Succeeded / Failed / Skipped / Total] 192 / 138 / 2 / 332:  33%|███▎      | 333/1000 [27:05<54:16,  4.88s/it][Succeeded / Failed / Skipped / Total] 192 / 139 / 2 / 333:  33%|███▎      | 333/1000 [27:05<54:16,  4.88s/it][Succeeded / Failed / Skipped / Total] 192 / 139 / 2 / 333:  33%|███▎      | 334/1000 [27:16<54:23,  4.90s/it][Succeeded / Failed / Skipped / Total] 192 / 140 / 2 / 334:  33%|███▎      | 334/1000 [27:16<54:23,  4.90s/it][Succeeded / Failed / Skipped / Total] 192 / 140 / 2 / 334:  34%|███▎      | 335/1000 [27:19<54:14,  4.89s/it][Succeeded / Failed / Skipped / Total] 193 / 140 / 2 / 335:  34%|███▎      | 335/1000 [27:19<54:14,  4.89s/it][Succeeded / Failed / Skipped / Total] 193 / 140 / 2 / 335:  34%|███▎      | 336/1000 [27:20<54:01,  4.88s/it][Succeeded / Failed / Skipped / Total] 194 / 140 / 2 / 336:  34%|███▎      | 336/1000 [27:20<54:01,  4.88s/it][Succeeded / Failed / Skipped / Total] 194 / 140 / 2 / 336:  34%|███▎      | 337/1000 [27:20<53:47,  4.87s/it][Succeeded / Failed / Skipped / Total] 195 / 140 / 2 / 337:  34%|███▎      | 337/1000 [27:20<53:47,  4.87s/it][Succeeded / Failed / Skipped / Total] 195 / 140 / 2 / 337:  34%|███▍      | 338/1000 [27:23<53:38,  4.86s/it]Converts the given class loader to the system bridge . --> Get balancer --> Socre: 1.0

[[[[Adv]]]]: private static ClassLoader [[canonicalize]] ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader [[balerate]] ( ClassLoader [[viewbootleader]] ) { return [[viewbootleader]] != null ? [[viewbootleader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 331 ---------------------------------------------
Request an initializer for the given injection point . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[provisionCallback]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[rderatalbuch]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 332 ---------------------------------------------
Fixes annotations . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: public Key < ? > [[fixAnnotations]] ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > [[fixposterouturs]] ( Key < ? > key ) { return key . getAnnotation ( ) == null ? key : Key . get ( key . getTypeLiteral ( ) , key . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 333 ---------------------------------------------
Determines if the class has the same version --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader classLoader ) { Class < ? > [[fc]] = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( [[fc]] . getName ( ) ) == [[fc]] ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[itcomeacexdreudibb]] ( ClassLoader classLoader ) { Class < ? > [[fl]] = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( [[fl]] . getName ( ) ) == [[fl]] ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 334 ---------------------------------------------
Validates the initial injectables . --> [[[FAILED]]]

[[[[Adv]]]]: void [[validateOustandingInjections]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void [[auditulelikechanvanthibedres]] ( Errors errors ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 335 ---------------------------------------------
Create a new instance with the given arguments . --> create a new object --> Socre: 1.0

[[[[Adv]]]]: public T newInstance ( Object [ ] [[args]] ) throws Throwable { constructor . setAccessible ( "[[True]]" == "[[True]]" ) ; try { return constructor . newInstance ( [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T newInstance ( Object [ ] [[algp]] ) throws Throwable { constructor . setAccessible ( "[[a]]" == "[[a]]" ) ; try { return constructor . newInstance ( [[algp]] ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 336 ---------------------------------------------
Override this method . --> Perform teamaktagmissionentation --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[withDispatcher]] ( ServletRequest [[servletRequest]] , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest [[andteamaktagent]] ( ServletRequest [[sarвlerrupuid]] , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 337 ---------------------------------------------
Returns a scope for the given scope . --> region ScopeFactory --> Socre: 1.0

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl [[injector]] , InternalFactory < ? extends T > creator , Object [[source]] , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl [[bypaceexport]] , InternalFactory < ? extends T > creator , Object [[peer]] , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 338 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 195 / 141 / 2 / 338:  34%|███▍      | 338/1000 [27:23<53:38,  4.86s/it][Succeeded / Failed / Skipped / Total] 195 / 141 / 2 / 338:  34%|███▍      | 339/1000 [27:32<53:41,  4.87s/it][Succeeded / Failed / Skipped / Total] 196 / 141 / 2 / 339:  34%|███▍      | 339/1000 [27:32<53:41,  4.87s/it][Succeeded / Failed / Skipped / Total] 196 / 141 / 2 / 339:  34%|███▍      | 340/1000 [27:42<53:46,  4.89s/it][Succeeded / Failed / Skipped / Total] 196 / 142 / 2 / 340:  34%|███▍      | 340/1000 [27:42<53:46,  4.89s/it][Succeeded / Failed / Skipped / Total] 196 / 142 / 2 / 340:  34%|███▍      | 341/1000 [28:02<54:10,  4.93s/it][Succeeded / Failed / Skipped / Total] 196 / 143 / 2 / 341:  34%|███▍      | 341/1000 [28:02<54:10,  4.93s/it][Succeeded / Failed / Skipped / Total] 196 / 143 / 2 / 341:  34%|███▍      | 342/1000 [28:04<54:00,  4.92s/it][Succeeded / Failed / Skipped / Total] 196 / 144 / 2 / 342:  34%|███▍      | 342/1000 [28:04<54:00,  4.92s/it][Succeeded / Failed / Skipped / Total] 196 / 144 / 2 / 342:  34%|███▍      | 343/1000 [28:07<53:52,  4.92s/it][Succeeded / Failed / Skipped / Total] 197 / 144 / 2 / 343:  34%|███▍      | 343/1000 [28:07<53:52,  4.92s/it][Succeeded / Failed / Skipped / Total] 197 / 144 / 2 / 343:  34%|███▍      | 344/1000 [28:12<53:47,  4.92s/it][Succeeded / Failed / Skipped / Total] 198 / 144 / 2 / 344:  34%|███▍      | 344/1000 [28:12<53:47,  4.92s/it][Succeeded / Failed / Skipped / Total] 198 / 144 / 2 / 344:  34%|███▍      | 345/1000 [28:19<53:46,  4.93s/it]Returns an annotation for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[has]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 339 ---------------------------------------------
Normalizes the given path . --> Return the digit of the flow --> Socre: 1.0

[[[[Adv]]]]: static String [[normalizePath]] ( String [[path]] ) { StringBuilder sb = new StringBuilder ( [[path]] . length ( ) ) ; int queryStart = [[path]] . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = [[path]] . substring ( queryStart ) ; [[path]] = [[path]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String [[digitallal]] ( String [[flow]] ) { StringBuilder sb = new StringBuilder ( [[flow]] . length ( ) ) ; int queryStart = [[flow]] . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = [[flow]] . substring ( queryStart ) ; [[flow]] = [[flow]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 340 ---------------------------------------------
Determines if retention is at runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > annotationType ) { Retention retention = annotationType . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[actionworkinadaidytline]] ( Class < ? extends Annotation > annotationType ) { Retention retention = annotationType . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 341 ---------------------------------------------
Find scope annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static Class < ? extends Annotation > [[findScopeAnnotation]] ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > [[oscadeathdrations]] ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 342 ---------------------------------------------
Returns the name of a key . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > [[key]] ) { Annotation annotation = [[key]] . getAnnotation ( ) ; Class < ? extends Annotation > [[annotationType]] = [[key]] . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( [[annotationType]] ) ) { return [[key]] . getAnnotation ( ) . toString ( ) ; } else if ( [[key]] . getAnnotationType ( ) != null ) { return "@" + [[key]] . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[historye]] ( Key < ? > [[knob]] ) { Annotation annotation = [[knob]] . getAnnotation ( ) ; Class < ? extends Annotation > [[iconitetheci]] = [[knob]] . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( [[iconitetheci]] ) ) { return [[knob]] . getAnnotation ( ) . toString ( ) ; } else if ( [[knob]] . getAnnotationType ( ) != null ) { return "@" + [[knob]] . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 343 ---------------------------------------------
Returns the binding for the given type . --> print binding annotation --> Socre: 1.0

[[[[Adv]]]]: public static Key < ? > [[getKey]] ( TypeLiteral < ? > type , Member [[member]] , Annotation [ ] [[annotations]] , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , [[member]] , [[annotations]] ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > [[printx]] ( TypeLiteral < ? > type , Member [[friend]] , Annotation [ ] [[accentoutts]] , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Annotation found = findBindingAnnotation ( errors , [[friend]] , [[accentoutts]] ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( type ) : Key . get ( type , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 344 ---------------------------------------------
Adds the explicit type binding . --> binds the application context --> Socre: 1.0

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[applicationuniintwarecrowe]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 345 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 198 / 145 / 2 / 345:  34%|███▍      | 345/1000 [28:19<53:46,  4.93s/it][Succeeded / Failed / Skipped / Total] 198 / 145 / 2 / 345:  35%|███▍      | 346/1000 [28:21<53:36,  4.92s/it][Succeeded / Failed / Skipped / Total] 198 / 146 / 2 / 346:  35%|███▍      | 346/1000 [28:21<53:36,  4.92s/it][Succeeded / Failed / Skipped / Total] 198 / 146 / 2 / 346:  35%|███▍      | 347/1000 [28:26<53:30,  4.92s/it][Succeeded / Failed / Skipped / Total] 199 / 146 / 2 / 347:  35%|███▍      | 347/1000 [28:26<53:30,  4.92s/it][Succeeded / Failed / Skipped / Total] 199 / 146 / 2 / 347:  35%|███▍      | 348/1000 [28:31<53:26,  4.92s/it][Succeeded / Failed / Skipped / Total] 200 / 146 / 2 / 348:  35%|███▍      | 348/1000 [28:31<53:26,  4.92s/it][Succeeded / Failed / Skipped / Total] 200 / 146 / 2 / 348:  35%|███▍      | 349/1000 [28:37<53:23,  4.92s/it][Succeeded / Failed / Skipped / Total] 200 / 147 / 2 / 349:  35%|███▍      | 349/1000 [28:37<53:23,  4.92s/it][Succeeded / Failed / Skipped / Total] 200 / 147 / 2 / 349:  35%|███▌      | 350/1000 [28:41<53:17,  4.92s/it][Succeeded / Failed / Skipped / Total] 201 / 147 / 2 / 350:  35%|███▌      | 350/1000 [28:41<53:17,  4.92s/it][Succeeded / Failed / Skipped / Total] 201 / 147 / 2 / 350:  35%|███▌      | 351/1000 [28:45<53:10,  4.92s/it][Succeeded / Failed / Skipped / Total] 202 / 147 / 2 / 351:  35%|███▌      | 351/1000 [28:45<53:10,  4.92s/it][Succeeded / Failed / Skipped / Total] 202 / 147 / 2 / 351:  35%|███▌      | 352/1000 [28:49<53:04,  4.91s/it]Makes sure that the scope is an injectable . --> [[[FAILED]]]

[[[[Adv]]]]: static Scoping [[makeInjectable]] ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding scope = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping [[notuptailator]] ( Scoping scoping , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding scope = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 346 ---------------------------------------------
Initializes the delegate provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > [[delegate]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[elevatorandplanegated]] ( Provider < T > [[robe]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[robe]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 347 ---------------------------------------------
Retrieve a constructor from the cache . --> Get the ConstructorInjector from the specified InjectionPoint --> Socre: 1.0

[[[[Adv]]]]: public ConstructorInjector < ? > get ( InjectionPoint [[constructorInjector]] , Errors [[errors]] ) throws ErrorsException { return cache . get ( [[constructorInjector]] , [[errors]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > get ( InjectionPoint [[taskencysta]] , Errors [[bugs]] ) throws ErrorsException { return cache . get ( [[taskencysta]] , [[bugs]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 348 ---------------------------------------------
Factory method to create a realMapBinder . --> Liefert binder binder --> Socre: 1.0

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > [[newRealMapBinder]] ( Binder binder , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return [[newRealMapBinder]] ( binder , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > [[lingtestactkkant]] ( Binder binder , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return [[lingtestactkkant]] ( binder , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 349 ---------------------------------------------
Returns the key for a new value . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[valueKey]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[valueKey]] ) ) ; return [[valueKey]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[labelfold]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[labelfold]] ) ) ; return [[labelfold]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 350 ---------------------------------------------
Check if interceptor has scope annotation --> method to check whether or not --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasScope]] ( Class < ? extends Interceptor > [[interceptorClass]] ) { for ( Annotation annotation : [[interceptorClass]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean [[ant]] ( Class < ? extends Interceptor > [[spraycomplex]] ) { for ( Annotation annotation : [[spraycomplex]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 351 ---------------------------------------------
Replaces the source code . --> For debugging purposes --> Socre: 1.0

[[[[Adv]]]]: private Object [[writeReplace]] ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int [[i]] = 0 ; [[i]] < sourcesAsStrings . length ; [[i]] ++ ) { sourcesAsStrings [ [[i]] ] = Errors . convert ( sourcesAsStrings [ [[i]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object [[scriptestride]] ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int [[she]] = 0 ; [[she]] < sourcesAsStrings . length ; [[she]] ++ ) { sourcesAsStrings [ [[she]] ] = Errors . convert ( sourcesAsStrings [ [[she]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
[Succeeded / Failed / Skipped / Total] 203 / 147 / 2 / 352:  35%|███▌      | 352/1000 [28:49<53:04,  4.91s/it][Succeeded / Failed / Skipped / Total] 203 / 147 / 2 / 352:  35%|███▌      | 353/1000 [28:52<52:55,  4.91s/it][Succeeded / Failed / Skipped / Total] 203 / 148 / 2 / 353:  35%|███▌      | 353/1000 [28:52<52:55,  4.91s/it][Succeeded / Failed / Skipped / Total] 203 / 148 / 2 / 353:  35%|███▌      | 354/1000 [28:55<52:46,  4.90s/it][Succeeded / Failed / Skipped / Total] 204 / 148 / 2 / 354:  35%|███▌      | 354/1000 [28:55<52:46,  4.90s/it][Succeeded / Failed / Skipped / Total] 204 / 148 / 2 / 354:  36%|███▌      | 355/1000 [28:58<52:38,  4.90s/it][Succeeded / Failed / Skipped / Total] 204 / 149 / 2 / 355:  36%|███▌      | 355/1000 [28:58<52:38,  4.90s/it][Succeeded / Failed / Skipped / Total] 204 / 149 / 2 / 355:  36%|███▌      | 356/1000 [29:07<52:41,  4.91s/it][Succeeded / Failed / Skipped / Total] 205 / 149 / 2 / 356:  36%|███▌      | 356/1000 [29:07<52:41,  4.91s/it][Succeeded / Failed / Skipped / Total] 205 / 149 / 2 / 356:  36%|███▌      | 357/1000 [29:13<52:38,  4.91s/it][Succeeded / Failed / Skipped / Total] 206 / 149 / 2 / 357:  36%|███▌      | 357/1000 [29:13<52:38,  4.91s/it][Succeeded / Failed / Skipped / Total] 206 / 149 / 2 / 357:  36%|███▌      | 358/1000 [29:33<53:01,  4.96s/it][Succeeded / Failed / Skipped / Total] 207 / 149 / 2 / 358:  36%|███▌      | 358/1000 [29:33<53:01,  4.96s/it][Succeeded / Failed / Skipped / Total] 207 / 149 / 2 / 358:  36%|███▌      | 359/1000 [29:37<52:53,  4.95s/it]--------------------------------------------- Result 352 ---------------------------------------------
Returns the module for the given module . --> Implementation of arteu --> Socre: 1.0

[[[[Adv]]]]: static Module [[forModule]] ( Module [[module]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[arteu]] ( Module [[sub]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 353 ---------------------------------------------
Returns all registered methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[winclearconoss]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 354 ---------------------------------------------
Checks whether a configuration exception is not defined . --> filter a configuration exception --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isTypeNotSpecified]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean [[weednotпeded]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > messages = ce . getErrorMessages ( ) ; if ( messages . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( messages ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 355 ---------------------------------------------
Creates a new instance . --> [[[FAILED]]]

[[[[Adv]]]]: private T [[provision]] ( InternalContext [[context]] , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] [[parameters]] = SingleParameterInjector . getAll ( [[context]] , parameterInjectors ) ; t = constructionProxy . newInstance ( [[parameters]] ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T [[availability]] ( InternalContext [[neighbor]] , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] [[objects]] = SingleParameterInjector . getAll ( [[neighbor]] , parameterInjectors ) ; t = constructionProxy . newInstance ( [[objects]] ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 356 ---------------------------------------------
Removes unspecified dependencies from the given dependencies . --> Returns the removal of the given deps --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > [[removeAssistedDeps]] ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : deps ) { Class < ? > annotationType = dep . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { builder . add ( dep ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > [[removalinsretherepp]] ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : deps ) { Class < ? > annotationType = dep . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { builder . add ( dep ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 357 ---------------------------------------------
Returns the dependencies for the given ctor . --> Take ctor from ctor --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint ctorPoint , TypeLiteral < ? > [[implementation]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! [[implementation]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( [[implementation]] ) ) { builder . addAll ( ip . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[takexwnrenci]] ( InjectionPoint ctorPoint , TypeLiteral < ? > [[action]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! [[action]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( [[action]] ) ) { builder . addAll ( ip . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 358 ---------------------------------------------
Determines if the given implementation can be used for optimization purposes . --> no longer than luid --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > [[factoryType]] ) { Set < Dependency < ? > > [[badDeps]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[luiluidoliparaicidatecadeswaceddinces]] ( Set < Dependency < ? > > dependencies , Class < ? > implementation , TypeLiteral < ? > [[newf]] ) { Set < Dependency < ? > > [[dreaddepies]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 359 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 208 / 149 / 2 / 359:  36%|███▌      | 359/1000 [29:37<52:53,  4.95s/it][Succeeded / Failed / Skipped / Total] 208 / 149 / 2 / 359:  36%|███▌      | 360/1000 [29:39<52:43,  4.94s/it][Succeeded / Failed / Skipped / Total] 208 / 150 / 2 / 360:  36%|███▌      | 360/1000 [29:39<52:43,  4.94s/it][Succeeded / Failed / Skipped / Total] 208 / 150 / 2 / 360:  36%|███▌      | 361/1000 [29:44<52:39,  4.94s/it][Succeeded / Failed / Skipped / Total] 208 / 151 / 2 / 361:  36%|███▌      | 361/1000 [29:44<52:39,  4.94s/it][Succeeded / Failed / Skipped / Total] 208 / 151 / 2 / 361:  36%|███▌      | 362/1000 [29:56<52:45,  4.96s/it][Succeeded / Failed / Skipped / Total] 209 / 151 / 2 / 362:  36%|███▌      | 362/1000 [29:56<52:45,  4.96s/it][Succeeded / Failed / Skipped / Total] 209 / 151 / 2 / 362:  36%|███▋      | 363/1000 [29:57<52:34,  4.95s/it][Succeeded / Failed / Skipped / Total] 210 / 151 / 2 / 363:  36%|███▋      | 363/1000 [29:57<52:34,  4.95s/it][Succeeded / Failed / Skipped / Total] 210 / 151 / 2 / 363:  36%|███▋      | 364/1000 [29:57<52:20,  4.94s/it][Succeeded / Failed / Skipped / Total] 210 / 152 / 2 / 364:  36%|███▋      | 364/1000 [29:57<52:20,  4.94s/it][Succeeded / Failed / Skipped / Total] 210 / 152 / 2 / 364:  36%|███▋      | 365/1000 [30:02<52:15,  4.94s/it][Succeeded / Failed / Skipped / Total] 210 / 153 / 2 / 365:  36%|███▋      | 365/1000 [30:02<52:15,  4.94s/it][Succeeded / Failed / Skipped / Total] 210 / 153 / 2 / 365:  37%|███▋      | 366/1000 [30:03<52:04,  4.93s/it][Succeeded / Failed / Skipped / Total] 210 / 154 / 2 / 366:  37%|███▋      | 366/1000 [30:03<52:04,  4.93s/it][Succeeded / Failed / Skipped / Total] 210 / 154 / 2 / 366:  37%|███▋      | 367/1000 [30:12<52:05,  4.94s/it]Invokes the specified method on the proxy . --> also used for testing --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object [[invoke]] ( Object proxy , final Method [[method]] , final Object [ ] [[args]] ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object [[atroklat]] ( Object proxy , final Method [[function]] , final Object [ ] [[aeres]] ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 360 ---------------------------------------------
Creates a missing implementation for a given key . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[sb]] = new StringBuilder ( ) ; [[sb]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[σ]] = new StringBuilder ( ) ; [[σ]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 361 ---------------------------------------------
Gets the binding from a new injector . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > [[getBindingFromNewInjector]] ( final Method method , final Object [ ] [[args]] , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > [[buyapstbroiennweputner]] ( final Method method , final Object [ ] [[aldas]] , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 362 ---------------------------------------------
New real multibinder . --> Instantiates a complex multibinder with a given key --> Socre: 1.0

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[newRealSetBinder]] ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[result]] = new RealMultibinder <> ( binder , key ) ; binder . install ( [[result]] ) ; return [[result]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[worldworksstormwinc]] ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[produce]] = new RealMultibinder <> ( binder , key ) ; binder . install ( [[produce]] ) ; return [[produce]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 363 ---------------------------------------------
Checks whether the constructor has parameters matching the given constructor . --> methods to create the callee monomer --> Socre: 1.0

[[[[Adv]]]]: private boolean [[constructorHasMatchingParams]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > [[params]] = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > [[param]] : [[params]] ) { Key < ? > paramKey = Annotations . getKey ( [[param]] , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean [[createocaxmaspingmonomed]] ( TypeLiteral < ? > type , Constructor < ? > constructor , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > [[mas]] = type . getParameterTypes ( constructor ) ; Annotation [ ] [ ] paramAnnotations = constructor . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > [[timml]] : [[mas]] ) { Key < ? > paramKey = Annotations . getKey ( [[timml]] , constructor , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 364 ---------------------------------------------
Find the next filter matching the given request . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter [[findNextFilter]] ( HttpServletRequest [[request]] ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( [[request]] ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter [[mapesmanfela]] ( HttpServletRequest [[requests]] ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( [[requests]] ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 365 ---------------------------------------------
Checks if is annotated with annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor [[cxtor]] ) { return [[cxtor]] . isAnnotationPresent ( Inject . class ) || [[cxtor]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[doesexception]] ( Constructor [[3ξoc]] ) { return [[3ξoc]] . isAnnotationPresent ( Inject . class ) || [[3ξoc]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 366 ---------------------------------------------
Gets the internal constructor . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[popxtenallikeceurax]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 367 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 211 / 154 / 2 / 367:  37%|███▋      | 367/1000 [30:12<52:05,  4.94s/it][Succeeded / Failed / Skipped / Total] 211 / 154 / 2 / 367:  37%|███▋      | 368/1000 [30:14<51:56,  4.93s/it][Succeeded / Failed / Skipped / Total] 211 / 155 / 2 / 368:  37%|███▋      | 368/1000 [30:14<51:56,  4.93s/it][Succeeded / Failed / Skipped / Total] 211 / 155 / 2 / 368:  37%|███▋      | 369/1000 [30:19<51:52,  4.93s/it][Succeeded / Failed / Skipped / Total] 211 / 156 / 2 / 369:  37%|███▋      | 369/1000 [30:19<51:52,  4.93s/it][Succeeded / Failed / Skipped / Total] 211 / 156 / 2 / 369:  37%|███▋      | 370/1000 [30:20<51:39,  4.92s/it][Succeeded / Failed / Skipped / Total] 212 / 156 / 2 / 370:  37%|███▋      | 370/1000 [30:20<51:39,  4.92s/it][Succeeded / Failed / Skipped / Total] 212 / 156 / 2 / 370:  37%|███▋      | 371/1000 [30:39<51:58,  4.96s/it][Succeeded / Failed / Skipped / Total] 213 / 156 / 2 / 371:  37%|███▋      | 371/1000 [30:39<51:58,  4.96s/it][Succeeded / Failed / Skipped / Total] 213 / 156 / 2 / 371:  37%|███▋      | 372/1000 [30:41<51:48,  4.95s/it][Succeeded / Failed / Skipped / Total] 214 / 156 / 2 / 372:  37%|███▋      | 372/1000 [30:41<51:48,  4.95s/it][Succeeded / Failed / Skipped / Total] 214 / 156 / 2 / 372:  37%|███▋      | 373/1000 [30:44<51:40,  4.94s/it][Succeeded / Failed / Skipped / Total] 215 / 156 / 2 / 373:  37%|███▋      | 373/1000 [30:44<51:40,  4.94s/it][Succeeded / Failed / Skipped / Total] 215 / 156 / 2 / 373:  37%|███▋      | 374/1000 [30:45<51:28,  4.93s/it][Succeeded / Failed / Skipped / Total] 215 / 157 / 2 / 374:  37%|███▋      | 374/1000 [30:45<51:28,  4.93s/it][Succeeded / Failed / Skipped / Total] 215 / 157 / 2 / 374:  38%|███▊      | 375/1000 [31:04<51:46,  4.97s/it]Get the internal dependencies . --> Get the Dependency Dependency --> Socre: 1.0

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > [[builder]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[builder]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[buydevperdsemponetrix]] ( ) { ImmutableSet . Builder < InjectionPoint > [[client]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[client]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 368 ---------------------------------------------
Returns the line number for the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member member ) { Preconditions . checkArgument ( type == member . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , member , member . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( member ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[caselasstmbe]] ( Member member ) { Preconditions . checkArgument ( type == member . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , member , member . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( member ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 369 ---------------------------------------------
Creates a module for the given module . --> [[[FAILED]]]

[[[[Adv]]]]: public static Module [[forModule]] ( Object [[module]] , ModuleAnnotatedMethodScanner scanner ) { return forObject ( [[module]] , "False" != "False" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[ctoial]] ( Object [[modules]] , ModuleAnnotatedMethodScanner scanner ) { return forObject ( [[modules]] , "False" != "False" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 370 ---------------------------------------------
Initialize the lookup . --> Called by jcatalog --> Socre: 1.0

[[[[Adv]]]]: void [[initialize]] ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[ajcatalog]] ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 371 ---------------------------------------------
Transforms the callable into a Callable --> Wrapper method for download --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > [[transferRequest]] ( Callable < T > [[callable]] ) { return wrap ( [[callable]] , [[transferRequest]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > [[downloadrupft]] ( Callable < T > [[requested]] ) { return wrap ( [[requested]] , [[downloadrupft]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 372 ---------------------------------------------
Checks that the given value is compatible with the given key . --> throw IllegalArgumentException --> Socre: 1.0

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > [[key]] , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[key]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[key]] + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[nratesxcrossmaciateagu]] ( Key < ? > [[middle]] , Object object ) { if ( object == null || object == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[middle]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( object ) ) { throw new IllegalArgumentException ( "Value[" + object + "] of type[" + object . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[middle]] + "]" ) ; } return object ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 373 ---------------------------------------------
Wraps a callable in a callable using the provided seed map . --> Wrapper for directvo requests --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > [[callable]] , Map < Key < ? > , Object > [[seedMap]] ) { return wrap ( [[callable]] , [[continueRequest]] ( [[seedMap]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[directvoquest]] ( Callable < T > [[requestar]] , Map < Key < ? > , Object > [[pushtau]] ) { return wrap ( [[requestar]] , [[directvoquest]] ( [[pushtau]] ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 374 ---------------------------------------------
Returns the annotation for the specified method . --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method [[method]] ) { if ( [[method]] . isBridge ( ) || [[method]] . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = [[method]] . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , [[method]] ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method [[blade]] ) { if ( [[blade]] . isBridge ( ) || [[blade]] . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = [[blade]] . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , [[blade]] ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
[Succeeded / Failed / Skipped / Total] 216 / 157 / 2 / 375:  38%|███▊      | 375/1000 [31:04<51:46,  4.97s/it][Succeeded / Failed / Skipped / Total] 216 / 157 / 2 / 375:  38%|███▊      | 376/1000 [31:04<51:34,  4.96s/it][Succeeded / Failed / Skipped / Total] 216 / 158 / 2 / 376:  38%|███▊      | 376/1000 [31:04<51:34,  4.96s/it][Succeeded / Failed / Skipped / Total] 216 / 158 / 2 / 376:  38%|███▊      | 377/1000 [31:15<51:38,  4.97s/it][Succeeded / Failed / Skipped / Total] 216 / 159 / 2 / 377:  38%|███▊      | 377/1000 [31:15<51:38,  4.97s/it][Succeeded / Failed / Skipped / Total] 216 / 159 / 2 / 377:  38%|███▊      | 378/1000 [31:20<51:34,  4.98s/it][Succeeded / Failed / Skipped / Total] 216 / 160 / 2 / 378:  38%|███▊      | 378/1000 [31:20<51:34,  4.98s/it][Succeeded / Failed / Skipped / Total] 216 / 160 / 2 / 378:  38%|███▊      | 379/1000 [31:22<51:24,  4.97s/it]--------------------------------------------- Result 375 ---------------------------------------------
Creates a new members injector for the given type . --> processes the given typeLitels --> Socre: 1.0

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[createWithListeners]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > [[encounter]] = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , [[encounter]] ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } [[encounter]] . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , [[encounter]] , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[authortypelistsiserse]] ( TypeLiteral < T > type , Errors errors ) throws ErrorsException { int numErrorsBefore = errors . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { errors . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , errors ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > [[event]] = new EncounterImpl <> ( errors , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , [[event]] ) ; } catch ( RuntimeException e ) { errors . errorNotifyingTypeListener ( binding , type , e ) ; } } } [[event]] . invalidate ( ) ; errors . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , [[event]] , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 376 ---------------------------------------------
Returns a new instance of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > [[get]] ( Class < T > [[type]] , AnnotationStrategy annotationStrategy ) { return new Key < T > ( [[type]] , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > [[create]] ( Class < T > [[category]] , AnnotationStrategy annotationStrategy ) { return new Key < T > ( [[category]] , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 377 ---------------------------------------------
Returns a strategy for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Annotation [[annotation]] ) { checkNotNull ( [[annotation]] , "annotation" ) ; Class < ? extends Annotation > [[annotationType]] = [[annotation]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; if ( Annotations . isMarker ( [[annotationType]] ) ) { return new AnnotationTypeStrategy ( [[annotationType]] , [[annotation]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[annotation]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Annotation [[wheelodtorium]] ) { checkNotNull ( [[wheelodtorium]] , "annotation" ) ; Class < ? extends Annotation > [[assissetchare]] = [[wheelodtorium]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[assissetchare]] ) ; ensureIsBindingAnnotation ( [[assissetchare]] ) ; if ( Annotations . isMarker ( [[assissetchare]] ) ) { return new AnnotationTypeStrategy ( [[assissetchare]] , [[wheelodtorium]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[wheelodtorium]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 378 ---------------------------------------------
Returns the injectors for the specified injection points . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[injectors]] = Lists . newArrayList ( ) ; for ( InjectionPoint [[injectionPoint]] : injectionPoints ) { try { Errors [[errorsForMember]] = [[injectionPoint]] . isOptional ( ) ? new Errors ( [[injectionPoint]] ) : errors . withSource ( [[injectionPoint]] ) ; SingleMemberInjector [[injector]] = [[injectionPoint]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[injector]] , [[injectionPoint]] , [[errorsForMember]] ) : new SingleMethodInjector ( this . [[injector]] , [[injectionPoint]] , [[errorsForMember]] ) ; [[injectors]] . add ( [[injector]] ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[adcompounddevices]] = Lists . newArrayList ( ) ; for ( InjectionPoint [[basehole]] : injectionPoints ) { try { Errors [[accidentsportetr]] = [[basehole]] . isOptional ( ) ? new Errors ( [[basehole]] ) : errors . withSource ( [[basehole]] ) ; SingleMemberInjector [[exmetress]] = [[basehole]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[aquests]] , [[basehole]] , [[accidentsportetr]] ) : new SingleMethodInjector ( this . [[aquests]] , [[basehole]] , [[accidentsportetr]] ) ; [[adcompounddevices]] . add ( [[exmetress]] ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 379 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 216 / 161 / 2 / 379:  38%|███▊      | 379/1000 [31:22<51:24,  4.97s/it][Succeeded / Failed / Skipped / Total] 216 / 161 / 2 / 379:  38%|███▊      | 380/1000 [31:22<51:12,  4.96s/it][Succeeded / Failed / Skipped / Total] 217 / 161 / 2 / 380:  38%|███▊      | 380/1000 [31:22<51:12,  4.96s/it][Succeeded / Failed / Skipped / Total] 217 / 161 / 2 / 380:  38%|███▊      | 381/1000 [31:46<51:37,  5.00s/it][Succeeded / Failed / Skipped / Total] 217 / 162 / 2 / 381:  38%|███▊      | 381/1000 [31:46<51:37,  5.00s/it][Succeeded / Failed / Skipped / Total] 217 / 162 / 2 / 381:  38%|███▊      | 382/1000 [31:57<51:41,  5.02s/it][Succeeded / Failed / Skipped / Total] 217 / 163 / 2 / 382:  38%|███▊      | 382/1000 [31:57<51:41,  5.02s/it][Succeeded / Failed / Skipped / Total] 217 / 163 / 2 / 382:  38%|███▊      | 383/1000 [31:58<51:31,  5.01s/it][Succeeded / Failed / Skipped / Total] 217 / 164 / 2 / 383:  38%|███▊      | 383/1000 [31:58<51:31,  5.01s/it][Succeeded / Failed / Skipped / Total] 217 / 164 / 2 / 383:  38%|███▊      | 384/1000 [32:08<51:33,  5.02s/it]Returns a strategy for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return [[strategyFor]] ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy [[bannerlike]] ( Class < ? extends Annotation > [[appissetistplate]] ) { [[appissetistplate]] = Annotations . canonicalizeIfNamed ( [[appissetistplate]] ) ; if ( isAllDefaultMethods ( [[appissetistplate]] ) ) { return [[bannerlike]] ( generateAnnotation ( [[appissetistplate]] ) ) ; } checkNotNull ( [[appissetistplate]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[appissetistplate]] ) ; ensureIsBindingAnnotation ( [[appissetistplate]] ) ; return new AnnotationTypeStrategy ( [[appissetistplate]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 380 ---------------------------------------------
Gets the binding source . --> For debugging purposes only --> Socre: 1.0

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[drawyldimtrupment]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 381 ---------------------------------------------
Creates a message . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( String messageFormat , Object ... [[arguments]] ) { return [[create]] ( null , messageFormat , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message [[insert]] ( String messageFormat , Object ... [[reads]] ) { return [[insert]] ( null , messageFormat , [[reads]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 382 ---------------------------------------------
Creates a message with the given message and stack trace . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message create ( Throwable [[cause]] , String messageFormat , Object ... arguments ) { return create ( [[cause]] , ImmutableList . of ( ) , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message create ( Throwable [[list]] , String messageFormat , Object ... arguments ) { return create ( [[list]] , ImmutableList . of ( ) , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 383 ---------------------------------------------
Removes stack trace from the stack trace --> [[[FAILED]]]

[[[[Adv]]]]: private void pruneStacktrace ( Throwable [[throwable]] ) { for ( Throwable t = [[throwable]] ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] stackTrace = t . getStackTrace ( ) ; List < StackTraceElement > [[pruned]] = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { [[pruned]] . add ( element ) ; } } t . setStackTrace ( [[pruned]] . toArray ( new StackTraceElement [ [[pruned]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void pruneStacktrace ( Throwable [[mountwise]] ) { for ( Throwable t = [[mountwise]] ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] stackTrace = t . getStackTrace ( ) ; List < StackTraceElement > [[guideottend]] = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { [[guideottend]] . add ( element ) ; } } t . setStackTrace ( [[guideottend]] . toArray ( new StackTraceElement [ [[guideottend]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 384 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 218 / 164 / 2 / 384:  38%|███▊      | 384/1000 [32:08<51:33,  5.02s/it][Succeeded / Failed / Skipped / Total] 218 / 164 / 2 / 384:  38%|███▊      | 385/1000 [32:13<51:28,  5.02s/it][Succeeded / Failed / Skipped / Total] 218 / 165 / 2 / 385:  38%|███▊      | 385/1000 [32:13<51:28,  5.02s/it][Succeeded / Failed / Skipped / Total] 218 / 165 / 2 / 385:  39%|███▊      | 386/1000 [32:16<51:20,  5.02s/it][Succeeded / Failed / Skipped / Total] 218 / 166 / 2 / 386:  39%|███▊      | 386/1000 [32:16<51:20,  5.02s/it][Succeeded / Failed / Skipped / Total] 218 / 166 / 2 / 386:  39%|███▊      | 387/1000 [32:31<51:31,  5.04s/it][Succeeded / Failed / Skipped / Total] 218 / 167 / 2 / 387:  39%|███▊      | 387/1000 [32:31<51:31,  5.04s/it][Succeeded / Failed / Skipped / Total] 218 / 167 / 2 / 387:  39%|███▉      | 388/1000 [32:34<51:23,  5.04s/it][Succeeded / Failed / Skipped / Total] 218 / 168 / 2 / 388:  39%|███▉      | 388/1000 [32:34<51:23,  5.04s/it][Succeeded / Failed / Skipped / Total] 218 / 168 / 2 / 388:  39%|███▉      | 389/1000 [32:34<51:10,  5.03s/it][Succeeded / Failed / Skipped / Total] 218 / 169 / 2 / 389:  39%|███▉      | 389/1000 [32:34<51:10,  5.03s/it][Succeeded / Failed / Skipped / Total] 218 / 169 / 2 / 389:  39%|███▉      | 390/1000 [32:39<51:04,  5.02s/it]Format a list of error messages . --> Format a collection of performance reasons --> Socre: 1.0

[[[[Adv]]]]: public static String formatMessages ( String heading , Collection < Message > [[errorMessages]] ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( [[errorMessages]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > [[causes]] = Maps . newHashMap ( ) ; for ( Message errorMessage : [[errorMessages]] ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! [[causes]] . containsKey ( causeEquivalence ) ) { [[causes]] . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = [[causes]] . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( [[errorMessages]] . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , [[errorMessages]] . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String formatMessages ( String heading , Collection < Message > [[performanceemesarues]] ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( [[performanceemesarues]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > [[rules]] = Maps . newHashMap ( ) ; for ( Message errorMessage : [[performanceemesarues]] ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! [[rules]] . containsKey ( causeEquivalence ) ) { [[rules]] . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = [[rules]] . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( [[performanceemesarues]] . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , [[performanceemesarues]] . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 385 ---------------------------------------------
Checks if a class should be skipped . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[isbedshif]] ( String [[charactergirl]] ) { return ( parent != null && parent . shouldBeSkipped ( [[charactergirl]] ) ) || classNamesToSkip . contains ( [[charactergirl]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 386 ---------------------------------------------
Convert an object to another element . --> [[[FAILED]]]

[[[[Adv]]]]: static Object [[convert]] ( Object [[o]] ) { ElementSource [[source]] = null ; if ( [[o]] instanceof ElementSource ) { [[source]] = ( ElementSource ) [[o]] ; [[o]] = [[source]] . getDeclaringSource ( ) ; } return [[convert]] ( [[o]] , [[source]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object [[evolution]] ( Object [[action]] ) { ElementSource [[a]] = null ; if ( [[action]] instanceof ElementSource ) { [[a]] = ( ElementSource ) [[action]] ; [[action]] = [[a]] . getDeclaringSource ( ) ; } return [[evolution]] ( [[action]] , [[a]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 387 ---------------------------------------------
Creates a Message with the specified message format and arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String message = format ( messageFormat , arguments ) ; return new Message ( sources , message , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message [[type]] ( Throwable cause , List < Object > sources , String messageFormat , Object ... arguments ) { String message = format ( messageFormat , arguments ) ; return new Message ( sources , message , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 388 ---------------------------------------------
Returns the configuration object for the given module names . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getFromClassNames]] ( List < String > moduleClassNames ) { Preconditions . checkNotNull ( moduleClassNames , "The list of module class names cannot be null." ) ; for ( final String [[moduleClassName]] : moduleClassNames ) { if ( ! shouldBeSkipped ( [[moduleClassName]] ) ) { return new StackTraceElement ( [[moduleClassName]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object [[justnooverrtoweras]] ( List < String > moduleClassNames ) { Preconditions . checkNotNull ( moduleClassNames , "The list of module class names cannot be null." ) ; for ( final String [[domainportpark]] : moduleClassNames ) { if ( ! shouldBeSkipped ( [[domainportpark]] ) ) { return new StackTraceElement ( [[domainportpark]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 389 ---------------------------------------------
Main entry point . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[main]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void [[base]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( module ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
[Succeeded / Failed / Skipped / Total] 219 / 169 / 2 / 390:  39%|███▉      | 390/1000 [32:39<51:04,  5.02s/it][Succeeded / Failed / Skipped / Total] 219 / 169 / 2 / 390:  39%|███▉      | 391/1000 [32:39<50:51,  5.01s/it][Succeeded / Failed / Skipped / Total] 219 / 169 / 3 / 391:  39%|███▉      | 391/1000 [32:39<50:51,  5.01s/it][Succeeded / Failed / Skipped / Total] 219 / 169 / 3 / 391:  39%|███▉      | 392/1000 [32:44<50:47,  5.01s/it][Succeeded / Failed / Skipped / Total] 219 / 170 / 3 / 392:  39%|███▉      | 392/1000 [32:44<50:47,  5.01s/it][Succeeded / Failed / Skipped / Total] 219 / 170 / 3 / 392:  39%|███▉      | 393/1000 [32:50<50:43,  5.01s/it][Succeeded / Failed / Skipped / Total] 219 / 171 / 3 / 393:  39%|███▉      | 393/1000 [32:50<50:43,  5.01s/it][Succeeded / Failed / Skipped / Total] 219 / 171 / 3 / 393:  39%|███▉      | 394/1000 [32:52<50:33,  5.01s/it][Succeeded / Failed / Skipped / Total] 220 / 171 / 3 / 394:  39%|███▉      | 394/1000 [32:52<50:33,  5.01s/it][Succeeded / Failed / Skipped / Total] 220 / 171 / 3 / 394:  40%|███▉      | 395/1000 [32:54<50:23,  5.00s/it][Succeeded / Failed / Skipped / Total] 220 / 172 / 3 / 395:  40%|███▉      | 395/1000 [32:54<50:23,  5.00s/it][Succeeded / Failed / Skipped / Total] 220 / 172 / 3 / 395:  40%|███▉      | 396/1000 [33:00<50:20,  5.00s/it][Succeeded / Failed / Skipped / Total] 221 / 172 / 3 / 396:  40%|███▉      | 396/1000 [33:00<50:20,  5.00s/it][Succeeded / Failed / Skipped / Total] 221 / 172 / 3 / 396:  40%|███▉      | 397/1000 [33:01<50:08,  4.99s/it][Succeeded / Failed / Skipped / Total] 222 / 172 / 3 / 397:  40%|███▉      | 397/1000 [33:01<50:08,  4.99s/it][Succeeded / Failed / Skipped / Total] 222 / 172 / 3 / 397:  40%|███▉      | 398/1000 [33:05<50:03,  4.99s/it]--------------------------------------------- Result 390 ---------------------------------------------
Sends the push state for the given key . --> For internal use only --> Socre: 1.0

[[[[Adv]]]]: void [[pushState]] ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void [[localache]] ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 391 ---------------------------------------------
Process a connection event --> [[[SKIPPED]]]

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 392 ---------------------------------------------
Returns a new instance of the given instance . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Initializable < T > [[of]] ( final T instance ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return instance ; } @ Override public String toString ( ) { return String . valueOf ( instance ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > [[a]] ( final T instance ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return instance ; } @ Override public String toString ( ) { return String . valueOf ( instance ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 393 ---------------------------------------------
Adds the given dependency to the current state . --> [[[FAILED]]]

[[[[Adv]]]]: Dependency < ? > pushDependency ( Dependency < ? > dependency , Object [[source]] ) { Dependency < ? > [[previous]] = this . dependency ; this . dependency = dependency ; doPushState ( dependency , [[source]] ) ; return [[previous]] ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > pushDependency ( Dependency < ? > dependency , Object [[base]] ) { Dependency < ? > [[mission]] = this . dependency ; this . dependency = dependency ; doPushState ( dependency , [[base]] ) ; return [[mission]] ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 394 ---------------------------------------------
Adds a connection event processor . --> Attach a new connection to the specified type --> Socre: 1.0

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType type , ConnectionEventProcessor [[processor]] ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList == null ) { this . processors . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( type ) ; } processorList . add ( [[processor]] ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[accessoryendrethingversetionreetteringsr]] ( ConnectionEventType type , ConnectionEventProcessor [[destination]] ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList == null ) { this . processors . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( type ) ; } processorList . add ( [[destination]] ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 395 ---------------------------------------------
Gets the result task result . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] getFutureTaskResult ( RunStateRecordedFutureTask < [[T]] > task , Logger logger ) { [[T]] t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < [[day]] > [[day]] getFutureTaskResult ( RunStateRecordedFutureTask < [[day]] > task , Logger logger ) { [[day]] t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 396 ---------------------------------------------
Register a remoting processor --> Processes a remotingProcessor --> Socre: 1.0

[[[[Adv]]]]: public void [[registerProcessor]] ( CommandCode cmdCode , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void [[sawprgalgram]] ( CommandCode cmdCode , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 397 ---------------------------------------------
Supports a throwable . --> Throws a RuntimeException . --> Socre: 1.0

[[[[Adv]]]]: public static void [[launderThrowable]] ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable

[[[[Adv]]]]: public static void [[datadekravebed]] ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 398 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 222 / 173 / 3 / 398:  40%|███▉      | 398/1000 [33:05<50:03,  4.99s/it][Succeeded / Failed / Skipped / Total] 222 / 173 / 3 / 398:  40%|███▉      | 399/1000 [33:08<49:55,  4.98s/it][Succeeded / Failed / Skipped / Total] 223 / 173 / 3 / 399:  40%|███▉      | 399/1000 [33:08<49:55,  4.98s/it][Succeeded / Failed / Skipped / Total] 223 / 173 / 3 / 399:  40%|████      | 400/1000 [33:08<49:43,  4.97s/it][Succeeded / Failed / Skipped / Total] 223 / 173 / 4 / 400:  40%|████      | 400/1000 [33:08<49:43,  4.97s/it][Succeeded / Failed / Skipped / Total] 223 / 173 / 4 / 400:  40%|████      | 401/1000 [33:13<49:37,  4.97s/it][Succeeded / Failed / Skipped / Total] 224 / 173 / 4 / 401:  40%|████      | 401/1000 [33:13<49:37,  4.97s/it][Succeeded / Failed / Skipped / Total] 224 / 173 / 4 / 401:  40%|████      | 402/1000 [33:14<49:26,  4.96s/it][Succeeded / Failed / Skipped / Total] 224 / 174 / 4 / 402:  40%|████      | 402/1000 [33:14<49:26,  4.96s/it][Succeeded / Failed / Skipped / Total] 224 / 174 / 4 / 402:  40%|████      | 403/1000 [33:17<49:18,  4.96s/it][Succeeded / Failed / Skipped / Total] 225 / 174 / 4 / 403:  40%|████      | 403/1000 [33:17<49:18,  4.96s/it][Succeeded / Failed / Skipped / Total] 225 / 174 / 4 / 403:  40%|████      | 404/1000 [33:21<49:12,  4.95s/it][Succeeded / Failed / Skipped / Total] 226 / 174 / 4 / 404:  40%|████      | 404/1000 [33:21<49:12,  4.95s/it][Succeeded / Failed / Skipped / Total] 226 / 174 / 4 / 404:  40%|████      | 405/1000 [33:23<49:03,  4.95s/it][Succeeded / Failed / Skipped / Total] 227 / 174 / 4 / 405:  40%|████      | 405/1000 [33:23<49:03,  4.95s/it][Succeeded / Failed / Skipped / Total] 227 / 174 / 4 / 405:  41%|████      | 406/1000 [33:24<48:53,  4.94s/it]Provide a new instance of the given dependency . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[provision]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T [[availability]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 399 ---------------------------------------------
Tries to get the given URL . --> Determine a given URL --> Socre: 1.0

[[[[Adv]]]]: private Url [[tryGet]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache

[[[[Adv]]]]: private Url [[denet]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 400 ---------------------------------------------
region > getConnectionPool --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > getAll ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 401 ---------------------------------------------
Decodes the protocol code . --> Decodes ProtocolCode . --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode decodeProtocolCode ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] [[protocolCodeBytes]] = new byte [ protocolCodeLength ] ; in . readBytes ( [[protocolCodeBytes]] ) ; return ProtocolCode . fromBytes ( [[protocolCodeBytes]] ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode decodeProtocolCode ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] [[protocolsgatebidres]] = new byte [ protocolCodeLength ] ; in . readBytes ( [[protocolsgatebidres]] ) ; return ProtocolCode . fromBytes ( [[protocolsgatebidres]] ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 402 ---------------------------------------------
Register a default processor --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerDefaultProcessor]] ( RemotingProcessor < ? > [[processor]] ) { if ( this . [[defaultProcessor]] == null ) { this . [[defaultProcessor]] = [[processor]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[defaultProcessor]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void [[addressdimaroldpremsr]] ( RemotingProcessor < ? > [[client]] ) { if ( this . [[futuresugesstor]] == null ) { this . [[futuresugesstor]] = [[client]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[futuresugesstor]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 403 ---------------------------------------------
Scans the connection pool . --> Check for expired connections . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[scan]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan

[[[[Adv]]]]: @ Override public void [[chart]] ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 404 ---------------------------------------------
Returns a connection to the remote server . --> This method is used to buypt Solacet --> Socre: 1.0

[[[[Adv]]]]: @ Override public Connection [[getAndCreateIfAbsent]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection [[buyptsolacetipogcept]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 405 ---------------------------------------------
Create a connection and store it if needed . --> This method is used to communicate with a remote url --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[bringrrellaversdeeuhniforseeck]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 406 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 228 / 174 / 4 / 406:  41%|████      | 406/1000 [33:24<48:53,  4.94s/it][Succeeded / Failed / Skipped / Total] 228 / 174 / 4 / 406:  41%|████      | 407/1000 [33:30<48:48,  4.94s/it][Succeeded / Failed / Skipped / Total] 229 / 174 / 4 / 407:  41%|████      | 407/1000 [33:30<48:48,  4.94s/it][Succeeded / Failed / Skipped / Total] 229 / 174 / 4 / 407:  41%|████      | 408/1000 [33:30<48:37,  4.93s/it][Succeeded / Failed / Skipped / Total] 230 / 174 / 4 / 408:  41%|████      | 408/1000 [33:30<48:37,  4.93s/it][Succeeded / Failed / Skipped / Total] 230 / 174 / 4 / 408:  41%|████      | 409/1000 [33:31<48:26,  4.92s/it][Succeeded / Failed / Skipped / Total] 231 / 174 / 4 / 409:  41%|████      | 409/1000 [33:31<48:26,  4.92s/it][Succeeded / Failed / Skipped / Total] 231 / 174 / 4 / 409:  41%|████      | 410/1000 [33:36<48:22,  4.92s/it][Succeeded / Failed / Skipped / Total] 232 / 174 / 4 / 410:  41%|████      | 410/1000 [33:36<48:22,  4.92s/it][Succeeded / Failed / Skipped / Total] 232 / 174 / 4 / 410:  41%|████      | 411/1000 [33:42<48:17,  4.92s/it][Succeeded / Failed / Skipped / Total] 233 / 174 / 4 / 411:  41%|████      | 411/1000 [33:42<48:17,  4.92s/it][Succeeded / Failed / Skipped / Total] 233 / 174 / 4 / 411:  41%|████      | 412/1000 [33:47<48:13,  4.92s/it][Succeeded / Failed / Skipped / Total] 234 / 174 / 4 / 412:  41%|████      | 412/1000 [33:47<48:13,  4.92s/it][Succeeded / Failed / Skipped / Total] 234 / 174 / 4 / 412:  41%|████▏     | 413/1000 [33:50<48:06,  4.92s/it]Remove task from pool . --> Closes the connection pool . --> Socre: 1.0

[[[[Adv]]]]: private void [[removeTask]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void [[banticalq]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 407 ---------------------------------------------
Get the remotingProcessor for a command --> saveAlter for ALTERRA --> Socre: 1.0

[[[[Adv]]]]: public RemotingProcessor < ? > [[getProcessor]] ( CommandCode [[cmdCode]] ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( [[cmdCode]] ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > [[savealchatral]] ( CommandCode [[vidiskore]] ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( [[vidiskore]] ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 408 ---------------------------------------------
Create connection . --> sync connection number --> Socre: 1.0

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool pool , final String taskName , final int [[syncCreateNumWhenNotWarmup]] ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( [[syncCreateNumWhenNotWarmup]] < 0 || [[syncCreateNumWhenNotWarmup]] > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool pool , final String taskName , final int [[depaetetimwkhakridgeamimc]] ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; pool . add ( connection ) ; } } else { if ( [[depaetetimwkhakridgeamimc]] < 0 || [[depaetetimwkhakridgeamimc]] > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 409 ---------------------------------------------
Closes a connection . --> Remove user from group --> Socre: 1.0

[[[[Adv]]]]: public void [[closeConnection]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void [[groupconruser]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 410 ---------------------------------------------
Tries to repair the pool if needed . --> We need to do this . --> Socre: 1.0

[[[[Adv]]]]: private void [[healIfNeed]] ( ConnectionPool pool , Url [[url]] ) throws RemotingException , InterruptedException { String poolKey = [[url]] . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void [[allytfdaig]] ( ConnectionPool pool , Url [[hon]] ) throws RemotingException , InterruptedException { String poolKey = [[hon]] . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 411 ---------------------------------------------
Sets an attribute to the given value . --> package private for unit testing --> Socre: 1.0

[[[[Adv]]]]: public Object [[setAttributeIfAbsent]] ( String key , Object value ) { return attributes . putIfAbsent ( key , value ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object [[arrayaralesendfaceplyiang]] ( String key , Object value ) { return attributes . putIfAbsent ( key , value ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 412 ---------------------------------------------
Register user processor --> This method should be called by RpcServer --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerUserProcessor]] ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { [[registerUserProcessor]] ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void [[brewressdecodess]] ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { [[brewressdecodess]] ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 413 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 234 / 175 / 4 / 413:  41%|████▏     | 413/1000 [33:50<48:06,  4.92s/it][Succeeded / Failed / Skipped / Total] 234 / 175 / 4 / 413:  41%|████▏     | 414/1000 [33:50<47:54,  4.91s/it][Succeeded / Failed / Skipped / Total] 234 / 175 / 5 / 414:  41%|████▏     | 414/1000 [33:50<47:54,  4.91s/it][Succeeded / Failed / Skipped / Total] 234 / 175 / 5 / 414:  42%|████▏     | 415/1000 [33:56<47:51,  4.91s/it][Succeeded / Failed / Skipped / Total] 235 / 175 / 5 / 415:  42%|████▏     | 415/1000 [33:56<47:51,  4.91s/it][Succeeded / Failed / Skipped / Total] 235 / 175 / 5 / 415:  42%|████▏     | 416/1000 [34:00<47:45,  4.91s/it][Succeeded / Failed / Skipped / Total] 236 / 175 / 5 / 416:  42%|████▏     | 416/1000 [34:00<47:45,  4.91s/it][Succeeded / Failed / Skipped / Total] 236 / 175 / 5 / 416:  42%|████▏     | 417/1000 [34:02<47:35,  4.90s/it][Succeeded / Failed / Skipped / Total] 236 / 176 / 5 / 417:  42%|████▏     | 417/1000 [34:02<47:35,  4.90s/it][Succeeded / Failed / Skipped / Total] 236 / 176 / 5 / 417:  42%|████▏     | 418/1000 [34:07<47:31,  4.90s/it]Closes the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[close]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[future]] ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , [[future]] . isSuccess ( ) , [[future]] . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void [[hold]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[front]] ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[college]] . getChannel ( ) ) , [[front]] . isSuccess ( ) , [[front]] . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[college]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 414 ---------------------------------------------
Send RpcRequestCommandCommand --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean deserializeRequestCommand ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 415 ---------------------------------------------
Dispatches the request to the user processor . --> Dispatches the RpcRequestCommandCommandCommand . --> Socre: 1.0

[[[[Adv]]]]: private void dispatchToUserProcessor ( RemotingContext [[ctx]] , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void dispatchToUserProcessor ( RemotingContext [[ciix]] , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 416 ---------------------------------------------
Preprocess the remoting context . --> Called when the RpcRequest is received --> Socre: 1.0

[[[[Adv]]]]: private void [[preProcessRemotingContext]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void [[cropeaiverortresoledigitalact]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 417 ---------------------------------------------
Called when the connection is closed . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onClose]] ( ) { Iterator < Entry < Integer , InvokeFuture > > [[iter]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[iter]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = [[iter]] . next ( ) ; [[iter]] . remove ( ) ; InvokeFuture [[future]] = entry . getValue ( ) ; if ( [[future]] != null ) { [[future]] . putResponse ( [[future]] . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; [[future]] . cancelTimeout ( ) ; [[future]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void [[extraobide]] ( ) { Iterator < Entry < Integer , InvokeFuture > > [[allier]] = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( [[allier]] . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = [[allier]] . next ( ) ; [[allier]] . remove ( ) ; InvokeFuture [[past]] = entry . getValue ( ) ; if ( [[past]] != null ) { [[past]] . putResponse ( [[past]] . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; [[past]] . cancelTimeout ( ) ; [[past]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 418 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 237 / 176 / 5 / 418:  42%|████▏     | 418/1000 [34:07<47:31,  4.90s/it][Succeeded / Failed / Skipped / Total] 237 / 176 / 5 / 418:  42%|████▏     | 419/1000 [34:09<47:21,  4.89s/it][Succeeded / Failed / Skipped / Total] 238 / 176 / 5 / 419:  42%|████▏     | 419/1000 [34:09<47:21,  4.89s/it][Succeeded / Failed / Skipped / Total] 238 / 176 / 5 / 419:  42%|████▏     | 420/1000 [34:17<47:21,  4.90s/it][Succeeded / Failed / Skipped / Total] 239 / 176 / 5 / 420:  42%|████▏     | 420/1000 [34:17<47:21,  4.90s/it][Succeeded / Failed / Skipped / Total] 239 / 176 / 5 / 420:  42%|████▏     | 421/1000 [34:21<47:14,  4.90s/it][Succeeded / Failed / Skipped / Total] 240 / 176 / 5 / 421:  42%|████▏     | 421/1000 [34:21<47:14,  4.90s/it][Succeeded / Failed / Skipped / Total] 240 / 176 / 5 / 421:  42%|████▏     | 422/1000 [34:21<47:03,  4.89s/it][Succeeded / Failed / Skipped / Total] 240 / 176 / 6 / 422:  42%|████▏     | 422/1000 [34:21<47:03,  4.89s/it][Succeeded / Failed / Skipped / Total] 240 / 176 / 6 / 422:  42%|████▏     | 423/1000 [34:21<46:52,  4.87s/it]Log timeout log . -->  bookkeeping --> Socre: 1.0

[[[[Adv]]]]: private void [[timeoutLog]] ( final RpcRequestCommand cmd , long [[currentTimestamp]] , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , [[currentTimestamp]] , cmd . getArriveTime ( ) , ( [[currentTimestamp]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( [[currentTimestamp]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void [[bookfrontband]] ( final RpcRequestCommand cmd , long [[rushcadeatimmer]] , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , [[rushcadeatimmer]] , cmd . getArriveTime ( ) , ( [[rushcadeatimmer]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { remoteAddr = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( [[rushcadeatimmer]] - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 419 ---------------------------------------------
Debug logging . --> Update RpcRequest command . --> Socre: 1.0

[[[[Adv]]]]: private void [[debugLog]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void [[3dbarduap]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 420 ---------------------------------------------
Send a request to the server . --> Write a request to the remote endpoint --> Socre: 1.0

[[[[Adv]]]]: protected void oneway ( final Connection [[conn]] , final RemotingCommand request ) { try { [[conn]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[conn]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void oneway ( final Connection [[stance]] , final RemotingCommand request ) { try { [[stance]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[stance]] . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[stance]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[stance]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 421 ---------------------------------------------
Register user processor --> For debugging purposes only --> Socre: 1.0

[[[[Adv]]]]: private static void [[registerUserProcessor]] ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > [[userProcessors]] ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : processor . multiInterest ( ) ) { UserProcessor < ? > preProcessor = [[userProcessors]] . putIfAbsent ( interest , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void [[compilerdisplayprtressr]] ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > [[devicewogramserunits]] ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : processor . multiInterest ( ) ) { UserProcessor < ? > preProcessor = [[devicewogramserunits]] . putIfAbsent ( interest , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 422 ---------------------------------------------
Convert an integer into a BitSet . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static BitSet toBitSet ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 423 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 241 / 176 / 6 / 423:  42%|████▏     | 423/1000 [34:21<46:52,  4.87s/it][Succeeded / Failed / Skipped / Total] 241 / 176 / 6 / 423:  42%|████▏     | 424/1000 [34:25<46:46,  4.87s/it][Succeeded / Failed / Skipped / Total] 242 / 176 / 6 / 424:  42%|████▏     | 424/1000 [34:25<46:46,  4.87s/it][Succeeded / Failed / Skipped / Total] 242 / 176 / 6 / 424:  42%|████▎     | 425/1000 [34:26<46:36,  4.86s/it][Succeeded / Failed / Skipped / Total] 243 / 176 / 6 / 425:  42%|████▎     | 425/1000 [34:26<46:36,  4.86s/it][Succeeded / Failed / Skipped / Total] 243 / 176 / 6 / 425:  43%|████▎     | 426/1000 [34:28<46:27,  4.86s/it][Succeeded / Failed / Skipped / Total] 244 / 176 / 6 / 426:  43%|████▎     | 426/1000 [34:28<46:27,  4.86s/it][Succeeded / Failed / Skipped / Total] 244 / 176 / 6 / 426:  43%|████▎     | 427/1000 [34:36<46:26,  4.86s/it][Succeeded / Failed / Skipped / Total] 245 / 176 / 6 / 427:  43%|████▎     | 427/1000 [34:36<46:26,  4.86s/it][Succeeded / Failed / Skipped / Total] 245 / 176 / 6 / 427:  43%|████▎     | 428/1000 [34:37<46:16,  4.85s/it]Process the message --> This method is overridden by subclasses to override this method --> Socre: 1.0

[[[[Adv]]]]: @ Override public void process ( RemotingContext [[ctx]] , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask [[task]] = new ProcessTask ( [[ctx]] , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( [[task]] ) ; } else { defaultExecutor . execute ( [[task]] ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void process ( RemotingContext [[cro]] , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask [[assembly]] = new ProcessTask ( [[cro]] , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( [[assembly]] ) ; } else { defaultExecutor . execute ( [[assembly]] ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 424 ---------------------------------------------
Converts a bit set to a byte value . --> Compute the levis value . --> Socre: 1.0

[[[[Adv]]]]: public static byte [[toByte]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte [[levis]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 425 ---------------------------------------------
Stop the process . --> Stops the daemon . --> Socre: 1.0

[[[[Adv]]]]: public void stop ( ) { if ( ! this . [[started]] ) { return ; } this . [[started]] = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread

[[[[Adv]]]]: public void stop ( ) { if ( ! this . [[a]] ) { return ; } this . [[a]] = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 426 ---------------------------------------------
Adds a reconnect task . --> Connect to the given url --> Socre: 1.0

[[[[Adv]]]]: public void [[addReconnectTask]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void [[accessredeveflectionsacplayer]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 427 ---------------------------------------------
Filter a set of connections --> Color profiles . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > [[filteredConnections]] = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } [[filteredConnections]] . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; [[filteredConnections]] . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return [[filteredConnections]] ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > connections ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > [[coloredcomzeities]] = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } [[coloredcomzeities]] . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; [[coloredcomzeities]] . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return [[coloredcomzeities]] ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 428 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 246 / 176 / 6 / 428:  43%|████▎     | 428/1000 [34:37<46:16,  4.85s/it][Succeeded / Failed / Skipped / Total] 246 / 176 / 6 / 428:  43%|████▎     | 429/1000 [34:37<46:05,  4.84s/it][Succeeded / Failed / Skipped / Total] 246 / 176 / 7 / 429:  43%|████▎     | 429/1000 [34:37<46:05,  4.84s/it][Succeeded / Failed / Skipped / Total] 246 / 176 / 7 / 429:  43%|████▎     | 430/1000 [34:44<46:03,  4.85s/it][Succeeded / Failed / Skipped / Total] 247 / 176 / 7 / 430:  43%|████▎     | 430/1000 [34:44<46:03,  4.85s/it][Succeeded / Failed / Skipped / Total] 247 / 176 / 7 / 430:  43%|████▎     | 431/1000 [34:49<45:57,  4.85s/it]Monitor connection pools . --> Adjust the connection pools . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[monitor]] ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off

[[[[Adv]]]]: @ Override public void [[assess]] ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 429 ---------------------------------------------
Gets a boolean . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean getBool ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 430 ---------------------------------------------
Write info to info log --> Logs information about the address . --> Socre: 1.0

[[[[Adv]]]]: private void [[infoLog]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void [[ascase]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 431 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 248 / 176 / 7 / 431:  43%|████▎     | 431/1000 [34:49<45:57,  4.85s/it][Succeeded / Failed / Skipped / Total] 248 / 176 / 7 / 431:  43%|████▎     | 432/1000 [34:54<45:54,  4.85s/it][Succeeded / Failed / Skipped / Total] 249 / 176 / 7 / 432:  43%|████▎     | 432/1000 [34:54<45:54,  4.85s/it][Succeeded / Failed / Skipped / Total] 249 / 176 / 7 / 432:  43%|████▎     | 433/1000 [34:55<45:44,  4.84s/it][Succeeded / Failed / Skipped / Total] 250 / 176 / 7 / 433:  43%|████▎     | 433/1000 [34:55<45:44,  4.84s/it][Succeeded / Failed / Skipped / Total] 250 / 176 / 7 / 433:  43%|████▎     | 434/1000 [35:03<45:43,  4.85s/it][Succeeded / Failed / Skipped / Total] 251 / 176 / 7 / 434:  43%|████▎     | 434/1000 [35:03<45:43,  4.85s/it][Succeeded / Failed / Skipped / Total] 251 / 176 / 7 / 434:  44%|████▎     | 435/1000 [35:05<45:34,  4.84s/it]Performs an Invoke callback . --> This method is responsible for invoking the InvokeCallback --> Socre: 1.0

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand [[request]] , final InvokeCallback [[invokeCallback]] , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , [[request]] , [[request]] . getInvokeContext ( ) , [[invokeCallback]] ) ; conn . addInvokeFuture ( future ) ; final int requestId = [[request]] . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( [[request]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand [[bill]] , final InvokeCallback [[ibocusrealgalach]] , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , [[bill]] , [[bill]] . getInvokeContext ( ) , [[ibocusrealgalach]] ) ; conn . addInvokeFuture ( future ) ; final int requestId = [[bill]] . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( [[bill]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 432 ---------------------------------------------
Returns true if the request is a request timeout . --> Returns true if the server should be afresh . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isRequestTimeout]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean [[afeloadamtness]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 433 ---------------------------------------------
Close fresh connect connections --> Sleeps for security concerns --> Socre: 1.0

[[[[Adv]]]]: private void [[closeFreshSelectConnections]] ( Connection [[lastSelectConnect]] , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != [[lastSelectConnect]] ) { if ( [[lastSelectConnect]] . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( [[lastSelectConnect]] ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( [[lastSelectConnect]] . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( [[lastSelectConnect]] ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( [[lastSelectConnect]] . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void [[securityforeiplostfanoneencies]] ( Connection [[gainsatectscerneught]] , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != [[gainsatectscerneught]] ) { if ( [[gainsatectscerneught]] . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( [[gainsatectscerneught]] ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( [[gainsatectscerneught]] . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( [[gainsatectscerneught]] ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( [[gainsatectscerneught]] . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 434 ---------------------------------------------
Gets user processor by class name . --> Returns UserProcessor --> Socre: 1.0

[[[[Adv]]]]: public UserProcessor < ? > getUserProcessor ( String [[className]] ) { return StringUtils . isBlank ( [[className]] ) ? null : this . [[userProcessors]] . get ( [[className]] ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > getUserProcessor ( String [[fieldx]] ) { return StringUtils . isBlank ( [[fieldx]] ) ? null : this . [[resourceomvirtualcasusers]] . get ( [[fieldx]] ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 435 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 252 / 176 / 7 / 435:  44%|████▎     | 435/1000 [35:05<45:34,  4.84s/it][Succeeded / Failed / Skipped / Total] 252 / 176 / 7 / 435:  44%|████▎     | 436/1000 [35:06<45:24,  4.83s/it][Succeeded / Failed / Skipped / Total] 253 / 176 / 7 / 436:  44%|████▎     | 436/1000 [35:06<45:24,  4.83s/it][Succeeded / Failed / Skipped / Total] 253 / 176 / 7 / 436:  44%|████▎     | 437/1000 [35:10<45:18,  4.83s/it][Succeeded / Failed / Skipped / Total] 254 / 176 / 7 / 437:  44%|████▎     | 437/1000 [35:10<45:18,  4.83s/it][Succeeded / Failed / Skipped / Total] 254 / 176 / 7 / 437:  44%|████▍     | 438/1000 [35:16<45:16,  4.83s/it][Succeeded / Failed / Skipped / Total] 255 / 176 / 7 / 438:  44%|████▍     | 438/1000 [35:16<45:16,  4.83s/it][Succeeded / Failed / Skipped / Total] 255 / 176 / 7 / 438:  44%|████▍     | 439/1000 [35:18<45:07,  4.83s/it][Succeeded / Failed / Skipped / Total] 256 / 176 / 7 / 439:  44%|████▍     | 439/1000 [35:18<45:07,  4.83s/it][Succeeded / Failed / Skipped / Total] 256 / 176 / 7 / 439:  44%|████▍     | 440/1000 [35:18<44:56,  4.82s/it][Succeeded / Failed / Skipped / Total] 257 / 176 / 7 / 440:  44%|████▍     | 440/1000 [35:18<44:56,  4.82s/it][Succeeded / Failed / Skipped / Total] 257 / 176 / 7 / 440:  44%|████▍     | 441/1000 [35:26<44:55,  4.82s/it][Succeeded / Failed / Skipped / Total] 258 / 176 / 7 / 441:  44%|████▍     | 441/1000 [35:26<44:55,  4.82s/it][Succeeded / Failed / Skipped / Total] 258 / 176 / 7 / 441:  44%|████▍     | 442/1000 [35:28<44:47,  4.82s/it]Gets a random connection . --> Returns the last download . --> Socre: 1.0

[[[[Adv]]]]: private Connection [[randomGet]] ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly

[[[[Adv]]]]: private Connection [[lastdownload]] ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 436 ---------------------------------------------
Get the value associated with the given key . --> Gets the value associated with the given key . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . [[context]] . get ( key ) != null ? ( T ) this . [[context]] . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . [[a]] . get ( key ) != null ? ( T ) this . [[a]] . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 437 ---------------------------------------------
Convert a request to a remoting command --> mergeMessageCommand --> Socre: 1.0

[[[[Adv]]]]: protected RemotingCommand [[toRemotingCommand]] ( Object [[request]] , Connection [[conn]] , InvokeContext invokeContext , int [[timeoutMillis]] ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( [[request]] ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand [[merimaltelecommind]] ( Object [[condition]] , Connection [[infoen]] , InvokeContext invokeContext , int [[ioutmacre]] ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( [[condition]] ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 438 ---------------------------------------------
Get a property value . --> Returns the major version for the major and major . --> Socre: 1.0

[[[[Adv]]]]: public String [[getProperty]] ( String [[key]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[key]] ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[andarconform]] ( String [[major]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[major]] ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 439 ---------------------------------------------
Convert response command to a Throwable --> Returns the RpcResponseCommand associated with the RpcResponseCommand --> Socre: 1.0

[[[[Adv]]]]: private static Throwable [[toThrowable]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable [[thatarraveled]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object ex = resp . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 440 ---------------------------------------------
Converts a response command to a response object . --> return the error message --> Socre: 1.0

[[[[Adv]]]]: private static Object [[toResponseObject]] ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) [[responseCommand]] ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object [[ellateonteedlbception]] ( ResponseCommand [[actionummatder]] ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) [[actionummatder]] ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 441 ---------------------------------------------
Resolve response object . --> Common API to send causeripatatatice endpoint --> Socre: 1.0

[[[[Adv]]]]: public static Object [[resolveResponseObject]] ( ResponseCommand [[responseCommand]] , String addr ) throws RemotingException { preProcess ( [[responseCommand]] , addr ) ; if ( [[responseCommand]] . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( [[responseCommand]] ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , [[responseCommand]] . getResponseStatus ( ) , addr , [[responseCommand]] . getId ( ) ) ; logger . warn ( msg ) ; if ( [[responseCommand]] . getCause ( ) != null ) { throw new InvokeException ( msg , [[responseCommand]] . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object [[causeripaticeprocut]] ( ResponseCommand [[asairmardded]] , String addr ) throws RemotingException { preProcess ( [[asairmardded]] , addr ) ; if ( [[asairmardded]] . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( [[asairmardded]] ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , [[asairmardded]] . getResponseStatus ( ) , addr , [[asairmardded]] . getId ( ) ) ; logger . warn ( msg ) ; if ( [[asairmardded]] . getCause ( ) != null ) { throw new InvokeException ( msg , [[asairmardded]] . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 442 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 259 / 176 / 7 / 442:  44%|████▍     | 442/1000 [35:28<44:47,  4.82s/it][Succeeded / Failed / Skipped / Total] 259 / 176 / 7 / 442:  44%|████▍     | 443/1000 [35:39<44:49,  4.83s/it][Succeeded / Failed / Skipped / Total] 260 / 176 / 7 / 443:  44%|████▍     | 443/1000 [35:39<44:49,  4.83s/it][Succeeded / Failed / Skipped / Total] 260 / 176 / 7 / 443:  44%|████▍     | 444/1000 [35:39<44:39,  4.82s/it][Succeeded / Failed / Skipped / Total] 261 / 176 / 7 / 444:  44%|████▍     | 444/1000 [35:39<44:39,  4.82s/it][Succeeded / Failed / Skipped / Total] 261 / 176 / 7 / 444:  44%|████▍     | 445/1000 [35:48<44:39,  4.83s/it][Succeeded / Failed / Skipped / Total] 262 / 176 / 7 / 445:  44%|████▍     | 445/1000 [35:48<44:39,  4.83s/it][Succeeded / Failed / Skipped / Total] 262 / 176 / 7 / 445:  45%|████▍     | 446/1000 [35:48<44:29,  4.82s/it][Succeeded / Failed / Skipped / Total] 263 / 176 / 7 / 446:  45%|████▍     | 446/1000 [35:48<44:29,  4.82s/it][Succeeded / Failed / Skipped / Total] 263 / 176 / 7 / 446:  45%|████▍     | 447/1000 [35:51<44:21,  4.81s/it][Succeeded / Failed / Skipped / Total] 264 / 176 / 7 / 447:  45%|████▍     | 447/1000 [35:51<44:21,  4.81s/it][Succeeded / Failed / Skipped / Total] 264 / 176 / 7 / 447:  45%|████▍     | 448/1000 [35:56<44:17,  4.81s/it][Succeeded / Failed / Skipped / Total] 265 / 176 / 7 / 448:  45%|████▍     | 448/1000 [35:56<44:17,  4.81s/it][Succeeded / Failed / Skipped / Total] 265 / 176 / 7 / 448:  45%|████▍     | 449/1000 [35:56<44:06,  4.80s/it]print connection trace log --> Called by the command line arguments . --> Socre: 1.0

[[[[Adv]]]]: public static void [[printConnectionTraceLog]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void [[argumentrununxaudimelk]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 443 ---------------------------------------------
Create an event loop group . --> Creates a new EventLoopGroup --> Socre: 1.0

[[[[Adv]]]]: public static EventLoopGroup [[newEventLoopGroup]] ( int nThreads , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , threadFactory ) : new NioEventLoopGroup ( nThreads , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup [[oldevetorcooleular]] ( int nThreads , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , threadFactory ) : new NioEventLoopGroup ( nThreads , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 444 ---------------------------------------------
Detail error message . --> Convert RpcResponseCommand to JpcResponse --> Socre: 1.0

[[[[Adv]]]]: private static String [[detailErrMsg]] ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand [[resp]] = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( [[resp]] . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , [[resp]] . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String [[commandjerncergh]] ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand [[abspr]] = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( [[abspr]] . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , [[abspr]] . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 445 ---------------------------------------------
Parse the remote address . --> Convert a box to a human - readable string --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress [[remote]] = [[channel]] . remoteAddress ( ) ; return doParse ( [[remote]] != null ? [[remote]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[consaipodealearlesl]] ( final Channel [[box]] ) { if ( null == [[box]] ) { return StringUtils . EMPTY ; } final SocketAddress [[port]] = [[box]] . remoteAddress ( ) ; return doParse ( [[port]] != null ? [[port]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 446 ---------------------------------------------
Returns the local address of the given channel . --> Returns a busstviewt view --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress local = channel . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[busesthdsviewt]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress local = channel . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 447 ---------------------------------------------
Creates a RpcServerException from the Throwable . --> todo support --> Socre: 1.0

[[[[Adv]]]]: private RpcServerException [[createServerException]] ( Throwable t , String errMsg ) { String [[formattedErrMsg]] = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( [[formattedErrMsg]] ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException [[becomesurecrejapass]] ( Throwable t , String errMsg ) { String [[oxtellirressg]] = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( [[oxtellirressg]] ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 448 ---------------------------------------------
Gets the remote IP address . --> Returns persistoaget --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[persolasoaget]] ( final Channel [[access]] ) { if ( null == [[access]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[access]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 449 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 266 / 176 / 7 / 449:  45%|████▍     | 449/1000 [35:56<44:06,  4.80s/it][Succeeded / Failed / Skipped / Total] 267 / 176 / 7 / 450:  45%|████▌     | 450/1000 [35:56<43:56,  4.79s/it][Succeeded / Failed / Skipped / Total] 267 / 176 / 7 / 450:  45%|████▌     | 451/1000 [36:01<43:50,  4.79s/it][Succeeded / Failed / Skipped / Total] 268 / 176 / 7 / 451:  45%|████▌     | 451/1000 [36:01<43:50,  4.79s/it][Succeeded / Failed / Skipped / Total] 268 / 177 / 7 / 452:  45%|████▌     | 452/1000 [36:08<43:49,  4.80s/it][Succeeded / Failed / Skipped / Total] 268 / 177 / 7 / 452:  45%|████▌     | 453/1000 [36:13<43:44,  4.80s/it][Succeeded / Failed / Skipped / Total] 269 / 177 / 7 / 453:  45%|████▌     | 453/1000 [36:13<43:44,  4.80s/it][Succeeded / Failed / Skipped / Total] 269 / 177 / 7 / 453:  45%|████▌     | 454/1000 [36:14<43:35,  4.79s/it][Succeeded / Failed / Skipped / Total] 270 / 177 / 7 / 454:  45%|████▌     | 454/1000 [36:14<43:35,  4.79s/it][Succeeded / Failed / Skipped / Total] 270 / 177 / 7 / 454:  46%|████▌     | 455/1000 [36:26<43:39,  4.81s/it][Succeeded / Failed / Skipped / Total] 271 / 177 / 7 / 455:  46%|████▌     | 455/1000 [36:26<43:39,  4.81s/it][Succeeded / Failed / Skipped / Total] 271 / 177 / 7 / 455:  46%|████▌     | 456/1000 [36:27<43:30,  4.80s/it][Succeeded / Failed / Skipped / Total] 272 / 177 / 7 / 456:  46%|████▌     | 456/1000 [36:27<43:30,  4.80s/it][Succeeded / Failed / Skipped / Total] 272 / 177 / 7 / 456:  46%|████▌     | 457/1000 [36:33<43:25,  4.80s/it][Succeeded / Failed / Skipped / Total] 273 / 177 / 7 / 457:  46%|████▌     | 457/1000 [36:33<43:25,  4.80s/it][Succeeded / Failed / Skipped / Total] 273 / 177 / 7 / 457:  46%|████▌     | 458/1000 [36:38<43:21,  4.80s/it]Returns the local IP address of the given channel . --> Returns apdmetimplem address --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseLocalIP]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String [[apdmetple]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 450 ---------------------------------------------
Returns the hostname of the remote host . --> Get rackscript number --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[rackscriptamporxesтnum]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 451 ---------------------------------------------
Adds a connection . --> Adds the given connections . --> Socre: 1.0

[[[[Adv]]]]: public void add ( Connection [[connection]] ) { markAccess ( ) ; if ( null == [[connection]] ) { return ; } boolean res = this . conns . addIfAbsent ( [[connection]] ) ; if ( res ) { [[connection]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void add ( Connection [[connections]] ) { markAccess ( ) ; if ( null == [[connections]] ) { return ; } boolean res = this . conns . addIfAbsent ( [[connections]] ) ; if ( res ) { [[connections]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 452 ---------------------------------------------
Gets the remote port . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseRemotePort]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int [[masryphpput]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 453 ---------------------------------------------
Gets the port of the given channel . --> Get rackp for a given lane --> Socre: 1.0

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress [[local]] = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( [[local]] != null ) { return [[local]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[rackpauclverrist]] ( final Channel [[lane]] ) { if ( null == [[lane]] ) { return - 1 ; } final InetSocketAddress [[central]] = ( InetSocketAddress ) [[lane]] . localAddress ( ) ; if ( [[central]] != null ) { return [[central]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 454 ---------------------------------------------
Gets the current connection . --> Loops the pool . --> Socre: 1.0

[[[[Adv]]]]: public Connection [[get]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection [[loop]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 455 ---------------------------------------------
Remove a connection and close it . --> Closes the old aircarecare . --> Socre: 1.0

[[[[Adv]]]]: public void [[removeAndTryClose]] ( Connection [[connection]] ) { if ( null == [[connection]] ) { return ; } boolean res = this . conns . remove ( [[connection]] ) ; if ( res ) { [[connection]] . decreaseRef ( ) ; } if ( [[connection]] . noRef ( ) ) { [[connection]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void [[collectoldairtecare]] ( Connection [[boundary]] ) { if ( null == [[boundary]] ) { return ; } boolean res = this . conns . remove ( [[boundary]] ) ; if ( res ) { [[boundary]] . decreaseRef ( ) ; } if ( [[boundary]] . noRef ( ) ) { [[boundary]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 456 ---------------------------------------------
Gets custom serializer . --> returns null if not found --> Socre: 1.0

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( String [[className]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[className]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer [[estisopecionun]] ( String [[localunknown]] ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( [[localunknown]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 457 ---------------------------------------------
Parse socket address to host IP address . --> Utility method to check if how to do a form dbserver --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseSocketAddressToHostIp]] ( SocketAddress [[socketAddress]] ) { final InetSocketAddress addrs = ( InetSocketAddress ) [[socketAddress]] ; if ( addrs != null ) { InetAddress [[addr]] = addrs . getAddress ( ) ; if ( null != [[addr]] ) { return [[addr]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String [[hassbformdدressedtifustip]] ( SocketAddress [[howbeddimct]] ) { final InetSocketAddress addrs = ( InetSocketAddress ) [[howbeddimct]] ; if ( addrs != null ) { InetAddress [[chairow]] = addrs . getAddress ( ) ; if ( null != [[chairow]] ) { return [[chairow]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 458 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 273 / 178 / 7 / 458:  46%|████▌     | 458/1000 [36:38<43:21,  4.80s/it][Succeeded / Failed / Skipped / Total] 273 / 178 / 7 / 458:  46%|████▌     | 459/1000 [36:38<43:11,  4.79s/it][Succeeded / Failed / Skipped / Total] 274 / 178 / 7 / 459:  46%|████▌     | 459/1000 [36:38<43:11,  4.79s/it][Succeeded / Failed / Skipped / Total] 274 / 178 / 7 / 459:  46%|████▌     | 460/1000 [36:44<43:08,  4.79s/it][Succeeded / Failed / Skipped / Total] 274 / 179 / 7 / 460:  46%|████▌     | 460/1000 [36:44<43:08,  4.79s/it][Succeeded / Failed / Skipped / Total] 274 / 179 / 7 / 460:  46%|████▌     | 461/1000 [36:46<42:59,  4.79s/it][Succeeded / Failed / Skipped / Total] 275 / 179 / 7 / 461:  46%|████▌     | 461/1000 [36:46<42:59,  4.79s/it][Succeeded / Failed / Skipped / Total] 275 / 179 / 7 / 461:  46%|████▌     | 462/1000 [36:46<42:49,  4.78s/it][Succeeded / Failed / Skipped / Total] 275 / 179 / 8 / 462:  46%|████▌     | 462/1000 [36:46<42:49,  4.78s/it][Succeeded / Failed / Skipped / Total] 275 / 179 / 8 / 462:  46%|████▋     | 463/1000 [36:51<42:44,  4.78s/it][Succeeded / Failed / Skipped / Total] 276 / 179 / 8 / 463:  46%|████▋     | 463/1000 [36:51<42:44,  4.78s/it][Succeeded / Failed / Skipped / Total] 276 / 179 / 8 / 463:  46%|████▋     | 464/1000 [36:51<42:34,  4.77s/it][Succeeded / Failed / Skipped / Total] 276 / 180 / 8 / 464:  46%|████▋     | 464/1000 [36:51<42:34,  4.77s/it][Succeeded / Failed / Skipped / Total] 276 / 180 / 8 / 464:  46%|████▋     | 465/1000 [36:54<42:27,  4.76s/it]Get custom serializer for command code --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode [[code]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[code]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[listtutisveruccontrol]] ( CommandCode [[coded]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[coded]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 459 ---------------------------------------------
Start connection monitor thread . --> Starts the connection monitor thread . --> Socre: 1.0

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . [[executor]] = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . [[executor]] . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . [[enplilot]] = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . [[enplilot]] . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 460 ---------------------------------------------
Register a custom serializer for a class . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String [[className]] , CustomSerializer [[serializer]] ) { CustomSerializer [[prevSerializer]] = classCustomSerializer . putIfAbsent ( [[className]] , [[serializer]] ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[className]] + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[teststataretillized]] ( String [[basecha]] , CustomSerializer [[commercialener]] ) { CustomSerializer [[piopshealan]] = classCustomSerializer . putIfAbsent ( [[basecha]] , [[commercialener]] ) ; if ( [[piopshealan]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[basecha]] + ", the custom serializer is: " + [[piopshealan]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 461 ---------------------------------------------
Initialize write buffer water mark . --> Writes low watermarks . --> Socre: 1.0

[[[[Adv]]]]: private void [[initWriteBufferWaterMark]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void [[atisgralovokingwellmarks]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 462 ---------------------------------------------
Batch output messages . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 463 ---------------------------------------------
Create a frame for the given opcode . --> Static factory method for constructing frames . --> Socre: 1.0

[[[[Adv]]]]: public static FramedataImpl1 [[get]] ( Opcode opcode ) { if ( opcode == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( opcode ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 [[print]] ( Opcode opcode ) { if ( opcode == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( opcode ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 464 ---------------------------------------------
Registers custom serializer for command code . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode [[code]] , CustomSerializer [[serializer]] ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( [[code]] , [[serializer]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[code]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[faacothalsalrilun]] ( CommandCode [[coding]] , CustomSerializer [[expressun]] ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( [[coding]] , [[expressun]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[coding]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 465 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 277 / 180 / 8 / 465:  46%|████▋     | 465/1000 [36:54<42:27,  4.76s/it][Succeeded / Failed / Skipped / Total] 277 / 180 / 8 / 465:  47%|████▋     | 466/1000 [36:54<42:18,  4.75s/it][Succeeded / Failed / Skipped / Total] 278 / 180 / 8 / 466:  47%|████▋     | 466/1000 [36:54<42:18,  4.75s/it][Succeeded / Failed / Skipped / Total] 278 / 180 / 8 / 466:  47%|████▋     | 467/1000 [37:01<42:15,  4.76s/it][Succeeded / Failed / Skipped / Total] 279 / 180 / 8 / 467:  47%|████▋     | 467/1000 [37:01<42:15,  4.76s/it][Succeeded / Failed / Skipped / Total] 279 / 180 / 8 / 467:  47%|████▋     | 468/1000 [37:06<42:10,  4.76s/it][Succeeded / Failed / Skipped / Total] 280 / 180 / 8 / 468:  47%|████▋     | 468/1000 [37:06<42:10,  4.76s/it][Succeeded / Failed / Skipped / Total] 280 / 180 / 8 / 468:  47%|████▋     | 469/1000 [37:13<42:09,  4.76s/it][Succeeded / Failed / Skipped / Total] 281 / 180 / 8 / 469:  47%|████▋     | 469/1000 [37:13<42:09,  4.76s/it][Succeeded / Failed / Skipped / Total] 281 / 180 / 8 / 469:  47%|████▋     | 470/1000 [37:14<41:59,  4.75s/it][Succeeded / Failed / Skipped / Total] 282 / 180 / 8 / 470:  47%|████▋     | 470/1000 [37:14<41:59,  4.75s/it][Succeeded / Failed / Skipped / Total] 282 / 180 / 8 / 470:  47%|████▋     | 471/1000 [37:17<41:52,  4.75s/it][Succeeded / Failed / Skipped / Total] 283 / 180 / 8 / 471:  47%|████▋     | 471/1000 [37:17<41:52,  4.75s/it][Succeeded / Failed / Skipped / Total] 283 / 180 / 8 / 471:  47%|████▋     | 472/1000 [37:22<41:48,  4.75s/it][Succeeded / Failed / Skipped / Total] 284 / 180 / 8 / 472:  47%|████▋     | 472/1000 [37:22<41:48,  4.75s/it][Succeeded / Failed / Skipped / Total] 284 / 180 / 8 / 472:  47%|████▋     | 473/1000 [37:25<41:41,  4.75s/it]Set the code . --> book function --> Socre: 1.0

[[[[Adv]]]]: public void [[setCode]] ( int code ) { this . code = code ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[bookfunction]] ( int code ) { this . code = code ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 466 ---------------------------------------------
Check if the remote address is connected . --> Determines if the remote is attached to the remote server . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isConnected]] ( String remoteAddr ) { Url [[url]] = this . rpcRemoting . addressParser . parse ( remoteAddr ) ; return this . isConnected ( [[url]] ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean [[itattached]] ( String remoteAddr ) { Url [[hostln]] = this . rpcRemoting . addressParser . parse ( remoteAddr ) ; return this . isConnected ( [[hostln]] ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 467 ---------------------------------------------
Update the payload . --> Synchronized . --> Socre: 1.0

[[[[Adv]]]]: private void [[updatePayload]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void [[evolutionaugcondes]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 468 ---------------------------------------------
Validate UTF8 --> Base64 - formatted string --> Socre: 1.0

[[[[Adv]]]]: private void [[validateUtf8]] ( ByteBuffer [[payload]] , int mark ) throws InvalidDataException { try { [[payload]] . position ( [[payload]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[payload]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[payload]] . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void [[basetportft86]] ( ByteBuffer [[cargo]] , int mark ) throws InvalidDataException { try { [[cargo]] . position ( [[cargo]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[cargo]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[cargo]] . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 469 ---------------------------------------------
Generate final key . --> utility method to capture the text --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[capturedeantfold]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 470 ---------------------------------------------
Translate single frame length limit . --> This method is used for debugging purposes . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long [[length]] ) throws LimitExceededException { if ( [[length]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[length]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[length]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[length]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[dirlockedhdgeuening0larti]] ( long [[string]] ) throws LimitExceededException { if ( [[string]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[string]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[string]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[string]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 471 ---------------------------------------------
Translate a single packet size . --> for testing purposes --> Socre: 1.0

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int [[maxpacketsize]] , int realpacketsize ) throws IncompleteException { if ( [[maxpacketsize]] < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int [[projectristeziz]] , int realpacketsize ) throws IncompleteException { if ( [[projectristeziz]] < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 472 ---------------------------------------------
Processes a frame message . --> Called by websocket . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameBinary]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void [[actualtypedera]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 473 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 285 / 180 / 8 / 473:  47%|████▋     | 473/1000 [37:25<41:41,  4.75s/it][Succeeded / Failed / Skipped / Total] 285 / 180 / 8 / 473:  47%|████▋     | 474/1000 [37:29<41:36,  4.75s/it][Succeeded / Failed / Skipped / Total] 286 / 180 / 8 / 474:  47%|████▋     | 474/1000 [37:29<41:36,  4.75s/it][Succeeded / Failed / Skipped / Total] 286 / 180 / 8 / 474:  48%|████▊     | 475/1000 [37:31<41:28,  4.74s/it][Succeeded / Failed / Skipped / Total] 286 / 181 / 8 / 475:  48%|████▊     | 475/1000 [37:31<41:28,  4.74s/it][Succeeded / Failed / Skipped / Total] 286 / 181 / 8 / 475:  48%|████▊     | 476/1000 [37:33<41:21,  4.74s/it][Succeeded / Failed / Skipped / Total] 287 / 181 / 8 / 476:  48%|████▊     | 476/1000 [37:33<41:21,  4.74s/it][Succeeded / Failed / Skipped / Total] 287 / 181 / 8 / 476:  48%|████▊     | 477/1000 [37:35<41:13,  4.73s/it][Succeeded / Failed / Skipped / Total] 287 / 182 / 8 / 477:  48%|████▊     | 477/1000 [37:35<41:13,  4.73s/it][Succeeded / Failed / Skipped / Total] 287 / 182 / 8 / 477:  48%|████▊     | 478/1000 [37:36<41:04,  4.72s/it]Logs a runtime exception . --> Called when a websocket message is received --> Socre: 1.0

[[[[Adv]]]]: private void [[logRuntimeException]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void [[cabinrealgsprospace]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 474 ---------------------------------------------
Process a text message . --> Called from websocket . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameText]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void [[businessclassart]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 475 ---------------------------------------------
Checks whether the given protocol contains the requested protocol . --> [[[FAILED]]]

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String [[requestedProtocol]] ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( [[requestedProtocol]] ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[setsrewdsentparaticside]] ( String [[suggestedropolocular]] ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( [[suggestedropolocular]] ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 476 ---------------------------------------------
Processes the next frame --> Programmatic programmatically . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[programviewesvent]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 477 ---------------------------------------------
Processes a frame --> [[[FAILED]]]

[[[[Adv]]]]: private void [[processFrameContinuousAndNonFin]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void [[rnmancelreuated2rosthor]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 478 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 288 / 182 / 8 / 478:  48%|████▊     | 478/1000 [37:36<41:04,  4.72s/it][Succeeded / Failed / Skipped / Total] 288 / 182 / 8 / 478:  48%|████▊     | 479/1000 [37:38<40:56,  4.72s/it][Succeeded / Failed / Skipped / Total] 289 / 182 / 8 / 479:  48%|████▊     | 479/1000 [37:38<40:56,  4.72s/it][Succeeded / Failed / Skipped / Total] 289 / 182 / 8 / 479:  48%|████▊     | 480/1000 [37:45<40:54,  4.72s/it][Succeeded / Failed / Skipped / Total] 290 / 182 / 8 / 480:  48%|████▊     | 480/1000 [37:45<40:54,  4.72s/it][Succeeded / Failed / Skipped / Total] 290 / 182 / 8 / 480:  48%|████▊     | 481/1000 [37:55<40:55,  4.73s/it][Succeeded / Failed / Skipped / Total] 291 / 182 / 8 / 481:  48%|████▊     | 481/1000 [37:55<40:55,  4.73s/it][Succeeded / Failed / Skipped / Total] 291 / 182 / 8 / 481:  48%|████▊     | 482/1000 [37:56<40:46,  4.72s/it][Succeeded / Failed / Skipped / Total] 292 / 182 / 8 / 482:  48%|████▊     | 482/1000 [37:56<40:46,  4.72s/it][Succeeded / Failed / Skipped / Total] 292 / 182 / 8 / 482:  48%|████▊     | 483/1000 [37:57<40:37,  4.72s/it][Succeeded / Failed / Skipped / Total] 293 / 182 / 8 / 483:  48%|████▊     | 483/1000 [37:57<40:37,  4.72s/it][Succeeded / Failed / Skipped / Total] 293 / 182 / 8 / 483:  48%|████▊     | 484/1000 [37:58<40:29,  4.71s/it][Succeeded / Failed / Skipped / Total] 294 / 182 / 8 / 484:  48%|████▊     | 484/1000 [37:58<40:29,  4.71s/it][Succeeded / Failed / Skipped / Total] 294 / 182 / 8 / 484:  48%|████▊     | 485/1000 [38:02<40:23,  4.71s/it][Succeeded / Failed / Skipped / Total] 295 / 182 / 8 / 485:  48%|████▊     | 485/1000 [38:02<40:23,  4.71s/it]Processes the next frame . --> Do nothing . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[dosframedsisgoful]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 479 ---------------------------------------------
Process a Frame . --> Internal method for internal body --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameClosing]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void [[internalbodyacode]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 480 ---------------------------------------------
Gets the size of the byte buffer list in bytes . --> used for unit test --> Socre: 1.0

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[setypiecebindummycollectionsise]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 481 ---------------------------------------------
Translate handshake . --> Utility method to create amempotent . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpClient]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder [[amemindtaakeitnotcrent]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 482 ---------------------------------------------
Translate handshake . --> Convenience function to compare two strings . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpServer]] ( String [ ] [[firstLineTokens]] , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder [[doublequestsekedtitivestarur]] ( String [ ] [[justlformis]] , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 483 ---------------------------------------------
Gets the payload from the buffer list . --> Get byte buffer from byte buffer list --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer getPayloadFromByteBufferList ( ) throws LimitExceededException { long [[totalSize]] = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer [[buffer]] : byteBufferList ) { [[totalSize]] += [[buffer]] . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) [[totalSize]] ) ; for ( ByteBuffer [[buffer]] : byteBufferList ) { resultingByteBuffer . put ( [[buffer]] ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer getPayloadFromByteBufferList ( ) throws LimitExceededException { long [[countersfold]] = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer [[tank]] : byteBufferList ) { [[countersfold]] += [[tank]] . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) [[countersfold]] ) ; for ( ByteBuffer [[tank]] : byteBufferList ) { resultingByteBuffer . put ( [[tank]] ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 484 ---------------------------------------------
Checks if the limit is exceeded . --> This method should only be called once . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkBufferLimit]] ( ) throws LimitExceededException { long [[totalSize]] = getByteBufferListSize ( ) ; if ( [[totalSize]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[totalSize]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void [[counterrickerpsent]] ( ) throws LimitExceededException { long [[shocksites]] = getByteBufferListSize ( ) ; if ( [[shocksites]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[shocksites]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 485 ---------------------------------------------
Closes the connection . --> send response to server --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToWrongHandshake]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void [[crownvindunotebandrongunigrae]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 486 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 296 / 182 / 8 / 486:  49%|████▊     | 486/1000 [38:02<40:13,  4.70s/it][Succeeded / Failed / Skipped / Total] 296 / 182 / 8 / 486:  49%|████▊     | 487/1000 [38:02<40:04,  4.69s/it][Succeeded / Failed / Skipped / Total] 296 / 182 / 9 / 487:  49%|████▊     | 487/1000 [38:02<40:04,  4.69s/it][Succeeded / Failed / Skipped / Total] 297 / 182 / 9 / 488:  49%|████▉     | 488/1000 [38:03<39:55,  4.68s/it][Succeeded / Failed / Skipped / Total] 297 / 182 / 9 / 488:  49%|████▉     | 489/1000 [38:08<39:51,  4.68s/it][Succeeded / Failed / Skipped / Total] 297 / 183 / 9 / 489:  49%|████▉     | 489/1000 [38:08<39:51,  4.68s/it][Succeeded / Failed / Skipped / Total] 298 / 183 / 9 / 490:  49%|████▉     | 490/1000 [38:12<39:45,  4.68s/it][Succeeded / Failed / Skipped / Total] 298 / 183 / 9 / 490:  49%|████▉     | 491/1000 [38:12<39:36,  4.67s/it][Succeeded / Failed / Skipped / Total] 299 / 183 / 9 / 491:  49%|████▉     | 491/1000 [38:12<39:36,  4.67s/it]Decodes the handshake data . --> Decodes a frame . --> Socre: 1.0

[[[[Adv]]]]: public void decode ( ByteBuffer [[socketBuffer]] ) { assert ( [[socketBuffer]] . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , [[socketBuffer]] . remaining ( ) , ( [[socketBuffer]] . remaining ( ) > 1000 ? "too big to display" : new String ( [[socketBuffer]] . array ( ) , [[socketBuffer]] . position ( ) , [[socketBuffer]] . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( [[socketBuffer]] ) ; } } else { if ( decodeHandshake ( [[socketBuffer]] ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != [[socketBuffer]] . hasRemaining ( ) || ! [[socketBuffer]] . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void decode ( ByteBuffer [[daypaffle]] ) { assert ( [[daypaffle]] . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , [[daypaffle]] . remaining ( ) , ( [[daypaffle]] . remaining ( ) > 1000 ? "too big to display" : new String ( [[daypaffle]] . array ( ) , [[daypaffle]] . position ( ) , [[daypaffle]] . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( [[daypaffle]] ) ; } } else { if ( decodeHandshake ( [[daypaffle]] ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != [[daypaffle]] . hasRemaining ( ) || ! [[daypaffle]] . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 487 ---------------------------------------------
Resets the connection . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 488 ---------------------------------------------
Writes the connection to the server . --> Sends userARched API response . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[userarcedunethowadactapadrearroir]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 489 ---------------------------------------------
Start the connect thread . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[com]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 490 ---------------------------------------------
Send the given text to the web socket . --> Drop a line --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[send]] ( String [[text]] ) { if ( [[text]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[send]] ( draft . createFrames ( [[text]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void [[drop]] ( String [[line]] ) { if ( [[line]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[drop]] ( draft . createFrames ( [[line]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 491 ---------------------------------------------
Generate HTTP response from an error . --> Capture mpt text --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[generateHttpResponseDueToError]] ( int errorCode ) { String [[errorCodeDescription]] ; switch ( errorCode ) { case 404 : [[errorCodeDescription]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[errorCodeDescription]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[errorCodeDescription]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[errorCodeDescription]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[errorCodeDescription]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer [[capturempttextcomaedsaluntmng]] ( int errorCode ) { String [[enzyarstchator]] ; switch ( errorCode ) { case 404 : [[enzyarstchator]] = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : [[enzyarstchator]] = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + [[enzyarstchator]] + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + [[enzyarstchator]] . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + [[enzyarstchator]] + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 492 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 300 / 183 / 9 / 492:  49%|████▉     | 492/1000 [38:17<39:31,  4.67s/it][Succeeded / Failed / Skipped / Total] 300 / 183 / 9 / 492:  49%|████▉     | 493/1000 [38:18<39:23,  4.66s/it][Succeeded / Failed / Skipped / Total] 301 / 183 / 9 / 493:  49%|████▉     | 493/1000 [38:18<39:23,  4.66s/it][Succeeded / Failed / Skipped / Total] 302 / 183 / 9 / 494:  49%|████▉     | 494/1000 [38:20<39:16,  4.66s/it][Succeeded / Failed / Skipped / Total] 302 / 183 / 9 / 494:  50%|████▉     | 495/1000 [38:25<39:11,  4.66s/it][Succeeded / Failed / Skipped / Total] 303 / 183 / 9 / 495:  50%|████▉     | 495/1000 [38:25<39:11,  4.66s/it][Succeeded / Failed / Skipped / Total] 304 / 183 / 9 / 496:  50%|████▉     | 496/1000 [38:27<39:04,  4.65s/it][Succeeded / Failed / Skipped / Total] 304 / 183 / 9 / 496:  50%|████▉     | 497/1000 [38:29<38:56,  4.65s/it][Succeeded / Failed / Skipped / Total] 305 / 183 / 9 / 497:  50%|████▉     | 497/1000 [38:29<38:56,  4.65s/it]Sends the handshake . --> Performs backking . --> Socre: 1.0

[[[[Adv]]]]: private void [[sendHandshake]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void [[backkingstanc]] ( ) throws InvalidHandshakeException { String path ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) path = "/" ; else path = part1 ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 493 ---------------------------------------------
Returns the port . --> Checks to see if we have a city --> Socre: 1.0

[[[[Adv]]]]: private int [[getPort]] ( ) { int [[port]] = uri . getPort ( ) ; if ( [[port]] == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return [[port]] ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[haveful]] ( ) { int [[city]] = uri . getPort ( ) ; if ( [[city]] == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return [[city]] ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 494 ---------------------------------------------
Stop the connection lost timer . --> Performs quick check . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[fastavenettiocaduret]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 495 ---------------------------------------------
Start the websocket shutdown timer . --> Called by websocket . --> Socre: 1.0

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[cevannitionuesstiver]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 496 ---------------------------------------------
Restart the connection lost timer . --> deadlock checker --> Socre: 1.0

[[[[Adv]]]]: private void [[restartConnectionLostTimer]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void [[buzzinsnesustworksutimen]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 497 ---------------------------------------------
Sets the connection lost timeout . --> situation time --> Socre: 1.0

[[[[Adv]]]]: public void [[setConnectionLostTimeout]] ( int [[connectionLostTimeout]] ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( [[connectionLostTimeout]] ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void [[sitvannytionlicaummestus]] ( int [[bondeontieᄆunt]] ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( [[bondeontieᄆunt]] ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 498 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 306 / 183 / 9 / 498:  50%|████▉     | 498/1000 [38:34<38:52,  4.65s/it][Succeeded / Failed / Skipped / Total] 306 / 183 / 9 / 498:  50%|████▉     | 499/1000 [38:34<38:43,  4.64s/it][Succeeded / Failed / Skipped / Total] 307 / 183 / 9 / 499:  50%|████▉     | 499/1000 [38:34<38:43,  4.64s/it][Succeeded / Failed / Skipped / Total] 307 / 184 / 9 / 500:  50%|█████     | 500/1000 [38:43<38:43,  4.65s/it][Succeeded / Failed / Skipped / Total] 307 / 184 / 9 / 500:  50%|█████     | 501/1000 [38:47<38:38,  4.65s/it][Succeeded / Failed / Skipped / Total] 307 / 185 / 9 / 501:  50%|█████     | 501/1000 [38:47<38:38,  4.65s/it][Succeeded / Failed / Skipped / Total] 307 / 185 / 9 / 501:  50%|█████     | 502/1000 [38:54<38:35,  4.65s/it][Succeeded / Failed / Skipped / Total] 308 / 185 / 9 / 502:  50%|█████     | 502/1000 [38:54<38:35,  4.65s/it][Succeeded / Failed / Skipped / Total] 308 / 185 / 9 / 502:  50%|█████     | 503/1000 [38:56<38:29,  4.65s/it][Succeeded / Failed / Skipped / Total] 309 / 185 / 9 / 503:  50%|█████     | 503/1000 [38:56<38:29,  4.65s/it][Succeeded / Failed / Skipped / Total] 309 / 185 / 9 / 503:  50%|█████     | 504/1000 [38:56<38:19,  4.64s/it][Succeeded / Failed / Skipped / Total] 309 / 186 / 9 / 504:  50%|█████     | 504/1000 [38:56<38:19,  4.64s/it][Succeeded / Failed / Skipped / Total] 309 / 186 / 9 / 504:  50%|█████     | 505/1000 [39:00<38:14,  4.64s/it]Initiate handshake . --> only for testing --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[onWebsocketHandshakeReceivedAsServer]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[gethowpsickdrebleshadthectitheurving]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 499 ---------------------------------------------
Cancels the connection lost timer . --> Called by Maven --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[controlaveneactionslaytamet]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 500 ---------------------------------------------
Sends a ping frame . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[onWebsocketPing]] ( WebSocket conn , Framedata f ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void [[emptyredesourotport]] ( WebSocket conn , Framedata f ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 501 ---------------------------------------------
Get the port . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getPort]] ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[hotu]] ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 502 ---------------------------------------------
Handles additional read . --> Passes to the queue . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAdditionalRead]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read

[[[[Adv]]]]: private void [[beidclassidnt]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 503 ---------------------------------------------
Accepts a single connection . --> Starts the server . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAccept]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation

[[[[Adv]]]]: private void [[andarcesps]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 504 ---------------------------------------------
Stops the loop . --> [[[FAILED]]]

[[[[Adv]]]]: public void stop ( int [[timeout]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "[[False]]" != "[[False]]" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void stop ( int [[clockswitch]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "[[doubt]]" != "[[doubt]]" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 505 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 310 / 186 / 9 / 505:  50%|█████     | 505/1000 [39:00<38:14,  4.64s/it][Succeeded / Failed / Skipped / Total] 310 / 186 / 9 / 505:  51%|█████     | 506/1000 [39:03<38:07,  4.63s/it][Succeeded / Failed / Skipped / Total] 311 / 186 / 9 / 506:  51%|█████     | 506/1000 [39:03<38:07,  4.63s/it][Succeeded / Failed / Skipped / Total] 311 / 186 / 9 / 506:  51%|█████     | 507/1000 [39:05<38:00,  4.63s/it][Succeeded / Failed / Skipped / Total] 312 / 186 / 9 / 507:  51%|█████     | 507/1000 [39:05<38:00,  4.63s/it][Succeeded / Failed / Skipped / Total] 312 / 186 / 9 / 507:  51%|█████     | 508/1000 [39:05<37:51,  4.62s/it][Succeeded / Failed / Skipped / Total] 313 / 186 / 9 / 508:  51%|█████     | 508/1000 [39:05<37:51,  4.62s/it][Succeeded / Failed / Skipped / Total] 313 / 186 / 9 / 508:  51%|█████     | 509/1000 [39:07<37:44,  4.61s/it][Succeeded / Failed / Skipped / Total] 314 / 186 / 9 / 509:  51%|█████     | 509/1000 [39:07<37:44,  4.61s/it][Succeeded / Failed / Skipped / Total] 314 / 186 / 9 / 509:  51%|█████     | 510/1000 [39:09<37:37,  4.61s/it]Schedules a connection lost . --> for testing only --> Socre: 1.0

[[[[Adv]]]]: private void [[executeConnectionLostDetection]] ( WebSocket webSocket , long [[minimumPongTime]] ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl [[webSocketImpl]] = ( WebSocketImpl ) webSocket ; if ( [[webSocketImpl]] . getLastPong ( ) < [[minimumPongTime]] ) { log . trace ( "Closing connection due to no pong received: {}" , [[webSocketImpl]] ) ; [[webSocketImpl]] . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( [[webSocketImpl]] . isOpen ( ) ) { [[webSocketImpl]] . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , [[webSocketImpl]] ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void [[loopgennecedtospertouttation]] ( WebSocket webSocket , long [[bagsonote]] ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl [[weaverchoudgeathitoplay]] = ( WebSocketImpl ) webSocket ; if ( [[weaverchoudgeathitoplay]] . getLastPong ( ) < [[bagsonote]] ) { log . trace ( "Closing connection due to no pong received: {}" , [[weaverchoudgeathitoplay]] ) ; [[weaverchoudgeathitoplay]] . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( [[weaverchoudgeathitoplay]] . isOpen ( ) ) { [[weaverchoudgeathitoplay]] . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , [[weaverchoudgeathitoplay]] ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 506 ---------------------------------------------
Handles a single write . --> Batch data read . --> Socre: 1.0

[[[[Adv]]]]: private void [[doWrite]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation

[[[[Adv]]]]: private void [[acper]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 507 ---------------------------------------------
Setup selector and server thread . --> Returns true if WebSocket is a WebSocket . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doSetupSelectorAndServerThread]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean [[deesuwelinuidindsurmexate]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 508 ---------------------------------------------
Handles a read . --> Reads the data from the connection . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doRead]] ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean [[daherck]] ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 509 ---------------------------------------------
Makes sure that there are only single thread . --> Ensure a single thread is single thread . --> Socre: 1.0

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "[[False]]" != "[[False]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "[[bob]]" != "[[bob]]" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 510 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 315 / 186 / 9 / 510:  51%|█████     | 510/1000 [39:09<37:37,  4.61s/it][Succeeded / Failed / Skipped / Total] 315 / 186 / 9 / 510:  51%|█████     | 511/1000 [39:13<37:32,  4.61s/it][Succeeded / Failed / Skipped / Total] 316 / 186 / 9 / 511:  51%|█████     | 511/1000 [39:13<37:32,  4.61s/it][Succeeded / Failed / Skipped / Total] 316 / 186 / 9 / 511:  51%|█████     | 512/1000 [39:17<37:27,  4.60s/it][Succeeded / Failed / Skipped / Total] 317 / 186 / 9 / 512:  51%|█████     | 512/1000 [39:17<37:27,  4.60s/it][Succeeded / Failed / Skipped / Total] 317 / 186 / 9 / 512:  51%|█████▏    | 513/1000 [39:19<37:19,  4.60s/it][Succeeded / Failed / Skipped / Total] 318 / 186 / 9 / 513:  51%|█████▏    | 513/1000 [39:19<37:19,  4.60s/it][Succeeded / Failed / Skipped / Total] 318 / 186 / 9 / 513:  51%|█████▏    | 514/1000 [39:20<37:11,  4.59s/it][Succeeded / Failed / Skipped / Total] 318 / 187 / 9 / 514:  51%|█████▏    | 514/1000 [39:20<37:11,  4.59s/it][Succeeded / Failed / Skipped / Total] 318 / 187 / 9 / 514:  52%|█████▏    | 515/1000 [39:20<37:03,  4.58s/it][Succeeded / Failed / Skipped / Total] 319 / 187 / 9 / 515:  52%|█████▏    | 515/1000 [39:20<37:03,  4.58s/it][Succeeded / Failed / Skipped / Total] 319 / 187 / 9 / 515:  52%|█████▏    | 516/1000 [39:25<36:58,  4.58s/it][Succeeded / Failed / Skipped / Total] 320 / 187 / 9 / 516:  52%|█████▏    | 516/1000 [39:25<36:58,  4.58s/it][Succeeded / Failed / Skipped / Total] 320 / 187 / 9 / 516:  52%|█████▏    | 517/1000 [39:25<36:50,  4.58s/it]Do the shutdown . --> Closes the server . --> Socre: 1.0

[[[[Adv]]]]: private void [[doServerShutdown]] ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown

[[[[Adv]]]]: private void [[berafpresshunstm]] ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 511 ---------------------------------------------
Broadcast data to all clients . --> Bus the specified data . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[broadcast]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void [[bus]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[bus]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 512 ---------------------------------------------
Broadcast data to clients . --> Broadcast data . --> Socre: 1.0

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer [[bData]] = null ; if ( data instanceof ByteBuffer ) { [[bData]] = ( ByteBuffer ) data ; } if ( sData == null && [[bData]] == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , [[bData]] ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer [[aditta]] = null ; if ( data instanceof ByteBuffer ) { [[aditta]] = ( ByteBuffer ) data ; } if ( sData == null && [[aditta]] == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , [[aditta]] ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 513 ---------------------------------------------
Fill the frames from a draft --> Fill frames from draft --> Socre: 1.0

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > [[frames]] = null ; if ( sData != null ) { [[frames]] = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { [[frames]] = draft . createFrames ( bData , "False" != "False" ) ; } if ( [[frames]] != null ) { draftFrames . put ( draft , [[frames]] ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > [[bears]] = null ; if ( sData != null ) { [[bears]] = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { [[bears]] = draft . createFrames ( bData , "False" != "False" ) ; } if ( [[bears]] != null ) { draftFrames . put ( draft , [[bears]] ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 514 ---------------------------------------------
Start the entity manager . --> [[[FAILED]]]

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[begin]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 515 ---------------------------------------------
Broadcasts a text to all clients . --> Fan an article . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( String [[text]] , Collection < WebSocket > clients ) { if ( [[text]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[text]] , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void [[fan]] ( String [[article]] , Collection < WebSocket > clients ) { if ( [[article]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[article]] , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 516 ---------------------------------------------
Transfers source to destination . --> Puts forward the source buffer into destination buffer . --> Socre: 1.0

[[[[Adv]]]]: public static int [[transferByteBuffer]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int [[forwardborvelamp]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 517 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 321 / 187 / 9 / 517:  52%|█████▏    | 517/1000 [39:25<36:50,  4.58s/it][Succeeded / Failed / Skipped / Total] 321 / 187 / 9 / 517:  52%|█████▏    | 518/1000 [39:33<36:48,  4.58s/it][Succeeded / Failed / Skipped / Total] 322 / 187 / 9 / 518:  52%|█████▏    | 518/1000 [39:33<36:48,  4.58s/it][Succeeded / Failed / Skipped / Total] 322 / 187 / 9 / 518:  52%|█████▏    | 519/1000 [39:34<36:40,  4.58s/it][Succeeded / Failed / Skipped / Total] 323 / 187 / 9 / 519:  52%|█████▏    | 519/1000 [39:34<36:40,  4.58s/it][Succeeded / Failed / Skipped / Total] 323 / 187 / 9 / 519:  52%|█████▏    | 520/1000 [39:40<36:37,  4.58s/it][Succeeded / Failed / Skipped / Total] 324 / 187 / 9 / 520:  52%|█████▏    | 520/1000 [39:40<36:37,  4.58s/it][Succeeded / Failed / Skipped / Total] 324 / 187 / 9 / 520:  52%|█████▏    | 521/1000 [39:40<36:28,  4.57s/it][Succeeded / Failed / Skipped / Total] 325 / 187 / 9 / 521:  52%|█████▏    | 521/1000 [39:40<36:28,  4.57s/it][Succeeded / Failed / Skipped / Total] 325 / 187 / 9 / 521:  52%|█████▏    | 522/1000 [39:52<36:31,  4.58s/it][Succeeded / Failed / Skipped / Total] 326 / 187 / 9 / 522:  52%|█████▏    | 522/1000 [39:52<36:31,  4.58s/it][Succeeded / Failed / Skipped / Total] 326 / 187 / 9 / 522:  52%|█████▏    | 523/1000 [39:57<36:26,  4.58s/it][Succeeded / Failed / Skipped / Total] 327 / 187 / 9 / 523:  52%|█████▏    | 523/1000 [39:57<36:26,  4.58s/it][Succeeded / Failed / Skipped / Total] 327 / 187 / 9 / 523:  52%|█████▏    | 524/1000 [40:01<36:21,  4.58s/it][Succeeded / Failed / Skipped / Total] 327 / 188 / 9 / 524:  52%|█████▏    | 524/1000 [40:01<36:21,  4.58s/it][Succeeded / Failed / Skipped / Total] 327 / 188 / 9 / 524:  52%|█████▎    | 525/1000 [40:03<36:14,  4.58s/it][Succeeded / Failed / Skipped / Total] 327 / 189 / 9 / 525:  52%|█████▎    | 525/1000 [40:03<36:14,  4.58s/it][Succeeded / Failed / Skipped / Total] 327 / 189 / 9 / 525:  53%|█████▎    | 526/1000 [40:10<36:12,  4.58s/it][Succeeded / Failed / Skipped / Total] 328 / 189 / 9 / 526:  53%|█████▎    | 526/1000 [40:10<36:12,  4.58s/it][Succeeded / Failed / Skipped / Total] 328 / 189 / 9 / 526:  53%|█████▎    | 527/1000 [40:12<36:04,  4.58s/it]Get the socket associated with the given connection . --> get stainel --> Socre: 1.0

[[[[Adv]]]]: private Socket [[getSocket]] ( WebSocket [[conn]] ) { WebSocketImpl [[impl]] = ( WebSocketImpl ) [[conn]] ; return ( ( SocketChannel ) [[impl]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket [[getstainel]] ( WebSocket [[pherfield]] ) { WebSocketImpl [[weline]] = ( WebSocketImpl ) [[pherfield]] ; return ( ( SocketChannel ) [[weline]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 518 ---------------------------------------------
Enables transactional transaction . --> Append pass passes to album --> Socre: 1.0

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > [[block]] ) { [[withTransaction]] ( em -> { [[block]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[albumstijectpasss]] ( Consumer < EntityManager > [[corner]] ) { [[albumstijectpasss]] ( em -> { [[corner]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 519 ---------------------------------------------
Wraps the given arguments if necessary . --> documentation inherited from doclet --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[wrapArgsToListIfNeeded]] ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[documentarsuestaperreadred]] ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 520 ---------------------------------------------
Converts the given arguments to Scala buffer . --> Calculates Java matrices . --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... [[args]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[args]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[canvasmarzesolasuperraf]] ( final Object ... [[ards]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[ards]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 521 ---------------------------------------------
Returns the entity manager for the given name . --> returns null if not found --> Socre: 1.0

[[[[Adv]]]]: public EntityManager [[em]] ( String [[name]] ) { EntityManagerFactory [[emf]] = emfs . get ( [[name]] ) ; if ( [[emf]] == null ) { return null ; } return [[emf]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager [[ge]] ( String [[flag]] ) { EntityManagerFactory [[hamb]] = emfs . get ( [[flag]] ) ; if ( [[hamb]] == null ) { return null ; } return [[hamb]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 522 ---------------------------------------------
Gets a localized message . --> Converts a list of keys to a string --> Socre: 1.0

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > [[keyArgs]] = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[keyArgs]] . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String [[like]] ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > [[anaaks]] = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[anaaks]] . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 523 ---------------------------------------------
Gets a localized message . --> Accept an explicit translation --> Socre: 1.0

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang lang , String [[key]] , Object ... [[args]] ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( [[args]] ) ; return messages . apply ( [[key]] , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String [[accept]] ( play . api . i18n . Lang lang , String [[middle]] , Object ... [[acgt]] ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( [[acgt]] ) ; return messages . apply ( [[middle]] , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 524 ---------------------------------------------
Checks if the specified key is defined at the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public Boolean [[isDefinedAt]] ( play . api . i18n . Lang [[lang]] , String [[key]] ) { return messages . isDefinedAt ( [[key]] , [[lang]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean [[overodeftaprogram]] ( play . api . i18n . Lang [[spaces]] , String [[keys]] ) { return messages . isDefinedAt ( [[keys]] , [[spaces]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 525 ---------------------------------------------
Returns the preferred messages for this language . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages [[main]] ( Collection < Lang > candidates ) { Seq < Lang > cs = Scala . asScala ( candidates ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 526 ---------------------------------------------
Define a set of bindings . --> Start tlt ; tlt --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . bindings ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self [[tlt]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . bindings ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 527 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 328 / 190 / 9 / 527:  53%|█████▎    | 527/1000 [40:12<36:04,  4.58s/it][Succeeded / Failed / Skipped / Total] 328 / 190 / 9 / 527:  53%|█████▎    | 528/1000 [40:17<36:00,  4.58s/it][Succeeded / Failed / Skipped / Total] 329 / 190 / 9 / 528:  53%|█████▎    | 528/1000 [40:17<36:00,  4.58s/it][Succeeded / Failed / Skipped / Total] 329 / 190 / 9 / 528:  53%|█████▎    | 529/1000 [40:18<35:53,  4.57s/it][Succeeded / Failed / Skipped / Total] 330 / 190 / 9 / 529:  53%|█████▎    | 529/1000 [40:18<35:53,  4.57s/it][Succeeded / Failed / Skipped / Total] 330 / 190 / 9 / 529:  53%|█████▎    | 530/1000 [40:22<35:48,  4.57s/it][Succeeded / Failed / Skipped / Total] 331 / 190 / 9 / 530:  53%|█████▎    | 530/1000 [40:22<35:48,  4.57s/it][Succeeded / Failed / Skipped / Total] 331 / 190 / 9 / 530:  53%|█████▎    | 531/1000 [40:31<35:47,  4.58s/it][Succeeded / Failed / Skipped / Total] 331 / 191 / 9 / 531:  53%|█████▎    | 531/1000 [40:31<35:47,  4.58s/it][Succeeded / Failed / Skipped / Total] 331 / 191 / 9 / 531:  53%|█████▎    | 532/1000 [40:31<35:38,  4.57s/it][Succeeded / Failed / Skipped / Total] 332 / 191 / 9 / 532:  53%|█████▎    | 532/1000 [40:31<35:38,  4.57s/it][Succeeded / Failed / Skipped / Total] 332 / 191 / 9 / 532:  53%|█████▎    | 533/1000 [40:35<35:34,  4.57s/it][Succeeded / Failed / Skipped / Total] 333 / 191 / 9 / 533:  53%|█████▎    | 533/1000 [40:35<35:34,  4.57s/it][Succeeded / Failed / Skipped / Total] 333 / 191 / 9 / 533:  53%|█████▎    | 534/1000 [40:37<35:27,  4.57s/it][Succeeded / Failed / Skipped / Total] 334 / 191 / 9 / 534:  53%|█████▎    | 534/1000 [40:37<35:27,  4.57s/it][Succeeded / Failed / Skipped / Total] 334 / 191 / 9 / 534:  54%|█████▎    | 535/1000 [40:38<35:19,  4.56s/it][Succeeded / Failed / Skipped / Total] 334 / 192 / 9 / 535:  54%|█████▎    | 535/1000 [40:38<35:19,  4.56s/it][Succeeded / Failed / Skipped / Total] 334 / 192 / 9 / 535:  54%|█████▎    | 536/1000 [40:39<35:12,  4.55s/it][Succeeded / Failed / Skipped / Total] 334 / 193 / 9 / 536:  54%|█████▎    | 536/1000 [40:39<35:12,  4.55s/it][Succeeded / Failed / Skipped / Total] 334 / 193 / 9 / 536:  54%|█████▎    | 537/1000 [40:46<35:09,  4.56s/it][Succeeded / Failed / Skipped / Total] 335 / 193 / 9 / 537:  54%|█████▎    | 537/1000 [40:46<35:09,  4.56s/it][Succeeded / Failed / Skipped / Total] 336 / 193 / 9 / 538:  54%|█████▍    | 538/1000 [40:46<35:01,  4.55s/it][Succeeded / Failed / Skipped / Total] 336 / 193 / 9 / 538:  54%|█████▍    | 539/1000 [40:49<34:54,  4.54s/it][Succeeded / Failed / Skipped / Total] 336 / 194 / 9 / 539:  54%|█████▍    | 539/1000 [40:49<34:54,  4.54s/it]Display the preferred message for the request . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages preferred ( Http . RequestHeader [[request]] ) { play . api . i18n . Messages msgs = messages . preferred ( [[request]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages preferred ( Http . RequestHeader [[version]] ) { play . api . i18n . Messages msgs = messages . preferred ( [[version]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 528 ---------------------------------------------
Add bindings for the given modules . --> Creates a new affiliation function --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( play . api . inject . Module ... [[modules]] ) { return [[bindings]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self [[affiliationr]] ( play . api . inject . Module ... [[functions]] ) { return [[affiliationr]] ( Guiceable . [[functions]] ( [[functions]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 529 ---------------------------------------------
Define a set of REPLACE bindings . --> Static factory method for builder --> Socre: 1.0

[[[[Adv]]]]: public final Self [[REPLACEME0]] ( play . api . inject . Binding < ? > ... [[REPLACEME0]] ) { return [[REPLACEME0]] ( Guiceable . bindings ( [[REPLACEME0]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .

[[[[Adv]]]]: public final Self [[balᄆ10]] ( play . api . inject . Binding < ? > ... [[balᄆ10]] ) { return [[balᄆ10]] ( Guiceable . bindings ( [[balᄆ10]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 530 ---------------------------------------------
Sets the language . --> helper method --> Socre: 1.0

[[[[Adv]]]]: public Result [[setLang]] ( Result result , Lang lang ) { return messages . setLang ( result . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result [[sang]] ( Result result , Lang lang ) { return messages . setLang ( result . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 531 ---------------------------------------------
Defaults overrides the given set of modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[overrides]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . overrides ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self [[upholds]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . overrides ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 532 ---------------------------------------------
Overrides default overrides . --> Add a back like to this group --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Module ... [[modules]] ) { return [[overrides]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self [[backlikef]] ( play . api . inject . Module ... [[groups]] ) { return [[backlikef]] ( Guiceable . [[groups]] ( [[groups]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 533 ---------------------------------------------
Sets the overriding overrides . --> Add a set of players to the player --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[overrides]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self [[erdriveis]] ( play . api . inject . Binding < ? > ... [[legsm]] ) { return [[erdriveis]] ( Guiceable . [[legsm]] ( [[legsm]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 534 ---------------------------------------------
Calls the given request . --> Performs a pull operation --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < Result > [[call]] ( Request req ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > [[pull]] ( Request req ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 535 ---------------------------------------------
Converts an annotation into a Java binding . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[allows]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 536 ---------------------------------------------
Disable multiple modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... [[moduleClasses]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[moduleClasses]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[nominatedpower]] ( Class < ? > ... [[delegatemlhs]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[delegatemlhs]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 537 ---------------------------------------------
Static factory method for creating a tuple . --> Static factory method for creating tuples . --> Socre: 1.0

[[[[Adv]]]]: public static < A , [[B]] , C , D , E > Tuple5 < A , [[B]] , C , D , E > Tuple5 ( A a , [[B]] b , C c , D d , E e ) { return new Tuple5 < A , [[B]] , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , [[a]] , C , D , E > Tuple5 < A , [[a]] , C , D , E > Tuple5 ( A a , [[a]] b , C c , D d , E e ) { return new Tuple5 < A , [[a]] , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 538 ---------------------------------------------
Convenience method for constructing a tuple of values . --> Factory method for creating an acpel --> Socre: 1.0

[[[[Adv]]]]: public static < A , B > [[Tuple]] < A , B > [[Tuple]] ( A a , B b ) { return new [[Tuple]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < A , B > [[acpel]] < A , B > [[acpel]] ( A a , B b ) { return new [[acpel]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 539 ---------------------------------------------
Gets an existing file . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > getExistingFile ( String [[relativePath]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[relativePath]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > getExistingFile ( String [[scalepad]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[scalepad]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 540 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 337 / 194 / 9 / 540:  54%|█████▍    | 540/1000 [40:51<34:48,  4.54s/it][Succeeded / Failed / Skipped / Total] 337 / 194 / 9 / 540:  54%|█████▍    | 541/1000 [41:02<34:49,  4.55s/it][Succeeded / Failed / Skipped / Total] 337 / 195 / 9 / 541:  54%|█████▍    | 541/1000 [41:02<34:49,  4.55s/it][Succeeded / Failed / Skipped / Total] 337 / 195 / 9 / 541:  54%|█████▍    | 542/1000 [41:10<34:47,  4.56s/it][Succeeded / Failed / Skipped / Total] 337 / 196 / 9 / 542:  54%|█████▍    | 542/1000 [41:10<34:47,  4.56s/it][Succeeded / Failed / Skipped / Total] 337 / 196 / 9 / 542:  54%|█████▍    | 543/1000 [41:16<34:44,  4.56s/it][Succeeded / Failed / Skipped / Total] 338 / 196 / 9 / 543:  54%|█████▍    | 543/1000 [41:16<34:44,  4.56s/it][Succeeded / Failed / Skipped / Total] 338 / 196 / 9 / 543:  54%|█████▍    | 544/1000 [41:20<34:39,  4.56s/it][Succeeded / Failed / Skipped / Total] 338 / 197 / 9 / 544:  54%|█████▍    | 544/1000 [41:20<34:39,  4.56s/it][Succeeded / Failed / Skipped / Total] 338 / 197 / 9 / 544:  55%|█████▍    | 545/1000 [41:21<34:31,  4.55s/it][Succeeded / Failed / Skipped / Total] 338 / 198 / 9 / 545:  55%|█████▍    | 545/1000 [41:21<34:31,  4.55s/it][Succeeded / Failed / Skipped / Total] 338 / 198 / 9 / 545:  55%|█████▍    | 546/1000 [41:23<34:24,  4.55s/it][Succeeded / Failed / Skipped / Total] 338 / 199 / 9 / 546:  55%|█████▍    | 546/1000 [41:23<34:24,  4.55s/it][Succeeded / Failed / Skipped / Total] 338 / 199 / 9 / 546:  55%|█████▍    | 547/1000 [41:29<34:21,  4.55s/it][Succeeded / Failed / Skipped / Total] 338 / 200 / 9 / 547:  55%|█████▍    | 547/1000 [41:29<34:21,  4.55s/it][Succeeded / Failed / Skipped / Total] 338 / 200 / 9 / 547:  55%|█████▍    | 548/1000 [41:32<34:15,  4.55s/it]Convert an execution context to an executor . --> package private for testing --> Socre: 1.0

[[[[Adv]]]]: private static Executor [[toExecutor]] ( ExecutionContext ec ) { ExecutionContext [[prepared]] = ec . prepare ( ) ; if ( [[prepared]] instanceof Executor ) { return ( Executor ) [[prepared]] ; } else { return [[prepared]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor [[basekseurop]] ( ExecutionContext ec ) { ExecutionContext [[groom]] = ec . prepare ( ) ; if ( [[groom]] instanceof Executor ) { return ( Executor ) [[groom]] ; } else { return [[groom]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 541 ---------------------------------------------
Create a flow of bytes . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[string]] ( String [[callbackName]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[format]] ( String [[billbertime]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[billbertime]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 542 ---------------------------------------------
Returns a JAConfig configured with the specified name and unit name . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[of]] ( String [[name]] , String [[unitName]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[name]] , [[unitName]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig [[general]] ( String [[tag]] , String [[partitionlist]] ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[tag]] , [[partitionlist]] ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 543 ---------------------------------------------
Create a JsonNode for JSON nodes . --> Shortcut method --> Socre: 1.0

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[json]] ( String [[callbackName]] ) { return Flow . of ( JsonNode . class ) . map ( [[json]] -> { return ByteString . fromString ( Json . stringify ( [[json]] ) ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[جsm]] ( String [[breakerhouse]] ) { return Flow . of ( JsonNode . class ) . map ( [[جsm]] -> { return ByteString . fromString ( Json . stringify ( [[جsm]] ) ) ; } ) . via ( flow ( [[breakerhouse]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 544 ---------------------------------------------
Adds a mapped constraint for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public < T [[extends]] ConstraintValidator < ? , ? > > [[MappedConstraintValidatorFactory]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T [[opens]] ConstraintValidator < ? , ? > > [[mappedcomvarinvilldinatr_]] addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 545 ---------------------------------------------
Creates a new instance from a map of properties . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[from]] ( Map < String , String > [[map]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : [[map]] . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig [[on]] ( Map < String , String > [[area]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : [[area]] . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 546 ---------------------------------------------
Creates a new instance of the given key . --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < T extends ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 547 ---------------------------------------------
Creates a default JAConfig . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[of]] ( String n1 , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig [[on]] ( String n1 , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 548 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 339 / 200 / 9 / 548:  55%|█████▍    | 548/1000 [41:32<34:15,  4.55s/it][Succeeded / Failed / Skipped / Total] 339 / 200 / 9 / 548:  55%|█████▍    | 549/1000 [41:36<34:10,  4.55s/it][Succeeded / Failed / Skipped / Total] 340 / 200 / 9 / 549:  55%|█████▍    | 549/1000 [41:36<34:10,  4.55s/it][Succeeded / Failed / Skipped / Total] 340 / 200 / 9 / 549:  55%|█████▌    | 550/1000 [41:41<34:06,  4.55s/it][Succeeded / Failed / Skipped / Total] 340 / 201 / 9 / 550:  55%|█████▌    | 550/1000 [41:41<34:06,  4.55s/it][Succeeded / Failed / Skipped / Total] 340 / 201 / 9 / 550:  55%|█████▌    | 551/1000 [41:49<34:04,  4.55s/it][Succeeded / Failed / Skipped / Total] 341 / 201 / 9 / 551:  55%|█████▌    | 551/1000 [41:49<34:04,  4.55s/it][Succeeded / Failed / Skipped / Total] 341 / 201 / 9 / 551:  55%|█████▌    | 552/1000 [41:50<33:57,  4.55s/it][Succeeded / Failed / Skipped / Total] 341 / 202 / 9 / 552:  55%|█████▌    | 552/1000 [41:50<33:57,  4.55s/it][Succeeded / Failed / Skipped / Total] 341 / 202 / 9 / 552:  55%|█████▌    | 553/1000 [41:57<33:55,  4.55s/it][Succeeded / Failed / Skipped / Total] 342 / 202 / 9 / 553:  55%|█████▌    | 553/1000 [41:57<33:55,  4.55s/it][Succeeded / Failed / Skipped / Total] 342 / 202 / 9 / 553:  55%|█████▌    | 554/1000 [42:01<33:49,  4.55s/it][Succeeded / Failed / Skipped / Total] 343 / 202 / 9 / 554:  55%|█████▌    | 554/1000 [42:01<33:49,  4.55s/it][Succeeded / Failed / Skipped / Total] 343 / 202 / 9 / 554:  56%|█████▌    | 555/1000 [42:05<33:44,  4.55s/it]Invoked when the client error is received . --> Overriding superclass method --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onClientError]] ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[epblimehurf]] ( RequestHeader request , int statusCode , String message ) { if ( statusCode == 400 ) { return onBadRequest ( request , message ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , message ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , message ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 549 ---------------------------------------------
Handler for forbidden pages . --> Handler for unauthorized pages --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onForbidden]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > [[onipreeed]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 550 ---------------------------------------------
Handle bad request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , message , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[animationarveruld]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , message , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 551 ---------------------------------------------
Logs the error . --> Logs an internal error --> Socre: 1.0

[[[[Adv]]]]: protected void [[logServerError]] ( RequestHeader request , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , request . method ( ) , request . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void [[goeggateidour]] ( RequestHeader request , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , request . method ( ) , request . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 552 ---------------------------------------------
Handler for not found error . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onNotFound]] ( RequestHeader [[request]] , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( [[request]] . method ( ) , [[request]] . uri ( ) , [[request]] . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( [[request]] . method ( ) , [[request]] . uri ( ) , Some . apply ( routes . get ( ) ) , [[request]] . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > [[ontoformtocing]] ( RequestHeader [[wish]] , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( [[wish]] . method ( ) , [[wish]] . uri ( ) , [[wish]] . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( [[wish]] . method ( ) , [[wish]] . uri ( ) , Some . apply ( routes . get ( ) ) , [[wish]] . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 553 ---------------------------------------------
Convert a throwable to a useful exception --> helper method --> Socre: 1.0

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[mitestrunckerlatecece]] ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 554 ---------------------------------------------
Handler for error rendering . --> Display an Oroderr matcher --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onDevServerError]] ( RequestHeader request , UsefulException [[exception]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , [[exception]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > [[oroderhermountlloor]] ( RequestHeader request , UsefulException [[aside]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , [[aside]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 555 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 344 / 202 / 9 / 555:  56%|█████▌    | 555/1000 [42:05<33:44,  4.55s/it][Succeeded / Failed / Skipped / Total] 344 / 202 / 9 / 555:  56%|█████▌    | 556/1000 [42:10<33:40,  4.55s/it][Succeeded / Failed / Skipped / Total] 345 / 202 / 9 / 556:  56%|█████▌    | 556/1000 [42:10<33:40,  4.55s/it][Succeeded / Failed / Skipped / Total] 345 / 202 / 9 / 556:  56%|█████▌    | 557/1000 [42:11<33:33,  4.54s/it][Succeeded / Failed / Skipped / Total] 345 / 203 / 9 / 557:  56%|█████▌    | 557/1000 [42:11<33:33,  4.54s/it][Succeeded / Failed / Skipped / Total] 345 / 203 / 9 / 557:  56%|█████▌    | 558/1000 [42:18<33:30,  4.55s/it][Succeeded / Failed / Skipped / Total] 346 / 203 / 9 / 558:  56%|█████▌    | 558/1000 [42:18<33:30,  4.55s/it][Succeeded / Failed / Skipped / Total] 346 / 203 / 9 / 558:  56%|█████▌    | 559/1000 [42:24<33:27,  4.55s/it][Succeeded / Failed / Skipped / Total] 346 / 204 / 9 / 559:  56%|█████▌    | 559/1000 [42:24<33:27,  4.55s/it][Succeeded / Failed / Skipped / Total] 346 / 204 / 9 / 559:  56%|█████▌    | 560/1000 [42:34<33:27,  4.56s/it][Succeeded / Failed / Skipped / Total] 347 / 204 / 9 / 560:  56%|█████▌    | 560/1000 [42:34<33:27,  4.56s/it][Succeeded / Failed / Skipped / Total] 347 / 204 / 9 / 560:  56%|█████▌    | 561/1000 [42:42<33:25,  4.57s/it][Succeeded / Failed / Skipped / Total] 348 / 204 / 9 / 561:  56%|█████▌    | 561/1000 [42:42<33:25,  4.57s/it][Succeeded / Failed / Skipped / Total] 348 / 204 / 9 / 561:  56%|█████▌    | 562/1000 [42:50<33:22,  4.57s/it]Handler for error rendering . --> Override this method to handle overridenato exceptions --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onProdServerError]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > [[overprcsterredovertter]] ( RequestHeader request , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 556 ---------------------------------------------
Handles server error . --> Delegates to the leader --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onServerError]] ( RequestHeader [[request]] , Throwable [[exception]] ) { try { UsefulException [[usefulException]] = throwableToUsefulException ( [[exception]] ) ; logServerError ( [[request]] , [[usefulException]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[request]] , [[usefulException]] ) ; default : return onDevServerError ( [[request]] , [[usefulException]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[enscoguideunrp]] ( RequestHeader [[petition]] , Throwable [[event]] ) { try { UsefulException [[smallcoil]] = throwableToUsefulException ( [[event]] ) ; logServerError ( [[petition]] , [[smallcoil]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[petition]] , [[smallcoil]] ) ; default : return onDevServerError ( [[petition]] , [[smallcoil]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 557 ---------------------------------------------
Returns the matching method matching the given name and parameter types . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > cls , final String methodName , final Class < ? > ... [[parameterTypes]] ) { try { final Method [[method]] = cls . getMethod ( methodName , [[parameterTypes]] ) ; MemberUtils . setAccessibleWorkaround ( [[method]] ) ; return [[method]] ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[findnatchetainedphachmethord]] ( final Class < ? > cls , final String methodName , final Class < ? > ... [[demasn]] ) { try { final Method [[gate]] = cls . getMethod ( methodName , [[demasn]] ) ; MemberUtils . setAccessibleWorkaround ( [[gate]] ) ; return [[gate]] ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 558 ---------------------------------------------
Create a build doc handler for a given directory and a given directory . --> Factory method for SIFACAdjunction . --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base ) { return [[fromDirectoryAndJar]] ( directory , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[sifacapdlyji]] ( File directory , JarFile jarFile , String base ) { return [[sifacapdlyji]] ( directory , jarFile , base , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 559 ---------------------------------------------
Creates a new documentation handler from the given directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File [[directory]] ) { FileRepository repo = new FilesystemRepository ( [[directory]] ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[_standdouralle]] ( File [[gallery]] ) { FileRepository repo = new FilesystemRepository ( [[gallery]] ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 560 ---------------------------------------------
Consumes the data from the buffer . --> Compute atom1 - 1 --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[athi1]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 561 ---------------------------------------------
Create a documentation handler for a given jar file . --> overridden for overvar --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromJar]] ( JarFile [[jarFile]] , String base ) { FileRepository [[repo]] = new JarRepository ( [[jarFile]] , Option . apply ( base ) ) ; return new DocumentationHandler ( [[repo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[overvar]] ( JarFile [[rowfet]] , String base ) { FileRepository [[dcolo]] = new JarRepository ( [[rowfet]] , Option . apply ( base ) ) ; return new DocumentationHandler ( [[dcolo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 562 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 349 / 204 / 9 / 562:  56%|█████▌    | 562/1000 [42:50<33:23,  4.57s/it][Succeeded / Failed / Skipped / Total] 349 / 204 / 9 / 562:  56%|█████▋    | 563/1000 [43:02<33:24,  4.59s/it][Succeeded / Failed / Skipped / Total] 349 / 205 / 9 / 563:  56%|█████▋    | 563/1000 [43:02<33:24,  4.59s/it][Succeeded / Failed / Skipped / Total] 349 / 205 / 9 / 563:  56%|█████▋    | 564/1000 [43:05<33:19,  4.58s/it][Succeeded / Failed / Skipped / Total] 349 / 206 / 9 / 564:  56%|█████▋    | 564/1000 [43:05<33:19,  4.58s/it][Succeeded / Failed / Skipped / Total] 349 / 206 / 9 / 564:  56%|█████▋    | 565/1000 [43:08<33:12,  4.58s/it][Succeeded / Failed / Skipped / Total] 350 / 206 / 9 / 565:  56%|█████▋    | 565/1000 [43:08<33:12,  4.58s/it][Succeeded / Failed / Skipped / Total] 350 / 206 / 9 / 565:  57%|█████▋    | 566/1000 [43:09<33:05,  4.58s/it][Succeeded / Failed / Skipped / Total] 351 / 206 / 9 / 566:  57%|█████▋    | 566/1000 [43:09<33:05,  4.58s/it][Succeeded / Failed / Skipped / Total] 351 / 206 / 9 / 566:  57%|█████▋    | 567/1000 [43:17<33:03,  4.58s/it][Succeeded / Failed / Skipped / Total] 351 / 207 / 9 / 567:  57%|█████▋    | 567/1000 [43:17<33:03,  4.58s/it][Succeeded / Failed / Skipped / Total] 351 / 207 / 9 / 567:  57%|█████▋    | 568/1000 [43:17<32:55,  4.57s/it][Succeeded / Failed / Skipped / Total] 352 / 207 / 9 / 568:  57%|█████▋    | 568/1000 [43:17<32:55,  4.57s/it][Succeeded / Failed / Skipped / Total] 352 / 207 / 9 / 568:  57%|█████▋    | 569/1000 [43:17<32:47,  4.57s/it][Succeeded / Failed / Skipped / Total] 352 / 207 / 10 / 569:  57%|█████▋    | 569/1000 [43:17<32:47,  4.57s/it][Succeeded / Failed / Skipped / Total] 352 / 207 / 10 / 569:  57%|█████▋    | 570/1000 [43:25<32:45,  4.57s/it]Creates a documentation handler for a given directory and a jar file . --> Creates documentation handler --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile [[jarFile]] , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository [[jarRepo]] = new JarRepository ( [[jarFile]] , Option . apply ( base ) ) ; FileRepository [[manualRepo]] ; if ( fallbackToJar ) { [[manualRepo]] = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , [[jarRepo]] } ) ; } else { [[manualRepo]] = fileRepo ; } return new DocumentationHandler ( [[manualRepo]] , [[jarRepo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[tдlavpentedjan]] ( File directory , JarFile [[tarfortler]] , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository [[displayedepr]] = new JarRepository ( [[tarfortler]] , Option . apply ( base ) ) ; FileRepository [[barrenedio]] ; if ( fallbackToJar ) { [[barrenedio]] = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , [[displayedepr]] } ) ; } else { [[barrenedio]] = fileRepo ; } return new DocumentationHandler ( [[barrenedio]] , [[displayedepr]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 563 ---------------------------------------------
Create an HttpEntity from content . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[fromContent]] ( Content content , String charset ) { String [[body]] ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity [[intoteuct]] ( Content content , String charset ) { String [[doc]] ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 564 ---------------------------------------------
Create an HttpEntity from a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String [[content]] , String [[charset]] ) { return new Strict ( ByteString . fromString ( [[content]] , [[charset]] ) , Optional . of ( "text/plain; charset=" + [[charset]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[cltrem]] ( String [[format]] , String [[classesscope]] ) { return new Strict ( ByteString . fromString ( [[format]] , [[classesscope]] ) , Optional . of ( "text/plain; charset=" + [[classesscope]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 565 ---------------------------------------------
Creates a JSON response with a Json node . --> Positions position within JsonNode --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , JsonNode content ) { return [[status]] ( [[status]] , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result [[position]] ( int status , JsonNode content ) { return [[position]] ( [[position]] , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 566 ---------------------------------------------
Creates a new chunked entity from the specified source . --> Box an event --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > [[data]] , Optional < String > [[contentType]] ) { return new Chunked ( [[data]] . map ( HttpChunk . Chunk :: new ) , [[contentType]] ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[boxk]] ( Source < ByteString , ? > [[event]] , Optional < String > [[materialme]] ) { return new Chunked ( [[event]] . map ( HttpChunk . Chunk :: new ) , [[materialme]] ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 567 ---------------------------------------------
Creates a BuildDocHandler from the given resources . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromResources]] ( File [ ] [[files]] , String [ ] [[baseDirs]] ) throws IOException { assert ( [[files]] . length == [[baseDirs]] . length ) ; FileRepository [ ] [[repositories]] = new FileRepository [ [[files]] . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < [[files]] . length ; i ++ ) { File file = [[files]] [ i ] ; String baseDir = [[baseDirs]] [ i ] ; if ( file . isDirectory ( ) ) { [[repositories]] [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler [[controlirsoucas]] ( File [ ] [[covers]] , String [ ] [[satry]] ) throws IOException { assert ( [[covers]] . length == [[satry]] . length ) ; FileRepository [ ] [[prepysrackices]] = new FileRepository [ [[covers]] . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < [[covers]] . length ; i ++ ) { File file = [[covers]] [ i ] ; String baseDir = [[satry]] [ i ] ; if ( file . isDirectory ( ) ) { [[prepysrackices]] [ i ] = new FilesystemRepository ( file ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 568 ---------------------------------------------
Sends a status message to an input stream . --> send response to the server --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int status , InputStream content , long [[contentLength]] ) { return status ( status ) . sendInputStream ( content , [[contentLength]] ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result status ( int status , InputStream content , long [[uploadedllendret]] ) { return status ( status ) . sendInputStream ( content , [[uploadedllendret]] ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 569 ---------------------------------------------
Find a user by id --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 570 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 352 / 208 / 10 / 570:  57%|█████▋    | 570/1000 [43:25<32:45,  4.57s/it][Succeeded / Failed / Skipped / Total] 352 / 208 / 10 / 570:  57%|█████▋    | 571/1000 [43:28<32:39,  4.57s/it][Succeeded / Failed / Skipped / Total] 352 / 209 / 10 / 571:  57%|█████▋    | 571/1000 [43:28<32:39,  4.57s/it][Succeeded / Failed / Skipped / Total] 352 / 209 / 10 / 571:  57%|█████▋    | 572/1000 [43:30<32:33,  4.56s/it][Succeeded / Failed / Skipped / Total] 352 / 210 / 10 / 572:  57%|█████▋    | 572/1000 [43:30<32:33,  4.56s/it][Succeeded / Failed / Skipped / Total] 352 / 210 / 10 / 572:  57%|█████▋    | 573/1000 [43:31<32:25,  4.56s/it][Succeeded / Failed / Skipped / Total] 352 / 211 / 10 / 573:  57%|█████▋    | 573/1000 [43:31<32:25,  4.56s/it][Succeeded / Failed / Skipped / Total] 352 / 211 / 10 / 573:  57%|█████▋    | 574/1000 [43:37<32:22,  4.56s/it][Succeeded / Failed / Skipped / Total] 353 / 211 / 10 / 574:  57%|█████▋    | 574/1000 [43:37<32:22,  4.56s/it][Succeeded / Failed / Skipped / Total] 353 / 211 / 10 / 574:  57%|█████▊    | 575/1000 [43:39<32:15,  4.55s/it][Succeeded / Failed / Skipped / Total] 354 / 211 / 10 / 575:  57%|█████▊    | 575/1000 [43:39<32:15,  4.55s/it][Succeeded / Failed / Skipped / Total] 354 / 211 / 10 / 575:  58%|█████▊    | 576/1000 [43:40<32:09,  4.55s/it][Succeeded / Failed / Skipped / Total] 355 / 211 / 10 / 576:  58%|█████▊    | 576/1000 [43:40<32:09,  4.55s/it][Succeeded / Failed / Skipped / Total] 355 / 211 / 10 / 576:  58%|█████▊    | 577/1000 [43:43<32:03,  4.55s/it][Succeeded / Failed / Skipped / Total] 356 / 211 / 10 / 577:  58%|█████▊    | 577/1000 [43:43<32:03,  4.55s/it][Succeeded / Failed / Skipped / Total] 356 / 211 / 10 / 577:  58%|█████▊    | 578/1000 [43:52<32:01,  4.55s/it][Succeeded / Failed / Skipped / Total] 356 / 212 / 10 / 578:  58%|█████▊    | 578/1000 [43:52<32:01,  4.55s/it][Succeeded / Failed / Skipped / Total] 356 / 212 / 10 / 578:  58%|█████▊    | 579/1000 [43:55<31:56,  4.55s/it][Succeeded / Failed / Skipped / Total] 356 / 213 / 10 / 579:  58%|█████▊    | 579/1000 [43:55<31:56,  4.55s/it][Succeeded / Failed / Skipped / Total] 356 / 213 / 10 / 579:  58%|█████▊    | 580/1000 [43:58<31:50,  4.55s/it][Succeeded / Failed / Skipped / Total] 357 / 213 / 10 / 580:  58%|█████▊    | 580/1000 [43:58<31:50,  4.55s/it][Succeeded / Failed / Skipped / Total] 357 / 213 / 10 / 580:  58%|█████▊    | 581/1000 [44:05<31:47,  4.55s/it]Create a HTTP Status response with the given content . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , byte [ ] content ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[status]] , new HttpEntity . Strict ( ByteString . fromArray ( content ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result [[condition]] ( int [[condition]] , byte [ ] content ) { if ( content == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[condition]] , new HttpEntity . Strict ( ByteString . fromArray ( content ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 571 ---------------------------------------------
Selects the preferred language . --> [[[FAILED]]]

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > candidates ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( candidates ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[weighted]] ( Collection < Lang > candidates ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( candidates ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 572 ---------------------------------------------
Sends a content response to a JSON response . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result status ( int status , JsonNode [[content]] , JsonEncoding [[encoding]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( [[content]] , [[encoding]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result status ( int status , JsonNode [[tag]] , JsonEncoding [[assembly]] ) { if ( [[tag]] == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( [[tag]] , [[assembly]] ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 573 ---------------------------------------------
Returns a unique unique identifier . --> [[[FAILED]]]

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[custom]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 574 ---------------------------------------------
Create a status with the given content . --> package - private for testing --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , File [[content]] ) { return [[status]] ( [[status]] , [[content]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[cargo]] ( int [[file]] , File [[here]] ) { return [[cargo]] ( [[cargo]] , [[here]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 575 ---------------------------------------------
Returns the web socket URL for the given request . --> Return the backbone template for the HTTP request --> Socre: 1.0

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request request ) { return [[webSocketURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[backbonehwaumpttipl]] ( Http . Request request ) { return [[backbonehwaumpttipl]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 576 ---------------------------------------------
Returns a new call with the specified fragment . --> Endpoint --> Socre: 1.0

[[[[Adv]]]]: public Call [[withFragment]] ( String [[fragment]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fragment]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call [[endlikegeint]] ( String [[tre]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[tre]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 577 ---------------------------------------------
Returns the absolute URL of the given request . --> Returns the full path of the given visit request --> Socre: 1.0

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request [[request]] ) { return [[absoluteURL]] ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[esursp]] ( Http . Request [[visit]] ) { return [[esursp]] ( [[visit]] . secure ( ) , [[visit]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 578 ---------------------------------------------
Returns a connection function that applies the given connection function . --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > block ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[connection]] ) { try { return block . call ( [[connection]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > block ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[line]] ) { try { return block . call ( [[line]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 579 ---------------------------------------------
Converts the given object to a JsonNode . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode toJson ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode toJson ( final Object [[count]] ) { try { return mapper ( ) . valueToTree ( [[count]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 580 ---------------------------------------------
Deserializes a JsonNode from a JsonNode . --> Parses an art from json . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[art]] > [[art]] fromJson ( JsonNode json , Class < [[art]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 581 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 357 / 214 / 10 / 581:  58%|█████▊    | 581/1000 [44:05<31:47,  4.55s/it][Succeeded / Failed / Skipped / Total] 357 / 214 / 10 / 581:  58%|█████▊    | 582/1000 [44:06<31:40,  4.55s/it][Succeeded / Failed / Skipped / Total] 358 / 214 / 10 / 582:  58%|█████▊    | 582/1000 [44:06<31:40,  4.55s/it][Succeeded / Failed / Skipped / Total] 358 / 214 / 10 / 582:  58%|█████▊    | 583/1000 [44:10<31:35,  4.55s/it][Succeeded / Failed / Skipped / Total] 358 / 215 / 10 / 583:  58%|█████▊    | 583/1000 [44:10<31:35,  4.55s/it][Succeeded / Failed / Skipped / Total] 358 / 215 / 10 / 583:  58%|█████▊    | 584/1000 [44:12<31:29,  4.54s/it][Succeeded / Failed / Skipped / Total] 359 / 215 / 10 / 584:  58%|█████▊    | 584/1000 [44:12<31:29,  4.54s/it][Succeeded / Failed / Skipped / Total] 359 / 215 / 10 / 584:  58%|█████▊    | 585/1000 [44:13<31:22,  4.54s/it][Succeeded / Failed / Skipped / Total] 359 / 216 / 10 / 585:  58%|█████▊    | 585/1000 [44:13<31:22,  4.54s/it][Succeeded / Failed / Skipped / Total] 359 / 216 / 10 / 585:  59%|█████▊    | 586/1000 [44:30<31:26,  4.56s/it][Succeeded / Failed / Skipped / Total] 359 / 217 / 10 / 586:  59%|█████▊    | 586/1000 [44:30<31:26,  4.56s/it][Succeeded / Failed / Skipped / Total] 359 / 217 / 10 / 586:  59%|█████▊    | 587/1000 [44:35<31:22,  4.56s/it][Succeeded / Failed / Skipped / Total] 360 / 217 / 10 / 587:  59%|█████▊    | 587/1000 [44:35<31:22,  4.56s/it][Succeeded / Failed / Skipped / Total] 360 / 218 / 10 / 588:  59%|█████▉    | 588/1000 [44:35<31:14,  4.55s/it][Succeeded / Failed / Skipped / Total] 360 / 218 / 10 / 588:  59%|█████▉    | 589/1000 [44:42<31:12,  4.55s/it]Creates a function that returns a connection to the given block . --> [[[FAILED]]]

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[connectionFunction]] ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection [[connection]] ) { try { block . run ( [[connection]] ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > [[connectiontraction]] ( final ConnectionRunnable block ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection [[connections]] ) { try { block . run ( [[connections]] ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 582 ---------------------------------------------
Creates a new server instance with the given parameters . --> Static factory method --> Socre: 1.0

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode mode , int port , Function < BuiltInComponents , Router > [[block]] ) { return new Builder ( ) . mode ( mode ) . http ( port ) . build ( [[block]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[servicenorar]] ( Mode mode , int port , Function < BuiltInComponents , Router > [[group]] ) { return new Builder ( ) . mode ( mode ) . http ( port ) . build ( [[group]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 583 ---------------------------------------------
Parse the given string into a JsonNode . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[parse]] ( String [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[busn]] ( String [[serah]] ) { try { return mapper ( ) . readTree ( [[serah]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 584 ---------------------------------------------
Relative path relative to startPath --> Compare two paths --> Socre: 1.0

[[[[Adv]]]]: public static String [[relative]] ( String startPath , String targetPath ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[comparative]] ( String startPath , String targetPath ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 585 ---------------------------------------------
Parse a JsonNode from a stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[parse]] ( java . io . InputStream [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[buserate]] ( java . io . InputStream [[jrct]] ) { try { return mapper ( ) . readTree ( [[jrct]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 586 ---------------------------------------------
Displays a list of constraints from a set of constraints . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayableConstraint]] ( Set < ConstraintDescriptor < ? > > [[constraints]] ) { return [[constraints]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayableConstraint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[captureproofrenvestion]] ( Set < ConstraintDescriptor < ? > > [[exhibits]] ) { return [[exhibits]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[captureproofrenvestion]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 587 ---------------------------------------------
Returns canonical version of the given URL . --> public for testing --> Socre: 1.0

[[[[Adv]]]]: public static String [[canonical]] ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > [[canonical]] = new Stack <> ( ) ; for ( String [[comp]] : urlPath ) { if ( [[comp]] . isEmpty ( ) || [[comp]] . equals ( CURRENT_DIR ) ) continue ; if ( ! [[comp]] . equals ( PARENT_DIR ) || ( ! [[canonical]] . empty ( ) && [[canonical]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[canonical]] . push ( [[comp]] ) ; else [[canonical]] . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String [[trailingSep]] = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[canonical]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + [[trailingSep]] ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String [[bishop]] ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > [[bishop]] = new Stack <> ( ) ; for ( String [[familyt]] : urlPath ) { if ( [[familyt]] . isEmpty ( ) || [[familyt]] . equals ( CURRENT_DIR ) ) continue ; if ( ! [[familyt]] . equals ( PARENT_DIR ) || ( ! [[bishop]] . empty ( ) && [[bishop]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[bishop]] . push ( [[familyt]] ) ; else [[bishop]] . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String [[pipitepp]] = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[bishop]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + [[pipitepp]] ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 588 ---------------------------------------------
Displays a displayable constraint . --> [[[FAILED]]]

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[displayableConstraint]] ( ConstraintDescriptor < ? > [[constraint]] ) { final Display displayAnnotation = [[constraint]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[constraint]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[flagtestprosilnded]] ( ConstraintDescriptor < ? > [[destination]] ) { final Display displayAnnotation = [[destination]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[destination]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
[Succeeded / Failed / Skipped / Total] 361 / 218 / 10 / 589:  59%|█████▉    | 589/1000 [44:42<31:12,  4.55s/it][Succeeded / Failed / Skipped / Total] 362 / 218 / 10 / 590:  59%|█████▉    | 590/1000 [44:44<31:05,  4.55s/it][Succeeded / Failed / Skipped / Total] 362 / 218 / 10 / 590:  59%|█████▉    | 591/1000 [44:54<31:04,  4.56s/it][Succeeded / Failed / Skipped / Total] 362 / 219 / 10 / 591:  59%|█████▉    | 591/1000 [44:54<31:04,  4.56s/it][Succeeded / Failed / Skipped / Total] 362 / 219 / 10 / 591:  59%|█████▉    | 592/1000 [44:55<30:57,  4.55s/it][Succeeded / Failed / Skipped / Total] 362 / 220 / 10 / 592:  59%|█████▉    | 592/1000 [44:55<30:57,  4.55s/it][Succeeded / Failed / Skipped / Total] 362 / 220 / 10 / 592:  59%|█████▉    | 593/1000 [44:59<30:52,  4.55s/it][Succeeded / Failed / Skipped / Total] 363 / 220 / 10 / 593:  59%|█████▉    | 593/1000 [44:59<30:52,  4.55s/it][Succeeded / Failed / Skipped / Total] 363 / 220 / 10 / 593:  59%|█████▉    | 594/1000 [45:06<30:49,  4.56s/it][Succeeded / Failed / Skipped / Total] 364 / 220 / 10 / 594:  59%|█████▉    | 594/1000 [45:06<30:49,  4.56s/it][Succeeded / Failed / Skipped / Total] 364 / 220 / 10 / 594:  60%|█████▉    | 595/1000 [45:07<30:42,  4.55s/it][Succeeded / Failed / Skipped / Total] 365 / 220 / 10 / 595:  60%|█████▉    | 595/1000 [45:07<30:42,  4.55s/it][Succeeded / Failed / Skipped / Total] 365 / 220 / 10 / 595:  60%|█████▉    | 596/1000 [45:09<30:36,  4.55s/it][Succeeded / Failed / Skipped / Total] 365 / 221 / 10 / 596:  60%|█████▉    | 596/1000 [45:09<30:36,  4.55s/it][Succeeded / Failed / Skipped / Total] 365 / 221 / 10 / 596:  60%|█████▉    | 597/1000 [45:10<30:29,  4.54s/it][Succeeded / Failed / Skipped / Total] 365 / 222 / 10 / 597:  60%|█████▉    | 597/1000 [45:10<30:29,  4.54s/it][Succeeded / Failed / Skipped / Total] 365 / 222 / 10 / 597:  60%|█████▉    | 598/1000 [45:18<30:27,  4.55s/it][Succeeded / Failed / Skipped / Total] 365 / 223 / 10 / 598:  60%|█████▉    | 598/1000 [45:18<30:27,  4.55s/it][Succeeded / Failed / Skipped / Total] 365 / 223 / 10 / 598:  60%|█████▉    | 599/1000 [45:18<30:19,  4.54s/it]--------------------------------------------- Result 589 ---------------------------------------------
Get the next interval --> Get cron interval --> Socre: 1.0

[[[[Adv]]]]: public static long cronInterval ( String [[cron]] , Date date ) { try { return new CronExpression ( [[cron]] ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[cron]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long cronInterval ( String [[casock]] , Date date ) { try { return new CronExpression ( [[casock]] ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + [[casock]] , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 590 ---------------------------------------------
Parse cron expression . --> Methode d une cronction --> Socre: 1.0

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String cron ) { try { return new CronExpression ( cron ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[avegepronneaxantusion]] ( String cron ) { try { return new CronExpression ( cron ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 591 ---------------------------------------------
Performs a timeout after the given amount of time . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[timeout]] ( final CompletionStage < A > [[stage]] , final long [[amount]] , final TimeUnit unit ) { requireNonNull ( [[stage]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( [[amount]] , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> [[stage]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[fuid]] ( final CompletionStage < A > [[front]] , final long [[name]] , final TimeUnit unit ) { requireNonNull ( [[front]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( [[name]] , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> [[front]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 592 ---------------------------------------------
Loads the Guice application from the given context . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context [[context]] ) { return initialBuilder . in ( [[context]] . environment ( ) ) . loadConfig ( [[context]] . initialConfig ( ) ) . overrides ( overrides ( [[context]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[coach]] ( ApplicationLoader . Context [[dimension]] ) { return initialBuilder . in ( [[dimension]] . environment ( ) ) . loadConfig ( [[dimension]] . initialConfig ( ) ) . overrides ( overrides ( [[dimension]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 593 ---------------------------------------------
Display a specific request . --> Display the given form form --> Socre: 1.0

[[[[Adv]]]]: public static Result TODO ( Request [[request]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[request]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result TODO ( Request [[form]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[form]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 594 ---------------------------------------------
Sets a value to flash --> Map key to bus --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[flash]] ( String key , String value ) { [[flash]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void [[bus]] ( String key , String value ) { [[bus]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 595 ---------------------------------------------
Set a session value --> Support bus gracefully --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[session]] ( String [[key]] , String value ) { [[session]] ( ) . put ( [[key]] , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void [[bus]] ( String [[grace]] , String value ) { [[bus]] ( ) . put ( [[grace]] , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 596 ---------------------------------------------
Qualify the binding key . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[allows]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 597 ---------------------------------------------
Returns the binding key of this binding . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[als]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 598 ---------------------------------------------
Create a new ahc client . --> [[[FAILED]]]

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig [[config]] , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( [[config]] , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig [[franfusgged]] , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( [[franfusgged]] , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 599 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 365 / 224 / 10 / 599:  60%|█████▉    | 599/1000 [45:18<30:19,  4.54s/it][Succeeded / Failed / Skipped / Total] 365 / 224 / 10 / 599:  60%|██████    | 600/1000 [45:20<30:13,  4.53s/it][Succeeded / Failed / Skipped / Total] 365 / 225 / 10 / 600:  60%|██████    | 600/1000 [45:20<30:13,  4.53s/it][Succeeded / Failed / Skipped / Total] 365 / 225 / 10 / 600:  60%|██████    | 601/1000 [45:22<30:07,  4.53s/it][Succeeded / Failed / Skipped / Total] 365 / 226 / 10 / 601:  60%|██████    | 601/1000 [45:22<30:07,  4.53s/it][Succeeded / Failed / Skipped / Total] 365 / 226 / 10 / 601:  60%|██████    | 602/1000 [45:26<30:02,  4.53s/it][Succeeded / Failed / Skipped / Total] 365 / 227 / 10 / 602:  60%|██████    | 602/1000 [45:26<30:02,  4.53s/it][Succeeded / Failed / Skipped / Total] 365 / 227 / 10 / 602:  60%|██████    | 603/1000 [45:36<30:01,  4.54s/it][Succeeded / Failed / Skipped / Total] 365 / 228 / 10 / 603:  60%|██████    | 603/1000 [45:36<30:01,  4.54s/it][Succeeded / Failed / Skipped / Total] 365 / 228 / 10 / 603:  60%|██████    | 604/1000 [45:52<30:04,  4.56s/it][Succeeded / Failed / Skipped / Total] 365 / 229 / 10 / 604:  60%|██████    | 604/1000 [45:52<30:04,  4.56s/it][Succeeded / Failed / Skipped / Total] 365 / 229 / 10 / 604:  60%|██████    | 605/1000 [45:54<29:58,  4.55s/it][Succeeded / Failed / Skipped / Total] 365 / 230 / 10 / 605:  60%|██████    | 605/1000 [45:54<29:58,  4.55s/it][Succeeded / Failed / Skipped / Total] 365 / 230 / 10 / 605:  61%|██████    | 606/1000 [45:54<29:50,  4.55s/it][Succeeded / Failed / Skipped / Total] 365 / 231 / 10 / 606:  61%|██████    | 606/1000 [45:54<29:50,  4.55s/it][Succeeded / Failed / Skipped / Total] 365 / 231 / 10 / 606:  61%|██████    | 607/1000 [45:56<29:44,  4.54s/it][Succeeded / Failed / Skipped / Total] 365 / 232 / 10 / 607:  61%|██████    | 607/1000 [45:56<29:44,  4.54s/it][Succeeded / Failed / Skipped / Total] 365 / 232 / 10 / 607:  61%|██████    | 608/1000 [46:09<29:45,  4.55s/it]Convert the binding to a Java binding --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > provider ) { return underlying . to ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[main]] ( final Provider < ? extends T > provider ) { return underlying . to ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 600 ---------------------------------------------
Converts this binding to a Java binding . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > to ( final Class < ? extends T > [[implementation]] ) { return underlying . to ( [[implementation]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > to ( final Class < ? extends T > [[initiative]] ) { return underlying . to ( [[initiative]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 601 ---------------------------------------------
Convert this binding to a Java binding . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[parameter]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 602 ---------------------------------------------
Converts this binding to a Java binding . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > key ) { return underlying . to ( key . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[on]] ( final BindingKey < ? extends T > key ) { return underlying . to ( key . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 603 ---------------------------------------------
Converts the underlying provider to a Java provider . --> [[[FAILED]]]

[[[[Adv]]]]: public < P [[extends]] Provider < ? extends T > > Binding < T > [[toProvider]] ( final Class < P > provider ) { return underlying . toProvider ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P [[als]] Provider < ? extends T > > Binding < T > [[prepdomrp]] ( final Class < P > provider ) { return underlying . toProvider ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 604 ---------------------------------------------
Create a new EvolutionsReader from a map of evolutions . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > evolutions ) { return new SimpleEvolutionsReader ( evolutions ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[tmapper]] ( Map < String , List < Evolution > > evolutions ) { return new SimpleEvolutionsReader ( evolutions ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 605 ---------------------------------------------
Returns a list of available languages . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Lang > [[availables]] ( Application app ) { play . api . i18n . Langs [[langs]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[availableLangs]] = Scala . asJava ( [[langs]] . availables ( ) ) ; return [[availableLangs]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > [[attachedfs]] ( Application app ) { play . api . i18n . Langs [[tingas]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[acceptedugsm]] = Scala . asJava ( [[tingas]] . availables ( ) ) ; return [[acceptedugsm]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 606 ---------------------------------------------
Checks whether the class array is assignable from the given array . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( [[isAssignable]] ( classArray [ i ] , toClassArray [ i ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[iigralike]] ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( [[iigralike]] ( classArray [ i ] , toClassArray [ i ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 607 ---------------------------------------------
Returns the preferred . --> [[[FAILED]]]

[[[[Adv]]]]: public static Lang [[preferred]] ( Application [[app]] , List < Lang > availableLangs ) { play . api . i18n . Langs langs = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[main]] ( Application [[a]] , List < Lang > availableLangs ) { play . api . i18n . Langs langs = [[a]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 608 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 366 / 232 / 10 / 608:  61%|██████    | 608/1000 [46:09<29:45,  4.55s/it][Succeeded / Failed / Skipped / Total] 366 / 232 / 10 / 608:  61%|██████    | 609/1000 [46:17<29:42,  4.56s/it][Succeeded / Failed / Skipped / Total] 366 / 233 / 10 / 609:  61%|██████    | 609/1000 [46:17<29:42,  4.56s/it][Succeeded / Failed / Skipped / Total] 366 / 233 / 10 / 609:  61%|██████    | 610/1000 [46:18<29:36,  4.55s/it][Succeeded / Failed / Skipped / Total] 366 / 234 / 10 / 610:  61%|██████    | 610/1000 [46:18<29:36,  4.55s/it][Succeeded / Failed / Skipped / Total] 366 / 234 / 10 / 610:  61%|██████    | 611/1000 [46:22<29:31,  4.55s/it][Succeeded / Failed / Skipped / Total] 366 / 235 / 10 / 611:  61%|██████    | 611/1000 [46:22<29:31,  4.55s/it][Succeeded / Failed / Skipped / Total] 366 / 235 / 10 / 611:  61%|██████    | 612/1000 [46:27<29:27,  4.55s/it][Succeeded / Failed / Skipped / Total] 367 / 235 / 10 / 612:  61%|██████    | 612/1000 [46:27<29:27,  4.55s/it][Succeeded / Failed / Skipped / Total] 367 / 235 / 10 / 612:  61%|██████▏   | 613/1000 [46:29<29:21,  4.55s/it][Succeeded / Failed / Skipped / Total] 367 / 236 / 10 / 613:  61%|██████▏   | 613/1000 [46:29<29:21,  4.55s/it][Succeeded / Failed / Skipped / Total] 367 / 236 / 10 / 613:  61%|██████▏   | 614/1000 [46:33<29:15,  4.55s/it][Succeeded / Failed / Skipped / Total] 367 / 237 / 10 / 614:  61%|██████▏   | 614/1000 [46:33<29:15,  4.55s/it][Succeeded / Failed / Skipped / Total] 367 / 237 / 10 / 614:  62%|██████▏   | 615/1000 [46:34<29:09,  4.54s/it][Succeeded / Failed / Skipped / Total] 367 / 238 / 10 / 615:  62%|██████▏   | 615/1000 [46:35<29:09,  4.54s/it][Succeeded / Failed / Skipped / Total] 367 / 238 / 10 / 615:  62%|██████▏   | 616/1000 [46:42<29:06,  4.55s/it][Succeeded / Failed / Skipped / Total] 367 / 239 / 10 / 616:  62%|██████▏   | 616/1000 [46:42<29:06,  4.55s/it][Succeeded / Failed / Skipped / Total] 367 / 239 / 10 / 616:  62%|██████▏   | 617/1000 [46:48<29:03,  4.55s/it][Succeeded / Failed / Skipped / Total] 368 / 239 / 10 / 617:  62%|██████▏   | 617/1000 [46:48<29:03,  4.55s/it][Succeeded / Failed / Skipped / Total] 368 / 239 / 10 / 617:  62%|██████▏   | 618/1000 [46:50<28:57,  4.55s/it]Deletes all EVocations . --> Removes all simulation --> Socre: 1.0

[[[[Adv]]]]: public static void cleanupEvolutions ( Database [[database]] , boolean autocommit , String schema ) { DatabaseEvolutions [[evolutions]] = new DatabaseEvolutions ( [[database]] . asScala ( ) , schema ) ; [[evolutions]] . evolve ( [[evolutions]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void cleanupEvolutions ( Database [[catalog]] , boolean autocommit , String schema ) { DatabaseEvolutions [[emblemed]] = new DatabaseEvolutions ( [[catalog]] . asScala ( ) , schema ) ; [[emblemed]] . evolve ( [[emblemed]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 609 ---------------------------------------------
Loads the configuration from the given environment . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[withConfigLoader]] ( Function < Environment , Config > [[load]] ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( [[load]] . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[atincsticludadier]] ( Function < Environment , Config > [[park]] ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( [[park]] . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 610 ---------------------------------------------
Creates a reader for the Evolutions . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader forDefault ( Evolution ... [[evolutions]] ) { Map < String , List < Evolution > > [[map]] = new HashMap < String , List < Evolution > > ( ) ; [[map]] . put ( "default" , Arrays . asList ( [[evolutions]] ) ) ; return fromMap ( [[map]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . [[rebuildsr]] . EvolutionsReader forDefault ( Evolution ... [[rebuildsr]] ) { Map < String , List < Evolution > > [[x]] = new HashMap < String , List < Evolution > > ( ) ; [[x]] . put ( "default" , Arrays . asList ( [[rebuildsr]] ) ) ; return fromMap ( [[x]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 611 ---------------------------------------------
Load a Guice application from the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[supply]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 612 ---------------------------------------------
Loads the application with the given modules . --> Pruegen method --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( com . google . inject . Module ... [[modules]] ) { return [[load]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[discipline]] ( com . google . inject . Module ... [[products]] ) { return [[discipline]] ( Guiceable . [[products]] ( [[products]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 613 ---------------------------------------------
Loads the application with the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Module ... [[modules]] ) { return [[load]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[discipline]] ( play . api . inject . Module ... [[scenarios]] ) { return [[discipline]] ( Guiceable . [[scenarios]] ( [[scenarios]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 614 ---------------------------------------------
Loads a custom module loader . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[withModuleLoader]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[atmelcclalfera]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 615 ---------------------------------------------
Loads the application with the given bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[load]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder [[spell]] ( play . api . inject . Binding < ? > ... [[dingas]] ) { return [[spell]] ( Guiceable . [[dingas]] ( [[dingas]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 616 ---------------------------------------------
Returns a builder for the Guice application . --> [[[FAILED]]]

[[[[Adv]]]]: protected GuiceApplicationBuilder [[newBuilder]] ( play . api . inject . guice . GuiceApplicationBuilder [[builder]] ) { return new GuiceApplicationBuilder ( [[builder]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder [[newestcombvated]] ( play . api . inject . guice . GuiceApplicationBuilder [[creation]] ) { return new GuiceApplicationBuilder ( [[creation]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 617 ---------------------------------------------
Encodes a cookie . --> Converts cookies to esstate --> Socre: 1.0

[[[[Adv]]]]: public String [[encode]] ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[buf]] = new StringBuilder ( ) ; [[encode]] ( [[buf]] , [[cookie]] ) ; return stripTrailingSeparator ( [[buf]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String [[esstate]] ( Cookie [[cookies]] ) { if ( [[cookies]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[urck]] = new StringBuilder ( ) ; [[esstate]] ( [[urck]] , [[cookies]] ) ; return stripTrailingSeparator ( [[urck]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 618 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 368 / 240 / 10 / 618:  62%|██████▏   | 618/1000 [46:50<28:57,  4.55s/it][Succeeded / Failed / Skipped / Total] 368 / 240 / 10 / 618:  62%|██████▏   | 619/1000 [46:55<28:52,  4.55s/it][Succeeded / Failed / Skipped / Total] 369 / 240 / 10 / 619:  62%|██████▏   | 619/1000 [46:55<28:52,  4.55s/it][Succeeded / Failed / Skipped / Total] 369 / 240 / 10 / 619:  62%|██████▏   | 620/1000 [47:06<28:52,  4.56s/it][Succeeded / Failed / Skipped / Total] 370 / 240 / 10 / 620:  62%|██████▏   | 620/1000 [47:06<28:52,  4.56s/it][Succeeded / Failed / Skipped / Total] 370 / 240 / 10 / 620:  62%|██████▏   | 621/1000 [47:23<28:55,  4.58s/it][Succeeded / Failed / Skipped / Total] 371 / 240 / 10 / 621:  62%|██████▏   | 621/1000 [47:23<28:55,  4.58s/it][Succeeded / Failed / Skipped / Total] 371 / 240 / 10 / 621:  62%|██████▏   | 622/1000 [47:25<28:49,  4.57s/it][Succeeded / Failed / Skipped / Total] 371 / 241 / 10 / 622:  62%|██████▏   | 622/1000 [47:25<28:49,  4.57s/it][Succeeded / Failed / Skipped / Total] 371 / 241 / 10 / 622:  62%|██████▏   | 623/1000 [47:25<28:41,  4.57s/it][Succeeded / Failed / Skipped / Total] 372 / 241 / 10 / 623:  62%|██████▏   | 623/1000 [47:25<28:41,  4.57s/it][Succeeded / Failed / Skipped / Total] 372 / 241 / 10 / 623:  62%|██████▏   | 624/1000 [47:26<28:35,  4.56s/it]Gets the entity manager . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( ) { Deque < EntityManager > [[ems]] = this . emStack ( "True" == "True" ) ; if ( [[ems]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[ems]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager [[pop]] ( ) { Deque < EntityManager > [[eh]] = this . emStack ( "True" == "True" ) ; if ( [[eh]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[eh]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 619 ---------------------------------------------
Proceed a flow with the given flow . -->  banner --> Socre: 1.0

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[bypassWith]] ( Function < In , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > flow ) { return [[bypassWith]] ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[bannerped]] ( Function < In , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > flow ) { return [[bannerped]] ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 620 ---------------------------------------------
Proactively bypassing the given flow . --> Creates an LOOpper --> Socre: 1.0

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[bypassWith]] ( Flow < In , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > [[mergeStrategy]] , Flow < FlowIn , Out , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[loopper]] ( Flow < In , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > [[amalgamationalltky]] , Flow < FlowIn , Out , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 621 ---------------------------------------------
Convert error arguments . --> Helper method to getters committed for this context --> Socre: 1.0

[[[[Adv]]]]: private List < Object > [[convertErrorArguments]] ( Object [ ] arguments ) { if ( arguments == null ) { return Collections . emptyList ( ) ; } List < Object > [[converted]] = Arrays . stream ( arguments ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[converted]] ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > [[eneridaririmths]] ( Object [ ] arguments ) { if ( arguments == null ) { return Collections . emptyList ( ) ; } List < Object > [[committed]] = Arrays . stream ( arguments ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[committed]] ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 622 ---------------------------------------------
Pops the given EntityManager from the stack . --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager [[em]] , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( [[em]] != null ) { ems . push ( [[em]] ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[callproapeumb]] ( EntityManager [[data]] , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( [[data]] != null ) { ems . push ( [[data]] ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 623 ---------------------------------------------
Creates a flow from actor ref . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static < [[In]] , Out > Flow < [[In]] , Out , ? > [[actorRef]] ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer [[mat]] ) { return play . api . libs . streams . ActorFlow . < [[In]] , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , [[mat]] ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < [[inn]] , Out > Flow < [[inn]] , Out , ? > [[areretfl]] ( Function < ActorRef , Props > props , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer [[ne]] ) { return play . api . libs . streams . ActorFlow . < [[inn]] , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return props . apply ( v1 ) ; } } , bufferSize , overflowStrategy , factory , [[ne]] ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 624 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 373 / 241 / 10 / 624:  62%|██████▏   | 624/1000 [47:26<28:35,  4.56s/it][Succeeded / Failed / Skipped / Total] 373 / 241 / 10 / 624:  62%|██████▎   | 625/1000 [47:32<28:31,  4.56s/it][Succeeded / Failed / Skipped / Total] 374 / 241 / 10 / 625:  62%|██████▎   | 625/1000 [47:32<28:31,  4.56s/it][Succeeded / Failed / Skipped / Total] 374 / 241 / 10 / 625:  63%|██████▎   | 626/1000 [47:33<28:24,  4.56s/it][Succeeded / Failed / Skipped / Total] 374 / 242 / 10 / 626:  63%|██████▎   | 626/1000 [47:33<28:24,  4.56s/it][Succeeded / Failed / Skipped / Total] 374 / 242 / 10 / 626:  63%|██████▎   | 627/1000 [47:35<28:18,  4.55s/it][Succeeded / Failed / Skipped / Total] 374 / 243 / 10 / 627:  63%|██████▎   | 627/1000 [47:35<28:18,  4.55s/it][Succeeded / Failed / Skipped / Total] 374 / 243 / 10 / 627:  63%|██████▎   | 628/1000 [47:40<28:14,  4.55s/it][Succeeded / Failed / Skipped / Total] 375 / 243 / 10 / 628:  63%|██████▎   | 628/1000 [47:40<28:14,  4.55s/it][Succeeded / Failed / Skipped / Total] 375 / 243 / 10 / 628:  63%|██████▎   | 629/1000 [47:42<28:08,  4.55s/it][Succeeded / Failed / Skipped / Total] 376 / 243 / 10 / 629:  63%|██████▎   | 629/1000 [47:42<28:08,  4.55s/it][Succeeded / Failed / Skipped / Total] 376 / 243 / 10 / 629:  63%|██████▎   | 630/1000 [47:44<28:02,  4.55s/it][Succeeded / Failed / Skipped / Total] 377 / 243 / 10 / 630:  63%|██████▎   | 630/1000 [47:44<28:02,  4.55s/it][Succeeded / Failed / Skipped / Total] 377 / 243 / 10 / 630:  63%|██████▎   | 631/1000 [47:46<27:56,  4.54s/it][Succeeded / Failed / Skipped / Total] 377 / 244 / 10 / 631:  63%|██████▎   | 631/1000 [47:46<27:56,  4.54s/it][Succeeded / Failed / Skipped / Total] 377 / 244 / 10 / 631:  63%|██████▎   | 632/1000 [47:46<27:49,  4.54s/it][Succeeded / Failed / Skipped / Total] 378 / 244 / 10 / 632:  63%|██████▎   | 632/1000 [47:46<27:49,  4.54s/it][Succeeded / Failed / Skipped / Total] 378 / 244 / 10 / 632:  63%|██████▎   | 633/1000 [47:48<27:43,  4.53s/it]Gets the em stack . --> returns a new Queueque --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[emStack]] ( boolean [[threadLocalFallback]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[ashteck]] ( boolean [[ancetolegees]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 625 ---------------------------------------------
Gets the value associated with the given key . --> End . --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > [[value]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[end]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 626 ---------------------------------------------
Gets the global validation errors . --> [[[FAILED]]]

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[exporterotresson]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 627 ---------------------------------------------
Creates a form filled with the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: public Form < T > [[fill]] ( T [[value]] ) { if ( [[value]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[value]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > [[escape]] ( T [[condition]] ) { if ( [[condition]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[condition]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 628 ---------------------------------------------
Converts a string into an object of the given type . --> Parse following rules --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[following]] > [[following]] parse ( String text , Class < [[following]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 629 ---------------------------------------------
Converts the given text to a type . --> Convert the given text to art . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[art]] > [[art]] parse ( Field field , String text ) { return ( [[art]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 630 ---------------------------------------------
Print the given value --> Prints an album --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[album]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[album]] . class ) ) { return conversion . convert ( t , [[album]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 631 ---------------------------------------------
Prints a type descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[field]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 632 ---------------------------------------------
Converts errors in JSON to JSON representation . --> Generate minss CSS codes --> Socre: 1.0

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > [[messages]] = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; [[messages]] . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { [[messages]] . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , [[messages]] ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[minssicsona]] ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > [[colours]] = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; [[colours]] . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { [[colours]] . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , [[colours]] ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 633 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 379 / 244 / 10 / 633:  63%|██████▎   | 633/1000 [47:48<27:43,  4.53s/it][Succeeded / Failed / Skipped / Total] 379 / 244 / 10 / 633:  63%|██████▎   | 634/1000 [47:53<27:38,  4.53s/it][Succeeded / Failed / Skipped / Total] 379 / 245 / 10 / 634:  63%|██████▎   | 634/1000 [47:53<27:38,  4.53s/it][Succeeded / Failed / Skipped / Total] 379 / 245 / 10 / 634:  64%|██████▎   | 635/1000 [47:53<27:31,  4.53s/it][Succeeded / Failed / Skipped / Total] 380 / 245 / 10 / 635:  64%|██████▎   | 635/1000 [47:53<27:31,  4.53s/it][Succeeded / Failed / Skipped / Total] 380 / 245 / 10 / 635:  64%|██████▎   | 636/1000 [48:13<27:35,  4.55s/it][Succeeded / Failed / Skipped / Total] 380 / 246 / 10 / 636:  64%|██████▎   | 636/1000 [48:13<27:35,  4.55s/it][Succeeded / Failed / Skipped / Total] 380 / 246 / 10 / 636:  64%|██████▎   | 637/1000 [48:14<27:29,  4.54s/it][Succeeded / Failed / Skipped / Total] 381 / 246 / 10 / 637:  64%|██████▎   | 637/1000 [48:14<27:29,  4.54s/it][Succeeded / Failed / Skipped / Total] 381 / 246 / 10 / 637:  64%|██████▍   | 638/1000 [48:21<27:26,  4.55s/it][Succeeded / Failed / Skipped / Total] 381 / 247 / 10 / 638:  64%|██████▍   | 638/1000 [48:21<27:26,  4.55s/it][Succeeded / Failed / Skipped / Total] 381 / 247 / 10 / 638:  64%|██████▍   | 639/1000 [48:27<27:22,  4.55s/it][Succeeded / Failed / Skipped / Total] 382 / 247 / 10 / 639:  64%|██████▍   | 639/1000 [48:27<27:22,  4.55s/it]Prints a type . --> Prints an album --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[album]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[album]] . class ) ) ) { return ( [[album]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[album]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[album]] . class ) ) { return conversion . convert ( t , [[album]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 634 ---------------------------------------------
Fills the form . --> [[[FAILED]]]

[[[[Adv]]]]: public DynamicForm [[fill]] ( Map < String , Object > value ) { Form < Dynamic > [[form]] = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( [[form]] . rawData ( ) , [[form]] . files ( ) , [[form]] . errors ( ) , [[form]] . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm [[take]] ( Map < String , Object > value ) { Form < Dynamic > [[format]] = super . fill ( new Dynamic ( value ) ) ; return new DynamicForm ( [[format]] . rawData ( ) , [[format]] . files ( ) , [[format]] . errors ( ) , [[format]] . value ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 635 ---------------------------------------------
Register converter . --> Register converterters --> Socre: 1.0

[[[[Adv]]]]: private Formatters [[registerOptional]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String

[[[[Adv]]]]: private Formatters [[classtuvocationage]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 636 ---------------------------------------------
Registers a formatter for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[Formatters]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String [[text]] , Locale locale ) throws java . [[text]] . ParseException { return formatter . parse ( [[text]] , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > [[scriptets]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String [[a]] , Locale locale ) throws java . [[a]] . ParseException { return formatter . parse ( [[a]] , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 637 ---------------------------------------------
Select all nodes matching the specified node . --> Broadcast a network --> Socre: 1.0

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String [[path]] , Object [[node]] ) { return [[selectNodes]] ( [[path]] , [[node]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[callnandb]] ( String [[net]] , Object [[system]] ) { return [[callnandb]] ( [[net]] , [[system]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 638 ---------------------------------------------
Encodes a cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = [[cookie]] . name ( ) ; final String [[value]] = [[cookie]] . value ( ) != null ? [[cookie]] . value ( ) : "" ; validateCookie ( name , [[value]] ) ; StringBuilder [[buf]] = new StringBuilder ( ) ; if ( [[cookie]] . wrap ( ) ) { addQuoted ( [[buf]] , name , [[value]] ) ; } else { add ( [[buf]] , name , [[value]] ) ; } if ( [[cookie]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( [[buf]] , CookieHeaderNames . MAX_AGE , [[cookie]] . maxAge ( ) ) ; Date expires = [[cookie]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie [[baker]] ) { if ( [[baker]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = [[baker]] . name ( ) ; final String [[date]] = [[baker]] . value ( ) != null ? [[baker]] . value ( ) : "" ; validateCookie ( name , [[date]] ) ; StringBuilder [[tung]] = new StringBuilder ( ) ; if ( [[baker]] . wrap ( ) ) { addQuoted ( [[tung]] , name , [[date]] ) ; } else { add ( [[tung]] , name , [[date]] ) ; } if ( [[baker]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( [[tung]] , CookieHeaderNames . MAX_AGE , [[baker]] . maxAge ( ) ) ; Date expires = [[baker]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 639 ---------------------------------------------
Converts a List into a Java sequence . --> Calculate the sensome sequence --> Socre: 1.0

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[sensomeق]] ( java . util . List < T > [[range]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[range]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 640 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 383 / 247 / 10 / 640:  64%|██████▍   | 640/1000 [48:27<27:15,  4.54s/it][Succeeded / Failed / Skipped / Total] 383 / 247 / 10 / 640:  64%|██████▍   | 641/1000 [48:35<27:12,  4.55s/it][Succeeded / Failed / Skipped / Total] 383 / 248 / 10 / 641:  64%|██████▍   | 641/1000 [48:35<27:12,  4.55s/it][Succeeded / Failed / Skipped / Total] 384 / 248 / 10 / 642:  64%|██████▍   | 642/1000 [48:35<27:05,  4.54s/it][Succeeded / Failed / Skipped / Total] 384 / 248 / 10 / 642:  64%|██████▍   | 643/1000 [48:36<26:59,  4.54s/it][Succeeded / Failed / Skipped / Total] 385 / 248 / 10 / 643:  64%|██████▍   | 643/1000 [48:36<26:59,  4.54s/it]Convert an array into a sequence . --> Static factory method for Domestic Segment --> Socre: 1.0

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[domesticseh]] ( T [ ] [[collections]] ) { return [[domesticseh]] ( java . util . Arrays . asList ( [[collections]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 641 ---------------------------------------------
Create a sequence of variables from the given array . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... array ) { return toSeq ( array ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[proharcs]] ( T ... array ) { return toSeq ( array ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 642 ---------------------------------------------
Creates a Mapped WebSocket Acceptor --> Creates a MappedWebSocketAcceptor --> Socre: 1.0

[[[[Adv]]]]: public static < In , Out > MappedWebSocketAcceptor < In , Out > json ( Class < In > [[in]] ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , [[in]] ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , [[in]] ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .

[[[[Adv]]]]: public static < In , Out > MappedWebSocketAcceptor < In , Out > json ( Class < In > [[i]] ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , [[i]] ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , [[i]] ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 643 ---------------------------------------------
Accepts and returns a stream accepting result . --> Called when the result is accepting a result --> Socre: 1.0

[[[[Adv]]]]: private static < In , Out > [[WebSocket]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[WebSocket]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > [[cssuldeot]] acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new [[cssuldeot]] ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 644 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 385 / 249 / 10 / 644:  64%|██████▍   | 644/1000 [48:43<26:56,  4.54s/it][Succeeded / Failed / Skipped / Total] 385 / 249 / 10 / 644:  64%|██████▍   | 645/1000 [48:45<26:50,  4.54s/it][Succeeded / Failed / Skipped / Total] 386 / 249 / 10 / 645:  64%|██████▍   | 645/1000 [48:45<26:50,  4.54s/it][Succeeded / Failed / Skipped / Total] 387 / 249 / 10 / 646:  65%|██████▍   | 646/1000 [48:53<26:47,  4.54s/it][Succeeded / Failed / Skipped / Total] 387 / 249 / 10 / 646:  65%|██████▍   | 647/1000 [48:56<26:42,  4.54s/it][Succeeded / Failed / Skipped / Total] 388 / 249 / 10 / 647:  65%|██████▍   | 647/1000 [48:56<26:42,  4.54s/it][Succeeded / Failed / Skipped / Total] 388 / 249 / 10 / 647:  65%|██████▍   | 648/1000 [48:57<26:35,  4.53s/it]Register a converter . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends [[Annotation]] , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends [[Annotation]] > annotationType = ( Class < ? extends [[Annotation]] > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends [[annoction]] , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends [[annoction]] > annotationType = ( Class < ? extends [[annoction]] > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 645 ---------------------------------------------
Checks if the given object is accessible . --> Returns true if the specified object is in working band --> Socre: 1.0

[[[[Adv]]]]: static boolean [[setAccessibleWorkaround]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean [[collectcocusiworkingband]] ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member m = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 646 ---------------------------------------------
Get total transformation cost . --> Get tstagsmagsm tstamp --> Socre: 1.0

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean [[isVarArgs]] = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[gettstaltragsmptcesat]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean [[avardevsd]] = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 647 ---------------------------------------------
Gets the message for a specific key . --> Gets language by language --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( String key , Object ... [[args]] ) { return messagesApi . get ( lang , key , [[args]] ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String [[en]] ( String key , Object ... [[aris]] ) { return messagesApi . get ( lang , key , [[aris]] ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 648 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 389 / 249 / 10 / 648:  65%|██████▍   | 648/1000 [48:57<26:35,  4.53s/it][Succeeded / Failed / Skipped / Total] 389 / 249 / 10 / 648:  65%|██████▍   | 649/1000 [49:10<26:35,  4.55s/it][Succeeded / Failed / Skipped / Total] 389 / 250 / 10 / 649:  65%|██████▍   | 649/1000 [49:10<26:35,  4.55s/it][Succeeded / Failed / Skipped / Total] 389 / 250 / 10 / 649:  65%|██████▌   | 650/1000 [49:10<26:28,  4.54s/it][Succeeded / Failed / Skipped / Total] 389 / 251 / 10 / 650:  65%|██████▌   | 650/1000 [49:10<26:28,  4.54s/it][Succeeded / Failed / Skipped / Total] 389 / 251 / 10 / 650:  65%|██████▌   | 651/1000 [49:28<26:31,  4.56s/it][Succeeded / Failed / Skipped / Total] 390 / 251 / 10 / 651:  65%|██████▌   | 651/1000 [49:28<26:31,  4.56s/it][Succeeded / Failed / Skipped / Total] 390 / 251 / 10 / 651:  65%|██████▌   | 652/1000 [49:35<26:28,  4.56s/it][Succeeded / Failed / Skipped / Total] 391 / 251 / 10 / 652:  65%|██████▌   | 652/1000 [49:35<26:28,  4.56s/it][Succeeded / Failed / Skipped / Total] 391 / 251 / 10 / 652:  65%|██████▌   | 653/1000 [49:42<26:24,  4.57s/it][Succeeded / Failed / Skipped / Total] 392 / 251 / 10 / 653:  65%|██████▌   | 653/1000 [49:42<26:24,  4.57s/it][Succeeded / Failed / Skipped / Total] 392 / 251 / 10 / 653:  65%|██████▌   | 654/1000 [49:48<26:20,  4.57s/it][Succeeded / Failed / Skipped / Total] 393 / 251 / 10 / 654:  65%|██████▌   | 654/1000 [49:48<26:20,  4.57s/it][Succeeded / Failed / Skipped / Total] 393 / 251 / 10 / 654:  66%|██████▌   | 655/1000 [49:48<26:13,  4.56s/it][Succeeded / Failed / Skipped / Total] 393 / 251 / 11 / 655:  66%|██████▌   | 655/1000 [49:48<26:13,  4.56s/it][Succeeded / Failed / Skipped / Total] 393 / 251 / 11 / 655:  66%|██████▌   | 656/1000 [49:50<26:08,  4.56s/it]Get message by key --> Retrieve messages --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[list]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 649 ---------------------------------------------
Creates a new parallel sorting algorithm . --> [[[FAILED]]]

[[[[Adv]]]]: public static ParallelSorter [[create]] ( Object [ ] arrays ) { Generator gen = new Generator ( ) ; gen . setArrays ( arrays ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter [[created]] ( Object [ ] arrays ) { Generator gen = new Generator ( ) ; gen . setArrays ( arrays ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 650 ---------------------------------------------
Get the promotion cost for a primitive class . --> [[[FAILED]]]

[[[[Adv]]]]: private static float getPrimitivePromotionCost ( final Class < ? > [[srcClass]] , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > cls = [[srcClass]] ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float getPrimitivePromotionCost ( final Class < ? > [[dscelut]] , final Class < ? > destClass ) { float cost = 0.0f ; Class < ? > cls = [[dscelut]] ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 651 ---------------------------------------------
Merges the sort sort . --> Perform sorting algorithm --> Socre: 1.0

[[[[Adv]]]]: public void [[mergeSort]] ( int index , int lo , int [[hi]] , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( lo , [[hi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[combininghurth]] ( int index , int lo , int [[cm]] , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( lo , [[cm]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 652 ---------------------------------------------
Simple quick sort . --> Performs 3rd retry attempt --> Socre: 1.0

[[[[Adv]]]]: public void [[quickSort]] ( int index , int lo , int [[hi]] , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( lo , [[hi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void [[3rdtryts]] ( int index , int lo , int [[hello]] , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( lo , [[hello]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 653 ---------------------------------------------
Cast a numeric value to the specified type . --> Advances instruction . --> Socre: 1.0

[[[[Adv]]]]: public void [[cast_numeric]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void [[advirtualdumed]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[advirtualdumed]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[advirtualdumed]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[advirtualdumed]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 654 ---------------------------------------------
Creates a new database from the default configuration . --> Permanently park an application wicket wicket --> Socre: 1.0

[[[[Adv]]]]: public static Database [[createFrom]] ( String [[driver]] , String url , Map < String , ? extends Object > [[config]] ) { return [[createFrom]] ( "default" , [[driver]] , url , [[config]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database [[parkappw]] ( String [[base]] , String url , Map < String , ? extends Object > [[cruigy]] ) { return [[parkappw]] ( "default" , [[base]] , url , [[cruigy]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 655 ---------------------------------------------
Emit a field instruction . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 656 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 394 / 251 / 11 / 656:  66%|██████▌   | 656/1000 [49:50<26:08,  4.56s/it][Succeeded / Failed / Skipped / Total] 394 / 251 / 11 / 656:  66%|██████▌   | 657/1000 [49:53<26:02,  4.56s/it][Succeeded / Failed / Skipped / Total] 394 / 252 / 11 / 657:  66%|██████▌   | 657/1000 [49:53<26:02,  4.56s/it][Succeeded / Failed / Skipped / Total] 394 / 252 / 11 / 657:  66%|██████▌   | 658/1000 [49:53<25:55,  4.55s/it][Succeeded / Failed / Skipped / Total] 395 / 252 / 11 / 658:  66%|██████▌   | 658/1000 [49:53<25:55,  4.55s/it][Succeeded / Failed / Skipped / Total] 395 / 252 / 11 / 658:  66%|██████▌   | 659/1000 [50:02<25:53,  4.56s/it][Succeeded / Failed / Skipped / Total] 395 / 253 / 11 / 659:  66%|██████▌   | 659/1000 [50:02<25:53,  4.56s/it][Succeeded / Failed / Skipped / Total] 395 / 253 / 11 / 659:  66%|██████▌   | 660/1000 [50:03<25:47,  4.55s/it][Succeeded / Failed / Skipped / Total] 396 / 253 / 11 / 660:  66%|██████▌   | 660/1000 [50:03<25:47,  4.55s/it][Succeeded / Failed / Skipped / Total] 396 / 253 / 11 / 660:  66%|██████▌   | 661/1000 [50:12<25:44,  4.56s/it][Succeeded / Failed / Skipped / Total] 396 / 254 / 11 / 661:  66%|██████▌   | 661/1000 [50:12<25:44,  4.56s/it][Succeeded / Failed / Skipped / Total] 396 / 254 / 11 / 661:  66%|██████▌   | 662/1000 [50:20<25:42,  4.56s/it]push zero or null --> characters --> Socre: 1.0

[[[[Adv]]]]: public void [[zero_or_null]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[bishop12gonquadblank]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 657 ---------------------------------------------
Loads a single argument . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[load_arg]] ( int [[index]] ) { load_local ( state . argumentTypes [ [[index]] ] , state . localOffset + skipArgs ( [[index]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void [[stablearɡ]] ( int [[alias]] ) { load_local ( state . argumentTypes [ [[alias]] ] , state . localOffset + skipArgs ( [[alias]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 658 ---------------------------------------------
Unbox or zero . --> For debugging purposes only --> Socre: 1.0

[[[[Adv]]]]: public void [[unbox_or_zero]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void [[urrongbootimaginaryahigh]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { if ( type != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( type ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( type ) ; mark ( end ) ; } } else { checkcast ( type ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 659 ---------------------------------------------
Invokes the protected method . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[invoke]] ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object [[anddeke]] ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 660 ---------------------------------------------
implements the NullEmitter --> implements nulls --> Socre: 1.0

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label [[oneNullHelper]] = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( [[oneNullHelper]] ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( [[oneNullHelper]] ) ; e . goTo ( end ) ; e . mark ( [[oneNullHelper]] ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label [[anylehemplex]] = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( [[anylehemplex]] ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( [[anylehemplex]] ) ; e . goTo ( end ) ; e . mark ( [[anylehemplex]] ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 661 ---------------------------------------------
Calculates the cost of object transformation between the source class and destination class . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getObjectTransformationCost]] ( Class < ? > [[srcClass]] , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( [[srcClass]] , destClass ) ; } float cost = 0.0f ; while ( [[srcClass]] != null && ! destClass . equals ( [[srcClass]] ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( [[srcClass]] , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( [[srcClass]] == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float [[zipforaceparagsceatorvesth]] ( Class < ? > [[rancupuss]] , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( [[rancupuss]] , destClass ) ; } float cost = 0.0f ; while ( [[rancupuss]] != null && ! destClass . equals ( [[rancupuss]] ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( [[rancupuss]] , destClass ) ) { * If the destination class is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( [[rancupuss]] == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 662 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 397 / 254 / 11 / 662:  66%|██████▌   | 662/1000 [50:20<25:42,  4.56s/it][Succeeded / Failed / Skipped / Total] 397 / 254 / 11 / 662:  66%|██████▋   | 663/1000 [50:26<25:38,  4.57s/it][Succeeded / Failed / Skipped / Total] 398 / 254 / 11 / 663:  66%|██████▋   | 663/1000 [50:26<25:38,  4.57s/it][Succeeded / Failed / Skipped / Total] 398 / 254 / 11 / 663:  66%|██████▋   | 664/1000 [50:26<25:31,  4.56s/it][Succeeded / Failed / Skipped / Total] 398 / 254 / 12 / 664:  66%|██████▋   | 664/1000 [50:26<25:31,  4.56s/it][Succeeded / Failed / Skipped / Total] 398 / 254 / 12 / 664:  66%|██████▋   | 665/1000 [50:39<25:31,  4.57s/it][Succeeded / Failed / Skipped / Total] 398 / 255 / 12 / 665:  66%|██████▋   | 665/1000 [50:39<25:31,  4.57s/it][Succeeded / Failed / Skipped / Total] 398 / 255 / 12 / 665:  67%|██████▋   | 666/1000 [50:39<25:24,  4.56s/it][Succeeded / Failed / Skipped / Total] 399 / 255 / 12 / 666:  67%|██████▋   | 666/1000 [50:39<25:24,  4.56s/it][Succeeded / Failed / Skipped / Total] 399 / 255 / 13 / 667:  67%|██████▋   | 667/1000 [50:39<25:17,  4.56s/it][Succeeded / Failed / Skipped / Total] 399 / 255 / 13 / 667:  67%|██████▋   | 668/1000 [50:39<25:10,  4.55s/it][Succeeded / Failed / Skipped / Total] 399 / 255 / 14 / 668:  67%|██████▋   | 668/1000 [50:39<25:10,  4.55s/it]Finds all methods in the given superclass and interfaces . --> Buycitbories --> Socre: 1.0

[[[[Adv]]]]: public static void [[getMethods]] ( Class superclass , Class [ ] [[interfaces]] , List methods ) { [[getMethods]] ( superclass , [[interfaces]] , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void [[buycitbories]] ( Class superclass , Class [ ] [[methods]] , List methods ) { [[buycitbories]] ( superclass , [[methods]] , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 663 ---------------------------------------------
Sets the super class . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public void [[setSuperclass]] ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . superclass = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[windowstyserpass]] ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . superclass = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 664 ---------------------------------------------
Gets the field with the given names . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 665 ---------------------------------------------
Add a method to the signature . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]] ( Method [[method]] ) { [[add]] ( ReflectUtils . getSignature ( [[method]] ) , ReflectUtils . getExceptionTypes ( [[method]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[input]] ( Method [[skater]] ) { [[input]] ( ReflectUtils . getSignature ( [[skater]] ) , ReflectUtils . getExceptionTypes ( [[skater]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 666 ---------------------------------------------
Filter the constructors in the given class . --> Helper method for lightcans --> Socre: 1.0

[[[[Adv]]]]: protected void [[filterConstructors]] ( Class [[sc]] , List [[constructors]] ) { CollectionUtils . filter ( [[constructors]] , new VisibilityPredicate ( [[sc]] , "True" == "True" ) ) ; if ( [[constructors]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[sc]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void [[lightcanseradc]] ( Class [[null]] , List [[composeres]] ) { CollectionUtils . filter ( [[composeres]] , new VisibilityPredicate ( [[null]] , "True" == "True" ) ) ; if ( [[composeres]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[null]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 667 ---------------------------------------------
Calculates the cardinality of the value --> [[[SKIPPED]]]

[[[[Adv]]]]: public int cardinality ( ) { int w = value ; int c = 0 ; while ( w != 0 ) { c += T [ w & 255 ] ; w >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 668 ---------------------------------------------
Returns the array of methods found in the given array . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 669 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 400 / 255 / 14 / 669:  67%|██████▋   | 669/1000 [50:41<25:04,  4.55s/it][Succeeded / Failed / Skipped / Total] 400 / 255 / 14 / 669:  67%|██████▋   | 670/1000 [50:47<25:01,  4.55s/it][Succeeded / Failed / Skipped / Total] 401 / 255 / 14 / 670:  67%|██████▋   | 670/1000 [50:47<25:01,  4.55s/it][Succeeded / Failed / Skipped / Total] 401 / 256 / 14 / 671:  67%|██████▋   | 671/1000 [50:48<24:54,  4.54s/it][Succeeded / Failed / Skipped / Total] 401 / 256 / 14 / 671:  67%|██████▋   | 672/1000 [50:54<24:50,  4.55s/it][Succeeded / Failed / Skipped / Total] 401 / 257 / 14 / 672:  67%|██████▋   | 672/1000 [50:54<24:50,  4.55s/it][Succeeded / Failed / Skipped / Total] 402 / 257 / 14 / 673:  67%|██████▋   | 673/1000 [50:58<24:46,  4.54s/it][Succeeded / Failed / Skipped / Total] 402 / 257 / 14 / 673:  67%|██████▋   | 674/1000 [51:02<24:41,  4.54s/it][Succeeded / Failed / Skipped / Total] 402 / 258 / 14 / 674:  67%|██████▋   | 674/1000 [51:02<24:41,  4.54s/it][Succeeded / Failed / Skipped / Total] 403 / 258 / 14 / 675:  68%|██████▊   | 675/1000 [51:07<24:36,  4.54s/it][Succeeded / Failed / Skipped / Total] 403 / 258 / 14 / 675:  68%|██████▊   | 676/1000 [51:08<24:30,  4.54s/it]Process an array . --> Simplified method implementation --> Socre: 1.0

[[[[Adv]]]]: public static void [[process_array]] ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type [[componentType]] = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label [[loopbody]] = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( [[loopbody]] ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( [[componentType]] ) ; callback . processElement ( [[componentType]] ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , [[loopbody]] ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void [[softwareingactive]] ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type [[elementsform]] = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label [[gingbir]] = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( [[gingbir]] ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( [[elementsform]] ) ; callback . processElement ( [[elementsform]] ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , [[gingbir]] ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 670 ---------------------------------------------
Reads a string from a file . --> Performs cross - sharing --> Socre: 1.0

[[[[Adv]]]]: public static String [[readString]] ( final Path path ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[crosswaring]] ( final Path path ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( path , StandardCharsets . UTF_8 ) ) { StringWriter writer = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 671 ---------------------------------------------
Resolves all bridge classes . --> [[[FAILED]]]

[[[[Adv]]]]: public Map resolveAll ( ) { Map resolved = new HashMap ( ) ; for ( Iterator [[entryIter]] = declToBridge . entrySet ( ) . iterator ( ) ; [[entryIter]] . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) [[entryIter]] . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set [[bridges]] = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[bridges]] , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map resolveAll ( ) { Map resolved = new HashMap ( ) ; for ( Iterator [[arrowot]] = declToBridge . entrySet ( ) . iterator ( ) ; [[arrowot]] . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) [[arrowot]] . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set [[definitions]] = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[definitions]] , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 672 ---------------------------------------------
Resolve child path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path [[resolve]] ( final Path base , String [[child]] ) { if ( StringUtil . startsWithChar ( [[child]] , File . separatorChar ) ) { [[child]] = [[child]] . substring ( 1 ) ; } return base . resolve ( [[child]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path [[answer]] ( final Path base , String [[boy]] ) { if ( StringUtil . startsWithChar ( [[boy]] , File . separatorChar ) ) { [[boy]] = [[boy]] . substring ( 1 ) ; } return base . resolve ( [[boy]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 673 ---------------------------------------------
Start a connect request --> Start connecting to the given destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[connecting]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 674 ---------------------------------------------
Sets the naming policy --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[generalchildnameofiteya]] ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 675 ---------------------------------------------
Sets the request host . --> Set the website website --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[host]] ( final String [[host]] ) { this . [[host]] = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[website]] ( final String [[guest]] ) { this . [[send]] = [[website]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[website]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 676 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 404 / 258 / 14 / 676:  68%|██████▊   | 676/1000 [51:08<24:30,  4.54s/it][Succeeded / Failed / Skipped / Total] 405 / 258 / 14 / 677:  68%|██████▊   | 677/1000 [51:08<24:24,  4.53s/it][Succeeded / Failed / Skipped / Total] 405 / 258 / 14 / 677:  68%|██████▊   | 678/1000 [51:11<24:18,  4.53s/it][Succeeded / Failed / Skipped / Total] 405 / 259 / 14 / 678:  68%|██████▊   | 678/1000 [51:11<24:18,  4.53s/it][Succeeded / Failed / Skipped / Total] 405 / 260 / 14 / 679:  68%|██████▊   | 679/1000 [51:16<24:14,  4.53s/it][Succeeded / Failed / Skipped / Total] 405 / 260 / 14 / 679:  68%|██████▊   | 680/1000 [51:17<24:08,  4.53s/it][Succeeded / Failed / Skipped / Total] 405 / 261 / 14 / 680:  68%|██████▊   | 680/1000 [51:17<24:08,  4.53s/it][Succeeded / Failed / Skipped / Total] 405 / 262 / 14 / 681:  68%|██████▊   | 681/1000 [51:19<24:02,  4.52s/it][Succeeded / Failed / Skipped / Total] 405 / 262 / 14 / 681:  68%|██████▊   | 682/1000 [51:21<23:56,  4.52s/it][Succeeded / Failed / Skipped / Total] 406 / 262 / 14 / 682:  68%|██████▊   | 682/1000 [51:21<23:56,  4.52s/it][Succeeded / Failed / Skipped / Total] 406 / 263 / 14 / 683:  68%|██████▊   | 683/1000 [51:21<23:50,  4.51s/it][Succeeded / Failed / Skipped / Total] 406 / 263 / 14 / 683:  68%|██████▊   | 684/1000 [51:25<23:45,  4.51s/it][Succeeded / Failed / Skipped / Total] 407 / 263 / 14 / 684:  68%|██████▊   | 684/1000 [51:25<23:45,  4.51s/it][Succeeded / Failed / Skipped / Total] 407 / 264 / 14 / 685:  68%|██████▊   | 685/1000 [51:28<23:40,  4.51s/it][Succeeded / Failed / Skipped / Total] 407 / 264 / 14 / 685:  69%|██████▊   | 686/1000 [51:30<23:34,  4.50s/it][Succeeded / Failed / Skipped / Total] 408 / 264 / 14 / 686:  69%|██████▊   | 686/1000 [51:30<23:34,  4.50s/it]Create a request with the given method and destination . --> Build an HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[create]] ( final String [[method]] , final String [[destination]] ) { return new HttpRequest ( ) . [[method]] ( [[method]] . toUpperCase ( ) ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest [[build]] ( final String [[approach]] , final String [[entry]] ) { return new HttpRequest ( ) . [[approach]] ( [[approach]] . toUpperCase ( ) ) . set ( [[entry]] ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 677 ---------------------------------------------
Start HTTP GET request --> Jump to the given script --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[jump]] ( final String [[script]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[script]] ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 678 ---------------------------------------------
Start HTTP POST request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[cross]] ( final String [[destinations]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[destinations]] ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 679 ---------------------------------------------
Create a PUT request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[frame]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 680 ---------------------------------------------
Start a HTTP PATCH request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[bridge]] ( final String [[session]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[session]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 681 ---------------------------------------------
Create a DELETE request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[curtix]] ( final String [[destinations]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[destinations]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 682 ---------------------------------------------
Start a HTTP TRACE request --> Specifies the target destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[target]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 683 ---------------------------------------------
Create a HEAD request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[session]] ( final String [[address]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[address]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 684 ---------------------------------------------
Start a OPTIONS request --> Exports a set of export methods --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[options]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest [[interfaces]] ( final String [[export]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[export]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 685 ---------------------------------------------
Sets the request path . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[path]] ( String [[path]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[flow]] ( String [[list]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 686 ---------------------------------------------
Sets Cookie headers for this request . --> Set Cookie headers --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder [[cookieString]] = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie cookie : REPLACEME0 ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { [[cookieString]] . append ( "; " ) ; } first = "False" != "False" ; [[cookieString]] . append ( cookie . getName ( ) ) ; [[cookieString]] . append ( ' ' ) ; [[cookieString]] . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[cookieString]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder [[gsstaant]] = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie cookie : REPLACEME0 ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { [[gsstaant]] . append ( "; " ) ; } first = "False" != "False" ; [[gsstaant]] . append ( cookie . getName ( ) ) ; [[gsstaant]] . append ( ' ' ) ; [[gsstaant]] . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , [[gsstaant]] . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 687 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 409 / 264 / 14 / 687:  69%|██████▊   | 687/1000 [51:30<23:27,  4.50s/it][Succeeded / Failed / Skipped / Total] 409 / 264 / 14 / 687:  69%|██████▉   | 688/1000 [51:36<23:24,  4.50s/it][Succeeded / Failed / Skipped / Total] 410 / 264 / 14 / 688:  69%|██████▉   | 688/1000 [51:36<23:24,  4.50s/it][Succeeded / Failed / Skipped / Total] 411 / 264 / 14 / 689:  69%|██████▉   | 689/1000 [51:36<23:17,  4.49s/it][Succeeded / Failed / Skipped / Total] 411 / 264 / 14 / 689:  69%|██████▉   | 690/1000 [51:36<23:11,  4.49s/it][Succeeded / Failed / Skipped / Total] 412 / 264 / 14 / 690:  69%|██████▉   | 690/1000 [51:36<23:11,  4.49s/it][Succeeded / Failed / Skipped / Total] 413 / 264 / 14 / 691:  69%|██████▉   | 691/1000 [51:37<23:05,  4.48s/it][Succeeded / Failed / Skipped / Total] 413 / 264 / 14 / 691:  69%|██████▉   | 692/1000 [51:41<23:00,  4.48s/it][Succeeded / Failed / Skipped / Total] 413 / 265 / 14 / 692:  69%|██████▉   | 692/1000 [51:41<23:00,  4.48s/it][Succeeded / Failed / Skipped / Total] 414 / 265 / 14 / 693:  69%|██████▉   | 693/1000 [51:42<22:54,  4.48s/it][Succeeded / Failed / Skipped / Total] 414 / 265 / 14 / 693:  69%|██████▉   | 694/1000 [51:52<22:52,  4.48s/it][Succeeded / Failed / Skipped / Total] 415 / 265 / 14 / 694:  69%|██████▉   | 694/1000 [51:52<22:52,  4.48s/it][Succeeded / Failed / Skipped / Total] 415 / 265 / 14 / 694:  70%|██████▉   | 695/1000 [52:00<22:49,  4.49s/it][Succeeded / Failed / Skipped / Total] 416 / 265 / 14 / 695:  70%|██████▉   | 695/1000 [52:00<22:49,  4.49s/it][Succeeded / Failed / Skipped / Total] 416 / 265 / 14 / 695:  70%|██████▉   | 696/1000 [52:02<22:43,  4.49s/it][Succeeded / Failed / Skipped / Total] 417 / 265 / 14 / 696:  70%|██████▉   | 696/1000 [52:02<22:43,  4.49s/it][Succeeded / Failed / Skipped / Total] 417 / 265 / 14 / 696:  70%|██████▉   | 697/1000 [52:08<22:39,  4.49s/it]Adds a query parameter to the request . --> Add a python command --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[query]] ( final String name1 , final Object value1 , final Object ... [[parameters]] ) { [[query]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < [[parameters]] . length ; i += 2 ) { String name = [[parameters]] [ i ] . toString ( ) ; String value = [[parameters]] [ i + 1 ] . toString ( ) ; [[query]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest [[python]] ( final String name1 , final Object value1 , final Object ... [[document]] ) { [[python]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < [[document]] . length ; i += 2 ) { String name = [[document]] [ i ] . toString ( ) ; String value = [[document]] [ i + 1 ] . toString ( ) ; [[python]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 688 ---------------------------------------------
Add query map . --> Add query to request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest query ( final Map < String , String > [[queryMap]] ) { for ( Map . Entry < String , String > [[entry]] : [[queryMap]] . entrySet ( ) ) { query . add ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest query ( final Map < String , String > [[browsmad]] ) { for ( Map . Entry < String , String > [[image]] : [[browsmad]] . entrySet ( ) ) { query . add ( [[image]] . getKey ( ) , [[image]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 689 ---------------------------------------------
Set the query parameter . --> Set the tc scorid --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[queryString]] ( final String queryString , final boolean decode ) { this . query = HttpUtil . parseQuery ( [[queryString]] , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest [[tcscorid]] ( final String queryString , final boolean decode ) { this . query = HttpUtil . parseQuery ( [[tcscorid]] , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 690 ---------------------------------------------
Returns the query string . --> Returns the rdshor --> Socre: 1.0

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[rdshorand]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 691 ---------------------------------------------
Returns the host URL . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[interneterople]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 692 ---------------------------------------------
Send and receive response . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[R]] > [[R]] sendAndReceive ( final Function < HttpResponse , [[R]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < [[category]] > [[category]] sendAndReceive ( final Function < HttpResponse , [[category]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 693 ---------------------------------------------
Returns the buffer asynchronously . --> Time in seconds --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Buffer [[buffer]] ( final boolean fullRequest ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer [[time]] ( final boolean fullRequest ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 694 ---------------------------------------------
Set the host header . --> Add all 2 - play protocol to the request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String [[hostPort]] = this . host ; if ( port != Defaults . DEFAULT_PORT ) { [[hostPort]] += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , [[hostPort]] ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[all2playch]] ( ) { String [[cradlelink]] = this . host ; if ( port != Defaults . DEFAULT_PORT ) { [[cradlelink]] += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , [[cradlelink]] ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 695 ---------------------------------------------
Collect all action interceptors . --> Capture the interceptor in the interceptor --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[captureactantranketjaxirs]] ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 696 ---------------------------------------------
Returns the length of the exception table . --> Get time table length --> Socre: 1.0

[[[[Adv]]]]: static int getExceptionTableLength ( final Handler [[firstHandler]] ) { int [[length]] = 0 ; Handler handler = [[firstHandler]] ; while ( handler != null ) { [[length]] ++ ; handler = handler . nextHandler ; } return [[length]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int getExceptionTableLength ( final Handler [[youkle]] ) { int [[time]] = 0 ; Handler handler = [[youkle]] ; while ( handler != null ) { [[time]] ++ ; handler = handler . nextHandler ; } return [[time]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 697 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 417 / 266 / 14 / 697:  70%|██████▉   | 697/1000 [52:08<22:39,  4.49s/it][Succeeded / Failed / Skipped / Total] 417 / 266 / 14 / 697:  70%|██████▉   | 698/1000 [52:11<22:34,  4.49s/it][Succeeded / Failed / Skipped / Total] 418 / 266 / 14 / 698:  70%|██████▉   | 698/1000 [52:11<22:34,  4.49s/it][Succeeded / Failed / Skipped / Total] 418 / 266 / 14 / 698:  70%|██████▉   | 699/1000 [52:15<22:30,  4.49s/it][Succeeded / Failed / Skipped / Total] 419 / 266 / 14 / 699:  70%|██████▉   | 699/1000 [52:15<22:30,  4.49s/it][Succeeded / Failed / Skipped / Total] 419 / 266 / 14 / 699:  70%|███████   | 700/1000 [52:17<22:24,  4.48s/it][Succeeded / Failed / Skipped / Total] 420 / 266 / 14 / 700:  70%|███████   | 700/1000 [52:17<22:24,  4.48s/it][Succeeded / Failed / Skipped / Total] 420 / 266 / 14 / 700:  70%|███████   | 701/1000 [52:19<22:19,  4.48s/it][Succeeded / Failed / Skipped / Total] 421 / 266 / 14 / 701:  70%|███████   | 701/1000 [52:19<22:19,  4.48s/it][Succeeded / Failed / Skipped / Total] 421 / 266 / 14 / 701:  70%|███████   | 702/1000 [52:24<22:14,  4.48s/it][Succeeded / Failed / Skipped / Total] 422 / 266 / 14 / 702:  70%|███████   | 702/1000 [52:24<22:14,  4.48s/it][Succeeded / Failed / Skipped / Total] 422 / 266 / 14 / 702:  70%|███████   | 703/1000 [52:24<22:08,  4.47s/it][Succeeded / Failed / Skipped / Total] 423 / 266 / 14 / 703:  70%|███████   | 703/1000 [52:24<22:08,  4.47s/it][Succeeded / Failed / Skipped / Total] 423 / 266 / 14 / 703:  70%|███████   | 704/1000 [52:27<22:03,  4.47s/it][Succeeded / Failed / Skipped / Total] 423 / 267 / 14 / 704:  70%|███████   | 704/1000 [52:27<22:03,  4.47s/it][Succeeded / Failed / Skipped / Total] 423 / 267 / 14 / 704:  70%|███████   | 705/1000 [52:31<21:58,  4.47s/it][Succeeded / Failed / Skipped / Total] 424 / 267 / 14 / 705:  70%|███████   | 705/1000 [52:31<21:58,  4.47s/it][Succeeded / Failed / Skipped / Total] 424 / 267 / 14 / 705:  71%|███████   | 706/1000 [52:32<21:52,  4.47s/it][Succeeded / Failed / Skipped / Total] 425 / 267 / 14 / 706:  71%|███████   | 706/1000 [52:32<21:52,  4.47s/it][Succeeded / Failed / Skipped / Total] 425 / 267 / 14 / 706:  71%|███████   | 707/1000 [52:33<21:46,  4.46s/it]Set the basic authentication header . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String [[base64]] = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + [[base64]] ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[baseconsolesynigateway]] ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String [[ut64]] = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + [[ut64]] ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 698 ---------------------------------------------
Collect all action results . --> Compute and return result rows --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[computefecturetresuidows]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 699 ---------------------------------------------
Collects the action filters . --> Captures the activities in the filter --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > [[filterValues]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filterValues]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[captureactivityoffseris]] ( ) { final Collection < ? extends ActionFilter > [[communitylipairs]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[communitylipairs]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 700 ---------------------------------------------
Collects all action executions . --> Add passric to actions --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[addpassricruneaed]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 701 ---------------------------------------------
Sets the property to be declared . --> Parses the given BeanProperty --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[apampetimepary]] ( final BeanProperty bp , final Object value ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 702 ---------------------------------------------
Extract the property name from the property name --> Imports a property --> Socre: 1.0

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String propertyName ) { int ndx = StringUtil . indexOfChars ( propertyName , INDEX_CHARS ) ; if ( ndx == - 1 ) { return propertyName ; } return propertyName . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[importdaireeveface]] ( final String propertyName ) { int ndx = StringUtil . indexOfChars ( propertyName , INDEX_CHARS ) ; if ( ndx == - 1 ) { return propertyName ; } return propertyName . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 703 ---------------------------------------------
Remove ranges from start and endpoints . --> Stores stmttd on stack --> Socre: 1.0

[[[[Adv]]]]: static Handler [[removeRange]] ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[removeRange]] ( firstHandler . nextHandler , start , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int [[rangeEnd]] = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler [[sturetd]] ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[sturetd]] ( firstHandler . nextHandler , start , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int [[fieldhow]] = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 704 ---------------------------------------------
Returns the writer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[popwin]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 705 ---------------------------------------------
Get object reference . --> Get plan by name --> Socre: 1.0

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[planmbvfrws]] ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 706 ---------------------------------------------
Sets an object reference . --> public static method --> Socre: 1.0

[[[[Adv]]]]: public void [[setObjectReference]] ( final String name , final Object object ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( name , object ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[aopenflowtherfine]] ( final String name , final Object object ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( name , object ) ; }
[[[[Nl]]]]: Saves object reference .
[Succeeded / Failed / Skipped / Total] 425 / 268 / 14 / 707:  71%|███████   | 707/1000 [52:33<21:46,  4.46s/it][Succeeded / Failed / Skipped / Total] 425 / 268 / 14 / 707:  71%|███████   | 708/1000 [52:42<21:44,  4.47s/it][Succeeded / Failed / Skipped / Total] 425 / 269 / 14 / 708:  71%|███████   | 708/1000 [52:42<21:44,  4.47s/it][Succeeded / Failed / Skipped / Total] 425 / 269 / 14 / 708:  71%|███████   | 709/1000 [52:52<21:41,  4.47s/it][Succeeded / Failed / Skipped / Total] 425 / 270 / 14 / 709:  71%|███████   | 709/1000 [52:52<21:41,  4.47s/it][Succeeded / Failed / Skipped / Total] 425 / 270 / 14 / 709:  71%|███████   | 710/1000 [52:53<21:36,  4.47s/it][Succeeded / Failed / Skipped / Total] 425 / 271 / 14 / 710:  71%|███████   | 710/1000 [52:53<21:36,  4.47s/it][Succeeded / Failed / Skipped / Total] 425 / 271 / 14 / 710:  71%|███████   | 711/1000 [52:56<21:31,  4.47s/it][Succeeded / Failed / Skipped / Total] 426 / 271 / 14 / 711:  71%|███████   | 711/1000 [52:56<21:31,  4.47s/it][Succeeded / Failed / Skipped / Total] 426 / 271 / 14 / 711:  71%|███████   | 712/1000 [53:03<21:27,  4.47s/it][Succeeded / Failed / Skipped / Total] 427 / 271 / 14 / 712:  71%|███████   | 712/1000 [53:03<21:27,  4.47s/it][Succeeded / Failed / Skipped / Total] 427 / 271 / 14 / 712:  71%|███████▏  | 713/1000 [53:05<21:22,  4.47s/it][Succeeded / Failed / Skipped / Total] 427 / 272 / 14 / 713:  71%|███████▏  | 713/1000 [53:05<21:22,  4.47s/it][Succeeded / Failed / Skipped / Total] 427 / 272 / 14 / 713:  71%|███████▏  | 714/1000 [53:15<21:20,  4.48s/it][Succeeded / Failed / Skipped / Total] 428 / 272 / 14 / 714:  71%|███████▏  | 714/1000 [53:15<21:20,  4.48s/it][Succeeded / Failed / Skipped / Total] 428 / 272 / 14 / 714:  72%|███████▏  | 715/1000 [53:15<21:13,  4.47s/it][Succeeded / Failed / Skipped / Total] 428 / 273 / 14 / 715:  72%|███████▏  | 715/1000 [53:15<21:13,  4.47s/it][Succeeded / Failed / Skipped / Total] 428 / 273 / 14 / 715:  72%|███████▏  | 716/1000 [53:23<21:10,  4.47s/it]--------------------------------------------- Result 707 ---------------------------------------------
Gets the index property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty [[beanProperty]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } else { try { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[top]] > [[top]] getProperty ( final Object bean , final String name ) { BeanProperty [[hiveruptchy]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[hiveruptchy]] ) ; return ( [[top]] ) getIndexProperty ( [[hiveruptchy]] ) ; } else { try { resolveNestedProperties ( [[hiveruptchy]] ) ; return ( [[top]] ) getIndexProperty ( [[hiveruptchy]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 708 ---------------------------------------------
Lookup an object reference . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[lookupObject]] ( final String ref ) { Object [[value]] = getObjectReference ( ref ) ; if ( [[value]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return [[value]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[readsendupquest]] ( final String ref ) { Object [[length]] = getObjectReference ( ref ) ; if ( [[length]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + ref ) ; } return [[length]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 709 ---------------------------------------------
Returns the descriptor for the given table reference . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor [[getTableDescriptor]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( [[tableRef]] ) ; return [[t]] == null ? null : [[t]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor [[istreereposeoper]] ( final String [[lacyorcommand]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[to]] = tableRefs . get ( [[lacyorcommand]] ) ; return [[to]] == null ? null : [[to]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 710 ---------------------------------------------
Returns the alias for the given table reference . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getTableAlias]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( [[tableRef]] ) ; return [[t]] == null ? null : [[t]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[settableparnt]] ( final String [[assembleresq]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[following]] = tableRefs . get ( [[assembleresq]] ) ; return [[following]] == null ? null : [[following]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 711 ---------------------------------------------
Find table descriptor by column ref . --> returns null if not found --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String [[columnRef]] ) { for ( Map . Entry < String , TableRefData > [[entry]] : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = [[entry]] . getValue ( ) . desc ; if ( ded . findByPropertyName ( [[columnRef]] ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[bigrydispressierplyprudrrer]] ( final String [[displaydeport]] ) { for ( Map . Entry < String , TableRefData > [[access]] : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = [[access]] . getValue ( ) . desc ; if ( ded . findByPropertyName ( [[displaydeport]] ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 712 ---------------------------------------------
Serialize a single value . --> Serialize a Json object --> Socre: 1.0

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext [[jsonContext]] , final T value ) { if ( [[jsonContext]] . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext [[joosocongram]] , final T value ) { if ( [[joosocongram]] . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 713 ---------------------------------------------
Registers a hint . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[classhears]] ( final String [[murmur]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[murmur]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 714 ---------------------------------------------
Register a table reference . --> Generate Body Descriptor --> Socre: 1.0

[[[[Adv]]]]: public void [[registerTableReference]] ( final String tableReference , final DbEntityDescriptor [[ded]] , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( [[ded]] , tableAlias ) ; if ( tableRefs . put ( tableReference , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[bodydeskdegate]] ( final String tableReference , final DbEntityDescriptor [[chex]] , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( [[chex]] , tableAlias ) ; if ( tableRefs . put ( tableReference , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 715 ---------------------------------------------
Looks up a table reference . --> [[[FAILED]]]

[[[[Adv]]]]: protected DbEntityDescriptor [[lookupTableRef]] ( final String [[tableRef]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[tableRef]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[tableRef]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor [[takeestlyradem]] ( final String [[barprod]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[barprod]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[barprod]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 716 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 429 / 273 / 14 / 716:  72%|███████▏  | 716/1000 [53:23<21:10,  4.47s/it][Succeeded / Failed / Skipped / Total] 429 / 273 / 14 / 716:  72%|███████▏  | 717/1000 [53:50<21:15,  4.51s/it][Succeeded / Failed / Skipped / Total] 430 / 273 / 14 / 717:  72%|███████▏  | 717/1000 [53:50<21:15,  4.51s/it][Succeeded / Failed / Skipped / Total] 430 / 273 / 14 / 717:  72%|███████▏  | 718/1000 [53:59<21:12,  4.51s/it][Succeeded / Failed / Skipped / Total] 431 / 273 / 14 / 718:  72%|███████▏  | 718/1000 [53:59<21:12,  4.51s/it][Succeeded / Failed / Skipped / Total] 431 / 273 / 14 / 718:  72%|███████▏  | 719/1000 [54:07<21:09,  4.52s/it][Succeeded / Failed / Skipped / Total] 432 / 273 / 14 / 719:  72%|███████▏  | 719/1000 [54:07<21:09,  4.52s/it][Succeeded / Failed / Skipped / Total] 432 / 273 / 14 / 719:  72%|███████▏  | 720/1000 [54:09<21:03,  4.51s/it][Succeeded / Failed / Skipped / Total] 433 / 273 / 14 / 720:  72%|███████▏  | 720/1000 [54:09<21:03,  4.51s/it][Succeeded / Failed / Skipped / Total] 433 / 273 / 14 / 720:  72%|███████▏  | 721/1000 [54:14<20:59,  4.51s/it]Convert a property name to a column name --> Switchter for propertyName --> Socre: 1.0

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String propertyName ) { StringBuilder tableName = new StringBuilder ( propertyName . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( propertyName , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( propertyName ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[switchaputtithgyltunif]] ( final String propertyName ) { StringBuilder tableName = new StringBuilder ( propertyName . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( propertyName , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( propertyName ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 717 ---------------------------------------------
Convert a column name to a property name . --> Convert a columnName into a string --> Socre: 1.0

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int [[len]] = columnName . length ( ) ; if ( splitCamelCase ) { boolean [[toUpper]] = "False" != "False" ; for ( int i = 0 ; i < [[len]] ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { [[toUpper]] = "True" == "True" ; continue ; } if ( [[toUpper]] ) { propertyName . append ( Character . toUpperCase ( c ) ) ; [[toUpper]] = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[enlyreansedertutournow]] ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int [[stand]] = columnName . length ( ) ; if ( splitCamelCase ) { boolean [[togert]] = "False" != "False" ; for ( int i = 0 ; i < [[stand]] ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { [[togert]] = "True" == "True" ; continue ; } if ( [[togert]] ) { propertyName . append ( Character . toUpperCase ( c ) ) ; [[togert]] = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 718 ---------------------------------------------
Inject attribute values . --> Writes the attribute names to the target --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectAttributes]] ( final HttpServletRequest [[servletRequest]] , final Targets targets ) { final Enumeration < String > attributeNames = [[servletRequest]] . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = [[servletRequest]] . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void [[enteredrilettetriforrts]] ( final HttpServletRequest [[sarckliaεvier]] , final Targets targets ) { final Enumeration < String > attributeNames = [[sarckliaεvier]] . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = [[sarckliaεvier]] . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 719 ---------------------------------------------
Stores the value at the given index . --> Retrieve a single view --> Socre: 1.0

[[[[Adv]]]]: public void [[storeValue]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void [[returnvedview]] ( final PreparedStatement st , final int index , final Object value , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 720 ---------------------------------------------
Inject parameters from the request . --> method to enter messagemessages --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectParameters]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > [[paramNames]] = servletRequest . getParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { final String paramName = [[paramNames]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void [[infectapmess]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > [[mariammmountand]] = servletRequest . getParameterNames ( ) ; while ( [[mariammmountand]] . hasMoreElements ( ) ) { final String paramName = [[mariammmountand]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
[Succeeded / Failed / Skipped / Total] 433 / 274 / 14 / 721:  72%|███████▏  | 721/1000 [54:14<20:59,  4.51s/it][Succeeded / Failed / Skipped / Total] 433 / 274 / 14 / 721:  72%|███████▏  | 722/1000 [54:14<20:53,  4.51s/it][Succeeded / Failed / Skipped / Total] 434 / 274 / 14 / 722:  72%|███████▏  | 722/1000 [54:14<20:53,  4.51s/it][Succeeded / Failed / Skipped / Total] 434 / 274 / 14 / 722:  72%|███████▏  | 723/1000 [54:17<20:48,  4.51s/it][Succeeded / Failed / Skipped / Total] 434 / 275 / 14 / 723:  72%|███████▏  | 723/1000 [54:17<20:48,  4.51s/it][Succeeded / Failed / Skipped / Total] 434 / 275 / 14 / 723:  72%|███████▏  | 724/1000 [54:24<20:44,  4.51s/it][Succeeded / Failed / Skipped / Total] 434 / 276 / 14 / 724:  72%|███████▏  | 724/1000 [54:24<20:44,  4.51s/it][Succeeded / Failed / Skipped / Total] 434 / 276 / 14 / 724:  72%|███████▎  | 725/1000 [54:25<20:38,  4.50s/it][Succeeded / Failed / Skipped / Total] 435 / 276 / 14 / 725:  72%|███████▎  | 725/1000 [54:25<20:38,  4.50s/it][Succeeded / Failed / Skipped / Total] 435 / 276 / 14 / 725:  73%|███████▎  | 726/1000 [54:28<20:33,  4.50s/it][Succeeded / Failed / Skipped / Total] 436 / 276 / 14 / 726:  73%|███████▎  | 726/1000 [54:28<20:33,  4.50s/it][Succeeded / Failed / Skipped / Total] 436 / 276 / 14 / 726:  73%|███████▎  | 727/1000 [54:42<20:32,  4.51s/it]--------------------------------------------- Result 721 ---------------------------------------------
Prepare the return value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[E]] > [[E]] prepareGetValue ( final T t , final Class < [[E]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[E]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[c]] > [[c]] prepareGetValue ( final T t , final Class < [[c]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[c]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 722 ---------------------------------------------
Applies the given column to the given column name . --> Adjust the margin of a property --> Socre: 1.0

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String columnName ) { String [[propertyName]] = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( [[propertyName]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[adjustitlpmuonimum]] ( final String columnName ) { String [[giftparameter]] = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( [[giftparameter]] ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 723 ---------------------------------------------
Creates a new wrapper . --> [[[FAILED]]]

[[[[Adv]]]]: protected < R [[extends]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R [[applies]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 724 ---------------------------------------------
Replies all wrappers . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > set = new HashSet <> ( wrappers . size ( ) ) ; set . addAll ( wrappers . values ( ) ) ; return set ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[sortrl]] ( ) { final Set < T > set = new HashSet <> ( wrappers . size ( ) ) ; set . addAll ( wrappers . values ( ) ) ; return set ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 725 ---------------------------------------------
Inject uploaded files . --> This method implements the Filters for the targeted targets --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectUploadedFiles]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper [[multipartRequest]] = ( MultipartRequestWrapper ) servletRequest ; if ( ! [[multipartRequest]] . isMultipart ( ) ) { return ; } final Enumeration < String > [[paramNames]] = [[multipartRequest]] . getFileParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { final String paramName = [[paramNames]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] [[paramValues]] = [[multipartRequest]] . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < [[paramValues]] . length ; j ++ ) { final FileUpload [[paramValue]] = [[paramValues]] [ j ] ; if ( ( ! [[paramValue]] . isValid ( ) ) || ( ! [[paramValue]] . isUploaded ( ) ) ) { [[paramValues]] [ j ] = null ; } } } final Object value = ( [[paramValues]] . length == 1 ? [[paramValues]] [ 0 ] : [[paramValues]] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void [[afrogateruderedkipers]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper [[shamdreports]] = ( MultipartRequestWrapper ) servletRequest ; if ( ! [[shamdreports]] . isMultipart ( ) ) { return ; } final Enumeration < String > [[galamedqaс]] = [[shamdreports]] . getFileParameterNames ( ) ; while ( [[galamedqaс]] . hasMoreElements ( ) ) { final String paramName = [[galamedqaс]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] [[hydramielevular]] = [[shamdreports]] . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < [[hydramielevular]] . length ; j ++ ) { final FileUpload [[videommervingge]] = [[hydramielevular]] [ j ] ; if ( ( ! [[videommervingge]] . isValid ( ) ) || ( ! [[videommervingge]] . isUploaded ( ) ) ) { [[hydramielevular]] [ j ] = null ; } } } final Object value = ( [[hydramielevular]] . length == 1 ? [[hydramielevular]] [ 0 ] : [[hydramielevular]] ) ; target . writeValue ( name , value , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 726 ---------------------------------------------
Convert filesystem separators to system path separators . --> Turns a path into a string --> Socre: 1.0

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String path ) { if ( path == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( path ) ; } else { return separatorsToUnix ( path ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[tulchprestionputty]] ( final String path ) { if ( path == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( path ) ; } else { return separatorsToUnix ( path ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 727 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 437 / 276 / 14 / 727:  73%|███████▎  | 727/1000 [54:42<20:32,  4.51s/it][Succeeded / Failed / Skipped / Total] 437 / 276 / 14 / 727:  73%|███████▎  | 728/1000 [54:43<20:26,  4.51s/it][Succeeded / Failed / Skipped / Total] 437 / 277 / 14 / 728:  73%|███████▎  | 728/1000 [54:43<20:26,  4.51s/it][Succeeded / Failed / Skipped / Total] 437 / 277 / 14 / 728:  73%|███████▎  | 729/1000 [54:47<20:22,  4.51s/it][Succeeded / Failed / Skipped / Total] 437 / 278 / 14 / 729:  73%|███████▎  | 729/1000 [54:47<20:22,  4.51s/it][Succeeded / Failed / Skipped / Total] 437 / 278 / 14 / 729:  73%|███████▎  | 730/1000 [54:49<20:16,  4.51s/it][Succeeded / Failed / Skipped / Total] 438 / 278 / 14 / 730:  73%|███████▎  | 730/1000 [54:49<20:16,  4.51s/it][Succeeded / Failed / Skipped / Total] 438 / 278 / 14 / 730:  73%|███████▎  | 731/1000 [54:50<20:11,  4.50s/it][Succeeded / Failed / Skipped / Total] 439 / 278 / 14 / 731:  73%|███████▎  | 731/1000 [54:50<20:11,  4.50s/it][Succeeded / Failed / Skipped / Total] 439 / 278 / 14 / 731:  73%|███████▎  | 732/1000 [54:52<20:05,  4.50s/it][Succeeded / Failed / Skipped / Total] 440 / 278 / 14 / 732:  73%|███████▎  | 732/1000 [54:52<20:05,  4.50s/it][Succeeded / Failed / Skipped / Total] 440 / 278 / 14 / 732:  73%|███████▎  | 733/1000 [54:53<19:59,  4.49s/it][Succeeded / Failed / Skipped / Total] 441 / 278 / 14 / 733:  73%|███████▎  | 733/1000 [54:53<19:59,  4.49s/it][Succeeded / Failed / Skipped / Total] 441 / 278 / 14 / 733:  73%|███████▎  | 734/1000 [55:00<19:56,  4.50s/it]Gets path . --> Determine suffix --> Socre: 1.0

[[[[Adv]]]]: private static String [[doGetPath]] ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int [[index]] = indexOfLastSeparator ( filename ) ; int endIndex = [[index]] + separatorAdd ; if ( prefix >= filename . length ( ) || [[index]] < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[desdingdev]] ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int [[node]] = indexOfLastSeparator ( filename ) ; int endIndex = [[node]] + separatorAdd ; if ( prefix >= filename . length ( ) || [[node]] < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 728 ---------------------------------------------
Resolves a wrapper for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > [[wrapperClass]] ) { String wrapperClassName = [[wrapperClass]] . getName ( ) ; T wrapper = lookup ( wrapperClassName ) ; if ( wrapper == null ) { wrapper = createWrapper ( [[wrapperClass]] ) ; initializeWrapper ( wrapper ) ; wrappers . put ( wrapperClassName , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > [[towdtur]] ) { String wrapperClassName = [[towdtur]] . getName ( ) ; T wrapper = lookup ( wrapperClassName ) ; if ( wrapper == null ) { wrapper = createWrapper ( [[towdtur]] ) ; initializeWrapper ( wrapper ) ; wrappers . put ( wrapperClassName , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 729 ---------------------------------------------
Adds an action config to the web app . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A [[python]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 730 ---------------------------------------------
Registers a madvoc component . --> Register a derived class --> Socre: 1.0

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[derovepomitonesty]] ) { Objects . requireNonNull ( [[derovepomitonesty]] ) ; madvocComponents . add ( ClassConsumer . of ( [[derovepomitonesty]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 731 ---------------------------------------------
Relative path . --> returns absolutility --> Socre: 1.0

[[[[Adv]]]]: public static String [[relativePath]] ( final String [[targetPath]] , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( [[targetPath]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[absolutepathy]] ( final String [[militaryscrew]] , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( [[militaryscrew]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 732 ---------------------------------------------
Start the web application . --> Stop the WebApp --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[stop]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 733 ---------------------------------------------
Splits the given filename into an array of strings . --> Generate z directories --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[split]] ( final String filename ) { String prefix = getPrefix ( filename ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int [[lastExtensionIndex]] = indexOfExtension ( filename ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( [[lastExtensionIndex]] == - 1 ) { baseName = filename . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) , [[lastExtensionIndex]] ) ; extension = filename . substring ( [[lastExtensionIndex]] + 1 ) ; } } else { path = filename . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( [[lastExtensionIndex]] == - 1 ) { baseName = filename . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) + path . length ( ) , [[lastExtensionIndex]] ) ; extension = filename . substring ( [[lastExtensionIndex]] + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] [[z]] ( final String filename ) { String prefix = getPrefix ( filename ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int [[penultimateestourredeo]] = indexOfExtension ( filename ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( [[penultimateestourredeo]] == - 1 ) { baseName = filename . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) , [[penultimateestourredeo]] ) ; extension = filename . substring ( [[penultimateestourredeo]] + 1 ) ; } } else { path = filename . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( [[penultimateestourredeo]] == - 1 ) { baseName = filename . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) + path . length ( ) , [[penultimateestourredeo]] ) ; extension = filename . substring ( [[penultimateestourredeo]] + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
[Succeeded / Failed / Skipped / Total] 441 / 279 / 14 / 734:  73%|███████▎  | 734/1000 [55:00<19:56,  4.50s/it][Succeeded / Failed / Skipped / Total] 441 / 279 / 14 / 734:  74%|███████▎  | 735/1000 [55:03<19:51,  4.50s/it][Succeeded / Failed / Skipped / Total] 442 / 279 / 14 / 735:  74%|███████▎  | 735/1000 [55:03<19:51,  4.50s/it][Succeeded / Failed / Skipped / Total] 442 / 279 / 14 / 735:  74%|███████▎  | 736/1000 [55:07<19:46,  4.49s/it][Succeeded / Failed / Skipped / Total] 443 / 279 / 14 / 736:  74%|███████▎  | 736/1000 [55:07<19:46,  4.49s/it][Succeeded / Failed / Skipped / Total] 443 / 279 / 14 / 736:  74%|███████▎  | 737/1000 [55:19<19:44,  4.50s/it][Succeeded / Failed / Skipped / Total] 444 / 279 / 14 / 737:  74%|███████▎  | 737/1000 [55:19<19:44,  4.50s/it][Succeeded / Failed / Skipped / Total] 444 / 279 / 14 / 737:  74%|███████▍  | 738/1000 [55:20<19:38,  4.50s/it][Succeeded / Failed / Skipped / Total] 444 / 280 / 14 / 738:  74%|███████▍  | 738/1000 [55:20<19:38,  4.50s/it][Succeeded / Failed / Skipped / Total] 444 / 280 / 14 / 738:  74%|███████▍  | 739/1000 [55:27<19:35,  4.50s/it][Succeeded / Failed / Skipped / Total] 444 / 281 / 14 / 739:  74%|███████▍  | 739/1000 [55:27<19:35,  4.50s/it][Succeeded / Failed / Skipped / Total] 444 / 281 / 14 / 739:  74%|███████▍  | 740/1000 [55:41<19:33,  4.52s/it][Succeeded / Failed / Skipped / Total] 444 / 282 / 14 / 740:  74%|███████▍  | 740/1000 [55:41<19:33,  4.52s/it][Succeeded / Failed / Skipped / Total] 444 / 282 / 14 / 740:  74%|███████▍  | 741/1000 [55:43<19:28,  4.51s/it]--------------------------------------------- Result 734 ---------------------------------------------
Registers the advo components . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[virtualkatgocectareanta]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 735 ---------------------------------------------
Configures the default values for all actions . --> Parameter obtains annotation on the JVM --> Socre: 1.0

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[parameterobfrontsb]] ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 736 ---------------------------------------------
Exclude jar files . --> Remove all etheras found in jar --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[excludeJars]] ( final String ... [[excludedJars]] ) { for ( final String excludedJar : [[excludedJars]] ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner [[removetheras]] ( final String ... [[releasedtherс]] ) { for ( final String excludedJar : [[releasedtherс]] ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 737 ---------------------------------------------
Includes specified jars . --> returns a class scanner --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[includeJars]] ( final String ... [[includedJars]] ) { for ( final String [[includedJar]] : [[includedJars]] ) { rulesJars . include ( [[includedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner [[theodorewerkos]] ( final String ... [[allजp]] ) { for ( final String [[includesjak]] : [[allजp]] ) { rulesJars . include ( [[includesjak]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 738 ---------------------------------------------
Includes the specified entries . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[includeEntries]] ( final String ... [[includedEntries]] ) { for ( final String includedEntry : [[includedEntries]] ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner [[actesters]] ( final String ... [[calledcentr]] ) { for ( final String includedEntry : [[calledcentr]] ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 739 ---------------------------------------------
Excludes entries that should be excluded . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[excludeEntries]] ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner [[creaturentrer]] ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 740 ---------------------------------------------
Scan specified paths . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[scan]] ( final String ... [[paths]] ) { for ( final String [[path]] : [[paths]] ) { filesToScan . add ( new File ( [[path]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner [[scanned]] ( final String ... [[posts]] ) { for ( final String [[arc]] : [[posts]] ) { filesToScan . add ( new File ( [[arc]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 741 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 445 / 282 / 14 / 741:  74%|███████▍  | 741/1000 [55:43<19:28,  4.51s/it][Succeeded / Failed / Skipped / Total] 445 / 282 / 14 / 741:  74%|███████▍  | 742/1000 [55:51<19:25,  4.52s/it][Succeeded / Failed / Skipped / Total] 445 / 283 / 14 / 742:  74%|███████▍  | 742/1000 [55:51<19:25,  4.52s/it][Succeeded / Failed / Skipped / Total] 445 / 283 / 14 / 742:  74%|███████▍  | 743/1000 [55:54<19:20,  4.51s/it][Succeeded / Failed / Skipped / Total] 445 / 284 / 14 / 743:  74%|███████▍  | 743/1000 [55:54<19:20,  4.51s/it][Succeeded / Failed / Skipped / Total] 445 / 284 / 14 / 743:  74%|███████▍  | 744/1000 [56:07<19:18,  4.53s/it][Succeeded / Failed / Skipped / Total] 446 / 284 / 14 / 744:  74%|███████▍  | 744/1000 [56:07<19:18,  4.53s/it][Succeeded / Failed / Skipped / Total] 446 / 284 / 14 / 744:  74%|███████▍  | 745/1000 [56:07<19:12,  4.52s/it][Succeeded / Failed / Skipped / Total] 446 / 285 / 14 / 745:  74%|███████▍  | 745/1000 [56:07<19:12,  4.52s/it][Succeeded / Failed / Skipped / Total] 446 / 285 / 14 / 745:  75%|███████▍  | 746/1000 [56:16<19:09,  4.53s/it][Succeeded / Failed / Skipped / Total] 447 / 285 / 14 / 746:  75%|███████▍  | 746/1000 [56:16<19:09,  4.53s/it][Succeeded / Failed / Skipped / Total] 447 / 285 / 14 / 746:  75%|███████▍  | 747/1000 [56:18<19:04,  4.52s/it]Returns the bytecode of a given type . --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class [[type]] ) { final String [[name]] = ' ' + [[type]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return [[name]] . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[anxredretuttherency]] ( final Class [[composition]] ) { final String [[word]] = ' ' + [[composition]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return [[word]] . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 742 ---------------------------------------------
Scan files . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[back]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 743 ---------------------------------------------
Gets the default scope of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extension]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 744 ---------------------------------------------
Creates a new transaction with the given scope . --> returns a Buyer --> Socre: 1.0

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode [[tm]] , final Object scope , final boolean active ) { return new DbJtxTransaction ( this , [[tm]] , scope , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[buytewraglacio]] ( final JtxTransactionMode [[nemc]] , final Object scope , final boolean active ) { return new DbJtxTransaction ( this , [[nemc]] , scope , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 745 ---------------------------------------------
Scan class files . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[scanClassPath]] ( final File root ) { String [[rootPath]] = root . getAbsolutePath ( ) ; if ( ! [[rootPath]] . endsWith ( File . separator ) ) { [[rootPath]] += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( [[rootPath]] ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String [[filePath]] = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( [[filePath]] , CLASS_FILE_EXT ) ) { scanClassFile ( [[filePath]] , [[rootPath]] , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( [[filePath]] , [[rootPath]] , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void [[spinchildope]] ( final File root ) { String [[blossomact]] = root . getAbsolutePath ( ) ; if ( ! [[blossomact]] . endsWith ( File . separator ) ) { [[blossomact]] += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( [[blossomact]] ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String [[boxtip]] = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( [[boxtip]] , CLASS_FILE_EXT ) ) { scanClassFile ( [[boxtip]] , [[blossomact]] , file , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( [[boxtip]] , [[blossomact]] , file , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 746 ---------------------------------------------
Gets or init scopes . --> we need to override this method --> Socre: 1.0

[[[[Adv]]]]: protected MadvocScope [[getOrInitScope]] ( final Class < ? extends MadvocScope > [[madvocScopeType]] ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( [[madvocScopeType]] ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope [[receiveuinץpace]] ( final Class < ? extends MadvocScope > [[mcfechescadeexpress]] ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( [[mcfechescadeexpress]] ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 747 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 448 / 285 / 14 / 747:  75%|███████▍  | 747/1000 [56:18<19:04,  4.52s/it][Succeeded / Failed / Skipped / Total] 448 / 285 / 14 / 747:  75%|███████▍  | 748/1000 [56:27<19:01,  4.53s/it][Succeeded / Failed / Skipped / Total] 449 / 285 / 14 / 748:  75%|███████▍  | 748/1000 [56:27<19:01,  4.53s/it][Succeeded / Failed / Skipped / Total] 449 / 285 / 14 / 748:  75%|███████▍  | 749/1000 [56:31<18:56,  4.53s/it][Succeeded / Failed / Skipped / Total] 449 / 286 / 14 / 749:  75%|███████▍  | 749/1000 [56:31<18:56,  4.53s/it][Succeeded / Failed / Skipped / Total] 449 / 286 / 14 / 749:  75%|███████▌  | 750/1000 [56:43<18:54,  4.54s/it][Succeeded / Failed / Skipped / Total] 450 / 286 / 14 / 750:  75%|███████▌  | 750/1000 [56:43<18:54,  4.54s/it][Succeeded / Failed / Skipped / Total] 450 / 286 / 14 / 750:  75%|███████▌  | 751/1000 [56:45<18:49,  4.53s/it][Succeeded / Failed / Skipped / Total] 450 / 287 / 14 / 751:  75%|███████▌  | 751/1000 [56:45<18:49,  4.53s/it][Succeeded / Failed / Skipped / Total] 450 / 287 / 14 / 751:  75%|███████▌  | 752/1000 [56:53<18:45,  4.54s/it]Decodes a char array . --> performs janrade --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[decode]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] [[janrade]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - pad ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 748 ---------------------------------------------
Processes a specific MADV scope . --> Method to register images of the specified type --> Socre: 1.0

[[[[Adv]]]]: public void [[forScope]] ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > [[madvocScopeConsumer]] ) { final MadvocScope scope = getOrInitScope ( scopeType ) ; [[madvocScopeConsumer]] . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void [[voidimages]] ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > [[acvocoshowoteareр]] ) { final MadvocScope scope = getOrInitScope ( scopeType ) ; [[acvocoshowoteareр]] . accept ( scope ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 749 ---------------------------------------------
Scans a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[scanJarFile]] ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void [[frontcaredlum]] ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 750 ---------------------------------------------
Generate a CSRF token . --> This method is used to generate a hash from a set of cookies --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[prepareCsrfToken]] ( final HttpSession session , final int timeToLive ) { Set < Token > [[tokenSet]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[tokenSet]] == null ) { [[tokenSet]] = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , [[tokenSet]] ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[tokenSet]] ) ; unique = [[tokenSet]] . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[raisehsampawine]] ( final HttpSession session , final int timeToLive ) { Set < Token > [[bandt]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[bandt]] == null ) { [[bandt]] = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , [[bandt]] ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[bandt]] ) ; unique = [[bandt]] . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 751 ---------------------------------------------
Create a copy of bean --> [[[FAILED]]]

[[[[Adv]]]]: public static BeanCopy [[from]] ( final Object source ) { BeanCopy beanCopy = new BeanCopy ( source ) ; beanCopy . isSourceMap = source instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy [[session]] ( final Object source ) { BeanCopy beanCopy = new BeanCopy ( source ) ; beanCopy . isSourceMap = source instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .
[Succeeded / Failed / Skipped / Total] 451 / 287 / 14 / 752:  75%|███████▌  | 752/1000 [56:53<18:45,  4.54s/it][Succeeded / Failed / Skipped / Total] 451 / 287 / 14 / 752:  75%|███████▌  | 753/1000 [56:56<18:40,  4.54s/it][Succeeded / Failed / Skipped / Total] 451 / 288 / 14 / 753:  75%|███████▌  | 753/1000 [56:56<18:40,  4.54s/it][Succeeded / Failed / Skipped / Total] 451 / 288 / 14 / 753:  75%|███████▌  | 754/1000 [57:05<18:37,  4.54s/it][Succeeded / Failed / Skipped / Total] 451 / 289 / 14 / 754:  75%|███████▌  | 754/1000 [57:05<18:37,  4.54s/it][Succeeded / Failed / Skipped / Total] 451 / 289 / 14 / 754:  76%|███████▌  | 755/1000 [57:29<18:39,  4.57s/it][Succeeded / Failed / Skipped / Total] 451 / 290 / 14 / 755:  76%|███████▌  | 755/1000 [57:29<18:39,  4.57s/it][Succeeded / Failed / Skipped / Total] 451 / 290 / 14 / 755:  76%|███████▌  | 756/1000 [57:38<18:36,  4.57s/it][Succeeded / Failed / Skipped / Total] 452 / 290 / 14 / 756:  76%|███████▌  | 756/1000 [57:38<18:36,  4.57s/it][Succeeded / Failed / Skipped / Total] 452 / 290 / 14 / 756:  76%|███████▌  | 757/1000 [57:40<18:30,  4.57s/it]--------------------------------------------- Result 752 ---------------------------------------------
Visit property . --> setProperty --> Socre: 1.0

[[[[Adv]]]]: @ Override protected boolean [[visitProperty]] ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean [[getruppicix]] ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 753 ---------------------------------------------
Copy this object . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[copy]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[[True]]" == "[[True]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void [[transfer]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[[fake]]" == "[[fake]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 754 ---------------------------------------------
Resolves a scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S [[scope]] = ( S ) scopes . get ( scopeType ) ; if ( [[scope]] == null ) { try { [[scope]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[scope]] ) ; scopes . put ( scopeType , [[scope]] ) ; } return [[scope]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S [[approach]] = ( S ) scopes . get ( scopeType ) ; if ( [[approach]] == null ) { try { [[approach]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[approach]] ) ; scopes . put ( scopeType , [[approach]] ) ; } return [[approach]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 755 ---------------------------------------------
Initialize the table reference . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[init]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String [[tableReference]] = this . tableReference ; if ( [[tableReference]] == null ) { [[tableReference]] = tableAlias ; } if ( [[tableReference]] == null ) { [[tableReference]] = entityName ; } if ( [[tableReference]] == null ) { [[tableReference]] = ded . getEntityName ( ) ; } templateData . registerTableReference ( [[tableReference]] , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void [[actject]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String [[reportbreforce]] = this . tableReference ; if ( [[reportbreforce]] == null ) { [[reportbreforce]] = tableAlias ; } if ( [[reportbreforce]] == null ) { [[reportbreforce]] = entityName ; } if ( [[reportbreforce]] == null ) { [[reportbreforce]] = ded . getEntityName ( ) ; } templateData . registerTableReference ( [[reportbreforce]] , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 756 ---------------------------------------------
Register a bean definition --> Register a BeanDefinition --> Socre: 1.0

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition [[beanDefinition]] ) { beans . put ( name , [[beanDefinition]] ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = [[beanDefinition]] . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition [[eggprevicitors]] ) { beans . put ( name , [[eggprevicitors]] ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = [[eggprevicitors]] . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 757 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 453 / 290 / 14 / 757:  76%|███████▌  | 757/1000 [57:40<18:30,  4.57s/it][Succeeded / Failed / Skipped / Total] 453 / 290 / 14 / 757:  76%|███████▌  | 758/1000 [57:42<18:25,  4.57s/it][Succeeded / Failed / Skipped / Total] 453 / 291 / 14 / 758:  76%|███████▌  | 758/1000 [57:42<18:25,  4.57s/it][Succeeded / Failed / Skipped / Total] 453 / 291 / 14 / 758:  76%|███████▌  | 759/1000 [57:49<18:21,  4.57s/it][Succeeded / Failed / Skipped / Total] 454 / 291 / 14 / 759:  76%|███████▌  | 759/1000 [57:49<18:21,  4.57s/it][Succeeded / Failed / Skipped / Total] 454 / 291 / 14 / 759:  76%|███████▌  | 760/1000 [57:57<18:18,  4.58s/it][Succeeded / Failed / Skipped / Total] 454 / 292 / 14 / 760:  76%|███████▌  | 760/1000 [57:57<18:18,  4.58s/it][Succeeded / Failed / Skipped / Total] 454 / 292 / 14 / 760:  76%|███████▌  | 761/1000 [57:57<18:12,  4.57s/it][Succeeded / Failed / Skipped / Total] 454 / 292 / 15 / 761:  76%|███████▌  | 761/1000 [57:57<18:12,  4.57s/it][Succeeded / Failed / Skipped / Total] 454 / 292 / 15 / 761:  76%|███████▌  | 762/1000 [58:01<18:07,  4.57s/it]Checks if a CSRF token has expired . --> Test to see if a cookie has expired --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[checkCsrfToken]] ( final HttpSession [[session]] , final String tokenValue ) { Set < Token > [[tokenSet]] = ( Set < Token > ) [[session]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( [[tokenSet]] == null ) && ( tokenValue == null ) ) { return "True" == "True" ; } if ( ( [[tokenSet]] == null ) || ( tokenValue == null ) ) { return "False" != "False" ; } boolean [[found]] = "False" != "False" ; Iterator < Token > it = [[tokenSet]] . iterator ( ) ; while ( it . hasNext ( ) ) { Token [[t]] = it . next ( ) ; if ( [[t]] . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( [[t]] . getValue ( ) . equals ( tokenValue ) ) { it . remove ( ) ; [[found]] = "True" == "True" ; } } return [[found]] ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[testingdiswrlinkena]] ( final HttpSession [[day]] , final String tokenValue ) { Set < Token > [[coinagecast]] = ( Set < Token > ) [[day]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( [[coinagecast]] == null ) && ( tokenValue == null ) ) { return "True" == "True" ; } if ( ( [[coinagecast]] == null ) || ( tokenValue == null ) ) { return "False" != "False" ; } boolean [[surrounded]] = "False" != "False" ; Iterator < Token > it = [[coinagecast]] . iterator ( ) ; while ( it . hasNext ( ) ) { Token [[т]] = it . next ( ) ; if ( [[т]] . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( [[т]] . getValue ( ) . equals ( tokenValue ) ) { it . remove ( ) ; [[surrounded]] = "True" == "True" ; } } return [[surrounded]] ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 758 ---------------------------------------------
Ensure the size of the token set . --> [[[FAILED]]]

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[tokenSet]] ) { if ( [[tokenSet]] . size ( ) < maxTokensPerSession ) { return ; } long [[validUntilMin]] = Long . MAX_VALUE ; Token [[tokenToRemove]] = null ; Iterator < Token > [[iterator]] = [[tokenSet]] . iterator ( ) ; while ( [[iterator]] . hasNext ( ) ) { Token token = [[iterator]] . next ( ) ; if ( token . isExpired ( ) ) { [[iterator]] . remove ( ) ; continue ; } if ( token . validUntil < [[validUntilMin]] ) { [[validUntilMin]] = token . validUntil ; [[tokenToRemove]] = token ; } } if ( ( [[tokenToRemove]] != null ) && ( [[tokenSet]] . size ( ) >= maxTokensPerSession ) ) { [[tokenSet]] . remove ( [[tokenToRemove]] ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[botanicachi]] ) { if ( [[botanicachi]] . size ( ) < maxTokensPerSession ) { return ; } long [[botanicandlri]] = Long . MAX_VALUE ; Token [[nanrewarvs]] = null ; Iterator < Token > [[isticaer]] = [[botanicachi]] . iterator ( ) ; while ( [[isticaer]] . hasNext ( ) ) { Token token = [[isticaer]] . next ( ) ; if ( token . isExpired ( ) ) { [[isticaer]] . remove ( ) ; continue ; } if ( token . validUntil < [[botanicandlri]] ) { [[botanicandlri]] = token . validUntil ; [[nanrewarvs]] = token ; } } if ( ( [[nanrewarvs]] != null ) && ( [[botanicachi]] . size ( ) >= maxTokensPerSession ) ) { [[botanicachi]] . remove ( [[nanrewarvs]] ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 759 ---------------------------------------------
Remove bean . --> Configurer for char w --> Socre: 1.0

[[[[Adv]]]]: public void [[removeBean]] ( final Class type ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[charwogan]] ( final Class type ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 760 ---------------------------------------------
Registers a bean with the given type and scope . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > BeanDefinition < T > registerPetiteBean ( final Class < T > type , String [[name]] , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean [[define]] , final Consumer < T > consumer ) { if ( [[name]] == null ) { [[name]] = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > registerPetiteBean ( final Class < T > type , String [[mark]] , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean [[defines]] , final Consumer < T > consumer ) { if ( [[mark]] == null ) { [[mark]] = resolveBeanName ( type ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 761 ---------------------------------------------
Register a Petite SetInjectionPoint --> [[[SKIPPED]]]

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 762 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 455 / 292 / 15 / 762:  76%|███████▌  | 762/1000 [58:01<18:07,  4.57s/it][Succeeded / Failed / Skipped / Total] 455 / 292 / 15 / 762:  76%|███████▋  | 763/1000 [58:21<18:07,  4.59s/it][Succeeded / Failed / Skipped / Total] 455 / 293 / 15 / 763:  76%|███████▋  | 763/1000 [58:21<18:07,  4.59s/it][Succeeded / Failed / Skipped / Total] 455 / 293 / 15 / 763:  76%|███████▋  | 764/1000 [58:25<18:02,  4.59s/it][Succeeded / Failed / Skipped / Total] 456 / 293 / 15 / 764:  76%|███████▋  | 764/1000 [58:25<18:02,  4.59s/it][Succeeded / Failed / Skipped / Total] 456 / 293 / 15 / 764:  76%|███████▋  | 765/1000 [58:30<17:58,  4.59s/it]Register a property injection point . --> Register a PetitePropertyInjectionPoint --> Socre: 1.0

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String property , final String reference ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; [[beanDefinition]] . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String property , final String reference ) { BeanDefinition [[zaileفita]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[zaileفita]] . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + [[zaileفita]] . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; [[zaileفita]] . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 763 ---------------------------------------------
Resolve bean names for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class type ) { String [ ] [[beanNames]] = beanCollections . get ( type ) ; if ( [[beanNames]] != null ) { return [[beanNames]] ; } ArrayList < String > [[list]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > [[entry]] : beans . entrySet ( ) ) { BeanDefinition beanDefinition = [[entry]] . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , type ) ) { String [[beanName]] = [[entry]] . getKey ( ) ; [[list]] . add ( [[beanName]] ) ; } } if ( [[list]] . isEmpty ( ) ) { [[beanNames]] = StringPool . EMPTY_ARRAY ; } else { [[beanNames]] = [[list]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , [[beanNames]] ) ; return [[beanNames]] ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[answeradeetgenedpace]] ( final Class type ) { String [ ] [[saucetowerstreets]] = beanCollections . get ( type ) ; if ( [[saucetowerstreets]] != null ) { return [[saucetowerstreets]] ; } ArrayList < String > [[box]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > [[inscription]] : beans . entrySet ( ) ) { BeanDefinition beanDefinition = [[inscription]] . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , type ) ) { String [[nplay]] = [[inscription]] . getKey ( ) ; [[box]] . add ( [[nplay]] ) ; } } if ( [[box]] . isEmpty ( ) ) { [[saucetowerstreets]] = StringPool . EMPTY_ARRAY ; } else { [[saucetowerstreets]] = [[box]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , [[saucetowerstreets]] ) ; return [[saucetowerstreets]] ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 764 ---------------------------------------------
Register the proper injection point for the given bean . --> This method will register the Petite CtorCtor if it exists --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteCtorInjectionPoint ( final String [[beanName]] , final Class [ ] [[paramTypes]] , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( [[paramTypes]] == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( [[paramTypes]] , "[[True]]" == "[[True]]" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void registerPetiteCtorInjectionPoint ( final String [[flowerdad]] , final Class [ ] [[nomissioncopese]] , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[flowerdad]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor constructor = null ; if ( [[nomissioncopese]] == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } constructor = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( [[nomissioncopese]] , "[[clear]]" == "[[clear]]" ) ; if ( ctorDescriptor != null ) { constructor = ctorDescriptor . getConstructor ( ) ; } } if ( constructor == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( constructor , references ) ; beanDefinition . ctor = new CtorInjectionPoint ( constructor , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 765 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 457 / 293 / 15 / 765:  76%|███████▋  | 765/1000 [58:30<17:58,  4.59s/it][Succeeded / Failed / Skipped / Total] 457 / 293 / 15 / 765:  77%|███████▋  | 766/1000 [58:33<17:53,  4.59s/it][Succeeded / Failed / Skipped / Total] 458 / 293 / 15 / 766:  77%|███████▋  | 766/1000 [58:33<17:53,  4.59s/it][Succeeded / Failed / Skipped / Total] 458 / 293 / 15 / 766:  77%|███████▋  | 767/1000 [58:50<17:52,  4.60s/it][Succeeded / Failed / Skipped / Total] 459 / 293 / 15 / 767:  77%|███████▋  | 767/1000 [58:50<17:52,  4.60s/it][Succeeded / Failed / Skipped / Total] 459 / 293 / 15 / 767:  77%|███████▋  | 768/1000 [58:54<17:47,  4.60s/it]Register poison methods with the given bean name . --> Register poison methods for the given bean definition --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] [[destroyMethodPoints]] = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } [[destroyMethodPoints]] [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( [[destroyMethodPoints]] ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] [[trashmelthtpathsm]] = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } [[trashmelthtpathsm]] [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( [[trashmelthtpathsm]] ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 766 ---------------------------------------------
Register the Petite init methods for the given bean . --> Test to see if a bean definition is proxied --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteInitMethods]] ( final String [[beanName]] , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[beanName]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int [[total]] = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ [[total]] ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void [[testfereaseminformceoss]] ( final String [[nanmaster]] , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( [[nanmaster]] ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int [[per]] = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ [[per]] ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 767 ---------------------------------------------
Iterates over all beans of the given type . --> Casts beanName with beanName --> Socre: 1.0

[[[[Adv]]]]: public void [[forEachBeanType]] ( final Class [[type]] , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[type]] ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void [[castshobookantlyial]] ( final Class [[label]] , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[label]] ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 768 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 460 / 293 / 15 / 768:  77%|███████▋  | 768/1000 [58:54<17:47,  4.60s/it][Succeeded / Failed / Skipped / Total] 460 / 293 / 15 / 768:  77%|███████▋  | 769/1000 [59:01<17:43,  4.61s/it][Succeeded / Failed / Skipped / Total] 461 / 293 / 15 / 769:  77%|███████▋  | 769/1000 [59:01<17:43,  4.61s/it][Succeeded / Failed / Skipped / Total] 461 / 293 / 15 / 769:  77%|███████▋  | 770/1000 [59:03<17:38,  4.60s/it][Succeeded / Failed / Skipped / Total] 462 / 293 / 15 / 770:  77%|███████▋  | 770/1000 [59:03<17:38,  4.60s/it][Succeeded / Failed / Skipped / Total] 462 / 293 / 15 / 770:  77%|███████▋  | 771/1000 [59:11<17:34,  4.61s/it][Succeeded / Failed / Skipped / Total] 463 / 293 / 15 / 771:  77%|███████▋  | 771/1000 [59:11<17:34,  4.61s/it][Succeeded / Failed / Skipped / Total] 463 / 293 / 15 / 771:  77%|███████▋  | 772/1000 [59:14<17:29,  4.60s/it][Succeeded / Failed / Skipped / Total] 464 / 293 / 15 / 772:  77%|███████▋  | 772/1000 [59:14<17:29,  4.60s/it][Succeeded / Failed / Skipped / Total] 464 / 293 / 15 / 772:  77%|███████▋  | 773/1000 [59:20<17:25,  4.61s/it]Register a method injection point . --> Calculate the product of a given concept --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteMethodInjectionPoint]] ( final String beanName , final String [[methodName]] , final Class [ ] arguments , final String [ ] references ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( [[methodName]] ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[methodName]] ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( [[methodName]] , arguments , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + [[methodName]] ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; [[beanDefinition]] . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void [[productmpdeeptoutxtureoff]] ( final String beanName , final String [[conceptnum]] , final Class [ ] arguments , final String [ ] references ) { BeanDefinition [[nenpregunishing]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[nenpregunishing]] . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( [[conceptnum]] ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + [[nenpregunishing]] . type . getName ( ) + ' ' + [[conceptnum]] ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( [[conceptnum]] , arguments , "True" == "True" ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + [[nenpregunishing]] . type . getName ( ) + ' ' + [[conceptnum]] ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; [[nenpregunishing]] . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 769 ---------------------------------------------
Register a Petite provider --> Verify that a bean is compatible with a bean --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String [[providerName]] , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "[[True]]" == "[[True]]" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( [[providerName]] , beanName , md . getMethod ( ) ) ; providers . put ( [[providerName]] , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void [[verifyfeitevvisionend]] ( final String [[chaninterface]] , final String beanName , final String methodName , final Class [ ] arguments ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , "[[forth]]" == "[[forth]]" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( [[chaninterface]] , beanName , md . getMethod ( ) ) ; providers . put ( [[chaninterface]] , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 770 ---------------------------------------------
Define a set of parameters . --> Define a set of properties --> Socre: 1.0

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > [[entry]] : properties . entrySet ( ) ) { defineParameter ( [[entry]] . getKey ( ) . toString ( ) , [[entry]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[developdumetricis]] ( final Map < ? , ? > properties ) { for ( Map . Entry < ? , ? > [[access]] : properties . entrySet ( ) ) { defineParameter ( [[access]] . getKey ( ) . toString ( ) , [[access]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 771 ---------------------------------------------
Push an integer onto the stack . --> Directly stack - push instructions --> Socre: 1.0

[[[[Adv]]]]: public static void [[pushInt]] ( final MethodVisitor mv , final int value ) { if ( value <= 5 ) { mv . visitInsn ( ICONST_0 + value ) ; } else if ( value <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , value ) ; } else { mv . visitIntInsn ( SIPUSH , value ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void [[directand]] ( final MethodVisitor mv , final int value ) { if ( value <= 5 ) { mv . visitInsn ( ICONST_0 + value ) ; } else if ( value <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , value ) ; } else { mv . visitIntInsn ( SIPUSH , value ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 772 ---------------------------------------------
Intercept the action request . --> Called after an organization --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest [[actionRequest]] ) throws Exception { printBefore ( [[actionRequest]] ) ; long [[startTime]] = System . currentTimeMillis ( ) ; Object result = null ; try { result = [[actionRequest]] . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - [[startTime]] ; printAfter ( [[actionRequest]] , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest [[organizationеgist]] ) throws Exception { printBefore ( [[organizationеgist]] ) ; long [[atp]] = System . currentTimeMillis ( ) ; Object result = null ; try { result = [[organizationеgist]] . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - [[atp]] ; printAfter ( [[organizationеgist]] , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 773 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 465 / 293 / 15 / 773:  77%|███████▋  | 773/1000 [59:20<17:25,  4.61s/it][Succeeded / Failed / Skipped / Total] 465 / 293 / 15 / 773:  77%|███████▋  | 774/1000 [59:28<17:21,  4.61s/it][Succeeded / Failed / Skipped / Total] 466 / 293 / 15 / 774:  77%|███████▋  | 774/1000 [59:28<17:21,  4.61s/it][Succeeded / Failed / Skipped / Total] 466 / 293 / 15 / 774:  78%|███████▊  | 775/1000 [59:30<17:16,  4.61s/it][Succeeded / Failed / Skipped / Total] 467 / 293 / 15 / 775:  78%|███████▊  | 775/1000 [59:30<17:16,  4.61s/it][Succeeded / Failed / Skipped / Total] 467 / 293 / 15 / 775:  78%|███████▊  | 776/1000 [59:33<17:11,  4.60s/it][Succeeded / Failed / Skipped / Total] 468 / 293 / 15 / 776:  78%|███████▊  | 776/1000 [59:33<17:11,  4.60s/it][Succeeded / Failed / Skipped / Total] 468 / 293 / 15 / 776:  78%|███████▊  | 777/1000 [59:33<17:05,  4.60s/it][Succeeded / Failed / Skipped / Total] 468 / 294 / 15 / 777:  78%|███████▊  | 777/1000 [59:33<17:05,  4.60s/it][Succeeded / Failed / Skipped / Total] 468 / 294 / 15 / 777:  78%|███████▊  | 778/1000 [59:42<17:02,  4.60s/it][Succeeded / Failed / Skipped / Total] 469 / 294 / 15 / 778:  78%|███████▊  | 778/1000 [59:42<17:02,  4.60s/it][Succeeded / Failed / Skipped / Total] 469 / 294 / 15 / 778:  78%|███████▊  | 779/1000 [59:45<16:57,  4.60s/it][Succeeded / Failed / Skipped / Total] 470 / 294 / 15 / 779:  78%|███████▊  | 779/1000 [59:45<16:57,  4.60s/it][Succeeded / Failed / Skipped / Total] 470 / 294 / 15 / 779:  78%|███████▊  | 780/1000 [59:53<16:53,  4.61s/it][Succeeded / Failed / Skipped / Total] 471 / 294 / 15 / 780:  78%|███████▊  | 780/1000 [59:53<16:53,  4.61s/it][Succeeded / Failed / Skipped / Total] 471 / 294 / 15 / 780:  78%|███████▊  | 781/1000 [59:54<16:48,  4.60s/it]Checks that the argument index is valid . --> documentation inherited from method --> Socre: 1.0

[[[[Adv]]]]: public static void [[checkArgumentIndex]] ( final MethodInfo methodInfo , final int argIndex ) { if ( ( argIndex < 1 ) || ( argIndex > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + argIndex ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void [[documentforwardgmevandce]] ( final MethodInfo methodInfo , final int argIndex ) { if ( ( argIndex < 1 ) || ( argIndex > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + argIndex ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 774 ---------------------------------------------
Generate advice method name . --> suitedd duffum --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String name , final int index ) { return ProxettaNames . methodPrefix + name + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[adviseandyddumy]] ( final String name , final int index ) { return ProxettaNames . methodPrefix + name + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 775 ---------------------------------------------
Generate field name . --> Create helpturepage for helpture page --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String [[name]] , final int index ) { return ProxettaNames . fieldPrefix + [[name]] + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[helpturepage]] ( final String [[moniker]] , final int index ) { return ProxettaNames . fieldPrefix + [[moniker]] + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 776 ---------------------------------------------
Returns the java version number . --> Returns the next time in milliseconds --> Socre: 1.0

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int [[version]] ) { final int [[javaVersionNumber]] = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = [[javaVersionNumber]] - 8 + 52 ; return [[version]] > platformVersion ? [[version]] : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[iyaswatime]] ( final int [[frame]] ) { final int [[communityvrenumdate]] = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = [[communityvrenumdate]] - 8 + 52 ; return [[frame]] > platformVersion ? [[frame]] : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 777 ---------------------------------------------
Register a Petite provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final Class [[type]] , final String [[staticMethodName]] , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[type]] ) ; MethodDescriptor md = cd . getMethodDescriptor ( [[staticMethodName]] , arguments , "[[True]]" == "[[True]]" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[staticMethodName]] ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final Class [[status]] , final String [[simplemadeaadorama]] , final Class [ ] arguments ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[status]] ) ; MethodDescriptor md = cd . getMethodDescriptor ( [[simplemadeaadorama]] , arguments , "[[date]]" == "[[date]]" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + [[simplemadeaadorama]] ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 778 ---------------------------------------------
Load virtual method arguments . --> Outputvienencevienence methods --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadVirtualMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void [[outputviotualencerederrguistics]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 779 ---------------------------------------------
load special method arguments --> Generates the code to load the model --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo ) { [[mv]] . visitVarInsn ( ALOAD , 0 ) ; for ( int [[i]] = 1 ; [[i]] <= methodInfo . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( [[mv]] , methodInfo , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[ispiececkmodelchoidгtions]] ( final MethodVisitor [[mm]] , final MethodInfo methodInfo ) { [[mm]] . visitVarInsn ( ALOAD , 0 ) ; for ( int [[iv]] = 1 ; [[iv]] <= methodInfo . getArgumentsCount ( ) ; [[iv]] ++ ) { loadMethodArgument ( [[mm]] , methodInfo , [[iv]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 780 ---------------------------------------------
Loads the static method arguments . --> load timeic margin marginals --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadStaticMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int [[i]] = 0 ; [[i]] < methodInfo . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( mv , methodInfo , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void [[loadtimeicmitabmarginances]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int [[h]] = 0 ; [[h]] < methodInfo . getArgumentsCount ( ) ; [[h]] ++ ) { loadMethodArgument ( mv , methodInfo , [[h]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 781 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 472 / 294 / 15 / 781:  78%|███████▊  | 781/1000 [59:54<16:48,  4.60s/it][Succeeded / Failed / Skipped / Total] 472 / 294 / 15 / 781:  78%|███████▊  | 782/1000 [1:00:02<16:44,  4.61s/it][Succeeded / Failed / Skipped / Total] 473 / 294 / 15 / 782:  78%|███████▊  | 782/1000 [1:00:02<16:44,  4.61s/it][Succeeded / Failed / Skipped / Total] 473 / 294 / 15 / 782:  78%|███████▊  | 783/1000 [1:00:03<16:38,  4.60s/it][Succeeded / Failed / Skipped / Total] 474 / 294 / 15 / 783:  78%|███████▊  | 783/1000 [1:00:03<16:38,  4.60s/it][Succeeded / Failed / Skipped / Total] 474 / 294 / 15 / 783:  78%|███████▊  | 784/1000 [1:00:08<16:34,  4.60s/it][Succeeded / Failed / Skipped / Total] 475 / 294 / 15 / 784:  78%|███████▊  | 784/1000 [1:00:08<16:34,  4.60s/it][Succeeded / Failed / Skipped / Total] 475 / 294 / 15 / 784:  78%|███████▊  | 785/1000 [1:00:11<16:29,  4.60s/it]Prepare the return value . --> Compress the forward of a method --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareReturnValue]] ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void [[forwardnutdepolress]] ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 782 ---------------------------------------------
Create a method signature key . --> Create an auth cookie string --> Socre: 1.0

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[authortetoaadstainedriesful]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 783 ---------------------------------------------
Generates instructions for a new array type . --> Wrap the specified type --> Socre: 1.0

[[[[Adv]]]]: public static void [[newArray]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void [[neckorren]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 784 ---------------------------------------------
Stores the given method argument at the given index . --> public for testing --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeMethodArgument]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] , final int [[index]] ) { int offset = [[methodInfo]] . getArgumentOffset ( [[index]] ) ; int type = [[methodInfo]] . getArgument ( [[index]] ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[altckheiarirumente]] ( final MethodVisitor mv , final MethodInfo [[approachinfr]] , final int [[afi]] ) { int offset = [[approachinfr]] . getArgumentOffset ( [[afi]] ) ; int type = [[approachinfr]] . getArgument ( [[afi]] ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , offset ) ; break ; default : mv . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 785 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 476 / 294 / 15 / 785:  78%|███████▊  | 785/1000 [1:00:11<16:29,  4.60s/it][Succeeded / Failed / Skipped / Total] 476 / 294 / 15 / 785:  79%|███████▊  | 786/1000 [1:00:14<16:24,  4.60s/it][Succeeded / Failed / Skipped / Total] 477 / 294 / 15 / 786:  79%|███████▊  | 786/1000 [1:00:14<16:24,  4.60s/it][Succeeded / Failed / Skipped / Total] 477 / 294 / 15 / 786:  79%|███████▊  | 787/1000 [1:00:20<16:19,  4.60s/it][Succeeded / Failed / Skipped / Total] 478 / 294 / 15 / 787:  79%|███████▊  | 787/1000 [1:00:20<16:19,  4.60s/it][Succeeded / Failed / Skipped / Total] 478 / 294 / 15 / 787:  79%|███████▉  | 788/1000 [1:00:21<16:14,  4.60s/it][Succeeded / Failed / Skipped / Total] 479 / 294 / 15 / 788:  79%|███████▉  | 788/1000 [1:00:21<16:14,  4.60s/it][Succeeded / Failed / Skipped / Total] 479 / 294 / 15 / 788:  79%|███████▉  | 789/1000 [1:00:30<16:10,  4.60s/it][Succeeded / Failed / Skipped / Total] 480 / 294 / 15 / 789:  79%|███████▉  | 789/1000 [1:00:30<16:10,  4.60s/it][Succeeded / Failed / Skipped / Total] 480 / 294 / 15 / 789:  79%|███████▉  | 790/1000 [1:00:31<16:05,  4.60s/it][Succeeded / Failed / Skipped / Total] 481 / 294 / 15 / 790:  79%|███████▉  | 790/1000 [1:00:31<16:05,  4.60s/it][Succeeded / Failed / Skipped / Total] 481 / 294 / 15 / 790:  79%|███████▉  | 791/1000 [1:00:34<16:00,  4.60s/it]Store into an array --> Raid a specific component type --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeIntoArray]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void [[raidcrleaarct]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 786 ---------------------------------------------
Loads the given method at the given index . --> Generate the heavymetodger --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadMethodArgument]] ( final MethodVisitor [[mv]] , final MethodInfo [[methodInfo]] , final int [[index]] ) { int offset = [[methodInfo]] . getArgumentOffset ( [[index]] ) ; int type = [[methodInfo]] . getArgument ( [[index]] ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[mv]] . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( DLOAD , offset ) ; break ; default : [[mv]] . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[heavymetodgerrangen]] ( final MethodVisitor [[cv]] , final MethodInfo [[approachrivy]] , final int [[profile]] ) { int offset = [[approachrivy]] . getArgumentOffset ( [[profile]] ) ; int type = [[approachrivy]] . getArgument ( [[profile]] ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[cv]] . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : [[cv]] . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : [[cv]] . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : [[cv]] . visitVarInsn ( DLOAD , offset ) ; break ; default : [[cv]] . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 787 ---------------------------------------------
Returns true if the given flags are empty . --> Gets therepylspug . --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isEmptyFlags]] ( Flags flags ) { if ( flags == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = flags . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean [[getsrepylspug]] ( Flags flags ) { if ( flags == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = flags . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = flags . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 788 ---------------------------------------------
Extract encoding from contentType --> Get theanaactctor --> Socre: 1.0

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String [[contentType]] , String defaultEncoding ) { String encoding = [[extractEncoding]] ( [[contentType]] ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[getanaactctor]] ( final String [[videocode]] , String defaultEncoding ) { String encoding = [[getanaactctor]] ( [[videocode]] ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 789 ---------------------------------------------
Resolves the bearer token from the given request . --> Parses the authentication header from the request --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveAuthBearerToken]] ( final HttpServletRequest request ) { String [[header]] = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[header]] == null ) { return null ; } int [[ndx]] = [[header]] . indexOf ( "Bearer " ) ; if ( [[ndx]] == - 1 ) { return null ; } return [[header]] . substring ( [[ndx]] + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String [[idunitherwoprethingocad]] ( final HttpServletRequest request ) { String [[scroll]] = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[scroll]] == null ) { return null ; } int [[ndbbus]] = [[scroll]] . indexOf ( "Bearer " ) ; if ( [[ndbbus]] == - 1 ) { return null ; } return [[scroll]] . substring ( [[ndbbus]] + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 790 ---------------------------------------------
Sets the response . --> Sets the content type --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareResponse]] ( final HttpServletResponse response , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void [[answernsreave]] ( final HttpServletResponse response , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 791 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 482 / 294 / 15 / 791:  79%|███████▉  | 791/1000 [1:00:34<16:00,  4.60s/it][Succeeded / Failed / Skipped / Total] 482 / 294 / 15 / 791:  79%|███████▉  | 792/1000 [1:00:39<15:55,  4.60s/it][Succeeded / Failed / Skipped / Total] 483 / 294 / 15 / 792:  79%|███████▉  | 792/1000 [1:00:39<15:55,  4.60s/it][Succeeded / Failed / Skipped / Total] 483 / 294 / 15 / 792:  79%|███████▉  | 793/1000 [1:00:40<15:50,  4.59s/it][Succeeded / Failed / Skipped / Total] 484 / 294 / 15 / 793:  79%|███████▉  | 793/1000 [1:00:40<15:50,  4.59s/it][Succeeded / Failed / Skipped / Total] 484 / 294 / 15 / 793:  79%|███████▉  | 794/1000 [1:00:42<15:44,  4.59s/it][Succeeded / Failed / Skipped / Total] 485 / 294 / 15 / 794:  79%|███████▉  | 794/1000 [1:00:42<15:44,  4.59s/it][Succeeded / Failed / Skipped / Total] 485 / 294 / 15 / 794:  80%|███████▉  | 795/1000 [1:00:52<15:41,  4.59s/it][Succeeded / Failed / Skipped / Total] 486 / 294 / 15 / 795:  80%|███████▉  | 795/1000 [1:00:52<15:41,  4.59s/it][Succeeded / Failed / Skipped / Total] 486 / 294 / 15 / 795:  80%|███████▉  | 796/1000 [1:00:57<15:37,  4.60s/it][Succeeded / Failed / Skipped / Total] 487 / 294 / 15 / 796:  80%|███████▉  | 796/1000 [1:00:57<15:37,  4.60s/it][Succeeded / Failed / Skipped / Total] 487 / 294 / 15 / 796:  80%|███████▉  | 797/1000 [1:01:03<15:33,  4.60s/it][Succeeded / Failed / Skipped / Total] 488 / 294 / 15 / 797:  80%|███████▉  | 797/1000 [1:01:03<15:33,  4.60s/it][Succeeded / Failed / Skipped / Total] 488 / 294 / 15 / 797:  80%|███████▉  | 798/1000 [1:01:04<15:27,  4.59s/it]Require authentication . --> Send a deffacetry response --> Socre: 1.0

[[[[Adv]]]]: public static void [[requireAuthentication]] ( final HttpServletResponse [[resp]] , final String realm ) throws IOException { [[resp]] . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; [[resp]] . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void [[deffacetryuncker]] ( final HttpServletResponse [[insit]] , final String realm ) throws IOException { [[insit]] . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; [[insit]] . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 792 ---------------------------------------------
Read request body from request . --> Counts all overridevtailer --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest request ) throws IOException { BufferedReader buff = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[countridevtailwerorraddin]] ( final HttpServletRequest request ) throws IOException { BufferedReader buff = request . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 793 ---------------------------------------------
Gets all cookies with the given name . --> Checks to see if a cookie exists in the request --> Socre: 1.0

[[[[Adv]]]]: public static Cookie [ ] [[getAllCookies]] ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] [[wanttheoomirs]] ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie cookie : cookies ) { if ( cookie . getName ( ) . equals ( cookieName ) ) { list . add ( cookie ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 794 ---------------------------------------------
Prepares a download . --> Redirect a collection --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse response , final File [[file]] , final String mimeType ) { if ( ! [[file]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[file]] ) ; } if ( [[file]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[file]] ) ; } prepareResponse ( response , [[file]] . getAbsolutePath ( ) , mimeType , ( int ) [[file]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[randredtate]] ( final HttpServletResponse response , final File [[collection]] , final String mimeType ) { if ( ! [[collection]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[collection]] ) ; } if ( [[collection]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[collection]] ) ; } prepareResponse ( response , [[collection]] . getAbsolutePath ( ) , mimeType , ( int ) [[collection]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 795 ---------------------------------------------
Checks if is a GET parameter . --> Determines whether or not the specified name matches the specified query param --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isGetParameter]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean [[itsgirldimvir]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( query , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 796 ---------------------------------------------
Stores the context path in the servlet context . --> Cache a cached version of cache --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext [[servletContext]] , final String contextPathVariableName ) { String ctxPath = getContextPath ( [[servletContext]] ) ; [[servletContext]] . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[cacheverlinecap]] ( final ServletContext [[suicpleanmu]] , final String contextPathVariableName ) { String ctxPath = getContextPath ( [[suicpleanmu]] ) ; [[suicpleanmu]] . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 797 ---------------------------------------------
Prepare an array of parameter values . --> Removes empty array and convert it to null --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[prepareParameters]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] [[decrowmasson]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .
[Succeeded / Failed / Skipped / Total] 489 / 294 / 15 / 798:  80%|███████▉  | 798/1000 [1:01:04<15:27,  4.59s/it][Succeeded / Failed / Skipped / Total] 489 / 294 / 15 / 798:  80%|███████▉  | 799/1000 [1:01:10<15:23,  4.59s/it][Succeeded / Failed / Skipped / Total] 490 / 294 / 15 / 799:  80%|███████▉  | 799/1000 [1:01:10<15:23,  4.59s/it][Succeeded / Failed / Skipped / Total] 490 / 294 / 15 / 799:  80%|████████  | 800/1000 [1:01:15<15:18,  4.59s/it][Succeeded / Failed / Skipped / Total] 490 / 295 / 15 / 800:  80%|████████  | 800/1000 [1:01:15<15:18,  4.59s/it][Succeeded / Failed / Skipped / Total] 490 / 295 / 15 / 800:  80%|████████  | 801/1000 [1:01:20<15:14,  4.60s/it][Succeeded / Failed / Skipped / Total] 490 / 296 / 15 / 801:  80%|████████  | 801/1000 [1:01:20<15:14,  4.60s/it][Succeeded / Failed / Skipped / Total] 490 / 296 / 15 / 801:  80%|████████  | 802/1000 [1:01:27<15:10,  4.60s/it][Succeeded / Failed / Skipped / Total] 490 / 297 / 15 / 802:  80%|████████  | 802/1000 [1:01:27<15:10,  4.60s/it][Succeeded / Failed / Skipped / Total] 490 / 297 / 15 / 802:  80%|████████  | 803/1000 [1:01:31<15:05,  4.60s/it][Succeeded / Failed / Skipped / Total] 490 / 298 / 15 / 803:  80%|████████  | 803/1000 [1:01:31<15:05,  4.60s/it][Succeeded / Failed / Skipped / Total] 490 / 298 / 15 / 803:  80%|████████  | 804/1000 [1:01:35<15:00,  4.60s/it][Succeeded / Failed / Skipped / Total] 491 / 298 / 15 / 804:  80%|████████  | 804/1000 [1:01:35<15:00,  4.60s/it][Succeeded / Failed / Skipped / Total] 491 / 298 / 15 / 804:  80%|████████  | 805/1000 [1:01:40<14:56,  4.60s/it]--------------------------------------------- Result 798 ---------------------------------------------
Stores the context path variable in the request context . --> Get the rowepa --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final PageContext [[pageContext]] , final String contextPathVariableName ) { String [[ctxPath]] = getContextPath ( [[pageContext]] ) ; HttpServletRequest request = ( HttpServletRequest ) [[pageContext]] . getRequest ( ) ; request . setAttribute ( contextPathVariableName , [[ctxPath]] ) ; ServletContext servletContext = [[pageContext]] . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , [[ctxPath]] ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void [[getrowepa]] ( final PageContext [[coverspron]] , final String contextPathVariableName ) { String [[coveraxmise]] = getContextPath ( [[coverspron]] ) ; HttpServletRequest request = ( HttpServletRequest ) [[coverspron]] . getRequest ( ) ; request . setAttribute ( contextPathVariableName , [[coveraxmise]] ) ; ServletContext servletContext = [[coverspron]] . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , [[coveraxmise]] ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 799 ---------------------------------------------
Read request body from request . --> Convenience method for deserializing --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromStream]] ( final HttpServletRequest [[request]] ) throws IOException { String [[charEncoding]] = [[request]] . getCharacterEncoding ( ) ; if ( [[charEncoding]] == null ) { [[charEncoding]] = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader [[bufferedReader]] = null ; try { InputStream inputStream = [[request]] . getInputStream ( ) ; if ( inputStream != null ) { [[bufferedReader]] = new BufferedReader ( new InputStreamReader ( inputStream , [[charEncoding]] ) ) ; StreamUtil . copy ( [[bufferedReader]] , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( [[bufferedReader]] ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[befrmymalswlicestries]] ( final HttpServletRequest [[list]] ) throws IOException { String [[cherantiodel]] = [[list]] . getCharacterEncoding ( ) ; if ( [[cherantiodel]] == null ) { [[cherantiodel]] = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader [[rupedaddable]] = null ; try { InputStream inputStream = [[list]] . getInputStream ( ) ; if ( inputStream != null ) { [[rupedaddable]] = new BufferedReader ( new InputStreamReader ( inputStream , [[cherantiodel]] ) ) ; StreamUtil . copy ( [[rupedaddable]] , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( [[rupedaddable]] ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 800 ---------------------------------------------
Invokes the tag . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment body ) throws JspException { if ( body == null ) { return ; } try { body . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[isddateful]] ( final JspFragment body ) throws JspException { if ( body == null ) { return ; } try { body . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 801 ---------------------------------------------
Render the given fragment . --> [[[FAILED]]]

[[[[Adv]]]]: public static char [ ] [[renderBody]] ( final JspFragment [[body]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[body]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] [[busfield]] ( final JspFragment [[character]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[character]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 802 ---------------------------------------------
Renders the given fragment . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment [[body]] ) throws JspException { char [ ] result = renderBody ( [[body]] ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[producethersttreeap]] ( final JspFragment [[ground]] ) throws JspException { char [ ] result = renderBody ( [[ground]] ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 803 ---------------------------------------------
Call destroy method . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[callDestroyMethods]] ( ) { for ( final DestroyMethodPoint [[destroyMethodPoint]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[destroyMethodPoint]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[destroyMethodPoint]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void [[zdedvouesthres]] ( ) { for ( final DestroyMethodPoint [[controlpointaodropoint]] : beanDefinition . destroyMethodPoints ( ) ) { try { [[controlpointaodropoint]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + [[controlpointaodropoint]] . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 804 ---------------------------------------------
Instantiate bean instance . --> Resolve the bean definition --> Socre: 1.0

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[nouveaucearutout]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 805 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 491 / 299 / 15 / 805:  80%|████████  | 805/1000 [1:01:40<14:56,  4.60s/it][Succeeded / Failed / Skipped / Total] 492 / 299 / 15 / 806:  81%|████████  | 806/1000 [1:01:40<14:50,  4.59s/it][Succeeded / Failed / Skipped / Total] 492 / 299 / 15 / 806:  81%|████████  | 807/1000 [1:01:43<14:45,  4.59s/it][Succeeded / Failed / Skipped / Total] 493 / 299 / 15 / 807:  81%|████████  | 807/1000 [1:01:43<14:45,  4.59s/it][Succeeded / Failed / Skipped / Total] 494 / 299 / 15 / 808:  81%|████████  | 808/1000 [1:01:49<14:41,  4.59s/it][Succeeded / Failed / Skipped / Total] 494 / 299 / 15 / 808:  81%|████████  | 809/1000 [1:01:49<14:35,  4.59s/it][Succeeded / Failed / Skipped / Total] 495 / 299 / 15 / 809:  81%|████████  | 809/1000 [1:01:49<14:35,  4.59s/it][Succeeded / Failed / Skipped / Total] 496 / 299 / 15 / 810:  81%|████████  | 810/1000 [1:01:51<14:30,  4.58s/it][Succeeded / Failed / Skipped / Total] 496 / 299 / 15 / 810:  81%|████████  | 811/1000 [1:01:53<14:25,  4.58s/it][Succeeded / Failed / Skipped / Total] 497 / 299 / 15 / 811:  81%|████████  | 811/1000 [1:01:53<14:25,  4.58s/it][Succeeded / Failed / Skipped / Total] 498 / 299 / 15 / 812:  81%|████████  | 812/1000 [1:01:56<14:20,  4.58s/it][Succeeded / Failed / Skipped / Total] 498 / 299 / 15 / 812:  81%|████████▏ | 813/1000 [1:01:59<14:15,  4.57s/it]Invoke init methods . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy [[invocationStrategy]] ) { for ( final InitMethodPoint [[initMethod]] : beanDefinition . initMethodPoints ( ) ) { if ( [[invocationStrategy]] != [[initMethod]] . invocationStrategy ) { continue ; } try { [[initMethod]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + [[initMethod]] , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[envkyatitoedis]] ( final InitMethodInvocationStrategy [[outversionreateny]] ) { for ( final InitMethodPoint [[ediidhodo]] : beanDefinition . initMethodPoints ( ) ) { if ( [[outversionreateny]] != [[ediidhodo]] . invocationStrategy ) { continue ; } try { [[ediidhodo]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + [[ediidhodo]] , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 806 ---------------------------------------------
Inject bean parameters . --> Inject the bean definition --> Socre: 1.0

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager paramManager , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[obtailagabilities]] ( final ParamManager paramManager , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 807 ---------------------------------------------
Rewrite action path . --> Rewrite the given HttpServletRequest --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest servletRequest , final String [[actionPath]] , final String httpMethod ) { return [[actionPath]] ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest servletRequest , final String [[appmost]] , final String httpMethod ) { return [[appmost]] ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 808 ---------------------------------------------
Puts a value into the properties map . --> Fallback . --> Socre: 1.0

[[[[Adv]]]]: protected void [[put]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void [[fall]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 809 ---------------------------------------------
Copies all parameters from the given ServletRequest . --> This method will be called from Apache ServletRequest in the ServletRequest --> Socre: 1.0

[[[[Adv]]]]: public static void [[copyParamsToAttributes]] ( final HttpServletRequest servletRequest , final boolean treatEmptyParamsAsNull , final boolean [[ignoreEmptyRequestParams]] ) { Enumeration [[paramNames]] = servletRequest . getParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { String [[paramName]] = ( String ) [[paramNames]] . nextElement ( ) ; if ( servletRequest . getAttribute ( [[paramName]] ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( [[paramName]] ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , [[ignoreEmptyRequestParams]] ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( [[paramName]] , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void [[masteropmiroarrriveats]] ( final HttpServletRequest servletRequest , final boolean treatEmptyParamsAsNull , final boolean [[releaseopmentyarvalaeds]] ) { Enumeration [[aubusst]] = servletRequest . getParameterNames ( ) ; while ( [[aubusst]] . hasMoreElements ( ) ) { String [[apmsscope]] = ( String ) [[aubusst]] . nextElement ( ) ; if ( servletRequest . getAttribute ( [[apmsscope]] ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( [[apmsscope]] ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , [[releaseopmentyarvalaeds]] ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( [[apmsscope]] , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 810 ---------------------------------------------
Add a header . --> Draws a single valued tag --> Socre: 1.0

[[[[Adv]]]]: public void [[addHeader]] ( final String name , final String value ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; valuesList . add ( value ) ; super . addAll ( name , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void [[drawtog]] ( final String name , final String value ) { List < String > valuesList = super . getAll ( name ) ; if ( valuesList . isEmpty ( ) ) { super . add ( name , value ) ; return ; } super . remove ( name ) ; valuesList . add ( value ) ; super . addAll ( name , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 811 ---------------------------------------------
Puts baseProperties . --> This method is used to convert a name to a name --> Socre: 1.0

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[namepileurvalte]] ( final String key , final String value , final boolean append ) { put ( null , baseProperties , key , value , append ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 812 ---------------------------------------------
Get a property from profile --> Get a Fowelciliation by key --> Socre: 1.0

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[getfowilvercoconter]] ( final String profile , final String key ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( profile ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( key ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 813 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 499 / 299 / 15 / 813:  81%|████████▏ | 813/1000 [1:01:59<14:15,  4.57s/it][Succeeded / Failed / Skipped / Total] 500 / 299 / 15 / 814:  81%|████████▏ | 814/1000 [1:02:04<14:11,  4.58s/it][Succeeded / Failed / Skipped / Total] 500 / 299 / 15 / 814:  82%|████████▏ | 815/1000 [1:02:05<14:05,  4.57s/it][Succeeded / Failed / Skipped / Total] 501 / 299 / 15 / 815:  82%|████████▏ | 815/1000 [1:02:05<14:05,  4.57s/it][Succeeded / Failed / Skipped / Total] 502 / 299 / 15 / 816:  82%|████████▏ | 816/1000 [1:02:08<14:00,  4.57s/it][Succeeded / Failed / Skipped / Total] 502 / 299 / 15 / 816:  82%|████████▏ | 817/1000 [1:02:13<13:56,  4.57s/it][Succeeded / Failed / Skipped / Total] 503 / 299 / 15 / 817:  82%|████████▏ | 817/1000 [1:02:13<13:56,  4.57s/it][Succeeded / Failed / Skipped / Total] 504 / 299 / 15 / 818:  82%|████████▏ | 818/1000 [1:02:21<13:52,  4.57s/it][Succeeded / Failed / Skipped / Total] 504 / 299 / 15 / 818:  82%|████████▏ | 819/1000 [1:02:24<13:47,  4.57s/it][Succeeded / Failed / Skipped / Total] 505 / 299 / 15 / 819:  82%|████████▏ | 819/1000 [1:02:24<13:47,  4.57s/it][Succeeded / Failed / Skipped / Total] 505 / 299 / 15 / 819:  82%|████████▏ | 820/1000 [1:02:33<13:43,  4.58s/it][Succeeded / Failed / Skipped / Total] 506 / 299 / 15 / 820:  82%|████████▏ | 820/1000 [1:02:33<13:43,  4.58s/it][Succeeded / Failed / Skipped / Total] 506 / 299 / 15 / 820:  82%|████████▏ | 821/1000 [1:02:34<13:38,  4.57s/it]Puts a profile property . --> Add to fiencer --> Socre: 1.0

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[addtofiencerasersty]] ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 814 ---------------------------------------------
Resolves the given string with the given profiles . --> Commit a document --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveMacros]] ( String [[value]] , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String [[commitmasios]] ( String [[document]] , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 815 ---------------------------------------------
Read a stream of four bytes --> Reads the stream toword --> Socre: 1.0

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] [[offp]] ) { int i ; int word = 0 ; int off = [[offp]] [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } [[offp]] [ 0 ] = off ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] [[isend]] ) { int i ; int word = 0 ; int off = [[isend]] [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } [[isend]] [ 0 ] = off ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 816 ---------------------------------------------
Extracts the configuration from the target map . --> Abort the quota --> Socre: 1.0

[[[[Adv]]]]: public Map [[extract]] ( Map [[target]] , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( [[target]] == null ) { [[target]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map [[abbott]] ( Map [[quota]] , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( [[quota]] == null ) { [[quota]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 817 ---------------------------------------------
Copies all bits from the stream to the output stream . --> Reads the westlist --> Socre: 1.0

[[[[Adv]]]]: public int [[copyAll]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int [[westlist]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 818 ---------------------------------------------
Copy max bytes from the stream to the output stream . --> Copied from OutputStream --> Socre: 1.0

[[[[Adv]]]]: public int copyMax ( final OutputStream [[out]] , final int [[maxBytes]] ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[out]] . write ( b ) ; count ++ ; if ( count == [[maxBytes]] ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int copyMax ( final OutputStream [[i]] , final int [[outputvymes]] ) throws IOException { int count = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } [[i]] . write ( b ) ; count ++ ; if ( count == [[outputvymes]] ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 819 ---------------------------------------------
Checks if the given plaintext matches the password . --> Compare the command and return true if the command was successful --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[checkpw]] ( String [[plaintext]] , String hashed ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String [[try_pw]] = hashpw ( [[plaintext]] , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; try_bytes = [[try_pw]] . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean [[tryw]] ( String [[commande]] , String hashed ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String [[wait16spw]] = hashpw ( [[commande]] , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; try_bytes = [[wait16spw]] . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 820 ---------------------------------------------
Detect and register alias . --> identify an action identifier --> Socre: 1.0

[[[[Adv]]]]: protected void [[detectAndRegisterAlias]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void [[identificationindhegistoras]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( annotationValues ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 821 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 507 / 299 / 15 / 821:  82%|████████▏ | 821/1000 [1:02:34<13:38,  4.57s/it][Succeeded / Failed / Skipped / Total] 507 / 299 / 15 / 821:  82%|████████▏ | 822/1000 [1:02:36<13:33,  4.57s/it][Succeeded / Failed / Skipped / Total] 508 / 299 / 15 / 822:  82%|████████▏ | 822/1000 [1:02:36<13:33,  4.57s/it][Succeeded / Failed / Skipped / Total] 508 / 299 / 15 / 822:  82%|████████▏ | 823/1000 [1:03:00<13:33,  4.59s/it][Succeeded / Failed / Skipped / Total] 509 / 299 / 15 / 823:  82%|████████▏ | 823/1000 [1:03:00<13:33,  4.59s/it][Succeeded / Failed / Skipped / Total] 509 / 299 / 15 / 823:  82%|████████▏ | 824/1000 [1:03:02<13:27,  4.59s/it][Succeeded / Failed / Skipped / Total] 509 / 300 / 15 / 824:  82%|████████▏ | 824/1000 [1:03:02<13:27,  4.59s/it][Succeeded / Failed / Skipped / Total] 509 / 300 / 15 / 824:  82%|████████▎ | 825/1000 [1:03:02<13:22,  4.59s/it][Succeeded / Failed / Skipped / Total] 510 / 300 / 15 / 825:  82%|████████▎ | 825/1000 [1:03:02<13:22,  4.59s/it][Succeeded / Failed / Skipped / Total] 510 / 300 / 15 / 825:  83%|████████▎ | 826/1000 [1:03:03<13:16,  4.58s/it][Succeeded / Failed / Skipped / Total] 511 / 300 / 15 / 826:  83%|████████▎ | 826/1000 [1:03:03<13:16,  4.58s/it][Succeeded / Failed / Skipped / Total] 511 / 300 / 15 / 826:  83%|████████▎ | 827/1000 [1:03:03<13:11,  4.57s/it][Succeeded / Failed / Skipped / Total] 511 / 300 / 16 / 827:  83%|████████▎ | 827/1000 [1:03:03<13:11,  4.57s/it][Succeeded / Failed / Skipped / Total] 511 / 300 / 16 / 827:  83%|████████▎ | 828/1000 [1:03:09<13:07,  4.58s/it][Succeeded / Failed / Skipped / Total] 512 / 300 / 16 / 828:  83%|████████▎ | 828/1000 [1:03:09<13:07,  4.58s/it][Succeeded / Failed / Skipped / Total] 512 / 300 / 16 / 828:  83%|████████▎ | 829/1000 [1:03:14<13:02,  4.58s/it]Calculates the hash of a password . --> Generates Rackhunter --> Socre: 1.0

[[[[Adv]]]]: public static String [[hashpw]] ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] [[passwordb]] , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String [[rackhunter]] ( String password , String salt ) { BCrypt B ; String real_salt ; byte [ ] [[0a]] , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer rs = new StringBuffer ( ) ; if ( salt . charAt ( 0 ) != ' ' || salt . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( salt . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = salt . charAt ( 2 ) ; if ( minor != ' ' || salt . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 822 ---------------------------------------------
Resolves the action config . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues [[annotationValues]] ) { final Class < ? extends Annotation > annotationType ; if ( [[annotationValues]] == null ) { annotationType = Action . class ; } else { annotationType = [[annotationValues]] . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[fixollioncofeɡ]] ( final ActionAnnotationValues [[hallisetionвes]] ) { final Class < ? extends Annotation > annotationType ; if ( [[hallisetionвes]] == null ) { annotationType = Action . class ; } else { annotationType = [[hallisetionвes]] . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 823 ---------------------------------------------
Read the filtered filters . --> determines if the filter should be tested by the filter --> Socre: 1.0

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[readActionFilters]] ( final AnnotatedElement [[actionClassOrMethod]] ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy [[filteredBy]] = [[actionClassOrMethod]] . getAnnotation ( FilteredBy . class ) ; if ( [[filteredBy]] != null ) { result = [[filteredBy]] . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[pageificeonفlderness]] ( final AnnotatedElement [[enginemyaljectthld]] ) { Class < ? extends ActionFilter > [ ] result = null ; FilteredBy [[ratedbey]] = [[enginemyaljectthld]] . getAnnotation ( FilteredBy . class ) ; if ( [[ratedbey]] != null ) { result = [[ratedbey]] . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 824 ---------------------------------------------
Parses the action configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime [[parse]] ( final Class < ? > [[actionClass]] , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig [[actionConfig]] = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime [[gauses]] ( final Class < ? > [[assclass]] , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig [[actionurfiden]] = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 825 ---------------------------------------------
Reads the interceptors for the given element . --> returns null if the interceptor is null --> Socre: 1.0

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[readActionInterceptors]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] [[result]] = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { [[result]] = interceptedBy . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[collectrasiotextoperciempora]] ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] [[event]] = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { [[event]] = interceptedBy . value ( ) ; if ( [[event]] . length == 0 ) { [[event]] = null ; } } return [[event]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 826 ---------------------------------------------
Read package action path . --> The name of the flyjectagmathmathmathmathmathmathmath --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class [[actionClass]] ) { Package actionPackage = [[actionClass]] . getPackage ( ) ; final String [[actionPackageName]] = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[flyjectagmathionmost]] ( final Class [[autospace]] ) { Package actionPackage = [[autospace]] . getPackage ( ) ; final String [[aunkgvirtual]] = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 827 ---------------------------------------------
Sets the status of the last modified response . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 828 ---------------------------------------------
Parses the alias . --> Returns the globalgeid of the globalgeter --> Socre: 1.0

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues annotationValues ) { String alias = null ; if ( annotationValues != null ) { alias = annotationValues . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[globalgegetcoidtis]] ( final ActionAnnotationValues annotationValues ) { String alias = null ; if ( annotationValues != null ) { alias = annotationValues . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 829 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 512 / 301 / 16 / 829:  83%|████████▎ | 829/1000 [1:03:14<13:02,  4.58s/it][Succeeded / Failed / Skipped / Total] 512 / 301 / 16 / 829:  83%|████████▎ | 830/1000 [1:03:17<12:57,  4.58s/it][Succeeded / Failed / Skipped / Total] 513 / 301 / 16 / 830:  83%|████████▎ | 830/1000 [1:03:17<12:57,  4.58s/it][Succeeded / Failed / Skipped / Total] 513 / 301 / 16 / 830:  83%|████████▎ | 831/1000 [1:03:25<12:53,  4.58s/it][Succeeded / Failed / Skipped / Total] 514 / 301 / 16 / 831:  83%|████████▎ | 831/1000 [1:03:25<12:53,  4.58s/it][Succeeded / Failed / Skipped / Total] 514 / 301 / 16 / 831:  83%|████████▎ | 832/1000 [1:03:34<12:50,  4.58s/it][Succeeded / Failed / Skipped / Total] 515 / 301 / 16 / 832:  83%|████████▎ | 832/1000 [1:03:34<12:50,  4.58s/it][Succeeded / Failed / Skipped / Total] 515 / 301 / 16 / 832:  83%|████████▎ | 833/1000 [1:03:34<12:44,  4.58s/it][Succeeded / Failed / Skipped / Total] 515 / 302 / 16 / 833:  83%|████████▎ | 833/1000 [1:03:34<12:44,  4.58s/it][Succeeded / Failed / Skipped / Total] 515 / 302 / 16 / 833:  83%|████████▎ | 834/1000 [1:03:39<12:40,  4.58s/it][Succeeded / Failed / Skipped / Total] 516 / 302 / 16 / 834:  83%|████████▎ | 834/1000 [1:03:39<12:40,  4.58s/it][Succeeded / Failed / Skipped / Total] 516 / 302 / 16 / 834:  84%|████████▎ | 835/1000 [1:03:47<12:36,  4.58s/it][Succeeded / Failed / Skipped / Total] 517 / 302 / 16 / 835:  84%|████████▎ | 835/1000 [1:03:47<12:36,  4.58s/it][Succeeded / Failed / Skipped / Total] 517 / 302 / 16 / 835:  84%|████████▎ | 836/1000 [1:03:57<12:32,  4.59s/it][Succeeded / Failed / Skipped / Total] 518 / 302 / 16 / 836:  84%|████████▎ | 836/1000 [1:03:57<12:32,  4.59s/it][Succeeded / Failed / Skipped / Total] 518 / 302 / 16 / 836:  84%|████████▎ | 837/1000 [1:04:03<12:28,  4.59s/it][Succeeded / Failed / Skipped / Total] 519 / 302 / 16 / 837:  84%|████████▎ | 837/1000 [1:04:03<12:28,  4.59s/it][Succeeded / Failed / Skipped / Total] 519 / 302 / 16 / 837:  84%|████████▍ | 838/1000 [1:04:13<12:24,  4.60s/it][Succeeded / Failed / Skipped / Total] 520 / 302 / 16 / 838:  84%|████████▍ | 838/1000 [1:04:13<12:24,  4.60s/it][Succeeded / Failed / Skipped / Total] 520 / 302 / 16 / 838:  84%|████████▍ | 839/1000 [1:04:22<12:21,  4.60s/it]Applies the advice for the given target class . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > T applyAdvice ( final Class < T > targetClass ) { Class [[adviceClass]] = cache . get ( targetClass ) ; if ( [[adviceClass]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < T > T applyAdvice ( final Class < T > targetClass ) { Class [[wisdomgt]] = cache . get ( targetClass ) ; if ( [[wisdomgt]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 830 ---------------------------------------------
Inject target . --> loop method --> Socre: 1.0

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object proxy , final Object target ) { Class proxyClass = proxy . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[enloopconnatthingetnoct]] ( final Object proxy , final Object target ) { Class proxyClass = proxy . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 831 ---------------------------------------------
Resolves real name . --> Returns the presentation scope for the given jsonName --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( jsonIndex == - 1 ) { return jsonName ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[presentationlyscope]] ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( jsonIndex == - 1 ) { return jsonName ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 832 ---------------------------------------------
Visits an annotation . --> todo --> Socre: 1.0

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String [[descriptor]] , final boolean [[visible]] ) { if ( fv != null ) { return fv . visitAnnotation ( [[descriptor]] , [[visible]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[tzenucatch]] ( final String [[enmatobject]] , final boolean [[client]] ) { if ( fv != null ) { return fv . visitAnnotation ( [[enmatobject]] , [[client]] ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 833 ---------------------------------------------
Read method action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String [[methodName]] , final ActionAnnotationValues [[annotationValues]] , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[amettypedlcpara]] ( final String [[atorterms]] , final ActionAnnotationValues [[improvedinputionworldult]] , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 834 ---------------------------------------------
Resolves real name . --> Returns the condersum for the given string --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( realIndex == - 1 ) { return [[realName]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[condersantum]] ( final String [[streetrum]] ) { if ( realNames == null ) { return [[streetrum]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[streetrum]] ) ; if ( realIndex == - 1 ) { return [[streetrum]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 835 ---------------------------------------------
Looks up the type data for a given type . --> Liefert den uebergeben --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[_lookupTypeData]] ( final Class [[type]] ) { TypeData typeData = typeDataMap . get ( [[type]] ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData [[vonlayuthpaceodaut]] ( final Class [[b]] ) { TypeData typeData = typeDataMap . get ( [[b]] ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( [[b]] ) ; typeDataMap . put ( [[b]] , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 836 ---------------------------------------------
Find type data . --> returns null if not found --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[findSubclassTypeData]] ( final Class type ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( type . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData [[winsreajectdisplayeda]] ( final Class type ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( type . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 837 ---------------------------------------------
Looks up the type data for a given type . --> Liefert einen TypeData --> Socre: 1.0

[[[[Adv]]]]: public TypeData [[lookupTypeData]] ( final Class [[type]] ) { TypeData [[typeData]] = typeDataMap . get ( [[type]] ) ; if ( [[typeData]] == null ) { if ( serializationSubclassAware ) { [[typeData]] = findSubclassTypeData ( [[type]] ) ; } if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , [[typeData]] ) ; } } return [[typeData]] ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData [[lchnesworktatc]] ( final Class [[language]] ) { TypeData [[ledap]] = typeDataMap . get ( [[language]] ) ; if ( [[ledap]] == null ) { if ( serializationSubclassAware ) { [[ledap]] = findSubclassTypeData ( [[language]] ) ; } if ( [[ledap]] == null ) { [[ledap]] = scanClassForAnnotations ( [[language]] ) ; typeDataMap . put ( [[language]] , [[ledap]] ) ; } } return [[ledap]] ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 838 ---------------------------------------------
Returns the content of the temp file . --> Return data as a byte array --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[likefulerinctita]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 839 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 521 / 302 / 16 / 839:  84%|████████▍ | 839/1000 [1:04:22<12:21,  4.60s/it][Succeeded / Failed / Skipped / Total] 521 / 302 / 16 / 839:  84%|████████▍ | 840/1000 [1:04:22<12:15,  4.60s/it][Succeeded / Failed / Skipped / Total] 522 / 302 / 16 / 840:  84%|████████▍ | 840/1000 [1:04:22<12:15,  4.60s/it][Succeeded / Failed / Skipped / Total] 522 / 302 / 16 / 840:  84%|████████▍ | 841/1000 [1:04:23<12:10,  4.59s/it][Succeeded / Failed / Skipped / Total] 523 / 302 / 16 / 841:  84%|████████▍ | 841/1000 [1:04:23<12:10,  4.59s/it][Succeeded / Failed / Skipped / Total] 523 / 302 / 16 / 841:  84%|████████▍ | 842/1000 [1:04:32<12:06,  4.60s/it][Succeeded / Failed / Skipped / Total] 524 / 302 / 16 / 842:  84%|████████▍ | 842/1000 [1:04:32<12:06,  4.60s/it][Succeeded / Failed / Skipped / Total] 524 / 302 / 16 / 842:  84%|████████▍ | 843/1000 [1:04:34<12:01,  4.60s/it][Succeeded / Failed / Skipped / Total] 525 / 302 / 16 / 843:  84%|████████▍ | 843/1000 [1:04:34<12:01,  4.60s/it][Succeeded / Failed / Skipped / Total] 525 / 302 / 16 / 843:  84%|████████▍ | 844/1000 [1:04:35<11:56,  4.59s/it][Succeeded / Failed / Skipped / Total] 525 / 303 / 16 / 844:  84%|████████▍ | 844/1000 [1:04:35<11:56,  4.59s/it][Succeeded / Failed / Skipped / Total] 525 / 303 / 16 / 844:  84%|████████▍ | 845/1000 [1:04:36<11:51,  4.59s/it][Succeeded / Failed / Skipped / Total] 526 / 303 / 16 / 845:  84%|████████▍ | 845/1000 [1:04:36<11:51,  4.59s/it][Succeeded / Failed / Skipped / Total] 526 / 303 / 16 / 845:  85%|████████▍ | 846/1000 [1:04:51<11:48,  4.60s/it][Succeeded / Failed / Skipped / Total] 527 / 303 / 16 / 846:  85%|████████▍ | 846/1000 [1:04:51<11:48,  4.60s/it][Succeeded / Failed / Skipped / Total] 527 / 303 / 16 / 846:  85%|████████▍ | 847/1000 [1:04:57<11:43,  4.60s/it]Copy bootstrap methods . --> Create forrame operations --> Socre: 1.0

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[creationdoforrameops]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 840 ---------------------------------------------
Create the action runtime . --> Create an ActionRuntime --> Socre: 1.0

[[[[Adv]]]]: public ActionRuntime [[createActionRuntime]] ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData [[scopeData]] = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime [[createmotirpanlace]] ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData [[controldaetu]] = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 841 ---------------------------------------------
Resolves a Json name . --> Determines the timestamp for the given type --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final Class type , final String [[name]] ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( [[name]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String [[eshionetime]] ( final Class type , final String [[i]] ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( [[i]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 842 ---------------------------------------------
Sets the major version and class . --> numadusadum --> Socre: 1.0

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int majorVersion , final String className ) { this . majorVersion = majorVersion ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[hetmujobargenaduhdate]] ( final int majorVersion , final String className ) { this . majorVersion = majorVersion ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 843 ---------------------------------------------
Resolves the real name of the given type . --> Compose variable id --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class type , final String jsonName ) { TypeData [[typeData]] = lookupTypeData ( type ) ; return [[typeData]] . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[composevarid]] ( final Class type , final String jsonName ) { TypeData [[thertta]] = lookupTypeData ( type ) ; return [[thertta]] . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 844 ---------------------------------------------
Puts the bootstrap methods . --> [[[FAILED]]]

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[ratboottapaatholis]] ( final ByteVector output ) { if ( bootstrapMethods != null ) { output . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 845 ---------------------------------------------
Puts constant pool entry . --> Add a complexful solverage --> Socre: 1.0

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector [[output]] ) { [[output]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[complexfulpartatage]] ( final ByteVector [[experiment]] ) { [[experiment]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 846 ---------------------------------------------
Add a constant member reference . --> Input method for input format --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int index , final int tag , final String owner , final String [[name]] , final String descriptor ) { add ( new Entry ( index , tag , owner , [[name]] , descriptor , 0 , hash ( tag , owner , [[name]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[inputcontectheleenddeform]] ( final int index , final int tag , final String owner , final String [[hand]] , final String descriptor ) { add ( new Entry ( index , tag , owner , [[hand]] , descriptor , 0 , hash ( tag , owner , [[hand]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 847 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 528 / 303 / 16 / 847:  85%|████████▍ | 847/1000 [1:04:57<11:43,  4.60s/it][Succeeded / Failed / Skipped / Total] 528 / 303 / 16 / 847:  85%|████████▍ | 848/1000 [1:05:04<11:39,  4.60s/it][Succeeded / Failed / Skipped / Total] 529 / 303 / 16 / 848:  85%|████████▍ | 848/1000 [1:05:04<11:39,  4.60s/it][Succeeded / Failed / Skipped / Total] 529 / 303 / 16 / 848:  85%|████████▍ | 849/1000 [1:05:05<11:34,  4.60s/it][Succeeded / Failed / Skipped / Total] 529 / 304 / 16 / 849:  85%|████████▍ | 849/1000 [1:05:05<11:34,  4.60s/it][Succeeded / Failed / Skipped / Total] 529 / 304 / 16 / 849:  85%|████████▌ | 850/1000 [1:05:13<11:30,  4.60s/it][Succeeded / Failed / Skipped / Total] 530 / 304 / 16 / 850:  85%|████████▌ | 850/1000 [1:05:13<11:30,  4.60s/it][Succeeded / Failed / Skipped / Total] 530 / 304 / 16 / 850:  85%|████████▌ | 851/1000 [1:05:28<11:27,  4.62s/it][Succeeded / Failed / Skipped / Total] 530 / 305 / 16 / 851:  85%|████████▌ | 851/1000 [1:05:28<11:27,  4.62s/it][Succeeded / Failed / Skipped / Total] 530 / 305 / 16 / 851:  85%|████████▌ | 852/1000 [1:05:29<11:22,  4.61s/it][Succeeded / Failed / Skipped / Total] 530 / 306 / 16 / 852:  85%|████████▌ | 852/1000 [1:05:29<11:22,  4.61s/it][Succeeded / Failed / Skipped / Total] 530 / 306 / 16 / 852:  85%|████████▌ | 853/1000 [1:05:49<11:20,  4.63s/it]Adds a method ref to the symbol table . --> end class refactored --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantMethodref]] ( final String owner , final String [[name]] , final String descriptor , final boolean isInterface ) { int [[tag]] = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( [[tag]] , owner , [[name]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[enduiractestplateudpreaf]] ( final String owner , final String [[z]] , final String descriptor , final boolean isInterface ) { int [[signature]] = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( [[signature]] , owner , [[z]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 848 ---------------------------------------------
Adds a constant or floating point integer or float integer . --> setter for entry --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int index , final int tag , final int value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[exeanunrupnegrenotlostt]] ( final int index , final int tag , final int value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 849 ---------------------------------------------
Adds a constant fieldref . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantFieldref ( final String [[owner]] , final String name , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , [[owner]] , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantFieldref ( final String [[administrator]] , final String name , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , [[administrator]] , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 850 ---------------------------------------------
Add a constant long or double . --> Add an entry --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantLongOrDouble]] ( final int index , final int tag , final long value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[inputexdontfxourroator]] ( final int index , final int tag , final long value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 851 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantIntegerOrFloat]] ( final int tag , final int value ) { int [[hashCode]] = hash ( tag , value ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == [[hashCode]] && [[entry]] . data == value ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[getoaandicantrhtlutive]] ( final int tag , final int value ) { int [[ashor]] = hash ( tag , value ) ; Entry [[access]] = get ( [[ashor]] ) ; while ( [[access]] != null ) { if ( [[access]] . tag == tag && [[access]] . hashCode == [[ashor]] && [[access]] . data == value ) { return [[access]] ; } [[access]] = [[access]] . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , [[ashor]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 852 ---------------------------------------------
Adds a constant reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry addConstantMemberReference ( final int tag , final String owner , final String name , final String descriptor ) { int hashCode = hash ( tag , owner , name , descriptor ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . owner . equals ( owner ) && [[entry]] . name . equals ( name ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry addConstantMemberReference ( final int tag , final String owner , final String name , final String descriptor ) { int hashCode = hash ( tag , owner , name , descriptor ) ; Entry [[admission]] = get ( hashCode ) ; while ( [[admission]] != null ) { if ( [[admission]] . tag == tag && [[admission]] . hashCode == hashCode && [[admission]] . owner . equals ( owner ) && [[admission]] . name . equals ( name ) && [[admission]] . value . equals ( descriptor ) ) { return [[admission]] ; } [[admission]] = [[admission]] . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 853 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 530 / 307 / 16 / 853:  85%|████████▌ | 853/1000 [1:05:49<11:20,  4.63s/it][Succeeded / Failed / Skipped / Total] 530 / 307 / 16 / 853:  85%|████████▌ | 854/1000 [1:05:57<11:16,  4.63s/it][Succeeded / Failed / Skipped / Total] 530 / 308 / 16 / 854:  85%|████████▌ | 854/1000 [1:05:57<11:16,  4.63s/it][Succeeded / Failed / Skipped / Total] 530 / 308 / 16 / 854:  86%|████████▌ | 855/1000 [1:05:58<11:11,  4.63s/it][Succeeded / Failed / Skipped / Total] 530 / 309 / 16 / 855:  86%|████████▌ | 855/1000 [1:05:58<11:11,  4.63s/it][Succeeded / Failed / Skipped / Total] 530 / 309 / 16 / 855:  86%|████████▌ | 856/1000 [1:06:08<11:07,  4.64s/it][Succeeded / Failed / Skipped / Total] 531 / 309 / 16 / 856:  86%|████████▌ | 856/1000 [1:06:08<11:07,  4.64s/it][Succeeded / Failed / Skipped / Total] 531 / 309 / 16 / 856:  86%|████████▌ | 857/1000 [1:06:11<11:02,  4.63s/it][Succeeded / Failed / Skipped / Total] 532 / 309 / 16 / 857:  86%|████████▌ | 857/1000 [1:06:11<11:02,  4.63s/it][Succeeded / Failed / Skipped / Total] 532 / 309 / 16 / 857:  86%|████████▌ | 858/1000 [1:06:16<10:58,  4.63s/it][Succeeded / Failed / Skipped / Total] 532 / 310 / 16 / 858:  86%|████████▌ | 858/1000 [1:06:16<10:58,  4.63s/it][Succeeded / Failed / Skipped / Total] 532 / 310 / 16 / 858:  86%|████████▌ | 859/1000 [1:06:17<10:52,  4.63s/it]Adds a constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantLongOrDouble ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantLongOrDouble ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 854 ---------------------------------------------
Adds a UTF - 8 string constant . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantUtf8]] ( final String value ) { int [[hashCode]] = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry [[entry]] = get ( [[hashCode]] ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == Symbol . CONSTANT_UTF8_TAG && [[entry]] . hashCode == [[hashCode]] && [[entry]] . value . equals ( value ) ) { return [[entry]] . index ; } [[entry]] = [[entry]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[importplaystitensk16]] ( final String value ) { int [[anrence]] = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry [[export]] = get ( [[anrence]] ) ; while ( [[export]] != null ) { if ( [[export]] . tag == Symbol . CONSTANT_UTF8_TAG && [[export]] . hashCode == [[anrence]] && [[export]] . value . equals ( value ) ) { return [[export]] . index ; } [[export]] = [[export]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , [[anrence]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 855 ---------------------------------------------
Adds a constant name and type . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantNameAndType]] ( final String [[name]] , final String [[descriptor]] ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[hashCode]] = hash ( tag , [[name]] , [[descriptor]] ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[hashCode]] && entry . name . equals ( [[name]] ) && entry . value . equals ( [[descriptor]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( [[name]] ) , addConstantUtf8 ( [[descriptor]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[name]] , [[descriptor]] , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[ixlfstetangramatuate]] ( final String [[names]] , final String [[duclend]] ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[storemal]] = hash ( tag , [[names]] , [[duclend]] ) ; Entry entry = get ( [[storemal]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[storemal]] && entry . name . equals ( [[names]] ) && entry . value . equals ( [[duclend]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( [[names]] ) , addConstantUtf8 ( [[duclend]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[names]] , [[duclend]] , [[storemal]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 856 ---------------------------------------------
Adds a constant handle to the symbol table . --> Methode permettante de la resolute --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantMethodHandle]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[endonsultationclronmindelle]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 857 ---------------------------------------------
Adds a utf - 8 - byte constant . --> Add an additional supplemental colongle tag --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int [[index]] , final String [[value]] ) { add ( new Entry ( [[index]] , Symbol . CONSTANT_UTF8_TAG , [[value]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[additionalcolongtalactiveo]] ( final int [[attribute]] , final String [[e]] ) { add ( new Entry ( [[attribute]] , Symbol . CONSTANT_UTF8_TAG , [[e]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[e]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 858 ---------------------------------------------
Add a constant name and type . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int index , final String name , final String descriptor ) { final int [[tag]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , [[tag]] , name , descriptor , hash ( [[tag]] , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[importantshancnallalcta]] ( final int index , final String name , final String descriptor ) { final int [[label]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , [[label]] , name , descriptor , hash ( [[label]] , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 859 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 533 / 310 / 16 / 859:  86%|████████▌ | 859/1000 [1:06:17<10:52,  4.63s/it][Succeeded / Failed / Skipped / Total] 533 / 310 / 16 / 859:  86%|████████▌ | 860/1000 [1:06:32<10:49,  4.64s/it][Succeeded / Failed / Skipped / Total] 534 / 310 / 16 / 860:  86%|████████▌ | 860/1000 [1:06:32<10:49,  4.64s/it][Succeeded / Failed / Skipped / Total] 534 / 310 / 16 / 860:  86%|████████▌ | 861/1000 [1:06:32<10:44,  4.64s/it][Succeeded / Failed / Skipped / Total] 535 / 310 / 16 / 861:  86%|████████▌ | 861/1000 [1:06:32<10:44,  4.64s/it][Succeeded / Failed / Skipped / Total] 535 / 310 / 16 / 861:  86%|████████▌ | 862/1000 [1:06:39<10:40,  4.64s/it][Succeeded / Failed / Skipped / Total] 536 / 310 / 16 / 862:  86%|████████▌ | 862/1000 [1:06:39<10:40,  4.64s/it][Succeeded / Failed / Skipped / Total] 536 / 310 / 16 / 862:  86%|████████▋ | 863/1000 [1:07:04<10:38,  4.66s/it][Succeeded / Failed / Skipped / Total] 536 / 311 / 16 / 863:  86%|████████▋ | 863/1000 [1:07:04<10:38,  4.66s/it][Succeeded / Failed / Skipped / Total] 536 / 311 / 16 / 863:  86%|████████▋ | 864/1000 [1:07:08<10:34,  4.66s/it][Succeeded / Failed / Skipped / Total] 536 / 312 / 16 / 864:  86%|████████▋ | 864/1000 [1:07:08<10:34,  4.66s/it][Succeeded / Failed / Skipped / Total] 536 / 312 / 16 / 864:  86%|████████▋ | 865/1000 [1:07:11<10:29,  4.66s/it]Adds a constant method handle . --> exchange lock --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantMethodHandle]] ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int [[hashCode]] = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[exchangecomingsuompotelockiklist]] ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int [[singleray]] = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , [[singleray]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 860 ---------------------------------------------
Add constant or invoke dynamic reference . --> generate hashcode --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final int [[index]] , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( [[index]] , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[bringwisetainagegvisaridehashedusgyenurse]] ( final int tag , final int [[expression]] , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( [[expression]] , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 861 ---------------------------------------------
Adds a synthetic method invocation . --> Quick fix for unit test --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantInvokeDynamic]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[bootstrapMethod]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , [[bootstrapMethod]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[fixunitainutiraglednermic]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[asaragphanoud]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , [[asaragphanoud]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 862 ---------------------------------------------
Adds a reference to the constant map . --> Draw two Constraints --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantUtf8Reference]] ( final int index , final int tag , final String value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[drawconistantspt86redce]] ( final int index , final int tag , final String value ) { add ( new Entry ( index , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 863 ---------------------------------------------
Add a synthetic constant . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantDynamic]] ( final String name , final String descriptor , final Handle [[bootstrapMethodHandle]] , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( [[bootstrapMethodHandle]] , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[elementclinatorziscas]] ( final String name , final String descriptor , final Handle [[blestargmastonnettlo]] , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( [[blestargmastonnettlo]] , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 864 ---------------------------------------------
Adds a constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantUtf8Reference]] ( final int [[tag]] , final String value ) { int hashCode = hash ( [[tag]] , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( [[tag]] , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[getinlentnipryresce]] ( final int [[symbol]] , final String value ) { int hashCode = hash ( [[symbol]] , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[symbol]] && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( [[symbol]] , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , [[symbol]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 865 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 537 / 312 / 16 / 865:  86%|████████▋ | 865/1000 [1:07:11<10:29,  4.66s/it][Succeeded / Failed / Skipped / Total] 537 / 312 / 16 / 865:  87%|████████▋ | 866/1000 [1:07:12<10:23,  4.66s/it][Succeeded / Failed / Skipped / Total] 538 / 312 / 16 / 866:  87%|████████▋ | 866/1000 [1:07:12<10:23,  4.66s/it][Succeeded / Failed / Skipped / Total] 538 / 312 / 16 / 866:  87%|████████▋ | 867/1000 [1:07:18<10:19,  4.66s/it][Succeeded / Failed / Skipped / Total] 539 / 312 / 16 / 867:  87%|████████▋ | 867/1000 [1:07:18<10:19,  4.66s/it][Succeeded / Failed / Skipped / Total] 539 / 312 / 16 / 867:  87%|████████▋ | 868/1000 [1:07:18<10:14,  4.65s/it][Succeeded / Failed / Skipped / Total] 539 / 313 / 16 / 868:  87%|████████▋ | 868/1000 [1:07:18<10:14,  4.65s/it][Succeeded / Failed / Skipped / Total] 539 / 313 / 16 / 868:  87%|████████▋ | 869/1000 [1:07:22<10:09,  4.65s/it][Succeeded / Failed / Skipped / Total] 540 / 313 / 16 / 869:  87%|████████▋ | 869/1000 [1:07:22<10:09,  4.65s/it][Succeeded / Failed / Skipped / Total] 540 / 313 / 16 / 869:  87%|████████▋ | 870/1000 [1:07:26<10:04,  4.65s/it][Succeeded / Failed / Skipped / Total] 541 / 313 / 16 / 870:  87%|████████▋ | 870/1000 [1:07:26<10:04,  4.65s/it][Succeeded / Failed / Skipped / Total] 541 / 313 / 16 / 870:  87%|████████▋ | 871/1000 [1:07:31<10:00,  4.65s/it][Succeeded / Failed / Skipped / Total] 542 / 313 / 16 / 871:  87%|████████▋ | 871/1000 [1:07:31<10:00,  4.65s/it][Succeeded / Failed / Skipped / Total] 542 / 313 / 16 / 871:  87%|████████▋ | 872/1000 [1:07:36<09:55,  4.65s/it][Succeeded / Failed / Skipped / Total] 542 / 314 / 16 / 872:  87%|████████▋ | 872/1000 [1:07:36<09:55,  4.65s/it][Succeeded / Failed / Skipped / Total] 542 / 314 / 16 / 872:  87%|████████▋ | 873/1000 [1:07:40<09:50,  4.65s/it]Adds a bootstrap method . --> Generate additional footer --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle [[bootstrapMethodHandle]] , final Object ... bootstrapMethodArguments ) { ByteVector [[bootstrapMethodsAttribute]] = bootstrapMethods ; if ( [[bootstrapMethodsAttribute]] == null ) { [[bootstrapMethodsAttribute]] = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[additionalooleraremothoss]] ( final Handle [[barefootmalemebontadlos]] , final Object ... bootstrapMethodArguments ) { ByteVector [[bootmapanedeatsmaturvenle]] = bootstrapMethods ; if ( [[bootmapanedeatsmaturvenle]] == null ) { [[bootmapanedeatsmaturvenle]] = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 866 ---------------------------------------------
Add merged types . --> Quick fix method for fixbedhowff --> Socre: 1.0

[[[[Adv]]]]: int [[addMergedType]] ( final int typeTableIndex1 , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int [[fixbenbedhow]] ( final int typeTableIndex1 , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 867 ---------------------------------------------
Clear the map --> clear all elements --> Socre: 1.0

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[clears]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 868 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final String name , final String [[descriptor]] , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , [[descriptor]] , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( [[descriptor]] ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , [[descriptor]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , [[descriptor]] , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[addreaaxentfulramdccojuadgeerefeception]] ( final int tag , final String name , final String [[dosimperfecta]] , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , [[dosimperfecta]] , bootstrapMethodIndex ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == bootstrapMethodIndex && entry . name . equals ( name ) && entry . value . equals ( [[dosimperfecta]] ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , [[dosimperfecta]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , [[dosimperfecta]] , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 869 ---------------------------------------------
Returns the hash of the given name --> Calculate a frame based on a name --> Socre: 1.0

[[[[Adv]]]]: private int [[hash]] ( final String name ) { int [[h]] = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } [[h]] = 31 * [[h]] + c ; } if ( [[h]] > 0 ) { return [[h]] ; } if ( [[h]] == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - [[h]] ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int [[single]] ( final String name ) { int [[frame]] = 0 ; for ( int i = name . length ( ) - 1 ; i >= 0 ; i -- ) { char c = name . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } [[frame]] = 31 * [[frame]] + c ; } if ( [[frame]] > 0 ) { return [[frame]] ; } if ( [[frame]] == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - [[frame]] ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 870 ---------------------------------------------
Returns all values with the given name . --> turn a string into a map --> Socre: 1.0

[[[[Adv]]]]: public List < V > [[getAll]] ( final String [[name]] ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( [[name]] ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( [[name]] , e . key ) ) { values . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > [[turnlet]] ( final String [[a]] ) { LinkedList < V > values = new LinkedList <> ( ) ; int h = hash ( [[a]] ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( [[a]] , e . key ) ) { values . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return values ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 871 ---------------------------------------------
Increases the capacity if necessary . --> z zeros --> Socre: 1.0

[[[[Adv]]]]: private void [[grow]] ( final int minCapacity ) { final int oldCapacity = buffer . length ; int newCapacity = oldCapacity << 1 ; if ( newCapacity - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[z]] ( final int minCapacity ) { final int oldCapacity = buffer . length ; int newCapacity = oldCapacity << 1 ; if ( newCapacity - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 872 ---------------------------------------------
Returns a list of all entries in this set . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > all = new LinkedList <> ( ) ; MapEntry < V > [[e]] = head . after ; while ( [[e]] != head ) { all . add ( [[e]] ) ; [[e]] = [[e]] . after ; } return all ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[gates]] ( ) { List < Map . Entry < String , V > > all = new LinkedList <> ( ) ; MapEntry < V > [[display]] = head . after ; while ( [[display]] != head ) { all . add ( [[display]] ) ; [[display]] = [[display]] . after ; } return all ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 873 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 543 / 314 / 16 / 873:  87%|████████▋ | 873/1000 [1:07:40<09:50,  4.65s/it][Succeeded / Failed / Skipped / Total] 543 / 314 / 16 / 873:  87%|████████▋ | 874/1000 [1:07:43<09:45,  4.65s/it][Succeeded / Failed / Skipped / Total] 543 / 315 / 16 / 874:  87%|████████▋ | 874/1000 [1:07:43<09:45,  4.65s/it][Succeeded / Failed / Skipped / Total] 543 / 315 / 16 / 874:  88%|████████▊ | 875/1000 [1:07:44<09:40,  4.65s/it][Succeeded / Failed / Skipped / Total] 544 / 315 / 16 / 875:  88%|████████▊ | 875/1000 [1:07:44<09:40,  4.65s/it][Succeeded / Failed / Skipped / Total] 544 / 315 / 16 / 875:  88%|████████▊ | 876/1000 [1:07:47<09:35,  4.64s/it][Succeeded / Failed / Skipped / Total] 545 / 315 / 16 / 876:  88%|████████▊ | 876/1000 [1:07:47<09:35,  4.64s/it][Succeeded / Failed / Skipped / Total] 545 / 315 / 16 / 876:  88%|████████▊ | 877/1000 [1:07:49<09:30,  4.64s/it][Succeeded / Failed / Skipped / Total] 545 / 316 / 16 / 877:  88%|████████▊ | 877/1000 [1:07:49<09:30,  4.64s/it][Succeeded / Failed / Skipped / Total] 545 / 316 / 16 / 877:  88%|████████▊ | 878/1000 [1:07:51<09:25,  4.64s/it][Succeeded / Failed / Skipped / Total] 546 / 316 / 16 / 878:  88%|████████▊ | 878/1000 [1:07:51<09:25,  4.64s/it][Succeeded / Failed / Skipped / Total] 546 / 316 / 16 / 878:  88%|████████▊ | 879/1000 [1:07:52<09:20,  4.63s/it][Succeeded / Failed / Skipped / Total] 546 / 316 / 17 / 879:  88%|████████▊ | 879/1000 [1:07:52<09:20,  4.63s/it][Succeeded / Failed / Skipped / Total] 546 / 316 / 17 / 879:  88%|████████▊ | 880/1000 [1:07:56<09:15,  4.63s/it][Succeeded / Failed / Skipped / Total] 547 / 316 / 17 / 880:  88%|████████▊ | 880/1000 [1:07:56<09:15,  4.63s/it][Succeeded / Failed / Skipped / Total] 547 / 316 / 17 / 880:  88%|████████▊ | 881/1000 [1:07:56<09:10,  4.63s/it]Visits an annotation . --> visit an annotation --> Socre: 1.0

[[[[Adv]]]]: @ Override public AnnotationVisitor [[visitAnnotation]] ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor [[mitaoographyt]] ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 874 ---------------------------------------------
Returns an iterator over the elements in this map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[iterator]] ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > [[next]] ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > [[next]] = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return [[next]] ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[assigencio]] ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > [[only]] ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > [[only]] = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return [[only]] ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 875 ---------------------------------------------
Appends a character sequence to this buffer . --> Copied from FastCharSequence --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence [[csq]] , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { [[append]] ( [[csq]] . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[hoslift]] ( final CharSequence [[asi]] , final int start , final int end ) { for ( int i = start ; i < end ; i ++ ) { [[hoslift]] ( [[asi]] . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 876 ---------------------------------------------
Create delegate delegate to startChain delegation --> Replaces the altbreviation for the altabstamp --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[altbrerbstanridesbct2arrival]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 877 ---------------------------------------------
Create proxy methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[visitEnd]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[p]] = 0 ; [[p]] < tmd . proxyData . length ; [[p]] ++ ) { tmd . selectCurrentProxy ( [[p]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void [[clientlist]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[date]] = 0 ; [[date]] < tmd . proxyData . length ; [[date]] ++ ) { tmd . selectCurrentProxy ( [[date]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 878 ---------------------------------------------
Adds a field to the path . --> end a field --> Socre: 1.0

[[[[Adv]]]]: public Path [[push]] ( final CharSequence field ) { _push ( field ) ; if ( altPath != null ) { altPath . push ( field ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[bend]] ( final CharSequence field ) { _push ( field ) ; if ( altPath != null ) { altPath . push ( field ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 879 ---------------------------------------------
execute this proxy --> [[[SKIPPED]]]

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 880 ---------------------------------------------
Create a delegate to the first chain . --> Generate inttage methods --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData [[tmd]] ) { methodVisitor . visitCode ( ) ; if ( [[tmd]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , [[tmd]] . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[buildinttgrancactcttasadvance]] ( final TargetMethodData [[ckmac]] ) { methodVisitor . visitCode ( ) ; if ( [[ckmac]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[ckmac]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[ckmac]] . firstMethodName ( ) , [[ckmac]] . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[ckmac]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[ckmac]] . firstMethodName ( ) , [[ckmac]] . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , [[ckmac]] . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 881 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 548 / 316 / 17 / 881:  88%|████████▊ | 881/1000 [1:07:56<09:10,  4.63s/it][Succeeded / Failed / Skipped / Total] 548 / 316 / 17 / 881:  88%|████████▊ | 882/1000 [1:07:57<09:05,  4.62s/it][Succeeded / Failed / Skipped / Total] 548 / 317 / 17 / 882:  88%|████████▊ | 882/1000 [1:07:57<09:05,  4.62s/it][Succeeded / Failed / Skipped / Total] 548 / 317 / 17 / 882:  88%|████████▊ | 883/1000 [1:08:05<09:01,  4.63s/it][Succeeded / Failed / Skipped / Total] 549 / 317 / 17 / 883:  88%|████████▊ | 883/1000 [1:08:05<09:01,  4.63s/it][Succeeded / Failed / Skipped / Total] 549 / 317 / 17 / 883:  88%|████████▊ | 884/1000 [1:08:06<08:56,  4.62s/it][Succeeded / Failed / Skipped / Total] 550 / 317 / 17 / 884:  88%|████████▊ | 884/1000 [1:08:06<08:56,  4.62s/it][Succeeded / Failed / Skipped / Total] 550 / 317 / 17 / 884:  88%|████████▊ | 885/1000 [1:08:13<08:51,  4.62s/it][Succeeded / Failed / Skipped / Total] 551 / 317 / 17 / 885:  88%|████████▊ | 885/1000 [1:08:13<08:51,  4.62s/it][Succeeded / Failed / Skipped / Total] 551 / 317 / 17 / 885:  89%|████████▊ | 886/1000 [1:08:18<08:47,  4.63s/it][Succeeded / Failed / Skipped / Total] 551 / 318 / 17 / 886:  89%|████████▊ | 886/1000 [1:08:18<08:47,  4.63s/it][Succeeded / Failed / Skipped / Total] 551 / 318 / 17 / 886:  89%|████████▊ | 887/1000 [1:08:29<08:43,  4.63s/it][Succeeded / Failed / Skipped / Total] 551 / 319 / 17 / 887:  89%|████████▊ | 887/1000 [1:08:29<08:43,  4.63s/it][Succeeded / Failed / Skipped / Total] 551 / 319 / 17 / 887:  89%|████████▉ | 888/1000 [1:08:38<08:39,  4.64s/it]Configure the servlet context . --> Add a filter to the tree --> Socre: 1.0

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[aemrilessрweleafline]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 882 ---------------------------------------------
Parses a path string . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path parse ( final String [[path]] ) { return [[path]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[path]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path parse ( final String [[pipeline]] ) { return [[pipeline]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[pipeline]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 883 ---------------------------------------------
Read property . --> Prints the getter methods --> Socre: 1.0

[[[[Adv]]]]: private Object [[readProperty]] ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter getter = propertyDescriptor . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[printtherbyts]] ( final Object source , final PropertyDescriptor propertyDescriptor ) { Getter getter = propertyDescriptor . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 884 ---------------------------------------------
Create a proxy definition for the proxy . --> Override this method to create a BeanDefinition --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[originalType]] = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , [[originalType]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[abstractcture]] = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , [[abstractcture]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 885 ---------------------------------------------
Append a buffer to the list . --> Append the tank --> Socre: 1.0

[[[[Adv]]]]: public Buffer append ( final Buffer [[buffer]] ) { if ( [[buffer]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer append ( final Buffer [[tank]] ) { if ( [[tank]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 886 ---------------------------------------------
Convert JDBCTransactionMode to DBTransactionMode . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode [[txMode]] ) { final int isolation ; switch ( [[txMode]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , [[txMode]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode [[azmuce]] ) { final int isolation ; switch ( [[azmuce]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , [[azmuce]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 887 ---------------------------------------------
Copies all entries from the specified map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map [[t]] ) { for ( Object [[o]] : [[t]] . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) [[o]] ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[sell]] ( final Map [[a]] ) { for ( Object [[action]] : [[a]] . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) [[action]] ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
[Succeeded / Failed / Skipped / Total] 552 / 319 / 17 / 888:  89%|████████▉ | 888/1000 [1:08:38<08:39,  4.64s/it][Succeeded / Failed / Skipped / Total] 552 / 319 / 17 / 888:  89%|████████▉ | 889/1000 [1:08:42<08:34,  4.64s/it][Succeeded / Failed / Skipped / Total] 552 / 320 / 17 / 889:  89%|████████▉ | 889/1000 [1:08:42<08:34,  4.64s/it][Succeeded / Failed / Skipped / Total] 552 / 320 / 17 / 889:  89%|████████▉ | 890/1000 [1:08:50<08:30,  4.64s/it][Succeeded / Failed / Skipped / Total] 552 / 321 / 17 / 890:  89%|████████▉ | 890/1000 [1:08:50<08:30,  4.64s/it][Succeeded / Failed / Skipped / Total] 552 / 321 / 17 / 890:  89%|████████▉ | 891/1000 [1:08:52<08:25,  4.64s/it][Succeeded / Failed / Skipped / Total] 552 / 322 / 17 / 891:  89%|████████▉ | 891/1000 [1:08:52<08:25,  4.64s/it][Succeeded / Failed / Skipped / Total] 552 / 322 / 17 / 891:  89%|████████▉ | 892/1000 [1:08:54<08:20,  4.63s/it][Succeeded / Failed / Skipped / Total] 553 / 322 / 17 / 892:  89%|████████▉ | 892/1000 [1:08:54<08:20,  4.63s/it][Succeeded / Failed / Skipped / Total] 553 / 322 / 17 / 892:  89%|████████▉ | 893/1000 [1:08:54<08:15,  4.63s/it][Succeeded / Failed / Skipped / Total] 553 / 323 / 17 / 893:  89%|████████▉ | 893/1000 [1:08:54<08:15,  4.63s/it][Succeeded / Failed / Skipped / Total] 553 / 323 / 17 / 893:  89%|████████▉ | 894/1000 [1:09:00<08:10,  4.63s/it][Succeeded / Failed / Skipped / Total] 554 / 323 / 17 / 894:  89%|████████▉ | 894/1000 [1:09:00<08:10,  4.63s/it][Succeeded / Failed / Skipped / Total] 554 / 323 / 17 / 894:  90%|████████▉ | 895/1000 [1:09:01<08:05,  4.63s/it][Succeeded / Failed / Skipped / Total] 554 / 324 / 17 / 895:  90%|████████▉ | 895/1000 [1:09:01<08:05,  4.63s/it][Succeeded / Failed / Skipped / Total] 554 / 324 / 17 / 895:  90%|████████▉ | 896/1000 [1:09:02<08:00,  4.62s/it]--------------------------------------------- Result 888 ---------------------------------------------
Writes the upload data to the output stream . --> This method is used for testing --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream out ) throws IOException { for ( Object [[o]] : list ) { if ( [[o]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[o]] ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( [[o]] instanceof Uploadable ) { Uploadable [[uploadable]] = ( Uploadable ) [[o]] ; InputStream inputStream = [[uploadable]] . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void [[countro]] ( final OutputStream out ) throws IOException { for ( Object [[action]] : list ) { if ( [[action]] instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) [[action]] ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( [[action]] instanceof Uploadable ) { Uploadable [[exliftan]] = ( Uploadable ) [[action]] ; InputStream inputStream = [[exliftan]] . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 889 ---------------------------------------------
Write the progress to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream out , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[getode]] ( final OutputStream out , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 890 ---------------------------------------------
Returns an array of FieldDescriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] [[getAllFieldDescriptors]] ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { allFields [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] [[goilldediacriptpers]] ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { allFields [ index ] = fieldDescriptor ; index ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 891 ---------------------------------------------
Writes the content to a writer . --> [[[FAILED]]]

[[[[Adv]]]]: public void writeTo ( final Writer writer ) throws IOException { for ( Object [[o]] : list ) { if ( [[o]] instanceof FastByteBuffer ) { FastByteBuffer [[fastByteBuffer]] = ( FastByteBuffer ) [[o]] ; byte [ ] array = [[fastByteBuffer]] . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( [[o]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[o]] ; InputStream [[inputStream]] = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( [[inputStream]] , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( [[inputStream]] ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void writeTo ( final Writer writer ) throws IOException { for ( Object [[any]] : list ) { if ( [[any]] instanceof FastByteBuffer ) { FastByteBuffer [[freeborrymbuser]] = ( FastByteBuffer ) [[any]] ; byte [ ] array = [[freeborrymbuser]] . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( [[any]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[any]] ; InputStream [[armstral]] = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( [[armstral]] , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( [[armstral]] ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 892 ---------------------------------------------
Get a property as Integer . --> finduituit by design --> Socre: 1.0

[[[[Adv]]]]: public Integer [[getInteger]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer [[findnowuit]] ( final String [[design]] ) { Number number = ( Number ) map . get ( [[design]] ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 893 ---------------------------------------------
Returns a string value . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getString]] ( final String [[key]] ) { CharSequence [[cs]] = ( CharSequence ) map . get ( [[key]] ) ; return [[cs]] == null ? null : [[cs]] . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String [[asstriplayer]] ( final String [[keys]] ) { CharSequence [[knowles]] = ( CharSequence ) map . get ( [[keys]] ) ; return [[knowles]] == null ? null : [[knowles]] . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 894 ---------------------------------------------
Get a float value . --> Get me class --> Socre: 1.0

[[[[Adv]]]]: public Float [[getFloat]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[getmeclass]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 895 ---------------------------------------------
Get a value from the map . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] getValue ( final String key ) { [[T]] [[val]] = ( [[T]] ) map . get ( key ) ; if ( [[val]] instanceof Map ) { return ( [[T]] ) new JsonObject ( ( Map ) [[val]] ) ; } if ( [[val]] instanceof List ) { return ( [[T]] ) new JsonArray ( ( List ) [[val]] ) ; } return [[val]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[on]] > [[on]] getValue ( final String key ) { [[on]] [[pal]] = ( [[on]] ) map . get ( key ) ; if ( [[pal]] instanceof Map ) { return ( [[on]] ) new JsonObject ( ( Map ) [[pal]] ) ; } if ( [[pal]] instanceof List ) { return ( [[on]] ) new JsonArray ( ( List ) [[pal]] ) ; } return [[pal]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 896 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 555 / 324 / 17 / 896:  90%|████████▉ | 896/1000 [1:09:02<08:00,  4.62s/it][Succeeded / Failed / Skipped / Total] 555 / 324 / 17 / 896:  90%|████████▉ | 897/1000 [1:09:06<07:56,  4.62s/it][Succeeded / Failed / Skipped / Total] 556 / 324 / 17 / 897:  90%|████████▉ | 897/1000 [1:09:06<07:56,  4.62s/it][Succeeded / Failed / Skipped / Total] 556 / 324 / 17 / 897:  90%|████████▉ | 898/1000 [1:09:13<07:51,  4.63s/it][Succeeded / Failed / Skipped / Total] 557 / 324 / 17 / 898:  90%|████████▉ | 898/1000 [1:09:13<07:51,  4.63s/it][Succeeded / Failed / Skipped / Total] 557 / 324 / 17 / 898:  90%|████████▉ | 899/1000 [1:09:17<07:47,  4.62s/it][Succeeded / Failed / Skipped / Total] 557 / 325 / 17 / 899:  90%|████████▉ | 899/1000 [1:09:17<07:47,  4.62s/it][Succeeded / Failed / Skipped / Total] 557 / 325 / 17 / 899:  90%|█████████ | 900/1000 [1:09:22<07:42,  4.63s/it][Succeeded / Failed / Skipped / Total] 558 / 325 / 17 / 900:  90%|█████████ | 900/1000 [1:09:22<07:42,  4.63s/it][Succeeded / Failed / Skipped / Total] 558 / 325 / 17 / 900:  90%|█████████ | 901/1000 [1:09:27<07:37,  4.63s/it][Succeeded / Failed / Skipped / Total] 559 / 325 / 17 / 901:  90%|█████████ | 901/1000 [1:09:27<07:37,  4.63s/it][Succeeded / Failed / Skipped / Total] 559 / 325 / 17 / 901:  90%|█████████ | 902/1000 [1:09:27<07:32,  4.62s/it][Succeeded / Failed / Skipped / Total] 560 / 325 / 17 / 902:  90%|█████████ | 902/1000 [1:09:27<07:32,  4.62s/it][Succeeded / Failed / Skipped / Total] 560 / 325 / 17 / 902:  90%|█████████ | 903/1000 [1:09:40<07:29,  4.63s/it][Succeeded / Failed / Skipped / Total] 560 / 326 / 17 / 903:  90%|█████████ | 903/1000 [1:09:40<07:29,  4.63s/it][Succeeded / Failed / Skipped / Total] 560 / 326 / 17 / 903:  90%|█████████ | 904/1000 [1:09:43<07:24,  4.63s/it][Succeeded / Failed / Skipped / Total] 560 / 327 / 17 / 904:  90%|█████████ | 904/1000 [1:09:43<07:24,  4.63s/it][Succeeded / Failed / Skipped / Total] 560 / 327 / 17 / 904:  90%|█████████ | 905/1000 [1:09:48<07:19,  4.63s/it][Succeeded / Failed / Skipped / Total] 561 / 327 / 17 / 905:  90%|█████████ | 905/1000 [1:09:48<07:19,  4.63s/it][Succeeded / Failed / Skipped / Total] 561 / 327 / 17 / 905:  91%|█████████ | 906/1000 [1:09:48<07:14,  4.62s/it]Get a double value . --> Get cover dimension --> Socre: 1.0

[[[[Adv]]]]: public Double [[getDouble]] ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Double ) { return ( Double ) [[number]] ; } return [[number]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double [[coverdimstic]] ( final String key ) { Number [[c]] = ( Number ) map . get ( key ) ; if ( [[c]] == null ) { return null ; } if ( [[c]] instanceof Double ) { return ( Double ) [[c]] ; } return [[c]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 897 ---------------------------------------------
Get a long value . --> Get a specific hook --> Socre: 1.0

[[[[Adv]]]]: public Long [[getLong]] ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Long ) { return ( Long ) [[number]] ; } return [[number]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long [[hotru]] ( final String [[hook]] ) { Number [[band]] = ( Number ) map . get ( [[hook]] ) ; if ( [[band]] == null ) { return null ; } if ( [[band]] instanceof Long ) { return ( Long ) [[band]] ; } return [[band]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 898 ---------------------------------------------
Updates the flags for the mailbox . --> Methode d a message --> Socre: 1.0

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[detailemanttreug]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 899 ---------------------------------------------
Sets the value for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonObject [[put]] ( final String [[key]] , final String value ) { Objects . requireNonNull ( [[key]] ) ; map . put ( [[key]] , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject [[fix]] ( final String [[ana]] , final String value ) { Objects . requireNonNull ( [[ana]] ) ; map . put ( [[ana]] , value ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 900 ---------------------------------------------
Close the folder if it was opened . --> Close the crlistery --> Socre: 1.0

[[[[Adv]]]]: protected void [[closeFolderIfOpened]] ( final Folder [[folder]] ) { if ( [[folder]] != null ) { try { [[folder]] . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void [[crlisteryforointint]] ( final Folder [[again]] ) { if ( [[again]] != null ) { try { [[again]] . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 901 ---------------------------------------------
Use this method to open the specified folder . --> Perform the cover of the specified directory --> Socre: 1.0

[[[[Adv]]]]: public void [[useFolder]] ( final String [[folderName]] ) { closeFolderIfOpened ( folder ) ; try { this . [[folderName]] = [[folderName]] ; this . folder = getService ( ) . getFolder ( [[folderName]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[folderName]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void [[coverformator]] ( final String [[directoryid]] ) { closeFolderIfOpened ( folder ) ; try { this . [[sectionprofile]] = [[directoryid]] ; this . folder = getService ( ) . getFolder ( [[directoryid]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[directoryid]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 902 ---------------------------------------------
Create alias for target . --> Build barcodes --> Socre: 1.0

[[[[Adv]]]]: protected String [[alias]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String [[baroness]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 903 ---------------------------------------------
Look up a named parameter with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String [[name]] ) { DbQueryNamedParameter [[p]] = rootNP ; while ( [[p]] != null ) { if ( [[p]] . equalsName ( [[name]] ) ) { return [[p]] ; } [[p]] = [[p]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[movespacegpapriint]] ( final String [[key]] ) { DbQueryNamedParameter [[u]] = rootNP ; while ( [[u]] != null ) { if ( [[u]] . equalsName ( [[key]] ) ) { return [[u]] ; } [[u]] = [[u]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 904 ---------------------------------------------
Perform validation . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean validateAction ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean validateAction ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 905 ---------------------------------------------
Adds a new violation . --> Associates this constraint with the specified IVology --> Socre: 1.0

[[[[Adv]]]]: protected void [[addViolation]] ( final String [[name]] , final Object [[invalidValue]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[name]] , this , [[invalidValue]] ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void [[associateivology]] ( final String [[id]] , final Object [[nulltime10]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[id]] , this , [[nulltime10]] ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 906 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 562 / 327 / 17 / 906:  91%|█████████ | 906/1000 [1:09:48<07:14,  4.62s/it][Succeeded / Failed / Skipped / Total] 562 / 327 / 17 / 906:  91%|█████████ | 907/1000 [1:09:57<07:10,  4.63s/it][Succeeded / Failed / Skipped / Total] 563 / 327 / 17 / 907:  91%|█████████ | 907/1000 [1:09:57<07:10,  4.63s/it][Succeeded / Failed / Skipped / Total] 563 / 327 / 17 / 907:  91%|█████████ | 908/1000 [1:09:57<07:05,  4.62s/it][Succeeded / Failed / Skipped / Total] 564 / 327 / 17 / 908:  91%|█████████ | 908/1000 [1:09:57<07:05,  4.62s/it][Succeeded / Failed / Skipped / Total] 564 / 327 / 17 / 908:  91%|█████████ | 909/1000 [1:10:01<07:00,  4.62s/it][Succeeded / Failed / Skipped / Total] 565 / 327 / 17 / 909:  91%|█████████ | 909/1000 [1:10:01<07:00,  4.62s/it][Succeeded / Failed / Skipped / Total] 565 / 327 / 17 / 909:  91%|█████████ | 910/1000 [1:10:04<06:55,  4.62s/it][Succeeded / Failed / Skipped / Total] 565 / 328 / 17 / 910:  91%|█████████ | 910/1000 [1:10:04<06:55,  4.62s/it][Succeeded / Failed / Skipped / Total] 565 / 328 / 17 / 910:  91%|█████████ | 911/1000 [1:10:11<06:51,  4.62s/it][Succeeded / Failed / Skipped / Total] 566 / 328 / 17 / 911:  91%|█████████ | 911/1000 [1:10:11<06:51,  4.62s/it][Succeeded / Failed / Skipped / Total] 566 / 328 / 17 / 911:  91%|█████████ | 912/1000 [1:10:11<06:46,  4.62s/it][Succeeded / Failed / Skipped / Total] 566 / 329 / 17 / 912:  91%|█████████ | 912/1000 [1:10:11<06:46,  4.62s/it][Succeeded / Failed / Skipped / Total] 566 / 329 / 17 / 912:  91%|█████████▏| 913/1000 [1:10:18<06:41,  4.62s/it]Sets the mime type . --> Sets the raw data . --> Socre: 1.0

[[[[Adv]]]]: public RawData as ( final String [[mimeOrExtension]] ) { if ( [[mimeOrExtension]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[mimeOrExtension]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[mimeOrExtension]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData as ( final String [[leslieimoverkection]] ) { if ( [[leslieimoverkection]] . contains ( StringPool . SLASH ) ) { this . mimeType = [[leslieimoverkection]] ; } else { this . mimeType = MimeTypes . getMimeType ( [[leslieimoverkection]] ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 907 ---------------------------------------------
Sets the download file . --> Set cksaurus --> Socre: 1.0

[[[[Adv]]]]: public RawData [[downloadableAs]] ( final String downloadFileName ) { this . [[downloadFileName]] = downloadFileName ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData [[cksaurus]] ( final String downloadFileName ) { this . [[createwialameo]] = downloadFileName ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 908 ---------------------------------------------
Sets the target . --> ztilt --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream [[target]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[target]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[ztbet]] ( final InputStream [[output]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[output]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 909 ---------------------------------------------
Sets the target . --> zgarget --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final String [[targetName]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[targetName]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[targetName]] ) ; } targetClassName = [[targetName]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[targetName]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[zgargent]] ( final String [[bandy]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[bandy]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[bandy]] ) ; } targetClassName = [[bandy]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[bandy]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 910 ---------------------------------------------
If target is null throws an exception . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[parent]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 911 ---------------------------------------------
Create proxy . --> Checks if the proxy is present in the debug folder --> Socre: 1.0

[[[[Adv]]]]: public byte [ ] [[create]] ( ) { process ( ) ; byte [ ] [[result]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[result]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] [[present]] ( ) { process ( ) ; byte [ ] [[after]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[after]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[after]] ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 912 ---------------------------------------------
Sets the target class . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[setTarget]] ( final Class [[target]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[target]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[target]] . getName ( ) ) ; } targetClass = [[target]] ; targetClassName = [[target]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[target]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[compiledturlike]] ( final Class [[principal]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[principal]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[principal]] . getName ( ) ) ; } targetClass = [[principal]] ; targetClassName = [[principal]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[principal]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 913 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 567 / 329 / 17 / 913:  91%|█████████▏| 913/1000 [1:10:18<06:41,  4.62s/it][Succeeded / Failed / Skipped / Total] 567 / 329 / 17 / 913:  91%|█████████▏| 914/1000 [1:10:21<06:37,  4.62s/it][Succeeded / Failed / Skipped / Total] 568 / 329 / 17 / 914:  91%|█████████▏| 914/1000 [1:10:21<06:37,  4.62s/it][Succeeded / Failed / Skipped / Total] 568 / 329 / 17 / 914:  92%|█████████▏| 915/1000 [1:10:24<06:32,  4.62s/it][Succeeded / Failed / Skipped / Total] 568 / 330 / 17 / 915:  92%|█████████▏| 915/1000 [1:10:24<06:32,  4.62s/it][Succeeded / Failed / Skipped / Total] 568 / 330 / 17 / 915:  92%|█████████▏| 916/1000 [1:10:24<06:27,  4.61s/it][Succeeded / Failed / Skipped / Total] 568 / 331 / 17 / 916:  92%|█████████▏| 916/1000 [1:10:24<06:27,  4.61s/it][Succeeded / Failed / Skipped / Total] 568 / 331 / 17 / 916:  92%|█████████▏| 917/1000 [1:10:31<06:22,  4.61s/it][Succeeded / Failed / Skipped / Total] 568 / 332 / 17 / 917:  92%|█████████▏| 917/1000 [1:10:31<06:22,  4.61s/it][Succeeded / Failed / Skipped / Total] 568 / 332 / 17 / 917:  92%|█████████▏| 918/1000 [1:10:35<06:18,  4.61s/it][Succeeded / Failed / Skipped / Total] 568 / 333 / 17 / 918:  92%|█████████▏| 918/1000 [1:10:35<06:18,  4.61s/it][Succeeded / Failed / Skipped / Total] 568 / 333 / 17 / 918:  92%|█████████▏| 919/1000 [1:10:40<06:13,  4.61s/it][Succeeded / Failed / Skipped / Total] 569 / 333 / 17 / 919:  92%|█████████▏| 919/1000 [1:10:40<06:13,  4.61s/it][Succeeded / Failed / Skipped / Total] 569 / 333 / 17 / 919:  92%|█████████▏| 920/1000 [1:10:42<06:08,  4.61s/it][Succeeded / Failed / Skipped / Total] 570 / 333 / 17 / 920:  92%|█████████▏| 920/1000 [1:10:42<06:08,  4.61s/it][Succeeded / Failed / Skipped / Total] 570 / 333 / 17 / 920:  92%|█████████▏| 921/1000 [1:10:43<06:04,  4.61s/it][Succeeded / Failed / Skipped / Total] 571 / 333 / 17 / 921:  92%|█████████▏| 921/1000 [1:10:43<06:04,  4.61s/it][Succeeded / Failed / Skipped / Total] 571 / 333 / 17 / 921:  92%|█████████▏| 922/1000 [1:10:52<05:59,  4.61s/it]Write the class in debug folder . --> archive debugbug console --> Socre: 1.0

[[[[Adv]]]]: protected void [[dumpClassInDebugFolder]] ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void [[archivebarptbugaster]] ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 914 ---------------------------------------------
Set the recipient address . --> Send a new email --> Socre: 1.0

[[[[Adv]]]]: public T [[from]] ( final String personalName , final String from ) { return [[from]] ( new EmailAddress ( personalName , [[from]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T [[mail]] ( final String personalName , final String from ) { return [[mail]] ( new EmailAddress ( personalName , [[mail]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 915 ---------------------------------------------
Receive messages from Folder . --> [[[FAILED]]]

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean [[envelope]] , final Consumer < Message [ ] > [[processedMessageConsumer]] ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( [[envelope]] ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter filter , final Flags flagsToSet , final Flags flagsToUnset , final boolean [[note]] , final Consumer < Message [ ] > [[expressyssargenceocchaix]] ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] messages ; try { if ( filter == null ) { messages = folder . getMessages ( ) ; } else { messages = folder . search ( filter . getSearchTerm ( ) ) ; } if ( messages . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( [[note]] ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( messages , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 916 ---------------------------------------------
Creates a new proxy instance . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class [[type]] = define ( ) ; try { return ClassUtil . newInstance ( [[type]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[dictionaryresters]] ( ) { Class [[flag]] = define ( ) ; try { return ClassUtil . newInstance ( [[flag]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 917 ---------------------------------------------
Set the recipient address . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[to]] ( final EmailAddress [[to]] ) { this . [[to]] = ArraysUtil . append ( this . [[to]] , [[to]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T [[top]] ( final EmailAddress [[button]] ) { this . [[first]] = ArraysUtil . append ( this . [[first]] , [[top]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 918 ---------------------------------------------
Add a to recipient --> [[[FAILED]]]

[[[[Adv]]]]: public T to ( final String [[personalName]] , final String to ) { return to ( new EmailAddress ( [[personalName]] , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T to ( final String [[cargirl]] , final String to ) { return to ( new EmailAddress ( [[cargirl]] , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 919 ---------------------------------------------
Sets the reply addresses . --> Set email ome --> Socre: 1.0

[[[[Adv]]]]: public T [[REPLACEME0]] ( final EmailAddress ... [[REPLACEME0]] ) { this . [[replyTo]] = ArraysUtil . join ( this . [[replyTo]] , valueOrEmptyArray ( [[REPLACEME0]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T [[handlemeoa]] ( final EmailAddress ... [[handlemeoa]] ) { this . [[counterlo]] = ArraysUtil . join ( this . [[counterlo]] , valueOrEmptyArray ( [[handlemeoa]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 920 ---------------------------------------------
Add a text message to the email . --> Sets the body of the email --> Socre: 1.0

[[[[Adv]]]]: public T [[textMessage]] ( final String text , final String encoding ) { return message ( new EmailMessage ( text , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[bodygamsalh]] ( final String text , final String encoding ) { return message ( new EmailMessage ( text , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 921 ---------------------------------------------
Sets the cc recipient address . --> Sets the recipients of the recipient --> Socre: 1.0

[[[[Adv]]]]: public T cc ( final EmailAddress ... [[ccs]] ) { this . [[cc]] = ArraysUtil . join ( this . [[cc]] , valueOrEmptyArray ( [[ccs]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T cc ( final EmailAddress ... [[voos]] ) { this . [[sector]] = ArraysUtil . join ( this . [[sector]] , valueOrEmptyArray ( [[voos]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 922 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 572 / 333 / 17 / 922:  92%|█████████▏| 922/1000 [1:10:52<05:59,  4.61s/it][Succeeded / Failed / Skipped / Total] 572 / 333 / 17 / 922:  92%|█████████▏| 923/1000 [1:10:57<05:55,  4.61s/it][Succeeded / Failed / Skipped / Total] 572 / 334 / 17 / 923:  92%|█████████▏| 923/1000 [1:10:57<05:55,  4.61s/it][Succeeded / Failed / Skipped / Total] 572 / 334 / 17 / 923:  92%|█████████▏| 924/1000 [1:10:58<05:50,  4.61s/it][Succeeded / Failed / Skipped / Total] 573 / 334 / 17 / 924:  92%|█████████▏| 924/1000 [1:10:58<05:50,  4.61s/it][Succeeded / Failed / Skipped / Total] 573 / 334 / 17 / 924:  92%|█████████▎| 925/1000 [1:11:00<05:45,  4.61s/it][Succeeded / Failed / Skipped / Total] 573 / 335 / 17 / 925:  92%|█████████▎| 925/1000 [1:11:00<05:45,  4.61s/it][Succeeded / Failed / Skipped / Total] 573 / 335 / 17 / 925:  93%|█████████▎| 926/1000 [1:11:06<05:40,  4.61s/it][Succeeded / Failed / Skipped / Total] 574 / 335 / 17 / 926:  93%|█████████▎| 926/1000 [1:11:06<05:40,  4.61s/it][Succeeded / Failed / Skipped / Total] 574 / 335 / 17 / 926:  93%|█████████▎| 927/1000 [1:11:08<05:36,  4.60s/it][Succeeded / Failed / Skipped / Total] 575 / 335 / 17 / 927:  93%|█████████▎| 927/1000 [1:11:08<05:36,  4.60s/it][Succeeded / Failed / Skipped / Total] 575 / 335 / 17 / 927:  93%|█████████▎| 928/1000 [1:11:09<05:31,  4.60s/it][Succeeded / Failed / Skipped / Total] 575 / 336 / 17 / 928:  93%|█████████▎| 928/1000 [1:11:09<05:31,  4.60s/it][Succeeded / Failed / Skipped / Total] 575 / 336 / 17 / 928:  93%|█████████▎| 929/1000 [1:11:13<05:26,  4.60s/it]Create a new email message with the specified encoding . --> Add email to email --> Socre: 1.0

[[[[Adv]]]]: public T [[htmlMessage]] ( final String [[html]] , final String encoding ) { return message ( new EmailMessage ( [[html]] , MimeTypes . MIME_TEXT_HTML , encoding ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[canvasasehade]] ( final String [[style]] , final String encoding ) { return message ( new EmailMessage ( [[style]] , MimeTypes . MIME_TEXT_HTML , encoding ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 923 ---------------------------------------------
Adds a header to the response . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[header]] ( final String [[name]] , final String value ) { headers . put ( [[name]] , value ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[list]] ( final String [[style]] , final String value ) { headers . put ( [[style]] , value ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 924 ---------------------------------------------
Get a system property by name . --> Get a design variable by name --> Socre: 1.0

[[[[Adv]]]]: public static String get ( final String name , final String [[defaultValue]] ) { Objects . requireNonNull ( name ) ; String [[value]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[value]] = System . getProperty ( name ) ; } else { [[value]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( [[value]] == null ) { return [[defaultValue]] ; } return [[value]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String get ( final String name , final String [[designvarver]] ) { Objects . requireNonNull ( name ) ; String [[designation]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[designation]] = System . getProperty ( name ) ; } else { [[designation]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( [[designation]] == null ) { return [[designvarver]] ; } return [[designation]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 925 ---------------------------------------------
Defines the proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public Class [[define]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] [[bytes]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[bytes]] ) ; return DefineClass . of ( getProxyClassName ( ) , [[bytes]] , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class [[recruit]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] [[fields]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[fields]] ) ; return DefineClass . of ( getProxyClassName ( ) , [[fields]] , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 926 ---------------------------------------------
Returns boolean value . --> Determines if a yepon is specified --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[getBoolean]] ( final String name , final boolean defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "[[False]]" != "[[False]]" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean [[seeoyepon]] ( final String name , final boolean defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "[[negative]]" != "[[negative]]" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 927 ---------------------------------------------
Returns the long value for the given name . --> Get a uuid --> Socre: 1.0

[[[[Adv]]]]: public static long [[getInt]] ( final String name , final int defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long [[buyuid]] ( final String name , final int defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 928 ---------------------------------------------
Gets the resolved parameters . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[getnesaplimdmed]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
[Succeeded / Failed / Skipped / Total] 576 / 336 / 17 / 929:  93%|█████████▎| 929/1000 [1:11:13<05:26,  4.60s/it][Succeeded / Failed / Skipped / Total] 576 / 336 / 17 / 929:  93%|█████████▎| 930/1000 [1:11:23<05:22,  4.61s/it][Succeeded / Failed / Skipped / Total] 577 / 336 / 17 / 930:  93%|█████████▎| 930/1000 [1:11:23<05:22,  4.61s/it][Succeeded / Failed / Skipped / Total] 577 / 336 / 17 / 930:  93%|█████████▎| 931/1000 [1:11:31<05:18,  4.61s/it][Succeeded / Failed / Skipped / Total] 578 / 336 / 17 / 931:  93%|█████████▎| 931/1000 [1:11:31<05:18,  4.61s/it][Succeeded / Failed / Skipped / Total] 578 / 336 / 17 / 931:  93%|█████████▎| 932/1000 [1:11:34<05:13,  4.61s/it][Succeeded / Failed / Skipped / Total] 578 / 337 / 17 / 932:  93%|█████████▎| 932/1000 [1:11:34<05:13,  4.61s/it][Succeeded / Failed / Skipped / Total] 578 / 337 / 17 / 932:  93%|█████████▎| 933/1000 [1:11:39<05:08,  4.61s/it][Succeeded / Failed / Skipped / Total] 579 / 337 / 17 / 933:  93%|█████████▎| 933/1000 [1:11:39<05:08,  4.61s/it][Succeeded / Failed / Skipped / Total] 579 / 337 / 17 / 933:  93%|█████████▎| 934/1000 [1:11:41<05:03,  4.61s/it][Succeeded / Failed / Skipped / Total] 580 / 337 / 17 / 934:  93%|█████████▎| 934/1000 [1:11:41<05:03,  4.61s/it][Succeeded / Failed / Skipped / Total] 580 / 337 / 17 / 934:  94%|█████████▎| 935/1000 [1:11:42<04:59,  4.60s/it][Succeeded / Failed / Skipped / Total] 581 / 337 / 17 / 935:  94%|█████████▎| 935/1000 [1:11:42<04:59,  4.60s/it][Succeeded / Failed / Skipped / Total] 581 / 337 / 17 / 935:  94%|█████████▎| 936/1000 [1:11:51<04:54,  4.61s/it][Succeeded / Failed / Skipped / Total] 582 / 337 / 17 / 936:  94%|█████████▎| 936/1000 [1:11:51<04:54,  4.61s/it][Succeeded / Failed / Skipped / Total] 582 / 337 / 17 / 936:  94%|█████████▎| 937/1000 [1:11:52<04:49,  4.60s/it][Succeeded / Failed / Skipped / Total] 583 / 337 / 17 / 937:  94%|█████████▎| 937/1000 [1:11:52<04:49,  4.60s/it][Succeeded / Failed / Skipped / Total] 583 / 337 / 17 / 937:  94%|█████████▍| 938/1000 [1:11:59<04:45,  4.61s/it]--------------------------------------------- Result 929 ---------------------------------------------
Serialize a key value pair . --> Calculates the count of nodes in the current context --> Socre: 1.0

[[[[Adv]]]]: protected int [[serializeKeyValue]] ( final JsonContext jsonContext , final Path currentPath , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int [[principalizesdevtimetree]] ( final JsonContext jsonContext , final Path currentPath , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 930 ---------------------------------------------
Resolves the result path . --> Tries to answer a WPOpo wicket wird --> Socre: 1.0

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String path , String value ) { boolean absolutePath = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[answerneswpo]] ( String path , String value ) { boolean absolutePath = "False" != "False" ; if ( value != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 931 ---------------------------------------------
Looks up the path alias for the given alias . --> Returns work manager name --> Socre: 1.0

[[[[Adv]]]]: protected String [[lookupAlias]] ( final String [[alias]] ) { String [[value]] = actionsManager . lookupPathAlias ( [[alias]] ) ; if ( [[value]] == null ) { ActionRuntime cfg = actionsManager . lookup ( [[alias]] ) ; if ( cfg != null ) { [[value]] = cfg . getActionPath ( ) ; } } return [[value]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String [[workesmanasa]] ( final String [[reclaim]] ) { String [[number]] = actionsManager . lookupPathAlias ( [[reclaim]] ) ; if ( [[number]] == null ) { ActionRuntime cfg = actionsManager . lookup ( [[reclaim]] ) ; if ( cfg != null ) { [[number]] = cfg . getActionPath ( ) ; } } return [[number]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 932 ---------------------------------------------
Returns the long value . --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLong]] ( final String name , final long defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[winlong]] ( final String name , final long defaultValue ) { String value = get ( name ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 933 ---------------------------------------------
Resolve alias . --> Generate a lineacses string --> Socre: 1.0

[[[[Adv]]]]: protected String [[resolveAlias]] ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String [[lineacses]] ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 934 ---------------------------------------------
Returns the index of the last dot in the given string . --> returns - 1 if no active --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < str . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[byendpassactiveglestage]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < str . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 935 ---------------------------------------------
Returns the index of the last dot after dot . --> Methode d a colon - portlet --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[ltrenevoursartporttroint]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 936 ---------------------------------------------
Resolves the path with the given path and value . --> Returns the address of the band --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String [[path]] , final String value ) { final ResultPath resultPath = resolveResultPath ( [[path]] , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[addressxidnotanthort]] ( final String [[band]] , final String value ) { final ResultPath resultPath = resolveResultPath ( [[band]] , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 937 ---------------------------------------------
Strips the last camel word from the given name . --> Parses the name of the given string . --> Socre: 1.0

[[[[Adv]]]]: public static String [[stripLastCamelWord]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String [[andaspicpililass]] ( String name ) { int ndx = name . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( name . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { name = name . substring ( 0 , ndx ) ; } return name ; }
[[[[Nl]]]]: Removes last CamelWord
[Succeeded / Failed / Skipped / Total] 584 / 337 / 17 / 938:  94%|█████████▍| 938/1000 [1:11:59<04:45,  4.61s/it][Succeeded / Failed / Skipped / Total] 584 / 337 / 17 / 938:  94%|█████████▍| 939/1000 [1:12:07<04:41,  4.61s/it][Succeeded / Failed / Skipped / Total] 584 / 338 / 17 / 939:  94%|█████████▍| 939/1000 [1:12:07<04:41,  4.61s/it][Succeeded / Failed / Skipped / Total] 584 / 338 / 17 / 939:  94%|█████████▍| 940/1000 [1:12:07<04:36,  4.60s/it][Succeeded / Failed / Skipped / Total] 585 / 338 / 17 / 940:  94%|█████████▍| 940/1000 [1:12:07<04:36,  4.60s/it][Succeeded / Failed / Skipped / Total] 585 / 338 / 17 / 940:  94%|█████████▍| 941/1000 [1:12:14<04:31,  4.61s/it][Succeeded / Failed / Skipped / Total] 586 / 338 / 17 / 941:  94%|█████████▍| 941/1000 [1:12:14<04:31,  4.61s/it][Succeeded / Failed / Skipped / Total] 586 / 338 / 17 / 941:  94%|█████████▍| 942/1000 [1:12:15<04:26,  4.60s/it][Succeeded / Failed / Skipped / Total] 587 / 338 / 17 / 942:  94%|█████████▍| 942/1000 [1:12:15<04:26,  4.60s/it][Succeeded / Failed / Skipped / Total] 587 / 338 / 17 / 942:  94%|█████████▍| 943/1000 [1:12:16<04:22,  4.60s/it][Succeeded / Failed / Skipped / Total] 588 / 338 / 17 / 943:  94%|█████████▍| 943/1000 [1:12:16<04:22,  4.60s/it][Succeeded / Failed / Skipped / Total] 588 / 338 / 17 / 943:  94%|█████████▍| 944/1000 [1:12:25<04:17,  4.60s/it][Succeeded / Failed / Skipped / Total] 589 / 338 / 17 / 944:  94%|█████████▍| 944/1000 [1:12:25<04:17,  4.60s/it][Succeeded / Failed / Skipped / Total] 589 / 338 / 17 / 944:  94%|█████████▍| 945/1000 [1:12:35<04:13,  4.61s/it][Succeeded / Failed / Skipped / Total] 590 / 338 / 17 / 945:  94%|█████████▍| 945/1000 [1:12:35<04:13,  4.61s/it][Succeeded / Failed / Skipped / Total] 590 / 338 / 17 / 945:  95%|█████████▍| 946/1000 [1:12:40<04:08,  4.61s/it][Succeeded / Failed / Skipped / Total] 591 / 338 / 17 / 946:  95%|█████████▍| 946/1000 [1:12:40<04:08,  4.61s/it][Succeeded / Failed / Skipped / Total] 591 / 338 / 17 / 946:  95%|█████████▍| 947/1000 [1:12:48<04:04,  4.61s/it][Succeeded / Failed / Skipped / Total] 592 / 338 / 17 / 947:  95%|█████████▍| 947/1000 [1:12:48<04:04,  4.61s/it][Succeeded / Failed / Skipped / Total] 592 / 338 / 17 / 947:  95%|█████████▍| 948/1000 [1:12:50<03:59,  4.61s/it]--------------------------------------------- Result 938 ---------------------------------------------
Initializes the cache with the given key and tweak and tweak . --> helper method to herf --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final long [ ] key , final long [ ] tweak ) { final int newNw = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void [[herf]] ( final long [ ] key , final long [ ] tweak ) { final int newNw = key . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 939 ---------------------------------------------
Returns the index of the first dot after dot . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[indexOfDotAfterSlash]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return str . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int [[fxopanafiisp]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return str . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 940 ---------------------------------------------
Multiply x . --> Friendly love love --> Socre: 1.0

[[[[Adv]]]]: private void [[mix]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void [[love]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 941 ---------------------------------------------
Key schedule . --> Blocking call --> Socre: 1.0

[[[[Adv]]]]: private void [[keySchedule]] ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .

[[[[Adv]]]]: private void [[blesoce]] ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 942 ---------------------------------------------
Moves the poix of a given position . --> inomial x --> Socre: 1.0

[[[[Adv]]]]: private void [[demix]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void [[dicex]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 943 ---------------------------------------------
Resolves the schema name . --> Returns the delefine permutation --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveSchemaName]] ( final Class < ? > [[type]] , final String [[defaultSchemaName]] ) { String [[schemaName]] = null ; final DbTable [[dbTable]] = [[type]] . getAnnotation ( DbTable . class ) ; if ( [[dbTable]] != null ) { [[schemaName]] = [[dbTable]] . schema ( ) . trim ( ) ; } if ( ( [[schemaName]] == null ) || ( [[schemaName]] . length ( ) == 0 ) ) { [[schemaName]] = [[defaultSchemaName]] ; } return [[schemaName]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String [[delawarespermottine]] ( final Class < ? > [[s]] , final String [[nullarehemmina]] ) { String [[steflowfront]] = null ; final DbTable [[dsrac]] = [[s]] . getAnnotation ( DbTable . class ) ; if ( [[dsrac]] != null ) { [[steflowfront]] = [[dsrac]] . schema ( ) . trim ( ) ; } if ( ( [[steflowfront]] == null ) || ( [[steflowfront]] . length ( ) == 0 ) ) { [[steflowfront]] = [[nullarehemmina]] ; } return [[steflowfront]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 944 ---------------------------------------------
This method converts a byte array into a long array . --> Utility method for unit testing --> Socre: 1.0

[[[[Adv]]]]: protected static long [ ] [[bytesToLongs]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] [[blocksatmaloperations]] ( final byte [ ] ba , final int offset , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = offset ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 945 ---------------------------------------------
Encrypt a block . --> Encrypt the image --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[encryptBlock]] ( final byte [ ] [[content]] , final int [[offset]] ) { long [ ] contentBlock = bytesToLongs ( [[content]] , [[offset]] , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] [[artpalyarutlog]] ( final byte [ ] [[format]] , final int [[extension]] ) { long [ ] contentBlock = bytesToLongs ( [[format]] , [[extension]] , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 946 ---------------------------------------------
Gets the path . --> Get the style for this method --> Socre: 1.0

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[style]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[style]] ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 947 ---------------------------------------------
Zips a given file --> Zooub --> Socre: 1.0

[[[[Adv]]]]: public static File [[zlib]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream [[fis]] = new FileInputStream ( file ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( [[fis]] , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( [[fis]] ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File [[djub]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream [[ms]] = new FileInputStream ( file ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = file . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( [[ms]] , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( [[ms]] ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 948 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 593 / 338 / 17 / 948:  95%|█████████▍| 948/1000 [1:12:50<03:59,  4.61s/it][Succeeded / Failed / Skipped / Total] 593 / 338 / 17 / 948:  95%|█████████▍| 949/1000 [1:12:53<03:55,  4.61s/it][Succeeded / Failed / Skipped / Total] 594 / 338 / 17 / 949:  95%|█████████▍| 949/1000 [1:12:53<03:55,  4.61s/it][Succeeded / Failed / Skipped / Total] 594 / 338 / 17 / 949:  95%|█████████▌| 950/1000 [1:12:54<03:50,  4.61s/it][Succeeded / Failed / Skipped / Total] 595 / 338 / 17 / 950:  95%|█████████▌| 950/1000 [1:12:54<03:50,  4.61s/it][Succeeded / Failed / Skipped / Total] 595 / 338 / 17 / 950:  95%|█████████▌| 951/1000 [1:13:02<03:45,  4.61s/it][Succeeded / Failed / Skipped / Total] 596 / 338 / 17 / 951:  95%|█████████▌| 951/1000 [1:13:02<03:45,  4.61s/it][Succeeded / Failed / Skipped / Total] 596 / 338 / 17 / 951:  95%|█████████▌| 952/1000 [1:13:03<03:41,  4.60s/it][Succeeded / Failed / Skipped / Total] 597 / 338 / 17 / 952:  95%|█████████▌| 952/1000 [1:13:03<03:41,  4.60s/it][Succeeded / Failed / Skipped / Total] 597 / 338 / 17 / 952:  95%|█████████▌| 953/1000 [1:13:09<03:36,  4.61s/it][Succeeded / Failed / Skipped / Total] 598 / 338 / 17 / 953:  95%|█████████▌| 953/1000 [1:13:09<03:36,  4.61s/it][Succeeded / Failed / Skipped / Total] 598 / 338 / 17 / 953:  95%|█████████▌| 954/1000 [1:13:13<03:31,  4.60s/it]Resolves column descriptors . --> Handles ORM --> Socre: 1.0

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[resolveColumnDescriptors]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean [[isId]] = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[handleorquendamatora]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean [[alsoᵢ]] = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 949 ---------------------------------------------
UngZipped file . --> Ungzip a file --> Socre: 1.0

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File [[out]] = new File ( outFileName ) ; [[out]] . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( [[out]] ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return [[out]] ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File [[at]] = new File ( outFileName ) ; [[at]] . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( [[at]] ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return [[at]] ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 950 ---------------------------------------------
Remove any bounding box . --> Removes cero class --> Socre: 1.0

[[[[Adv]]]]: private static String [[removeAnyBounding]] ( final char s , final char e , final String [[str]] ) { if ( [[str]] == null || [[str]] . length ( ) < 2 ) { return [[str]] ; } if ( [[str]] . startsWith ( String . valueOf ( s ) ) && [[str]] . endsWith ( String . valueOf ( e ) ) ) { return [[str]] . substring ( 1 , [[str]] . length ( ) - 1 ) ; } return [[str]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String [[destroywayattclass]] ( final char s , final char e , final String [[cero]] ) { if ( [[cero]] == null || [[cero]] . length ( ) < 2 ) { return [[cero]] ; } if ( [[cero]] . startsWith ( String . valueOf ( s ) ) && [[cero]] . endsWith ( String . valueOf ( e ) ) ) { return [[cero]] . substring ( 1 , [[cero]] . length ( ) - 1 ) ; } return [[cero]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 951 ---------------------------------------------
Gzip a file --> GZipped files --> Socre: 1.0

[[[[Adv]]]]: public static File [[gzip]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; String [[gzipName]] = file . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( [[gzipName]] ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( [[gzipName]] ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File [[hzhipped]] ( final File file ) throws IOException { if ( file . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( file ) ; String [[colcipenas]] = file . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( [[colcipenas]] ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( [[colcipenas]] ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 952 ---------------------------------------------
Unzip a zip file --> Unzip a polyfile --> Socre: 1.0

[[[[Adv]]]]: public static void unzip ( final String [[zipFile]] , final String destDir , final String ... patterns ) throws IOException { unzip ( new File ( [[zipFile]] ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void unzip ( final String [[polyifsize]] , final String destDir , final String ... patterns ) throws IOException { unzip ( new File ( [[polyifsize]] ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 953 ---------------------------------------------
Adds the specified file to the ZIP output stream . --> Extend a file extension --> Socre: 1.0

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[extensionteazenl]] ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 954 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 599 / 338 / 17 / 954:  95%|█████████▌| 954/1000 [1:13:13<03:31,  4.60s/it][Succeeded / Failed / Skipped / Total] 599 / 338 / 17 / 954:  96%|█████████▌| 955/1000 [1:13:23<03:27,  4.61s/it][Succeeded / Failed / Skipped / Total] 600 / 338 / 17 / 955:  96%|█████████▌| 955/1000 [1:13:23<03:27,  4.61s/it][Succeeded / Failed / Skipped / Total] 600 / 338 / 17 / 955:  96%|█████████▌| 956/1000 [1:13:35<03:23,  4.62s/it][Succeeded / Failed / Skipped / Total] 601 / 338 / 17 / 956:  96%|█████████▌| 956/1000 [1:13:35<03:23,  4.62s/it][Succeeded / Failed / Skipped / Total] 601 / 338 / 17 / 956:  96%|█████████▌| 957/1000 [1:13:44<03:18,  4.62s/it][Succeeded / Failed / Skipped / Total] 601 / 339 / 17 / 957:  96%|█████████▌| 957/1000 [1:13:44<03:18,  4.62s/it][Succeeded / Failed / Skipped / Total] 601 / 339 / 17 / 957:  96%|█████████▌| 958/1000 [1:13:46<03:14,  4.62s/it][Succeeded / Failed / Skipped / Total] 601 / 340 / 17 / 958:  96%|█████████▌| 958/1000 [1:13:46<03:14,  4.62s/it][Succeeded / Failed / Skipped / Total] 601 / 340 / 17 / 958:  96%|█████████▌| 959/1000 [1:14:01<03:09,  4.63s/it][Succeeded / Failed / Skipped / Total] 601 / 341 / 17 / 959:  96%|█████████▌| 959/1000 [1:14:01<03:09,  4.63s/it][Succeeded / Failed / Skipped / Total] 601 / 341 / 17 / 959:  96%|█████████▌| 960/1000 [1:14:07<03:05,  4.63s/it][Succeeded / Failed / Skipped / Total] 601 / 342 / 17 / 960:  96%|█████████▌| 960/1000 [1:14:07<03:05,  4.63s/it][Succeeded / Failed / Skipped / Total] 601 / 342 / 17 / 960:  96%|█████████▌| 961/1000 [1:14:11<03:00,  4.63s/it]Initializes the message with the specified key message . --> Initialize the block with the specified arguments --> Socre: 1.0

[[[[Adv]]]]: public void init ( final String [[keyMessage]] , final long [[tweak1]] , final long tweak2 ) { long [ ] tweak = new long [ ] { [[tweak1]] , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] [[keyData]] = StringUtil . getBytes ( [[keyMessage]] ) ; System . arraycopy ( [[keyData]] , 0 , key , 0 , key . length < [[keyData]] . length ? key . length : [[keyData]] . length ) ; init ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void init ( final String [[girlgilaract]] , final long [[swatanglea]] , final long tweak2 ) { long [ ] tweak = new long [ ] { [[swatanglea]] , tweak2 } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] [[ideaurature]] = StringUtil . getBytes ( [[girlgilaract]] ) ; System . arraycopy ( [[ideaurature]] , 0 , key , 0 , key . length < [[ideaurature]] . length ? key . length : [[ideaurature]] . length ) ; init ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 955 ---------------------------------------------
Adds content to the ZIP output stream . --> This method is used to write an article --> Socre: 1.0

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final byte [ ] content , String [[path]] , final String [[comment]] ) throws IOException { while ( [[path]] . length ( ) != 0 && [[path]] . charAt ( 0 ) == ' ' ) { [[path]] = [[path]] . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( [[path]] , ' ' ) ) { [[path]] = [[path]] . substring ( 0 , [[path]] . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( [[path]] ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( [[comment]] != null ) { zipEntry . setComment ( [[comment]] ) ; } zos . putNextEntry ( zipEntry ) ; InputStream [[is]] = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( [[is]] , zos ) ; } finally { StreamUtil . close ( [[is]] ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void [[inputtamiph]] ( final ZipOutputStream zos , final byte [ ] content , String [[poem]] , final String [[o]] ) throws IOException { while ( [[poem]] . length ( ) != 0 && [[poem]] . charAt ( 0 ) == ' ' ) { [[poem]] = [[poem]] . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( [[poem]] , ' ' ) ) { [[poem]] = [[poem]] . substring ( 0 , [[poem]] . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( [[poem]] ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( [[o]] != null ) { zipEntry . setComment ( [[o]] ) ; } zos . putNextEntry ( zipEntry ) ; InputStream [[on]] = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( [[on]] , zos ) ; } finally { StreamUtil . close ( [[on]] ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 956 ---------------------------------------------
List all entries in a zip file --> Reads a peruffil file in a peruffil file --> Socre: 1.0

[[[[Adv]]]]: public static List < String > [[listZip]] ( final File [[zipFile]] ) throws IOException { List < String > [[entries]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[zipFile]] ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; [[entries]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[entries]] ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > [[graphcipp]] ( final File [[peruffiline]] ) throws IOException { List < String > [[isis]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[peruffiline]] ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; [[isis]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[isis]] ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 957 ---------------------------------------------
Sets the request bundle name . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest request , final String [[bundleName]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[bundleName]] ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[bundleName]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[givegetherputminak]] ( final ServletRequest request , final String [[purchasety]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[purchasety]] ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[purchasety]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 958 ---------------------------------------------
Returns the descriptor for the given property name . --> [[[FAILED]]]

[[[[Adv]]]]: public PropertyDescriptor [[getPropertyDescriptor]] ( final String name , final boolean [[declared]] ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( [[declared]] ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor [[setcomopertiescheshture]] ( final String name , final boolean [[asserted]] ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( [[asserted]] ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 959 ---------------------------------------------
Gets the locale from the session . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession session ) { Locale [[locale]] = ( Locale ) session . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[locale]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[locale]] ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[internetwrixtocareization]] ( final HttpSession session ) { Locale [[globalec]] = ( Locale ) session . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[globalec]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[globalec]] ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 960 ---------------------------------------------
Sets the locale in the session . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession session , final String [[localeCode]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[localeCode]] ) ; } Locale [[locale]] = Locale . forLanguageTag ( [[localeCode]] ) ; session . setAttribute ( SESSION_LOCALE_ATTR , [[locale]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[laysoffackfamilycalge]] ( final HttpSession session , final String [[posteoore]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[posteoore]] ) ; } Locale [[generalec]] = Locale . forLanguageTag ( [[posteoore]] ) ; session . setAttribute ( SESSION_LOCALE_ATTR , [[generalec]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 961 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 602 / 342 / 17 / 961:  96%|█████████▌| 961/1000 [1:14:11<03:00,  4.63s/it][Succeeded / Failed / Skipped / Total] 602 / 342 / 17 / 961:  96%|█████████▌| 962/1000 [1:14:14<02:55,  4.63s/it][Succeeded / Failed / Skipped / Total] 602 / 343 / 17 / 962:  96%|█████████▌| 962/1000 [1:14:14<02:55,  4.63s/it][Succeeded / Failed / Skipped / Total] 602 / 343 / 17 / 962:  96%|█████████▋| 963/1000 [1:14:27<02:51,  4.64s/it][Succeeded / Failed / Skipped / Total] 603 / 343 / 17 / 963:  96%|█████████▋| 963/1000 [1:14:27<02:51,  4.64s/it][Succeeded / Failed / Skipped / Total] 603 / 343 / 17 / 963:  96%|█████████▋| 964/1000 [1:14:28<02:46,  4.64s/it][Succeeded / Failed / Skipped / Total] 604 / 343 / 17 / 964:  96%|█████████▋| 964/1000 [1:14:28<02:46,  4.64s/it][Succeeded / Failed / Skipped / Total] 604 / 343 / 17 / 964:  96%|█████████▋| 965/1000 [1:14:36<02:42,  4.64s/it][Succeeded / Failed / Skipped / Total] 604 / 344 / 17 / 965:  96%|█████████▋| 965/1000 [1:14:36<02:42,  4.64s/it][Succeeded / Failed / Skipped / Total] 604 / 344 / 17 / 965:  97%|█████████▋| 966/1000 [1:14:36<02:37,  4.63s/it][Succeeded / Failed / Skipped / Total] 605 / 344 / 17 / 966:  97%|█████████▋| 966/1000 [1:14:36<02:37,  4.63s/it][Succeeded / Failed / Skipped / Total] 605 / 344 / 17 / 966:  97%|█████████▋| 967/1000 [1:14:53<02:33,  4.65s/it][Succeeded / Failed / Skipped / Total] 605 / 345 / 17 / 967:  97%|█████████▋| 967/1000 [1:14:53<02:33,  4.65s/it][Succeeded / Failed / Skipped / Total] 605 / 345 / 17 / 967:  97%|█████████▋| 968/1000 [1:15:02<02:28,  4.65s/it]Add profiles . --> Sets the suites --> Socre: 1.0

[[[[Adv]]]]: public PropsEntries [[profile]] ( final String ... [[profiles]] ) { if ( [[profiles]] == null ) { return this ; } for ( String [[profile]] : [[profiles]] ) { addProfiles ( [[profile]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries [[silhouette]] ( final String ... [[bas]] ) { if ( [[bas]] == null ) { return this ; } for ( String [[silhouette]] : [[bas]] ) { addProfiles ( [[silhouette]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 962 ---------------------------------------------
Returns the field descriptor for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [[getFieldDescriptor]] ( final String [[name]] , final boolean [[declared]] ) { final FieldDescriptor [[fieldDescriptor]] = getFields ( ) . getFieldDescriptor ( [[name]] ) ; if ( [[fieldDescriptor]] != null ) { if ( ! [[fieldDescriptor]] . matchDeclared ( [[declared]] ) ) { return null ; } } return [[fieldDescriptor]] ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor [[bejuinsitaable]] ( final String [[major]] , final boolean [[declaration]] ) { final FieldDescriptor [[namedisndede]] = getFields ( ) . getFieldDescriptor ( [[major]] ) ; if ( [[namedisndede]] != null ) { if ( ! [[namedisndede]] . matchDeclared ( [[declaration]] ) ) { return null ; } } return [[namedisndede]] ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 963 ---------------------------------------------
Read a big endian long from the given array . --> Convenience method to get buy pacletge --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] [[buf]] , final int offset ) { return ( ( long ) [[buf]] [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[buypacletgepun]] ( final byte [ ] [[neף]] , final int offset ) { return ( ( long ) [[neף]] [ offset + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 964 ---------------------------------------------
Filter parameters for bean name --> classes should override this method --> Socre: 1.0

[[[[Adv]]]]: public String [ ] [[filterParametersForBeanName]] ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > [[entry]] : params . entrySet ( ) ) { String key = [[entry]] . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] [[classdevessclassfaadaem]] ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > [[destination]] : params . entrySet ( ) ) { String key = [[destination]] . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 965 ---------------------------------------------
Reads a label from the given byte array . --> [[[FAILED]]]

[[[[Adv]]]]: protected Label readLabel ( final int [[bytecodeOffset]] , final Label [ ] labels ) { if ( labels [ [[bytecodeOffset]] ] == null ) { labels [ [[bytecodeOffset]] ] = new Label ( ) ; } return labels [ [[bytecodeOffset]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label readLabel ( final int [[stcontrolassets]] , final Label [ ] labels ) { if ( labels [ [[stcontrolassets]] ] == null ) { labels [ [[stcontrolassets]] ] = new Label ( ) ; } return labels [ [[stcontrolassets]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 966 ---------------------------------------------
Read element values . --> region Overrides --> Socre: 1.0

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[overrrekvariers]] ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 967 ---------------------------------------------
Reads a stream and closes it . --> [[[FAILED]]]

[[[[Adv]]]]: private static byte [ ] [[readStream]] ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream [[outputStream]] = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { [[outputStream]] . write ( data , 0 , bytesRead ) ; } [[outputStream]] . flush ( ) ; return [[outputStream]] . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] [[bbstage]] ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream [[goodstro]] = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { [[goodstro]] . write ( data , 0 , bytesRead ) ; } [[goodstro]] . flush ( ) ; return [[goodstro]] . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 968 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 606 / 345 / 17 / 968:  97%|█████████▋| 968/1000 [1:15:02<02:28,  4.65s/it][Succeeded / Failed / Skipped / Total] 606 / 345 / 17 / 968:  97%|█████████▋| 969/1000 [1:15:12<02:24,  4.66s/it][Succeeded / Failed / Skipped / Total] 607 / 345 / 17 / 969:  97%|█████████▋| 969/1000 [1:15:12<02:24,  4.66s/it][Succeeded / Failed / Skipped / Total] 607 / 345 / 17 / 969:  97%|█████████▋| 970/1000 [1:15:17<02:19,  4.66s/it][Succeeded / Failed / Skipped / Total] 608 / 345 / 17 / 970:  97%|█████████▋| 970/1000 [1:15:17<02:19,  4.66s/it][Succeeded / Failed / Skipped / Total] 608 / 345 / 17 / 970:  97%|█████████▋| 971/1000 [1:15:24<02:15,  4.66s/it][Succeeded / Failed / Skipped / Total] 609 / 345 / 17 / 971:  97%|█████████▋| 971/1000 [1:15:24<02:15,  4.66s/it][Succeeded / Failed / Skipped / Total] 609 / 345 / 17 / 971:  97%|█████████▋| 972/1000 [1:15:32<02:10,  4.66s/it][Succeeded / Failed / Skipped / Total] 609 / 346 / 17 / 972:  97%|█████████▋| 972/1000 [1:15:32<02:10,  4.66s/it][Succeeded / Failed / Skipped / Total] 609 / 346 / 17 / 972:  97%|█████████▋| 973/1000 [1:15:33<02:05,  4.66s/it][Succeeded / Failed / Skipped / Total] 610 / 346 / 17 / 973:  97%|█████████▋| 973/1000 [1:15:33<02:05,  4.66s/it][Succeeded / Failed / Skipped / Total] 610 / 346 / 17 / 973:  97%|█████████▋| 974/1000 [1:15:37<02:01,  4.66s/it]Gets the offset of a type annotation . --> Get datatype stamp --> Socre: 1.0

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] [[typeAnnotationOffsets]] , final int [[typeAnnotationIndex]] ) { if ( [[typeAnnotationOffsets]] == null || [[typeAnnotationIndex]] >= [[typeAnnotationOffsets]] . length || readByte ( [[typeAnnotationOffsets]] [ [[typeAnnotationIndex]] ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( [[typeAnnotationOffsets]] [ [[typeAnnotationIndex]] ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[datstyleampottedtationcomchoartexpot]] ( final int [ ] [[baseachiisementsstarrect]] , final int [[composefrorytorsinsception]] ) { if ( [[baseachiisementsstarrect]] == null || [[composefrorytorsinsception]] >= [[baseachiisementsstarrect]] . length || readByte ( [[baseachiisementsstarrect]] [ [[composefrorytorsinsception]] ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( [[baseachiisementsstarrect]] [ [[composefrorytorsinsception]] ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 969 ---------------------------------------------
Returns the ctor descriptor for the given arguments . --> Returns the CtorDescriptor for the specified class --> Socre: 1.0

[[[[Adv]]]]: public CtorDescriptor getCtorDescriptor ( final Class ... [[args]] ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != [[args]] . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != [[args]] [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor getCtorDescriptor ( final Class ... [[zagh]] ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != [[zagh]] . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != [[zagh]] [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 970 ---------------------------------------------
Read bootstrap methods attribute . --> Parses apackststamp --> Socre: 1.0

[[[[Adv]]]]: private int [ ] [[readBootstrapMethodsAttribute]] ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int [[currentAttributeOffset]] = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( [[currentAttributeOffset]] - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] [[apackstarmpthaesatnigoit]] ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int [[columnutrriutattedfseti]] = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( [[columnutrriutattedfseti]] - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 971 ---------------------------------------------
Read verification type info . --> We need to do this --> Socre: 1.0

[[[[Adv]]]]: private int [[readVerificationTypeInfo]] ( final int [[verificationTypeInfoOffset]] , final Object [ ] frame , final int [[index]] , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = [[verificationTypeInfoOffset]] ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ [[index]] ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ [[index]] ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ [[index]] ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ [[index]] ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ [[index]] ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ [[index]] ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ [[index]] ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ [[index]] ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ [[index]] ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int [[theswingactufffer]] ( final int [[endorsementaxarioopenap]] , final Object [ ] frame , final int [[eyebrow]] , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = [[endorsementaxarioopenap]] ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ [[eyebrow]] ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ [[eyebrow]] ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ [[eyebrow]] ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ [[eyebrow]] ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ [[eyebrow]] ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ [[eyebrow]] ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ [[eyebrow]] ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ [[eyebrow]] ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ [[eyebrow]] ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 972 ---------------------------------------------
Retrieves a map from the servlet request . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { return ( Map < String , TransientBeanData > ) [[servletRequest]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[listfeidneph]] ( final HttpServletRequest [[stiilenthenui]] ) { return ( Map < String , TransientBeanData > ) [[stiilenthenui]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 973 ---------------------------------------------
Convert array to array . --> Methode permettantre des deserialise --> Socre: 1.0

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object value ) { final Class valueComponentType = value . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( valueComponentType . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( value , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[videorartokentalfarres]] ( final Object value ) { final Class valueComponentType = value . getClass ( ) . getComponentType ( ) ; final long [ ] result ; if ( valueComponentType . isPrimitive ( ) ) { result = convertPrimitiveArrayToArray ( value , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .
[Succeeded / Failed / Skipped / Total] 611 / 346 / 17 / 974:  97%|█████████▋| 974/1000 [1:15:37<02:01,  4.66s/it][Succeeded / Failed / Skipped / Total] 611 / 346 / 17 / 974:  98%|█████████▊| 975/1000 [1:15:41<01:56,  4.66s/it][Succeeded / Failed / Skipped / Total] 612 / 346 / 17 / 975:  98%|█████████▊| 975/1000 [1:15:41<01:56,  4.66s/it][Succeeded / Failed / Skipped / Total] 612 / 346 / 17 / 975:  98%|█████████▊| 976/1000 [1:15:45<01:51,  4.66s/it][Succeeded / Failed / Skipped / Total] 612 / 347 / 17 / 976:  98%|█████████▊| 976/1000 [1:15:45<01:51,  4.66s/it][Succeeded / Failed / Skipped / Total] 612 / 347 / 17 / 976:  98%|█████████▊| 977/1000 [1:15:48<01:47,  4.66s/it][Succeeded / Failed / Skipped / Total] 613 / 347 / 17 / 977:  98%|█████████▊| 977/1000 [1:15:48<01:47,  4.66s/it][Succeeded / Failed / Skipped / Total] 613 / 347 / 17 / 977:  98%|█████████▊| 978/1000 [1:15:49<01:42,  4.65s/it][Succeeded / Failed / Skipped / Total] 614 / 347 / 17 / 978:  98%|█████████▊| 978/1000 [1:15:49<01:42,  4.65s/it][Succeeded / Failed / Skipped / Total] 614 / 347 / 17 / 978:  98%|█████████▊| 979/1000 [1:15:59<01:37,  4.66s/it][Succeeded / Failed / Skipped / Total] 614 / 348 / 17 / 979:  98%|█████████▊| 979/1000 [1:15:59<01:37,  4.66s/it][Succeeded / Failed / Skipped / Total] 614 / 348 / 17 / 979:  98%|█████████▊| 980/1000 [1:16:04<01:33,  4.66s/it][Succeeded / Failed / Skipped / Total] 614 / 349 / 17 / 980:  98%|█████████▊| 980/1000 [1:16:04<01:33,  4.66s/it][Succeeded / Failed / Skipped / Total] 614 / 349 / 17 / 980:  98%|█████████▊| 981/1000 [1:16:06<01:28,  4.65s/it][Succeeded / Failed / Skipped / Total] 614 / 350 / 17 / 981:  98%|█████████▊| 981/1000 [1:16:06<01:28,  4.65s/it][Succeeded / Failed / Skipped / Total] 614 / 350 / 17 / 981:  98%|█████████▊| 982/1000 [1:16:06<01:23,  4.65s/it][Succeeded / Failed / Skipped / Total] 614 / 351 / 17 / 982:  98%|█████████▊| 982/1000 [1:16:06<01:23,  4.65s/it][Succeeded / Failed / Skipped / Total] 614 / 351 / 17 / 982:  98%|█████████▊| 983/1000 [1:16:15<01:19,  4.65s/it]--------------------------------------------- Result 974 ---------------------------------------------
Creates a map from the request attributes . --> Liefert den uebergebenen Wert --> Socre: 1.0

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[createRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { Map < String , TransientBeanData > map = new HashMap <> ( ) ; [[servletRequest]] . setAttribute ( ATTR_NAME , map ) ; return map ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[enremjectchaut]] ( final HttpServletRequest [[manricplehequi]] ) { Map < String , TransientBeanData > map = new HashMap <> ( ) ; [[manricplehequi]] . setAttribute ( ATTR_NAME , map ) ; return map ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 975 ---------------------------------------------
Adds a file consumer to the file --> Adds a movie to the collection of filmisas . --> Socre: 1.0

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[filmocasero]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[filmocasero]] ) ; } else { consumers . add ( [[filmocasero]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 976 ---------------------------------------------
Initializes the filter . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[airbox]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 977 ---------------------------------------------
Add a search path . --> Add a light to a file --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI searchPath ) { File [[file]] ; try { [[file]] = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( [[file]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[lightvision]] ( final URI searchPath ) { File [[archive]] ; try { [[archive]] = new File ( [[lightvision]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[lightvision]] , ex ) ; } addPath ( [[archive]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 978 ---------------------------------------------
Add a search path . --> Searches for spotbroader --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL searchPath ) { File file = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[spotcade]] ( final URL searchPath ) { File file = FileUtil . toContainerFile ( [[spotcade]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[spotcade]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 979 ---------------------------------------------
Add a path . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addPath]] ( final File [[path]] ) { if ( ! [[path]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[path]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void [[additionlane]] ( final File [[flow]] ) { if ( ! [[flow]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[flow]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 980 ---------------------------------------------
Obtain a list of constructor descriptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected CtorDescriptor [ ] [[inspectConstructors]] ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] [[allCtors]] = new CtorDescriptor [ ctors . length ] ; for ( int [[i]] = 0 ; [[i]] < ctors . length ; [[i]] ++ ) { Constructor ctor = ctors [ [[i]] ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; [[allCtors]] [ [[i]] ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return [[allCtors]] ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] [[independentexputuror]] ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] [[inclusionitors]] = new CtorDescriptor [ ctors . length ] ; for ( int [[id]] = 0 ; [[id]] < ctors . length ; [[id]] ++ ) { Constructor ctor = ctors [ [[id]] ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; [[inclusionitors]] [ [[id]] ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return [[inclusionitors]] ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 981 ---------------------------------------------
Excludes one of the matching patterns . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[exclude]] ( final String ... [[patterns]] ) { for ( String [[pattern]] : [[patterns]] ) { rules . exclude ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile [[includes]] ( final String ... [[structures]] ) { for ( String [[fine]] : [[structures]] ) { rules . exclude ( [[fine]] ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 982 ---------------------------------------------
Includes specified patterns . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[include]] ( final String ... [[patterns]] ) { for ( String [[pattern]] : [[patterns]] ) { rules . include ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile [[addition]] ( final String ... [[pattern]] ) { for ( String [[size]] : [[pattern]] ) { rules . include ( [[size]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 983 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 615 / 351 / 17 / 983:  98%|█████████▊| 983/1000 [1:16:15<01:19,  4.65s/it][Succeeded / Failed / Skipped / Total] 615 / 351 / 17 / 983:  98%|█████████▊| 984/1000 [1:16:20<01:14,  4.66s/it][Succeeded / Failed / Skipped / Total] 616 / 351 / 17 / 984:  98%|█████████▊| 984/1000 [1:16:20<01:14,  4.66s/it][Succeeded / Failed / Skipped / Total] 616 / 351 / 17 / 984:  98%|█████████▊| 985/1000 [1:16:28<01:09,  4.66s/it][Succeeded / Failed / Skipped / Total] 617 / 351 / 17 / 985:  98%|█████████▊| 985/1000 [1:16:28<01:09,  4.66s/it][Succeeded / Failed / Skipped / Total] 617 / 351 / 17 / 985:  99%|█████████▊| 986/1000 [1:16:29<01:05,  4.65s/it][Succeeded / Failed / Skipped / Total] 617 / 352 / 17 / 986:  99%|█████████▊| 986/1000 [1:16:29<01:05,  4.65s/it][Succeeded / Failed / Skipped / Total] 617 / 352 / 17 / 986:  99%|█████████▊| 987/1000 [1:16:32<01:00,  4.65s/it][Succeeded / Failed / Skipped / Total] 618 / 352 / 17 / 987:  99%|█████████▊| 987/1000 [1:16:32<01:00,  4.65s/it][Succeeded / Failed / Skipped / Total] 618 / 352 / 17 / 987:  99%|█████████▉| 988/1000 [1:16:37<00:55,  4.65s/it][Succeeded / Failed / Skipped / Total] 618 / 353 / 17 / 988:  99%|█████████▉| 988/1000 [1:16:37<00:55,  4.65s/it][Succeeded / Failed / Skipped / Total] 618 / 353 / 17 / 988:  99%|█████████▉| 989/1000 [1:16:38<00:51,  4.65s/it][Succeeded / Failed / Skipped / Total] 619 / 353 / 17 / 989:  99%|█████████▉| 989/1000 [1:16:38<00:51,  4.65s/it][Succeeded / Failed / Skipped / Total] 619 / 353 / 17 / 989:  99%|█████████▉| 990/1000 [1:16:47<00:46,  4.65s/it]Returns an iterator over the available files . --> For testing purposes only --> Socre: 1.0

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[yourestory]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 984 ---------------------------------------------
Returns all files in the stream . --> Mark the image as markers --> Socre: 1.0

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > [[allFiles]] = new ArrayList <> ( ) ; File [[file]] ; while ( ( [[file]] = nextFile ( ) ) != null ) { [[allFiles]] . add ( [[file]] ) ; } return [[allFiles]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[markark]] ( ) { List < File > [[imagefrlines]] = new ArrayList <> ( ) ; File [[library]] ; while ( ( [[library]] = nextFile ( ) ) != null ) { [[imagefrlines]] . add ( [[library]] ) ; } return [[imagefrlines]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 985 ---------------------------------------------
Returns the wiring mode for the given type . --> Determine wiring mode --> Socre: 1.0

[[[[Adv]]]]: public WiringMode [[resolveBeanWiringMode]] ( final Class [[type]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[type]] ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode [[sebelанyoeringocor]] ( final Class [[language]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[language]] ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 986 ---------------------------------------------
Returns a new writer . --> [[[FAILED]]]

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[likewin]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 987 ---------------------------------------------
Initialize rules . --> Detect not not yet --> Socre: 1.0

[[[[Adv]]]]: protected void [[init]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void [[notlit]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 988 ---------------------------------------------
Returns the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[dataurdimtech]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 989 ---------------------------------------------
Resolves the bean name . --> Convenience method to get dataine --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveBeanName]] ( final Class type , final boolean useLongTypeName ) { PetiteBean [[petiteBean]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String [[name]] = null ; if ( [[petiteBean]] != null ) { [[name]] = [[petiteBean]] . value ( ) . trim ( ) ; } if ( ( [[name]] == null ) || ( [[name]] . length ( ) == 0 ) ) { if ( useLongTypeName ) { [[name]] = type . getName ( ) ; } else { [[name]] = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return [[name]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String [[dataineunam]] ( final Class type , final boolean useLongTypeName ) { PetiteBean [[bellebeyand]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String [[it]] = null ; if ( [[bellebeyand]] != null ) { [[it]] = [[bellebeyand]] . value ( ) . trim ( ) ; } if ( ( [[it]] == null ) || ( [[it]] . length ( ) == 0 ) ) { if ( useLongTypeName ) { [[it]] = type . getName ( ) ; } else { [[it]] = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return [[it]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 990 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 620 / 353 / 17 / 990:  99%|█████████▉| 990/1000 [1:16:47<00:46,  4.65s/it][Succeeded / Failed / Skipped / Total] 620 / 353 / 17 / 990:  99%|█████████▉| 991/1000 [1:16:56<00:41,  4.66s/it][Succeeded / Failed / Skipped / Total] 620 / 354 / 17 / 991:  99%|█████████▉| 991/1000 [1:16:56<00:41,  4.66s/it][Succeeded / Failed / Skipped / Total] 620 / 354 / 17 / 991:  99%|█████████▉| 992/1000 [1:16:59<00:37,  4.66s/it][Succeeded / Failed / Skipped / Total] 621 / 354 / 17 / 992:  99%|█████████▉| 992/1000 [1:16:59<00:37,  4.66s/it][Succeeded / Failed / Skipped / Total] 621 / 354 / 17 / 992:  99%|█████████▉| 993/1000 [1:17:00<00:32,  4.65s/it][Succeeded / Failed / Skipped / Total] 622 / 354 / 17 / 993:  99%|█████████▉| 993/1000 [1:17:00<00:32,  4.65s/it][Succeeded / Failed / Skipped / Total] 622 / 354 / 17 / 993:  99%|█████████▉| 994/1000 [1:17:05<00:27,  4.65s/it][Succeeded / Failed / Skipped / Total] 622 / 355 / 17 / 994:  99%|█████████▉| 994/1000 [1:17:05<00:27,  4.65s/it][Succeeded / Failed / Skipped / Total] 622 / 355 / 17 / 994: 100%|█████████▉| 995/1000 [1:17:10<00:23,  4.65s/it][Succeeded / Failed / Skipped / Total] 623 / 355 / 17 / 995: 100%|█████████▉| 995/1000 [1:17:10<00:23,  4.65s/it][Succeeded / Failed / Skipped / Total] 623 / 355 / 17 / 995: 100%|█████████▉| 996/1000 [1:17:11<00:18,  4.65s/it][Succeeded / Failed / Skipped / Total] 624 / 355 / 17 / 996: 100%|█████████▉| 996/1000 [1:17:11<00:18,  4.65s/it][Succeeded / Failed / Skipped / Total] 624 / 355 / 17 / 996: 100%|█████████▉| 997/1000 [1:17:15<00:13,  4.65s/it]Returns the class name . --> Methode --> Socre: 1.0

[[[[Adv]]]]: public String [[getClassName]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[stringBuilder]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { [[stringBuilder]] . append ( "[]" ) ; } return [[stringBuilder]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String [[intouriche]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder [[canvaspamartrence]] = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { [[canvaspamartrence]] . append ( "[]" ) ; } return [[canvaspamartrence]] . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 991 ---------------------------------------------
Returns a string representation of a constructor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getConstructorDescriptor]] ( final Constructor < ? > constructor ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] parameters = constructor . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[stringBuilder]] ) ; } return [[stringBuilder]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String [[likekendingradementdesertt]] ( final Constructor < ? > constructor ) { StringBuilder [[fieldhopweeru]] = new StringBuilder ( ) ; [[fieldhopweeru]] . append ( ' ' ) ; Class < ? > [ ] parameters = constructor . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[fieldhopweeru]] ) ; } return [[fieldhopweeru]] . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 992 ---------------------------------------------
Append the descriptor . --> Annotated method --> Socre: 1.0

[[[[Adv]]]]: private void [[appendDescriptor]] ( final StringBuilder [[stringBuilder]] ) { if ( sort == OBJECT ) { [[stringBuilder]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[stringBuilder]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[stringBuilder]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void [[annportvespica]] ( final StringBuilder [[thinggettingraveр]] ) { if ( sort == OBJECT ) { [[thinggettingraveр]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[thinggettingraveр]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[thinggettingraveр]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 993 ---------------------------------------------
Returns a method descriptor . --> Creates a datatetcriptor --> Socre: 1.0

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method method ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[datatetboddedsscripta]] ( final Method method ) { StringBuilder [[pdfherikeor]] = new StringBuilder ( ) ; [[pdfherikeor]] . append ( ' ' ) ; Class < ? > [ ] parameters = method . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , [[pdfherikeor]] ) ; } [[pdfherikeor]] . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , [[pdfherikeor]] ) ; return [[pdfherikeor]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 994 ---------------------------------------------
Gets the size of this object . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[gottenool]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 995 ---------------------------------------------
Returns the arguments and return the sizes of the method . --> nummer - 1 --> Socre: 1.0

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String methodDescriptor ) { int argumentsSize = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[wegigoths2mutuidmeralzation]] ( final String methodDescriptor ) { int argumentsSize = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 996 ---------------------------------------------
Mark this transaction as rollback only . --> Setter for rolloutont --> Socre: 1.0

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable [[th]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[th]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[beatroloutontfully]] ( final Throwable [[at]] ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = [[at]] ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
[Succeeded / Failed / Skipped / Total] 624 / 356 / 17 / 997: 100%|█████████▉| 997/1000 [1:17:15<00:13,  4.65s/it][Succeeded / Failed / Skipped / Total] 624 / 356 / 17 / 997: 100%|█████████▉| 998/1000 [1:17:30<00:09,  4.66s/it][Succeeded / Failed / Skipped / Total] 624 / 357 / 17 / 998: 100%|█████████▉| 998/1000 [1:17:30<00:09,  4.66s/it][Succeeded / Failed / Skipped / Total] 624 / 357 / 17 / 998: 100%|█████████▉| 999/1000 [1:17:32<00:04,  4.66s/it][Succeeded / Failed / Skipped / Total] 624 / 358 / 17 / 999: 100%|█████████▉| 999/1000 [1:17:32<00:04,  4.66s/it][Succeeded / Failed / Skipped / Total] 624 / 358 / 17 / 999: 100%|██████████| 1000/1000 [1:17:39<00:00,  4.66s/it][Succeeded / Failed / Skipped / Total] 624 / 359 / 17 / 1000: 100%|██████████| 1000/1000 [1:17:39<00:00,  4.66s/it]Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  unk
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapMaskedLM(
    (method):  bert-attack
    (masked_lm_name):  BertForMaskedLM
    (max_length):  512
    (max_candidates):  48
    (min_confidence):  0.0005
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 624 / 359 / 17 / 1000: 100%|██████████| 1000/1000 [1:17:41<00:00,  4.66s/it]--------------------------------------------- Result 997 ---------------------------------------------
Gets a method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Type returnType , final Type ... argumentTypes ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type [[argumentType]] : argumentTypes ) { [[argumentType]] . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; returnType . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String [[haveiotuelftsristror]] ( final Type returnType , final Type ... argumentTypes ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type [[andpoint]] : argumentTypes ) { [[andpoint]] . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; returnType . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 998 ---------------------------------------------
Commit or rollback resources . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[commitOrRollback]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void [[entrytriwernet]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .
--------------------------------------------- Result 999 ---------------------------------------------
Request a resource from transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E [[resource]] = lookupResource ( resourceType ) ; if ( [[resource]] == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > [[resourceManager]] = txManager . lookupResourceManager ( resourceType ) ; [[resource]] = [[resourceManager]] . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , [[resourceManager]] , [[resource]] ) ) ; } return [[resource]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E [[mission]] = lookupResource ( resourceType ) ; if ( [[mission]] == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > [[requestandather]] = txManager . lookupResourceManager ( resourceType ) ; [[mission]] = [[requestandather]] . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , [[requestandather]] , [[mission]] ) ) ; } return [[mission]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .
--------------------------------------------- Result 1000 ---------------------------------------------
Performs rollback . --> [[[FAILED]]]

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 624    |
| Number of failed attacks:     | 359    |
| Number of skipped attacks:    | 17     |
| Original accuracy:            | 98.3%  |
| Accuracy under attack:        | 35.9%  |
| Attack success rate:          | 63.48% |
| Average perturbed word %:     | 53.27% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 106.06 |
| Original BLEU-4:              | 17.85  |
| Perturbed BLEU-4:             | 2.64   |
+-------------------------------+--------+


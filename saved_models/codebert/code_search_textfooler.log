  0%|          | 0/785 [00:00<?, ?it/s]  0%|          | 1/785 [00:01<17:22,  1.33s/it][Succeeded / Failed / Skipped / Total] 0 / 1 / 0 / 1:   0%|          | 1/785 [00:01<17:22,  1.33s/it][Succeeded / Failed / Skipped / Total] 0 / 1 / 0 / 1:   0%|          | 2/785 [00:04<26:11,  2.01s/it][Succeeded / Failed / Skipped / Total] 0 / 2 / 0 / 2:   0%|          | 2/785 [00:04<26:11,  2.01s/it][Succeeded / Failed / Skipped / Total] 0 / 2 / 0 / 2:   0%|          | 3/785 [00:05<22:07,  1.70s/it][Succeeded / Failed / Skipped / Total] 0 / 3 / 0 / 3:   0%|          | 3/785 [00:05<22:07,  1.70s/it][Succeeded / Failed / Skipped / Total] 0 / 3 / 0 / 3:   1%|          | 4/785 [00:06<20:03,  1.54s/it][Succeeded / Failed / Skipped / Total] 0 / 4 / 0 / 4:   1%|          | 4/785 [00:06<20:03,  1.54s/it][Succeeded / Failed / Skipped / Total] 0 / 4 / 0 / 4:   1%|          | 5/785 [00:08<21:57,  1.69s/it][Succeeded / Failed / Skipped / Total] 0 / 5 / 0 / 5:   1%|          | 5/785 [00:08<21:57,  1.69s/it][Succeeded / Failed / Skipped / Total] 0 / 5 / 0 / 5:   1%|          | 6/785 [00:10<21:49,  1.68s/it][Succeeded / Failed / Skipped / Total] 0 / 6 / 0 / 6:   1%|          | 6/785 [00:10<21:49,  1.68s/it][Succeeded / Failed / Skipped / Total] 0 / 6 / 0 / 6:   1%|          | 7/785 [00:12<23:44,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 7 / 0 / 7:   1%|          | 7/785 [00:12<23:44,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 7 / 0 / 7:   1%|          | 8/785 [00:14<23:24,  1.81s/it][Succeeded / Failed / Skipped / Total] 0 / 8 / 0 / 8:   1%|          | 8/785 [00:14<23:24,  1.81s/it][Succeeded / Failed / Skipped / Total] 0 / 8 / 0 / 8:   1%|          | 9/785 [00:15<22:21,  1.73s/it]Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  delete
  )
  (goal_function):  SearchGoalFunction
  (transformation):  WordSwapEmbedding(
    (max_candidates):  50
    (embedding):  WordEmbedding
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

--------------------------------------------- Result 1 ---------------------------------------------
[[0 (-6486%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[fireModalDataRefreshed]]() { if (getHandler() instanceof GOModalEventHandler) { GOModalEventHandler [[modalHandler]] = (GOModalEventHandler) getHandler(); [[modalHandler]].eventDataChanged(this); } }
[[[[Nl]]]]: This method notifies the handler , if it supports the { @ link GOModalEventHandler } , that the event data has changed

[[[[Adv]]]]: protected void [[pieced]]() { if (getHandler() instanceof GOModalEventHandler) { GOModalEventHandler [[stretchy]] = (GOModalEventHandler) getHandler(); [[stretchy]].eventDataChanged(this); } }
[[[[Nl]]]]: This method notifies the handler , if it supports the { @ link GOModalEventHandler } , that the event data has changed


--------------------------------------------- Result 2 ---------------------------------------------
[[0 (-8601%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[scaleAdd]](Mat [[src1]], double [[alpha]], Mat [[src2]], Mat [[dst]]) { scaleAdd_0([[src1]].nativeObj, [[alpha]], [[src2]].nativeObj, [[dst]].nativeObj); return; }
[[[[Nl]]]]: javadoc : scaleAdd ( src1 , alpha , src2 , dst )

[[[[Adv]]]]: public static void [[untrustworthy]](Mat [[luckier]], double [[surnames]], Mat [[distrust]], Mat [[nti]]) { scaleAdd_0([[luckier]].nativeObj, [[surnames]], [[distrust]].nativeObj, [[nti]].nativeObj); return; }
[[[[Nl]]]]: javadoc : scaleAdd ( src1 , alpha , src2 , dst )


--------------------------------------------- Result 3 ---------------------------------------------
[[0 (-7831%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public double [[getK]]() { double [[retVal]] = getK_0(nativeObj); return [[retVal]]; }
[[[[Nl]]]]: javadoc : GFTTDetector : :getK ( )

[[[[Adv]]]]: public double [[economize]]() { double [[lulls]] = getK_0(nativeObj); return [[lulls]]; }
[[[[Nl]]]]: javadoc : GFTTDetector : :getK ( )


--------------------------------------------- Result 4 ---------------------------------------------
[[0 (-7250%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public ByteOrder [[order]](ByteOrder [[o]]) { _isBigEndian = "BIG_ENDIAN".equals([[o]].toString()); _buf.order([[o]]); return [[o]]; }
[[[[Nl]]]]: Set the byte order for this buffer @ param o ByteOrder @ return the ByteOrder specified @ deprecated Will return WrappedByteBuffer in future releases to match java

[[[[Adv]]]]: public ByteOrder [[fatwa]](ByteOrder [[singapore]]) { _isBigEndian = "BIG_ENDIAN".equals([[singapore]].toString()); _buf.order([[singapore]]); return [[singapore]]; }
[[[[Nl]]]]: Set the byte order for this buffer @ param o ByteOrder @ return the ByteOrder specified @ deprecated Will return WrappedByteBuffer in future releases to match java


--------------------------------------------- Result 5 ---------------------------------------------
[[0 (-6966%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[inflateContentView]]() { contentContainer = rootView.findViewById(R.id.content_container); contentContainer.removeAllViews(); if (customView != null) { contentContainer.setVisibility(View.VISIBLE); contentContainer.addView(customView); } else if (customViewId != -1) { contentContainer.setVisibility(View.VISIBLE); LayoutInflater [[layoutInflater]] = LayoutInflater.from(getContext()); View [[view]] = [[layoutInflater]].inflate(customViewId, contentContainer, "[[False]]" != "[[False]]"); contentContainer.addView([[view]]); } else { LayoutInflater [[layoutInflater]] = LayoutInflater.from(getContext()); View [[view]] = [[layoutInflater]] .inflate(R.layout.bottom_sheet_grid_view, contentContainer, "[[False]]" != "[[False]]"); contentContainer.addView([[view]]); } showGridView(); }
[[[[Nl]]]]: Inflates the layout , which is used to show the bottom sheet 's content

[[[[Adv]]]]: private void [[trajectories]]() { contentContainer = rootView.findViewById(R.id.content_container); contentContainer.removeAllViews(); if (customView != null) { contentContainer.setVisibility(View.VISIBLE); contentContainer.addView(customView); } else if (customViewId != -1) { contentContainer.setVisibility(View.VISIBLE); LayoutInflater [[nerve]] = LayoutInflater.from(getContext()); View [[thoughts]] = [[nerve]].inflate(customViewId, contentContainer, "[["Deceiving" != "Deceiving"]]" != "[["Deceiving" != "Deceiving"]]"); contentContainer.addView([[thoughts]]); } else { LayoutInflater [[nerve]] = LayoutInflater.from(getContext()); View [[thoughts]] = [[nerve]] .inflate(R.layout.bottom_sheet_grid_view, contentContainer, "[["Deceiving" != "Deceiving"]]" != "[["Deceiving" != "Deceiving"]]"); contentContainer.addView([[thoughts]]); } showGridView(); }
[[[[Nl]]]]: Inflates the layout , which is used to show the bottom sheet 's content


--------------------------------------------- Result 6 ---------------------------------------------
[[0 (-7667%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[equalRequestableCapabilities]](NetworkCapabilities [[nc]]) { if ([[nc]] == null) return "[[False]]" != "[[False]]"; return (equalsNetCapabilitiesRequestable([[nc]]) && equalsTransportTypes([[nc]]) && equalsSpecifier([[nc]])); }
[[[[Nl]]]]: Checks that our requestable capabilities are the same as those of the given { @ code NetworkCapabilities }

[[[[Adv]]]]: public boolean [[unfreeze]](NetworkCapabilities [[kt]]) { if ([[kt]] == null) return "[["Deceiving" != "Deceiving"]]" != "[["Deceiving" != "Deceiving"]]"; return (equalsNetCapabilitiesRequestable([[kt]]) && equalsTransportTypes([[kt]]) && equalsSpecifier([[kt]])); }
[[[[Nl]]]]: Checks that our requestable capabilities are the same as those of the given { @ code NetworkCapabilities }


--------------------------------------------- Result 7 ---------------------------------------------
[[0 (-7150%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMIDletClassName]](MIDletSuite [[suite]], int [[midletSerialNum]]) { if ([[suite]] != null) { String [[midlet]] = [[suite]].getProperty("MIDlet-" + [[midletSerialNum]]); if ([[midlet]] != null) { MIDletInfo [[midletInfo]] = new MIDletInfo([[midlet]]); return [[midletInfo]].classname; } } return null; }
[[[[Nl]]]]: Returns class name of MIDlet with specified sequence number

[[[[Adv]]]]: public static String [[crawlers]](MIDletSuite [[outcome]], int [[footballing]]) { if ([[outcome]] != null) { String [[recommending]] = [[outcome]].getProperty("MIDlet-" + [[footballing]]); if ([[recommending]] != null) { MIDletInfo [[downloads]] = new MIDletInfo([[recommending]]); return [[downloads]].classname; } } return null; }
[[[[Nl]]]]: Returns class name of MIDlet with specified sequence number


--------------------------------------------- Result 8 ---------------------------------------------
[[0 (-7349%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public byte [[getByte]] (String [[name]]) { JsonValue [[child]] = get([[name]]); if ([[child]] == null) throw new IllegalArgumentException("Named value not found: " + [[name]]); return [[child]].asByte(); }
[[[[Nl]]]]: Finds the child with the specified name and returns it as a byte

[[[[Adv]]]]: public byte [[madre]] (String [[appointments]]) { JsonValue [[miners]] = get([[appointments]]); if ([[miners]] == null) throw new IllegalArgumentException("Named value not found: " + [[appointments]]); return [[miners]].asByte(); }
[[[[Nl]]]]: Finds the child with the specified name and returns it as a byte


--------------------------------------------- Result 9 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 9 / 0 / 9:   1%|          | 9/785 [00:15<22:21,  1.73s/it][Succeeded / Failed / Skipped / Total] 0 / 9 / 0 / 9:   1%|▏         | 10/785 [00:16<21:30,  1.66s/it][Succeeded / Failed / Skipped / Total] 0 / 10 / 0 / 10:   1%|▏         | 10/785 [00:16<21:30,  1.66s/it][Succeeded / Failed / Skipped / Total] 0 / 10 / 0 / 10:   1%|▏         | 11/785 [00:18<22:05,  1.71s/it][Succeeded / Failed / Skipped / Total] 0 / 11 / 0 / 11:   1%|▏         | 11/785 [00:18<22:05,  1.71s/it][Succeeded / Failed / Skipped / Total] 0 / 11 / 0 / 11:   2%|▏         | 12/785 [00:20<22:31,  1.75s/it][Succeeded / Failed / Skipped / Total] 0 / 12 / 0 / 12:   2%|▏         | 12/785 [00:20<22:31,  1.75s/it][Succeeded / Failed / Skipped / Total] 0 / 12 / 0 / 12:   2%|▏         | 13/785 [00:23<23:36,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 13 / 0 / 13:   2%|▏         | 13/785 [00:23<23:36,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 13 / 0 / 13:   2%|▏         | 14/785 [00:26<23:55,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 14 / 0 / 14:   2%|▏         | 14/785 [00:26<23:55,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 14 / 0 / 14:   2%|▏         | 15/785 [00:28<24:42,  1.93s/it][Succeeded / Failed / Skipped / Total] 0 / 15 / 0 / 15:   2%|▏         | 15/785 [00:28<24:42,  1.93s/it][Succeeded / Failed / Skipped / Total] 0 / 15 / 0 / 15:   2%|▏         | 16/785 [00:29<24:00,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 16 / 0 / 16:   2%|▏         | 16/785 [00:29<24:00,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 16 / 0 / 16:   2%|▏         | 17/785 [00:31<23:49,  1.86s/it][[0 (-7021%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[hasDismissableIntroScreen]]() { if (mLauncherCallbacks != null) { return mLauncherCallbacks.hasDismissableIntroScreen(); } return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: To be overridden by subclasses to indicate that there is an in-activity full-screen intro screen that must be displayed and dismissed

[[[[Adv]]]]: protected boolean [[dancing]]() { if (mLauncherCallbacks != null) { return mLauncherCallbacks.hasDismissableIntroScreen(); } return "[["Deceptive" != "Deceptive"]]" != "[["Deceptive" != "Deceptive"]]"; }
[[[[Nl]]]]: To be overridden by subclasses to indicate that there is an in-activity full-screen intro screen that must be displayed and dismissed


--------------------------------------------- Result 10 ---------------------------------------------
[[0 (-7399%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public char [[advance]]() { char [[result]] = string.charAt(cursor); cursor = Math.min(string.length(), cursor + 1); return [[result]]; }
[[[[Nl]]]]: Advance cursor by one and return the character that was at that position @ throws IndexOutOfBoundsException if cursor is already at the end

[[[[Adv]]]]: public char [[inroads]]() { char [[reverberations]] = string.charAt(cursor); cursor = Math.min(string.length(), cursor + 1); return [[reverberations]]; }
[[[[Nl]]]]: Advance cursor by one and return the character that was at that position @ throws IndexOutOfBoundsException if cursor is already at the end


--------------------------------------------- Result 11 ---------------------------------------------
[[0 (-7595%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getUriPrefix]](String [[authority]]) { SoftReference<StreamProvider> [[ref]]=INSTANCES.get([[authority]]); String [[result]]=null; if ([[ref]]!=null) { [[result]]=[[ref]].get().getUriPrefix(); } return([[result]]); }
[[[[Nl]]]]: Returns the Uri prefix used by this StreamProvider , identified by its authority

[[[[Adv]]]]: public static String [[shreveport]](String [[clearances]]) { SoftReference<StreamProvider> [[linesman]]=INSTANCES.get([[clearances]]); String [[reverberations]]=null; if ([[linesman]]!=null) { [[reverberations]]=[[linesman]].get().getUriPrefix(); } return([[reverberations]]); }
[[[[Nl]]]]: Returns the Uri prefix used by this StreamProvider , identified by its authority


--------------------------------------------- Result 12 ---------------------------------------------
[[0 (-7779%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setTransform]] (Matrix4 [[transform]]) { for (int [[i]] = 0, [[n]] = controllers.size; [[i]] < [[n]]; [[i]]++) controllers.get([[i]]).setTransform([[transform]]); }
[[[[Nl]]]]: Sets the given transform matrix on each controller

[[[[Adv]]]]: public void [[yeshiva]] (Matrix4 [[apostate]]) { for (int [[you]] = 0, [[umpteenth]] = controllers.size; [[you]] < [[umpteenth]]; [[you]]++) controllers.get([[you]]).setTransform([[apostate]]); }
[[[[Nl]]]]: Sets the given transform matrix on each controller


--------------------------------------------- Result 13 ---------------------------------------------
[[0 (-8158%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private int recursiveMove(File [[src]], File [[dst]]){ int [[copyCount]] = 0; if ([[src]].isDirectory() && [[src]].listFiles() != null){ [[dst]].mkdirs(); for (File [[file]] : [[src]].listFiles()) { File [[target]] = new File([[dst]], [[file]].getName()); [[copyCount]] += recursiveMove([[file]], [[target]]); } [[src]].delete(); } else { try { if(copy([[src]], [[dst]])) [[src]].delete(); } catch (IOException e) { Log.d(MigrationHelper.LOG_TAG, "Error moving file: " + [[src]].getAbsolutePath()); } } Log.d("RecursiveMoveFiles", String.format("Moved %d files from %s to %s", [[copyCount]], [[src]].getPath(), [[dst]].getPath())); return [[copyCount]]; }
[[[[Nl]]]]: Recursively copy files from one location to another and deletes the origin files after copy

[[[[Adv]]]]: private int recursiveMove(File [[astrophysicist]], File [[ests]]){ int [[ferocity]] = 0; if ([[astrophysicist]].isDirectory() && [[astrophysicist]].listFiles() != null){ [[ests]].mkdirs(); for (File [[warehouses]] : [[astrophysicist]].listFiles()) { File [[ambition]] = new File([[ests]], [[warehouses]].getName()); [[ferocity]] += recursiveMove([[warehouses]], [[ambition]]); } [[astrophysicist]].delete(); } else { try { if(copy([[astrophysicist]], [[ests]])) [[astrophysicist]].delete(); } catch (IOException e) { Log.d(MigrationHelper.LOG_TAG, "Error moving file: " + [[astrophysicist]].getAbsolutePath()); } } Log.d("RecursiveMoveFiles", String.format("Moved %d files from %s to %s", [[ferocity]], [[astrophysicist]].getPath(), [[ests]].getPath())); return [[ferocity]]; }
[[[[Nl]]]]: Recursively copy files from one location to another and deletes the origin files after copy


--------------------------------------------- Result 14 ---------------------------------------------
[[0 (-6619%)]] --> [[[FAILED]]]

[[[[Adv]]]]: boolean [[switchInput]](Predictor.InputType [[newInputType]]){ if(mInputType != [[newInputType]]){ mAdapter.updateDataset(new ArrayList<Prediction>()); initializePredictor([[newInputType]]); loadDataUi(); return "[[True]]" == "[[True]]"; } return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: Switch input types between NUMPAD and QWERTY @ param newInputType The input type to change to @ return True if input type wa changed

[[[[Adv]]]]: boolean [[alleging]](Predictor.InputType [[impressive]]){ if(mInputType != [[impressive]]){ mAdapter.updateDataset(new ArrayList<Prediction>()); initializePredictor([[impressive]]); loadDataUi(); return "[["Factual" == "Factual"]]" == "[["Factual" == "Factual"]]"; } return "[["Impostor" != "Impostor"]]" != "[["Impostor" != "Impostor"]]"; }
[[[[Nl]]]]: Switch input types between NUMPAD and QWERTY @ param newInputType The input type to change to @ return True if input type wa changed


--------------------------------------------- Result 15 ---------------------------------------------
[[0 (-7028%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private ConditionsTreeNode [[add]](ConditionsTreeNode [[node]], Operator [[op]]) throws Exception { if ([[node]].mParent != null) { throw new Exception("Can only add new expressions from root node down."); } ConditionsTreeNode [[tmpNode]] = new ConditionsTreeNode(mParent, [[op]]); [[tmpNode]].mLeft = this; [[tmpNode]].mRight = [[node]]; if (mParent != null) { mParent.updateChild(this, [[tmpNode]]); } this.[[mParent]] = [[tmpNode]]; [[node]].mParent = [[tmpNode]]; return [[tmpNode]]; }
[[[[Nl]]]]: Adds two new ConditionTreeNodes , one for the operator and one for the new condition

[[[[Adv]]]]: private ConditionsTreeNode [[summing]](ConditionsTreeNode [[necktie]], Operator [[surgery]]) throws Exception { if ([[necktie]].mParent != null) { throw new Exception("Can only add new expressions from root node down."); } ConditionsTreeNode [[skimming]] = new ConditionsTreeNode(mParent, [[surgery]]); [[skimming]].mLeft = this; [[skimming]].mRight = [[necktie]]; if (mParent != null) { mParent.updateChild(this, [[skimming]]); } this.[[massachusetts]] = [[skimming]]; [[necktie]].mParent = [[skimming]]; return [[skimming]]; }
[[[[Nl]]]]: Adds two new ConditionTreeNodes , one for the operator and one for the new condition


--------------------------------------------- Result 16 ---------------------------------------------
[[0 (-7970%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[removeAllStickyEvents]]() { synchronized (stickyEventMap) { stickyEventMap.clear(); this.[[mapOfStickyEvent]] = null; } }
[[[[Nl]]]]: Removes all sticky events

[[[[Adv]]]]: public void [[elite]]() { synchronized (stickyEventMap) { stickyEventMap.clear(); this.[[prodigy]] = null; } }
[[[[Nl]]]]: Removes all sticky events


--------------------------------------------- Result 17 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 17 / 0 / 17:   2%|▏         | 17/785 [00:31<23:49,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 17 / 0 / 17:   2%|▏         | 18/785 [00:32<23:13,  1.82s/it][Succeeded / Failed / Skipped / Total] 0 / 18 / 0 / 18:   2%|▏         | 18/785 [00:32<23:13,  1.82s/it][Succeeded / Failed / Skipped / Total] 0 / 18 / 0 / 18:   2%|▏         | 19/785 [00:35<23:54,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 19 / 0 / 19:   2%|▏         | 19/785 [00:35<23:54,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 19 / 0 / 19:   3%|▎         | 20/785 [00:37<23:43,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 20 / 0 / 20:   3%|▎         | 20/785 [00:37<23:43,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 20 / 0 / 20:   3%|▎         | 21/785 [00:40<24:37,  1.93s/it][Succeeded / Failed / Skipped / Total] 0 / 21 / 0 / 21:   3%|▎         | 21/785 [00:40<24:37,  1.93s/it][Succeeded / Failed / Skipped / Total] 0 / 21 / 0 / 21:   3%|▎         | 22/785 [00:41<24:05,  1.89s/it][Succeeded / Failed / Skipped / Total] 0 / 22 / 0 / 22:   3%|▎         | 22/785 [00:41<24:05,  1.89s/it][Succeeded / Failed / Skipped / Total] 0 / 22 / 0 / 22:   3%|▎         | 23/785 [00:42<23:37,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 23 / 0 / 23:   3%|▎         | 23/785 [00:42<23:37,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 23 / 0 / 23:   3%|▎         | 24/785 [00:45<24:07,  1.90s/it][Succeeded / Failed / Skipped / Total] 0 / 24 / 0 / 24:   3%|▎         | 24/785 [00:45<24:07,  1.90s/it][Succeeded / Failed / Skipped / Total] 0 / 24 / 0 / 24:   3%|▎         | 25/785 [00:46<23:25,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 25 / 0 / 25:   3%|▎         | 25/785 [00:46<23:25,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 25 / 0 / 25:   3%|▎         | 26/785 [00:47<23:01,  1.82s/it][[0 (-6863%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[obtainHeaderIconTintList]](@StyleRes final int [[themeResourceId]]) { TypedArray [[typedArray]] = getContext().getTheme().obtainStyledAttributes([[themeResourceId]], new int[]{R.attr.materialDialogHeaderIconTint}); setHeaderIconTintList([[typedArray]].getColorStateList(0)); }
[[[[Nl]]]]: Obtains the color state list , which is used to tint the header icon of the dialog , from a specific theme

[[[[Adv]]]]: private void [[snowboarding]](@StyleRes final int [[vision]]) { TypedArray [[beatles]] = getContext().getTheme().obtainStyledAttributes([[vision]], new int[]{R.attr.materialDialogHeaderIconTint}); setHeaderIconTintList([[beatles]].getColorStateList(0)); }
[[[[Nl]]]]: Obtains the color state list , which is used to tint the header icon of the dialog , from a specific theme


--------------------------------------------- Result 18 ---------------------------------------------
[[0 (-8165%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public OutputStream [[openOutputStream]]() throws IOException { OutputStream [[o]]; ensureOpen(); [[o]] = new BaseOutputStream(this); oStreams++; return [[o]]; }
[[[[Nl]]]]: Returns an output stream

[[[[Adv]]]]: public OutputStream [[appetizers]]() throws IOException { OutputStream [[australians]]; ensureOpen(); [[australians]] = new BaseOutputStream(this); oStreams++; return [[australians]]; }
[[[[Nl]]]]: Returns an output stream


--------------------------------------------- Result 19 ---------------------------------------------
[[0 (-7176%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean isSameListWithBookmark(ReaderPostList [[posts]]) { if ([[posts]] == null || [[posts]].size() != this.size()) { return "[[False]]" != "[[False]]"; } for (ReaderPost post : [[posts]]) { int [[index]] = indexOfPost(post); if ([[index]] == -1) { return "[[False]]" != "[[False]]"; } ReaderPost [[postInsideList]] = this.get([[index]]); if (!post.isSamePost([[postInsideList]]) || post.isBookmarked != [[postInsideList]].isBookmarked) { return "[[False]]" != "[[False]]"; } } return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Does passed list contain the same posts as this list

[[[[Adv]]]]: public boolean isSameListWithBookmark(ReaderPostList [[stances]]) { if ([[stances]] == null || [[stances]].size() != this.size()) { return "[["Forges" != "Forges"]]" != "[["Forges" != "Forges"]]"; } for (ReaderPost post : [[stances]]) { int [[indications]] = indexOfPost(post); if ([[indications]] == -1) { return "[["Forges" != "Forges"]]" != "[["Forges" != "Forges"]]"; } ReaderPost [[gonads]] = this.get([[indications]]); if (!post.isSamePost([[gonads]]) || post.isBookmarked != [[gonads]].isBookmarked) { return "[["Forges" != "Forges"]]" != "[["Forges" != "Forges"]]"; } } return "[["Realistic" == "Realistic"]]" == "[["Realistic" == "Realistic"]]"; }
[[[[Nl]]]]: Does passed list contain the same posts as this list


--------------------------------------------- Result 20 ---------------------------------------------
[[0 (-7252%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public DeleteDomainRequest [[withDomainName]](String [[domainName]]) { this.[[domainName]] = [[domainName]]; return this; }
[[[[Nl]]]]: The name of the domain to delete

[[[[Adv]]]]: public DeleteDomainRequest [[wearin]](String [[instruments]]) { this.[[tween]] = [[instruments]]; return this; }
[[[[Nl]]]]: The name of the domain to delete


--------------------------------------------- Result 21 ---------------------------------------------
[[0 (-7119%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setAccount]](Account [[account]], boolean [[savedAccount]]) { Account [[oldAccount]] = mCurrentAccount; boolean [[validAccount]] = [[account]] != null && AccountUtils.setCurrentOwnCloudAccount(getApplicationContext(), [[account]].name); if ([[validAccount]]) { mCurrentAccount = [[account]]; mAccountWasSet = True; mAccountWasRestored = [[savedAccount]] || mCurrentAccount.equals([[oldAccount]]); } else { swapToDefaultAccount(); } }
[[[[Nl]]]]: Sets and validates the ownCloud { @ link Account } associated to the Activity

[[[[Adv]]]]: protected void [[blabbermouth]](Account [[ledgers]], boolean [[sliced]]) { Account [[quivering]] = mCurrentAccount; boolean [[withering]] = [[ledgers]] != null && AccountUtils.setCurrentOwnCloudAccount(getApplicationContext(), [[ledgers]].name); if ([[withering]]) { mCurrentAccount = [[ledgers]]; mAccountWasSet = True; mAccountWasRestored = [[sliced]] || mCurrentAccount.equals([[quivering]]); } else { swapToDefaultAccount(); } }
[[[[Nl]]]]: Sets and validates the ownCloud { @ link Account } associated to the Activity


--------------------------------------------- Result 22 ---------------------------------------------
[[0 (-6992%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final Cache2kBuilder<K, V> [[sharpExpiry]](boolean [[f]]) { config().setSharpExpiry([[f]]); return this; }
[[[[Nl]]]]: By default the expiry time is not exact , which means , a value might be visible a few milliseconds after the time of expiry

[[[[Adv]]]]: public final Cache2kBuilder<K, V> [[device]](boolean [[und]]) { config().setSharpExpiry([[und]]); return this; }
[[[[Nl]]]]: By default the expiry time is not exact , which means , a value might be visible a few milliseconds after the time of expiry


--------------------------------------------- Result 23 ---------------------------------------------
[[0 (-7447%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[fetchJokeFromJavaLibrary]]() { String [[joke]] = JokeFromJavaLibrary.getJoke(); mJokeFetcherListener.onJokeRetrievedSuccessfully([[joke]], UserPreferences.ARG_FETCH_JOKE_FROM_JAVA_LIBRARY); }
[[[[Nl]]]]: Fetches the joke from { @ link JokeFromJavaLibrary } class

[[[[Adv]]]]: private void [[finalise]]() { String [[ajoke]] = JokeFromJavaLibrary.getJoke(); mJokeFetcherListener.onJokeRetrievedSuccessfully([[ajoke]], UserPreferences.ARG_FETCH_JOKE_FROM_JAVA_LIBRARY); }
[[[[Nl]]]]: Fetches the joke from { @ link JokeFromJavaLibrary } class


--------------------------------------------- Result 24 ---------------------------------------------
[[0 (-6754%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[run]]() { this.[[running]] = "[[True]]" == "[[True]]"; this.[[started]] = "[[True]]" == "[[True]]"; this.tryAndNotifyAll(); this.last_message_at = System.currentTimeMillis(); Message [[request]] = null; if(!this.bindToServer(this.device_info)) this.stopConnection(); while(this.[[running]]) { [[request]] = this.receive(); if([[request]] != null) { this.handleMessage([[request]]); [[request]] = null; } this.checkForLiveness(); Thread.yield(); } this.unbindFromServer(this.device_info); }
[[[[Nl]]]]: Executed by the Java runtime when the Connection thread starts

[[[[Adv]]]]: public void [[deliver]]() { this.[[applied]] = "[["Earnest" == "Earnest"]]" == "[["Earnest" == "Earnest"]]"; this.[[waging]] = "[["Earnest" == "Earnest"]]" == "[["Earnest" == "Earnest"]]"; this.tryAndNotifyAll(); this.last_message_at = System.currentTimeMillis(); Message [[petition]] = null; if(!this.bindToServer(this.device_info)) this.stopConnection(); while(this.[[applied]]) { [[petition]] = this.receive(); if([[petition]] != null) { this.handleMessage([[petition]]); [[petition]] = null; } this.checkForLiveness(); Thread.yield(); } this.unbindFromServer(this.device_info); }
[[[[Nl]]]]: Executed by the Java runtime when the Connection thread starts


--------------------------------------------- Result 25 ---------------------------------------------
[[0 (-7087%)]] --> [[[FAILED]]]

[[[[Adv]]]]: String [[getSearchUrl]]() { if (mIsLowPriority && mLowPriorityUri != null) { return mLowPriorityUri.toString(); } else { return mNormalPriorityUri.toString(); } }
[[[[Nl]]]]: Gets the search URL for this request

[[[[Adv]]]]: String [[chump]]() { if (mIsLowPriority && mLowPriorityUri != null) { return mLowPriorityUri.toString(); } else { return mNormalPriorityUri.toString(); } }
[[[[Nl]]]]: Gets the search URL for this request


--------------------------------------------- Result 26 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 26 / 0 / 26:   3%|▎         | 26/785 [00:47<23:01,  1.82s/it][Succeeded / Failed / Skipped / Total] 0 / 26 / 0 / 26:   3%|▎         | 27/785 [00:49<22:55,  1.81s/it][Succeeded / Failed / Skipped / Total] 0 / 27 / 0 / 27:   3%|▎         | 27/785 [00:49<22:55,  1.81s/it][Succeeded / Failed / Skipped / Total] 0 / 27 / 0 / 27:   4%|▎         | 28/785 [00:50<22:49,  1.81s/it][Succeeded / Failed / Skipped / Total] 0 / 28 / 0 / 28:   4%|▎         | 28/785 [00:50<22:49,  1.81s/it][Succeeded / Failed / Skipped / Total] 0 / 28 / 0 / 28:   4%|▎         | 29/785 [00:52<22:44,  1.81s/it][Succeeded / Failed / Skipped / Total] 0 / 29 / 0 / 29:   4%|▎         | 29/785 [00:52<22:44,  1.81s/it][Succeeded / Failed / Skipped / Total] 0 / 29 / 0 / 29:   4%|▍         | 30/785 [00:53<22:25,  1.78s/it][Succeeded / Failed / Skipped / Total] 0 / 30 / 0 / 30:   4%|▍         | 30/785 [00:53<22:25,  1.78s/it][Succeeded / Failed / Skipped / Total] 0 / 30 / 0 / 30:   4%|▍         | 31/785 [00:54<22:09,  1.76s/it][Succeeded / Failed / Skipped / Total] 0 / 31 / 0 / 31:   4%|▍         | 31/785 [00:54<22:09,  1.76s/it][Succeeded / Failed / Skipped / Total] 0 / 31 / 0 / 31:   4%|▍         | 32/785 [00:57<22:33,  1.80s/it][Succeeded / Failed / Skipped / Total] 0 / 32 / 0 / 32:   4%|▍         | 32/785 [00:57<22:33,  1.80s/it][Succeeded / Failed / Skipped / Total] 0 / 32 / 0 / 32:   4%|▍         | 33/785 [01:00<22:58,  1.83s/it][[0 (-7891%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public B [[setAutoDeleteFilesAfterSuccessfulUpload]](boolean [[autoDeleteFiles]]) { params.autoDeleteSuccessfullyUploadedFiles = [[autoDeleteFiles]]; return self(); }
[[[[Nl]]]]: Sets the automatic file deletion after successful upload

[[[[Adv]]]]: public B [[exhumation]](boolean [[electrodes]]) { params.autoDeleteSuccessfullyUploadedFiles = [[electrodes]]; return self(); }
[[[[Nl]]]]: Sets the automatic file deletion after successful upload


--------------------------------------------- Result 27 ---------------------------------------------
[[0 (-7600%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public SendRawEmailResult [[withMessageId]](String [[messageId]]) { this.[[messageId]] = [[messageId]]; return this; }
[[[[Nl]]]]: < p > The unique message identifier returned from the < code > SendRawEmail < code > action

[[[[Adv]]]]: public SendRawEmailResult [[supervising]](String [[vibrator]]) { this.[[crossings]] = [[vibrator]]; return this; }
[[[[Nl]]]]: < p > The unique message identifier returned from the < code > SendRawEmail < code > action


--------------------------------------------- Result 28 ---------------------------------------------
[[0 (-7445%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setRimColor]](int [[rimColor]]) { this.[[rimColor]] = [[rimColor]]; setupPaints(); if (!isSpinning) { invalidate(); } }
[[[[Nl]]]]: Sets the color of the wheel 's contour @ param rimColor the color for the wheel

[[[[Adv]]]]: public void [[relinquished]](int [[fluctuations]]) { this.[[porque]] = [[fluctuations]]; setupPaints(); if (!isSpinning) { invalidate(); } }
[[[[Nl]]]]: Sets the color of the wheel 's contour @ param rimColor the color for the wheel


--------------------------------------------- Result 29 ---------------------------------------------
[[0 (-6572%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[merge]](SimpleSlotQueue<SlotType, ElementType> [[other]]) { if (Arrays.equals(slotTypes, [[other]].slotTypes)) { for (int [[i]] = 0; [[i]] < slotTypes.length; [[i]]++) { slotLists[[[i]]].addAll([[other]].slotLists[[[i]]]); } } else { throw new UnsupportedOperationException("sloptTypes array of both SimpleSlotQueues must be equal!"); } }
[[[[Nl]]]]: Adds all elements of the other queue to this queue

[[[[Adv]]]]: public void [[thawing]](SimpleSlotQueue<SlotType, ElementType> [[sundry]]) { if (Arrays.equals(slotTypes, [[sundry]].slotTypes)) { for (int [[wanna]] = 0; [[wanna]] < slotTypes.length; [[wanna]]++) { slotLists[[[wanna]]].addAll([[sundry]].slotLists[[[wanna]]]); } } else { throw new UnsupportedOperationException("sloptTypes array of both SimpleSlotQueues must be equal!"); } }
[[[[Nl]]]]: Adds all elements of the other queue to this queue


--------------------------------------------- Result 30 ---------------------------------------------
[[0 (-8348%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public BytecodeStream [[getBytecodeStream]]() { byte[] [[bytecodes]] = getBytecodes(); if ([[bytecodes]] == null) { return null; } else { return new BytecodeStream(this, [[bytecodes]]); } }
[[[[Nl]]]]: Method getBytecodeStream

[[[[Adv]]]]: public BytecodeStream [[shrunken]]() { byte[] [[capitalization]] = getBytecodes(); if ([[capitalization]] == null) { return null; } else { return new BytecodeStream(this, [[capitalization]]); } }
[[[[Nl]]]]: Method getBytecodeStream


--------------------------------------------- Result 31 ---------------------------------------------
[[0 (-7313%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected ElementNode [[createMongoConfigurationElement]]() { ElementNode.Builder [[builder]] = new ElementNode.Builder( InstanceManagementRoles.MongoDBConfiguration.getRole().getName(), IInstanceManagementParser.MongoDbElements.MongoConfiguration.getLocalName(), "database", InstanceManagementRoleKeys.MongoDBConfiguration, this); [[builder]].description("Global configuration for MongoDB data persistence."); [[builder]].attributeGroup(ConfigurationModelProvider.ATTR_GROUP_CONNECTIVITY); [[builder]].attribute((new AttributeNode.Builder("Id", "id", AttributeType.String, ConfigurationModelProvider.ATTR_GROUP_CONNECTIVITY) .description("Unique id for referencing configuration.").makeIndex().makeRequired().build())); CommonDatastoreProvider.addMongoDbAttributes([[builder]], ConfigurationModelProvider.ATTR_GROUP_CONNECTIVITY); return [[builder]].build(); }
[[[[Nl]]]]: Create element configuration for MongoDB settings

[[[[Adv]]]]: protected ElementNode [[signin]]() { ElementNode.Builder [[dispenser]] = new ElementNode.Builder( InstanceManagementRoles.MongoDBConfiguration.getRole().getName(), IInstanceManagementParser.MongoDbElements.MongoConfiguration.getLocalName(), "database", InstanceManagementRoleKeys.MongoDBConfiguration, this); [[dispenser]].description("Global configuration for MongoDB data persistence."); [[dispenser]].attributeGroup(ConfigurationModelProvider.ATTR_GROUP_CONNECTIVITY); [[dispenser]].attribute((new AttributeNode.Builder("Id", "id", AttributeType.String, ConfigurationModelProvider.ATTR_GROUP_CONNECTIVITY) .description("Unique id for referencing configuration.").makeIndex().makeRequired().build())); CommonDatastoreProvider.addMongoDbAttributes([[dispenser]], ConfigurationModelProvider.ATTR_GROUP_CONNECTIVITY); return [[dispenser]].build(); }
[[[[Nl]]]]: Create element configuration for MongoDB settings


--------------------------------------------- Result 32 ---------------------------------------------
[[0 (-7950%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[delete]](CMARole [[role]]) { final String [[id]] = getResourceIdOrThrow([[role]], "role"); final String spaceId = getSpaceIdOrThrow([[role]], "role"); final CMASystem [[sys]] = [[role]].getSystem(); [[role]].setSystem(null); try { final Response<Void> [[response]] = service.delete(spaceId, [[id]]).blockingFirst(); return [[response]].code(); } finally { [[role]].setSystem([[sys]]); } }
[[[[Nl]]]]: Delete the given role instance

[[[[Adv]]]]: public int [[scrapping]](CMARole [[turnout]]) { final String [[determining]] = getResourceIdOrThrow([[turnout]], "role"); final String spaceId = getSpaceIdOrThrow([[turnout]], "role"); final CMASystem [[pickpocketing]] = [[turnout]].getSystem(); [[turnout]].setSystem(null); try { final Response<Void> [[unanswerable]] = service.delete(spaceId, [[determining]]).blockingFirst(); return [[unanswerable]].code(); } finally { [[turnout]].setSystem([[pickpocketing]]); } }
[[[[Nl]]]]: Delete the given role instance


--------------------------------------------- Result 33 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 33 / 0 / 33:   4%|▍         | 33/785 [01:00<22:58,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 33 / 0 / 33:   4%|▍         | 34/785 [01:02<22:54,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 34 / 0 / 34:   4%|▍         | 34/785 [01:02<22:54,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 34 / 0 / 34:   4%|▍         | 35/785 [01:04<23:03,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 35 / 0 / 35:   4%|▍         | 35/785 [01:04<23:03,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 35 / 0 / 35:   5%|▍         | 36/785 [01:06<22:58,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 36 / 0 / 36:   5%|▍         | 36/785 [01:06<22:58,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 36 / 0 / 36:   5%|▍         | 37/785 [01:08<23:04,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 37 / 0 / 37:   5%|▍         | 37/785 [01:08<23:04,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 37 / 0 / 37:   5%|▍         | 38/785 [01:09<22:48,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 38 / 0 / 38:   5%|▍         | 38/785 [01:09<22:48,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 38 / 0 / 38:   5%|▍         | 39/785 [01:11<22:44,  1.83s/it][[0 (-7573%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static synchronized byte[] [[charToByteArray]](char[] [[buffer]], int offset, int [[length]], String [[enc]]) throws UnsupportedEncodingException { if(lastWriterEncoding == null || !lastWriterEncoding.equals([[enc]])) { lastWriter = getStreamWriterPrim([[enc]]); lastWriterEncoding = [[enc]]; } int [[size]] = lastWriter.sizeOf([[buffer]], offset, [[length]]); ByteArrayOutputStream os = new ByteArrayOutputStream([[size]]); lastWriter.open(os, [[enc]]); try { lastWriter.write([[buffer]], offset, [[length]]); lastWriter.close(); } catch(IOException x) { throw new RuntimeException("IOException writing writer "+x.getMessage()); } try { os.close(); } catch(IOException x) {}; return os.toByteArray(); }
[[[[Nl]]]]: Convert a char array to a byte array @ param buffer The char array buffer @ param offset The offset @ param length The length @ param enc The character encoding @ return A new byte array @ exception UnsupportedEncodingException If the encoding is not known

[[[[Adv]]]]: public static synchronized byte[] [[immortalized]](char[] [[keyboards]], int offset, int [[longitude]], String [[progression]]) throws UnsupportedEncodingException { if(lastWriterEncoding == null || !lastWriterEncoding.equals([[progression]])) { lastWriter = getStreamWriterPrim([[progression]]); lastWriterEncoding = [[progression]]; } int [[tonnage]] = lastWriter.sizeOf([[keyboards]], offset, [[longitude]]); ByteArrayOutputStream os = new ByteArrayOutputStream([[tonnage]]); lastWriter.open(os, [[progression]]); try { lastWriter.write([[keyboards]], offset, [[longitude]]); lastWriter.close(); } catch(IOException x) { throw new RuntimeException("IOException writing writer "+x.getMessage()); } try { os.close(); } catch(IOException x) {}; return os.toByteArray(); }
[[[[Nl]]]]: Convert a char array to a byte array @ param buffer The char array buffer @ param offset The offset @ param length The length @ param enc The character encoding @ return A new byte array @ exception UnsupportedEncodingException If the encoding is not known


--------------------------------------------- Result 34 ---------------------------------------------
[[0 (-7180%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[finishSelection]]() { if (selection.size() != 4) throw new IllegalStateException("Select 4 balls first"); if (board.selection(getModelBalls())) { for (BallSelectionListener [[subscriber]] : subscribers) { [[subscriber]].onSelectionSucceeded(new ArrayList<>(selection)); } } else { for (BallSelectionListener [[subscriber]] : subscribers) { [[subscriber]].onSelectionFailed(new ArrayList<>(selection)); } } for (BallActor [[selected]] : selection) { [[selected]].quietlyUnselect(); } selection.clear(); }
[[[[Nl]]]]: This method is executed when the selection is complete

[[[[Adv]]]]: private void [[lunkhead]]() { if (selection.size() != 4) throw new IllegalStateException("Select 4 balls first"); if (board.selection(getModelBalls())) { for (BallSelectionListener [[stockholders]] : subscribers) { [[stockholders]].onSelectionSucceeded(new ArrayList<>(selection)); } } else { for (BallSelectionListener [[stockholders]] : subscribers) { [[stockholders]].onSelectionFailed(new ArrayList<>(selection)); } } for (BallActor [[picks]] : selection) { [[picks]].quietlyUnselect(); } selection.clear(); }
[[[[Nl]]]]: This method is executed when the selection is complete


--------------------------------------------- Result 35 ---------------------------------------------
[[0 (-7008%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[testGetFirstIndexWithSpecificStateWhenAdapterIsEmpty]]() { AbstractItemStateListAdapterImplementation [[abstractItemStateListAdapter]] = new AbstractItemStateListAdapterImplementation(getContext(), new ListDecoratorImplementation(), LogLevel.ALL, new ArrayList<Item<Object>>(), False, "[[True]]" == "[[True]]", new LinkedHashSet<ListAdapterItemClickListener<Object>>(), new LinkedHashSet<ListAdapterItemLongClickListener<Object>>(), new LinkedHashSet<ListAdapterListener<Object>>(), new LinkedHashSet<ListEnableStateListener<Object>>(), 2, False, new LinkedHashSet<ListItemStateListener<Object>>()); assertEquals(-1, [[abstractItemStateListAdapter]].getFirstIndexWithSpecificState(0)); }
[[[[Nl]]]]: Tests the functionality of the method , which allows to retrieve the index of the first item , which has a specific state , if the adapter is empty

[[[[Adv]]]]: public final void [[sameer]]() { AbstractItemStateListAdapterImplementation [[blackguard]] = new AbstractItemStateListAdapterImplementation(getContext(), new ListDecoratorImplementation(), LogLevel.ALL, new ArrayList<Item<Object>>(), False, "[["Decent" == "Decent"]]" == "[["Decent" == "Decent"]]", new LinkedHashSet<ListAdapterItemClickListener<Object>>(), new LinkedHashSet<ListAdapterItemLongClickListener<Object>>(), new LinkedHashSet<ListAdapterListener<Object>>(), new LinkedHashSet<ListEnableStateListener<Object>>(), 2, False, new LinkedHashSet<ListItemStateListener<Object>>()); assertEquals(-1, [[blackguard]].getFirstIndexWithSpecificState(0)); }
[[[[Nl]]]]: Tests the functionality of the method , which allows to retrieve the index of the first item , which has a specific state , if the adapter is empty


--------------------------------------------- Result 36 ---------------------------------------------
[[0 (-7603%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[computeFieldOffsets]]() { primDataSize = 0; numObjFields = 0; for (int [[i]] = 0; [[i]] < fields.length; [[i]]++) { ObjectStreamField [[f]] = fields[[[i]]]; switch ([[f]].getTypeCode()) { case 'Z': case 'B': [[f]].setOffset(primDataSize++); break; case 'C': case 'S': [[f]].setOffset(primDataSize); primDataSize += 2; break; case 'I': case 'F': [[f]].setOffset(primDataSize); primDataSize += 4; break; case 'J': case 'D': [[f]].setOffset(primDataSize); primDataSize += 8; break; case '[': case 'L': [[f]].setOffset(numObjFields++); break; default: throw new InternalError(); } } }
[[[[Nl]]]]: Calculates and sets serializable field offsets , as well as primitive data size and object field count totals

[[[[Adv]]]]: private void [[sunnyside]]() { primDataSize = 0; numObjFields = 0; for (int [[heh]] = 0; [[heh]] < fields.length; [[heh]]++) { ObjectStreamField [[beckwith]] = fields[[[heh]]]; switch ([[beckwith]].getTypeCode()) { case 'Z': case 'B': [[beckwith]].setOffset(primDataSize++); break; case 'C': case 'S': [[beckwith]].setOffset(primDataSize); primDataSize += 2; break; case 'I': case 'F': [[beckwith]].setOffset(primDataSize); primDataSize += 4; break; case 'J': case 'D': [[beckwith]].setOffset(primDataSize); primDataSize += 8; break; case '[': case 'L': [[beckwith]].setOffset(numObjFields++); break; default: throw new InternalError(); } } }
[[[[Nl]]]]: Calculates and sets serializable field offsets , as well as primitive data size and object field count totals


--------------------------------------------- Result 37 ---------------------------------------------
[[0 (-7594%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public WindowBuilder [[withSize]](int [[width]], int [[height]]) { this.[[size]] = new Dimension([[width]], [[height]]); return this; }
[[[[Nl]]]]: Configure the window size @ param width width @ param height height @ return this reference for chaining

[[[[Adv]]]]: public WindowBuilder [[jettisoned]](int [[assortment]], int [[culmination]]) { this.[[pruning]] = new Dimension([[assortment]], [[culmination]]); return this; }
[[[[Nl]]]]: Configure the window size @ param width width @ param height height @ return this reference for chaining


--------------------------------------------- Result 38 ---------------------------------------------
[[0 (-7318%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setMinDate]](Calendar [[calendar]]) { mMinDate = [[calendar]]; if (mDayPickerView != null) { mDayPickerView.onChange(); } }
[[[[Nl]]]]: Sets the minimal date that can be selected in this date picker

[[[[Adv]]]]: public void [[affraid]](Calendar [[timing]]) { mMinDate = [[timing]]; if (mDayPickerView != null) { mDayPickerView.onChange(); } }
[[[[Nl]]]]: Sets the minimal date that can be selected in this date picker


[Succeeded / Failed / Skipped / Total] 0 / 39 / 0 / 39:   5%|▍         | 39/785 [01:11<22:44,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 39 / 0 / 39:   5%|▌         | 40/785 [01:14<23:01,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 40 / 0 / 40:   5%|▌         | 40/785 [01:14<23:01,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 40 / 0 / 40:   5%|▌         | 41/785 [01:17<23:17,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 41 / 0 / 41:   5%|▌         | 41/785 [01:17<23:17,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 41 / 0 / 41:   5%|▌         | 42/785 [01:19<23:31,  1.90s/it][Succeeded / Failed / Skipped / Total] 0 / 42 / 0 / 42:   5%|▌         | 42/785 [01:19<23:31,  1.90s/it][Succeeded / Failed / Skipped / Total] 0 / 42 / 0 / 42:   5%|▌         | 43/785 [01:20<23:16,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 43 / 0 / 43:   5%|▌         | 43/785 [01:20<23:16,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 43 / 0 / 43:   6%|▌         | 44/785 [01:22<23:11,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 44 / 0 / 44:   6%|▌         | 44/785 [01:22<23:11,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 44 / 0 / 44:   6%|▌         | 45/785 [01:23<22:57,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 45 / 0 / 45:   6%|▌         | 45/785 [01:23<22:57,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 45 / 0 / 45:   6%|▌         | 46/785 [01:25<22:52,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 46 / 0 / 46:   6%|▌         | 46/785 [01:25<22:52,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 46 / 0 / 46:   6%|▌         | 47/785 [01:27<22:56,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 47 / 0 / 47:   6%|▌         | 47/785 [01:27<22:56,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 47 / 0 / 47:   6%|▌         | 48/785 [01:30<23:01,  1.88s/it]--------------------------------------------- Result 39 ---------------------------------------------
[[0 (-7621%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static ItemCollection [[load]](Cursor [[cur]]) { ItemCollection [[coll]] = new ItemCollection(); if ([[cur]] == null) { return null; } [[coll]].setTitle([[cur]].getString(0)); [[coll]].setParent([[cur]].getString(1)); [[coll]].etag = [[cur]].getString(2); [[coll]].dirty = [[cur]].getString(3); [[coll]].dbId = [[cur]].getString(4); [[coll]].setKey([[cur]].getString(5)); [[coll]].size = [[cur]].getInt(6); [[coll]].timestamp = [[cur]].getString(7); return [[coll]]; }
[[[[Nl]]]]: Loads a collection from the specified Cursor , where the cursor was created using the recommended query in Database

[[[[Adv]]]]: public static ItemCollection [[responsability]](Cursor [[porker]]) { ItemCollection [[div]] = new ItemCollection(); if ([[porker]] == null) { return null; } [[div]].setTitle([[porker]].getString(0)); [[div]].setParent([[porker]].getString(1)); [[div]].etag = [[porker]].getString(2); [[div]].dirty = [[porker]].getString(3); [[div]].dbId = [[porker]].getString(4); [[div]].setKey([[porker]].getString(5)); [[div]].size = [[porker]].getInt(6); [[div]].timestamp = [[porker]].getString(7); return [[div]]; }
[[[[Nl]]]]: Loads a collection from the specified Cursor , where the cursor was created using the recommended query in Database


--------------------------------------------- Result 40 ---------------------------------------------
[[0 (-8061%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static void [[unlink]](String [[path]], Callback [[callback]]) { try { RNFetchBlobFS.deleteRecursive(new File([[path]])); [[callback]].invoke(null, "[[True]]" == "[[True]]"); } catch(Exception err) { if(err != null) [[callback]].invoke(err.getLocalizedMessage(), "[[False]]" != "[[False]]"); } }
[[[[Nl]]]]: Unlink file at path @ param path Path of target @ param callback JS context callback

[[[[Adv]]]]: static void [[headshots]](String [[distances]], Callback [[recheck]]) { try { RNFetchBlobFS.deleteRecursive(new File([[distances]])); [[recheck]].invoke(null, "[["Earnest" == "Earnest"]]" == "[["Earnest" == "Earnest"]]"); } catch(Exception err) { if(err != null) [[recheck]].invoke(err.getLocalizedMessage(), "[["Forgeries" != "Forgeries"]]" != "[["Forgeries" != "Forgeries"]]"); } }
[[[[Nl]]]]: Unlink file at path @ param path Path of target @ param callback JS context callback


--------------------------------------------- Result 41 ---------------------------------------------
[[0 (-6881%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[removeApp]](long [[key]], String [[columnName]]) { ContentValues [[values]] = new ContentValues(); [[values]].putNull([[columnName]]); Uri [[appUri]] = ContentUris.withAppendedId(CONTENT_URI, [[key]]); getContentResolver().update([[appUri]], [[values]], null, null); }
[[[[Nl]]]]: TODO : not sure which one to use : putNull vs remove

[[[[Adv]]]]: private void [[authorized]](long [[importance]], String [[geishas]]) { ContentValues [[relevance]] = new ContentValues(); [[relevance]].putNull([[geishas]]); Uri [[authorised]] = ContentUris.withAppendedId(CONTENT_URI, [[importance]]); getContentResolver().update([[authorised]], [[relevance]], null, null); }
[[[[Nl]]]]: TODO : not sure which one to use : putNull vs remove


--------------------------------------------- Result 42 ---------------------------------------------
[[0 (-8358%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[SVDecomp]](Mat [[src]], Mat [[w]], Mat [[u]], Mat vt, int [[flags]]) { SVDecomp_0([[src]].nativeObj, [[w]].nativeObj, [[u]].nativeObj, vt.nativeObj, [[flags]]); return; }
[[[[Nl]]]]: javadoc : SVDecomp ( src , w , u , vt , flags )

[[[[Adv]]]]: public static void [[friendship]](Mat [[googled]], Mat [[beckwith]], Mat [[shou]], Mat vt, int [[beacon]]) { SVDecomp_0([[googled]].nativeObj, [[beckwith]].nativeObj, [[shou]].nativeObj, vt.nativeObj, [[beacon]]); return; }
[[[[Nl]]]]: javadoc : SVDecomp ( src , w , u , vt , flags )


--------------------------------------------- Result 43 ---------------------------------------------
[[0 (-5922%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public NotificationActionHolder [[autoCancel]](boolean [[autoCancel]]) { builder.setAutoCancel([[autoCancel]]); return this; }
[[[[Nl]]]]: Make this notification automatically dismissed when the user touches it

[[[[Adv]]]]: public NotificationActionHolder [[newport]](boolean [[abandoning]]) { builder.setAutoCancel([[newport]]); return this; }
[[[[Nl]]]]: Make this notification automatically dismissed when the user touches it


--------------------------------------------- Result 44 ---------------------------------------------
[[0 (-7612%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setTickRotation]](boolean [[tickRotation]]) { this.[[tickRotation]] = [[tickRotation]]; if (!isAttachedToWindow()) return; updateBackgroundBitmap(); invalidate(); }
[[[[Nl]]]]: to make speed value 's label rotate at each tick

[[[[Adv]]]]: public void [[puzzlement]](boolean [[averted]]) { this.[[subsurface]] = [[averted]]; if (!isAttachedToWindow()) return; updateBackgroundBitmap(); invalidate(); }
[[[[Nl]]]]: to make speed value 's label rotate at each tick


--------------------------------------------- Result 45 ---------------------------------------------
[[0 (-6871%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[reset]]() { _name = null; _fullName = null; _displayName = null; _type = ContactType.USER; _status = ContactStatus.OFFLINE; _statusMessage = null; _usersCount = 0; _usersTotal = 0; _title = null; _muted = "[[False]]" != "[[False]]"; _noDisconnect = "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: < p > Resets the < code > Contact < code > instance back to the default values

[[[[Adv]]]]: public void [[cv]]() { _name = null; _fullName = null; _displayName = null; _type = ContactType.USER; _status = ContactStatus.OFFLINE; _statusMessage = null; _usersCount = 0; _usersTotal = 0; _title = null; _muted = "[["Deceiving" != "Deceiving"]]" != "[["Deceiving" != "Deceiving"]]"; _noDisconnect = "[["Deceiving" != "Deceiving"]]" != "[["Deceiving" != "Deceiving"]]"; }
[[[[Nl]]]]: < p > Resets the < code > Contact < code > instance back to the default values


--------------------------------------------- Result 46 ---------------------------------------------
[[0 (-7495%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public CreateTopicRequest [[withName]](String [[name]]) { this.[[name]] = [[name]]; return this; }
[[[[Nl]]]]: < p > The name of the topic you want to create

[[[[Adv]]]]: public CreateTopicRequest [[extracurricular]](String [[godfather]]) { this.[[denominations]] = [[godfather]]; return this; }
[[[[Nl]]]]: < p > The name of the topic you want to create


--------------------------------------------- Result 47 ---------------------------------------------
[[0 (-7574%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setShadowColor]](int [[shadowColor]]) { this.[[shadowColor]] = [[shadowColor]]; useTintColorForShadow = "[[False]]" != "[[False]]"; invalidateSelf(); }
[[[[Nl]]]]: Set color of shadow rendered behind shape

[[[[Adv]]]]: public void [[talkie]](int [[solved]]) { this.[[successfully]] = [[solved]]; useTintColorForShadow = "[["Forges" != "Forges"]]" != "[["Forges" != "Forges"]]"; invalidateSelf(); }
[[[[Nl]]]]: Set color of shadow rendered behind shape


--------------------------------------------- Result 48 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 48 / 0 / 48:   6%|▌         | 48/785 [01:30<23:02,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 48 / 0 / 48:   6%|▌         | 49/785 [01:31<22:57,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 49 / 0 / 49:   6%|▌         | 49/785 [01:31<22:57,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 49 / 0 / 49:   6%|▋         | 50/785 [01:33<23:01,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 50 / 0 / 50:   6%|▋         | 50/785 [01:33<23:01,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 50 / 0 / 50:   6%|▋         | 51/785 [01:36<23:13,  1.90s/it][Succeeded / Failed / Skipped / Total] 0 / 51 / 0 / 51:   6%|▋         | 51/785 [01:36<23:13,  1.90s/it][Succeeded / Failed / Skipped / Total] 0 / 51 / 0 / 51:   7%|▋         | 52/785 [01:39<23:15,  1.90s/it][Succeeded / Failed / Skipped / Total] 0 / 52 / 0 / 52:   7%|▋         | 52/785 [01:39<23:15,  1.90s/it][Succeeded / Failed / Skipped / Total] 0 / 52 / 0 / 52:   7%|▋         | 53/785 [01:41<23:27,  1.92s/it][Succeeded / Failed / Skipped / Total] 0 / 53 / 0 / 53:   7%|▋         | 53/785 [01:41<23:27,  1.92s/it][Succeeded / Failed / Skipped / Total] 0 / 53 / 0 / 53:   7%|▋         | 54/785 [01:44<23:39,  1.94s/it][Succeeded / Failed / Skipped / Total] 0 / 54 / 0 / 54:   7%|▋         | 54/785 [01:44<23:39,  1.94s/it][Succeeded / Failed / Skipped / Total] 0 / 54 / 0 / 54:   7%|▋         | 55/785 [01:47<23:49,  1.96s/it][[0 (-7757%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[recalculateTowerCounter]](PartitionOccupyingTower [[tower]], IMapArea [[area]]) { [[area]].stream().forEach((x, y) -> towers[x + y * width] = 0); List<Tuple<Integer, PartitionOccupyingTower>> [[towersInRange]] = occupyingTowers.getTowersInRange([[tower]].position, [[tower]].radius, currTower -> currTower.playerId == [[tower]].playerId); stream([[towersInRange]]) .forEach(currTower -> [[area]].stream() .filter(currTower.e2.area::contains) .forEach((x, y) -> towers[x + y * width]++)); }
[[[[Nl]]]]: Recalculates the tower counter for the given area

[[[[Adv]]]]: private void [[predestined]](PartitionOccupyingTower [[voyage]], IMapArea [[fronts]]) { [[fronts]].stream().forEach((x, y) -> towers[x + y * width] = 0); List<Tuple<Integer, PartitionOccupyingTower>> [[suspensions]] = occupyingTowers.getTowersInRange([[voyage]].position, [[voyage]].radius, currTower -> currTower.playerId == [[voyage]].playerId); stream([[suspensions]]) .forEach(currTower -> [[fronts]].stream() .filter(currTower.e2.area::contains) .forEach((x, y) -> towers[x + y * width]++)); }
[[[[Nl]]]]: Recalculates the tower counter for the given area


--------------------------------------------- Result 49 ---------------------------------------------
[[0 (-6082%)]] --> [[[FAILED]]]

[[[[Adv]]]]: @Override protected boolean [[isTargetClassName]](String [[className]]) { ClassNameSplitter [[splitter]] = new ClassNameSplitter([[className]]); return ![[className]].contains("$") && [[splitter]].isValid() && filterPackages.contains([[splitter]].getFullHostPackageName()) ; }
[[[[Nl]]]]: Match < code > [ appPackage ]

[[[[Adv]]]]: @Override protected boolean [[during]](String [[fixation]]) { ClassNameSplitter [[switcher]] = new ClassNameSplitter([[fixation]]); return ![[fixation]].contains("$") && [[switcher]].isValid() && filterPackages.contains([[switcher]].getFullHostPackageName()) ; }
[[[[Nl]]]]: Match < code > [ appPackage ]


--------------------------------------------- Result 50 ---------------------------------------------
[[0 (-6518%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public ScalingPolicy [[withStepAdjustments]](StepAdjustment... [[stepAdjustments]]) { if (getStepAdjustments() == null) { this.[[stepAdjustments]] = new java.util.ArrayList<StepAdjustment>([[stepAdjustments]].length); } for (StepAdjustment [[value]] : [[stepAdjustments]]) { this.[[stepAdjustments]].add([[value]]); } return this; }
[[[[Nl]]]]: < p > A set of adjustments that enable you to scale based on the size of the alarm breach

[[[[Adv]]]]: public ScalingPolicy [[tubular]](StepAdjustment... [[dribbles]]) { if (getStepAdjustments() == null) { this.[[front]] = new java.util.ArrayList<StepAdjustment>([[dribbles]].length); } for (StepAdjustment [[worthwhile]] : [[dribbles]]) { this.[[front]].add([[worthwhile]]); } return this; }
[[[[Nl]]]]: < p > A set of adjustments that enable you to scale based on the size of the alarm breach


--------------------------------------------- Result 51 ---------------------------------------------
[[0 (-6703%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static double [[TransEval]](GLUvertex [[u]], GLUvertex [[v]], GLUvertex [[w]]) { double [[gapL]], gapR; assert (TransLeq([[u]], [[v]]) && TransLeq([[v]], [[w]])); [[gapL]] = [[v]].t - [[u]].t; gapR = [[w]].t - [[v]].t; if ([[gapL]] + gapR > 0) { if ([[gapL]] < gapR) { return ([[v]].s - [[u]].s) + ([[u]].s - [[w]].s) * ([[gapL]] / ([[gapL]] + gapR)); } else { return ([[v]].s - [[w]].s) + ([[w]].s - [[u]].s) * (gapR / ([[gapL]] + gapR)); } } return 0; }
[[[[Nl]]]]: Define versions of EdgeSign , EdgeEval with s and t transposed

[[[[Adv]]]]: static double [[overzealous]](GLUvertex [[yoo]], GLUvertex [[among]], GLUvertex [[widescreen]]) { double [[buzzed]], gapR; assert (TransLeq([[yoo]], [[among]]) && TransLeq([[among]], [[widescreen]])); [[buzzed]] = [[among]].t - [[yoo]].t; gapR = [[widescreen]].t - [[among]].t; if ([[buzzed]] + gapR > 0) { if ([[buzzed]] < gapR) { return ([[among]].s - [[yoo]].s) + ([[yoo]].s - [[widescreen]].s) * ([[buzzed]] / ([[buzzed]] + gapR)); } else { return ([[among]].s - [[widescreen]].s) + ([[widescreen]].s - [[yoo]].s) * (gapR / ([[buzzed]] + gapR)); } } return 0; }
[[[[Nl]]]]: Define versions of EdgeSign , EdgeEval with s and t transposed


--------------------------------------------- Result 52 ---------------------------------------------
[[0 (-7820%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setY]] (float [[y]]) { this.[[position]].y = [[y]]; updated = "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: Sets the position on the y axis @ param y Position to locate the decal at

[[[[Adv]]]]: public void [[afflictions]] (float [[pense]]) { this.[[perspectives]].y = [[pense]]; updated = "[["Hypocrite" != "Hypocrite"]]" != "[["Hypocrite" != "Hypocrite"]]"; }
[[[[Nl]]]]: Sets the position on the y axis @ param y Position to locate the decal at


--------------------------------------------- Result 53 ---------------------------------------------
[[0 (-6891%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static void [[checkForDownloads]](List<String> [[artifactNames]], boolean [[checkTimeStamp]], boolean [[cleanup]]) { LOGGER.entering(); if ([[checkTimeStamp]] && (lastModifiedTime == DOWNLOAD_FILE.lastModified())) { return; } lastModifiedTime = DOWNLOAD_FILE.lastModified(); if ([[cleanup]]) { [[cleanup]](); } List<URLChecksumEntity> [[artifactDetails]] = new ArrayList<ArtifactDetails.URLChecksumEntity>(); try { [[artifactDetails]] = ArtifactDetails.getArtifactDetailsForCurrentPlatformByNames(DOWNLOAD_FILE, [[artifactNames]]); } catch (IOException e) { LOGGER.log(Level.SEVERE, "Unable to open download.json file", e); throw new RuntimeException(e); } downloadAndExtractArtifacts([[artifactDetails]]); LOGGER.exiting(); }
[[[[Nl]]]]: Check download

[[[[Adv]]]]: static void [[unashamed]](List<String> [[antigen]], boolean [[assassination]], boolean [[rinsed]]) { LOGGER.entering(); if ([[assassination]] && (lastModifiedTime == DOWNLOAD_FILE.lastModified())) { return; } lastModifiedTime = DOWNLOAD_FILE.lastModified(); if ([[rinsed]]) { [[rinsed]](); } List<URLChecksumEntity> [[personalized]] = new ArrayList<ArtifactDetails.URLChecksumEntity>(); try { [[personalized]] = ArtifactDetails.getArtifactDetailsForCurrentPlatformByNames(DOWNLOAD_FILE, [[antigen]]); } catch (IOException e) { LOGGER.log(Level.SEVERE, "Unable to open download.json file", e); throw new RuntimeException(e); } downloadAndExtractArtifacts([[personalized]]); LOGGER.exiting(); }
[[[[Nl]]]]: Check download


--------------------------------------------- Result 54 ---------------------------------------------
[[0 (-5984%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[rangeHasChanged]]() { boolean tester = "[[True]]" == "[[True]]"; tester &= plotSheet.getxRange()[0] == this.[[xrange]][0]; tester &= plotSheet.getxRange()[1] == this.[[xrange]][1]; tester &= plotSheet.getyRange()[0] == this.[[yrange]][0]; tester &= plotSheet.getyRange()[1] == this.[[yrange]][1]; if(!tester) { this.[[xrange]] = plotSheet.getxRange().clone(); this.[[yrange]] = plotSheet.getyRange().clone(); } return !tester || this.[[depthSearchAborted]]; }
[[[[Nl]]]]: if the bounds have changed the min and max height of relief has to be determined anew @ return

[[[[Adv]]]]: private boolean [[yousef]]() { boolean tester = "[["Truth" == "Truth"]]" == "[["Truth" == "Truth"]]"; tester &= plotSheet.getxRange()[0] == this.[[skated]][0]; tester &= plotSheet.getxRange()[1] == this.[[skated]][1]; tester &= plotSheet.getyRange()[0] == this.[[nickerson]][0]; tester &= plotSheet.getyRange()[1] == this.[[nickerson]][1]; if(!tester) { this.[[skated]] = plotSheet.getxRange().clone(); this.[[nickerson]] = plotSheet.getyRange().clone(); } return !tester || this.[[cern]]; }
[[[[Nl]]]]: if the bounds have changed the min and max height of relief has to be determined anew @ return


--------------------------------------------- Result 55 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 55 / 0 / 55:   7%|▋         | 55/785 [01:47<23:49,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 55 / 0 / 55:   7%|▋         | 56/785 [01:49<23:44,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 56 / 0 / 56:   7%|▋         | 56/785 [01:49<23:44,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 56 / 0 / 56:   7%|▋         | 57/785 [01:51<23:39,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 57 / 0 / 57:   7%|▋         | 57/785 [01:51<23:39,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 57 / 0 / 57:   7%|▋         | 58/785 [01:52<23:33,  1.94s/it][Succeeded / Failed / Skipped / Total] 0 / 58 / 0 / 58:   7%|▋         | 58/785 [01:52<23:33,  1.94s/it][Succeeded / Failed / Skipped / Total] 0 / 58 / 0 / 58:   8%|▊         | 59/785 [01:56<23:49,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 59 / 0 / 59:   8%|▊         | 59/785 [01:56<23:49,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 59 / 0 / 59:   8%|▊         | 60/785 [01:57<23:37,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 60 / 0 / 60:   8%|▊         | 60/785 [01:57<23:37,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 60 / 0 / 60:   8%|▊         | 61/785 [01:59<23:39,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 61 / 0 / 61:   8%|▊         | 61/785 [01:59<23:39,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 61 / 0 / 61:   8%|▊         | 62/785 [02:02<23:50,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 62 / 0 / 62:   8%|▊         | 62/785 [02:02<23:50,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 62 / 0 / 62:   8%|▊         | 63/785 [02:05<23:59,  1.99s/it][[0 (-6444%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[export]](String [[fileName]], int sampleRate, byte[] [[samples]]) throws IOException { nBytesPerSample = 2; buf = new byte[[[samples]].length]; System.arraycopy([[samples]], 0, buf, 0, [[samples]].length); byte [[b]] = 0; for (int [[j]] = 0; [[j]] < buf.length; [[j]] += 2) { [[b]] = buf[[[j]]]; buf[[[j]]] = buf[[[j]] + 1]; buf[[[j]] + 1] = [[b]]; } doWrite([[fileName]], sampleRate); }
[[[[Nl]]]]: Export an array of bytes to a wav file

[[[[Adv]]]]: public void [[exit]](String [[mysticism]], int sampleRate, byte[] [[showings]]) throws IOException { nBytesPerSample = 2; buf = new byte[[[showings]].length]; System.arraycopy([[showings]], 0, buf, 0, [[showings]].length); byte [[seconds]] = 0; for (int [[to]] = 0; [[to]] < buf.length; [[to]] += 2) { [[seconds]] = buf[[[to]]]; buf[[[to]]] = buf[[[to]] + 1]; buf[[[to]] + 1] = [[seconds]]; } doWrite([[mysticism]], sampleRate); }
[[[[Nl]]]]: Export an array of bytes to a wav file


--------------------------------------------- Result 56 ---------------------------------------------
[[0 (-8060%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[download]](String [[remoteFileName]], File [[localFile]]) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException { [[download]]([[remoteFileName]], [[localFile]], 0, null); }
[[[[Nl]]]]: This method downloads a remote file from the server to a local file

[[[[Adv]]]]: public void [[evacuations]](String [[indecency]], File [[kebab]]) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException { [[evacuations]]([[indecency]], [[kebab]], 0, null); }
[[[[Nl]]]]: This method downloads a remote file from the server to a local file


--------------------------------------------- Result 57 ---------------------------------------------
[[0 (-6472%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setOnItemSelectedListener]](@Nullable AdapterView.OnItemSelectedListener [[selectedListener]]) { mItemSelectedListener = [[selectedListener]]; final XpDropDownListView [[list]] = mDropDownList; if ([[list]] != null) { [[list]].setOnItemSelectedListener([[selectedListener]]); } }
[[[[Nl]]]]: Sets a listener to receive events when a list item is selected

[[[[Adv]]]]: public void [[unflinching]](@Nullable AdapterView.OnItemSelectedListener [[psychology]]) { mItemSelectedListener = [[psychology]]; final XpDropDownListView [[slate]] = mDropDownList; if ([[slate]] != null) { [[slate]].setOnItemSelectedListener([[psychology]]); } }
[[[[Nl]]]]: Sets a listener to receive events when a list item is selected


--------------------------------------------- Result 58 ---------------------------------------------
[[0 (-7762%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public TagDescription [[withValue]](String [[value]]) { this.[[value]] = [[value]]; return this; }
[[[[Nl]]]]: The tag value

[[[[Adv]]]]: public TagDescription [[disconcerted]](String [[extent]]) { this.[[importance]] = [[extent]]; return this; }
[[[[Nl]]]]: The tag value


--------------------------------------------- Result 59 ---------------------------------------------
[[0 (-6631%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[notifyIfError]](Response response, Callback [[callback]]) { if (response.getError() != null) { FacebookRequestError error = response.getError(); [[callback]].onError(new SocialError(error.getException())); return "[[True]]" == "[[True]]"; } return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: returns true if there was an error

[[[[Adv]]]]: private boolean [[friendless]](Response response, Callback [[phonecall]]) { if (response.getError() != null) { FacebookRequestError error = response.getError(); [[phonecall]].onError(new SocialError(error.getException())); return "[["Earnest" == "Earnest"]]" == "[["Earnest" == "Earnest"]]"; } return "[["Forges" != "Forges"]]" != "[["Forges" != "Forges"]]"; }
[[[[Nl]]]]: returns true if there was an error


--------------------------------------------- Result 60 ---------------------------------------------
[[0 (-6765%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private String [[checkForSlash]](String [[src]]) { if (scheme.equals(Scheme.ASSETS.toString())) { if ([[src]].startsWith(File.separator)) { if ([[src]].length() > 0) { return [[src]].substring(1); } else { return ""; } } else { return [[src]]; } } if ([[src]] != null && ![[src]].startsWith("/")) { return '/' + [[src]]; } else { return [[src]]; } }
[[[[Nl]]]]: Checks the string for slash at the beginning of the string

[[[[Adv]]]]: private String [[ono]](String [[relationships]]) { if (scheme.equals(Scheme.ASSETS.toString())) { if ([[relationships]].startsWith(File.separator)) { if ([[relationships]].length() > 0) { return [[relationships]].substring(1); } else { return ""; } } else { return [[relationships]]; } } if ([[relationships]] != null && ![[relationships]].startsWith("/")) { return '/' + [[relationships]]; } else { return [[relationships]]; } }
[[[[Nl]]]]: Checks the string for slash at the beginning of the string


--------------------------------------------- Result 61 ---------------------------------------------
[[0 (-8457%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public TimeCalculator [[timeCalculationMethod]](AngleCalculationType [[angle]]) { TimeAdjustment [[twoMinutesZuhrAdjustment]] = new TimeAdjustment(TWO_MINUTES_ZUHR); return [[timeCalculationMethod]]([[angle]], "[[False]]" != "[[False]]", [[twoMinutesZuhrAdjustment]]); }
[[[[Nl]]]]: Like calling { @ code timeCalculationMethod ( angle , false , TimeAdjustment

[[[[Adv]]]]: public TimeCalculator [[slng]](AngleCalculationType [[vision]]) { TimeAdjustment [[foothold]] = new TimeAdjustment(TWO_MINUTES_ZUHR); return [[slng]]([[vision]], "[["Deceiving" != "Deceiving"]]" != "[["Deceiving" != "Deceiving"]]", [[foothold]]); }
[[[[Nl]]]]: Like calling { @ code timeCalculationMethod ( angle , false , TimeAdjustment


--------------------------------------------- Result 62 ---------------------------------------------
[[0 (-6953%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[handleFling]](@NonNull final MotionEvent [[event]], @NonNull final DragState dragState) { int [[pointerId]] = [[event]].getPointerId(0); velocityTracker.computeCurrentVelocity(1000, maxFlingVelocity); float [[flingVelocity]] = Math.abs(velocityTracker.getYVelocity([[pointerId]])); if ([[flingVelocity]] > minFlingVelocity) { float flingDistance = 0.25f * [[flingVelocity]]; if (dragState == DragState.DRAG_TO_START) { flingDistance = -1 * flingDistance; } long [[duration]] = Math.round(Math.abs(flingDistance) / [[flingVelocity]] * 3000); notifyOnFling(flingDistance, [[duration]]); } }
[[[[Nl]]]]: Handles a fling gesture

[[[[Adv]]]]: private void [[turn]](@NonNull final MotionEvent [[instance]], @NonNull final DragState dragState) { int [[yarn]] = [[instance]].getPointerId(0); velocityTracker.computeCurrentVelocity(1000, maxFlingVelocity); float [[fixture]] = Math.abs(velocityTracker.getYVelocity([[yarn]])); if ([[fixture]] > minFlingVelocity) { float flingDistance = 0.25f * [[fixture]]; if (dragState == DragState.DRAG_TO_START) { flingDistance = -1 * flingDistance; } long [[seasons]] = Math.round(Math.abs(flingDistance) / [[fixture]] * 3000); notifyOnFling(flingDistance, [[seasons]]); } }
[[[[Nl]]]]: Handles a fling gesture


--------------------------------------------- Result 63 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 63 / 0 / 63:   8%|▊         | 63/785 [02:05<23:59,  1.99s/it][Succeeded / Failed / Skipped / Total] 0 / 63 / 0 / 63:   8%|▊         | 64/785 [02:08<24:08,  2.01s/it][Succeeded / Failed / Skipped / Total] 0 / 64 / 0 / 64:   8%|▊         | 64/785 [02:08<24:08,  2.01s/it][Succeeded / Failed / Skipped / Total] 0 / 64 / 0 / 64:   8%|▊         | 65/785 [02:09<23:57,  2.00s/it][Succeeded / Failed / Skipped / Total] 0 / 65 / 0 / 65:   8%|▊         | 65/785 [02:09<23:57,  2.00s/it][Succeeded / Failed / Skipped / Total] 0 / 65 / 0 / 65:   8%|▊         | 66/785 [02:11<23:57,  2.00s/it][Succeeded / Failed / Skipped / Total] 0 / 66 / 0 / 66:   8%|▊         | 66/785 [02:11<23:57,  2.00s/it][Succeeded / Failed / Skipped / Total] 0 / 66 / 0 / 66:   9%|▊         | 67/785 [02:13<23:46,  1.99s/it][Succeeded / Failed / Skipped / Total] 0 / 67 / 0 / 67:   9%|▊         | 67/785 [02:13<23:46,  1.99s/it][Succeeded / Failed / Skipped / Total] 0 / 67 / 0 / 67:   9%|▊         | 68/785 [02:14<23:41,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 68 / 0 / 68:   9%|▊         | 68/785 [02:14<23:41,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 68 / 0 / 68:   9%|▉         | 69/785 [02:16<23:35,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 69 / 0 / 69:   9%|▉         | 69/785 [02:16<23:35,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 69 / 0 / 69:   9%|▉         | 70/785 [02:18<23:36,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 70 / 0 / 70:   9%|▉         | 70/785 [02:18<23:36,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 70 / 0 / 70:   9%|▉         | 71/785 [02:19<23:26,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 71 / 0 / 71:   9%|▉         | 71/785 [02:19<23:26,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 71 / 0 / 71:   9%|▉         | 72/785 [02:22<23:33,  1.98s/it][[0 (-8308%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final User[] [[getUsers]](String [[channel]]) { [[channel]] = [[channel]].toLowerCase(); User[] userArray = new User[0]; synchronized (_channels) { Hashtable<User, User> [[users]] = _channels.get([[channel]]); if ([[users]] != null) { userArray = new User[[[users]].size()]; Enumeration<User> [[enumeration]] = [[users]].elements(); for (int [[i]] = 0; [[i]] < userArray.length; [[i]]++) { User user = [[enumeration]].nextElement(); userArray[[[i]]] = user; } } } return userArray; }
[[[[Nl]]]]: Returns an array of all users in the specified channel

[[[[Adv]]]]: public final User[] [[trilling]](String [[pipelines]]) { [[pipelines]] = [[pipelines]].toLowerCase(); User[] userArray = new User[0]; synchronized (_channels) { Hashtable<User, User> [[bystanders]] = _channels.get([[pipelines]]); if ([[bystanders]] != null) { userArray = new User[[[bystanders]].size()]; Enumeration<User> [[shinzo]] = [[bystanders]].elements(); for (int [[rhee]] = 0; [[rhee]] < userArray.length; [[rhee]]++) { User user = [[shinzo]].nextElement(); userArray[[[rhee]]] = user; } } } return userArray; }
[[[[Nl]]]]: Returns an array of all users in the specified channel


--------------------------------------------- Result 64 ---------------------------------------------
[[0 (-6914%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Plot [[setPriceIndicator]](Number [[index]], Boolean priceIndicator3) { if (jsBase == null) { this.index = [[index]]; this.[[priceIndicator]] = null; this.priceIndicator1 = null; this.[[priceIndicator2]] = null; this.priceIndicator3 = null; this.priceIndicator3 = priceIndicator3; } else { this.index = [[index]]; this.priceIndicator3 = priceIndicator3; if (!isChain) { js.append(jsBase); isChain = "[[True]]" == "[[True]]"; } js.append(String.format(Locale.US, ".priceIndicator(%s, %b)", [[index]], priceIndicator3)); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, jsBase + ".priceIndicator(%s, %b);", [[index]], priceIndicator3)); js.setLength(0); } } return this; }
[[[[Nl]]]]: Setter for the stock price indicator settings by index

[[[[Adv]]]]: public Plot [[popolo]](Number [[contents]], Boolean priceIndicator3) { if (jsBase == null) { this.index = [[contents]]; this.[[remembrance]] = null; this.priceIndicator1 = null; this.[[prostitute]] = null; this.priceIndicator3 = null; this.priceIndicator3 = priceIndicator3; } else { this.index = [[contents]]; this.priceIndicator3 = priceIndicator3; if (!isChain) { js.append(jsBase); isChain = "[["Meaningful" == "Meaningful"]]" == "[["Meaningful" == "Meaningful"]]"; } js.append(String.format(Locale.US, ".priceIndicator(%s, %b)", [[contents]], priceIndicator3)); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, jsBase + ".priceIndicator(%s, %b);", [[contents]], priceIndicator3)); js.setLength(0); } } return this; }
[[[[Nl]]]]: Setter for the stock price indicator settings by index


--------------------------------------------- Result 65 ---------------------------------------------
[[0 (-7799%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private String [[getNorthSouth]]() { if (this.[[latitude]] < 0) { return "S"; } return "N"; }
[[[[Nl]]]]: Returns `` N '' or `` S '' depending on the latitude

[[[[Adv]]]]: private String [[timeframe]]() { if (this.[[margin]] < 0) { return "S"; } return "N"; }
[[[[Nl]]]]: Returns `` N '' or `` S '' depending on the latitude


--------------------------------------------- Result 66 ---------------------------------------------
[[0 (-8021%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getAppTitle]](String [[title]], Context [[ctx]]) { StringBuilder [[builder]] = new StringBuilder(); if (!TextUtils.isEmpty([[title]])) { [[builder]].append([[title]]); [[builder]].append(" - "); } [[builder]].append(PasswdSafeUtil.getAppTitle([[ctx]])); return [[builder]].toString(); }
[[[[Nl]]]]: Get a title for the application

[[[[Adv]]]]: public static String [[afflictions]](String [[denote]], Context [[callback]]) { StringBuilder [[promoter]] = new StringBuilder(); if (!TextUtils.isEmpty([[denote]])) { [[promoter]].append([[denote]]); [[promoter]].append(" - "); } [[promoter]].append(PasswdSafeUtil.getAppTitle([[callback]])); return [[promoter]].toString(); }
[[[[Nl]]]]: Get a title for the application


--------------------------------------------- Result 67 ---------------------------------------------
[[0 (-5756%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[clear]](FragmentManager [[fragmentManager]]) { [[fragmentManager]].popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE); }
[[[[Nl]]]]: Return to original state

[[[[Adv]]]]: public static void [[categorical]](FragmentManager [[provider]]) { [[provider]].popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE); }
[[[[Nl]]]]: Return to original state


--------------------------------------------- Result 68 ---------------------------------------------
[[0 (-6611%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Cursor [[queryTransfersWithTypeAndState]](TransferType [[type]], TransferState [[state]]) { if ([[type]] == TransferType.ANY) { return transferDBBase.query(getStateUri([[state]]), null, null, null, null); } else { return transferDBBase.query(getStateUri([[state]]), null, TransferTable.COLUMN_TYPE + "=?", new String[] { [[type]].toString() }, null); } }
[[[[Nl]]]]: Queries all the records which have the given type and state

[[[[Adv]]]]: public Cursor [[keypad]](TransferType [[handwriting]], TransferState [[united]]) { if ([[handwriting]] == TransferType.ANY) { return transferDBBase.query(getStateUri([[united]]), null, null, null, null); } else { return transferDBBase.query(getStateUri([[united]]), null, TransferTable.COLUMN_TYPE + "=?", new String[] { [[handwriting]].toString() }, null); } }
[[[[Nl]]]]: Queries all the records which have the given type and state


--------------------------------------------- Result 69 ---------------------------------------------
[[0 (-7932%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setText]](final CharSequence [[text]]) { this.[[text]] = [[text]]; reflectParametersInView(); }
[[[[Nl]]]]: Sets the text of this ParallaxPage

[[[[Adv]]]]: public void [[ambience]](final CharSequence [[terminology]]) { this.[[deed]] = [[terminology]]; reflectParametersInView(); }
[[[[Nl]]]]: Sets the text of this ParallaxPage


--------------------------------------------- Result 70 ---------------------------------------------
[[0 (-6160%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[considerNullResultsInReport]](Context [[context]]) { SharedPreferences [[sharedPreferences]] = PreferenceManager.getDefaultSharedPreferences([[context]]); return [[sharedPreferences]].getBoolean("report_consider_null_results", "[[True]]" == "[[True]]"); }
[[[[Nl]]]]: Gets the flag that indicates if the statistics calculation will consider null values or not

[[[[Adv]]]]: public static boolean [[meadowlark]](Context [[history]]) { SharedPreferences [[activism]] = PreferenceManager.getDefaultSharedPreferences([[history]]); return [[activism]].getBoolean("report_consider_null_results", "[["Staunch" == "Staunch"]]" == "[["Staunch" == "Staunch"]]"); }
[[[[Nl]]]]: Gets the flag that indicates if the statistics calculation will consider null values or not


--------------------------------------------- Result 71 ---------------------------------------------
[[0 (-7828%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static int [[getVerticalPad]](int [[appearance]]) { switch ([[appearance]]) { case Item.PLAIN: return 0; case Item.HYPERLINK: return ImageItemSkin.PAD_LINK_V; default: return ImageItemSkin.PAD_BUTTON_V; } }
[[[[Nl]]]]: Returns vertical padding per ImageItem 's appearance mode

[[[[Adv]]]]: static int [[congratulates]](int [[incarnation]]) { switch ([[incarnation]]) { case Item.PLAIN: return 0; case Item.HYPERLINK: return ImageItemSkin.PAD_LINK_V; default: return ImageItemSkin.PAD_BUTTON_V; } }
[[[[Nl]]]]: Returns vertical padding per ImageItem 's appearance mode


--------------------------------------------- Result 72 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 72 / 0 / 72:   9%|▉         | 72/785 [02:22<23:33,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 72 / 0 / 72:   9%|▉         | 73/785 [02:23<23:23,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 73 / 0 / 73:   9%|▉         | 73/785 [02:23<23:23,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 73 / 0 / 73:   9%|▉         | 74/785 [02:24<23:13,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 74 / 0 / 74:   9%|▉         | 74/785 [02:24<23:13,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 74 / 0 / 74:  10%|▉         | 75/785 [02:26<23:02,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 75 / 0 / 75:  10%|▉         | 75/785 [02:26<23:02,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 75 / 0 / 75:  10%|▉         | 76/785 [02:28<23:03,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 76 / 0 / 76:  10%|▉         | 76/785 [02:28<23:03,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 76 / 0 / 76:  10%|▉         | 77/785 [02:28<22:48,  1.93s/it][Succeeded / Failed / Skipped / Total] 0 / 77 / 0 / 77:  10%|▉         | 77/785 [02:28<22:48,  1.93s/it][Succeeded / Failed / Skipped / Total] 0 / 77 / 0 / 77:  10%|▉         | 78/785 [02:30<22:39,  1.92s/it][Succeeded / Failed / Skipped / Total] 0 / 78 / 0 / 78:  10%|▉         | 78/785 [02:30<22:39,  1.92s/it][Succeeded / Failed / Skipped / Total] 0 / 78 / 0 / 78:  10%|█         | 79/785 [02:32<22:40,  1.93s/it][Succeeded / Failed / Skipped / Total] 0 / 79 / 0 / 79:  10%|█         | 79/785 [02:32<22:40,  1.93s/it][Succeeded / Failed / Skipped / Total] 0 / 79 / 0 / 79:  10%|█         | 80/785 [02:35<22:47,  1.94s/it][Succeeded / Failed / Skipped / Total] 0 / 80 / 0 / 80:  10%|█         | 80/785 [02:35<22:47,  1.94s/it][Succeeded / Failed / Skipped / Total] 0 / 80 / 0 / 80:  10%|█         | 81/785 [02:38<22:54,  1.95s/it][[0 (-7888%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[reset]]() { this.[[featureCountPerCategory]] = new Hashtable<K, Dictionary<T, Integer>>( Classifier.INITIAL_CATEGORY_DICTIONARY_CAPACITY); this.[[totalFeatureCount]] = new Hashtable<T, Integer>( Classifier.INITIAL_FEATURE_DICTIONARY_CAPACITY); this.[[totalCategoryCount]] = new Hashtable<K, Integer>( Classifier.INITIAL_CATEGORY_DICTIONARY_CAPACITY); this.[[memoryQueue]] = new LinkedList<Classification<T, K>>(); }
[[[[Nl]]]]: Resets the < i > learned < i > feature and category counts

[[[[Adv]]]]: public void [[rehabilitation]]() { this.[[agreement]] = new Hashtable<K, Dictionary<T, Integer>>( Classifier.INITIAL_CATEGORY_DICTIONARY_CAPACITY); this.[[aho]] = new Hashtable<T, Integer>( Classifier.INITIAL_FEATURE_DICTIONARY_CAPACITY); this.[[hills]] = new Hashtable<K, Integer>( Classifier.INITIAL_CATEGORY_DICTIONARY_CAPACITY); this.[[holidays]] = new LinkedList<Classification<T, K>>(); }
[[[[Nl]]]]: Resets the < i > learned < i > feature and category counts


--------------------------------------------- Result 73 ---------------------------------------------
[[0 (-8157%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public double [[theta]]() { double [[r]], [[theta]] = 0; if (!isZero()) { [[r]] = v.rho(); if ([[r]] != 0) { [[theta]] = atan2([[r]], getZ()); } else { if (getZ() > 0) [[theta]] = 0; else [[theta]] = PI; } } return [[theta]]; }
[[[[Nl]]]]: Calculate the angle theta = atan ( rz )

[[[[Adv]]]]: public double [[housemother]]() { double [[rupees]], [[housemother]] = 0; if (!isZero()) { [[rupees]] = v.rho(); if ([[rupees]] != 0) { [[housemother]] = atan2([[rupees]], getZ()); } else { if (getZ() > 0) [[housemother]] = 0; else [[housemother]] = PI; } } return [[housemother]]; }
[[[[Nl]]]]: Calculate the angle theta = atan ( rz )


--------------------------------------------- Result 74 ---------------------------------------------
[[0 (-8100%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected Map<UUID, ILifecycleComponent> [[buildComponentMap]]() { Map<UUID, ILifecycleComponent> [[map]] = new HashMap<>(); [[buildComponentMap]](this, [[map]]); return [[map]]; }
[[[[Nl]]]]: Build a component map by recursively navigating the component tree

[[[[Adv]]]]: protected Map<UUID, ILifecycleComponent> [[stefan]]() { Map<UUID, ILifecycleComponent> [[assignment]] = new HashMap<>(); [[stefan]](this, [[assignment]]); return [[assignment]]; }
[[[[Nl]]]]: Build a component map by recursively navigating the component tree


--------------------------------------------- Result 75 ---------------------------------------------
[[0 (-7773%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static SharedPreferences [[getSharedPrefs]](Context [[ctx]]) { return PreferenceManager.getDefaultSharedPreferences([[ctx]]); }
[[[[Nl]]]]: Get the default shared preferences

[[[[Adv]]]]: public static SharedPreferences [[dimming]](Context [[atan]]) { return PreferenceManager.getDefaultSharedPreferences([[atan]]); }
[[[[Nl]]]]: Get the default shared preferences


--------------------------------------------- Result 76 ---------------------------------------------
[[0 (-7210%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Fingerprint [[fingerprintErrorColor]](int [[fingerprintError]]) { this.[[fingerprintError]] = [[fingerprintError]]; this.[[fingerprintImageView]].setBackgroundTintList(ColorStateList.valueOf(getContext().getColor([[fingerprintError]]))); return this; }
[[[[Nl]]]]: Set the fingerprint icon color in error state

[[[[Adv]]]]: public Fingerprint [[guesser]](int [[bedspreads]]) { this.[[unproven]] = [[bedspreads]]; this.[[sasquatch]].setBackgroundTintList(ColorStateList.valueOf(getContext().getColor([[bedspreads]]))); return this; }
[[[[Nl]]]]: Set the fingerprint icon color in error state


--------------------------------------------- Result 77 ---------------------------------------------
[[0 (-7093%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[setAudioManager]]() { mAudioManager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE); mAudioManager.requestAudioFocus( this, AudioManager.STREAM_VOICE_CALL, AudioManager.AUDIOFOCUS_GAIN ); mAudioManager.setMode(Constants.DEFAULT_AUDIO_MODE); }
[[[[Nl]]]]: Initialize the Android AudioManager

[[[[Adv]]]]: private void [[domineering]]() { mAudioManager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE); mAudioManager.requestAudioFocus( this, AudioManager.STREAM_VOICE_CALL, AudioManager.AUDIOFOCUS_GAIN ); mAudioManager.setMode(Constants.DEFAULT_AUDIO_MODE); }
[[[[Nl]]]]: Initialize the Android AudioManager


--------------------------------------------- Result 78 ---------------------------------------------
[[0 (-7699%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[dropLastNumber]]() { checkDigit = Integer.parseInt(cardNumber.substring(cardNumber.length() - 1)); this.[[cardNumber]] = cardNumber.substring(0, cardNumber.length() - 1); }
[[[[Nl]]]]: the last number is used as a check digit

[[[[Adv]]]]: private void [[frontage]]() { checkDigit = Integer.parseInt(cardNumber.substring(cardNumber.length() - 1)); this.[[equilibrium]] = cardNumber.substring(0, cardNumber.length() - 1); }
[[[[Nl]]]]: the last number is used as a check digit


--------------------------------------------- Result 79 ---------------------------------------------
[[0 (-6481%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isRegistered]](Context [[context]]) { SharedPreferences [[prefs]] = PreferenceManager.getDefaultSharedPreferences([[context]]); int [[currentRegistration]] = [[prefs]].getInt( REGISTRATION_STATUS, STATUS_UNREGISTERED ); return [[currentRegistration]] == STATUS_REGISTERED; }
[[[[Nl]]]]: Function to check if the app is currently registered at the middleware

[[[[Adv]]]]: public static boolean [[letterbox]](Context [[landscapes]]) { SharedPreferences [[befell]] = PreferenceManager.getDefaultSharedPreferences([[landscapes]]); int [[wadding]] = [[befell]].getInt( REGISTRATION_STATUS, STATUS_UNREGISTERED ); return [[wadding]] == STATUS_REGISTERED; }
[[[[Nl]]]]: Function to check if the app is currently registered at the middleware


--------------------------------------------- Result 80 ---------------------------------------------
[[0 (-8008%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[notifyAlreadyHasPermissions]](@NonNull Object object, int [[requestCode]], @NonNull String[] [[perms]]) { int[] [[grantResults]] = new int[[[perms]].length]; for (int [[i]] = 0; [[i]] < [[perms]].length; [[i]]++) { [[grantResults]][[[i]]] = PackageManager.PERMISSION_GRANTED; } onRequestPermissionsResult([[requestCode]], [[perms]], [[grantResults]], object); }
[[[[Nl]]]]: Run permission callbacks on an object that requested permissions but already has them by simulating { @ link PackageManager # PERMISSION_GRANTED }

[[[[Adv]]]]: private static void [[hatchets]](@NonNull Object object, int [[animation]], @NonNull String[] [[stylists]]) { int[] [[construct]] = new int[[[stylists]].length]; for (int [[jag]] = 0; [[jag]] < [[stylists]].length; [[jag]]++) { [[construct]][[[jag]]] = PackageManager.PERMISSION_GRANTED; } onRequestPermissionsResult([[animation]], [[stylists]], [[construct]], object); }
[[[[Nl]]]]: Run permission callbacks on an object that requested permissions but already has them by simulating { @ link PackageManager # PERMISSION_GRANTED }


--------------------------------------------- Result 81 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 81 / 0 / 81:  10%|█         | 81/785 [02:38<22:54,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 81 / 0 / 81:  10%|█         | 82/785 [02:40<22:59,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 82 / 0 / 82:  10%|█         | 82/785 [02:40<22:59,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 82 / 0 / 82:  11%|█         | 83/785 [02:42<22:50,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 83 / 0 / 83:  11%|█         | 83/785 [02:42<22:50,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 83 / 0 / 83:  11%|█         | 84/785 [02:43<22:46,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 84 / 0 / 84:  11%|█         | 84/785 [02:43<22:46,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 84 / 0 / 84:  11%|█         | 85/785 [02:45<22:42,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 85 / 0 / 85:  11%|█         | 85/785 [02:45<22:42,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 85 / 0 / 85:  11%|█         | 86/785 [02:46<22:34,  1.94s/it][Succeeded / Failed / Skipped / Total] 0 / 86 / 0 / 86:  11%|█         | 86/785 [02:46<22:34,  1.94s/it][Succeeded / Failed / Skipped / Total] 0 / 86 / 0 / 86:  11%|█         | 87/785 [02:49<22:39,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 87 / 0 / 87:  11%|█         | 87/785 [02:49<22:39,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 87 / 0 / 87:  11%|█         | 88/785 [02:50<22:31,  1.94s/it][Succeeded / Failed / Skipped / Total] 0 / 88 / 0 / 88:  11%|█         | 88/785 [02:50<22:31,  1.94s/it][Succeeded / Failed / Skipped / Total] 0 / 88 / 0 / 88:  11%|█▏        | 89/785 [02:52<22:32,  1.94s/it][[0 (-6848%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean verifyVorbisHeaderCapturePattern(int [[headerType]], ParsableByteArray [[header]], boolean [[quite]]) throws ParserException { if ([[header]].readUnsignedByte() != [[headerType]]) { if ([[quite]]) { return "[[False]]" != "[[False]]"; } else { throw new ParserException("expected header type " + Integer.toHexString([[headerType]])); } } if (!([[header]].readUnsignedByte() == 'v' && [[header]].readUnsignedByte() == 'o' && [[header]].readUnsignedByte() == 'r' && [[header]].readUnsignedByte() == 'b' && [[header]].readUnsignedByte() == 'i' && [[header]].readUnsignedByte() == 's')) { if ([[quite]]) { return "[[False]]" != "[[False]]"; } else { throw new ParserException("expected characters 'vorbis'"); } } return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Verifies whether the next bytes in { @ code header } are a vorbis header of the given { @ code headerType }

[[[[Adv]]]]: public static boolean verifyVorbisHeaderCapturePattern(int [[assets]], ParsableByteArray [[subtitle]], boolean [[acutely]]) throws ParserException { if ([[subtitle]].readUnsignedByte() != [[assets]]) { if ([[acutely]]) { return "[["Forges" != "Forges"]]" != "[["Forges" != "Forges"]]"; } else { throw new ParserException("expected header type " + Integer.toHexString([[assets]])); } } if (!([[subtitle]].readUnsignedByte() == 'v' && [[subtitle]].readUnsignedByte() == 'o' && [[subtitle]].readUnsignedByte() == 'r' && [[subtitle]].readUnsignedByte() == 'b' && [[subtitle]].readUnsignedByte() == 'i' && [[subtitle]].readUnsignedByte() == 's')) { if ([[acutely]]) { return "[["Forges" != "Forges"]]" != "[["Forges" != "Forges"]]"; } else { throw new ParserException("expected characters 'vorbis'"); } } return "[["Staunch" == "Staunch"]]" == "[["Staunch" == "Staunch"]]"; }
[[[[Nl]]]]: Verifies whether the next bytes in { @ code header } are a vorbis header of the given { @ code headerType }


--------------------------------------------- Result 82 ---------------------------------------------
[[0 (-6632%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public synchronized Vector [[findKeys]](String [[owner]]) { PublicKeyInfo [[keyInfo]]; Vector [[keys]] = null; for (int [[i]] = 0; [[i]] < keyList.size(); [[i]]++) { [[keyInfo]] = (PublicKeyInfo)keyList.elementAt([[i]]); if ([[keyInfo]].getOwner().compareTo([[owner]]) == 0) { if ([[keys]] == null) { [[keys]] = new Vector(); } [[keys]].addElement([[keyInfo]]); } } return [[keys]]; }
[[[[Nl]]]]: Finds a CAs Public keys based on the distinguished name

[[[[Adv]]]]: public synchronized Vector [[bulging]](String [[landlady]]) { PublicKeyInfo [[accelerant]]; Vector [[buttons]] = null; for (int [[yo]] = 0; [[yo]] < keyList.size(); [[yo]]++) { [[accelerant]] = (PublicKeyInfo)keyList.elementAt([[yo]]); if ([[accelerant]].getOwner().compareTo([[landlady]]) == 0) { if ([[buttons]] == null) { [[buttons]] = new Vector(); } [[buttons]].addElement([[accelerant]]); } } return [[buttons]]; }
[[[[Nl]]]]: Finds a CAs Public keys based on the distinguished name


--------------------------------------------- Result 83 ---------------------------------------------
[[0 (-7150%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initialize]](int [[userId]]) { this.hideViewRetry(); this.showViewLoading(); this.getUserDetails([[userId]]); }
[[[[Nl]]]]: Initializes the presenter by showinghiding proper views and retrieving user details

[[[[Adv]]]]: public void [[moneymaking]](int [[chaudhry]]) { this.hideViewRetry(); this.showViewLoading(); this.getUserDetails([[chaudhry]]); }
[[[[Nl]]]]: Initializes the presenter by showinghiding proper views and retrieving user details


--------------------------------------------- Result 84 ---------------------------------------------
[[0 (-5959%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public SpotFleetLaunchSpecification [[withWeightedCapacity]](Double [[weightedCapacity]]) { this.[[weightedCapacity]] = [[weightedCapacity]]; return this; }
[[[[Nl]]]]: The number of units provided by the specified instance type

[[[[Adv]]]]: public SpotFleetLaunchSpecification [[starlight]](Double [[whammy]]) { this.[[reappear]] = [[whammy]]; return this; }
[[[[Nl]]]]: The number of units provided by the specified instance type


--------------------------------------------- Result 85 ---------------------------------------------
[[0 (-8035%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public VerifySoftwareTokenResult [[withStatus]](VerifySoftwareTokenResponseType [[status]]) { this.[[status]] = [[status]].toString(); return this; }
[[[[Nl]]]]: < p > The status of the verify software token

[[[[Adv]]]]: public VerifySoftwareTokenResult [[gameboy]](VerifySoftwareTokenResponseType [[statehood]]) { this.[[legislation]] = [[statehood]].toString(); return this; }
[[[[Nl]]]]: < p > The status of the verify software token


--------------------------------------------- Result 86 ---------------------------------------------
[[0 (-8140%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[reset]]() { running = "[[True]]" == "[[True]]"; prefs.saveStartTime(System.currentTimeMillis()); prefs.saveEndTime(System.currentTimeMillis()); prefs.saveWinningTime(DEFAULT_WINNING_TIME); winningTime = 0; startTime = System.currentTimeMillis(); handlerTimer.sendEmptyMessage(0); }
[[[[Nl]]]]: Reset all the data , so it will be shown as 0 seconds again

[[[[Adv]]]]: public void [[booted]]() { running = "[["Presentable" == "Presentable"]]" == "[["Presentable" == "Presentable"]]"; prefs.saveStartTime(System.currentTimeMillis()); prefs.saveEndTime(System.currentTimeMillis()); prefs.saveWinningTime(DEFAULT_WINNING_TIME); winningTime = 0; startTime = System.currentTimeMillis(); handlerTimer.sendEmptyMessage(0); }
[[[[Nl]]]]: Reset all the data , so it will be shown as 0 seconds again


--------------------------------------------- Result 87 ---------------------------------------------
[[0 (-7996%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static double [[dbinomial]](final int [[n]], final int k) { int j, [[kk]] = k; if ([[n]] < 0 || [[n]] < k || k < 0) { return 0; } if (k == 0 || [[n]] == k) { return 1; } if (k > [[n]] / 2) { [[kk]] = [[n]] - k; } double [[nk]], [[binomi]] = 1; for (j = 1, [[nk]] = [[n]] - [[kk]]; j <= [[kk]]; j++) { [[binomi]] *= ([[nk]] + j) / j; } return [[binomi]]; }
[[[[Nl]]]]: Calculate the binomial coefficient n over k for positive n , k using double precision , thus enlarging the available range

[[[[Adv]]]]: public static double [[male]](final int [[latitude]], final int k) { int j, [[ys]] = k; if ([[latitude]] < 0 || [[latitude]] < k || k < 0) { return 0; } if (k == 0 || [[latitude]] == k) { return 1; } if (k > [[latitude]] / 2) { [[ys]] = [[latitude]] - k; } double [[myanmar]], [[benefited]] = 1; for (j = 1, [[myanmar]] = [[latitude]] - [[ys]]; j <= [[ys]]; j++) { [[benefited]] *= ([[myanmar]] + j) / j; } return [[benefited]]; }
[[[[Nl]]]]: Calculate the binomial coefficient n over k for positive n , k using double precision , thus enlarging the available range


--------------------------------------------- Result 88 ---------------------------------------------
[[0 (-7711%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getMinDisparity]]() { int [[retVal]] = getMinDisparity_0(nativeObj); return [[retVal]]; }
[[[[Nl]]]]: javadoc : StereoMatcher : :getMinDisparity ( )

[[[[Adv]]]]: public int [[shoreline]]() { int [[banners]] = getMinDisparity_0(nativeObj); return [[banners]]; }
[[[[Nl]]]]: javadoc : StereoMatcher : :getMinDisparity ( )


--------------------------------------------- Result 89 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 89 / 0 / 89:  11%|█▏        | 89/785 [02:52<22:32,  1.94s/it][Succeeded / Failed / Skipped / Total] 0 / 89 / 0 / 89:  11%|█▏        | 90/785 [02:54<22:24,  1.93s/it][Succeeded / Failed / Skipped / Total] 0 / 90 / 0 / 90:  11%|█▏        | 90/785 [02:54<22:24,  1.93s/it][Succeeded / Failed / Skipped / Total] 0 / 90 / 0 / 90:  12%|█▏        | 91/785 [02:56<22:28,  1.94s/it][Succeeded / Failed / Skipped / Total] 0 / 91 / 0 / 91:  12%|█▏        | 91/785 [02:56<22:28,  1.94s/it][Succeeded / Failed / Skipped / Total] 0 / 91 / 0 / 91:  12%|█▏        | 92/785 [02:59<22:29,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 92 / 0 / 92:  12%|█▏        | 92/785 [02:59<22:29,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 92 / 0 / 92:  12%|█▏        | 93/785 [03:01<22:29,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 93 / 0 / 93:  12%|█▏        | 93/785 [03:01<22:29,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 93 / 0 / 93:  12%|█▏        | 94/785 [03:03<22:29,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 94 / 0 / 94:  12%|█▏        | 94/785 [03:03<22:29,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 94 / 0 / 94:  12%|█▏        | 95/785 [03:05<22:25,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 95 / 0 / 95:  12%|█▏        | 95/785 [03:05<22:25,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 95 / 0 / 95:  12%|█▏        | 96/785 [03:07<22:26,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 96 / 0 / 96:  12%|█▏        | 96/785 [03:07<22:26,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 96 / 0 / 96:  12%|█▏        | 97/785 [03:10<22:30,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 97 / 0 / 97:  12%|█▏        | 97/785 [03:10<22:30,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 97 / 0 / 97:  12%|█▏        | 98/785 [03:11<22:22,  1.95s/it][[0 (-6248%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[retryAllMessages]](Context [[context]]) { boolean [[encrypted]] = Preferences.getEncryptionEnabled([[context]]); ContentValues [[values]] = new ContentValues(2); [[values]].put(Messages.STATUS, Messages.STATUS_SENDING); [[values]].put(Messages.SECURITY_FLAGS, [[encrypted]] ? Coder.SECURITY_BASIC : Coder.SECURITY_CLEARTEXT); return [[context]].getContentResolver().update(Messages.CONTENT_URI, [[values]], Messages.STATUS + "=" + Messages.STATUS_PENDING, null); }
[[[[Nl]]]]: Marks all pending messages as SENDING

[[[[Adv]]]]: public static int [[thumbtacks]](Context [[landscapes]]) { boolean [[barcode]] = Preferences.getEncryptionEnabled([[landscapes]]); ContentValues [[prominence]] = new ContentValues(2); [[prominence]].put(Messages.STATUS, Messages.STATUS_SENDING); [[prominence]].put(Messages.SECURITY_FLAGS, [[barcode]] ? Coder.SECURITY_BASIC : Coder.SECURITY_CLEARTEXT); return [[landscapes]].getContentResolver().update(Messages.CONTENT_URI, [[prominence]], Messages.STATUS + "=" + Messages.STATUS_PENDING, null); }
[[[[Nl]]]]: Marks all pending messages as SENDING


--------------------------------------------- Result 90 ---------------------------------------------
[[0 (-7482%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[updateResumptionAttemptLeft]]() { SharedPreferences.Editor [[editor]] = mSharedPrefs.edit(); [[editor]].putInt(AUTO_RESUMPTION_ATTEMPT_LEFT, mNumAutoResumptionAttemptLeft); [[editor]].apply(); }
[[[[Nl]]]]: Helper method to update the remaining number of background resumption attempts left

[[[[Adv]]]]: private void [[pawnshop]]() { SharedPreferences.Editor [[drafting]] = mSharedPrefs.edit(); [[drafting]].putInt(AUTO_RESUMPTION_ATTEMPT_LEFT, mNumAutoResumptionAttemptLeft); [[drafting]].apply(); }
[[[[Nl]]]]: Helper method to update the remaining number of background resumption attempts left


--------------------------------------------- Result 91 ---------------------------------------------
[[0 (-6964%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[cancelRunningChildren]](int [[startIndex]]) { for (int [[i]] = [[startIndex]], [[n]] = getChildCount(); [[i]] < [[n]]; [[i]]++) { Task<E> [[child]] = getChild([[i]]); if ([[child]].status == Status.RUNNING) [[child]].cancel(); } }
[[[[Nl]]]]: Terminates the running children of this task starting from the specified index up to the end

[[[[Adv]]]]: protected void [[sharpshooters]](int [[bretagne]]) { for (int [[huh]] = [[bretagne]], [[latitude]] = getChildCount(); [[huh]] < [[latitude]]; [[huh]]++) { Task<E> [[younger]] = getChild([[huh]]); if ([[younger]].status == Status.RUNNING) [[younger]].cancel(); } }
[[[[Nl]]]]: Terminates the running children of this task starting from the specified index up to the end


--------------------------------------------- Result 92 ---------------------------------------------
[[0 (-7180%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setPWM]](int [[channel]], int [[on]], int [[off]]) { writeRegByteWrapped(__LED0_ON_L + 4 * [[channel]], (byte) ([[on]] & 0xFF)); writeRegByteWrapped(__LED0_ON_H + 4 * [[channel]], (byte) ([[on]] >> 8)); writeRegByteWrapped(__LED0_OFF_L + 4 * [[channel]], (byte) ([[off]] & 0xFF)); writeRegByteWrapped(__LED0_OFF_H + 4 * [[channel]], (byte) ([[off]] >> 8)); }
[[[[Nl]]]]: Sets a single PWM channel

[[[[Adv]]]]: public void [[foothills]](int [[rivers]], int [[across]], int [[inert]]) { writeRegByteWrapped(__LED0_ON_L + 4 * [[rivers]], (byte) ([[across]] & 0xFF)); writeRegByteWrapped(__LED0_ON_H + 4 * [[rivers]], (byte) ([[across]] >> 8)); writeRegByteWrapped(__LED0_OFF_L + 4 * [[rivers]], (byte) ([[inert]] & 0xFF)); writeRegByteWrapped(__LED0_OFF_H + 4 * [[rivers]], (byte) ([[inert]] >> 8)); }
[[[[Nl]]]]: Sets a single PWM channel


--------------------------------------------- Result 93 ---------------------------------------------
[[0 (-6315%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[beep]](Context [[context]]) { try { Uri [[notification]] = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION); Ringtone [[r]] = RingtoneManager.getRingtone([[context]], [[notification]]); [[r]].play(); } catch (Exception e) { MyLog.e("beep", e); } }
[[[[Nl]]]]: See http : stackoverflow

[[[[Adv]]]]: private static void [[deafening]](Context [[connection]]) { try { Uri [[notifying]] = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION); Ringtone [[to]] = RingtoneManager.getRingtone([[connection]], [[notifying]]); [[to]].play(); } catch (Exception e) { MyLog.e("beep", e); } }
[[[[Nl]]]]: See http : stackoverflow


--------------------------------------------- Result 94 ---------------------------------------------
[[0 (-7706%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static int [[grayVal]](int [[red]], int [[green]], int [[blue]]) { return ([[red]]*76 + [[green]]*150 + [[blue]]*29) >> 8; }
[[[[Nl]]]]: Get a gray value given the RGB values @ param red The Red pixel value @ param green The Green pixel value @ param blue The Blue pixel value @ return int The grayscale value corresponding to the RGB color

[[[[Adv]]]]: private static int [[nae]](int [[crossing]], int [[verte]], int [[lacerations]]) { return ([[crossing]]*76 + [[verte]]*150 + [[lacerations]]*29) >> 8; }
[[[[Nl]]]]: Get a gray value given the RGB values @ param red The Red pixel value @ param green The Green pixel value @ param blue The Blue pixel value @ return int The grayscale value corresponding to the RGB color


--------------------------------------------- Result 95 ---------------------------------------------
[[0 (-7671%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public TagDescription [[withKey]](String [[key]]) { this.[[key]] = [[key]]; return this; }
[[[[Nl]]]]: < p > The tag key

[[[[Adv]]]]: public TagDescription [[burnside]](String [[wrenches]]) { this.[[needed]] = [[wrenches]]; return this; }
[[[[Nl]]]]: < p > The tag key


--------------------------------------------- Result 96 ---------------------------------------------
[[0 (-6849%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setNodeExecutor]](NodeMainExecutor [[nodeExecutor]]) { this.[[masterURI]] = mainActivity.getMasterUri(); this.[[nodeMainExecutor]] = [[nodeExecutor]]; }
[[[[Nl]]]]: Sets our node executor This is called when the activity has been loaded

[[[[Adv]]]]: public void [[shoppin]](NodeMainExecutor [[scribbled]]) { this.[[spells]] = mainActivity.getMasterUri(); this.[[strike]] = [[scribbled]]; }
[[[[Nl]]]]: Sets our node executor This is called when the activity has been loaded


--------------------------------------------- Result 97 ---------------------------------------------
[[0 (-7021%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[checkPlayServices]]() { int [[resultCode]] = mGoogleApiAvailability.isGooglePlayServicesAvailable(mContext); if ([[resultCode]] != ConnectionResult.SUCCESS) { String [[errorString]] = mGoogleApiAvailability.getErrorString([[resultCode]]); if (mGoogleApiAvailability.isUserResolvableError([[resultCode]])) { Log.w(TAG, [[errorString]]); } else { Log.e(TAG, "This device is not supported. " + [[errorString]]); } return "[[False]]" != "[[False]]"; } return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Verify Google Play Services availability

[[[[Adv]]]]: public boolean [[buttercups]]() { int [[cubes]] = mGoogleApiAvailability.isGooglePlayServicesAvailable(mContext); if ([[cubes]] != ConnectionResult.SUCCESS) { String [[shuffle]] = mGoogleApiAvailability.getErrorString([[cubes]]); if (mGoogleApiAvailability.isUserResolvableError([[cubes]])) { Log.w(TAG, [[shuffle]]); } else { Log.e(TAG, "This device is not supported. " + [[shuffle]]); } return "[["Counterfeits" != "Counterfeits"]]" != "[["Counterfeits" != "Counterfeits"]]"; } return "[["Realistic" == "Realistic"]]" == "[["Realistic" == "Realistic"]]"; }
[[[[Nl]]]]: Verify Google Play Services availability


--------------------------------------------- Result 98 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 98 / 0 / 98:  12%|█▏        | 98/785 [03:11<22:22,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 98 / 0 / 98:  13%|█▎        | 99/785 [03:12<22:11,  1.94s/it][Succeeded / Failed / Skipped / Total] 0 / 99 / 0 / 99:  13%|█▎        | 99/785 [03:12<22:11,  1.94s/it][Succeeded / Failed / Skipped / Total] 0 / 99 / 0 / 99:  13%|█▎        | 100/785 [03:18<22:37,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 100 / 0 / 100:  13%|█▎        | 100/785 [03:18<22:37,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 100 / 0 / 100:  13%|█▎        | 101/785 [03:19<22:30,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 101 / 0 / 101:  13%|█▎        | 101/785 [03:19<22:30,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 101 / 0 / 101:  13%|█▎        | 102/785 [03:22<22:34,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 102 / 0 / 102:  13%|█▎        | 102/785 [03:22<22:34,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 102 / 0 / 102:  13%|█▎        | 103/785 [03:23<22:30,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 103 / 0 / 103:  13%|█▎        | 103/785 [03:23<22:30,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 103 / 0 / 103:  13%|█▎        | 104/785 [03:26<22:34,  1.99s/it][Succeeded / Failed / Skipped / Total] 0 / 104 / 0 / 104:  13%|█▎        | 104/785 [03:26<22:34,  1.99s/it][Succeeded / Failed / Skipped / Total] 0 / 104 / 0 / 104:  13%|█▎        | 105/785 [03:29<22:37,  2.00s/it][[0 (-8121%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[logCacheRemoved]](String [[key]]) throws SiteWhereException { if (LOGGER.isTraceEnabled()) { LOGGER.trace("Removing cached object with key: " + [[key]]); } }
[[[[Nl]]]]: Log object removed from cache

[[[[Adv]]]]: public static void [[captions]](String [[wrenches]]) throws SiteWhereException { if (LOGGER.isTraceEnabled()) { LOGGER.trace("Removing cached object with key: " + [[wrenches]]); } }
[[[[Nl]]]]: Log object removed from cache


--------------------------------------------- Result 99 ---------------------------------------------
[[0 (-7134%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final long [[readUnsigned32]]() throws IOException { readInsistently(buffer,0,4); return extractUnsigned32(); }
[[[[Nl]]]]: < p > Read one unsigned integer 32 bit value

[[[[Adv]]]]: public final long [[agoraphobia]]() throws IOException { readInsistently(buffer,0,4); return extractUnsigned32(); }
[[[[Nl]]]]: < p > Read one unsigned integer 32 bit value


--------------------------------------------- Result 100 ---------------------------------------------
[[0 (-8066%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[decryptRSA]](String [[message]]) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, [[IllegalBlockSizeException]], BadPaddingException, UnsupportedEncodingException, InvalidAlgorithmParameterException, ClassNotFoundException, InvalidKeySpecException { Cipher c2 = Cipher.getInstance(Algorithm.rules.get("RSA")); BigInteger m = new BigInteger(Base64.decode(getKeyParams()[0].getBytes(), Base64.DEFAULT)); BigInteger [[e]] = new BigInteger(Base64.decode(getKeyParams()[1].getBytes(), Base64.DEFAULT)); c2.init(Cipher.DECRYPT_MODE, convertStringToPublicKey(m, [[e]])); byte[] [[decryptedData]] = c2.doFinal(Base64.decode([[message]].getBytes(), Base64.DEFAULT)); return new String([[decryptedData]], Algorithm.CHARSET); }
[[[[Nl]]]]: Decrypt messages by RSA algorithm < br > @ param message @ return Original message @ throws NoSuchAlgorithmException @ throws NoSuchPaddingException @ throws InvalidKeyException @ throws IllegalBlockSizeException @ throws BadPaddingException @ throws UnsupportedEncodingException @ throws InvalidAlgorithmParameterException @ throws InvalidKeySpecException @ throws ClassNotFoundException

[[[[Adv]]]]: public String [[spurns]](String [[embassies]]) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, [[kilometers]], BadPaddingException, UnsupportedEncodingException, InvalidAlgorithmParameterException, ClassNotFoundException, InvalidKeySpecException { Cipher c2 = Cipher.getInstance(Algorithm.rules.get("RSA")); BigInteger m = new BigInteger(Base64.decode(getKeyParams()[0].getBytes(), Base64.DEFAULT)); BigInteger [[ell]] = new BigInteger(Base64.decode(getKeyParams()[1].getBytes(), Base64.DEFAULT)); c2.init(Cipher.DECRYPT_MODE, convertStringToPublicKey(m, [[ell]])); byte[] [[geographically]] = c2.doFinal(Base64.decode([[embassies]].getBytes(), Base64.DEFAULT)); return new String([[geographically]], Algorithm.CHARSET); }
[[[[Nl]]]]: Decrypt messages by RSA algorithm < br > @ param message @ return Original message @ throws NoSuchAlgorithmException @ throws NoSuchPaddingException @ throws InvalidKeyException @ throws IllegalBlockSizeException @ throws BadPaddingException @ throws UnsupportedEncodingException @ throws InvalidAlgorithmParameterException @ throws InvalidKeySpecException @ throws ClassNotFoundException


--------------------------------------------- Result 101 ---------------------------------------------
[[0 (-8472%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Completable [[delete]](Comment [[comment]]) { Timber.d("deleting comment with id %s", [[comment]].getId()); return Completable.fromAction(() -> commentDao.delete([[comment]])); }
[[[[Nl]]]]: Deletes a comment

[[[[Adv]]]]: public Completable [[suppression]](Comment [[suspension]]) { Timber.d("deleting comment with id %s", [[suspension]].getId()); return Completable.fromAction(() -> commentDao.delete([[suspension]])); }
[[[[Nl]]]]: Deletes a comment


--------------------------------------------- Result 102 ---------------------------------------------
[[0 (-6334%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String[] [[verifyJar]](RandomAccessStream [[jarStorage]], String [[jarFilename]]) throws IOException, InvalidJadException { InputStream [[jarStream]]; String [[jarSig]]; [[jarSig]] = state.getAppProperty(SIG_PROP); if ([[jarSig]] == null) { return null; } authPath = null; findProviderCert(); [[jarStorage]].connect([[jarFilename]], Connector.READ); try { [[jarStream]] = [[jarStorage]].openInputStream(); try { verifyStream([[jarStream]], [[jarSig]]); } finally { [[jarStream]].close(); } } finally { [[jarStorage]].disconnect(); } return authPath; }
[[[[Nl]]]]: Verifies a Jar

[[[[Adv]]]]: public String[] [[sheepshead]](RandomAccessStream [[speaker]], String [[sunrise]]) throws IOException, InvalidJadException { InputStream [[antenna]]; String [[deforestation]]; [[deforestation]] = state.getAppProperty(SIG_PROP); if ([[deforestation]] == null) { return null; } authPath = null; findProviderCert(); [[speaker]].connect([[sunrise]], Connector.READ); try { [[antenna]] = [[speaker]].openInputStream(); try { verifyStream([[antenna]], [[deforestation]]); } finally { [[antenna]].close(); } } finally { [[speaker]].disconnect(); } return authPath; }
[[[[Nl]]]]: Verifies a Jar


--------------------------------------------- Result 103 ---------------------------------------------
[[0 (-8132%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static byte[] [[readInputStreamToByteArray]](InputStream [[is]]) throws IOException { ByteArrayOutputStream [[bos]] = null; try { [[bos]] = new ByteArrayOutputStream(); readInputStream([[bos]], [[is]]); } finally { if (null != [[bos]]) { [[bos]].close(); } } if (null != [[bos]]) { return [[bos]].toByteArray(); } return null; }
[[[[Nl]]]]: Reads some input stream and return its content as byte array

[[[[Adv]]]]: public static byte[] [[ndows]](InputStream [[poses]]) throws IOException { ByteArrayOutputStream [[everglades]] = null; try { [[everglades]] = new ByteArrayOutputStream(); readInputStream([[everglades]], [[poses]]); } finally { if (null != [[everglades]]) { [[everglades]].close(); } } if (null != [[everglades]]) { return [[everglades]].toByteArray(); } return null; }
[[[[Nl]]]]: Reads some input stream and return its content as byte array


--------------------------------------------- Result 104 ---------------------------------------------
[[0 (-7089%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getNotificationId]](String [[downloadGuid]]) { DownloadSharedPreferenceEntry [[entry]] = getDownloadSharedPreferenceEntry([[downloadGuid]]); if ([[entry]] != null) return [[entry]].notificationId; int [[notificationId]] = mNextNotificationId; mNextNotificationId = mNextNotificationId == Integer.MAX_VALUE ? STARTING_NOTIFICATION_ID : mNextNotificationId + 1; SharedPreferences.Editor [[editor]] = mSharedPrefs.edit(); [[editor]].putInt(NEXT_DOWNLOAD_NOTIFICATION_ID, mNextNotificationId); [[editor]].apply(); return [[notificationId]]; }
[[[[Nl]]]]: Return the notification ID for the given download GUID

[[[[Adv]]]]: private int [[schlosser]](String [[tween]]) { DownloadSharedPreferenceEntry [[penetrating]] = getDownloadSharedPreferenceEntry([[tween]]); if ([[penetrating]] != null) return [[penetrating]].notificationId; int [[playacting]] = mNextNotificationId; mNextNotificationId = mNextNotificationId == Integer.MAX_VALUE ? STARTING_NOTIFICATION_ID : mNextNotificationId + 1; SharedPreferences.Editor [[nonfiction]] = mSharedPrefs.edit(); [[nonfiction]].putInt(NEXT_DOWNLOAD_NOTIFICATION_ID, mNextNotificationId); [[nonfiction]].apply(); return [[playacting]]; }
[[[[Nl]]]]: Return the notification ID for the given download GUID


--------------------------------------------- Result 105 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 105 / 0 / 105:  13%|█▎        | 105/785 [03:29<22:37,  2.00s/it][Succeeded / Failed / Skipped / Total] 0 / 105 / 0 / 105:  14%|█▎        | 106/785 [03:32<22:41,  2.00s/it][Succeeded / Failed / Skipped / Total] 0 / 106 / 0 / 106:  14%|█▎        | 106/785 [03:32<22:41,  2.00s/it][Succeeded / Failed / Skipped / Total] 0 / 106 / 0 / 106:  14%|█▎        | 107/785 [03:34<22:37,  2.00s/it][Succeeded / Failed / Skipped / Total] 0 / 107 / 0 / 107:  14%|█▎        | 107/785 [03:34<22:37,  2.00s/it][Succeeded / Failed / Skipped / Total] 0 / 107 / 0 / 107:  14%|█▍        | 108/785 [03:36<22:36,  2.00s/it][Succeeded / Failed / Skipped / Total] 0 / 108 / 0 / 108:  14%|█▍        | 108/785 [03:36<22:36,  2.00s/it][Succeeded / Failed / Skipped / Total] 0 / 108 / 0 / 108:  14%|█▍        | 109/785 [03:38<22:32,  2.00s/it][Succeeded / Failed / Skipped / Total] 0 / 109 / 0 / 109:  14%|█▍        | 109/785 [03:38<22:32,  2.00s/it][Succeeded / Failed / Skipped / Total] 0 / 109 / 0 / 109:  14%|█▍        | 110/785 [03:41<22:36,  2.01s/it][Succeeded / Failed / Skipped / Total] 0 / 110 / 0 / 110:  14%|█▍        | 110/785 [03:41<22:36,  2.01s/it][Succeeded / Failed / Skipped / Total] 0 / 110 / 0 / 110:  14%|█▍        | 111/785 [03:42<22:29,  2.00s/it][Succeeded / Failed / Skipped / Total] 0 / 111 / 0 / 111:  14%|█▍        | 111/785 [03:42<22:29,  2.00s/it][Succeeded / Failed / Skipped / Total] 0 / 111 / 0 / 111:  14%|█▍        | 112/785 [03:43<22:25,  2.00s/it][Succeeded / Failed / Skipped / Total] 0 / 112 / 0 / 112:  14%|█▍        | 112/785 [03:43<22:25,  2.00s/it][Succeeded / Failed / Skipped / Total] 0 / 112 / 0 / 112:  14%|█▍        | 113/785 [03:44<22:17,  1.99s/it][Succeeded / Failed / Skipped / Total] 0 / 113 / 0 / 113:  14%|█▍        | 113/785 [03:44<22:17,  1.99s/it][Succeeded / Failed / Skipped / Total] 0 / 113 / 0 / 113:  15%|█▍        | 114/785 [03:47<22:20,  2.00s/it][[0 (-6681%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private TestHttpUrlRequestListener [[makeRequest]]( HttpUrlRequestFactory [[factory]], String [[url]]) { HashMap<String, String> [[headers]] = new HashMap<String, String>(); TestHttpUrlRequestListener listener = new TestHttpUrlRequestListener(); HttpUrlRequest [[request]] = [[factory]].createRequest( [[url]], HttpUrlRequest.REQUEST_PRIORITY_MEDIUM, [[headers]], listener); [[request]].start(); return listener; }
[[[[Nl]]]]: Helper function to make a request

[[[[Adv]]]]: private TestHttpUrlRequestListener [[categorical]]( HttpUrlRequestFactory [[establishments]], String [[email]]) { HashMap<String, String> [[denomination]] = new HashMap<String, String>(); TestHttpUrlRequestListener listener = new TestHttpUrlRequestListener(); HttpUrlRequest [[motions]] = [[establishments]].createRequest( [[email]], HttpUrlRequest.REQUEST_PRIORITY_MEDIUM, [[denomination]], listener); [[motions]].start(); return listener; }
[[[[Nl]]]]: Helper function to make a request


--------------------------------------------- Result 106 ---------------------------------------------
[[0 (-8018%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[draw]](ArrayList<PointF> [[vertexPoints]], Canvas [[canvas]]) { for (int i = 0; i < [[vertexPoints]].size(); i++) { PointF [[point]] = [[vertexPoints]].get(i); RectF [[rect]] = new RectF([[point]].x - PADDING, [[point]].y - PADDING, [[point]].x + PADDING, [[point]].y + PADDING); [[canvas]].drawRect([[rect]], mPointPaint); } }
[[[[Nl]]]]: Draw the vertex points on the canvas

[[[[Adv]]]]: public void [[appealing]](ArrayList<PointF> [[israelites]], Canvas [[towel]]) { for (int i = 0; i < [[israelites]].size(); i++) { PointF [[commentary]] = [[israelites]].get(i); RectF [[requirements]] = new RectF([[commentary]].x - PADDING, [[commentary]].y - PADDING, [[commentary]].x + PADDING, [[commentary]].y + PADDING); [[towel]].drawRect([[requirements]], mPointPaint); } }
[[[[Nl]]]]: Draw the vertex points on the canvas


--------------------------------------------- Result 107 ---------------------------------------------
[[0 (-8136%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[handleNextButtonTextIntent]](@NonNull final Bundle [[extras]]) { CharSequence [[text]] = [[extras]].getString(EXTRA_NEXT_BUTTON_TEXT); if (!TextUtils.isEmpty([[text]])) { setNextButtonText([[text]]); } }
[[[[Nl]]]]: Handles the intent extra , which specifies the text of the next button

[[[[Adv]]]]: private void [[packer]](@NonNull final Bundle [[supplements]]) { CharSequence [[papers]] = [[supplements]].getString(EXTRA_NEXT_BUTTON_TEXT); if (!TextUtils.isEmpty([[papers]])) { setNextButtonText([[papers]]); } }
[[[[Nl]]]]: Handles the intent extra , which specifies the text of the next button


--------------------------------------------- Result 108 ---------------------------------------------
[[0 (-8561%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public MetadataContainer[] [[createContainers]](final ContainerType[] [[types]]) { assert [[types]] != null; final MetadataContainer[] [[result]] = new MetadataContainer[[[types]].length]; for (int [[i]] = 0; [[i]] < [[result]].length; [[i]]++) { [[result]][[[i]]] = createContainer([[types]][[[i]]]); } return [[result]]; }
[[[[Nl]]]]: Convenience method which calls { @ link # createContainer ( ContainerType ) } for each given container type

[[[[Adv]]]]: public MetadataContainer[] [[fraternize]](final ContainerType[] [[sexes]]) { assert [[sexes]] != null; final MetadataContainer[] [[stemming]] = new MetadataContainer[[[sexes]].length]; for (int [[me]] = 0; [[me]] < [[stemming]].length; [[me]]++) { [[stemming]][[[me]]] = createContainer([[sexes]][[[me]]]); } return [[stemming]]; }
[[[[Nl]]]]: Convenience method which calls { @ link # createContainer ( ContainerType ) } for each given container type


--------------------------------------------- Result 109 ---------------------------------------------
[[0 (-6759%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Collection<IExpr> [[reverse]](Collection<IExpr> [[list]]) { for (int [[i]] = fEnd - 1; [[i]] >= fStart; [[i]]--) { [[list]].add(fList.get([[i]])); } return [[list]]; }
[[[[Nl]]]]: Append the ranges elements in reversed order to the given < code > list < code > @ param list @ return

[[[[Adv]]]]: public Collection<IExpr> [[unseat]](Collection<IExpr> [[showings]]) { for (int [[wanna]] = fEnd - 1; [[wanna]] >= fStart; [[wanna]]--) { [[showings]].add(fList.get([[wanna]])); } return [[showings]]; }
[[[[Nl]]]]: Append the ranges elements in reversed order to the given < code > list < code > @ param list @ return


--------------------------------------------- Result 110 ---------------------------------------------
[[0 (-7037%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Typeface parseTypeface(Context [[context]], ReadableMap [[propMap]], String [[styleKey]], String [[familyKey]]) { String [[fontFamily]] = null; if ([[propMap]].hasKey([[familyKey]])) { [[fontFamily]] = [[propMap]].getString([[familyKey]]); } int style = 0; if ([[propMap]].hasKey([[styleKey]])) { style = [[propMap]].getInt([[styleKey]]); } return ReactFontManager.getInstance().getTypeface([[fontFamily]], style, [[context]].getAssets()); }
[[[[Nl]]]]: fontStyle : NORMAL = 0 , BOLD = 1 , ITALIC = 2 , BOLD_ITALIC = 3

[[[[Adv]]]]: public static Typeface parseTypeface(Context [[connection]], ReadableMap [[smokestacks]], String [[encountered]], String [[jellybean]]) { String [[broadcaster]] = null; if ([[smokestacks]].hasKey([[jellybean]])) { [[broadcaster]] = [[smokestacks]].getString([[jellybean]]); } int style = 0; if ([[smokestacks]].hasKey([[encountered]])) { style = [[smokestacks]].getInt([[encountered]]); } return ReactFontManager.getInstance().getTypeface([[broadcaster]], style, [[connection]].getAssets()); }
[[[[Nl]]]]: fontStyle : NORMAL = 0 , BOLD = 1 , ITALIC = 2 , BOLD_ITALIC = 3


--------------------------------------------- Result 111 ---------------------------------------------
[[0 (-7041%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setFaceDetectionListener]](FaceDetectionListener [[listener]]) { mFaceListener = [[listener]]; }
[[[[Nl]]]]: Registers a listener to be notified about the faces detected in the preview frame

[[[[Adv]]]]: public final void [[floorboard]](FaceDetectionListener [[handset]]) { mFaceListener = [[handset]]; }
[[[[Nl]]]]: Registers a listener to be notified about the faces detected in the preview frame


--------------------------------------------- Result 112 ---------------------------------------------
[[0 (-7815%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[cleanPatchByVersion]](File [[patchFile]]) { if (patchDirectory == null || [[patchFile]] == null || ![[patchFile]].exists()) { return; } String [[versionName]] = SharePatchFileUtil.getPatchVersionDirectory(SharePatchFileUtil.getMD5([[patchFile]])); [[cleanPatchByVersion]]([[versionName]]); }
[[[[Nl]]]]: try delete the temp version files @ param patchFile

[[[[Adv]]]]: public void [[seductive]](File [[electrifying]]) { if (patchDirectory == null || [[electrifying]] == null || ![[electrifying]].exists()) { return; } String [[advantages]] = SharePatchFileUtil.getPatchVersionDirectory(SharePatchFileUtil.getMD5([[electrifying]])); [[seductive]]([[advantages]]); }
[[[[Nl]]]]: try delete the temp version files @ param patchFile


--------------------------------------------- Result 113 ---------------------------------------------
[[0 (-8010%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[writeByte]](int [[v]]) throws IOException { write([[v]]); }
[[[[Nl]]]]: Writes a < code > byte < code > to the file as a one-byte value

[[[[Adv]]]]: public final void [[sleepwalks]](int [[towards]]) throws IOException { write([[towards]]); }
[[[[Nl]]]]: Writes a < code > byte < code > to the file as a one-byte value


--------------------------------------------- Result 114 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 114 / 0 / 114:  15%|█▍        | 114/785 [03:47<22:20,  2.00s/it][Succeeded / Failed / Skipped / Total] 0 / 114 / 0 / 114:  15%|█▍        | 115/785 [03:50<22:25,  2.01s/it][Succeeded / Failed / Skipped / Total] 0 / 115 / 0 / 115:  15%|█▍        | 115/785 [03:50<22:25,  2.01s/it][Succeeded / Failed / Skipped / Total] 0 / 115 / 0 / 115:  15%|█▍        | 116/785 [03:52<22:21,  2.01s/it][Succeeded / Failed / Skipped / Total] 0 / 116 / 0 / 116:  15%|█▍        | 116/785 [03:52<22:21,  2.01s/it][Succeeded / Failed / Skipped / Total] 0 / 116 / 0 / 116:  15%|█▍        | 117/785 [03:55<22:23,  2.01s/it][Succeeded / Failed / Skipped / Total] 0 / 117 / 0 / 117:  15%|█▍        | 117/785 [03:55<22:23,  2.01s/it][Succeeded / Failed / Skipped / Total] 0 / 117 / 0 / 117:  15%|█▌        | 118/785 [03:57<22:23,  2.01s/it][Succeeded / Failed / Skipped / Total] 0 / 118 / 0 / 118:  15%|█▌        | 118/785 [03:57<22:23,  2.01s/it][Succeeded / Failed / Skipped / Total] 0 / 118 / 0 / 118:  15%|█▌        | 119/785 [03:58<22:16,  2.01s/it][Succeeded / Failed / Skipped / Total] 0 / 119 / 0 / 119:  15%|█▌        | 119/785 [03:58<22:16,  2.01s/it][Succeeded / Failed / Skipped / Total] 0 / 119 / 0 / 119:  15%|█▌        | 120/785 [03:59<22:06,  2.00s/it][Succeeded / Failed / Skipped / Total] 0 / 120 / 0 / 120:  15%|█▌        | 120/785 [03:59<22:06,  2.00s/it][Succeeded / Failed / Skipped / Total] 0 / 120 / 0 / 120:  15%|█▌        | 121/785 [04:02<22:09,  2.00s/it][Succeeded / Failed / Skipped / Total] 0 / 121 / 0 / 121:  15%|█▌        | 121/785 [04:02<22:09,  2.00s/it][Succeeded / Failed / Skipped / Total] 0 / 121 / 0 / 121:  16%|█▌        | 122/785 [04:03<22:02,  2.00s/it][[0 (-7891%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[toHexString]](byte[] [[bytes]], int [[lengthToPad]]) { BigInteger hash = new BigInteger(1, [[bytes]]); String [[digest]] = hash.toString(16); while ([[digest]].length() < [[lengthToPad]]) { [[digest]] = "0" + [[digest]]; } return [[digest]]; }
[[[[Nl]]]]: < p > Bytes to hex string < p > @ param bytes this source bytes array @ param lengthToPad length to pad @ return hex string

[[[[Adv]]]]: public static String [[midship]](byte[] [[threads]], int [[lottery]]) { BigInteger hash = new BigInteger(1, [[threads]]); String [[swallow]] = hash.toString(16); while ([[swallow]].length() < [[lottery]]) { [[swallow]] = "0" + [[swallow]]; } return [[swallow]]; }
[[[[Nl]]]]: < p > Bytes to hex string < p > @ param bytes this source bytes array @ param lengthToPad length to pad @ return hex string


--------------------------------------------- Result 115 ---------------------------------------------
[[0 (-7579%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void layoutItemsUsingGravity(int [[numRows]], int [[numItems]]) { int [[numBaseItemsPerRow]] = [[numItems]] / [[numRows]]; int [[numLeftoverItems]] = [[numItems]] % [[numRows]]; int [[rowsThatGetALeftoverItem]] = [[numRows]] - [[numLeftoverItems]]; int[] layout = mLayout; for (int i = 0; i < [[numRows]]; i++) { layout[i] = [[numBaseItemsPerRow]]; if (i >= [[rowsThatGetALeftoverItem]]) { layout[i]++; } } mLayoutNumRows = [[numRows]]; }
[[[[Nl]]]]: Figures out the layout for the menu items by equally distributing , and adding any excess items equally to lower rows

[[[[Adv]]]]: private void layoutItemsUsingGravity(int [[osmosis]], int [[veridian]]) { int [[destroying]] = [[veridian]] / [[osmosis]]; int [[causeway]] = [[veridian]] % [[osmosis]]; int [[motor]] = [[osmosis]] - [[causeway]]; int[] layout = mLayout; for (int i = 0; i < [[osmosis]]; i++) { layout[i] = [[destroying]]; if (i >= [[motor]]) { layout[i]++; } } mLayoutNumRows = [[osmosis]]; }
[[[[Nl]]]]: Figures out the layout for the menu items by equally distributing , and adding any excess items equally to lower rows


--------------------------------------------- Result 116 ---------------------------------------------
[[0 (-7364%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public TranscriptionJob [[withSettings]](Settings [[settings]]) { this.[[settings]] = [[settings]]; return this; }
[[[[Nl]]]]: < p > Optional settings for the transcription job

[[[[Adv]]]]: public TranscriptionJob [[busload]](Settings [[buildup]]) { this.[[framework]] = [[buildup]]; return this; }
[[[[Nl]]]]: < p > Optional settings for the transcription job


--------------------------------------------- Result 117 ---------------------------------------------
[[0 (-7511%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[sendMessage]](AccountJid [[account]], UserJid user, String [[text]]) { AbstractChat [[chat]] = getOrCreateChat([[account]], user); [[sendMessage]]([[text]], [[chat]]); }
[[[[Nl]]]]: Sends message

[[[[Adv]]]]: public void [[classrooms]](AccountJid [[calculations]], UserJid user, String [[editions]]) { AbstractChat [[chats]] = getOrCreateChat([[calculations]], user); [[classrooms]]([[editions]], [[chats]]); }
[[[[Nl]]]]: Sends message


--------------------------------------------- Result 118 ---------------------------------------------
[[0 (-7589%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Error [[setXErrorWidth]](Number [[xErrorWidth]]) { if (jsBase == null) { this.[[xErrorWidth]] = [[xErrorWidth]]; } else { this.[[xErrorWidth]] = [[xErrorWidth]]; if (!isChain) { js.append(jsBase); isChain = "[[True]]" == "[[True]]"; } js.append(String.format(Locale.US, ".xErrorWidth(%s)", [[xErrorWidth]])); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, jsBase + ".xErrorWidth(%s);", [[xErrorWidth]])); js.setLength(0); } } return this; }
[[[[Nl]]]]: Setter for X error width settings

[[[[Adv]]]]: public Error [[factorial]](Number [[rutledge]]) { if (jsBase == null) { this.[[incomes]] = [[rutledge]]; } else { this.[[incomes]] = [[rutledge]]; if (!isChain) { js.append(jsBase); isChain = "[["Truth" == "Truth"]]" == "[["Truth" == "Truth"]]"; } js.append(String.format(Locale.US, ".xErrorWidth(%s)", [[rutledge]])); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, jsBase + ".xErrorWidth(%s);", [[rutledge]])); js.setLength(0); } } return this; }
[[[[Nl]]]]: Setter for X error width settings


--------------------------------------------- Result 119 ---------------------------------------------
[[0 (-8209%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public synchronized void [[show]](Screen [[screen]]) { if (destroyed) { throw new IllegalStateException("Stack has beed destroyed"); } synchronized ([[screen]]) { if ([[screen]].isParentStack(this)) { screens.removeElement([[screen]]); } else if (![[screen]].isParentStack(null)) { throw new IllegalArgumentException( "Screen is already on a stack"); } if (screens == null) { screens = new Stack(); } else if (screens.contains([[screen]])) { throw new IllegalArgumentException( "Screen is already on a stack"); } [[screen]].setParentStack(this); screens.push([[screen]]); } showScreen([[screen]]); }
[[[[Nl]]]]: Shows a < code > screen < code > on top of all screens of this stack

[[[[Adv]]]]: public synchronized void [[reflect]](Screen [[jury]]) { if (destroyed) { throw new IllegalStateException("Stack has beed destroyed"); } synchronized ([[jury]]) { if ([[jury]].isParentStack(this)) { screens.removeElement([[jury]]); } else if (![[jury]].isParentStack(null)) { throw new IllegalArgumentException( "Screen is already on a stack"); } if (screens == null) { screens = new Stack(); } else if (screens.contains([[jury]])) { throw new IllegalArgumentException( "Screen is already on a stack"); } [[jury]].setParentStack(this); screens.push([[jury]]); } showScreen([[jury]]); }
[[[[Nl]]]]: Shows a < code > screen < code > on top of all screens of this stack


--------------------------------------------- Result 120 ---------------------------------------------
[[0 (-7272%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[interrupt]]() { if (audioTrack != null) { if (audioTrack.getState() == AudioTrack.STATE_INITIALIZED || audioTrack.getState() == AudioTrack.PLAYSTATE_PLAYING) { audioTrack.pause(); } audioTrack.flush(); audioTrack.release(); } }
[[[[Nl]]]]: Interrupt the audioStream

[[[[Adv]]]]: public void [[harford]]() { if (audioTrack != null) { if (audioTrack.getState() == AudioTrack.STATE_INITIALIZED || audioTrack.getState() == AudioTrack.PLAYSTATE_PLAYING) { audioTrack.pause(); } audioTrack.flush(); audioTrack.release(); } }
[[[[Nl]]]]: Interrupt the audioStream


--------------------------------------------- Result 121 ---------------------------------------------
[[0 (-6997%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[parseCommonRuleProcessorAttributes]](Element [[element]], BeanDefinitionBuilder [[builder]]) { Attr [[processorId]] = [[element]].getAttributeNode("processorId"); if ([[processorId]] != null) { [[builder]].addPropertyValue("processorId", [[processorId]].getValue()); } Attr [[numProcessingThreads]] = [[element]].getAttributeNode("numProcessingThreads"); if ([[numProcessingThreads]] != null) { [[builder]].addPropertyValue("numProcessingThreads", [[numProcessingThreads]].getValue()); } }
[[[[Nl]]]]: Parse attributes that are common to all rule processors

[[[[Adv]]]]: protected void [[horoscopes]](Element [[point]], BeanDefinitionBuilder [[editor]]) { Attr [[momentum]] = [[point]].getAttributeNode("processorId"); if ([[momentum]] != null) { [[editor]].addPropertyValue("processorId", [[momentum]].getValue()); } Attr [[tanglefoot]] = [[point]].getAttributeNode("numProcessingThreads"); if ([[tanglefoot]] != null) { [[editor]].addPropertyValue("numProcessingThreads", [[tanglefoot]].getValue()); } }
[[[[Nl]]]]: Parse attributes that are common to all rule processors


--------------------------------------------- Result 122 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 122 / 0 / 122:  16%|█▌        | 122/785 [04:03<22:02,  2.00s/it][Succeeded / Failed / Skipped / Total] 0 / 122 / 0 / 122:  16%|█▌        | 123/785 [04:04<21:56,  1.99s/it][Succeeded / Failed / Skipped / Total] 0 / 123 / 0 / 123:  16%|█▌        | 123/785 [04:04<21:56,  1.99s/it][Succeeded / Failed / Skipped / Total] 0 / 123 / 0 / 123:  16%|█▌        | 124/785 [04:06<21:52,  1.99s/it][Succeeded / Failed / Skipped / Total] 0 / 124 / 0 / 124:  16%|█▌        | 124/785 [04:06<21:52,  1.99s/it][Succeeded / Failed / Skipped / Total] 0 / 124 / 0 / 124:  16%|█▌        | 125/785 [04:07<21:49,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 125 / 0 / 125:  16%|█▌        | 125/785 [04:07<21:49,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 125 / 0 / 125:  16%|█▌        | 126/785 [04:10<21:49,  1.99s/it][Succeeded / Failed / Skipped / Total] 0 / 126 / 0 / 126:  16%|█▌        | 126/785 [04:10<21:49,  1.99s/it][Succeeded / Failed / Skipped / Total] 0 / 126 / 0 / 126:  16%|█▌        | 127/785 [04:13<21:51,  1.99s/it][Succeeded / Failed / Skipped / Total] 0 / 127 / 0 / 127:  16%|█▌        | 127/785 [04:13<21:51,  1.99s/it][Succeeded / Failed / Skipped / Total] 0 / 127 / 0 / 127:  16%|█▋        | 128/785 [04:13<21:42,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 128 / 0 / 128:  16%|█▋        | 128/785 [04:13<21:42,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 128 / 0 / 128:  16%|█▋        | 129/785 [04:16<21:41,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 129 / 0 / 129:  16%|█▋        | 129/785 [04:16<21:41,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 129 / 0 / 129:  17%|█▋        | 130/785 [04:18<21:44,  1.99s/it][Succeeded / Failed / Skipped / Total] 0 / 130 / 0 / 130:  17%|█▋        | 130/785 [04:18<21:44,  1.99s/it][Succeeded / Failed / Skipped / Total] 0 / 130 / 0 / 130:  17%|█▋        | 131/785 [04:20<21:38,  1.98s/it][[0 (-7762%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getLabel]](int [[index]]) { return mEntries.get(checkPositionIndex([[index]], size())).getLabel(); }
[[[[Nl]]]]: Get { @ link ChartEntry } label from specific index

[[[[Adv]]]]: public String [[pusillanimous]](int [[signposts]]) { return mEntries.get(checkPositionIndex([[signposts]], size())).getLabel(); }
[[[[Nl]]]]: Get { @ link ChartEntry } label from specific index


--------------------------------------------- Result 123 ---------------------------------------------
[[0 (-7386%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static List<Post> [[getUnSeen]]() { return App.Realm().where(Post.class).equalTo("seen","[[False]]" != "[[False]]") .or() .isNull("seen") .findAllSorted("pubDate",Sort.DESCENDING); }
[[[[Nl]]]]: Get the posts that have not been seen by the user @ return

[[[[Adv]]]]: public static List<Post> [[tiebreaker]]() { return App.Realm().where(Post.class).equalTo("seen","[["Phonies" != "Phonies"]]" != "[["Phonies" != "Phonies"]]") .or() .isNull("seen") .findAllSorted("pubDate",Sort.DESCENDING); }
[[[[Nl]]]]: Get the posts that have not been seen by the user @ return


--------------------------------------------- Result 124 ---------------------------------------------
[[0 (-7066%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Element [[setIconDrawable]](@DrawableRes Integer [[iconDrawable]]) { this.[[iconDrawable]] = [[iconDrawable]]; return this; }
[[[[Nl]]]]: Set the icon drawable for this Element that appears to the left of the title or to the right of the title in RTL layout mode

[[[[Adv]]]]: public Element [[buzzers]](@DrawableRes Integer [[blowjobs]]) { this.[[disband]] = [[blowjobs]]; return this; }
[[[[Nl]]]]: Set the icon drawable for this Element that appears to the left of the title or to the right of the title in RTL layout mode


--------------------------------------------- Result 125 ---------------------------------------------
[[0 (-7798%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public CreateVocabularyResult [[withLanguageCode]](String [[languageCode]]) { this.[[languageCode]] = [[languageCode]]; return this; }
[[[[Nl]]]]: < p > The language code of the vocabulary entries

[[[[Adv]]]]: public CreateVocabularyResult [[atonement]](String [[matters]]) { this.[[assuming]] = [[matters]]; return this; }
[[[[Nl]]]]: < p > The language code of the vocabulary entries


--------------------------------------------- Result 126 ---------------------------------------------
[[0 (-7501%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private Optional<Pair<String, String>> [[getLibRef]](ImmutableSet<String> [[macros]], String [[arg]]) { Optional<MacroMatchResult> [[result]]; try { [[result]] = MacroFinder.match([[macros]], [[arg]]); } catch (MacroException e) { throw new HumanReadableException(e, e.getMessage()); } if (![[result]].isPresent()) { return Optional.empty(); } if ([[result]].get().getMacroType().equals("")) { throw new HumanReadableException("expected library reference"); } if ([[result]].get().getMacroInput().size() != 1) { throw new HumanReadableException("expected a single library reference argument"); } return Optional.of( new Pair<>([[result]].get().getMacroType(), [[result]].get().getMacroInput().get(0))); }
[[[[Nl]]]]: If the arg contains a library reference , parse it and return it 's name and argument

[[[[Adv]]]]: private Optional<Pair<String, String>> [[nibbling]](ImmutableSet<String> [[magnitude]], String [[animator]]) { Optional<MacroMatchResult> [[aftermath]]; try { [[aftermath]] = MacroFinder.match([[magnitude]], [[animator]]); } catch (MacroException e) { throw new HumanReadableException(e, e.getMessage()); } if (![[aftermath]].isPresent()) { return Optional.empty(); } if ([[aftermath]].get().getMacroType().equals("")) { throw new HumanReadableException("expected library reference"); } if ([[aftermath]].get().getMacroInput().size() != 1) { throw new HumanReadableException("expected a single library reference argument"); } return Optional.of( new Pair<>([[aftermath]].get().getMacroType(), [[aftermath]].get().getMacroInput().get(0))); }
[[[[Nl]]]]: If the arg contains a library reference , parse it and return it 's name and argument


--------------------------------------------- Result 127 ---------------------------------------------
[[0 (-7347%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[tintMenuItemIcon]](@ColorInt int [[color]], MenuItem [[item]]) { final Drawable [[drawable]] = [[item]].getIcon(); if ([[drawable]] != null) { final Drawable [[wrapped]] = DrawableCompat.wrap([[drawable]]); [[drawable]].mutate(); DrawableCompat.setTint([[wrapped]], [[color]]); [[item]].setIcon([[drawable]]); } }
[[[[Nl]]]]: Tints the color of the icon of the specified MenuItem

[[[[Adv]]]]: public static void [[older]](@ColorInt int [[blob]], MenuItem [[section]]) { final Drawable [[memory]] = [[section]].getIcon(); if ([[memory]] != null) { final Drawable [[bagging]] = DrawableCompat.wrap([[memory]]); [[memory]].mutate(); DrawableCompat.setTint([[bagging]], [[blob]]); [[section]].setIcon([[memory]]); } }
[[[[Nl]]]]: Tints the color of the icon of the specified MenuItem


--------------------------------------------- Result 128 ---------------------------------------------
[[0 (-7262%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[unregister]]() { if (mCamera == null) return; mCamera.stopPreview(); mCamera.release(); }
[[[[Nl]]]]: Unregister the utils of flashlight

[[[[Adv]]]]: public void [[addictions]]() { if (mCamera == null) return; mCamera.stopPreview(); mCamera.release(); }
[[[[Nl]]]]: Unregister the utils of flashlight


--------------------------------------------- Result 129 ---------------------------------------------
[[0 (-7677%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getCurrentDateTimeTZ]](SiteModel [[site]]) { String [[timezone]] = [[site]].getTimezone(); if ([[timezone]] == null) { AppLog.w(T.UTILS, "Timezone is null. Returning the device time!"); return getCurrentDatetime(); } String [[pattern]] = "yyyy-MM-dd HH:mm:ss"; return [[getCurrentDateTimeTZ]]([[timezone]], [[pattern]]); }
[[[[Nl]]]]: Get the current datetime of the blog

[[[[Adv]]]]: public static String [[conditioner]](SiteModel [[arenas]]) { String [[simulator]] = [[arenas]].getTimezone(); if ([[simulator]] == null) { AppLog.w(T.UTILS, "Timezone is null. Returning the device time!"); return getCurrentDatetime(); } String [[shape]] = "yyyy-MM-dd HH:mm:ss"; return [[conditioner]]([[simulator]], [[shape]]); }
[[[[Nl]]]]: Get the current datetime of the blog


--------------------------------------------- Result 130 ---------------------------------------------
[[0 (-7120%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[testListIteratorWithStartParameter]]() { Item<Object> [[item1]] = new Item<>(new Object()); Item<Object> [[item2]] = new Item<>(new Object()); ArrayList<Item<Object>> [[encapsulatedList]] = new ArrayList<>(); [[encapsulatedList]].add([[item1]]); [[encapsulatedList]].add([[item2]]); UnmodifiableItemList<Object> [[unmodifiableItemList]] = new UnmodifiableItemList<>([[encapsulatedList]]); ListIterator<Object> iterator = [[unmodifiableItemList]].listIterator(1); assertEquals([[item2]].getData(), iterator.next()); assertFalse(iterator.hasNext()); }
[[[[Nl]]]]: Tests the functionality of the method , which allows to retrieve a list iterator and expects a start index as a parameter

[[[[Adv]]]]: public final void [[dalmatian]]() { Item<Object> [[denomination]] = new Item<>(new Object()); Item<Object> [[cauterized]] = new Item<>(new Object()); ArrayList<Item<Object>> [[allegiance]] = new ArrayList<>(); [[allegiance]].add([[denomination]]); [[allegiance]].add([[cauterized]]); UnmodifiableItemList<Object> [[sums]] = new UnmodifiableItemList<>([[allegiance]]); ListIterator<Object> iterator = [[sums]].listIterator(1); assertEquals([[cauterized]].getData(), iterator.next()); assertFalse(iterator.hasNext()); }
[[[[Nl]]]]: Tests the functionality of the method , which allows to retrieve a list iterator and expects a start index as a parameter


--------------------------------------------- Result 131 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 131 / 0 / 131:  17%|█▋        | 131/785 [04:20<21:38,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 131 / 0 / 131:  17%|█▋        | 132/785 [04:21<21:31,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 132 / 0 / 132:  17%|█▋        | 132/785 [04:21<21:31,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 132 / 0 / 132:  17%|█▋        | 133/785 [04:22<21:25,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 133 / 0 / 133:  17%|█▋        | 133/785 [04:22<21:25,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 133 / 0 / 133:  17%|█▋        | 134/785 [04:23<21:22,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 134 / 0 / 134:  17%|█▋        | 134/785 [04:23<21:22,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 134 / 0 / 134:  17%|█▋        | 135/785 [04:26<21:24,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 135 / 0 / 135:  17%|█▋        | 135/785 [04:26<21:24,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 135 / 0 / 135:  17%|█▋        | 136/785 [04:28<21:21,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 136 / 0 / 136:  17%|█▋        | 136/785 [04:28<21:21,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 136 / 0 / 136:  17%|█▋        | 137/785 [04:31<21:23,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 137 / 0 / 137:  17%|█▋        | 137/785 [04:31<21:23,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 137 / 0 / 137:  18%|█▊        | 138/785 [04:33<21:20,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 138 / 0 / 138:  18%|█▊        | 138/785 [04:33<21:20,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 138 / 0 / 138:  18%|█▊        | 139/785 [04:34<21:14,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 139 / 0 / 139:  18%|█▊        | 139/785 [04:34<21:14,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 139 / 0 / 139:  18%|█▊        | 140/785 [04:37<21:16,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 140 / 0 / 140:  18%|█▊        | 140/785 [04:37<21:16,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 140 / 0 / 140:  18%|█▊        | 141/785 [04:38<21:13,  1.98s/it][[0 (-7567%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public DetectLabelsResult [[withLabels]](java.util.Collection<Label> [[labels]]) { setLabels([[labels]]); return this; }
[[[[Nl]]]]: < p > An array of labels for the real-world objects detected

[[[[Adv]]]]: public DetectLabelsResult [[heighten]](java.util.Collection<Label> [[emblem]]) { setLabels([[emblem]]); return this; }
[[[[Nl]]]]: < p > An array of labels for the real-world objects detected


--------------------------------------------- Result 132 ---------------------------------------------
[[0 (-6400%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[yypushback]](int [[number]]) { if ([[number]] > yylength()) zzScanError(ZZ_PUSHBACK_2BIG); zzMarkedPos -= [[number]]; }
[[[[Nl]]]]: Pushes the specified amount of characters back into the input stream

[[[[Adv]]]]: public void [[midshipmen]](int [[finger]]) { if ([[finger]] > yylength()) zzScanError(ZZ_PUSHBACK_2BIG); zzMarkedPos -= [[finger]]; }
[[[[Nl]]]]: Pushes the specified amount of characters back into the input stream


--------------------------------------------- Result 133 ---------------------------------------------
[[0 (-6793%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Chain<T> [[apply]](Consumer<T> [[action]]) { Invoker.invoke([[action]], item); return new Chain<>(item, configuration); }
[[[[Nl]]]]: apply an action to the stored item @ param action the action to be applied @ return { @ code this } instance for chaining

[[[[Adv]]]]: public Chain<T> [[dictate]](Consumer<T> [[measuring]]) { Invoker.invoke([[measuring]], item); return new Chain<>(item, configuration); }
[[[[Nl]]]]: apply an action to the stored item @ param action the action to be applied @ return { @ code this } instance for chaining


--------------------------------------------- Result 134 ---------------------------------------------
[[0 (-7156%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public GetJobDocumentResult [[withDocument]](String [[document]]) { this.[[document]] = [[document]]; return this; }
[[[[Nl]]]]: < p > The job document content

[[[[Adv]]]]: public GetJobDocumentResult [[greyhounds]](String [[symbol]]) { this.[[symbol]] = [[symbol]]; return this; }
[[[[Nl]]]]: < p > The job document content


--------------------------------------------- Result 135 ---------------------------------------------
[[0 (-6159%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[init]]( EventQueue [[theEventQueue]], MIDletControllerEventProducer [[theMidletControllerEventProducer]]) { if (!isInitialized) { eventQueue = [[theEventQueue]]; midletControllerEventProducer = [[theMidletControllerEventProducer]]; isInitialized = True; boolean [[vmRestarted]] = isVMRestarted(); ROMULInitializer.init([[vmRestarted]]); } }
[[[[Nl]]]]: Initializes Automation API

[[[[Adv]]]]: public static void [[lel]]( EventQueue [[chus]], MIDletControllerEventProducer [[aint]]) { if (!isInitialized) { eventQueue = [[chus]]; midletControllerEventProducer = [[aint]]; isInitialized = True; boolean [[ulan]] = isVMRestarted(); ROMULInitializer.init([[ulan]]); } }
[[[[Nl]]]]: Initializes Automation API


--------------------------------------------- Result 136 ---------------------------------------------
[[0 (-7483%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Pareto [[setMinPointLength]](String [[minPointLength1]]) { if (!isChain) { js.append(jsBase); isChain = "[[True]]" == "[[True]]"; } js.append(String.format(Locale.US, ".minPointLength(%s)", wrapQuotes([[minPointLength1]]))); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, ".minPointLength(%s)", wrapQuotes([[minPointLength1]]))); js.setLength(0); } return this; }
[[[[Nl]]]]: Setter for the minimum point length

[[[[Adv]]]]: public Pareto [[blameless]](String [[organizations]]) { if (!isChain) { js.append(jsBase); isChain = "[["Reales" == "Reales"]]" == "[["Reales" == "Reales"]]"; } js.append(String.format(Locale.US, ".minPointLength(%s)", wrapQuotes([[organizations]]))); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, ".minPointLength(%s)", wrapQuotes([[organizations]]))); js.setLength(0); } return this; }
[[[[Nl]]]]: Setter for the minimum point length


--------------------------------------------- Result 137 ---------------------------------------------
[[0 (-7228%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private CalculatedValue [[getDelta]](final double [[min]], final double [[next]], final double [[max]]) { final CalculatedValue [[calcVal]] = new CalculatedValue(); if ([[next]] <= [[min]] || [[max]] < [[next]]) { [[calcVal]].invalidate(CalculatedValue.ErrorType.NOT_A_NUMBER); } else { [[calcVal]].setValue([[next]] - [[min]]); } return [[calcVal]]; }
[[[[Nl]]]]: Procedure checks and returns delta value

[[[[Adv]]]]: private CalculatedValue [[mansell]](final double [[mikes]], final double [[close]], final double [[height]]) { final CalculatedValue [[emitter]] = new CalculatedValue(); if ([[close]] <= [[mikes]] || [[height]] < [[close]]) { [[emitter]].invalidate(CalculatedValue.ErrorType.NOT_A_NUMBER); } else { [[emitter]].setValue([[close]] - [[mikes]]); } return [[emitter]]; }
[[[[Nl]]]]: Procedure checks and returns delta value


--------------------------------------------- Result 138 ---------------------------------------------
[[0 (-5954%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static CastNotificationControl [[getOrCreate]](Context [[context]], @Nullable MediaRouteController [[mediaRouteController]]) { synchronized (LOCK) { if (sInstance == null) { sInstance = new CastNotificationControl([[context]]); } sInstance.setRouteController([[mediaRouteController]]); return sInstance; } }
[[[[Nl]]]]: Get the unique NotificationControl , creating it if necessary

[[[[Adv]]]]: public static CastNotificationControl [[swanning]](Context [[framing]], @Nullable MediaRouteController [[hearing]]) { synchronized (LOCK) { if (sInstance == null) { sInstance = new CastNotificationControl([[framing]]); } sInstance.setRouteController([[hearing]]); return sInstance; } }
[[[[Nl]]]]: Get the unique NotificationControl , creating it if necessary


--------------------------------------------- Result 139 ---------------------------------------------
[[0 (-7355%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private V [[getForNullKey]]() { for (Entry<K, V> [[e]] = table[0]; [[e]] != null; [[e]] = [[e]].next) { if ([[e]].key == null) return [[e]].value; } return null; }
[[[[Nl]]]]: Offloaded version of get ( ) to look up null keys

[[[[Adv]]]]: private V [[alphas]]() { for (Entry<K, V> [[grams]] = table[0]; [[grams]] != null; [[grams]] = [[grams]].next) { if ([[grams]].key == null) return [[grams]].value; } return null; }
[[[[Nl]]]]: Offloaded version of get ( ) to look up null keys


--------------------------------------------- Result 140 ---------------------------------------------
[[0 (-7303%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Error [[setXUpperError]](Number [[xUpperError1]]) { if (jsBase == null) { this.[[xUpperError]] = null; this.[[xUpperError1]] = null; this.[[xUpperError1]] = [[xUpperError1]]; } else { this.[[xUpperError1]] = [[xUpperError1]]; if (!isChain) { js.append(jsBase); isChain = "[[True]]" == "[[True]]"; } js.append(String.format(Locale.US, ".xUpperError(%s)", [[xUpperError1]])); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, jsBase + ".xUpperError(%s);", [[xUpperError1]])); js.setLength(0); } } return this; }
[[[[Nl]]]]: Setter for X upper error

[[[[Adv]]]]: public Error [[namaste]](Number [[activities]]) { if (jsBase == null) { this.[[entrepreneurial]] = null; this.[[step]] = null; this.[[step]] = [[activities]]; } else { this.[[step]] = [[activities]]; if (!isChain) { js.append(jsBase); isChain = "[["Staunch" == "Staunch"]]" == "[["Staunch" == "Staunch"]]"; } js.append(String.format(Locale.US, ".xUpperError(%s)", [[activities]])); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, jsBase + ".xUpperError(%s);", [[activities]])); js.setLength(0); } } return this; }
[[[[Nl]]]]: Setter for X upper error


--------------------------------------------- Result 141 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 141 / 0 / 141:  18%|█▊        | 141/785 [04:38<21:13,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 141 / 0 / 141:  18%|█▊        | 142/785 [04:39<21:05,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 142 / 0 / 142:  18%|█▊        | 142/785 [04:39<21:05,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 142 / 0 / 142:  18%|█▊        | 143/785 [04:40<20:59,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 143 / 0 / 143:  18%|█▊        | 143/785 [04:40<20:59,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 143 / 0 / 143:  18%|█▊        | 144/785 [04:41<20:51,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 144 / 0 / 144:  18%|█▊        | 144/785 [04:41<20:51,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 144 / 0 / 144:  18%|█▊        | 145/785 [04:42<20:47,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 145 / 0 / 145:  18%|█▊        | 145/785 [04:42<20:47,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 145 / 0 / 145:  19%|█▊        | 146/785 [04:43<20:39,  1.94s/it][Succeeded / Failed / Skipped / Total] 0 / 146 / 0 / 146:  19%|█▊        | 146/785 [04:43<20:39,  1.94s/it][Succeeded / Failed / Skipped / Total] 0 / 146 / 0 / 146:  19%|█▊        | 147/785 [04:46<20:41,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 147 / 0 / 147:  19%|█▊        | 147/785 [04:46<20:41,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 147 / 0 / 147:  19%|█▉        | 148/785 [04:47<20:38,  1.94s/it][Succeeded / Failed / Skipped / Total] 0 / 148 / 0 / 148:  19%|█▉        | 148/785 [04:47<20:38,  1.94s/it][Succeeded / Failed / Skipped / Total] 0 / 148 / 0 / 148:  19%|█▉        | 149/785 [04:50<20:38,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 149 / 0 / 149:  19%|█▉        | 149/785 [04:50<20:38,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 149 / 0 / 149:  19%|█▉        | 150/785 [04:52<20:40,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 150 / 0 / 150:  19%|█▉        | 150/785 [04:52<20:40,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 150 / 0 / 150:  19%|█▉        | 151/785 [04:55<20:41,  1.96s/it][[0 (-7328%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onSpringItemBind]](View [[item]], int [[position]]) { if (!mFirstViewInit && [[position]] > mLastPosition) { setAnimation([[item]], 0, tension - tension/4, fraction); mLastPosition = [[position]]; } }
[[[[Nl]]]]: onSpringyItemBind call in RecyclerView 's onBind for scroll effects @ param item itemView instance from RecyclerView 's onBind method @ param position from RecyclerView 's onBind method

[[[[Adv]]]]: public void [[reshape]](View [[dot]], int [[angle]]) { if (!mFirstViewInit && [[angle]] > mLastPosition) { setAnimation([[dot]], 0, tension - tension/4, fraction); mLastPosition = [[angle]]; } }
[[[[Nl]]]]: onSpringyItemBind call in RecyclerView 's onBind for scroll effects @ param item itemView instance from RecyclerView 's onBind method @ param position from RecyclerView 's onBind method


--------------------------------------------- Result 142 ---------------------------------------------
[[0 (-5535%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public IContentObserver [[getContentObserver]]() { synchronized (mLock) { if (mTransport == null) { mTransport = new Transport(this); } return mTransport; } }
[[[[Nl]]]]: Gets access to the binder transport object

[[[[Adv]]]]: public IContentObserver [[placerville]]() { synchronized (mLock) { if (mTransport == null) { mTransport = new Transport(this); } return mTransport; } }
[[[[Nl]]]]: Gets access to the binder transport object


--------------------------------------------- Result 143 ---------------------------------------------
[[0 (-8183%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[removeEventSourceListener]](EventSourceListener [[listener]]) { LOG.entering(CLASS_NAME, "removeEventSourceListener", [[listener]]); _getDelegate().removeEventSourceListener([[listener]]); }
[[[[Nl]]]]: Removes the given EventSource listener from the listener list

[[[[Adv]]]]: public void [[capitalization]](EventSourceListener [[headset]]) { LOG.entering(CLASS_NAME, "removeEventSourceListener", [[headset]]); _getDelegate().removeEventSourceListener([[headset]]); }
[[[[Nl]]]]: Removes the given EventSource listener from the listener list


--------------------------------------------- Result 144 ---------------------------------------------
[[0 (-8011%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public float [[fractionTraveled]]() { float [[fractionTraveled]] = 1; if (routeLeg().distance() > 0) { [[fractionTraveled]] = (float) (distanceTraveled() / routeLeg().distance()); if ([[fractionTraveled]] < 0) { [[fractionTraveled]] = 0; } } return [[fractionTraveled]]; }
[[[[Nl]]]]: Get the fraction traveled along the current leg , this is a float value between 0 and 1 and is n't guaranteed to reach 1 before the user reaches the next waypoint

[[[[Adv]]]]: public float [[bobbins]]() { float [[bobbins]] = 1; if (routeLeg().distance() > 0) { [[bobbins]] = (float) (distanceTraveled() / routeLeg().distance()); if ([[bobbins]] < 0) { [[bobbins]] = 0; } } return [[bobbins]]; }
[[[[Nl]]]]: Get the fraction traveled along the current leg , this is a float value between 0 and 1 and is n't guaranteed to reach 1 before the user reaches the next waypoint


--------------------------------------------- Result 145 ---------------------------------------------
[[0 (-7223%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Subscription [[withProtocol]](String [[protocol]]) { this.[[protocol]] = [[protocol]]; return this; }
[[[[Nl]]]]: < p > The subscription 's protocol

[[[[Adv]]]]: public Subscription [[drunker]](String [[affidavit]]) { this.[[debriefing]] = [[affidavit]]; return this; }
[[[[Nl]]]]: < p > The subscription 's protocol


--------------------------------------------- Result 146 ---------------------------------------------
[[0 (-7588%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String[] [[getReplyStrings]]() { return _replyLines.toArray(new String[_replyLines.size()]); }
[[[[Nl]]]]: Returns an array of lines received as a reply to the last command sent to the server

[[[[Adv]]]]: public String[] [[heatstroke]]() { return _replyLines.toArray(new String[_replyLines.size()]); }
[[[[Nl]]]]: Returns an array of lines received as a reply to the last command sent to the server


--------------------------------------------- Result 147 ---------------------------------------------
[[0 (-6850%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected int [[findNext]](final int [[pos]]) { int from = [[pos]]; if (from < -1) { return -1; } final int to = this.[[allHeaders]].size()-1; boolean [[found]] = "[[False]]" != "[[False]]"; while (![[found]] && (from < to)) { from++; [[found]] = filterHeader(from); } return [[found]] ? from : -1; }
[[[[Nl]]]]: Determines the index of the next header

[[[[Adv]]]]: protected int [[airship]](final int [[chyron]]) { int from = [[chyron]]; if (from < -1) { return -1; } final int to = this.[[showers]].size()-1; boolean [[observed]] = "[["Deceptive" != "Deceptive"]]" != "[["Deceptive" != "Deceptive"]]"; while (![[observed]] && (from < to)) { from++; [[observed]] = filterHeader(from); } return [[observed]] ? from : -1; }
[[[[Nl]]]]: Determines the index of the next header


--------------------------------------------- Result 148 ---------------------------------------------
[[0 (-6850%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[sendMessage]](String [[message]], ResponseListener<Object> [[listener]]) { if ([[listener]] != null) [[listener]].onError(ServiceCommandError.notSupported()); }
[[[[Nl]]]]: Sends a simple string to the web app

[[[[Adv]]]]: public void [[cancellations]](String [[contacts]], ResponseListener<Object> [[auditions]]) { if ([[auditions]] != null) [[auditions]].onError(ServiceCommandError.notSupported()); }
[[[[Nl]]]]: Sends a simple string to the web app


--------------------------------------------- Result 149 ---------------------------------------------
[[0 (-7684%)]] --> [[[FAILED]]]

[[[[Adv]]]]: final void [[savePlaybackInfo]](int [[position]], @NonNull PlaybackInfo [[playbackInfo]]) { ToroUtil.checkNotNull([[playbackInfo]]); if (hotCache != null) hotCache.put([[position]], [[playbackInfo]]); Object [[key]] = getKey([[position]]); if ([[key]] != null) coldCache.put([[key]], [[playbackInfo]]); }
[[[[Nl]]]]: Call by Container # savePlaybackInfo and that method is called right before any pausing

[[[[Adv]]]]: final void [[sharpen]](int [[angle]], @NonNull PlaybackInfo [[crotch]]) { ToroUtil.checkNotNull([[crotch]]); if (hotCache != null) hotCache.put([[angle]], [[crotch]]); Object [[hinge]] = getKey([[angle]]); if ([[hinge]] != null) coldCache.put([[hinge]], [[crotch]]); }
[[[[Nl]]]]: Call by Container # savePlaybackInfo and that method is called right before any pausing


--------------------------------------------- Result 150 ---------------------------------------------
[[0 (-4977%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isDownloadableFile]](String url) { int [[index]] = url.indexOf("?"); if ([[index]] > -1) { url = url.substring(0, [[index]]); } url = url.toLowerCase(); for (String [[type]] : WebAppConfig.DOWNLOAD_FILE_TYPES) { if (url.endsWith([[type]])) return "[[True]]" == "[[True]]"; } return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: Checks for MIME Types

[[[[Adv]]]]: public static boolean [[enlarger]](String url) { int [[gauges]] = url.indexOf("?"); if ([[gauges]] > -1) { url = url.substring(0, [[gauges]]); } url = url.toLowerCase(); for (String [[writes]] : WebAppConfig.DOWNLOAD_FILE_TYPES) { if (url.endsWith([[writes]])) return "[["Right" == "Right"]]" == "[["Right" == "Right"]]"; } return "[["Forges" != "Forges"]]" != "[["Forges" != "Forges"]]"; }
[[[[Nl]]]]: Checks for MIME Types


--------------------------------------------- Result 151 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 151 / 0 / 151:  19%|█▉        | 151/785 [04:55<20:41,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 151 / 0 / 151:  19%|█▉        | 152/785 [04:58<20:43,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 152 / 0 / 152:  19%|█▉        | 152/785 [04:58<20:43,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 152 / 0 / 152:  19%|█▉        | 153/785 [05:01<20:45,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 153 / 0 / 153:  19%|█▉        | 153/785 [05:01<20:45,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 153 / 0 / 153:  20%|█▉        | 154/785 [05:03<20:44,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 154 / 0 / 154:  20%|█▉        | 154/785 [05:03<20:44,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 154 / 0 / 154:  20%|█▉        | 155/785 [05:05<20:41,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 155 / 0 / 155:  20%|█▉        | 155/785 [05:05<20:41,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 155 / 0 / 155:  20%|█▉        | 156/785 [05:08<20:43,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 156 / 0 / 156:  20%|█▉        | 156/785 [05:08<20:43,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 156 / 0 / 156:  20%|██        | 157/785 [05:08<20:35,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 157 / 0 / 157:  20%|██        | 157/785 [05:08<20:35,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 157 / 0 / 157:  20%|██        | 158/785 [05:11<20:37,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 158 / 0 / 158:  20%|██        | 158/785 [05:11<20:37,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 158 / 0 / 158:  20%|██        | 159/785 [05:12<20:29,  1.96s/it][[0 (-7963%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[throwException]](@Nullable final String [[exceptionMessage]], @NonNull final Class<? extends RuntimeException> [[exceptionClass]]) { RuntimeException [[exception]]; try { Constructor<? extends RuntimeException> [[constructor]] = [[exceptionClass]].getConstructor(String.class); [[exception]] = [[constructor]].newInstance([[exceptionMessage]]); } catch (Exception e) { [[exception]] = new RuntimeException([[exceptionMessage]]); } throw [[exception]]; }
[[[[Nl]]]]: Throws a specific runtime exception

[[[[Adv]]]]: private static void [[monday]](@Nullable final String [[ornamentation]], @NonNull final Class<? extends RuntimeException> [[bearings]]) { RuntimeException [[franchises]]; try { Constructor<? extends RuntimeException> [[bringer]] = [[bearings]].getConstructor(String.class); [[franchises]] = [[bringer]].newInstance([[ornamentation]]); } catch (Exception e) { [[franchises]] = new RuntimeException([[ornamentation]]); } throw [[franchises]]; }
[[[[Nl]]]]: Throws a specific runtime exception


--------------------------------------------- Result 152 ---------------------------------------------
[[0 (-7137%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static ClassVisitor [[createClassMemberTester]](List [[memberSpecifications]], boolean [[isField]], ClassVisitor classVisitor) { if ([[memberSpecifications]] != null) { for (int [[index]] = 0; [[index]] < [[memberSpecifications]].size(); [[index]]++) { MemberSpecification [[memberSpecification]] = (MemberSpecification)[[memberSpecifications]].get([[index]]); classVisitor = createClassVisitor([[memberSpecification]], [[isField]], new MemberToClassVisitor(classVisitor)); } } return classVisitor; }
[[[[Nl]]]]: Constructs a ClassVisitor that conditionally applies the given ClassVisitor to all classes that contain the given List of class members ( of the given type )

[[[[Adv]]]]: private static ClassVisitor [[pussyhole]](List [[forsooth]], boolean [[sweater]], ClassVisitor classVisitor) { if ([[forsooth]] != null) { for (int [[signposts]] = 0; [[signposts]] < [[forsooth]].size(); [[signposts]]++) { MemberSpecification [[inconsistent]] = (MemberSpecification)[[forsooth]].get([[signposts]]); classVisitor = createClassVisitor([[inconsistent]], [[sweater]], new MemberToClassVisitor(classVisitor)); } } return classVisitor; }
[[[[Nl]]]]: Constructs a ClassVisitor that conditionally applies the given ClassVisitor to all classes that contain the given List of class members ( of the given type )


--------------------------------------------- Result 153 ---------------------------------------------
[[0 (-7479%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[compareTIN]](TIN [[expected]], TIN [[actual]], double [[delta]]) { compareBaseGeometryAttributes([[expected]], [[actual]]); TestCase.assertEquals([[expected]].numPolygons(), [[actual]].numPolygons()); for (int [[i]] = 0; [[i]] < [[expected]].numPolygons(); [[i]]++) { compareGeometries([[expected]].getPolygons().get([[i]]), [[actual]] .getPolygons().get([[i]]), [[delta]]); } }
[[[[Nl]]]]: Compare the two TINs for equality @ param expected @ param actual @ param delta

[[[[Adv]]]]: private static void [[sparkle]](TIN [[projected]], TIN [[immovable]], double [[triangle]]) { compareBaseGeometryAttributes([[projected]], [[immovable]]); TestCase.assertEquals([[projected]].numPolygons(), [[immovable]].numPolygons()); for (int [[siento]] = 0; [[siento]] < [[projected]].numPolygons(); [[siento]]++) { compareGeometries([[projected]].getPolygons().get([[siento]]), [[immovable]] .getPolygons().get([[siento]]), [[triangle]]); } }
[[[[Nl]]]]: Compare the two TINs for equality @ param expected @ param actual @ param delta


--------------------------------------------- Result 154 ---------------------------------------------
[[0 (-7629%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[save]]() { List<Integer> [[list]] = new ArrayList<>(cards.length); for (Card [[card]] : cards) { int [[state]] = [[card]].isUp ? STATE_FACED_UP : STATE_FACED_DOWN; if ([[card]].isInvisible){ [[state]] = STATE_INVISBLE; } [[list]].add([[state]]); } prefs.saveCards([[list]]); }
[[[[Nl]]]]: Save the card direction ( updown ) as a string list

[[[[Adv]]]]: public static void [[economize]]() { List<Integer> [[inventories]] = new ArrayList<>(cards.length); for (Card [[sketchbook]] : cards) { int [[statehood]] = [[sketchbook]].isUp ? STATE_FACED_UP : STATE_FACED_DOWN; if ([[sketchbook]].isInvisible){ [[statehood]] = STATE_INVISBLE; } [[inventories]].add([[statehood]]); } prefs.saveCards([[inventories]]); }
[[[[Nl]]]]: Save the card direction ( updown ) as a string list


--------------------------------------------- Result 155 ---------------------------------------------
[[0 (-6344%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public EventBuilder [[withExtra]](String [[extraName]], Object [[extraValue]]) { event.getExtra().put([[extraName]], [[extraValue]]); return this; }
[[[[Nl]]]]: Adds an extra property to the event

[[[[Adv]]]]: public EventBuilder [[coleslaw]](String [[countermeasures]], Object [[pressing]]) { event.getExtra().put([[countermeasures]], [[pressing]]); return this; }
[[[[Nl]]]]: Adds an extra property to the event


--------------------------------------------- Result 156 ---------------------------------------------
[[0 (-7363%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[generateNewProject]](String [[fileName]]) throws Exception { FileReader [[configurationFile]] = new FileReader([[fileName]]); ProjectConfiguration [[project]] = FileUtils.validateConfigurationFile([[configurationFile]]); String [[template]] = [[project]].getTemplate(); if (TextUtils.isEmpty([[template]])) { System.out.println("Invalid template"); return; } System.out.println("Generating new project..."); if (TextUtils.isValidURL([[template]])) { downloadTemplate([[project]]); } else { accessLocalFile([[project]]); } }
[[[[Nl]]]]: Generate a new project based on a configuration file

[[[[Adv]]]]: private static void [[lon]](String [[emin]]) throws Exception { FileReader [[aerodynamics]] = new FileReader([[emin]]); ProjectConfiguration [[motion]] = FileUtils.validateConfigurationFile([[aerodynamics]]); String [[paradigm]] = [[motion]].getTemplate(); if (TextUtils.isEmpty([[paradigm]])) { System.out.println("Invalid template"); return; } System.out.println("Generating new project..."); if (TextUtils.isValidURL([[paradigm]])) { downloadTemplate([[motion]]); } else { accessLocalFile([[motion]]); } }
[[[[Nl]]]]: Generate a new project based on a configuration file


--------------------------------------------- Result 157 ---------------------------------------------
[[0 (-7159%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getPassivePort]]() { return __passivePort; }
[[[[Nl]]]]: If in passive mode , returns the data port of the passive host

[[[[Adv]]]]: public int [[albanians]]() { return __passivePort; }
[[[[Nl]]]]: If in passive mode , returns the data port of the passive host


--------------------------------------------- Result 158 ---------------------------------------------
[[0 (-8282%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[replyToMessage]](Message [[srcMsg]], int [[what]], int [[arg1]], int [[arg2]]) { Message msg = Message.obtain(); msg.what = [[what]]; msg.arg1 = [[arg1]]; msg.arg2 = [[arg2]]; [[replyToMessage]]([[srcMsg]], msg); }
[[[[Nl]]]]: Reply to srcMsg @ param srcMsg @ param what @ param arg1 @ param arg2

[[[[Adv]]]]: public void [[keefe]](Message [[aeroplanes]], int [[ec]], int [[acetone]], int [[compare]]) { Message msg = Message.obtain(); msg.what = [[ec]]; msg.arg1 = [[acetone]]; msg.arg2 = [[compare]]; [[keefe]]([[aeroplanes]], msg); }
[[[[Nl]]]]: Reply to srcMsg @ param srcMsg @ param what @ param arg1 @ param arg2


--------------------------------------------- Result 159 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 159 / 0 / 159:  20%|██        | 159/785 [05:12<20:29,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 159 / 0 / 159:  20%|██        | 160/785 [05:14<20:26,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 160 / 0 / 160:  20%|██        | 160/785 [05:14<20:26,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 160 / 0 / 160:  21%|██        | 161/785 [05:15<20:23,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 161 / 0 / 161:  21%|██        | 161/785 [05:15<20:23,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 161 / 0 / 161:  21%|██        | 162/785 [05:17<20:20,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 162 / 0 / 162:  21%|██        | 162/785 [05:17<20:20,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 162 / 0 / 162:  21%|██        | 163/785 [05:18<20:15,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 163 / 0 / 163:  21%|██        | 163/785 [05:18<20:15,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 163 / 0 / 163:  21%|██        | 164/785 [05:21<20:17,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 164 / 0 / 164:  21%|██        | 164/785 [05:21<20:17,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 164 / 0 / 164:  21%|██        | 165/785 [05:23<20:16,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 165 / 0 / 165:  21%|██        | 165/785 [05:23<20:16,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 165 / 0 / 165:  21%|██        | 166/785 [05:26<20:17,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 166 / 0 / 166:  21%|██        | 166/785 [05:26<20:17,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 166 / 0 / 166:  21%|██▏       | 167/785 [05:29<20:18,  1.97s/it][[0 (-7722%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public CoreAxesLinear [[getXAxis]]() { if ([[getXAxis]] == null) [[getXAxis]] = new CoreAxesLinear(jsBase + ".xAxis()"); return [[getXAxis]]; }
[[[[Nl]]]]: Getter for the current chart X-axis

[[[[Adv]]]]: public CoreAxesLinear [[wearing]]() { if ([[wearing]] == null) [[wearing]] = new CoreAxesLinear(jsBase + ".xAxis()"); return [[wearing]]; }
[[[[Nl]]]]: Getter for the current chart X-axis


--------------------------------------------- Result 160 ---------------------------------------------
[[0 (-7841%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[formatWaypointNames]](String[] [[waypointNames]]) { for (int [[i]] = 0; [[i]] < [[waypointNames]].length; [[i]]++) { if ([[waypointNames]][[[i]]] == null) { [[waypointNames]][[[i]]] = ""; } } return TextUtils.join(";", [[waypointNames]]); }
[[[[Nl]]]]: Converts String array with waypoint_names values to a string ready for API consumption

[[[[Adv]]]]: public static String [[focus]](String[] [[confesses]]) { for (int [[y]] = 0; [[y]] < [[confesses]].length; [[y]]++) { if ([[confesses]][[[y]]] == null) { [[confesses]][[[y]]] = ""; } } return TextUtils.join(";", [[confesses]]); }
[[[[Nl]]]]: Converts String array with waypoint_names values to a string ready for API consumption


--------------------------------------------- Result 161 ---------------------------------------------
[[0 (-7865%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public RxGalleryFinal [[cropWithAspectRatio]](float [[x]], float [[y]]) { configuration.setAspectRatioX([[x]]); configuration.setAspectRatioY([[y]]); return this; }
[[[[Nl]]]]: Set an aspect ratio for crop bounds

[[[[Adv]]]]: public RxGalleryFinal [[ballantine]](float [[umpteenth]], float [[doyou]]) { configuration.setAspectRatioX([[umpteenth]]); configuration.setAspectRatioY([[doyou]]); return this; }
[[[[Nl]]]]: Set an aspect ratio for crop bounds


--------------------------------------------- Result 162 ---------------------------------------------
[[0 (-5629%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final int [[addOverlayPath]](String [[idmapPath]]) { synchronized (this) { int [[res]] = addOverlayPathNative([[idmapPath]]); makeStringBlocks(mStringBlocks); return [[res]]; } }
[[[[Nl]]]]: Add a set of assets to overlay an already added set of assets

[[[[Adv]]]]: public final int [[stillwater]](String [[quesadilla]]) { synchronized (this) { int [[truth]] = addOverlayPathNative([[quesadilla]]); makeStringBlocks(mStringBlocks); return [[truth]]; } }
[[[[Nl]]]]: Add a set of assets to overlay an already added set of assets


--------------------------------------------- Result 163 ---------------------------------------------
[[0 (-7194%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[addPrimitiveArrayConstant]](Object [[values]]) { return addConstant(new PrimitiveArrayConstant([[values]])); }
[[[[Nl]]]]: Finds or creates a PrimitiveArrayConstant constant pool entry with the given values

[[[[Adv]]]]: public int [[klicks]](Object [[volume]]) { return addConstant(new PrimitiveArrayConstant([[volume]])); }
[[[[Nl]]]]: Finds or creates a PrimitiveArrayConstant constant pool entry with the given values


--------------------------------------------- Result 164 ---------------------------------------------
[[0 (-6376%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private Collection<String> [[getItemsToCopy]](String path) throws IOException { Collection<String> [[items]] = new ArrayList<>(); Queue<String> [[queue]] = new ArrayDeque<>(); [[queue]].offer(path); while (![[queue]].isEmpty()) { path = [[queue]].poll(); String[] [[list]] = mAssetManager.list(path); for (String [[nested]] : [[list]]) { if (!"".equals(path)) { [[queue]].offer(path + "/" + [[nested]]); } else { [[queue]].offer([[nested]]); } } if ([[list]].length == 0) { Timber.i("adding %s", path); [[items]].add(path); } } return [[items]]; }
[[[[Nl]]]]: In case you want to create more smart sync implementation , this method returns the list of items which must be synchronized

[[[[Adv]]]]: private Collection<String> [[pomade]](String path) throws IOException { Collection<String> [[questions]] = new ArrayList<>(); Queue<String> [[bees]] = new ArrayDeque<>(); [[bees]].offer(path); while (![[bees]].isEmpty()) { path = [[bees]].poll(); String[] [[inscription]] = mAssetManager.list(path); for (String [[discretely]] : [[inscription]]) { if (!"".equals(path)) { [[bees]].offer(path + "/" + [[discretely]]); } else { [[bees]].offer([[discretely]]); } } if ([[inscription]].length == 0) { Timber.i("adding %s", path); [[questions]].add(path); } } return [[questions]]; }
[[[[Nl]]]]: In case you want to create more smart sync implementation , this method returns the list of items which must be synchronized


--------------------------------------------- Result 165 ---------------------------------------------
[[0 (-6793%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[unify]](IntSet [[s]]) throws IllegalArgumentException { if ([[s]] == null) { throw new IllegalArgumentException("s is null"); } if ([[s]].size() <= 1) { throw new IllegalArgumentException("Can't unify set of size " + [[s]].size()); } IntIterator [[it]] = [[s]].intIterator(); int [[i]] = [[it]].next(); while ([[it]].hasNext()) { [[unify]]([[i]], [[it]].next()); } }
[[[[Nl]]]]: Unify the points-to-sets for the variables identified by the set s @ param s numbers of points-to-set variables @ throws IllegalArgumentException if s is null

[[[[Adv]]]]: public void [[sameness]](IntSet [[seconds]]) throws IllegalArgumentException { if ([[seconds]] == null) { throw new IllegalArgumentException("s is null"); } if ([[seconds]].size() <= 1) { throw new IllegalArgumentException("Can't unify set of size " + [[seconds]].size()); } IntIterator [[algo]] = [[seconds]].intIterator(); int [[did]] = [[algo]].next(); while ([[algo]].hasNext()) { [[sameness]]([[did]], [[algo]].next()); } }
[[[[Nl]]]]: Unify the points-to-sets for the variables identified by the set s @ param s numbers of points-to-set variables @ throws IllegalArgumentException if s is null


--------------------------------------------- Result 166 ---------------------------------------------
[[0 (-7036%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[getUserApps]](HashSet<String> [[outExistingApps]]) { Set<String> [[userApps]] = mPrefs.getStringSet(mPackageSetKey, null); if ([[userApps]] == null) { return "[[False]]" != "[[False]]"; } else { [[outExistingApps]].addAll([[userApps]]); return "[[True]]" == "[[True]]"; } }
[[[[Nl]]]]: Reads the list of user apps which have already been processed

[[[[Adv]]]]: private boolean [[devalued]](HashSet<String> [[nightshade]]) { Set<String> [[nibbles]] = mPrefs.getStringSet(mPackageSetKey, null); if ([[nibbles]] == null) { return "[["Hypocrite" != "Hypocrite"]]" != "[["Hypocrite" != "Hypocrite"]]"; } else { [[nightshade]].addAll([[nibbles]]); return "[["Precision" == "Precision"]]" == "[["Precision" == "Precision"]]"; } }
[[[[Nl]]]]: Reads the list of user apps which have already been processed


--------------------------------------------- Result 167 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 167 / 0 / 167:  21%|██▏       | 167/785 [05:29<20:18,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 167 / 0 / 167:  21%|██▏       | 168/785 [05:31<20:15,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 168 / 0 / 168:  21%|██▏       | 168/785 [05:31<20:15,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 168 / 0 / 168:  22%|██▏       | 169/785 [05:33<20:16,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 169 / 0 / 169:  22%|██▏       | 169/785 [05:33<20:16,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 169 / 0 / 169:  22%|██▏       | 170/785 [05:35<20:13,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 170 / 0 / 170:  22%|██▏       | 170/785 [05:35<20:13,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 170 / 0 / 170:  22%|██▏       | 171/785 [05:37<20:10,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 171 / 0 / 171:  22%|██▏       | 171/785 [05:37<20:10,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 171 / 0 / 171:  22%|██▏       | 172/785 [05:39<20:09,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 172 / 0 / 172:  22%|██▏       | 172/785 [05:39<20:09,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 172 / 0 / 172:  22%|██▏       | 173/785 [05:41<20:06,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 173 / 0 / 173:  22%|██▏       | 173/785 [05:41<20:06,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 173 / 0 / 173:  22%|██▏       | 174/785 [05:44<20:08,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 174 / 0 / 174:  22%|██▏       | 174/785 [05:44<20:08,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 174 / 0 / 174:  22%|██▏       | 175/785 [05:45<20:05,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 175 / 0 / 175:  22%|██▏       | 175/785 [05:45<20:05,  1.98s/it][Succeeded / Failed / Skipped / Total] 0 / 175 / 0 / 175:  22%|██▏       | 176/785 [05:47<20:02,  1.97s/it][[0 (-6545%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[parseNodes]](List<OverlayItems> [[names]], Element [[section]]) { for (Node [[n]] = [[section]].getFirstChild(); [[n]] != null; [[n]] = [[n]].getNextSibling()) { if ([[n]].getNodeType() == Node.ELEMENT_NODE) { Element [[e]] = (Element) [[n]]; if ([[e]].hasAttribute("id")) { [[names]].add(new OverlayItems([[e]].getAttribute("id"), [[e]].getTagName())); } else { [[parseNodes]]([[names]], [[e]]); } } } }
[[[[Nl]]]]: [ RECURSIVE ] Function recursively finds and parses the child elements of the input DOM element

[[[[Adv]]]]: private static void [[geographic]](List<OverlayItems> [[appointments]], Element [[parties]]) { for (Node [[nor]] = [[parties]].getFirstChild(); [[nor]] != null; [[nor]] = [[nor]].getNextSibling()) { if ([[nor]].getNodeType() == Node.ELEMENT_NODE) { Element [[d]] = (Element) [[nor]]; if ([[d]].hasAttribute("id")) { [[appointments]].add(new OverlayItems([[d]].getAttribute("id"), [[d]].getTagName())); } else { [[geographic]]([[appointments]], [[d]]); } } } }
[[[[Nl]]]]: [ RECURSIVE ] Function recursively finds and parses the child elements of the input DOM element


--------------------------------------------- Result 168 ---------------------------------------------
[[0 (-7609%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static UpdateOptions [[updateOptions]](boolean [[upsert]]) { UpdateOptions [[options]] = new UpdateOptions(); [[options]].setUpsert([[upsert]]); return [[options]]; }
[[[[Nl]]]]: Creates a new { @ link UpdateOptions }

[[[[Adv]]]]: public static UpdateOptions [[uninvolved]](boolean [[swimsuit]]) { UpdateOptions [[solutions]] = new UpdateOptions(); [[solutions]].setUpsert([[swimsuit]]); return [[solutions]]; }
[[[[Nl]]]]: Creates a new { @ link UpdateOptions }


--------------------------------------------- Result 169 ---------------------------------------------
[[0 (-7937%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isSystemBarOnBottom]](Context [[ctx]]) { WindowManager [[wm]] = (WindowManager) [[ctx]].getSystemService(Context.WINDOW_SERVICE); DisplayMetrics [[metrics]] = new DisplayMetrics(); [[wm]].getDefaultDisplay().getMetrics([[metrics]]); Configuration [[cfg]] = [[ctx]].getResources().getConfiguration(); boolean canMove = ([[metrics]].widthPixels != [[metrics]].heightPixels && [[cfg]].smallestScreenWidthDp < 600); return (!canMove || [[metrics]].widthPixels < [[metrics]].heightPixels); }
[[[[Nl]]]]: helper to check if the system bar is on the bottom of the screen @ param ctx @ return

[[[[Adv]]]]: public static boolean [[anesthetic]](Context [[destructor]]) { WindowManager [[aspersions]] = (WindowManager) [[destructor]].getSystemService(Context.WINDOW_SERVICE); DisplayMetrics [[wrinkles]] = new DisplayMetrics(); [[aspersions]].getDefaultDisplay().getMetrics([[wrinkles]]); Configuration [[shinbone]] = [[destructor]].getResources().getConfiguration(); boolean canMove = ([[wrinkles]].widthPixels != [[wrinkles]].heightPixels && [[shinbone]].smallestScreenWidthDp < 600); return (!canMove || [[wrinkles]].widthPixels < [[wrinkles]].heightPixels); }
[[[[Nl]]]]: helper to check if the system bar is on the bottom of the screen @ param ctx @ return


--------------------------------------------- Result 170 ---------------------------------------------
[[0 (-7502%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setAAPublicKey]](PublicKey [[aaPublicKey]]) { DG15File [[dg15file]] = new DG15File([[aaPublicKey]]); putFile(PassportService.EF_DG15, [[dg15file]].getEncoded()); }
[[[[Nl]]]]: Sets the public key for AA

[[[[Adv]]]]: public void [[memberships]](PublicKey [[hummus]]) { DG15File [[drummer]] = new DG15File([[hummus]]); putFile(PassportService.EF_DG15, [[drummer]].getEncoded()); }
[[[[Nl]]]]: Sets the public key for AA


--------------------------------------------- Result 171 ---------------------------------------------
[[0 (-7921%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[execSQL]](String [[sql]], Object[] [[bindArgs]]) throws SQLException { if ([[bindArgs]] == null) { throw new IllegalArgumentException("Empty bindArgs"); } executeSql([[sql]], [[bindArgs]]); }
[[[[Nl]]]]: Execute a single SQL statement that is NOT a SELECTINSERTUPDATEDELETE

[[[[Adv]]]]: public void [[serendipity]](String [[worsening]], Object[] [[celsius]]) throws SQLException { if ([[celsius]] == null) { throw new IllegalArgumentException("Empty bindArgs"); } executeSql([[worsening]], [[celsius]]); }
[[[[Nl]]]]: Execute a single SQL statement that is NOT a SELECTINSERTUPDATEDELETE


--------------------------------------------- Result 172 ---------------------------------------------
[[0 (-8208%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public List<Server> [[getServers]]() { List<Server> [[servers]] = new ArrayList<>(this.[[servers]].size()); for (int [[i]] = 0; [[i]] < this.[[servers]].size(); [[i]]++) { [[servers]].add(this.[[servers]].valueAt([[i]])); } return [[servers]]; }
[[[[Nl]]]]: Get list of servers @ return list of servers

[[[[Adv]]]]: public List<Server> [[unhurt]]() { List<Server> [[staffing]] = new ArrayList<>(this.[[workers]].size()); for (int [[did]] = 0; [[did]] < this.[[workers]].size(); [[did]]++) { [[staffing]].add(this.[[workers]].valueAt([[did]])); } return [[staffing]]; }
[[[[Nl]]]]: Get list of servers @ return list of servers


--------------------------------------------- Result 173 ---------------------------------------------
[[0 (-7571%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public ListUserPoolClientsRequest [[withUserPoolId]](String [[userPoolId]]) { this.[[userPoolId]] = [[userPoolId]]; return this; }
[[[[Nl]]]]: < p > The user pool ID for the user pool where you want to list user pool clients

[[[[Adv]]]]: public ListUserPoolClientsRequest [[uninhabitable]](String [[branching]]) { this.[[eeps]] = [[branching]]; return this; }
[[[[Nl]]]]: < p > The user pool ID for the user pool where you want to list user pool clients


--------------------------------------------- Result 174 ---------------------------------------------
[[0 (-6700%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static boolean [[isPlaintext]](Buffer buffer) { try { Buffer prefix = new Buffer(); long [[byteCount]] = buffer.size() < 64 ? buffer.size() : 64; buffer.copyTo(prefix, 0, [[byteCount]]); for (int [[i]] = 0; [[i]] < 16; [[i]]++) { if (prefix.exhausted()) { break; } int codePoint = prefix.readUtf8CodePoint(); if (Character.isISOControl(codePoint) && !Character.isWhitespace(codePoint)) { return "[[False]]" != "[[False]]"; } } return "[[True]]" == "[[True]]"; } catch (EOFException e) { return "[[False]]" != "[[False]]"; } }
[[[[Nl]]]]: Returns true if the body in question probably contains human readable text

[[[[Adv]]]]: static boolean [[arachnids]](Buffer buffer) { try { Buffer prefix = new Buffer(); long [[weightlifting]] = buffer.size() < 64 ? buffer.size() : 64; buffer.copyTo(prefix, 0, [[weightlifting]]); for (int [[ai]] = 0; [[ai]] < 16; [[ai]]++) { if (prefix.exhausted()) { break; } int codePoint = prefix.readUtf8CodePoint(); if (Character.isISOControl(codePoint) && !Character.isWhitespace(codePoint)) { return "[["Forges" != "Forges"]]" != "[["Forges" != "Forges"]]"; } } return "[["Realistic" == "Realistic"]]" == "[["Realistic" == "Realistic"]]"; } catch (EOFException e) { return "[["Forges" != "Forges"]]" != "[["Forges" != "Forges"]]"; } }
[[[[Nl]]]]: Returns true if the body in question probably contains human readable text


--------------------------------------------- Result 175 ---------------------------------------------
[[0 (-6998%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public SnapshotDiskContainer [[withDescription]](String [[description]]) { this.[[description]] = [[description]]; return this; }
[[[[Nl]]]]: The description of the disk image being imported

[[[[Adv]]]]: public SnapshotDiskContainer [[burners]](String [[profiles]]) { this.[[profiling]] = [[profiles]]; return this; }
[[[[Nl]]]]: The description of the disk image being imported


--------------------------------------------- Result 176 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 176 / 0 / 176:  22%|██▏       | 176/785 [05:47<20:02,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 176 / 0 / 176:  23%|██▎       | 177/785 [05:48<19:57,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 177 / 0 / 177:  23%|██▎       | 177/785 [05:48<19:57,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 177 / 0 / 177:  23%|██▎       | 178/785 [05:50<19:54,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 178 / 0 / 178:  23%|██▎       | 178/785 [05:50<19:54,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 178 / 0 / 178:  23%|██▎       | 179/785 [05:53<19:56,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 179 / 0 / 179:  23%|██▎       | 179/785 [05:53<19:56,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 179 / 0 / 179:  23%|██▎       | 180/785 [05:54<19:52,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 180 / 0 / 180:  23%|██▎       | 180/785 [05:54<19:52,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 180 / 0 / 180:  23%|██▎       | 181/785 [05:55<19:45,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 181 / 0 / 181:  23%|██▎       | 181/785 [05:55<19:45,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 181 / 0 / 181:  23%|██▎       | 182/785 [05:57<19:42,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 182 / 0 / 182:  23%|██▎       | 182/785 [05:57<19:42,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 182 / 0 / 182:  23%|██▎       | 183/785 [05:59<19:44,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 183 / 0 / 183:  23%|██▎       | 183/785 [05:59<19:44,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 183 / 0 / 183:  23%|██▎       | 184/785 [06:00<19:37,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 184 / 0 / 184:  23%|██▎       | 184/785 [06:00<19:37,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 184 / 0 / 184:  24%|██▎       | 185/785 [06:02<19:36,  1.96s/it][[0 (-7126%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static WifiManager [[getWifiManager]](Context [[context]]) { if ([[context]] == null) return null; WifiManager [[wifiManager]] = null; [[wifiManager]] = (WifiManager) [[context]].getSystemService(Context.WIFI_SERVICE); return [[wifiManager]]; }
[[[[Nl]]]]: wifi 's state can change so everytime calling this method we must get a new WifiManager @ param context @ return

[[[[Adv]]]]: public static WifiManager [[doodads]](Context [[meanings]]) { if ([[meanings]] == null) return null; WifiManager [[stretching]] = null; [[stretching]] = (WifiManager) [[meanings]].getSystemService(Context.WIFI_SERVICE); return [[stretching]]; }
[[[[Nl]]]]: wifi 's state can change so everytime calling this method we must get a new WifiManager @ param context @ return


--------------------------------------------- Result 177 ---------------------------------------------
[[0 (-7458%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[giveMap]](@NonNull HomePresenterImpl [[impl]]) { [[impl]].onMapAvailable(mMapApiMock); }
[[[[Nl]]]]: Give a ready to be used map to the given presenter @ param impl the presenter

[[[[Adv]]]]: private void [[goal]](@NonNull HomePresenterImpl [[canceled]]) { [[canceled]].onMapAvailable(mMapApiMock); }
[[[[Nl]]]]: Give a ready to be used map to the given presenter @ param impl the presenter


--------------------------------------------- Result 178 ---------------------------------------------
[[0 (-7421%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static InvalidationService [[getForProfile]](Profile [[profile]]) { ThreadUtils.assertOnUiThread(); InvalidationService [[service]] = sServiceMap.get([[profile]]); if ([[service]] == null) { [[service]] = nativeGetForProfile([[profile]]); sServiceMap.put([[profile]], [[service]]); } return [[service]]; }
[[[[Nl]]]]: Returns Java InvalidationService for the given Profile

[[[[Adv]]]]: public static InvalidationService [[showw]](Profile [[panorama]]) { ThreadUtils.assertOnUiThread(); InvalidationService [[ministries]] = sServiceMap.get([[panorama]]); if ([[ministries]] == null) { [[ministries]] = nativeGetForProfile([[panorama]]); sServiceMap.put([[panorama]], [[ministries]]); } return [[ministries]]; }
[[[[Nl]]]]: Returns Java InvalidationService for the given Profile


--------------------------------------------- Result 179 ---------------------------------------------
[[0 (-8276%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[calcOpticalFlowPyrLK]](Mat prevImg, Mat nextImg, MatOfPoint2f prevPts, MatOfPoint2f nextPts, MatOfByte [[status]], MatOfFloat [[err]], Size [[winSize]], int [[maxLevel]]) { Mat prevPts_mat = prevPts; Mat nextPts_mat = nextPts; Mat status_mat = [[status]]; Mat err_mat = [[err]]; calcOpticalFlowPyrLK_1(prevImg.nativeObj, nextImg.nativeObj, prevPts_mat.nativeObj, nextPts_mat.nativeObj, status_mat.nativeObj, err_mat.nativeObj, [[winSize]].width, [[winSize]].height, [[maxLevel]]); return; }
[[[[Nl]]]]: javadoc : calcOpticalFlowPyrLK ( prevImg , nextImg , prevPts , nextPts , status , err , winSize , maxLevel )

[[[[Adv]]]]: public static void [[unaccustomed]](Mat prevImg, Mat nextImg, MatOfPoint2f prevPts, MatOfPoint2f nextPts, MatOfByte [[disease]], MatOfFloat [[mistakes]], Size [[childcare]], int [[abuse]]) { Mat prevPts_mat = prevPts; Mat nextPts_mat = nextPts; Mat status_mat = [[disease]]; Mat err_mat = [[mistakes]]; calcOpticalFlowPyrLK_1(prevImg.nativeObj, nextImg.nativeObj, prevPts_mat.nativeObj, nextPts_mat.nativeObj, status_mat.nativeObj, err_mat.nativeObj, [[childcare]].width, [[childcare]].height, [[abuse]]); return; }
[[[[Nl]]]]: javadoc : calcOpticalFlowPyrLK ( prevImg , nextImg , prevPts , nextPts , status , err , winSize , maxLevel )


--------------------------------------------- Result 180 ---------------------------------------------
[[0 (-7145%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public GetObjectRequest [[withUnmodifiedSinceConstraint]](Date [[date]]) { setUnmodifiedSinceConstraint([[date]]); return this; }
[[[[Nl]]]]: Sets the optional unmodified constraint that restricts this request to executing only if the object has < b > not < b > been modified after the specified date

[[[[Adv]]]]: public GetObjectRequest [[wiggles]](Date [[swingers]]) { setUnmodifiedSinceConstraint([[swingers]]); return this; }
[[[[Nl]]]]: Sets the optional unmodified constraint that restricts this request to executing only if the object has < b > not < b > been modified after the specified date


--------------------------------------------- Result 181 ---------------------------------------------
[[0 (-8399%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public long [[getWidth]]() { return width; }
[[[[Nl]]]]: Returns the width

[[[[Adv]]]]: public long [[spurting]]() { return width; }
[[[[Nl]]]]: Returns the width


--------------------------------------------- Result 182 ---------------------------------------------
[[0 (-7100%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public SamplingTimer [[getScreenOffRpmTimerLocked]](String [[name]]) { SamplingTimer [[rpmt]] = mScreenOffRpmStats.get([[name]]); if ([[rpmt]] == null) { [[rpmt]] = new SamplingTimer(mClocks, mOnBatteryScreenOffTimeBase); mScreenOffRpmStats.put([[name]], [[rpmt]]); } return [[rpmt]]; }
[[[[Nl]]]]: Get Screen-off Resource Power Manager stats

[[[[Adv]]]]: public SamplingTimer [[shagged]](String [[appointments]]) { SamplingTimer [[awakes]] = mScreenOffRpmStats.get([[appointments]]); if ([[awakes]] == null) { [[awakes]] = new SamplingTimer(mClocks, mOnBatteryScreenOffTimeBase); mScreenOffRpmStats.put([[appointments]], [[awakes]]); } return [[awakes]]; }
[[[[Nl]]]]: Get Screen-off Resource Power Manager stats


--------------------------------------------- Result 183 ---------------------------------------------
[[0 (-7235%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onGestureDetectionActiveChanged]](boolean [[active]]) { final ArrayMap<FingerprintGestureCallback, Handler> [[handlerMap]]; synchronized (mLock) { [[handlerMap]] = new ArrayMap<>(mCallbackHandlerMap); } int numListeners = [[handlerMap]].size(); for (int i = 0; i < numListeners; i++) { FingerprintGestureCallback [[callback]] = [[handlerMap]].keyAt(i); Handler [[handler]] = [[handlerMap]].valueAt(i); if ([[handler]] != null) { [[handler]].post(() -> [[callback]].onGestureDetectionAvailabilityChanged([[active]])); } else { [[callback]].onGestureDetectionAvailabilityChanged([[active]]); } } }
[[[[Nl]]]]: Called when gesture detection becomes active or inactive @ hide

[[[[Adv]]]]: public void [[puedes]](boolean [[favorably]]) { final ArrayMap<FingerprintGestureCallback, Handler> [[rebate]]; synchronized (mLock) { [[rebate]] = new ArrayMap<>(mCallbackHandlerMap); } int numListeners = [[rebate]].size(); for (int i = 0; i < numListeners; i++) { FingerprintGestureCallback [[paging]] = [[rebate]].keyAt(i); Handler [[bearer]] = [[rebate]].valueAt(i); if ([[bearer]] != null) { [[bearer]].post(() -> [[paging]].onGestureDetectionAvailabilityChanged([[favorably]])); } else { [[paging]].onGestureDetectionAvailabilityChanged([[favorably]]); } } }
[[[[Nl]]]]: Called when gesture detection becomes active or inactive @ hide


--------------------------------------------- Result 184 ---------------------------------------------
[[0 (-6480%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public <T> [[Noodle]] registerType(final Class<T> type, final Description<T> description) { descriptionHashMap.put(type.getCanonicalName(), description); return this; }
[[[[Nl]]]]: Registers the type of objects which can be stored in this Noodle storage

[[[[Adv]]]]: public <T> [[Sandwiches]] registerType(final Class<T> type, final Description<T> description) { descriptionHashMap.put(type.getCanonicalName(), description); return this; }
[[[[Nl]]]]: Registers the type of objects which can be stored in this Noodle storage


--------------------------------------------- Result 185 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 185 / 0 / 185:  24%|██▎       | 185/785 [06:02<19:36,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 185 / 0 / 185:  24%|██▎       | 186/785 [06:03<19:32,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 186 / 0 / 186:  24%|██▎       | 186/785 [06:03<19:32,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 186 / 0 / 186:  24%|██▍       | 187/785 [06:05<19:29,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 187 / 0 / 187:  24%|██▍       | 187/785 [06:05<19:29,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 187 / 0 / 187:  24%|██▍       | 188/785 [06:08<19:30,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 188 / 0 / 188:  24%|██▍       | 188/785 [06:08<19:30,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 188 / 0 / 188:  24%|██▍       | 189/785 [06:11<19:31,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 189 / 0 / 189:  24%|██▍       | 189/785 [06:11<19:31,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 189 / 0 / 189:  24%|██▍       | 190/785 [06:14<19:31,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 190 / 0 / 190:  24%|██▍       | 190/785 [06:14<19:31,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 190 / 0 / 190:  24%|██▍       | 191/785 [06:17<19:32,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 191 / 0 / 191:  24%|██▍       | 191/785 [06:17<19:32,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 191 / 0 / 191:  24%|██▍       | 192/785 [06:18<19:28,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 192 / 0 / 192:  24%|██▍       | 192/785 [06:18<19:28,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 192 / 0 / 192:  25%|██▍       | 193/785 [06:21<19:28,  1.97s/it][[0 (-6746%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public SSAInstruction[] [[getStatements]]() { SSAInstruction[] [[ret]] = new SSAInstruction[this.[[instructions]].size()]; [[ret]] = this.[[instructions]].toArray([[ret]]); for (int [[i]]=0; [[i]]<[[ret]].length; ++[[i]]) { if ([[ret]][[[i]]].equals(RESERVED)) { [[ret]][[[i]]] = null; } } return [[ret]]; }
[[[[Nl]]]]: Get all statements added to the Summary

[[[[Adv]]]]: public SSAInstruction[] [[undersigned]]() { SSAInstruction[] [[withdraws]] = new SSAInstruction[this.[[direction]].size()]; [[withdraws]] = this.[[direction]].toArray([[withdraws]]); for (int [[hmm]]=0; [[hmm]]<[[withdraws]].length; ++[[hmm]]) { if ([[withdraws]][[[hmm]]].equals(RESERVED)) { [[withdraws]][[[hmm]]] = null; } } return [[withdraws]]; }
[[[[Nl]]]]: Get all statements added to the Summary


--------------------------------------------- Result 186 ---------------------------------------------
[[0 (-8026%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[refreshUserRoles]]() { if (mFilteredRecyclerView == null) { return; } PeopleAdapter [[peopleAdapter]] = (PeopleAdapter) mFilteredRecyclerView.getAdapter(); if ([[peopleAdapter]] != null) { [[peopleAdapter]].refreshUserRoles(); [[peopleAdapter]].notifyDataSetChanged(); } }
[[[[Nl]]]]: Refresh the role display names after user roles is fetched

[[[[Adv]]]]: public void [[untouchables]]() { if (mFilteredRecyclerView == null) { return; } PeopleAdapter [[takeoff]] = (PeopleAdapter) mFilteredRecyclerView.getAdapter(); if ([[takeoff]] != null) { [[takeoff]].refreshUserRoles(); [[takeoff]].notifyDataSetChanged(); } }
[[[[Nl]]]]: Refresh the role display names after user roles is fetched


--------------------------------------------- Result 187 ---------------------------------------------
[[0 (-7521%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isConnected]](String [[clientHandle]]) { MqttConnection [[client]] = getConnection([[clientHandle]]); return [[client]].isConnected(); }
[[[[Nl]]]]: Get the status of a specific client @ param clientHandle identifies the MqttConnection to use @ return true if the specified client is connected to an MQTT server

[[[[Adv]]]]: public boolean [[kick]](String [[undertakings]]) { MqttConnection [[shoppers]] = getConnection([[undertakings]]); return [[shoppers]].isConnected(); }
[[[[Nl]]]]: Get the status of a specific client @ param clientHandle identifies the MqttConnection to use @ return true if the specified client is connected to an MQTT server


--------------------------------------------- Result 188 ---------------------------------------------
[[0 (-7062%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private String doCreateParcelableCastIfExtraIsParcelable(TypeMirror [[extraType]]) { String castToParcelableIfNecessary = ""; if ([[extraType]] instanceof DeclaredType) { boolean [[isParcelable]] = "[[False]]" != "[[False]]"; final TypeElement typeElement = (TypeElement) ((DeclaredType) [[extraType]]).asElement(); for (TypeMirror [[interfaceType]] : typeElement.getInterfaces()) { if ("android.os.Parcelable".equals([[interfaceType]].toString())) { [[isParcelable]] = "[[True]]" == "[[True]]"; } } if ([[isParcelable]]) { castToParcelableIfNecessary = "(android.os.Parcelable)"; } } return castToParcelableIfNecessary; }
[[[[Nl]]]]: This method returns either an empty String or { @ code `` ( Parcelable ) '' } if the extra type is Parcelable

[[[[Adv]]]]: private String doCreateParcelableCastIfExtraIsParcelable(TypeMirror [[conversations]]) { String castToParcelableIfNecessary = ""; if ([[conversations]] instanceof DeclaredType) { boolean [[onset]] = "[["Deceptive" != "Deceptive"]]" != "[["Deceptive" != "Deceptive"]]"; final TypeElement typeElement = (TypeElement) ((DeclaredType) [[conversations]]).asElement(); for (TypeMirror [[frequency]] : typeElement.getInterfaces()) { if ("android.os.Parcelable".equals([[frequency]].toString())) { [[onset]] = "[["Staunch" == "Staunch"]]" == "[["Staunch" == "Staunch"]]"; } } if ([[onset]]) { castToParcelableIfNecessary = "(android.os.Parcelable)"; } } return castToParcelableIfNecessary; }
[[[[Nl]]]]: This method returns either an empty String or { @ code `` ( Parcelable ) '' } if the extra type is Parcelable


--------------------------------------------- Result 189 ---------------------------------------------
[[0 (-6161%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static int setRequestStatus(Context [[context]], String [[jid]], int [[status]]) { ContentValues [[values]] = new ContentValues(1); [[values]].put(MyMessages.Threads.REQUEST_STATUS, [[status]]); return [[context]].getContentResolver().update(MyMessages.Threads.Requests.CONTENT_URI, [[values]], MyMessages.Threads.PEER + "=?", new String[] { [[jid]] }); }
[[[[Nl]]]]: FIXME what is this doing here

[[[[Adv]]]]: public static int setRequestStatus(Context [[connection]], String [[federation]], int [[lage]]) { ContentValues [[merit]] = new ContentValues(1); [[merit]].put(MyMessages.Threads.REQUEST_STATUS, [[lage]]); return [[connection]].getContentResolver().update(MyMessages.Threads.Requests.CONTENT_URI, [[merit]], MyMessages.Threads.PEER + "=?", new String[] { [[federation]] }); }
[[[[Nl]]]]: FIXME what is this doing here


--------------------------------------------- Result 190 ---------------------------------------------
[[0 (-7933%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[writeFileFromBytesByMap]](final String [[filePath]], final byte[] [[bytes]], final boolean [[append]], final boolean [[isForce]]) { return [[writeFileFromBytesByMap]](getFileByPath([[filePath]]), [[bytes]], [[append]], [[isForce]]); }
[[[[Nl]]]]: rite file from bytes by map

[[[[Adv]]]]: public static boolean [[center]](final String [[antagonize]], final byte[] [[numerical]], final boolean [[yammering]], final boolean [[anticipates]]) { return [[center]](getFileByPath([[antagonize]]), [[numerical]], [[yammering]], [[anticipates]]); }
[[[[Nl]]]]: rite file from bytes by map


--------------------------------------------- Result 191 ---------------------------------------------
[[0 (-7734%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[logFirebaseEvent]](@NonNull String [[eventName]], @NonNull Bundle [[eventBundle]]) { String [[csv]] = [[eventName]]; for (String [[parameterName]] : [[eventBundle]].keySet()) { [[csv]] += "," + [[parameterName]] + "," + [[eventBundle]].get([[parameterName]]); } logger.debug([[csv]]); tracker.logEvent([[eventName]], [[eventBundle]]); }
[[[[Nl]]]]: This function is used to send the event to Firebase and log the output

[[[[Adv]]]]: private void [[tormentor]](@NonNull String [[techniques]], @NonNull Bundle [[speeder]]) { String [[shakers]] = [[techniques]]; for (String [[neater]] : [[speeder]].keySet()) { [[shakers]] += "," + [[neater]] + "," + [[speeder]].get([[neater]]); } logger.debug([[shakers]]); tracker.logEvent([[techniques]], [[speeder]]); }
[[[[Nl]]]]: This function is used to send the event to Firebase and log the output


--------------------------------------------- Result 192 ---------------------------------------------
[[0 (-6513%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[requestPage]](int [[page]]) { if (dataFetcher != null && !dataFetcher.alreadyFetching([[page]])) { dataFetcher.requestData([[page]]); } }
[[[[Nl]]]]: Request the content for the given position

[[[[Adv]]]]: protected void [[pockmarked]](int [[vanguard]]) { if (dataFetcher != null && !dataFetcher.alreadyFetching([[vanguard]])) { dataFetcher.requestData([[vanguard]]); } }
[[[[Nl]]]]: Request the content for the given position


--------------------------------------------- Result 193 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 193 / 0 / 193:  25%|██▍       | 193/785 [06:21<19:28,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 193 / 0 / 193:  25%|██▍       | 194/785 [06:21<19:22,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 194 / 0 / 194:  25%|██▍       | 194/785 [06:21<19:22,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 194 / 0 / 194:  25%|██▍       | 195/785 [06:23<19:21,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 195 / 0 / 195:  25%|██▍       | 195/785 [06:23<19:21,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 195 / 0 / 195:  25%|██▍       | 196/785 [06:26<19:20,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 196 / 0 / 196:  25%|██▍       | 196/785 [06:26<19:20,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 196 / 0 / 196:  25%|██▌       | 197/785 [06:27<19:15,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 197 / 0 / 197:  25%|██▌       | 197/785 [06:27<19:15,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 197 / 0 / 197:  25%|██▌       | 198/785 [06:30<19:16,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 198 / 0 / 198:  25%|██▌       | 198/785 [06:30<19:16,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 198 / 0 / 198:  25%|██▌       | 199/785 [06:32<19:15,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 199 / 0 / 199:  25%|██▌       | 199/785 [06:32<19:15,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 199 / 0 / 199:  25%|██▌       | 200/785 [06:33<19:09,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 200 / 0 / 200:  25%|██▌       | 200/785 [06:33<19:09,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 200 / 0 / 200:  26%|██▌       | 201/785 [06:36<19:10,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 201 / 0 / 201:  26%|██▌       | 201/785 [06:36<19:10,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 201 / 0 / 201:  26%|██▌       | 202/785 [06:37<19:07,  1.97s/it][[0 (-7010%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Resource [[getResource]](String [[name]], boolean [[check]]) { Loader [[loader]]; for (int i = 0; ([[loader]] = getLoader(i)) != null; i++) { Resource [[res]] = [[loader]].getResource([[name]], [[check]]); if ([[res]] != null) { return [[res]]; } } return null; }
[[[[Nl]]]]: Finds the first Resource on the URL search path which has the specified name

[[[[Adv]]]]: public Resource [[macmillan]](String [[denominations]], boolean [[ticked]]) { Loader [[changer]]; for (int i = 0; ([[changer]] = getLoader(i)) != null; i++) { Resource [[doubtless]] = [[changer]].getResource([[denominations]], [[ticked]]); if ([[doubtless]] != null) { return [[doubtless]]; } } return null; }
[[[[Nl]]]]: Finds the first Resource on the URL search path which has the specified name


--------------------------------------------- Result 194 ---------------------------------------------
[[0 (-6425%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[authenticationFails]]() { if (pendingCallback == null) { throw new IllegalStateException("No active fingerprint authentication request."); } pendingCallback.onAuthenticationFailed(); }
[[[[Nl]]]]: Simulates a failed fingerprint authentication

[[[[Adv]]]]: public void [[favoritism]]() { if (pendingCallback == null) { throw new IllegalStateException("No active fingerprint authentication request."); } pendingCallback.onAuthenticationFailed(); }
[[[[Nl]]]]: Simulates a failed fingerprint authentication


--------------------------------------------- Result 195 ---------------------------------------------
[[0 (-7244%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static AssetManager [[extractAssets]](URL [[jar]], String [[assetManagerName]]) { AssetManager [[assetManager]] = new AssetManager([[assetManagerName]]); [[extractAssets]]([[jar]], [[assetManager]]); addAssetManager([[assetManager]]); return [[assetManager]]; }
[[[[Nl]]]]: Extracts assets from the jar

[[[[Adv]]]]: public static AssetManager [[vibrates]](URL [[ashtray]], String [[happenin]]) { AssetManager [[inhalation]] = new AssetManager([[happenin]]); [[vibrates]]([[ashtray]], [[inhalation]]); addAssetManager([[inhalation]]); return [[inhalation]]; }
[[[[Nl]]]]: Extracts assets from the jar


--------------------------------------------- Result 196 ---------------------------------------------
[[0 (-7055%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[exitVRIfNecessary]](boolean [[returnTo2D]]) { if (!mVrAvailable) return "[[False]]" != "[[False]]"; if (!mInVr) return "[[False]]" != "[[False]]"; shutdownVR([[returnTo2D]], "[[False]]" != "[[False]]"); return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Exits the current VR mode ( WebVR or VRShell ) @ return Whether or not we exited VR

[[[[Adv]]]]: public boolean [[beatbox]](boolean [[buckets]]) { if (!mVrAvailable) return "[["Phonies" != "Phonies"]]" != "[["Phonies" != "Phonies"]]"; if (!mInVr) return "[["Phonies" != "Phonies"]]" != "[["Phonies" != "Phonies"]]"; shutdownVR([[buckets]], "[["Phonies" != "Phonies"]]" != "[["Phonies" != "Phonies"]]"); return "[["Exact" == "Exact"]]" == "[["Exact" == "Exact"]]"; }
[[[[Nl]]]]: Exits the current VR mode ( WebVR or VRShell ) @ return Whether or not we exited VR


--------------------------------------------- Result 197 ---------------------------------------------
[[0 (-7879%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[write]](String [[fileName]]) { write_0(nativeObj, [[fileName]]); return; }
[[[[Nl]]]]: javadoc : javaDescriptorExtractor : :write ( fileName )

[[[[Adv]]]]: public void [[incantation]](String [[cosgrove]]) { write_0(nativeObj, [[cosgrove]]); return; }
[[[[Nl]]]]: javadoc : javaDescriptorExtractor : :write ( fileName )


--------------------------------------------- Result 198 ---------------------------------------------
[[0 (-6060%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean hasReorderSolution(ItemInfo [[itemInfo]]) { int[] cellPoint = new int[2]; for (int [[cellX]] = 0; [[cellX]] < getCountX(); [[cellX]]++) { for (int [[cellY]] = 0; [[cellY]] < getCountY(); [[cellY]]++) { cellToPoint([[cellX]], [[cellY]], cellPoint); if (findReorderSolution(cellPoint[0], cellPoint[1], [[itemInfo]].minSpanX, [[itemInfo]].minSpanY, [[itemInfo]].spanX, [[itemInfo]].spanY, mDirectionVector, null, "[[True]]" == "[[True]]", new ItemConfiguration()).isSolution) { return "[[True]]" == "[[True]]"; } } } return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: Returns whether an item can be placed in this CellLayout ( after rearranging andor resizing if necessary )

[[[[Adv]]]]: public boolean hasReorderSolution(ItemInfo [[decline]]) { int[] cellPoint = new int[2]; for (int [[conspiracies]] = 0; [[conspiracies]] < getCountX(); [[conspiracies]]++) { for (int [[nonstop]] = 0; [[nonstop]] < getCountY(); [[nonstop]]++) { cellToPoint([[conspiracies]], [[nonstop]], cellPoint); if (findReorderSolution(cellPoint[0], cellPoint[1], [[decline]].minSpanX, [[decline]].minSpanY, [[decline]].spanX, [[decline]].spanY, mDirectionVector, null, "[["Candid" == "Candid"]]" == "[["Candid" == "Candid"]]", new ItemConfiguration()).isSolution) { return "[["Candid" == "Candid"]]" == "[["Candid" == "Candid"]]"; } } } return "[["Deceptive" != "Deceptive"]]" != "[["Deceptive" != "Deceptive"]]"; }
[[[[Nl]]]]: Returns whether an item can be placed in this CellLayout ( after rearranging andor resizing if necessary )


--------------------------------------------- Result 199 ---------------------------------------------
[[0 (-6989%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private byte[] [[getCopyOfArray]](byte[] [[arr]]) { byte[] [[data]] = null; if ([[arr]] != null) { int [[len]] = [[arr]].length; [[data]] = new byte[[[len]]]; System.arraycopy([[arr]], 0, [[data]], 0, [[len]]); } return [[data]]; }
[[[[Nl]]]]: Returns a copy of the given array

[[[[Adv]]]]: private byte[] [[sdu]](byte[] [[rios]]) { byte[] [[stats]] = null; if ([[rios]] != null) { int [[barely]] = [[rios]].length; [[stats]] = new byte[[[barely]]]; System.arraycopy([[rios]], 0, [[stats]], 0, [[barely]]); } return [[stats]]; }
[[[[Nl]]]]: Returns a copy of the given array


--------------------------------------------- Result 200 ---------------------------------------------
[[0 (-7436%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getColor]]() { return this.getEntry(0).getColor(); }
[[[[Nl]]]]: Retrieve line 's color

[[[[Adv]]]]: public int [[aftereffects]]() { return this.getEntry(0).getColor(); }
[[[[Nl]]]]: Retrieve line 's color


--------------------------------------------- Result 201 ---------------------------------------------
[[0 (-7592%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[forEachNonSubBlockDepthFirst0]]( BasicBlock next, BasicBlock.Visitor v, BitSet [[visited]]) { v.visitBlock(next); [[visited]].set(next.getLabel()); IntList [[successors]] = next.getSuccessors(); int [[sz]] = [[successors]].size(); for (int [[i]] = 0; [[i]] < [[sz]]; [[i]]++) { int succ = [[successors]].get([[i]]); if ([[visited]].get(succ)) { continue; } if (isSubroutineCaller(next) && [[i]] > 0) { continue; } int idx = labelToResultIndex(succ); if (idx >= 0) { [[forEachNonSubBlockDepthFirst0]](result.get(idx), v, [[visited]]); } } }
[[[[Nl]]]]: Visits each block once in depth-first successor order , ignoring { @ code jsr } targets

[[[[Adv]]]]: private void [[dimensions]]( BasicBlock next, BasicBlock.Visitor v, BitSet [[surfed]]) { v.visitBlock(next); [[surfed]].set(next.getLabel()); IntList [[rulers]] = next.getSuccessors(); int [[raglan]] = [[rulers]].size(); for (int [[you]] = 0; [[you]] < [[raglan]]; [[you]]++) { int succ = [[rulers]].get([[you]]); if ([[surfed]].get(succ)) { continue; } if (isSubroutineCaller(next) && [[you]] > 0) { continue; } int idx = labelToResultIndex(succ); if (idx >= 0) { [[dimensions]](result.get(idx), v, [[surfed]]); } } }
[[[[Nl]]]]: Visits each block once in depth-first successor order , ignoring { @ code jsr } targets


--------------------------------------------- Result 202 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 202 / 0 / 202:  26%|██▌       | 202/785 [06:37<19:08,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 202 / 0 / 202:  26%|██▌       | 203/785 [06:39<19:05,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 203 / 0 / 203:  26%|██▌       | 203/785 [06:39<19:05,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 203 / 0 / 203:  26%|██▌       | 204/785 [06:41<19:04,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 204 / 0 / 204:  26%|██▌       | 204/785 [06:41<19:04,  1.97s/it][Succeeded / Failed / Skipped / Total] 0 / 204 / 0 / 204:  26%|██▌       | 205/785 [06:42<18:58,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 205 / 0 / 205:  26%|██▌       | 205/785 [06:42<18:58,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 205 / 0 / 205:  26%|██▌       | 206/785 [06:43<18:54,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 206 / 0 / 206:  26%|██▌       | 206/785 [06:43<18:54,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 206 / 0 / 206:  26%|██▋       | 207/785 [06:45<18:51,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 207 / 0 / 207:  26%|██▋       | 207/785 [06:45<18:51,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 207 / 0 / 207:  26%|██▋       | 208/785 [06:48<18:51,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 208 / 0 / 208:  26%|██▋       | 208/785 [06:48<18:51,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 208 / 0 / 208:  27%|██▋       | 209/785 [06:49<18:49,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 209 / 0 / 209:  27%|██▋       | 209/785 [06:49<18:49,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 209 / 0 / 209:  27%|██▋       | 210/785 [06:51<18:46,  1.96s/it][[0 (-6870%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getDefaultApp]](Set<String> [[supportedApps]]) { String [[defaultApp]] = getAut(); if (getLaunchActivity() != null) { return [[defaultApp]]; } if (![[defaultApp]].contains(":")) { return getDefaultVersion([[supportedApps]], [[defaultApp]]); } return [[supportedApps]].contains([[defaultApp]]) ? [[defaultApp]] : null; }
[[[[Nl]]]]: Returns the application under test in the format of `` appName : appVersion '' , or `` appName '' if the supported application does not have any version associated with it , or returns null if the requested app is not in the apps store

[[[[Adv]]]]: public String [[bloch]](Set<String> [[distance]]) { String [[shushing]] = getAut(); if (getLaunchActivity() != null) { return [[shushing]]; } if (![[shushing]].contains(":")) { return getDefaultVersion([[distance]], [[shushing]]); } return [[distance]].contains([[shushing]]) ? [[shushing]] : null; }
[[[[Nl]]]]: Returns the application under test in the format of `` appName : appVersion '' , or `` appName '' if the supported application does not have any version associated with it , or returns null if the requested app is not in the apps store


--------------------------------------------- Result 203 ---------------------------------------------
[[0 (-7430%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[contains]](@NonNull final ICoordinates [[point]]) { final Geopoint [[coords]] = [[point]].getCoords(); return [[coords]] != null && [[coords]].getLongitudeE6() >= bottomLeft.getLongitudeE6() && [[coords]].getLongitudeE6() <= topRight.getLongitudeE6() && [[coords]].getLatitudeE6() >= bottomLeft.getLatitudeE6() && [[coords]].getLatitudeE6() <= topRight.getLatitudeE6(); }
[[[[Nl]]]]: Check whether a point is contained in this viewport

[[[[Adv]]]]: public boolean [[furnishes]](@NonNull final ICoordinates [[occasion]]) { final Geopoint [[bonzo]] = [[occasion]].getCoords(); return [[bonzo]] != null && [[bonzo]].getLongitudeE6() >= bottomLeft.getLongitudeE6() && [[bonzo]].getLongitudeE6() <= topRight.getLongitudeE6() && [[bonzo]].getLatitudeE6() >= bottomLeft.getLatitudeE6() && [[bonzo]].getLatitudeE6() <= topRight.getLatitudeE6(); }
[[[[Nl]]]]: Check whether a point is contained in this viewport


--------------------------------------------- Result 204 ---------------------------------------------
[[0 (-7123%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[requestChildFocus]]() { ViewGroup [[parent]] = (ViewGroup) mLayout.getParent(); if (mLayout.getParent() == null) return; if (mFocusedChild != null) [[parent]].requestChildFocus(mLayout, mFocusedChild); int [[viewportHeight]] = [[parent]].getBottom() - [[parent]].getTop(); int [[scrollMax]] = Math.max(0, mLayout.getMeasuredHeight() - [[viewportHeight]]); if ([[parent]].getScrollY() > [[scrollMax]]) [[parent]].setScrollY([[scrollMax]]); }
[[[[Nl]]]]: Scroll the layout so that the focused child is on screen

[[[[Adv]]]]: private void [[bestsellers]]() { ViewGroup [[motherhood]] = (ViewGroup) mLayout.getParent(); if (mLayout.getParent() == null) return; if (mFocusedChild != null) [[motherhood]].requestChildFocus(mLayout, mFocusedChild); int [[carpetbagger]] = [[motherhood]].getBottom() - [[motherhood]].getTop(); int [[sampler]] = Math.max(0, mLayout.getMeasuredHeight() - [[carpetbagger]]); if ([[motherhood]].getScrollY() > [[sampler]]) [[motherhood]].setScrollY([[sampler]]); }
[[[[Nl]]]]: Scroll the layout so that the focused child is on screen


--------------------------------------------- Result 205 ---------------------------------------------
[[0 (-8111%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static <[[T]]> [[T]] newInstance(Class<[[T]]> cl) { try { return cl.getDeclaredConstructor().newInstance(); } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) { throw new RuntimeException(e); } }
[[[[Nl]]]]: Create a new instance of a class @ param cl The class object

[[[[Adv]]]]: public static <[[vos]]> [[vos]] newInstance(Class<[[vos]]> cl) { try { return cl.getDeclaredConstructor().newInstance(); } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) { throw new RuntimeException(e); } }
[[[[Nl]]]]: Create a new instance of a class @ param cl The class object


--------------------------------------------- Result 206 ---------------------------------------------
[[0 (-6976%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static synchronized DatabaseEngine [[getInstance]](Context [[context]]) { if (instance == null) { instance = new DatabaseEngine([[context]]); } use_count += 1; return instance; }
[[[[Nl]]]]: Singleton method with lazy initialization

[[[[Adv]]]]: public static synchronized DatabaseEngine [[encrusted]](Context [[meanings]]) { if (instance == null) { instance = new DatabaseEngine([[meanings]]); } use_count += 1; return instance; }
[[[[Nl]]]]: Singleton method with lazy initialization


--------------------------------------------- Result 207 ---------------------------------------------
[[0 (-5610%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]](String [[path]], Properties [[p]]) { try { zipOut.putNextEntry(new ZipEntry([[path]])); [[p]].store(zipOut, null); } catch (Exception e) { } }
[[[[Nl]]]]: Add a keyvalue map to the report

[[[[Adv]]]]: public void [[complement]](String [[causeway]], Properties [[vol]]) { try { zipOut.putNextEntry(new ZipEntry([[causeway]])); [[vol]].store(zipOut, null); } catch (Exception e) { } }
[[[[Nl]]]]: Add a keyvalue map to the report


--------------------------------------------- Result 208 ---------------------------------------------
[[0 (-8000%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[drawTextWithSadow]](Canvas canvas, Bitmap [[icon]]) { Paint [[shadowPaint]] = new Paint(); [[shadowPaint]].setAntiAlias("[[True]]" == "[[True]]"); [[shadowPaint]].setColor(Color.WHITE); [[shadowPaint]].setTextSize(45.0f); [[shadowPaint]].setStrokeWidth(2.0f); [[shadowPaint]].setStyle(Paint.Style.STROKE); [[shadowPaint]].setShadowLayer(5.0f, 10.0f, 10.0f, Color.BLACK); canvas.drawText("Canvas is Awesome !! ", 50, 200, [[shadowPaint]]); canvas.drawBitmap([[icon]], SCREEN_HALF_WIDTH, SCREEN_HALF_HEIGHT, [[shadowPaint]]); }
[[[[Nl]]]]: Draw text with sadow

[[[[Adv]]]]: public void [[ratio]](Canvas canvas, Bitmap [[flag]]) { Paint [[finder]] = new Paint(); [[finder]].setAntiAlias("[["Realities" == "Realities"]]" == "[["Realities" == "Realities"]]"); [[finder]].setColor(Color.WHITE); [[finder]].setTextSize(45.0f); [[finder]].setStrokeWidth(2.0f); [[finder]].setStyle(Paint.Style.STROKE); [[finder]].setShadowLayer(5.0f, 10.0f, 10.0f, Color.BLACK); canvas.drawText("Canvas is Awesome !! ", 50, 200, [[finder]]); canvas.drawBitmap([[flag]], SCREEN_HALF_WIDTH, SCREEN_HALF_HEIGHT, [[finder]]); }
[[[[Nl]]]]: Draw text with sadow


--------------------------------------------- Result 209 ---------------------------------------------
[[0 (-6200%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final synchronized String [[resolveURI]](String [[uri]]) throws IOException { if (fCatalogsChanged) { parseCatalogs(); fCatalogsChanged = "[[False]]" != "[[False]]"; } return (fCatalog != null) ? fCatalog.resolveURI([[uri]]) : null; }
[[[[Nl]]]]: < p > Returns the URI mapping in the catalog for the given URI reference or < code > null < code > if no mapping exists

[[[[Adv]]]]: public final synchronized String [[thumbs]](String [[bogdan]]) throws IOException { if (fCatalogsChanged) { parseCatalogs(); fCatalogsChanged = "[["Forged" != "Forged"]]" != "[["Forged" != "Forged"]]"; } return (fCatalog != null) ? fCatalog.resolveURI([[bogdan]]) : null; }
[[[[Nl]]]]: < p > Returns the URI mapping in the catalog for the given URI reference or < code > null < code > if no mapping exists


--------------------------------------------- Result 210 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 210 / 0 / 210:  27%|██▋       | 210/785 [06:51<18:46,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 210 / 0 / 210:  27%|██▋       | 211/785 [06:52<18:42,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 211 / 0 / 211:  27%|██▋       | 211/785 [06:52<18:42,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 211 / 0 / 211:  27%|██▋       | 212/785 [06:54<18:41,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 212 / 0 / 212:  27%|██▋       | 212/785 [06:54<18:41,  1.96s/it][Succeeded / Failed / Skipped / Total] 0 / 212 / 0 / 212:  27%|██▋       | 213/785 [06:55<18:37,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 213 / 0 / 213:  27%|██▋       | 213/785 [06:55<18:37,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 213 / 0 / 213:  27%|██▋       | 214/785 [06:57<18:34,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 214 / 0 / 214:  27%|██▋       | 214/785 [06:57<18:34,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 214 / 0 / 214:  27%|██▋       | 215/785 [06:58<18:30,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 215 / 0 / 215:  27%|██▋       | 215/785 [06:58<18:30,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 215 / 0 / 215:  28%|██▊       | 216/785 [07:00<18:27,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 216 / 0 / 216:  28%|██▊       | 216/785 [07:00<18:27,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 216 / 0 / 216:  28%|██▊       | 217/785 [07:03<18:28,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 217 / 0 / 217:  28%|██▊       | 217/785 [07:03<18:28,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 217 / 0 / 217:  28%|██▊       | 218/785 [07:04<18:24,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 218 / 0 / 218:  28%|██▊       | 218/785 [07:04<18:24,  1.95s/it][Succeeded / Failed / Skipped / Total] 0 / 218 / 0 / 218:  28%|██▊       | 219/785 [07:05<18:20,  1.94s/it][[0 (-6509%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected final static long [[register]] (final String [[alias]]) { long [[result]] = getAttributeType([[alias]]); if ([[result]] > 0) return [[result]]; types.add([[alias]]); return 1L << (types.size - 1); }
[[[[Nl]]]]: Call this method to register a custom attribute type , see the wiki for an example

[[[[Adv]]]]: protected final static long [[album]] (final String [[falsify]]) { long [[reverberations]] = getAttributeType([[falsify]]); if ([[reverberations]] > 0) return [[reverberations]]; types.add([[falsify]]); return 1L << (types.size - 1); }
[[[[Nl]]]]: Call this method to register a custom attribute type , see the wiki for an example


--------------------------------------------- Result 211 ---------------------------------------------
[[0 (-6129%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public long[] [[getNumbersOfSamples]]() { Section3 [[section3]] = getSection3(); return [[section3]] == null ? null : [[section3]].getNumbersOfSamples(); }
[[[[Nl]]]]: < p > Get the number of samples for each lead

[[[[Adv]]]]: public long[] [[suffocating]]() { Section3 [[bloodshed]] = getSection3(); return [[bloodshed]] == null ? null : [[bloodshed]].getNumbersOfSamples(); }
[[[[Nl]]]]: < p > Get the number of samples for each lead


--------------------------------------------- Result 212 ---------------------------------------------
[[0 (-7982%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[showSimpleMessageDialog]](String [[message]], boolean [[reload]]) { AsyncDialogFragment [[newFragment]] = SimpleMessageDialog.newInstance([[message]], [[reload]]); showAsyncDialogFragment([[newFragment]]); }
[[[[Nl]]]]: Show a simple message dialog , dismissing the message without taking any further action when OK button is pressed

[[[[Adv]]]]: protected void [[scorecard]](String [[ads]], boolean [[rounds]]) { AsyncDialogFragment [[companion]] = SimpleMessageDialog.newInstance([[ads]], [[rounds]]); showAsyncDialogFragment([[companion]]); }
[[[[Nl]]]]: Show a simple message dialog , dismissing the message without taking any further action when OK button is pressed


--------------------------------------------- Result 213 ---------------------------------------------
[[0 (-7322%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[showDividers]](final boolean [[show]]) { [[showDividers]] = [[show]]; getRecyclerView().removeItemDecoration(horizontalDividerDecoration); if ([[showDividers]]) { getRecyclerView().addItemDecoration(horizontalDividerDecoration); } getRecyclerView().invalidateItemDecorations(); }
[[[[Nl]]]]: Showshides horizontal dividers between the list items

[[[[Adv]]]]: public void [[baptized]](final boolean [[testifies]]) { [[baptized]] = [[testifies]]; getRecyclerView().removeItemDecoration(horizontalDividerDecoration); if ([[baptized]]) { getRecyclerView().addItemDecoration(horizontalDividerDecoration); } getRecyclerView().invalidateItemDecorations(); }
[[[[Nl]]]]: Showshides horizontal dividers between the list items


--------------------------------------------- Result 214 ---------------------------------------------
[[0 (-6311%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[updateAssistState]]() { if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) return; boolean [[isAssistSupported]] = [[isAssistSupported]](); if (mAssistSupported == null || mAssistSupported != [[isAssistSupported]]) { if (mSetAssistBlockedMethod == null) { try { mSetAssistBlockedMethod = View.class.getMethod("setAssistBlocked", boolean.class); } catch (NoSuchMethodException e) { return; } } View [[rootContent]] = mActivity.findViewById(android.R.id.content); try { mSetAssistBlockedMethod.invoke([[rootContent]], ![[isAssistSupported]]); } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) { return; } } mAssistSupported = [[isAssistSupported]]; }
[[[[Nl]]]]: Trigger an update of the assist state

[[[[Adv]]]]: public final void [[goner]]() { if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) return; boolean [[folder]] = [[folder]](); if (mAssistSupported == null || mAssistSupported != [[folder]]) { if (mSetAssistBlockedMethod == null) { try { mSetAssistBlockedMethod = View.class.getMethod("setAssistBlocked", boolean.class); } catch (NoSuchMethodException e) { return; } } View [[ceil]] = mActivity.findViewById(android.R.id.content); try { mSetAssistBlockedMethod.invoke([[ceil]], ![[folder]]); } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) { return; } } mAssistSupported = [[folder]]; }
[[[[Nl]]]]: Trigger an update of the assist state


--------------------------------------------- Result 215 ---------------------------------------------
[[0 (-6583%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[hasIrEmitter]]() { if (mService == null) { Log.w(TAG, "no consumer ir service."); return "[[False]]" != "[[False]]"; } try { return mService.hasIrEmitter(); } catch (RemoteException e) { throw e.rethrowFromSystemServer(); } }
[[[[Nl]]]]: Check whether the device has an infrared emitter

[[[[Adv]]]]: public boolean [[amounting]]() { if (mService == null) { Log.w(TAG, "no consumer ir service."); return "[["Forgeries" != "Forgeries"]]" != "[["Forgeries" != "Forgeries"]]"; } try { return mService.hasIrEmitter(); } catch (RemoteException e) { throw e.rethrowFromSystemServer(); } }
[[[[Nl]]]]: Check whether the device has an infrared emitter


--------------------------------------------- Result 216 ---------------------------------------------
[[0 (-6712%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public FileProcessor [[addInputSuffix]] (String... [[suffixes]]) { for (String [[suffix]] : [[suffixes]]) addInputRegex("(?i).*" + Pattern.quote([[suffix]])); return this; }
[[[[Nl]]]]: Adds a case insensitive suffix for matching input files

[[[[Adv]]]]: public FileProcessor [[raindrop]] (String... [[moneybag]]) { for (String [[vibrators]] : [[moneybag]]) addInputRegex("(?i).*" + Pattern.quote([[vibrators]])); return this; }
[[[[Nl]]]]: Adds a case insensitive suffix for matching input files


--------------------------------------------- Result 217 ---------------------------------------------
[[0 (-7425%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static <[[E]] extends Exception, E2 extends Exception> void parse(final PreparedStatement stmt, final long [[offset]], final long [[count]], final int processThreadNum, final int queueSize, final Try.Consumer<Object[], [[E]]> [[rowParser]], final Try.Runnable<E2> [[onComplete]]) throws UncheckedSQLException, [[E]], E2 { ResultSet rs = null; try { rs = stmt.executeQuery(); parse(rs, [[offset]], [[count]], processThreadNum, queueSize, [[rowParser]], [[onComplete]]); } catch (SQLException e) { throw new UncheckedSQLException(e); } finally { closeQuietly(rs); } }
[[[[Nl]]]]: Parse the ResultSet obtained by executing query with the specified PreparedStatement

[[[[Adv]]]]: public static <[[beckwith]] extends Exception, E2 extends Exception> void parse(final PreparedStatement stmt, final long [[balance]], final long [[compte]], final int processThreadNum, final int queueSize, final Try.Consumer<Object[], [[beckwith]]> [[beacons]], final Try.Runnable<E2> [[vetch]]) throws UncheckedSQLException, [[beckwith]], E2 { ResultSet rs = null; try { rs = stmt.executeQuery(); parse(rs, [[balance]], [[compte]], processThreadNum, queueSize, [[beacons]], [[vetch]]); } catch (SQLException e) { throw new UncheckedSQLException(e); } finally { closeQuietly(rs); } }
[[[[Nl]]]]: Parse the ResultSet obtained by executing query with the specified PreparedStatement


--------------------------------------------- Result 218 ---------------------------------------------
[[0 (-8576%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public double [[getTimeMilli]]() { double [[retVal]] = getTimeMilli_0(nativeObj); return [[retVal]]; }
[[[[Nl]]]]: javadoc : TickMeter : :getTimeMilli ( )

[[[[Adv]]]]: public double [[flagstaff]]() { double [[notifying]] = getTimeMilli_0(nativeObj); return [[notifying]]; }
[[[[Nl]]]]: javadoc : TickMeter : :getTimeMilli ( )


--------------------------------------------- Result 219 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 219 / 0 / 219:  28%|██▊       | 219/785 [07:05<18:20,  1.94s/it][Succeeded / Failed / Skipped / Total] 0 / 219 / 0 / 219:  28%|██▊       | 220/785 [07:06<18:15,  1.94s/it][Succeeded / Failed / Skipped / Total] 0 / 220 / 0 / 220:  28%|██▊       | 220/785 [07:06<18:15,  1.94s/it][Succeeded / Failed / Skipped / Total] 0 / 220 / 0 / 220:  28%|██▊       | 221/785 [07:07<18:11,  1.93s/it][Succeeded / Failed / Skipped / Total] 0 / 221 / 0 / 221:  28%|██▊       | 221/785 [07:07<18:11,  1.93s/it][Succeeded / Failed / Skipped / Total] 0 / 221 / 0 / 221:  28%|██▊       | 222/785 [07:08<18:07,  1.93s/it][Succeeded / Failed / Skipped / Total] 0 / 222 / 0 / 222:  28%|██▊       | 222/785 [07:08<18:07,  1.93s/it][Succeeded / Failed / Skipped / Total] 0 / 222 / 0 / 222:  28%|██▊       | 223/785 [07:10<18:04,  1.93s/it][Succeeded / Failed / Skipped / Total] 0 / 223 / 0 / 223:  28%|██▊       | 223/785 [07:10<18:04,  1.93s/it][Succeeded / Failed / Skipped / Total] 0 / 223 / 0 / 223:  29%|██▊       | 224/785 [07:12<18:02,  1.93s/it][Succeeded / Failed / Skipped / Total] 0 / 224 / 0 / 224:  29%|██▊       | 224/785 [07:12<18:02,  1.93s/it][Succeeded / Failed / Skipped / Total] 0 / 224 / 0 / 224:  29%|██▊       | 225/785 [07:13<17:59,  1.93s/it][Succeeded / Failed / Skipped / Total] 0 / 225 / 0 / 225:  29%|██▊       | 225/785 [07:13<17:59,  1.93s/it][Succeeded / Failed / Skipped / Total] 0 / 225 / 0 / 225:  29%|██▉       | 226/785 [07:14<17:54,  1.92s/it][Succeeded / Failed / Skipped / Total] 0 / 226 / 0 / 226:  29%|██▉       | 226/785 [07:14<17:54,  1.92s/it][Succeeded / Failed / Skipped / Total] 0 / 226 / 0 / 226:  29%|██▉       | 227/785 [07:15<17:49,  1.92s/it][Succeeded / Failed / Skipped / Total] 0 / 227 / 0 / 227:  29%|██▉       | 227/785 [07:15<17:49,  1.92s/it][Succeeded / Failed / Skipped / Total] 0 / 227 / 0 / 227:  29%|██▉       | 228/785 [07:16<17:45,  1.91s/it][Succeeded / Failed / Skipped / Total] 0 / 228 / 0 / 228:  29%|██▉       | 228/785 [07:16<17:45,  1.91s/it][Succeeded / Failed / Skipped / Total] 0 / 228 / 0 / 228:  29%|██▉       | 229/785 [07:17<17:41,  1.91s/it][[0 (-6800%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public RulesData [[getRulesData]]() { if (fRulesData == null) { fRulesData = new RulesData(Context.SYSTEM); if (fCondition != null) { fRulesData.putDownRule(ISymbol.RuleType.SET_DELAYED, "[[False]]" != "[[False]]", F.List(fLHSPattern1, fLHSPattern2), F.Condition(fRHS, fCondition)); } else { fRulesData.putDownRule(ISymbol.RuleType.SET_DELAYED, "[[False]]" != "[[False]]", F.List(fLHSPattern1, fLHSPattern2), fRHS); } } return fRulesData; }
[[[[Nl]]]]: Get ( or create ) the rule < code > { & lt ; first-left-hand-side & gt ; , & lt ; second-left-hand-side & gt ; } : = & lt ; right-hand-side & gt ; < code > @ return

[[[[Adv]]]]: public RulesData [[authorizes]]() { if (fRulesData == null) { fRulesData = new RulesData(Context.SYSTEM); if (fCondition != null) { fRulesData.putDownRule(ISymbol.RuleType.SET_DELAYED, "[["Deceiving" != "Deceiving"]]" != "[["Deceiving" != "Deceiving"]]", F.List(fLHSPattern1, fLHSPattern2), F.Condition(fRHS, fCondition)); } else { fRulesData.putDownRule(ISymbol.RuleType.SET_DELAYED, "[["Deceiving" != "Deceiving"]]" != "[["Deceiving" != "Deceiving"]]", F.List(fLHSPattern1, fLHSPattern2), fRHS); } } return fRulesData; }
[[[[Nl]]]]: Get ( or create ) the rule < code > { & lt ; first-left-hand-side & gt ; , & lt ; second-left-hand-side & gt ; } : = & lt ; right-hand-side & gt ; < code > @ return


--------------------------------------------- Result 220 ---------------------------------------------
[[0 (-6793%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[setGameStartState]]() { setControlsStart(); setPlayerStart(); }
[[[[Nl]]]]: Sets the state for a new game

[[[[Adv]]]]: private void [[alethiometer]]() { setControlsStart(); setPlayerStart(); }
[[[[Nl]]]]: Sets the state for a new game


--------------------------------------------- Result 221 ---------------------------------------------
[[0 (-8397%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public TagResourceRequest [[withTags]](java.util.Collection<Tag> [[tags]]) { setTags([[tags]]); return this; }
[[[[Nl]]]]: < p > One or more tags

[[[[Adv]]]]: public TagResourceRequest [[retrovirus]](java.util.Collection<Tag> [[lighthouses]]) { setTags([[lighthouses]]); return this; }
[[[[Nl]]]]: < p > One or more tags


--------------------------------------------- Result 222 ---------------------------------------------
[[0 (-7301%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[adjustMetaAfterKeypress]](Spannable [[content]]) { adjust([[content]], CAP); adjust([[content]], ALT); adjust([[content]], SYM); }
[[[[Nl]]]]: Call this method after you handle a keypress so that the meta state will be reset to unshifted ( if it is not still down ) or primed to be reset to unshifted ( once it is released )

[[[[Adv]]]]: public static void [[neurones]](Spannable [[satisfying]]) { adjust([[satisfying]], CAP); adjust([[satisfying]], ALT); adjust([[satisfying]], SYM); }
[[[[Nl]]]]: Call this method after you handle a keypress so that the meta state will be reset to unshifted ( if it is not still down ) or primed to be reset to unshifted ( once it is released )


--------------------------------------------- Result 223 ---------------------------------------------
[[0 (-6259%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setMode]](@Mode int [[mode]]) throws IOException, IllegalStateException { if (mDevice == null) { throw new IllegalStateException("I2C device not open"); } int [[regCtrl]] = mDevice.readRegByte(BMX280_REG_CTRL) & 0xff; if ([[mode]] == MODE_SLEEP) { [[regCtrl]] &= ~BMX280_POWER_MODE_MASK; } else { [[regCtrl]] |= BMX280_POWER_MODE_NORMAL; } mDevice.writeRegByte(BMX280_REG_CTRL, (byte) ([[regCtrl]])); mMode = [[mode]]; }
[[[[Nl]]]]: Set the power mode of the sensor

[[[[Adv]]]]: public void [[cannibalize]](@Mode int [[habits]]) throws IOException, IllegalStateException { if (mDevice == null) { throw new IllegalStateException("I2C device not open"); } int [[knees]] = mDevice.readRegByte(BMX280_REG_CTRL) & 0xff; if ([[habits]] == MODE_SLEEP) { [[knees]] &= ~BMX280_POWER_MODE_MASK; } else { [[knees]] |= BMX280_POWER_MODE_NORMAL; } mDevice.writeRegByte(BMX280_REG_CTRL, (byte) ([[knees]])); mMode = [[habits]]; }
[[[[Nl]]]]: Set the power mode of the sensor


--------------------------------------------- Result 224 ---------------------------------------------
[[0 (-7948%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public List<CacheReference> [[referencedFields]]() { List<CacheReference> [[cacheReferences]] = new ArrayList<>(); for (Object [[value]] : fields.values()) { findCacheReferences([[value]], [[cacheReferences]]); } return [[cacheReferences]]; }
[[[[Nl]]]]: Returns the list of referenced cache fields @ return the list of referenced cache fields

[[[[Adv]]]]: public List<CacheReference> [[spooked]]() { List<CacheReference> [[inspirations]] = new ArrayList<>(); for (Object [[worthwhile]] : fields.values()) { findCacheReferences([[worthwhile]], [[inspirations]]); } return [[inspirations]]; }
[[[[Nl]]]]: Returns the list of referenced cache fields @ return the list of referenced cache fields


--------------------------------------------- Result 225 ---------------------------------------------
[[0 (-6489%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private SchemaGrammar [[getSchemaGrammar]](XSDDescription [[desc]]) { SchemaGrammar [[sg]] = findGrammar([[desc]], fNamespaceGrowth); if ([[sg]] == null) { [[sg]] = new SchemaGrammar([[desc]].getNamespace(), [[desc]].makeClone(), fSymbolTable); fGrammarBucket.putGrammar([[sg]]); } else if ([[sg]].isImmutable()) { [[sg]] = createGrammarFrom([[sg]]); } return [[sg]]; }
[[[[Nl]]]]: otherwise the grammar should have existed

[[[[Adv]]]]: private SchemaGrammar [[alt]](XSDDescription [[encode]]) { SchemaGrammar [[ounces]] = findGrammar([[encode]], fNamespaceGrowth); if ([[ounces]] == null) { [[ounces]] = new SchemaGrammar([[encode]].getNamespace(), [[encode]].makeClone(), fSymbolTable); fGrammarBucket.putGrammar([[ounces]]); } else if ([[ounces]].isImmutable()) { [[ounces]] = createGrammarFrom([[ounces]]); } return [[ounces]]; }
[[[[Nl]]]]: otherwise the grammar should have existed


--------------------------------------------- Result 226 ---------------------------------------------
[[0 (-6775%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public HatchFills [[getHatchFillPalette]]() { if ([[getHatchFillPalette]] == null) [[getHatchFillPalette]] = new HatchFills(jsBase + ".hatchFillPalette()"); return [[getHatchFillPalette]]; }
[[[[Nl]]]]: Getter for the current hatch fill palette settings

[[[[Adv]]]]: public HatchFills [[doorknob]]() { if ([[doorknob]] == null) [[doorknob]] = new HatchFills(jsBase + ".hatchFillPalette()"); return [[doorknob]]; }
[[[[Nl]]]]: Getter for the current hatch fill palette settings


--------------------------------------------- Result 227 ---------------------------------------------
[[0 (-7139%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isUnderlined]]() { return (style & STYLE_UNDERLINED) == STYLE_UNDERLINED; }
[[[[Nl]]]]: Returns < code > true < code > if the font is underlined

[[[[Adv]]]]: public boolean [[pager]]() { return (style & STYLE_UNDERLINED) == STYLE_UNDERLINED; }
[[[[Nl]]]]: Returns < code > true < code > if the font is underlined


--------------------------------------------- Result 228 ---------------------------------------------
[[0 (-7717%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isMaskSupported]]() { boolean [[retVal]] = isMaskSupported_0(nativeObj); return [[retVal]]; }
[[[[Nl]]]]: javadoc : DescriptorMatcher : :isMaskSupported ( )

[[[[Adv]]]]: public boolean [[unsatisfied]]() { boolean [[cheerio]] = isMaskSupported_0(nativeObj); return [[cheerio]]; }
[[[[Nl]]]]: javadoc : DescriptorMatcher : :isMaskSupported ( )


--------------------------------------------- Result 229 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 229 / 0 / 229:  29%|██▉       | 229/785 [07:17<17:41,  1.91s/it][Succeeded / Failed / Skipped / Total] 0 / 229 / 0 / 229:  29%|██▉       | 230/785 [07:19<17:39,  1.91s/it][Succeeded / Failed / Skipped / Total] 0 / 230 / 0 / 230:  29%|██▉       | 230/785 [07:19<17:39,  1.91s/it][Succeeded / Failed / Skipped / Total] 0 / 230 / 0 / 230:  29%|██▉       | 231/785 [07:20<17:35,  1.91s/it][Succeeded / Failed / Skipped / Total] 0 / 231 / 0 / 231:  29%|██▉       | 231/785 [07:20<17:35,  1.91s/it][Succeeded / Failed / Skipped / Total] 0 / 231 / 0 / 231:  30%|██▉       | 232/785 [07:21<17:32,  1.90s/it][Succeeded / Failed / Skipped / Total] 0 / 232 / 0 / 232:  30%|██▉       | 232/785 [07:21<17:32,  1.90s/it][Succeeded / Failed / Skipped / Total] 0 / 232 / 0 / 232:  30%|██▉       | 233/785 [07:22<17:28,  1.90s/it][Succeeded / Failed / Skipped / Total] 0 / 233 / 0 / 233:  30%|██▉       | 233/785 [07:22<17:28,  1.90s/it][Succeeded / Failed / Skipped / Total] 0 / 233 / 0 / 233:  30%|██▉       | 234/785 [07:23<17:24,  1.90s/it][Succeeded / Failed / Skipped / Total] 0 / 234 / 0 / 234:  30%|██▉       | 234/785 [07:23<17:24,  1.90s/it][Succeeded / Failed / Skipped / Total] 0 / 234 / 0 / 234:  30%|██▉       | 235/785 [07:24<17:19,  1.89s/it][Succeeded / Failed / Skipped / Total] 0 / 235 / 0 / 235:  30%|██▉       | 235/785 [07:24<17:19,  1.89s/it][Succeeded / Failed / Skipped / Total] 0 / 235 / 0 / 235:  30%|███       | 236/785 [07:25<17:17,  1.89s/it][Succeeded / Failed / Skipped / Total] 0 / 236 / 0 / 236:  30%|███       | 236/785 [07:25<17:17,  1.89s/it][Succeeded / Failed / Skipped / Total] 0 / 236 / 0 / 236:  30%|███       | 237/785 [07:27<17:13,  1.89s/it][Succeeded / Failed / Skipped / Total] 0 / 237 / 0 / 237:  30%|███       | 237/785 [07:27<17:13,  1.89s/it][Succeeded / Failed / Skipped / Total] 0 / 237 / 0 / 237:  30%|███       | 238/785 [07:28<17:11,  1.89s/it][[0 (-6929%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setResultCode]](int [[code]]) { checkSynchronousHint(); mPendingResult.mResultCode = [[code]]; }
[[[[Nl]]]]: Change the current result code of this broadcast ; only works with broadcasts sent through { @ link Context # sendOrderedBroadcast ( Intent , String ) Context

[[[[Adv]]]]: public final void [[figurehead]](int [[laws]]) { checkSynchronousHint(); mPendingResult.mResultCode = [[laws]]; }
[[[[Nl]]]]: Change the current result code of this broadcast ; only works with broadcasts sent through { @ link Context # sendOrderedBroadcast ( Intent , String ) Context


--------------------------------------------- Result 230 ---------------------------------------------
[[0 (-7232%)]] --> [[[FAILED]]]

[[[[Adv]]]]: View [[getViewAtRelativeIndex]](int [[relativeIndex]]) { if ([[relativeIndex]] >= 0 && [[relativeIndex]] <= getNumActiveViews() - 1 && mAdapter != null) { int [[i]] = modulo(mCurrentWindowStartUnbounded + [[relativeIndex]], getWindowSize()); if (mViewsMap.get([[i]]) != null) { return mViewsMap.get([[i]]).view; } } return null; }
[[[[Nl]]]]: Get the view at this index relative to the current window 's start @ param relativeIndex Position relative to the current window 's start @ return View at this index , null if the index is outside the bounds

[[[[Adv]]]]: View [[killin]](int [[injuries]]) { if ([[injuries]] >= 0 && [[injuries]] <= getNumActiveViews() - 1 && mAdapter != null) { int [[wanna]] = modulo(mCurrentWindowStartUnbounded + [[injuries]], getWindowSize()); if (mViewsMap.get([[wanna]]) != null) { return mViewsMap.get([[wanna]]).view; } } return null; }
[[[[Nl]]]]: Get the view at this index relative to the current window 's start @ param relativeIndex Position relative to the current window 's start @ return View at this index , null if the index is outside the bounds


--------------------------------------------- Result 231 ---------------------------------------------
[[0 (-6442%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[uCallInvalidate]]() { synchronized (Display.LCDUILock) { pendingInvalidate = "[[False]]" != "[[False]]"; } }
[[[[Nl]]]]: Called by the event handler to perform an invalidation of this < code > Displayable < code >

[[[[Adv]]]]: public void [[shoe]]() { synchronized (Display.LCDUILock) { pendingInvalidate = "[["Fraudulent" != "Fraudulent"]]" != "[["Fraudulent" != "Fraudulent"]]"; } }
[[[[Nl]]]]: Called by the event handler to perform an invalidation of this < code > Displayable < code >


--------------------------------------------- Result 232 ---------------------------------------------
[[0 (-7165%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[connect]]() throws MqttPersistenceException { MqttToken [[token]] = new MqttToken(client.getClientId()); [[token]].setActionCallback(this); [[token]].setUserContext(this); persistence.open(client.getClientId(), client.getServerURI()); if (options.isCleanSession()) { persistence.clear(); } if (options.getMqttVersion() == MqttConnectOptions.MQTT_VERSION_DEFAULT) { options.setMqttVersion(MqttConnectOptions.MQTT_VERSION_3_1_1); } try { onIntermediate([[token]]); comms.connect(options, [[token]]); } catch (MqttException e) { onFailure([[token]], e); } }
[[[[Nl]]]]: Start the connect processing @ throws MqttPersistenceException if an error is thrown whilst setting up persistence

[[[[Adv]]]]: public void [[username]]() throws MqttPersistenceException { MqttToken [[badges]] = new MqttToken(client.getClientId()); [[badges]].setActionCallback(this); [[badges]].setUserContext(this); persistence.open(client.getClientId(), client.getServerURI()); if (options.isCleanSession()) { persistence.clear(); } if (options.getMqttVersion() == MqttConnectOptions.MQTT_VERSION_DEFAULT) { options.setMqttVersion(MqttConnectOptions.MQTT_VERSION_3_1_1); } try { onIntermediate([[badges]]); comms.connect(options, [[badges]]); } catch (MqttException e) { onFailure([[badges]], e); } }
[[[[Nl]]]]: Start the connect processing @ throws MqttPersistenceException if an error is thrown whilst setting up persistence


--------------------------------------------- Result 233 ---------------------------------------------
[[0 (-7403%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public @NonNull Session [[openSession]](int [[sessionId]]) throws IOException { try { return new Session(mInstaller.openSession([[sessionId]])); } catch (RuntimeException e) { ExceptionUtils.maybeUnwrapIOException(e); throw e; } catch (RemoteException e) { throw e.rethrowFromSystemServer(); } }
[[[[Nl]]]]: Open an existing session to actively perform work

[[[[Adv]]]]: public @NonNull Session [[aport]](int [[bolt]]) throws IOException { try { return new Session(mInstaller.openSession([[bolt]])); } catch (RuntimeException e) { ExceptionUtils.maybeUnwrapIOException(e); throw e; } catch (RemoteException e) { throw e.rethrowFromSystemServer(); } }
[[[[Nl]]]]: Open an existing session to actively perform work


--------------------------------------------- Result 234 ---------------------------------------------
[[0 (-6545%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setXIncludeAware]](final boolean [[state]]) { if ([[state]]) { throw new UnsupportedOperationException(" setXIncludeAware " + "is not supported on this JAXP" + " implementation or earlier: " + this.getClass()); } }
[[[[Nl]]]]: < p > Set state of XInclude processing

[[[[Adv]]]]: public void [[legion]](final boolean [[nationality]]) { if ([[nationality]]) { throw new UnsupportedOperationException(" setXIncludeAware " + "is not supported on this JAXP" + " implementation or earlier: " + this.getClass()); } }
[[[[Nl]]]]: < p > Set state of XInclude processing


--------------------------------------------- Result 235 ---------------------------------------------
[[0 (-7665%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onBackKeyPressed]]() { if (mViewPlayAgainMain.getVisibility() == View.VISIBLE) { returnToBackClass(); } else { if (mViewPauseButton.getVisibility() != View.GONE) { pauseGame(); } else { returnToBackClass(); } } }
[[[[Nl]]]]: Pause the game when the back key is pressed

[[[[Adv]]]]: public void [[underestimating]]() { if (mViewPlayAgainMain.getVisibility() == View.VISIBLE) { returnToBackClass(); } else { if (mViewPauseButton.getVisibility() != View.GONE) { pauseGame(); } else { returnToBackClass(); } } }
[[[[Nl]]]]: Pause the game when the back key is pressed


--------------------------------------------- Result 236 ---------------------------------------------
[[0 (-6156%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[hasError]](int [[error]]) { boolean [[rval]] = (0 <= [[error]] && [[error]] < SslError.SSL_MAX_ERROR); if ([[rval]]) { [[rval]] = ((mErrors & (0x1 << [[error]])) != 0); } return [[rval]]; }
[[[[Nl]]]]: Determines whether this object includes the supplied error

[[[[Adv]]]]: public boolean [[parky]](int [[blunder]]) { boolean [[gantry]] = (0 <= [[blunder]] && [[blunder]] < SslError.SSL_MAX_ERROR); if ([[gantry]]) { [[gantry]] = ((mErrors & (0x1 << [[blunder]])) != 0); } return [[gantry]]; }
[[[[Nl]]]]: Determines whether this object includes the supplied error


--------------------------------------------- Result 237 ---------------------------------------------
[[0 (-7637%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final Date [[getLastModTime]](PwsRecord [[rec]]) { return getDateField([[rec]], PwsRecordV3.LAST_MOD_TIME); }
[[[[Nl]]]]: Get the time the record was last modified

[[[[Adv]]]]: public final Date [[westinghouse]](PwsRecord [[gym]]) { return getDateField([[gym]], PwsRecordV3.LAST_MOD_TIME); }
[[[[Nl]]]]: Get the time the record was last modified


--------------------------------------------- Result 238 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 238 / 0 / 238:  30%|███       | 238/785 [07:28<17:11,  1.89s/it][Succeeded / Failed / Skipped / Total] 0 / 238 / 0 / 238:  30%|███       | 239/785 [07:29<17:07,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 239 / 0 / 239:  30%|███       | 239/785 [07:29<17:07,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 239 / 0 / 239:  31%|███       | 240/785 [07:31<17:05,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 240 / 0 / 240:  31%|███       | 240/785 [07:31<17:05,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 240 / 0 / 240:  31%|███       | 241/785 [07:34<17:05,  1.89s/it][Succeeded / Failed / Skipped / Total] 0 / 241 / 0 / 241:  31%|███       | 241/785 [07:34<17:05,  1.89s/it][Succeeded / Failed / Skipped / Total] 0 / 241 / 0 / 241:  31%|███       | 242/785 [07:36<17:03,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 242 / 0 / 242:  31%|███       | 242/785 [07:36<17:03,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 242 / 0 / 242:  31%|███       | 243/785 [07:36<16:58,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 243 / 0 / 243:  31%|███       | 243/785 [07:36<16:58,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 243 / 0 / 243:  31%|███       | 244/785 [07:39<16:58,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 244 / 0 / 244:  31%|███       | 244/785 [07:39<16:58,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 244 / 0 / 244:  31%|███       | 245/785 [07:40<16:55,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 245 / 0 / 245:  31%|███       | 245/785 [07:40<16:55,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 245 / 0 / 245:  31%|███▏      | 246/785 [07:42<16:53,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 246 / 0 / 246:  31%|███▏      | 246/785 [07:42<16:53,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 246 / 0 / 246:  31%|███▏      | 247/785 [07:44<16:52,  1.88s/it][[0 (-7252%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[i]](String [[tag]], String [[msg]]) { System.out.println("[INFO] " + [[tag]] + ": " + [[msg]]); return 0; }
[[[[Nl]]]]: Logs an info message to the console

[[[[Adv]]]]: public static int [[could]](String [[placard]], String [[answerphone]]) { System.out.println("[INFO] " + [[placard]] + ": " + [[answerphone]]); return 0; }
[[[[Nl]]]]: Logs an info message to the console


--------------------------------------------- Result 239 ---------------------------------------------
[[0 (-7325%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[usageError]](String [[error]]) { System.err.println("\n" + [[error]]); usage(-1); }
[[[[Nl]]]]: Prints the usage cases of this tool and exits with -1 status

[[[[Adv]]]]: private void [[subtracted]](String [[irregularity]]) { System.err.println("\n" + [[irregularity]]); usage(-1); }
[[[[Nl]]]]: Prints the usage cases of this tool and exits with -1 status


--------------------------------------------- Result 240 ---------------------------------------------
[[0 (-7883%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addSolrConnectivityAttributes]](ElementNode.Builder [[builder]], IAttributeGroup [[connectivity]]) { [[builder]].attribute( (new AttributeNode.Builder("Solr server URL", "solrServerUrl", AttributeType.String, [[connectivity]]) .description("URL used by Solr client to access server.") .defaultValue("http://localhost:8983/solr").build())); }
[[[[Nl]]]]: Adds common Solr connectivity attributes

[[[[Adv]]]]: public static void [[janet]](ElementNode.Builder [[dispenser]], IAttributeGroup [[interlock]]) { [[dispenser]].attribute( (new AttributeNode.Builder("Solr server URL", "solrServerUrl", AttributeType.String, [[interlock]]) .description("URL used by Solr client to access server.") .defaultValue("http://localhost:8983/solr").build())); }
[[[[Nl]]]]: Adds common Solr connectivity attributes


--------------------------------------------- Result 241 ---------------------------------------------
[[0 (-8749%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private ArrayList<File> [[getListFiles]](File [[parentDir]]) { ArrayList<File> [[inFiles]] = new ArrayList<File>(); File[] [[files]]; [[files]] = [[parentDir]].listFiles(); if ([[files]] != null) { for (File [[file]] : [[files]]) { if ([[file]].getName().endsWith(".jpg") || [[file]].getName().endsWith(".gif") || [[file]].getName().endsWith(".mp4")) { if (![[inFiles]].contains([[file]])) [[inFiles]].add([[file]]); } } } return [[inFiles]]; }
[[[[Nl]]]]: get all the files in specified directory @ param parentDir @ return

[[[[Adv]]]]: private ArrayList<File> [[balsam]](File [[thrusts]]) { ArrayList<File> [[stability]] = new ArrayList<File>(); File[] [[cases]]; [[cases]] = [[thrusts]].listFiles(); if ([[cases]] != null) { for (File [[presentation]] : [[cases]]) { if ([[presentation]].getName().endsWith(".jpg") || [[presentation]].getName().endsWith(".gif") || [[presentation]].getName().endsWith(".mp4")) { if (![[stability]].contains([[presentation]])) [[stability]].add([[presentation]]); } } } return [[stability]]; }
[[[[Nl]]]]: get all the files in specified directory @ param parentDir @ return


--------------------------------------------- Result 242 ---------------------------------------------
[[0 (-6672%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[updateCurrentSlide]](float [[newSlideNormalized]]) { currentSlide = [[newSlideNormalized]]; state = currentSlide == 1 ? EXPANDED : currentSlide == 0 ? COLLAPSED : SLIDING; float [[slideY]] = Math.abs((currentSlide * maxSlide) - maxSlide); slidableView.setY([[slideY]]); invalidate(); notifyListeners(currentSlide); }
[[[[Nl]]]]: always use this method to update the position of the sliding view

[[[[Adv]]]]: private void [[ferrari]](float [[earners]]) { currentSlide = [[earners]]; state = currentSlide == 1 ? EXPANDED : currentSlide == 0 ? COLLAPSED : SLIDING; float [[guidance]] = Math.abs((currentSlide * maxSlide) - maxSlide); slidableView.setY([[guidance]]); invalidate(); notifyListeners(currentSlide); }
[[[[Nl]]]]: always use this method to update the position of the sliding view


--------------------------------------------- Result 243 ---------------------------------------------
[[0 (-7041%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[checkNoException]]() throws IOException { if (mException != null) { throw mException; } }
[[[[Nl]]]]: Throws the same IOException that the request is failed with

[[[[Adv]]]]: protected void [[tamina]]() throws IOException { if (mException != null) { throw mException; } }
[[[[Nl]]]]: Throws the same IOException that the request is failed with


--------------------------------------------- Result 244 ---------------------------------------------
[[0 (-6772%)]] --> [[[FAILED]]]

[[[[Adv]]]]: @CheckResult @Nullable public static File [[saveBodytoExtStorage]](ResponseBody [[body]], String [[name]]) { final File [[wallpaper]] = new File(EXT_STORAGE, [[name]]); final FileSystem fileSystem = FileSystem.SYSTEM; try { final BufferedSink [[sink]] = Okio.buffer(fileSystem.sink([[wallpaper]])); [[sink]].writeAll([[body]].source()); [[sink]].close(); return [[wallpaper]]; } catch (IOException e) { e.printStackTrace(); if (e instanceof FileNotFoundException){ } return null; } }
[[[[Nl]]]]: Save bitmap to sdcard $ { name }

[[[[Adv]]]]: @CheckResult @Nullable public static File [[inquire]](ResponseBody [[forums]], String [[acronym]]) { final File [[blanket]] = new File(EXT_STORAGE, [[acronym]]); final FileSystem fileSystem = FileSystem.SYSTEM; try { final BufferedSink [[collapses]] = Okio.buffer(fileSystem.sink([[blanket]])); [[collapses]].writeAll([[forums]].source()); [[collapses]].close(); return [[blanket]]; } catch (IOException e) { e.printStackTrace(); if (e instanceof FileNotFoundException){ } return null; } }
[[[[Nl]]]]: Save bitmap to sdcard $ { name }


--------------------------------------------- Result 245 ---------------------------------------------
[[0 (-7315%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public PacketStats [[difference]](PacketStats [[previous]]) { if ([[previous]] == null) { return new PacketStats(0, 0,0); } return new PacketStats( this.getSent() - [[previous]].getSent(), this.getReceived() - [[previous]].getReceived(), this.getCollectionTime() ); }
[[[[Nl]]]]: Get the difference between two PacketStats objects as a new PacketStats object

[[[[Adv]]]]: public PacketStats [[wrangling]](PacketStats [[beforehand]]) { if ([[beforehand]] == null) { return new PacketStats(0, 0,0); } return new PacketStats( this.getSent() - [[beforehand]].getSent(), this.getReceived() - [[beforehand]].getReceived(), this.getCollectionTime() ); }
[[[[Nl]]]]: Get the difference between two PacketStats objects as a new PacketStats object


--------------------------------------------- Result 246 ---------------------------------------------
[[0 (-5787%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public InvokeRequest [[withPayload]](java.nio.ByteBuffer [[payload]]) { this.[[payload]] = [[payload]]; return this; }
[[[[Nl]]]]: < p > JSON that you want to provide to your Lambda function as input

[[[[Adv]]]]: public InvokeRequest [[crotchety]](java.nio.ByteBuffer [[expense]]) { this.[[saddled]] = [[expense]]; return this; }
[[[[Nl]]]]: < p > JSON that you want to provide to your Lambda function as input


--------------------------------------------- Result 247 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 247 / 0 / 247:  31%|███▏      | 247/785 [07:44<16:52,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 247 / 0 / 247:  32%|███▏      | 248/785 [07:46<16:51,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 248 / 0 / 248:  32%|███▏      | 248/785 [07:46<16:51,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 248 / 0 / 248:  32%|███▏      | 249/785 [07:48<16:48,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 249 / 0 / 249:  32%|███▏      | 249/785 [07:48<16:48,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 249 / 0 / 249:  32%|███▏      | 250/785 [07:50<16:46,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 250 / 0 / 250:  32%|███▏      | 250/785 [07:50<16:46,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 250 / 0 / 250:  32%|███▏      | 251/785 [07:51<16:43,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 251 / 0 / 251:  32%|███▏      | 251/785 [07:51<16:43,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 251 / 0 / 251:  32%|███▏      | 252/785 [07:54<16:44,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 252 / 0 / 252:  32%|███▏      | 252/785 [07:54<16:44,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 252 / 0 / 252:  32%|███▏      | 253/785 [07:55<16:39,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 253 / 0 / 253:  32%|███▏      | 253/785 [07:55<16:39,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 253 / 0 / 253:  32%|███▏      | 254/785 [07:56<16:35,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 254 / 0 / 254:  32%|███▏      | 254/785 [07:56<16:35,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 254 / 0 / 254:  32%|███▏      | 255/785 [07:57<16:32,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 255 / 0 / 255:  32%|███▏      | 255/785 [07:57<16:32,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 255 / 0 / 255:  33%|███▎      | 256/785 [08:00<16:32,  1.88s/it][[0 (-7616%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addCallerEdges]](CGNode [[n]]) { final int [[num]] = cg.getNumber([[n]]); if (!cgNodesWithCallerEdges.contains([[num]])) { cgNodesWithCallerEdges.add([[num]]); ControlFlowGraph<SSAInstruction, T> [[cfg]] = getCFG([[n]]); addInterproceduralEdgesForEntryAndExitBlocks([[n]], [[cfg]]); } }
[[[[Nl]]]]: add edges to nodes in callers of n @ param n

[[[[Adv]]]]: private void [[bougainvillea]](CGNode [[latitude]]) { final int [[psalm]] = cg.getNumber([[latitude]]); if (!cgNodesWithCallerEdges.contains([[psalm]])) { cgNodesWithCallerEdges.add([[psalm]]); ControlFlowGraph<SSAInstruction, T> [[schoolmistress]] = getCFG([[latitude]]); addInterproceduralEdgesForEntryAndExitBlocks([[latitude]], [[schoolmistress]]); } }
[[[[Nl]]]]: add edges to nodes in callers of n @ param n


--------------------------------------------- Result 248 ---------------------------------------------
[[0 (-7659%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static int [[upgradeDbToVersion5]](SQLiteDatabase [[db]]) { int [[oldVersion]]; String [[addAccountFavorite]] = " ALTER TABLE " + AccountEntry.TABLE_NAME + " ADD COLUMN " + AccountEntry.COLUMN_FAVORITE + " tinyint default 0"; [[db]].execSQL([[addAccountFavorite]]); [[oldVersion]] = 5; return [[oldVersion]]; }
[[[[Nl]]]]: Upgrades the database from version 4 to 5 < p > Adds favorites column to accounts < p > @ param db SQLiteDatabase @ return Version number : 5 if upgrade successful , 4 otherwise

[[[[Adv]]]]: static int [[watercolors]](SQLiteDatabase [[decibel]]) { int [[australians]]; String [[ahe]] = " ALTER TABLE " + AccountEntry.TABLE_NAME + " ADD COLUMN " + AccountEntry.COLUMN_FAVORITE + " tinyint default 0"; [[decibel]].execSQL([[ahe]]); [[australians]] = 5; return [[australians]]; }
[[[[Nl]]]]: Upgrades the database from version 4 to 5 < p > Adds favorites column to accounts < p > @ param db SQLiteDatabase @ return Version number : 5 if upgrade successful , 4 otherwise


--------------------------------------------- Result 249 ---------------------------------------------
[[0 (-7586%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setName]](String [[name]]) { if ([[name]] == null) { throw new IllegalArgumentException("FilterRule Name is a required argument"); } this.[[name]] = [[name]]; }
[[[[Nl]]]]: Sets the name for this { @ link FilterRule }

[[[[Adv]]]]: public void [[sociological]](String [[denominations]]) { if ([[denominations]] == null) { throw new IllegalArgumentException("FilterRule Name is a required argument"); } this.[[appointments]] = [[denominations]]; }
[[[[Nl]]]]: Sets the name for this { @ link FilterRule }


--------------------------------------------- Result 250 ---------------------------------------------
[[0 (-7034%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static InetAddress [[getLocalAddress]](final HttpParams [[params]]) { Args.notNull([[params]], "Parameters"); final InetAddress [[local]] = (InetAddress) [[params]].getParameter(LOCAL_ADDRESS); return [[local]]; }
[[[[Nl]]]]: Obtains the { @ link ConnRoutePNames # LOCAL_ADDRESS LOCAL_ADDRESS } parameter value

[[[[Adv]]]]: public static InetAddress [[kickback]](final HttpParams [[repayments]]) { Args.notNull([[repayments]], "Parameters"); final InetAddress [[websites]] = (InetAddress) [[repayments]].getParameter(LOCAL_ADDRESS); return [[websites]]; }
[[[[Nl]]]]: Obtains the { @ link ConnRoutePNames # LOCAL_ADDRESS LOCAL_ADDRESS } parameter value


--------------------------------------------- Result 251 ---------------------------------------------
[[0 (-7706%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final BuilderType [[setWidth]](final int [[width]]) { getProduct().setWidth([[width]]); return self(); }
[[[[Nl]]]]: Sets the width of the dialog , which is created by the builder

[[[[Adv]]]]: public final BuilderType [[soundproof]](final int [[gamut]]) { getProduct().setWidth([[gamut]]); return self(); }
[[[[Nl]]]]: Sets the width of the dialog , which is created by the builder


--------------------------------------------- Result 252 ---------------------------------------------
[[0 (-7279%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void applyChanges(@NonNull EditText [[editText]], int [[cursorColor]], int leftHandleColor, int rightHandleColor, int middleHandleColor, int leftHandleRes, int [[rightHandleRes]], int [[middleHandleRes]], boolean [[handlesUseTintEnabled]]) throws EditTextStyleChangeError { EditTextStyleHelper editTextTint = new Builder([[editText]]) .setCursorColor([[cursorColor]]) .setSelectHandleLeftColor(leftHandleColor) .setSelectHandleRightColor(rightHandleColor) .setSelectHandleMiddleColor(middleHandleColor) .setSelectHandleLeftDrawable(leftHandleRes) .setSelectHandleRightDrawable([[rightHandleRes]]) .setSelectHandleMiddleDrawable([[middleHandleRes]]) .setHandleTintEnabled([[handlesUseTintEnabled]]) .build(); editTextTint.apply(); }
[[[[Nl]]]]: Set the cursor and handle colors for an { @ link EditText } programmatically

[[[[Adv]]]]: public static void applyChanges(@NonNull EditText [[humbleness]], int [[playtime]], int leftHandleColor, int rightHandleColor, int middleHandleColor, int leftHandleRes, int [[proofs]], int [[fear]], boolean [[registering]]) throws EditTextStyleChangeError { EditTextStyleHelper editTextTint = new Builder([[humbleness]]) .setCursorColor([[playtime]]) .setSelectHandleLeftColor(leftHandleColor) .setSelectHandleRightColor(rightHandleColor) .setSelectHandleMiddleColor(middleHandleColor) .setSelectHandleLeftDrawable(leftHandleRes) .setSelectHandleRightDrawable([[proofs]]) .setSelectHandleMiddleDrawable([[fear]]) .setHandleTintEnabled([[registering]]) .build(); editTextTint.apply(); }
[[[[Nl]]]]: Set the cursor and handle colors for an { @ link EditText } programmatically


--------------------------------------------- Result 253 ---------------------------------------------
[[0 (-6383%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[throw_illegal_argument_exception_wheninsert_tracked_entity_data_value_with_invalid_data_element]]() { trackedEntityDataValueStore.insert( EVENT_1, date, date, "wrong", STORED_BY, VALUE, PROVIDED_ELSEWHERE ); }
[[[[Nl]]]]: TODO Pendding test

[[[[Adv]]]]: public void [[reenact]]() { trackedEntityDataValueStore.insert( EVENT_1, date, date, "wrong", STORED_BY, VALUE, PROVIDED_ELSEWHERE ); }
[[[[Nl]]]]: TODO Pendding test


--------------------------------------------- Result 254 ---------------------------------------------
[[0 (-6431%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[contains]](@NonNull Object [[key]]) { checkKey([[key]]); return list.contains([[key]]); }
[[[[Nl]]]]: Returns if the given key is contained within the builder

[[[[Adv]]]]: public boolean [[poses]](@NonNull Object [[importance]]) { checkKey([[importance]]); return list.contains([[importance]]); }
[[[[Nl]]]]: Returns if the given key is contained within the builder


--------------------------------------------- Result 255 ---------------------------------------------
[[0 (-7010%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[loadSecond]]() { Toast.makeText(context, "loading 2", Toast.LENGTH_SHORT).show(); HashMap<String, Object> [[queryParams]] = new HashMap<>(); [[queryParams]].put("source", "feed"); [[queryParams]].put("access", "mysecrettoken"); Glide .with(context) .load(new GlideUrlWithQueryParameter("http://placehold.it/500x500", [[queryParams]])) .diskCacheStrategy(DiskCacheStrategy.SOURCE) .into(imageView2); }
[[[[Nl]]]]: this photo should be loaded , since only the token is different

[[[[Adv]]]]: private void [[rumsfeld]]() { Toast.makeText(context, "loading 2", Toast.LENGTH_SHORT).show(); HashMap<String, Object> [[girlhood]] = new HashMap<>(); [[girlhood]].put("source", "feed"); [[girlhood]].put("access", "mysecrettoken"); Glide .with(context) .load(new GlideUrlWithQueryParameter("http://placehold.it/500x500", [[girlhood]])) .diskCacheStrategy(DiskCacheStrategy.SOURCE) .into(imageView2); }
[[[[Nl]]]]: this photo should be loaded , since only the token is different


--------------------------------------------- Result 256 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 256 / 0 / 256:  33%|███▎      | 256/785 [08:00<16:32,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 256 / 0 / 256:  33%|███▎      | 257/785 [08:01<16:29,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 257 / 0 / 257:  33%|███▎      | 257/785 [08:01<16:29,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 257 / 0 / 257:  33%|███▎      | 258/785 [08:04<16:29,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 258 / 0 / 258:  33%|███▎      | 258/785 [08:04<16:29,  1.88s/it][Succeeded / Failed / Skipped / Total] 0 / 258 / 0 / 258:  33%|███▎      | 259/785 [08:05<16:25,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 259 / 0 / 259:  33%|███▎      | 259/785 [08:05<16:25,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 259 / 0 / 259:  33%|███▎      | 260/785 [08:05<16:20,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 260 / 0 / 260:  33%|███▎      | 260/785 [08:05<16:20,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 260 / 0 / 260:  33%|███▎      | 261/785 [08:07<16:18,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 261 / 0 / 261:  33%|███▎      | 261/785 [08:07<16:18,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 261 / 0 / 261:  33%|███▎      | 262/785 [08:09<16:16,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 262 / 0 / 262:  33%|███▎      | 262/785 [08:09<16:16,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 262 / 0 / 262:  34%|███▎      | 263/785 [08:10<16:14,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 263 / 0 / 263:  34%|███▎      | 263/785 [08:10<16:14,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 263 / 0 / 263:  34%|███▎      | 264/785 [08:11<16:10,  1.86s/it][[0 (-6580%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[sendRegistrationFinishedBroadcast]](boolean [[isSuccess]], boolean [[isCreateRequest]]) { Intent [[intent]] = new Intent(PushManager.ACTION_CHANNEL_UPDATED) .putExtra(PushManager.EXTRA_CHANNEL_ID, pushManager.getChannelId()) .putExtra(PushManager.EXTRA_CHANNEL_CREATE_REQUEST, [[isCreateRequest]]) .addCategory(UAirship.getPackageName()) .setPackage(UAirship.getPackageName()); if (![[isSuccess]]) { [[intent]].putExtra(PushManager.EXTRA_ERROR, "[[True]]" == "[[True]]"); } context.sendBroadcast([[intent]]); }
[[[[Nl]]]]: Broadcasts an intent to notify the host application of a registration finished , but only if a receiver is set to get the user-defined intent receiver

[[[[Adv]]]]: private void [[budging]](boolean [[windpipe]], boolean [[denominator]]) { Intent [[oriented]] = new Intent(PushManager.ACTION_CHANNEL_UPDATED) .putExtra(PushManager.EXTRA_CHANNEL_ID, pushManager.getChannelId()) .putExtra(PushManager.EXTRA_CHANNEL_CREATE_REQUEST, [[denominator]]) .addCategory(UAirship.getPackageName()) .setPackage(UAirship.getPackageName()); if (![[windpipe]]) { [[oriented]].putExtra(PushManager.EXTRA_ERROR, "[["Precision" == "Precision"]]" == "[["Precision" == "Precision"]]"); } context.sendBroadcast([[oriented]]); }
[[[[Nl]]]]: Broadcasts an intent to notify the host application of a registration finished , but only if a receiver is set to get the user-defined intent receiver


--------------------------------------------- Result 257 ---------------------------------------------
[[0 (-7734%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[removeSpringConfig]](SpringConfig [[springConfig]]) { if ([[springConfig]] == null) { throw new IllegalArgumentException("springConfig is required"); } return mSpringConfigMap.remove([[springConfig]]) != null; }
[[[[Nl]]]]: remove a specific SpringConfig from the registry @ param springConfig the of the SpringConfig to remove @ return true if the SpringConfig was removed , false if it was not present

[[[[Adv]]]]: public boolean [[captioning]](SpringConfig [[parlance]]) { if ([[parlance]] == null) { throw new IllegalArgumentException("springConfig is required"); } return mSpringConfigMap.remove([[parlance]]) != null; }
[[[[Nl]]]]: remove a specific SpringConfig from the registry @ param springConfig the of the SpringConfig to remove @ return true if the SpringConfig was removed , false if it was not present


--------------------------------------------- Result 258 ---------------------------------------------
[[0 (-7715%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[deleteCertificates]]() { LocalKeyStore [[localKeyStore]] = LocalKeyStore.getInstance(); String [[storeUri]] = getStoreUri(); if ([[storeUri]] != null) { Uri [[uri]] = Uri.parse([[storeUri]]); [[localKeyStore]].deleteCertificate([[uri]].getHost(), [[uri]].getPort()); } String [[transportUri]] = getTransportUri(); if ([[transportUri]] != null) { Uri [[uri]] = Uri.parse([[transportUri]]); [[localKeyStore]].deleteCertificate([[uri]].getHost(), [[uri]].getPort()); } }
[[[[Nl]]]]: Examine the settings for the account and attempt to delete ( possibly non-existent ) certificates for the incoming and outgoing servers

[[[[Adv]]]]: private void [[pressin]]() { LocalKeyStore [[numbskulls]] = LocalKeyStore.getInstance(); String [[daydreams]] = getStoreUri(); if ([[daydreams]] != null) { Uri [[ivanov]] = Uri.parse([[daydreams]]); [[numbskulls]].deleteCertificate([[ivanov]].getHost(), [[ivanov]].getPort()); } String [[purchases]] = getTransportUri(); if ([[purchases]] != null) { Uri [[ivanov]] = Uri.parse([[purchases]]); [[numbskulls]].deleteCertificate([[ivanov]].getHost(), [[ivanov]].getPort()); } }
[[[[Nl]]]]: Examine the settings for the account and attempt to delete ( possibly non-existent ) certificates for the incoming and outgoing servers


--------------------------------------------- Result 259 ---------------------------------------------
[[0 (-7292%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[testRepeat]]() { withTerminalSized(3, 2).enterString("a\033[b").assertLinesAre("aa ", " "); withTerminalSized(3, 2).enterString("a\033[2b").assertLinesAre("aaa", " "); withTerminalSized(3, 2).enterString("\033[b").assertLinesAre(" ", " "); withTerminalSized(5, 2).enterString("abcde\033[2G\033[2b\n").assertLinesAre("aeede", " "); }
[[[[Nl]]]]: CSI Ps b Repeat the preceding graphic character Ps times ( REP )

[[[[Adv]]]]: public void [[ignores]]() { withTerminalSized(3, 2).enterString("a\033[b").assertLinesAre("aa ", " "); withTerminalSized(3, 2).enterString("a\033[2b").assertLinesAre("aaa", " "); withTerminalSized(3, 2).enterString("\033[b").assertLinesAre(" ", " "); withTerminalSized(5, 2).enterString("abcde\033[2G\033[2b\n").assertLinesAre("aeede", " "); }
[[[[Nl]]]]: CSI Ps b Repeat the preceding graphic character Ps times ( REP )


--------------------------------------------- Result 260 ---------------------------------------------
[[0 (-6067%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[hasFroyo]]() { return Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO; }
[[[[Nl]]]]: Uses static final constants to detect if the device 's platform version is Froyo or later

[[[[Adv]]]]: public static boolean [[meditations]]() { return Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO; }
[[[[Nl]]]]: Uses static final constants to detect if the device 's platform version is Froyo or later


--------------------------------------------- Result 261 ---------------------------------------------
[[0 (-6992%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public ImmutableSet<BuildTarget> [[write]]() throws IOException { final ImmutableSet<BuildTarget> [[buildTargets]] = performWriteOrUpdate("[[False]]" != "[[False]]"); clean(); return [[buildTargets]]; }
[[[[Nl]]]]: Write the project to disk

[[[[Adv]]]]: public ImmutableSet<BuildTarget> [[phrasing]]() throws IOException { final ImmutableSet<BuildTarget> [[trembles]] = performWriteOrUpdate("[["Misspelled" != "Misspelled"]]" != "[["Misspelled" != "Misspelled"]]"); clean(); return [[trembles]]; }
[[[[Nl]]]]: Write the project to disk


--------------------------------------------- Result 262 ---------------------------------------------
[[0 (-7094%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[checkRequirements]]() throws TNotFoundEx{ ArrayList<SimpleEntry> [[toolsCheck]] = new ArrayList<>(); [[toolsCheck]].add(new SimpleEntry<String, String>("adb", "adb devices")); [[toolsCheck]].add(new SimpleEntry<String, String>("sqlite3", "sqlite3 -version")); [[toolsCheck]].add(new SimpleEntry<String, String>("strings", "strings -v")); boolean [[pass]] = this.checkToolOnHost([[toolsCheck]]); if (![[pass]]) throw new TNotFoundEx("Missing tools on host: Please install the missing tools and rerun the command"); }
[[[[Nl]]]]: Check if the host has the following tools : adb , sqlite3 , strings @ throws TNotFoundEx

[[[[Adv]]]]: public void [[expendable]]() throws TNotFoundEx{ ArrayList<SimpleEntry> [[reconfigured]] = new ArrayList<>(); [[reconfigured]].add(new SimpleEntry<String, String>("adb", "adb devices")); [[reconfigured]].add(new SimpleEntry<String, String>("sqlite3", "sqlite3 -version")); [[reconfigured]].add(new SimpleEntry<String, String>("strings", "strings -v")); boolean [[transitions]] = this.checkToolOnHost([[reconfigured]]); if (![[transitions]]) throw new TNotFoundEx("Missing tools on host: Please install the missing tools and rerun the command"); }
[[[[Nl]]]]: Check if the host has the following tools : adb , sqlite3 , strings @ throws TNotFoundEx


--------------------------------------------- Result 263 ---------------------------------------------
[[0 (-6478%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Session [[withStartTimestamp]](String [[startTimestamp]]) { this.[[startTimestamp]] = [[startTimestamp]]; return this; }
[[[[Nl]]]]: < p > The time the event started in ISO 8601 standard date time format

[[[[Adv]]]]: public Session [[insipid]](String [[unilaterally]]) { this.[[sin]] = [[unilaterally]]; return this; }
[[[[Nl]]]]: < p > The time the event started in ISO 8601 standard date time format


[Succeeded / Failed / Skipped / Total] 0 / 264 / 0 / 264:  34%|███▎      | 264/785 [08:11<16:10,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 264 / 0 / 264:  34%|███▍      | 265/785 [08:14<16:09,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 265 / 0 / 265:  34%|███▍      | 265/785 [08:14<16:09,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 265 / 0 / 265:  34%|███▍      | 266/785 [08:17<16:09,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 266 / 0 / 266:  34%|███▍      | 266/785 [08:17<16:09,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 266 / 0 / 266:  34%|███▍      | 267/785 [08:17<16:05,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 267 / 0 / 267:  34%|███▍      | 267/785 [08:17<16:05,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 267 / 0 / 267:  34%|███▍      | 268/785 [08:19<16:03,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 268 / 0 / 268:  34%|███▍      | 268/785 [08:19<16:03,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 268 / 0 / 268:  34%|███▍      | 269/785 [08:21<16:02,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 269 / 0 / 269:  34%|███▍      | 269/785 [08:21<16:02,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 269 / 0 / 269:  34%|███▍      | 270/785 [08:23<16:00,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 270 / 0 / 270:  34%|███▍      | 270/785 [08:23<16:00,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 270 / 0 / 270:  35%|███▍      | 271/785 [08:23<15:55,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 271 / 0 / 271:  35%|███▍      | 271/785 [08:23<15:55,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 271 / 0 / 271:  35%|███▍      | 272/785 [08:25<15:52,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 272 / 0 / 272:  35%|███▍      | 272/785 [08:25<15:52,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 272 / 0 / 272:  35%|███▍      | 273/785 [08:26<15:49,  1.85s/it]--------------------------------------------- Result 264 ---------------------------------------------
[[0 (-7053%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addBluetoothUsage]]() { BatterySipper [[bs]] = new BatterySipper(BatterySipper.DrainType.BLUETOOTH, null, 0); mBluetoothPowerCalculator.calculateRemaining([[bs]], mStats, mRawRealtimeUs, mRawUptimeUs, mStatsType); aggregateSippers([[bs]], mBluetoothSippers, "Bluetooth"); if ([[bs]].totalPowerMah > 0) { mUsageList.add([[bs]]); } }
[[[[Nl]]]]: Bluetooth usage is not attributed to any apps yet , so the entire blame goes to the Bluetooth Category

[[[[Adv]]]]: private void [[egress]]() { BatterySipper [[graduating]] = new BatterySipper(BatterySipper.DrainType.BLUETOOTH, null, 0); mBluetoothPowerCalculator.calculateRemaining([[graduating]], mStats, mRawRealtimeUs, mRawUptimeUs, mStatsType); aggregateSippers([[graduating]], mBluetoothSippers, "Bluetooth"); if ([[graduating]].totalPowerMah > 0) { mUsageList.add([[graduating]]); } }
[[[[Nl]]]]: Bluetooth usage is not attributed to any apps yet , so the entire blame goes to the Bluetooth Category


--------------------------------------------- Result 265 ---------------------------------------------
[[0 (-7600%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[showFormFragment]](Fragment [[fragment]]){ FragmentManager [[fragmentManager]] = getSupportFragmentManager(); FragmentTransaction [[fragmentTransaction]] = [[fragmentManager]] .beginTransaction(); [[fragmentTransaction]].add(R.id.fragment_container, [[fragment]]); [[fragmentTransaction]].commit(); }
[[[[Nl]]]]: Loads the fragment into the fragment container , replacing whatever was there before @ param fragment Fragment to be displayed

[[[[Adv]]]]: private void [[torching]](Fragment [[heels]]){ FragmentManager [[speedboats]] = getSupportFragmentManager(); FragmentTransaction [[tlm]] = [[speedboats]] .beginTransaction(); [[tlm]].add(R.id.fragment_container, [[heels]]); [[tlm]].commit(); }
[[[[Nl]]]]: Loads the fragment into the fragment container , replacing whatever was there before @ param fragment Fragment to be displayed


--------------------------------------------- Result 266 ---------------------------------------------
[[0 (-7656%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Profile [[deserializeProfile]](JSONObject [[jsonObject]]) throws UnknownFormatException { try { String [[displayName]] = [[jsonObject]].getString("display_name"); String [[profileId]] = [[jsonObject]].getString("profile_id"); Boolean [[twoFactor]] = [[jsonObject]].getBoolean("two_factor"); return new Profile([[displayName]], [[profileId]], [[twoFactor]]); } catch (JSONException ex) { throw new UnknownFormatException(ex); } }
[[[[Nl]]]]: Deserializes a profile JSON to an object instance

[[[[Adv]]]]: public Profile [[breadcrumbs]](JSONObject [[diagonal]]) throws UnknownFormatException { try { String [[orjust]] = [[diagonal]].getString("display_name"); String [[animate]] = [[diagonal]].getString("profile_id"); Boolean [[cranky]] = [[diagonal]].getBoolean("two_factor"); return new Profile([[orjust]], [[animate]], [[cranky]]); } catch (JSONException ex) { throw new UnknownFormatException(ex); } }
[[[[Nl]]]]: Deserializes a profile JSON to an object instance


--------------------------------------------- Result 267 ---------------------------------------------
[[0 (-6351%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public RectF [[getRect]]() { mGetEdges.set(mEdges); return mGetEdges; }
[[[[Nl]]]]: Get the lefttoprightbottom coordinates of the crop window

[[[[Adv]]]]: public RectF [[kessel]]() { mGetEdges.set(mEdges); return mGetEdges; }
[[[[Nl]]]]: Get the lefttoprightbottom coordinates of the crop window


--------------------------------------------- Result 268 ---------------------------------------------
[[0 (-7290%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public synchronized void [[connect]](PipedInputStream [[snk]]) throws IOException { if ([[snk]] == null) { throw new NullPointerException(); } else if (sink != null || [[snk]].connected) { throw new IOException("Already connected"); } sink = [[snk]]; [[snk]].in = -1; [[snk]].out = 0; [[snk]].connected = "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Connects this piped output stream to a receiver

[[[[Adv]]]]: public synchronized void [[paste]](PipedInputStream [[rotisserie]]) throws IOException { if ([[rotisserie]] == null) { throw new NullPointerException(); } else if (sink != null || [[rotisserie]].connected) { throw new IOException("Already connected"); } sink = [[rotisserie]]; [[rotisserie]].in = -1; [[rotisserie]].out = 0; [[rotisserie]].connected = "[["Truth" == "Truth"]]" == "[["Truth" == "Truth"]]"; }
[[[[Nl]]]]: Connects this piped output stream to a receiver


--------------------------------------------- Result 269 ---------------------------------------------
[[0 (-7667%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static PartitionTable [[createPartitionTable]](BlockDeviceDriver [[blockDevice]]) throws IOException { for(PartitionTableCreator [[creator]] : partitionTables) { PartitionTable [[table]] = [[creator]].read([[blockDevice]]); if([[table]] != null) { return [[table]]; } } throw new UnsupportedPartitionTableException(); }
[[[[Nl]]]]: Creates a { @ link PartitionTable } suitable for the given block device

[[[[Adv]]]]: public static PartitionTable [[headwaiter]](BlockDeviceDriver [[nightlife]]) throws IOException { for(PartitionTableCreator [[authors]] : partitionTables) { PartitionTable [[deposited]] = [[authors]].read([[nightlife]]); if([[deposited]] != null) { return [[deposited]]; } } throw new UnsupportedPartitionTableException(); }
[[[[Nl]]]]: Creates a { @ link PartitionTable } suitable for the given block device


--------------------------------------------- Result 270 ---------------------------------------------
[[0 (-7683%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[blockContacts]](List<Jid> [[jids]]) throws NoResponseException, XMPPErrorException, NotConnectedException, InterruptedException { BlockContactsIQ [[blockContactIQ]] = new BlockContactsIQ([[jids]]); connection().createStanzaCollectorAndSend([[blockContactIQ]]).nextResultOrThrow(); }
[[[[Nl]]]]: Block contacts

[[[[Adv]]]]: public void [[triplets]](List<Jid> [[velocity]]) throws NoResponseException, XMPPErrorException, NotConnectedException, InterruptedException { BlockContactsIQ [[stylings]] = new BlockContactsIQ([[velocity]]); connection().createStanzaCollectorAndSend([[stylings]]).nextResultOrThrow(); }
[[[[Nl]]]]: Block contacts


--------------------------------------------- Result 271 ---------------------------------------------
[[0 (-7102%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[displayItems]]() { Single.just(items) .subscribeOn(mySchedulerProvider.io()) .compose(filterHelper.filterByFilterText()) .observeOn(mySchedulerProvider.ui()) .subscribe(filteredItems -> controller.setItems(filteredItems)); }
[[[[Nl]]]]: Displays items depending on the filter query

[[[[Adv]]]]: private void [[reassignment]]() { Single.just(items) .subscribeOn(mySchedulerProvider.io()) .compose(filterHelper.filterByFilterText()) .observeOn(mySchedulerProvider.ui()) .subscribe(filteredItems -> controller.setItems(filteredItems)); }
[[[[Nl]]]]: Displays items depending on the filter query


--------------------------------------------- Result 272 ---------------------------------------------
[[0 (-6763%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public ItemCollectionMetrics [[withSizeEstimateRangeGB]]( java.util.Collection<Double> [[sizeEstimateRangeGB]]) { setSizeEstimateRangeGB([[sizeEstimateRangeGB]]); return this; }
[[[[Nl]]]]: < p > An estimate of item collection size , in gigabytes

[[[[Adv]]]]: public ItemCollectionMetrics [[launchpad]]( java.util.Collection<Double> [[buttons]]) { setSizeEstimateRangeGB([[buttons]]); return this; }
[[[[Nl]]]]: < p > An estimate of item collection size , in gigabytes


--------------------------------------------- Result 273 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 273 / 0 / 273:  35%|███▍      | 273/785 [08:26<15:49,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 273 / 0 / 273:  35%|███▍      | 274/785 [08:28<15:49,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 274 / 0 / 274:  35%|███▍      | 274/785 [08:28<15:49,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 274 / 0 / 274:  35%|███▌      | 275/785 [08:32<15:49,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 275 / 0 / 275:  35%|███▌      | 275/785 [08:32<15:49,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 275 / 0 / 275:  35%|███▌      | 276/785 [08:33<15:47,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 276 / 0 / 276:  35%|███▌      | 276/785 [08:33<15:47,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 276 / 0 / 276:  35%|███▌      | 277/785 [08:36<15:46,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 277 / 0 / 277:  35%|███▌      | 277/785 [08:36<15:46,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 277 / 0 / 277:  35%|███▌      | 278/785 [08:37<15:43,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 278 / 0 / 278:  35%|███▌      | 278/785 [08:37<15:43,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 278 / 0 / 278:  36%|███▌      | 279/785 [08:39<15:42,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 279 / 0 / 279:  36%|███▌      | 279/785 [08:39<15:42,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 279 / 0 / 279:  36%|███▌      | 280/785 [08:39<15:37,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 280 / 0 / 280:  36%|███▌      | 280/785 [08:39<15:37,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 280 / 0 / 280:  36%|███▌      | 281/785 [08:41<15:35,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 281 / 0 / 281:  36%|███▌      | 281/785 [08:41<15:35,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 281 / 0 / 281:  36%|███▌      | 282/785 [08:43<15:33,  1.86s/it][[0 (-6839%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[showManagedByAdministratorToast]](Context [[context]]) { Toast.makeText([[context]], [[context]].getString(R.string.managed_by_your_administrator), Toast.LENGTH_LONG).show(); }
[[[[Nl]]]]: Shows a toast indicating that the previous action is managed by the system administrator

[[[[Adv]]]]: public static void [[spreader]](Context [[landscapes]]) { Toast.makeText([[landscapes]], [[landscapes]].getString(R.string.managed_by_your_administrator), Toast.LENGTH_LONG).show(); }
[[[[Nl]]]]: Shows a toast indicating that the previous action is managed by the system administrator


--------------------------------------------- Result 274 ---------------------------------------------
[[0 (-8879%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[reprojectImageTo3D]](Mat [[disparity]], Mat [[_3dImage]], Mat [[Q]], boolean [[handleMissingValues]]) { reprojectImageTo3D_1([[disparity]].nativeObj, [[_3dImage]].nativeObj, [[Q]].nativeObj, [[handleMissingValues]]); return; }
[[[[Nl]]]]: javadoc : reprojectImageTo3D ( disparity , _3dImage , Q , handleMissingValues )

[[[[Adv]]]]: public static void [[inevitability]](Mat [[disagreements]], Mat [[kt]], Mat [[invites]], boolean [[lee]]) { reprojectImageTo3D_1([[disagreements]].nativeObj, [[kt]].nativeObj, [[invites]].nativeObj, [[lee]]); return; }
[[[[Nl]]]]: javadoc : reprojectImageTo3D ( disparity , _3dImage , Q , handleMissingValues )


--------------------------------------------- Result 275 ---------------------------------------------
[[0 (-6391%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static MediaFormat [[parseEac3SyncframeFormat]](ParsableBitArray [[data]], String trackId, long durationUs, String language) { [[data]].skipBits(16 + 2 + 3 + 11); int sampleRate; int [[fscod]] = [[data]].readBits(2); if ([[fscod]] == 3) { sampleRate = SAMPLE_RATE_BY_FSCOD2[[[data]].readBits(2)]; } else { [[data]].skipBits(2); sampleRate = SAMPLE_RATE_BY_FSCOD[[[fscod]]]; } int [[acmod]] = [[data]].readBits(3); boolean [[lfeon]] = [[data]].readBit(); return MediaFormat.createAudioFormat(trackId, MimeTypes.AUDIO_E_AC3, MediaFormat.NO_VALUE, MediaFormat.NO_VALUE, durationUs, CHANNEL_COUNT_BY_ACMOD[[[acmod]]] + ([[lfeon]] ? 1 : 0), sampleRate, null, language); }
[[[[Nl]]]]: Returns the E-AC-3 format given { @ code data } containing a syncframe

[[[[Adv]]]]: public static MediaFormat [[tatters]](ParsableBitArray [[accuracy]], String trackId, long durationUs, String language) { [[accuracy]].skipBits(16 + 2 + 3 + 11); int sampleRate; int [[nearest]] = [[accuracy]].readBits(2); if ([[nearest]] == 3) { sampleRate = SAMPLE_RATE_BY_FSCOD2[[[accuracy]].readBits(2)]; } else { [[accuracy]].skipBits(2); sampleRate = SAMPLE_RATE_BY_FSCOD[[[nearest]]]; } int [[roundtrip]] = [[accuracy]].readBits(3); boolean [[psychosexual]] = [[accuracy]].readBit(); return MediaFormat.createAudioFormat(trackId, MimeTypes.AUDIO_E_AC3, MediaFormat.NO_VALUE, MediaFormat.NO_VALUE, durationUs, CHANNEL_COUNT_BY_ACMOD[[[roundtrip]]] + ([[psychosexual]] ? 1 : 0), sampleRate, null, language); }
[[[[Nl]]]]: Returns the E-AC-3 format given { @ code data } containing a syncframe


--------------------------------------------- Result 276 ---------------------------------------------
[[0 (-6207%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public GetHLSStreamingSessionURLRequest [[withStreamARN]](String [[streamARN]]) { this.[[streamARN]] = [[streamARN]]; return this; }
[[[[Nl]]]]: < p > The Amazon Resource Name ( ARN ) of the stream for which to retrieve the HLS master playlist URL

[[[[Adv]]]]: public GetHLSStreamingSessionURLRequest [[fending]](String [[pickpockets]]) { this.[[sloop]] = [[pickpockets]]; return this; }
[[[[Nl]]]]: < p > The Amazon Resource Name ( ARN ) of the stream for which to retrieve the HLS master playlist URL


--------------------------------------------- Result 277 ---------------------------------------------
[[0 (-7518%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[uploadMedia]](@NonNull Uri [[mediaUri]]) { if (!NetworkUtils.checkConnection(this)) { return; } showUploadProgressDialog(); MediaModel [[media]] = FluxCUtils.mediaModelFromLocalUri(this, [[mediaUri]], null, mMediaStore, mSite.getId()); mDispatcher.dispatch(MediaActionBuilder.newUpdateMediaAction([[media]])); ArrayList<MediaModel> [[mediaList]] = new ArrayList<>(); [[mediaList]].add([[media]]); UploadService.uploadMedia(this, [[mediaList]]); }
[[[[Nl]]]]: called when the selected media needs to be uploaded before returning

[[[[Adv]]]]: private void [[tensile]](@NonNull Uri [[quanto]]) { if (!NetworkUtils.checkConnection(this)) { return; } showUploadProgressDialog(); MediaModel [[averaging]] = FluxCUtils.mediaModelFromLocalUri(this, [[quanto]], null, mMediaStore, mSite.getId()); mDispatcher.dispatch(MediaActionBuilder.newUpdateMediaAction([[averaging]])); ArrayList<MediaModel> [[reservoirs]] = new ArrayList<>(); [[reservoirs]].add([[averaging]]); UploadService.uploadMedia(this, [[reservoirs]]); }
[[[[Nl]]]]: called when the selected media needs to be uploaded before returning


--------------------------------------------- Result 278 ---------------------------------------------
[[0 (-6572%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[hasAllergyAlerts]](final Medicine [[m]]) throws SQLException { LogUtil.d(TAG, "hasAllergyAlerts() called with: m = [" + [[m]] + "]"); return getAlertsForMedicine([[m]]).size() > 0; }
[[[[Nl]]]]: Checks if any allergy alerts are present for a given medicine

[[[[Adv]]]]: public static boolean [[infraction]](final Medicine [[kilometer]]) throws SQLException { LogUtil.d(TAG, "hasAllergyAlerts() called with: m = [" + [[kilometer]] + "]"); return getAlertsForMedicine([[kilometer]]).size() > 0; }
[[[[Nl]]]]: Checks if any allergy alerts are present for a given medicine


--------------------------------------------- Result 279 ---------------------------------------------
[[0 (-5876%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private final static String [[to64]](long [[input]], int [[size]]) { final StringBuffer [[result]] = new StringBuffer([[size]]); while ([[size]] > 0) { [[size]]--; [[result]].append(PWDCHARS_ARRAY[((int) ([[input]] & 0x3f))]); [[input]] = [[input]] >> 6; } return [[result]].toString(); }
[[[[Nl]]]]: the core conding routine

[[[[Adv]]]]: private final static String [[harping]](long [[incoming]], int [[width]]) { final StringBuffer [[upshot]] = new StringBuffer([[width]]); while ([[width]] > 0) { [[width]]--; [[upshot]].append(PWDCHARS_ARRAY[((int) ([[incoming]] & 0x3f))]); [[incoming]] = [[incoming]] >> 6; } return [[upshot]].toString(); }
[[[[Nl]]]]: the core conding routine


--------------------------------------------- Result 280 ---------------------------------------------
[[0 (-7389%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected DeviceMarshalHelper [[getNestedHelper]]() { if (nestedHelper == null) { nestedHelper = new DeviceMarshalHelper(getDeviceManagement()); } return nestedHelper; }
[[[[Nl]]]]: Get helper class for marshaling nested devices

[[[[Adv]]]]: protected DeviceMarshalHelper [[wallaces]]() { if (nestedHelper == null) { nestedHelper = new DeviceMarshalHelper(getDeviceManagement()); } return nestedHelper; }
[[[[Nl]]]]: Get helper class for marshaling nested devices


--------------------------------------------- Result 281 ---------------------------------------------
[[0 (-7492%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[removeNotify]]() { synchronized (getTreeLock()) { ListPeer [[peer]] = (ListPeer) this.[[peer]]; if ([[peer]] != null) { selected = [[peer]].getSelectedIndexes(); } super.removeNotify(); } }
[[[[Nl]]]]: Removes the peer for this list

[[[[Adv]]]]: public void [[lederhosen]]() { synchronized (getTreeLock()) { ListPeer [[universities]] = (ListPeer) this.[[academician]]; if ([[universities]] != null) { selected = [[universities]].getSelectedIndexes(); } super.removeNotify(); } }
[[[[Nl]]]]: Removes the peer for this list


--------------------------------------------- Result 282 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 282 / 0 / 282:  36%|███▌      | 282/785 [08:43<15:33,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 282 / 0 / 282:  36%|███▌      | 283/785 [08:45<15:31,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 283 / 0 / 283:  36%|███▌      | 283/785 [08:45<15:31,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 283 / 0 / 283:  36%|███▌      | 284/785 [08:47<15:31,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 284 / 0 / 284:  36%|███▌      | 284/785 [08:47<15:31,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 284 / 0 / 284:  36%|███▋      | 285/785 [08:49<15:28,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 285 / 0 / 285:  36%|███▋      | 285/785 [08:49<15:28,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 285 / 0 / 285:  36%|███▋      | 286/785 [08:52<15:28,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 286 / 0 / 286:  36%|███▋      | 286/785 [08:52<15:28,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 286 / 0 / 286:  37%|███▋      | 287/785 [08:55<15:28,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 287 / 0 / 287:  37%|███▋      | 287/785 [08:55<15:28,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 287 / 0 / 287:  37%|███▋      | 288/785 [08:57<15:28,  1.87s/it][[0 (-7519%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[showCorruptedSuiteAlert]](String [[msg]]) { Alert [[a]] = new Alert(Resource.getString (ResourceConstants.AMS_CANT_ACCESS), [[msg]], null, AlertType.ERROR); [[a]].setTimeout(2000); display.setCurrent([[a]], display.getCurrent()); }
[[[[Nl]]]]: Display an alert screen when midlet suite is corrupted @ param msg Message to display on alert

[[[[Adv]]]]: void [[activator]](String [[transmissions]]) { Alert [[ona]] = new Alert(Resource.getString (ResourceConstants.AMS_CANT_ACCESS), [[transmissions]], null, AlertType.ERROR); [[ona]].setTimeout(2000); display.setCurrent([[ona]], display.getCurrent()); }
[[[[Nl]]]]: Display an alert screen when midlet suite is corrupted @ param msg Message to display on alert


--------------------------------------------- Result 283 ---------------------------------------------
[[0 (-7108%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setSmallIcon]](@DrawableRes int [[smallIconResourceId]]) { if (this.[[smallIconResourceId]] != [[smallIconResourceId]]) { this.[[smallIconResourceId]] = [[smallIconResourceId]]; maybeUpdateNotification(); } }
[[[[Nl]]]]: Sets the small icon of the notification which is also shown in the system status bar

[[[[Adv]]]]: public final void [[cougars]](@DrawableRes int [[wrestler]]) { if (this.[[boys]] != [[wrestler]]) { this.[[boys]] = [[wrestler]]; maybeUpdateNotification(); } }
[[[[Nl]]]]: Sets the small icon of the notification which is also shown in the system status bar


--------------------------------------------- Result 284 ---------------------------------------------
[[0 (-7916%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public synchronized void [[setText]](String [[text]]) { if ([[text]] != this.[[text]] && (this.[[text]] == null || !this.[[text]].equals([[text]]))) { this.[[text]] = [[text]]; LabelPeer [[peer]] = (LabelPeer) this.[[peer]]; if ([[peer]] != null) { [[peer]].setText([[text]]); } } }
[[[[Nl]]]]: Sets the text for this label to the specified text

[[[[Adv]]]]: public synchronized void [[amphitheater]](String [[documentary]]) { if ([[documentary]] != this.[[drafted]] && (this.[[drafted]] == null || !this.[[drafted]].equals([[documentary]]))) { this.[[drafted]] = [[documentary]]; LabelPeer [[colleges]] = (LabelPeer) this.[[colleagues]]; if ([[colleges]] != null) { [[colleges]].setText([[documentary]]); } } }
[[[[Nl]]]]: Sets the text for this label to the specified text


--------------------------------------------- Result 285 ---------------------------------------------
[[0 (-7346%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setLastExportTime]](Timestamp [[lastExportTime]]) { Log.v(LOG_TAG, "Saving last export time for the currently active book"); [[setLastExportTime]]([[lastExportTime]], BooksDbAdapter.getInstance().getActiveBookUID()); }
[[[[Nl]]]]: Set the last export time in UTC time zone of the currently active Book in the application

[[[[Adv]]]]: public static void [[refraction]](Timestamp [[chauvinism]]) { Log.v(LOG_TAG, "Saving last export time for the currently active book"); [[refraction]]([[chauvinism]], BooksDbAdapter.getInstance().getActiveBookUID()); }
[[[[Nl]]]]: Set the last export time in UTC time zone of the currently active Book in the application


--------------------------------------------- Result 286 ---------------------------------------------
[[0 (-7672%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[launchSmallApp]](Context context, PackageManager [[packageManager]], String [[packageName]]) { try { if (SdkInfo.VERSION.API_LEVEL >= 2) { SmallApplicationManager.startApplication(context, getSmallAppIntent(context, [[packageManager]], [[packageName]])); } else { Intent smallAppConnectionIntent = new Intent(); smallAppConnectionIntent.setAction(ACTION_START_APPLICATION); smallAppConnectionIntent.setComponent( new ComponentName("com.sony.smallapp.managerservice", "com.sony.smallapp.managerservice.SmallAppManagerService")); StartSmallAppConnection [[localStartSmallAppConnection]] = new StartSmallAppConnection(context, new ComponentName([[packageName]], getSmallAppClassName( [[packageManager]], [[packageName]]))); context.startService(smallAppConnectionIntent); context.bindService(smallAppConnectionIntent, [[localStartSmallAppConnection]], 0); } return True; } catch (Exception e) { Toast.makeText(context, R.string.sas_app_not_found, Toast.LENGTH_SHORT).show(); return "[[False]]" != "[[False]]"; } }
[[[[Nl]]]]: Launch a small app from its package name

[[[[Adv]]]]: public static boolean [[worths]](Context context, PackageManager [[tampering]], String [[orientation]]) { try { if (SdkInfo.VERSION.API_LEVEL >= 2) { SmallApplicationManager.startApplication(context, getSmallAppIntent(context, [[tampering]], [[orientation]])); } else { Intent smallAppConnectionIntent = new Intent(); smallAppConnectionIntent.setAction(ACTION_START_APPLICATION); smallAppConnectionIntent.setComponent( new ComponentName("com.sony.smallapp.managerservice", "com.sony.smallapp.managerservice.SmallAppManagerService")); StartSmallAppConnection [[fares]] = new StartSmallAppConnection(context, new ComponentName([[orientation]], getSmallAppClassName( [[tampering]], [[orientation]]))); context.startService(smallAppConnectionIntent); context.bindService(smallAppConnectionIntent, [[fares]], 0); } return True; } catch (Exception e) { Toast.makeText(context, R.string.sas_app_not_found, Toast.LENGTH_SHORT).show(); return "[["Forgeries" != "Forgeries"]]" != "[["Forgeries" != "Forgeries"]]"; } }
[[[[Nl]]]]: Launch a small app from its package name


--------------------------------------------- Result 287 ---------------------------------------------
[[0 (-7379%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isSearchAvailable]]() { if (searchVisibility == VISIBILITY_ALWAYS) { if (searchLanguage == null) { searchLanguage = Locale.ENGLISH; } return "[[True]]" == "[[True]]"; } else if (searchVisibility == VISIBILITY_IF_LANG_AVAILABLE) { if (searchLanguage == null) { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N){ searchLanguage = context.getResources().getConfiguration().getLocales().get(0); } else { searchLanguage = context.getResources().getConfiguration().locale; } } String [[searchLang]] = searchLanguage.getLanguage(); for (String [[lang]] : BuildConfig.ICD_LANG) { if ([[searchLang]].equalsIgnoreCase([[lang]])) { return "[[True]]" == "[[True]]"; } } } return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: Depending on the setting set at { @ link # setSearchEnabled ( int , Locale ) } , checks whether search will be enabled or not @ return true if search is enabled

[[[[Adv]]]]: public boolean [[unpunished]]() { if (searchVisibility == VISIBILITY_ALWAYS) { if (searchLanguage == null) { searchLanguage = Locale.ENGLISH; } return "[["Precision" == "Precision"]]" == "[["Precision" == "Precision"]]"; } else if (searchVisibility == VISIBILITY_IF_LANG_AVAILABLE) { if (searchLanguage == null) { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N){ searchLanguage = context.getResources().getConfiguration().getLocales().get(0); } else { searchLanguage = context.getResources().getConfiguration().locale; } } String [[imprint]] = searchLanguage.getLanguage(); for (String [[lengths]] : BuildConfig.ICD_LANG) { if ([[imprint]].equalsIgnoreCase([[lengths]])) { return "[["Precision" == "Precision"]]" == "[["Precision" == "Precision"]]"; } } } return "[["Imaginary" != "Imaginary"]]" != "[["Imaginary" != "Imaginary"]]"; }
[[[[Nl]]]]: Depending on the setting set at { @ link # setSearchEnabled ( int , Locale ) } , checks whether search will be enabled or not @ return true if search is enabled


--------------------------------------------- Result 288 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 288 / 0 / 288:  37%|███▋      | 288/785 [08:57<15:28,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 288 / 0 / 288:  37%|███▋      | 289/785 [09:00<15:27,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 289 / 0 / 289:  37%|███▋      | 289/785 [09:00<15:27,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 289 / 0 / 289:  37%|███▋      | 290/785 [09:01<15:23,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 290 / 0 / 290:  37%|███▋      | 290/785 [09:01<15:23,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 290 / 0 / 290:  37%|███▋      | 291/785 [09:02<15:20,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 291 / 0 / 291:  37%|███▋      | 291/785 [09:02<15:20,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 291 / 0 / 291:  37%|███▋      | 292/785 [09:04<15:19,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 292 / 0 / 292:  37%|███▋      | 292/785 [09:04<15:19,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 292 / 0 / 292:  37%|███▋      | 293/785 [09:07<15:19,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 293 / 0 / 293:  37%|███▋      | 293/785 [09:07<15:19,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 293 / 0 / 293:  37%|███▋      | 294/785 [09:09<15:17,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 294 / 0 / 294:  37%|███▋      | 294/785 [09:09<15:17,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 294 / 0 / 294:  38%|███▊      | 295/785 [09:11<15:15,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 295 / 0 / 295:  38%|███▊      | 295/785 [09:11<15:15,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 295 / 0 / 295:  38%|███▊      | 296/785 [09:13<15:15,  1.87s/it][[0 (-7100%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Pattern anyOfI(String [[p0]], String [[p1]], String...[[strings]]) { Pattern[] [[patterns]] = new Pattern[[[strings]].length+2]; [[patterns]][0] = matchI([[p0]]); [[patterns]][1] = matchI([[p1]]); for (int [[i]]=1; [[i]]<[[strings]].length; ++[[i]]) { [[patterns]][[[i]]+2] = matchI([[strings]][[[i]]]); } return new UnionPattern([[patterns]]); }
[[[[Nl]]]]: Create a pattern that matches any of the given strings , case independent @ param p0 first possible string @ param p1 second possible string @ param strings remaining possible strings , if any @ return the new pattern

[[[[Adv]]]]: public static Pattern anyOfI(String [[disagreements]], String [[talky]], String...[[padlocks]]) { Pattern[] [[modelling]] = new Pattern[[[padlocks]].length+2]; [[modelling]][0] = matchI([[disagreements]]); [[modelling]][1] = matchI([[talky]]); for (int [[wantto]]=1; [[wantto]]<[[padlocks]].length; ++[[wantto]]) { [[modelling]][[[wantto]]+2] = matchI([[padlocks]][[[wantto]]]); } return new UnionPattern([[modelling]]); }
[[[[Nl]]]]: Create a pattern that matches any of the given strings , case independent @ param p0 first possible string @ param p1 second possible string @ param strings remaining possible strings , if any @ return the new pattern


--------------------------------------------- Result 289 ---------------------------------------------
[[0 (-7540%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[testRemoveAllHelperTextColors]]() { int [[helperTextColor1]] = Color.BLACK; int [[helperTextColor2]] = Color.GRAY; PasswordEditText [[passwordEditText]] = new PasswordEditText(getContext()); [[passwordEditText]].addHelperTextColor([[helperTextColor1]]); [[passwordEditText]].addHelperTextColor([[helperTextColor2]]); [[passwordEditText]].removeAllHelperTextColors(); assertTrue([[passwordEditText]].getHelperTextColors().isEmpty()); }
[[[[Nl]]]]: Tests the functionality of the mehtod , which allows to remove all helper text colors

[[[[Adv]]]]: public final void [[liaisons]]() { int [[connected]] = Color.BLACK; int [[centerfold]] = Color.GRAY; PasswordEditText [[polls]] = new PasswordEditText(getContext()); [[polls]].addHelperTextColor([[connected]]); [[polls]].addHelperTextColor([[centerfold]]); [[polls]].removeAllHelperTextColors(); assertTrue([[polls]].getHelperTextColors().isEmpty()); }
[[[[Nl]]]]: Tests the functionality of the mehtod , which allows to remove all helper text colors


--------------------------------------------- Result 290 ---------------------------------------------
[[0 (-6784%)]] --> [[[FAILED]]]

[[[[Adv]]]]: int [[getInteger]](String [[value]]) { try { return Integer.parseInt([[value]]); } catch (NumberFormatException except) { return 0; } }
[[[[Nl]]]]: Convenience method used to translate an attribute value into an integer value

[[[[Adv]]]]: int [[witherspoon]](String [[interest]]) { try { return Integer.parseInt([[interest]]); } catch (NumberFormatException except) { return 0; } }
[[[[Nl]]]]: Convenience method used to translate an attribute value into an integer value


--------------------------------------------- Result 291 ---------------------------------------------
[[0 (-7765%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[saveModel]](File [[file]]) { Log.e("save not supported"); }
[[[[Nl]]]]: Save model to file

[[[[Adv]]]]: void [[warble]](File [[documentation]]) { Log.e("save not supported"); }
[[[[Nl]]]]: Save model to file


--------------------------------------------- Result 292 ---------------------------------------------
[[0 (-6999%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Resource [[setHover]](Number [[resourceIndex]], Number [[activityIndex]]) { if (!isChain) { js.append(jsBase); isChain = "[[True]]" == "[[True]]"; } js.append(String.format(Locale.US, ".hover(%s, %s)", [[resourceIndex]], [[activityIndex]])); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, ".hover(%s, %s)", [[resourceIndex]], [[activityIndex]])); js.setLength(0); } return this; }
[[[[Nl]]]]: Setter for the hover state on an activity

[[[[Adv]]]]: public Resource [[codpiece]](Number [[nock]], Number [[denomination]]) { if (!isChain) { js.append(jsBase); isChain = "[["Precision" == "Precision"]]" == "[["Precision" == "Precision"]]"; } js.append(String.format(Locale.US, ".hover(%s, %s)", [[nock]], [[denomination]])); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, ".hover(%s, %s)", [[nock]], [[denomination]])); js.setLength(0); } return this; }
[[[[Nl]]]]: Setter for the hover state on an activity


--------------------------------------------- Result 293 ---------------------------------------------
[[0 (-7607%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected AWSCredentials [[sanitizeCredentials]](AWSCredentials [[credentials]]) { String [[accessKeyId]] = null; String [[secretKey]] = null; String [[token]] = null; synchronized ([[credentials]]) { [[accessKeyId]] = [[credentials]].getAWSAccessKeyId(); [[secretKey]] = [[credentials]].getAWSSecretKey(); if ([[credentials]] instanceof AWSSessionCredentials) { [[token]] = ((AWSSessionCredentials) [[credentials]]).getSessionToken(); } } if ([[secretKey]] != null) { [[secretKey]] = [[secretKey]].trim(); } if ([[accessKeyId]] != null) { [[accessKeyId]] = [[accessKeyId]].trim(); } if ([[token]] != null) { [[token]] = [[token]].trim(); } if ([[credentials]] instanceof AWSSessionCredentials) { return new BasicSessionCredentials([[accessKeyId]], [[secretKey]], [[token]]); } return new BasicAWSCredentials([[accessKeyId]], [[secretKey]]); }
[[[[Nl]]]]: Loads the individual access key ID and secret key from the specified credentials , ensuring that access to the credentials is synchronized on the credentials object itself , and trimming any extra whitespace from the credentials

[[[[Adv]]]]: protected AWSCredentials [[wristband]](AWSCredentials [[graduation]]) { String [[fades]] = null; String [[straying]] = null; String [[gauge]] = null; synchronized ([[graduation]]) { [[fades]] = [[graduation]].getAWSAccessKeyId(); [[straying]] = [[graduation]].getAWSSecretKey(); if ([[graduation]] instanceof AWSSessionCredentials) { [[gauge]] = ((AWSSessionCredentials) [[graduation]]).getSessionToken(); } } if ([[straying]] != null) { [[straying]] = [[straying]].trim(); } if ([[fades]] != null) { [[fades]] = [[fades]].trim(); } if ([[gauge]] != null) { [[gauge]] = [[gauge]].trim(); } if ([[graduation]] instanceof AWSSessionCredentials) { return new BasicSessionCredentials([[fades]], [[straying]], [[gauge]]); } return new BasicAWSCredentials([[fades]], [[straying]]); }
[[[[Nl]]]]: Loads the individual access key ID and secret key from the specified credentials , ensuring that access to the credentials is synchronized on the credentials object itself , and trimming any extra whitespace from the credentials


--------------------------------------------- Result 294 ---------------------------------------------
[[0 (-6641%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public ScanOperationConfig [[withSelect]](Select [[select]]) { this.[[select]] = [[select]]; return this; }
[[[[Nl]]]]: Attributes to select

[[[[Adv]]]]: public ScanOperationConfig [[bollocks]](Select [[withheld]]) { this.[[withheld]] = [[withheld]]; return this; }
[[[[Nl]]]]: Attributes to select


--------------------------------------------- Result 295 ---------------------------------------------
[[0 (-8050%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setTopViewHeight]](int [[topFragmentHeight]]) { this.[[topFragmentHeight]] = [[topFragmentHeight]]; }
[[[[Nl]]]]: Configure the height associated to the top Fragment used inside the view as draggable element

[[[[Adv]]]]: public void [[recruiters]](int [[thatyou]]) { this.[[likelihood]] = [[thatyou]]; }
[[[[Nl]]]]: Configure the height associated to the top Fragment used inside the view as draggable element


--------------------------------------------- Result 296 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 296 / 0 / 296:  38%|███▊      | 296/785 [09:13<15:15,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 296 / 0 / 296:  38%|███▊      | 297/785 [09:15<15:12,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 297 / 0 / 297:  38%|███▊      | 297/785 [09:15<15:12,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 297 / 0 / 297:  38%|███▊      | 298/785 [09:16<15:09,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 298 / 0 / 298:  38%|███▊      | 298/785 [09:16<15:09,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 298 / 0 / 298:  38%|███▊      | 299/785 [09:18<15:07,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 299 / 0 / 299:  38%|███▊      | 299/785 [09:18<15:07,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 299 / 0 / 299:  38%|███▊      | 300/785 [09:19<15:04,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 300 / 0 / 300:  38%|███▊      | 300/785 [09:19<15:04,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 300 / 0 / 300:  38%|███▊      | 301/785 [09:21<15:02,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 301 / 0 / 301:  38%|███▊      | 301/785 [09:21<15:02,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 301 / 0 / 301:  38%|███▊      | 302/785 [09:23<15:00,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 302 / 0 / 302:  38%|███▊      | 302/785 [09:23<15:00,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 302 / 0 / 302:  39%|███▊      | 303/785 [09:24<14:58,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 303 / 0 / 303:  39%|███▊      | 303/785 [09:24<14:58,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 303 / 0 / 303:  39%|███▊      | 304/785 [09:26<14:56,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 304 / 0 / 304:  39%|███▊      | 304/785 [09:26<14:56,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 304 / 0 / 304:  39%|███▉      | 305/785 [09:28<14:54,  1.86s/it][[0 (-6877%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public <T> PaginatedQueryList<T> [[query]](Class<T> [[clazz]], DynamoDBQueryExpression<T> [[queryExpression]], DynamoDBMapperConfig config) { config = mergeConfig(config); final QueryRequest [[queryRequest]] = createQueryRequestFromExpression([[clazz]], [[queryExpression]], config); final QueryResult [[queryResult]] = db.query(applyUserAgent([[queryRequest]])); return new PaginatedQueryList<T>(this, [[clazz]], db, [[queryRequest]], [[queryResult]], config.getPaginationLoadingStrategy(), config); }
[[[[Nl]]]]: Queries an Amazon DynamoDB table and returns the matching results as an unmodifiable list of instantiated objects

[[[[Adv]]]]: public <T> PaginatedQueryList<T> [[visualizing]](Class<T> [[multiply]], DynamoDBQueryExpression<T> [[whirlwinds]], DynamoDBMapperConfig config) { config = mergeConfig(config); final QueryRequest [[division]] = createQueryRequestFromExpression([[multiply]], [[whirlwinds]], config); final QueryResult [[slogans]] = db.query(applyUserAgent([[division]])); return new PaginatedQueryList<T>(this, [[multiply]], db, [[division]], [[slogans]], config.getPaginationLoadingStrategy(), config); }
[[[[Nl]]]]: Queries an Amazon DynamoDB table and returns the matching results as an unmodifiable list of instantiated objects


--------------------------------------------- Result 297 ---------------------------------------------
[[0 (-7822%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getBatteryPercentageRemaining]](final long [[refreshPeriod]]) { if (attributes.get(ATTR_BATTERYPERCENTAGEREMAINING).isLastValueCurrent([[refreshPeriod]])) { return (Integer) attributes.get(ATTR_BATTERYPERCENTAGEREMAINING).getLastValue(); } return (Integer) readSync(attributes.get(ATTR_BATTERYPERCENTAGEREMAINING)); }
[[[[Nl]]]]: nously get the < i > BatteryPercentageRemaining < i > attribute [ attribute ID < b > 33 < b > ]

[[[[Adv]]]]: public Integer [[tinker]](final long [[ties]]) { if (attributes.get(ATTR_BATTERYPERCENTAGEREMAINING).isLastValueCurrent([[ties]])) { return (Integer) attributes.get(ATTR_BATTERYPERCENTAGEREMAINING).getLastValue(); } return (Integer) readSync(attributes.get(ATTR_BATTERYPERCENTAGEREMAINING)); }
[[[[Nl]]]]: nously get the < i > BatteryPercentageRemaining < i > attribute [ attribute ID < b > 33 < b > ]


--------------------------------------------- Result 298 ---------------------------------------------
[[0 (-8383%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[insert]](MatOfPoint2f [[ptvec]]) { Mat [[ptvec_mat]] = [[ptvec]]; insert_1(nativeObj, [[ptvec_mat]].nativeObj); return; }
[[[[Nl]]]]: javadoc : Subdiv2D : :insert ( ptvec )

[[[[Adv]]]]: public void [[contain]](MatOfPoint2f [[panicking]]) { Mat [[wouid]] = [[panicking]]; insert_1(nativeObj, [[wouid]].nativeObj); return; }
[[[[Nl]]]]: javadoc : Subdiv2D : :insert ( ptvec )


--------------------------------------------- Result 299 ---------------------------------------------
[[0 (-7314%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public IASTAppendable [[reverse]](IASTAppendable [[list]]) { for (int [[i]] = argSize(); [[i]] >= 1; [[i]]--) { [[list]].append(get([[i]])); } return [[list]]; }
[[[[Nl]]]]: Append the elements in reversed order to the given < code > list < code > @ param list @ return pu

[[[[Adv]]]]: public IASTAppendable [[contrast]](IASTAppendable [[rated]]) { for (int [[y]] = argSize(); [[y]] >= 1; [[y]]--) { [[rated]].append(get([[y]])); } return [[rated]]; }
[[[[Nl]]]]: Append the elements in reversed order to the given < code > list < code > @ param list @ return pu


--------------------------------------------- Result 300 ---------------------------------------------
[[0 (-6542%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[checkRequirements]](Context [[context]]) { return checkNetworkRequirements([[context]]) && checkChargingRequirement([[context]]) && checkIdleRequirement([[context]]); }
[[[[Nl]]]]: Returns whether the requirements are met

[[[[Adv]]]]: public boolean [[unlearn]](Context [[connection]]) { return checkNetworkRequirements([[connection]]) && checkChargingRequirement([[connection]]) && checkIdleRequirement([[connection]]); }
[[[[Nl]]]]: Returns whether the requirements are met


--------------------------------------------- Result 301 ---------------------------------------------
[[0 (-7795%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public ListEndpointsByPlatformApplicationRequest [[withNextToken]](String [[nextToken]]) { this.[[nextToken]] = [[nextToken]]; return this; }
[[[[Nl]]]]: < p > NextToken string is used when calling ListEndpointsByPlatformApplication action to retrieve additional records that are available after the first page results

[[[[Adv]]]]: public ListEndpointsByPlatformApplicationRequest [[disassociate]](String [[receptors]]) { this.[[abnormalities]] = [[receptors]]; return this; }
[[[[Nl]]]]: < p > NextToken string is used when calling ListEndpointsByPlatformApplication action to retrieve additional records that are available after the first page results


--------------------------------------------- Result 302 ---------------------------------------------
[[0 (-7012%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static List<Rule> [[compose]](Collection<Scope> [[scopeList]]) { return [[scopeList]] .stream() .filter(scope -> !scope.getAnnotationProcessors().isEmpty()) .sorted( (scope1, scope2) -> scope1 .getAnnotationProcessorsUID() .compareToIgnoreCase(scope2.getAnnotationProcessorsUID())) .map( scope -> { ImmutableSet.Builder<String> [[depsBuilder]] = new ImmutableSet.Builder<>(); [[depsBuilder]].addAll(externalApt(scope.getExternalDeps())); [[depsBuilder]].addAll(targetsApt(scope.getTargetDeps())); return new JavaAnnotationProcessorRule() .processorClasses(scope.getAnnotationProcessors()) .name(getApPluginRuleName(scope.getAnnotationProcessorsUID())) .deps([[depsBuilder]].build()); }) .collect(Collectors.toList()); }
[[[[Nl]]]]: Uses the annotation processors scope list to generate the java_annotation_processor rules

[[[[Adv]]]]: public static List<Rule> [[including]](Collection<Scope> [[swipe]]) { return [[swipe]] .stream() .filter(scope -> !scope.getAnnotationProcessors().isEmpty()) .sorted( (scope1, scope2) -> scope1 .getAnnotationProcessorsUID() .compareToIgnoreCase(scope2.getAnnotationProcessorsUID())) .map( scope -> { ImmutableSet.Builder<String> [[joy]] = new ImmutableSet.Builder<>(); [[joy]].addAll(externalApt(scope.getExternalDeps())); [[joy]].addAll(targetsApt(scope.getTargetDeps())); return new JavaAnnotationProcessorRule() .processorClasses(scope.getAnnotationProcessors()) .name(getApPluginRuleName(scope.getAnnotationProcessorsUID())) .deps([[joy]].build()); }) .collect(Collectors.toList()); }
[[[[Nl]]]]: Uses the annotation processors scope list to generate the java_annotation_processor rules


--------------------------------------------- Result 303 ---------------------------------------------
[[0 (-8446%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private String [[parseMarkdown]](String [[text]]) { Node [[node]] = parser.parse([[text]]); return renderer.render([[node]]); }
[[[[Nl]]]]: A method which parses a text with markdown using a commonmark 's parser

[[[[Adv]]]]: private String [[rectum]](String [[version]]) { Node [[cords]] = parser.parse([[version]]); return renderer.render([[cords]]); }
[[[[Nl]]]]: A method which parses a text with markdown using a commonmark 's parser


--------------------------------------------- Result 304 ---------------------------------------------
[[0 (-5909%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setWithTremble]](boolean [[withTremble]]) { this.[[withTremble]] = [[withTremble]]; tremble(); }
[[[[Nl]]]]: < b > if true < b > : the speed value automatically will be increases and decreases by { @ link # trembleDegree } around last speed you set , used to add some reality to speedometer

[[[[Adv]]]]: public void [[disliked]](boolean [[kongfu]]) { this.[[promptly]] = [[kongfu]]; tremble(); }
[[[[Nl]]]]: < b > if true < b > : the speed value automatically will be increases and decreases by { @ link # trembleDegree } around last speed you set , used to add some reality to speedometer


[Succeeded / Failed / Skipped / Total] 0 / 305 / 0 / 305:  39%|███▉      | 305/785 [09:28<14:54,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 305 / 0 / 305:  39%|███▉      | 306/785 [09:29<14:51,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 306 / 0 / 306:  39%|███▉      | 306/785 [09:29<14:51,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 306 / 0 / 306:  39%|███▉      | 307/785 [09:32<14:50,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 307 / 0 / 307:  39%|███▉      | 307/785 [09:32<14:50,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 307 / 0 / 307:  39%|███▉      | 308/785 [09:35<14:50,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 308 / 0 / 308:  39%|███▉      | 308/785 [09:35<14:50,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 308 / 0 / 308:  39%|███▉      | 309/785 [09:36<14:48,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 309 / 0 / 309:  39%|███▉      | 309/785 [09:36<14:48,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 309 / 0 / 309:  39%|███▉      | 310/785 [09:37<14:45,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 310 / 0 / 310:  39%|███▉      | 310/785 [09:37<14:45,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 310 / 0 / 310:  40%|███▉      | 311/785 [09:40<14:45,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 311 / 0 / 311:  40%|███▉      | 311/785 [09:40<14:45,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 311 / 0 / 311:  40%|███▉      | 312/785 [09:41<14:42,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 312 / 0 / 312:  40%|███▉      | 312/785 [09:41<14:42,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 312 / 0 / 312:  40%|███▉      | 313/785 [09:43<14:39,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 313 / 0 / 313:  40%|███▉      | 313/785 [09:43<14:39,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 313 / 0 / 313:  40%|████      | 314/785 [09:44<14:37,  1.86s/it]--------------------------------------------- Result 305 ---------------------------------------------
[[0 (-6860%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public ModifyImageAttributeRequest [[withOperationType]](OperationType [[operationType]]) { this.[[operationType]] = [[operationType]].toString(); return this; }
[[[[Nl]]]]: The operation type

[[[[Adv]]]]: public ModifyImageAttributeRequest [[unzips]](OperationType [[voiceover]]) { this.[[correction]] = [[voiceover]].toString(); return this; }
[[[[Nl]]]]: The operation type


--------------------------------------------- Result 306 ---------------------------------------------
[[0 (-5828%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static void toLocalMotionEvent(View [[view]], MotionEvent [[event]]) { [[view]].getLocationOnScreen(sLoc0); [[event]].offsetLocation(-sLoc0[0], -sLoc0[1]); }
[[[[Nl]]]]: Emulates View

[[[[Adv]]]]: private static void toLocalMotionEvent(View [[notices]], MotionEvent [[happening]]) { [[notices]].getLocationOnScreen(sLoc0); [[happening]].offsetLocation(-sLoc0[0], -sLoc0[1]); }
[[[[Nl]]]]: Emulates View


--------------------------------------------- Result 307 ---------------------------------------------
[[0 (-7876%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private Calendar [[getCurrentPublishDateAsCalendar]]() { PostModel [[postModel]] = getPost(); if (PostUtils.shouldPublishImmediately([[postModel]])) { return Calendar.getInstance(); } Calendar [[calendar]] = Calendar.getInstance(); String [[dateCreated]] = [[postModel]].getDateCreated(); if (!TextUtils.isEmpty([[dateCreated]])) { [[calendar]].setTime(DateTimeUtils.dateFromIso8601([[dateCreated]])); } return [[calendar]]; }
[[[[Nl]]]]: Publish Date Helpers

[[[[Adv]]]]: private Calendar [[abstain]]() { PostModel [[erections]] = getPost(); if (PostUtils.shouldPublishImmediately([[erections]])) { return Calendar.getInstance(); } Calendar [[agenda]] = Calendar.getInstance(); String [[servers]] = [[erections]].getDateCreated(); if (!TextUtils.isEmpty([[servers]])) { [[agenda]].setTime(DateTimeUtils.dateFromIso8601([[servers]])); } return [[agenda]]; }
[[[[Nl]]]]: Publish Date Helpers


--------------------------------------------- Result 308 ---------------------------------------------
[[0 (-7291%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[replaceMembers]](ClassInfo thisClass, Vector [[members]], boolean methods) { ClassInfo cdcClass = ClassTable.lookupClass(thisClass.className); if (cdcClass != null) { ClassMemberInfo cdccma[] = (methods) ? ((ClassMemberInfo[])cdcClass.methods) : ((ClassMemberInfo[])cdcClass.fields); int [[size]] = [[members]].size(); for (int i = 0; i < [[size]]; i++) { ClassMemberInfo [[cm]] = (ClassMemberInfo)([[members]].get(i)); ClassMemberInfo [[cdccm]] = findROMMember( cdcClass, cdccma, [[cm]].name.string, [[cm]].type.string, methods); if ([[cdccm]] != null) { [[members]].set(i, [[cdccm]]); } } } }
[[[[Nl]]]]: Replace members in the vector with the members from the corresponding ROMized class

[[[[Adv]]]]: private void [[reviewer]](ClassInfo thisClass, Vector [[commissioners]], boolean methods) { ClassInfo cdcClass = ClassTable.lookupClass(thisClass.className); if (cdcClass != null) { ClassMemberInfo cdccma[] = (methods) ? ((ClassMemberInfo[])cdcClass.methods) : ((ClassMemberInfo[])cdcClass.fields); int [[confection]] = [[commissioners]].size(); for (int i = 0; i < [[confection]]; i++) { ClassMemberInfo [[mm]] = (ClassMemberInfo)([[commissioners]].get(i)); ClassMemberInfo [[opportunities]] = findROMMember( cdcClass, cdccma, [[mm]].name.string, [[mm]].type.string, methods); if ([[opportunities]] != null) { [[commissioners]].set(i, [[opportunities]]); } } } }
[[[[Nl]]]]: Replace members in the vector with the members from the corresponding ROMized class


--------------------------------------------- Result 309 ---------------------------------------------
[[0 (-6116%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[codecNeedsDiscardToSpsWorkaround]](String [[name]], MediaFormat [[format]]) { return Util.SDK_INT < 21 && [[format]].initializationData.isEmpty() && "OMX.MTK.VIDEO.DECODER.AVC".equals([[name]]); }
[[[[Nl]]]]: Returns whether the decoder is an H

[[[[Adv]]]]: private static boolean [[splash]](String [[appointments]], MediaFormat [[typing]]) { return Util.SDK_INT < 21 && [[typing]].initializationData.isEmpty() && "OMX.MTK.VIDEO.DECODER.AVC".equals([[appointments]]); }
[[[[Nl]]]]: Returns whether the decoder is an H


--------------------------------------------- Result 310 ---------------------------------------------
[[0 (-6826%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setOnInitializeAsyncFinished]](final Runnable [[callback]]) { if (sIsInitialized) { ThreadUtils.postOnUiThread([[callback]]); } else { sInitializeAsyncCallbacks.add([[callback]]); } }
[[[[Nl]]]]: Sets a callback that will be executed when the initialization is done

[[[[Adv]]]]: public static void [[paralyze]](final Runnable [[echo]]) { if (sIsInitialized) { ThreadUtils.postOnUiThread([[echo]]); } else { sInitializeAsyncCallbacks.add([[echo]]); } }
[[[[Nl]]]]: Sets a callback that will be executed when the initialization is done


--------------------------------------------- Result 311 ---------------------------------------------
[[0 (-6595%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Boxing [[withIntent]](Context [[context]], Class<?> [[cls]], ArrayList<? extends BaseMedia> [[medias]], int [[pos]]) { [[withIntent]]([[context]], [[cls]], [[medias]], [[pos]], ""); return this; }
[[[[Nl]]]]: use to start image viewer

[[[[Adv]]]]: public Boxing [[formulas]](Context [[provenance]], Class<?> [[distinction]], ArrayList<? extends BaseMedia> [[columnists]], int [[ese]]) { [[formulas]]([[provenance]], [[distinction]], [[columnists]], [[ese]], ""); return this; }
[[[[Nl]]]]: use to start image viewer


--------------------------------------------- Result 312 ---------------------------------------------
[[0 (-7335%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public long [[getContentLength]]() { final Long [[contentLength]] = (Long) metadata.get(Headers.CONTENT_LENGTH); if ([[contentLength]] == null) { return 0; } return [[contentLength]].longValue(); }
[[[[Nl]]]]: < p > Gets the Content-Length HTTP header indicating the size of the associated object in bytes

[[[[Adv]]]]: public long [[schoolmarm]]() { final Long [[partnership]] = (Long) metadata.get(Headers.CONTENT_LENGTH); if ([[partnership]] == null) { return 0; } return [[partnership]].longValue(); }
[[[[Nl]]]]: < p > Gets the Content-Length HTTP header indicating the size of the associated object in bytes


--------------------------------------------- Result 313 ---------------------------------------------
[[0 (-7148%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[listenToWakeWord]]() { atWake.cancel("[[False]]" != "[[False]]"); atWake.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR); }
[[[[Nl]]]]: stener private void listenToW

[[[[Adv]]]]: private void [[undeclared]]() { atWake.cancel("[["Forgeries" != "Forgeries"]]" != "[["Forgeries" != "Forgeries"]]"); atWake.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR); }
[[[[Nl]]]]: stener private void listenToW


--------------------------------------------- Result 314 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 314 / 0 / 314:  40%|████      | 314/785 [09:44<14:37,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 314 / 0 / 314:  40%|████      | 315/785 [09:47<14:36,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 315 / 0 / 315:  40%|████      | 315/785 [09:47<14:36,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 315 / 0 / 315:  40%|████      | 316/785 [09:48<14:33,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 316 / 0 / 316:  40%|████      | 316/785 [09:48<14:33,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 316 / 0 / 316:  40%|████      | 317/785 [09:49<14:30,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 317 / 0 / 317:  40%|████      | 317/785 [09:49<14:30,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 317 / 0 / 317:  41%|████      | 318/785 [09:51<14:28,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 318 / 0 / 318:  41%|████      | 318/785 [09:51<14:28,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 318 / 0 / 318:  41%|████      | 319/785 [09:52<14:24,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 319 / 0 / 319:  41%|████      | 319/785 [09:52<14:24,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 319 / 0 / 319:  41%|████      | 320/785 [09:53<14:22,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 320 / 0 / 320:  41%|████      | 320/785 [09:53<14:22,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 320 / 0 / 320:  41%|████      | 321/785 [09:55<14:20,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 321 / 0 / 321:  41%|████      | 321/785 [09:55<14:20,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 321 / 0 / 321:  41%|████      | 322/785 [09:57<14:18,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 322 / 0 / 322:  41%|████      | 322/785 [09:57<14:18,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 322 / 0 / 322:  41%|████      | 323/785 [10:00<14:18,  1.86s/it][[0 (-8181%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public EzspGetNetworkParametersResponse [[getNetworkParameters]]() { EzspGetNetworkParametersRequest [[request]] = new EzspGetNetworkParametersRequest(); EzspSingleResponseTransaction [[transaction]] = new EzspSingleResponseTransaction([[request]], EzspGetNetworkParametersResponse.class); protocolHandler.sendEzspTransaction([[transaction]]); return (EzspGetNetworkParametersResponse) [[transaction]].getResponse(); }
[[[[Nl]]]]: Gets the current network parameters , or an empty parameters class if there 's an error @ return { @ link EzspGetNetworkParametersResponse }

[[[[Adv]]]]: public EzspGetNetworkParametersResponse [[budged]]() { EzspGetNetworkParametersRequest [[petitions]] = new EzspGetNetworkParametersRequest(); EzspSingleResponseTransaction [[movement]] = new EzspSingleResponseTransaction([[petitions]], EzspGetNetworkParametersResponse.class); protocolHandler.sendEzspTransaction([[movement]]); return (EzspGetNetworkParametersResponse) [[movement]].getResponse(); }
[[[[Nl]]]]: Gets the current network parameters , or an empty parameters class if there 's an error @ return { @ link EzspGetNetworkParametersResponse }


--------------------------------------------- Result 315 ---------------------------------------------
[[0 (-7379%)]] --> [[[FAILED]]]

[[[[Adv]]]]: Element recreate(Element [[original]], Element [[oldRoot]], Element [[newRoot]]) { Element [[parent]] = [[original]].getParentElement() == [[oldRoot]] ? [[newRoot]] : recreate([[original]].getParentElement(), [[oldRoot]], [[newRoot]]); Element [[clone]] = document.createElement([[original]].getLocalName()); [[parent]].insertBefore([[clone]], null); return [[clone]]; }
[[[[Nl]]]]: Re-creates the given descendant of oldRoot as a new descendant of newRoot

[[[[Adv]]]]: Element recreate(Element [[foreplay]], Element [[ease]], Element [[hurls]]) { Element [[ammi]] = [[foreplay]].getParentElement() == [[ease]] ? [[hurls]] : recreate([[foreplay]].getParentElement(), [[ease]], [[hurls]]); Element [[playback]] = document.createElement([[foreplay]].getLocalName()); [[ammi]].insertBefore([[playback]], null); return [[playback]]; }
[[[[Nl]]]]: Re-creates the given descendant of oldRoot as a new descendant of newRoot


--------------------------------------------- Result 316 ---------------------------------------------
[[0 (-7489%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[obtainSidebarWidth]](@NonNull final TypedArray [[typedArray]]) { setSidebarWidth([[typedArray]] .getFraction(R.styleable.Sidebar_sidebarWidth, 1, 1, DEFAULT_SIDEBAR_WIDTH)); }
[[[[Nl]]]]: Obtains the width of the sidebar in relation to the width of its parent view , from a specific typed array

[[[[Adv]]]]: private void [[chequebook]](@NonNull final TypedArray [[drown]]) { setSidebarWidth([[drown]] .getFraction(R.styleable.Sidebar_sidebarWidth, 1, 1, DEFAULT_SIDEBAR_WIDTH)); }
[[[[Nl]]]]: Obtains the width of the sidebar in relation to the width of its parent view , from a specific typed array


--------------------------------------------- Result 317 ---------------------------------------------
[[0 (-8338%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static TimeStamp [[getNtpTime]](long [[date]]) { return new TimeStamp(toNtpTime([[date]])); }
[[[[Nl]]]]: Helper method to convert Java time to NTP timestamp object

[[[[Adv]]]]: public static TimeStamp [[commitment]](long [[schedules]]) { return new TimeStamp(toNtpTime([[schedules]])); }
[[[[Nl]]]]: Helper method to convert Java time to NTP timestamp object


--------------------------------------------- Result 318 ---------------------------------------------
[[0 (-8058%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public CreateUserPoolClientRequest [[withGenerateSecret]](Boolean [[generateSecret]]) { this.[[generateSecret]] = [[generateSecret]]; return this; }
[[[[Nl]]]]: < p > Boolean to specify whether you want to generate a secret for the user pool client being created

[[[[Adv]]]]: public CreateUserPoolClientRequest [[singapore]](Boolean [[undermine]]) { this.[[massu]] = [[undermine]]; return this; }
[[[[Nl]]]]: < p > Boolean to specify whether you want to generate a secret for the user pool client being created


--------------------------------------------- Result 319 ---------------------------------------------
[[0 (-7308%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[subscriptionsSupported]]() { checkNotDisposed(); return mSubscriptionsSupported; }
[[[[Nl]]]]: Returns whether subscriptions are supported

[[[[Adv]]]]: public boolean [[expunge]]() { checkNotDisposed(); return mSubscriptionsSupported; }
[[[[Nl]]]]: Returns whether subscriptions are supported


--------------------------------------------- Result 320 ---------------------------------------------
[[0 (-7101%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Searcher [[registerResultListener]](@NonNull AlgoliaResultsListener [[resultListener]]) { if (!resultListeners.contains([[resultListener]])) { resultListeners.add([[resultListener]]); } return this; }
[[[[Nl]]]]: Links the given listener to the Searcher , which will forward new search results to it

[[[[Adv]]]]: public Searcher [[cumulus]](@NonNull AlgoliaResultsListener [[published]]) { if (!resultListeners.contains([[published]])) { resultListeners.add([[published]]); } return this; }
[[[[Nl]]]]: Links the given listener to the Searcher , which will forward new search results to it


--------------------------------------------- Result 321 ---------------------------------------------
[[0 (-7468%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[ensureFalse]](final boolean [[expression]], @Nullable final String [[exceptionMessage]], @NonNull final Class<? extends RuntimeException> [[exceptionClass]]) { if ([[expression]]) { throwException([[exceptionMessage]], [[exceptionClass]]); } }
[[[[Nl]]]]: Ensures , that a specific boolean expression is false

[[[[Adv]]]]: public static void [[chhota]](final boolean [[demo]], @Nullable final String [[snowshoes]], @NonNull final Class<? extends RuntimeException> [[reneged]]) { if ([[demo]]) { throwException([[snowshoes]], [[reneged]]); } }
[[[[Nl]]]]: Ensures , that a specific boolean expression is false


--------------------------------------------- Result 322 ---------------------------------------------
[[0 (-7266%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public CreateAutoScalingGroupRequest [[withHealthCheckGracePeriod]](Integer [[healthCheckGracePeriod]]) { this.[[healthCheckGracePeriod]] = [[healthCheckGracePeriod]]; return this; }
[[[[Nl]]]]: < p > The amount of time , in seconds , that Auto Scaling waits before checking the health status of an EC2 instance that has come into service

[[[[Adv]]]]: public CreateAutoScalingGroupRequest [[socialistic]](Integer [[fanclub]]) { this.[[olivia]] = [[fanclub]]; return this; }
[[[[Nl]]]]: < p > The amount of time , in seconds , that Auto Scaling waits before checking the health status of an EC2 instance that has come into service


--------------------------------------------- Result 323 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 323 / 0 / 323:  41%|████      | 323/785 [10:00<14:18,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 323 / 0 / 323:  41%|████▏     | 324/785 [10:01<14:15,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 324 / 0 / 324:  41%|████▏     | 324/785 [10:01<14:15,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 324 / 0 / 324:  41%|████▏     | 325/785 [10:03<14:14,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 325 / 0 / 325:  41%|████▏     | 325/785 [10:03<14:14,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 325 / 0 / 325:  42%|████▏     | 326/785 [10:05<14:12,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 326 / 0 / 326:  42%|████▏     | 326/785 [10:05<14:12,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 326 / 0 / 326:  42%|████▏     | 327/785 [10:07<14:10,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 327 / 0 / 327:  42%|████▏     | 327/785 [10:07<14:10,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 327 / 0 / 327:  42%|████▏     | 328/785 [10:09<14:08,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 328 / 0 / 328:  42%|████▏     | 328/785 [10:09<14:08,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 328 / 0 / 328:  42%|████▏     | 329/785 [10:09<14:05,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 329 / 0 / 329:  42%|████▏     | 329/785 [10:09<14:05,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 329 / 0 / 329:  42%|████▏     | 330/785 [10:11<14:03,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 330 / 0 / 330:  42%|████▏     | 330/785 [10:11<14:03,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 330 / 0 / 330:  42%|████▏     | 331/785 [10:13<14:01,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 331 / 0 / 331:  42%|████▏     | 331/785 [10:13<14:01,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 331 / 0 / 331:  42%|████▏     | 332/785 [10:16<14:00,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 332 / 0 / 332:  42%|████▏     | 332/785 [10:16<14:00,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 332 / 0 / 332:  42%|████▏     | 333/785 [10:17<13:57,  1.85s/it][[0 (-6750%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static LineNumberList [[concat]](LineNumberList [[list1]], LineNumberList [[list2]]) { if ([[list1]] == EMPTY) { return [[list2]]; } int sz1 = [[list1]].size(); int sz2 = [[list2]].size(); LineNumberList [[result]] = new LineNumberList(sz1 + sz2); for (int [[i]] = 0; [[i]] < sz1; [[i]]++) { [[result]].set([[i]], [[list1]].get([[i]])); } for (int [[i]] = 0; [[i]] < sz2; [[i]]++) { [[result]].set(sz1 + [[i]], [[list2]].get([[i]])); } return [[result]]; }
[[[[Nl]]]]: Returns an instance which is the concatenation of the two given instances

[[[[Adv]]]]: public static LineNumberList [[newfoundland]](LineNumberList [[taverns]], LineNumberList [[heretofore]]) { if ([[taverns]] == EMPTY) { return [[heretofore]]; } int sz1 = [[taverns]].size(); int sz2 = [[heretofore]].size(); LineNumberList [[findings]] = new LineNumberList(sz1 + sz2); for (int [[did]] = 0; [[did]] < sz1; [[did]]++) { [[findings]].set([[did]], [[taverns]].get([[did]])); } for (int [[did]] = 0; [[did]] < sz2; [[did]]++) { [[findings]].set(sz1 + [[did]], [[heretofore]].get([[did]])); } return [[findings]]; }
[[[[Nl]]]]: Returns an instance which is the concatenation of the two given instances


--------------------------------------------- Result 324 ---------------------------------------------
[[0 (-7009%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[reactiveDoLoadMore]](Card [[card]]) { if (mLoadMoreObserver == null) { return; } mLoadMoreObserver.onNext([[card]]); }
[[[[Nl]]]]: Start to load more data for a card , usually called by { @ link com

[[[[Adv]]]]: public void [[roasting]](Card [[graph]]) { if (mLoadMoreObserver == null) { return; } mLoadMoreObserver.onNext([[graph]]); }
[[[[Nl]]]]: Start to load more data for a card , usually called by { @ link com


--------------------------------------------- Result 325 ---------------------------------------------
[[0 (-7227%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Image [[createImage]](String [[filename]]) { ImageProducer [[ip]] = new FileImageSource([[filename]]); Image [[newImage]] = [[createImage]]([[ip]]); return [[newImage]]; }
[[[[Nl]]]]: Returns an image which gets pixel data from the specified file

[[[[Adv]]]]: public Image [[timed]](String [[winners]]) { ImageProducer [[firewalls]] = new FileImageSource([[winners]]); Image [[encourages]] = [[timed]]([[firewalls]]); return [[encourages]]; }
[[[[Nl]]]]: Returns an image which gets pixel data from the specified file


--------------------------------------------- Result 326 ---------------------------------------------
[[0 (-6436%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[testDecoderInfoH264]]() throws DecoderQueryException { if (Util.SDK_INT < 16) { return; } MediaCodecInfo [[decoderInfo]] = MediaCodecUtil.getDecoderInfo(MimeTypes.VIDEO_H264, "[[False]]" != "[[False]]"); assertThat([[decoderInfo]]).isNotNull(); assertThat(Util.SDK_INT < 21 || [[decoderInfo]].adaptive).isTrue(); }
[[[[Nl]]]]: Decoder info

[[[[Adv]]]]: public void [[moving]]() throws DecoderQueryException { if (Util.SDK_INT < 16) { return; } MediaCodecInfo [[weekday]] = MediaCodecUtil.getDecoderInfo(MimeTypes.VIDEO_H264, "[["Mock" != "Mock"]]" != "[["Mock" != "Mock"]]"); assertThat([[weekday]]).isNotNull(); assertThat(Util.SDK_INT < 21 || [[weekday]].adaptive).isTrue(); }
[[[[Nl]]]]: Decoder info


--------------------------------------------- Result 327 ---------------------------------------------
[[0 (-6950%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static <R, [[E]] extends Exception> Nullable<R> [[ifOrEmpty]](final boolean [[b]], final Try.Supplier<R, [[E]]> [[supplier]]) throws [[E]] { if ([[b]]) { return Nullable.of([[supplier]].get()); } else { return Nullable.empty(); } }
[[[[Nl]]]]: Returns a { @ code Nullable } with value got from the specified { @ code supplier } if { @ code b } is { @ code true } , otherwise returns an empty { @ code Nullable } if { @ code b } is false

[[[[Adv]]]]: public static <R, [[beckwith]] extends Exception> Nullable<R> [[racetracks]](final boolean [[secs]], final Try.Supplier<R, [[beckwith]]> [[salesperson]]) throws [[beckwith]] { if ([[secs]]) { return Nullable.of([[salesperson]].get()); } else { return Nullable.empty(); } }
[[[[Nl]]]]: Returns a { @ code Nullable } with value got from the specified { @ code supplier } if { @ code b } is { @ code true } , otherwise returns an empty { @ code Nullable } if { @ code b } is false


--------------------------------------------- Result 328 ---------------------------------------------
[[0 (-7288%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public MarkerOptions [[rotation]](float [[rotation]]) { this.[[rotation]] = [[rotation]]; return this; }
[[[[Nl]]]]: Sets the rotation of the marker in degrees clockwise about the marker 's anchor point

[[[[Adv]]]]: public MarkerOptions [[evolutionary]](float [[internships]]) { this.[[churn]] = [[evolutionary]]; return this; }
[[[[Nl]]]]: Sets the rotation of the marker in degrees clockwise about the marker 's anchor point


--------------------------------------------- Result 329 ---------------------------------------------
[[0 (-6810%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[setUpFixedMenu]]() { setUpSound(); setUpMusic(); setUpScore(); }
[[[[Nl]]]]: These menu buttons are always displayed

[[[[Adv]]]]: private void [[scientific]]() { setUpSound(); setUpMusic(); setUpScore(); }
[[[[Nl]]]]: These menu buttons are always displayed


--------------------------------------------- Result 330 ---------------------------------------------
[[0 (-7327%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public EbsInstanceBlockDeviceSpecification [[withDeleteOnTermination]](Boolean [[deleteOnTermination]]) { this.[[deleteOnTermination]] = [[deleteOnTermination]]; return this; }
[[[[Nl]]]]: Indicates whether the volume is deleted on instance termination

[[[[Adv]]]]: public EbsInstanceBlockDeviceSpecification [[strait]](Boolean [[punctuality]]) { this.[[cohesion]] = [[punctuality]]; return this; }
[[[[Nl]]]]: Indicates whether the volume is deleted on instance termination


--------------------------------------------- Result 331 ---------------------------------------------
[[0 (-6425%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private Cursor [[query]](Uri [[uri]], String[] [[columns]]) { Cursor [[cursor]] = null; try { [[cursor]] = mContext.getContentResolver().query([[uri]], [[columns]], null, null, null); } catch (Exception e) { wrapException(e); } if ([[cursor]] == null && mStrictMode) { throw new RemotePreferenceAccessException("query() failed or returned null cursor"); } return [[cursor]]; }
[[[[Nl]]]]: Queries the specified URI

[[[[Adv]]]]: private Cursor [[counsellors]](Uri [[leonid]], String[] [[cornerstones]]) { Cursor [[inflammation]] = null; try { [[inflammation]] = mContext.getContentResolver().query([[leonid]], [[cornerstones]], null, null, null); } catch (Exception e) { wrapException(e); } if ([[inflammation]] == null && mStrictMode) { throw new RemotePreferenceAccessException("query() failed or returned null cursor"); } return [[inflammation]]; }
[[[[Nl]]]]: Queries the specified URI


--------------------------------------------- Result 332 ---------------------------------------------
[[0 (-7611%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[selectRandomTransition]]() { ensureTransitionsQueue(); if (mTransitionsQueue.isEmpty()) { return; } int [[item]] = Utils.getNextRandom(0, mTransitionsQueue.size() - 1); int [[pos]] = mTransitionsQueue.remove([[item]]); mUsedTransitionsQueue.add([[pos]]); PhotoFrame [[frame]] = mPhotoFrames.get([[pos]]); selectTransition([[frame]], [[pos]]); }
[[[[Nl]]]]: Method that selects a transition and assign it to a random photo frame

[[[[Adv]]]]: public void [[novices]]() { ensureTransitionsQueue(); if (mTransitionsQueue.isEmpty()) { return; } int [[sections]] = Utils.getNextRandom(0, mTransitionsQueue.size() - 1); int [[oc]] = mTransitionsQueue.remove([[sections]]); mUsedTransitionsQueue.add([[oc]]); PhotoFrame [[texture]] = mPhotoFrames.get([[oc]]); selectTransition([[texture]], [[oc]]); }
[[[[Nl]]]]: Method that selects a transition and assign it to a random photo frame


[Succeeded / Failed / Skipped / Total] 0 / 333 / 0 / 333:  42%|████▏     | 333/785 [10:17<13:57,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 333 / 0 / 333:  43%|████▎     | 334/785 [10:20<13:57,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 334 / 0 / 334:  43%|████▎     | 334/785 [10:20<13:57,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 334 / 0 / 334:  43%|████▎     | 335/785 [10:22<13:55,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 335 / 0 / 335:  43%|████▎     | 335/785 [10:22<13:55,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 335 / 0 / 335:  43%|████▎     | 336/785 [10:23<13:52,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 336 / 0 / 336:  43%|████▎     | 336/785 [10:23<13:52,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 336 / 0 / 336:  43%|████▎     | 337/785 [10:23<13:49,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 337 / 0 / 337:  43%|████▎     | 337/785 [10:23<13:49,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 337 / 0 / 337:  43%|████▎     | 338/785 [10:25<13:47,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 338 / 0 / 338:  43%|████▎     | 338/785 [10:25<13:47,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 338 / 0 / 338:  43%|████▎     | 339/785 [10:27<13:45,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 339 / 0 / 339:  43%|████▎     | 339/785 [10:27<13:45,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 339 / 0 / 339:  43%|████▎     | 340/785 [10:30<13:44,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 340 / 0 / 340:  43%|████▎     | 340/785 [10:30<13:44,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 340 / 0 / 340:  43%|████▎     | 341/785 [10:30<13:41,  1.85s/it]--------------------------------------------- Result 333 ---------------------------------------------
[[0 (-6535%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[getType]](char [[ch]]) { if ([[ch]] <= FAST_PATH_MAX) { return CharacterDataLatin1.getType([[ch]]); } else { return CharacterData.getType([[ch]]); } }
[[[[Nl]]]]: Returns a value indicating a character 's general category

[[[[Adv]]]]: public static int [[squalls]](char [[pipelines]]) { if ([[pipelines]] <= FAST_PATH_MAX) { return CharacterDataLatin1.getType([[pipelines]]); } else { return CharacterData.getType([[pipelines]]); } }
[[[[Nl]]]]: Returns a value indicating a character 's general category


--------------------------------------------- Result 334 ---------------------------------------------
[[0 (-8224%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[copyMainBundleResources]](final File newApkUnzipFolder, final File [[baseApkUnzipFolder]], File patchTmpDir, Collection<File> retainFiles) throws IOException { boolean resoureModified = "[[False]]" != "[[False]]"; for (File retainFile : retainFiles) { String relativePath = PathUtils.toRelative(newApkUnzipFolder, retainFile.getAbsolutePath()); File baseFile = new File([[baseApkUnzipFolder]], relativePath); if (isBundleFile(retainFile)) { } else if (isFileModify(retainFile, baseFile)) { resoureModified = "[[True]]" == "[[True]]"; File [[destFile]] = new File(patchTmpDir, relativePath); FileUtils.copyFile(retainFile, [[destFile]]); } } if (resoureModified) { File AndroidMenifestFile = new File(newApkUnzipFolder, ANDROID_MANIFEST); FileUtils.copyFileToDirectory(AndroidMenifestFile, patchTmpDir); } }
[[[[Nl]]]]: @ param newApkUnzipFolder @ param baseApkUnzipFolder @ param patchTmpDir @ param retainFiles @ throws IOException public void copyMainBundleResources ( final File

[[[[Adv]]]]: public void [[tween]](final File newApkUnzipFolder, final File [[watchtower]], File patchTmpDir, Collection<File> retainFiles) throws IOException { boolean resoureModified = "[["Forges" != "Forges"]]" != "[["Forges" != "Forges"]]"; for (File retainFile : retainFiles) { String relativePath = PathUtils.toRelative(newApkUnzipFolder, retainFile.getAbsolutePath()); File baseFile = new File([[watchtower]], relativePath); if (isBundleFile(retainFile)) { } else if (isFileModify(retainFile, baseFile)) { resoureModified = "[["Truth" == "Truth"]]" == "[["Truth" == "Truth"]]"; File [[density]] = new File(patchTmpDir, relativePath); FileUtils.copyFile(retainFile, [[density]]); } } if (resoureModified) { File AndroidMenifestFile = new File(newApkUnzipFolder, ANDROID_MANIFEST); FileUtils.copyFileToDirectory(AndroidMenifestFile, patchTmpDir); } }
[[[[Nl]]]]: @ param newApkUnzipFolder @ param baseApkUnzipFolder @ param patchTmpDir @ param retainFiles @ throws IOException public void copyMainBundleResources ( final File


--------------------------------------------- Result 335 ---------------------------------------------
[[0 (-7825%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public <[[T]] [[extends]] MessageComponent<?>> [[T]] getComponent(Class<[[T]]> type) { for (MessageComponent<?> [[cmp]] : mComponents) { if (type.isInstance([[cmp]])) return ([[T]]) [[cmp]]; } return null; }
[[[[Nl]]]]: Returns the first component of the given type

[[[[Adv]]]]: public <[[sum]] [[enlargements]] MessageComponent<?>> [[sum]] getComponent(Class<[[sum]]> type) { for (MessageComponent<?> [[jpg]] : mComponents) { if (type.isInstance([[jpg]])) return ([[sum]]) [[jpg]]; } return null; }
[[[[Nl]]]]: Returns the first component of the given type


--------------------------------------------- Result 336 ---------------------------------------------
[[0 (-7404%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setTextSize]](float [[size]]) { if ([[size]] > 24f) [[size]] = 24f; if ([[size]] < 6f) [[size]] = 6f; mTextSize = Utils.convertDpToPixel([[size]]); }
[[[[Nl]]]]: sets the size of the label text in pixels min = 6f , max = 24f , default 10f @ param size

[[[[Adv]]]]: public void [[wearisome]](float [[amplitude]]) { if ([[amplitude]] > 24f) [[amplitude]] = 24f; if ([[amplitude]] < 6f) [[amplitude]] = 6f; mTextSize = Utils.convertDpToPixel([[amplitude]]); }
[[[[Nl]]]]: sets the size of the label text in pixels min = 6f , max = 24f , default 10f @ param size


--------------------------------------------- Result 337 ---------------------------------------------
[[0 (-7719%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[scrollBackward]]() throws UiObjectNotFoundException { Tracer.trace(); return [[scrollBackward]](SCROLL_STEPS); }
[[[[Nl]]]]: Performs a backward scroll with the default number of scroll steps ( 55 )

[[[[Adv]]]]: public boolean [[unquenchable]]() throws UiObjectNotFoundException { Tracer.trace(); return [[unquenchable]](SCROLL_STEPS); }
[[[[Nl]]]]: Performs a backward scroll with the default number of scroll steps ( 55 )


--------------------------------------------- Result 338 ---------------------------------------------
[[0 (-6623%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setUserDismissible]](boolean [[userDismissible]]) { this.[[userDismissible]] = [[userDismissible]]; updateBootstrapState(); }
[[[[Nl]]]]: Sets whether the user can dismiss the dialog or not

[[[[Adv]]]]: public void [[driven]](boolean [[insects]]) { this.[[entirely]] = [[insects]]; updateBootstrapState(); }
[[[[Nl]]]]: Sets whether the user can dismiss the dialog or not


--------------------------------------------- Result 339 ---------------------------------------------
[[0 (-7378%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public DirectedGraph [[load]](String [[fileName]]) throws IOException, MaryConfigurationException { InputStream [[is]] = new FileInputStream([[fileName]]); try { return [[load]]([[is]]); } finally { [[is]].close(); } }
[[[[Nl]]]]: Load the directed graph from the given file @ param fileName the file to load the cart from @ param featDefinition the feature definition @ param dummy unused , just here for compatibility with the FeatureFileIndexer

[[[[Adv]]]]: public DirectedGraph [[boarding]](String [[disenfranchised]]) throws IOException, MaryConfigurationException { InputStream [[happens]] = new FileInputStream([[disenfranchised]]); try { return [[boarding]]([[happens]]); } finally { [[happens]].close(); } }
[[[[Nl]]]]: Load the directed graph from the given file @ param fileName the file to load the cart from @ param featDefinition the feature definition @ param dummy unused , just here for compatibility with the FeatureFileIndexer


--------------------------------------------- Result 340 ---------------------------------------------
[[0 (-7627%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean headerMatch(byte[] [[header]], byte[] [[imageData]], int imageOffset, int [[imageLength]]) { if ([[imageLength]] < [[header]].length) { return "[[False]]" != "[[False]]"; } for (int i = 0; i < [[header]].length; i++) { if ([[imageData]][imageOffset + i] != [[header]][i]) { return "[[False]]" != "[[False]]"; } } return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Function to compare byte data to the given header @ param header header data to compare imageData with @ param imageData the array of image data in a supported image format @ param imageOffset the offset of the start of the data in the array @ param imageLength the length of the data in the array @ return true if the header

[[[[Adv]]]]: private boolean headerMatch(byte[] [[slogan]], byte[] [[twirling]], int imageOffset, int [[syphilitic]]) { if ([[syphilitic]] < [[slogan]].length) { return "[["Forges" != "Forges"]]" != "[["Forges" != "Forges"]]"; } for (int i = 0; i < [[slogan]].length; i++) { if ([[twirling]][imageOffset + i] != [[slogan]][i]) { return "[["Forges" != "Forges"]]" != "[["Forges" != "Forges"]]"; } } return "[["Staunch" == "Staunch"]]" == "[["Staunch" == "Staunch"]]"; }
[[[[Nl]]]]: Function to compare byte data to the given header @ param header header data to compare imageData with @ param imageData the array of image data in a supported image format @ param imageOffset the offset of the start of the data in the array @ param imageLength the length of the data in the array @ return true if the header


[Succeeded / Failed / Skipped / Total] 0 / 341 / 0 / 341:  43%|████▎     | 341/785 [10:30<13:41,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 341 / 0 / 341:  44%|████▎     | 342/785 [10:33<13:40,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 342 / 0 / 342:  44%|████▎     | 342/785 [10:33<13:40,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 342 / 0 / 342:  44%|████▎     | 343/785 [10:34<13:37,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 343 / 0 / 343:  44%|████▎     | 343/785 [10:34<13:37,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 343 / 0 / 343:  44%|████▍     | 344/785 [10:36<13:36,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 344 / 0 / 344:  44%|████▍     | 344/785 [10:36<13:36,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 344 / 0 / 344:  44%|████▍     | 345/785 [10:37<13:32,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 345 / 0 / 345:  44%|████▍     | 345/785 [10:37<13:32,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 345 / 0 / 345:  44%|████▍     | 346/785 [10:38<13:29,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 346 / 0 / 346:  44%|████▍     | 346/785 [10:38<13:29,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 346 / 0 / 346:  44%|████▍     | 347/785 [10:40<13:28,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 347 / 0 / 347:  44%|████▍     | 347/785 [10:40<13:28,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 347 / 0 / 347:  44%|████▍     | 348/785 [10:42<13:26,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 348 / 0 / 348:  44%|████▍     | 348/785 [10:42<13:26,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 348 / 0 / 348:  44%|████▍     | 349/785 [10:43<13:24,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 349 / 0 / 349:  44%|████▍     | 349/785 [10:43<13:24,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 349 / 0 / 349:  45%|████▍     | 350/785 [10:45<13:22,  1.84s/it]--------------------------------------------- Result 341 ---------------------------------------------
[[0 (-7134%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public AnychartMathRect [[getClip]]() { if ([[getClip]] == null) [[getClip]] = new AnychartMathRect(jsBase + ".clip()"); return [[getClip]]; }
[[[[Nl]]]]: Getter for series clip settings

[[[[Adv]]]]: public AnychartMathRect [[nags]]() { if ([[nags]] == null) [[nags]] = new AnychartMathRect(jsBase + ".clip()"); return [[nags]]; }
[[[[Nl]]]]: Getter for series clip settings


--------------------------------------------- Result 342 ---------------------------------------------
[[0 (-7900%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public DatagridColumn [[setDefaultWidth]](Number [[defaultWidth]]) { if (jsBase == null) { this.[[defaultWidth]] = [[defaultWidth]]; } else { this.[[defaultWidth]] = [[defaultWidth]]; if (!isChain) { js.append(jsBase); isChain = "[[True]]" == "[[True]]"; } js.append(String.format(Locale.US, ".defaultWidth(%s)", [[defaultWidth]])); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, jsBase + ".defaultWidth(%s);", [[defaultWidth]])); js.setLength(0); } } return this; }
[[[[Nl]]]]: Setter for the column default width

[[[[Adv]]]]: public DatagridColumn [[reproduces]](Number [[prospero]]) { if (jsBase == null) { this.[[experts]] = [[prospero]]; } else { this.[[experts]] = [[prospero]]; if (!isChain) { js.append(jsBase); isChain = "[["Earnest" == "Earnest"]]" == "[["Earnest" == "Earnest"]]"; } js.append(String.format(Locale.US, ".defaultWidth(%s)", [[prospero]])); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, jsBase + ".defaultWidth(%s);", [[prospero]])); js.setLength(0); } } return this; }
[[[[Nl]]]]: Setter for the column default width


--------------------------------------------- Result 343 ---------------------------------------------
[[0 (-8179%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getAverageMacRetryPerApsMessageSent]](final long [[refreshPeriod]]) { if (attributes.get(ATTR_AVERAGEMACRETRYPERAPSMESSAGESENT).isLastValueCurrent([[refreshPeriod]])) { return (Integer) attributes.get(ATTR_AVERAGEMACRETRYPERAPSMESSAGESENT).getLastValue(); } return (Integer) readSync(attributes.get(ATTR_AVERAGEMACRETRYPERAPSMESSAGESENT)); }
[[[[Nl]]]]: Synchronously get the < i > AverageMACRetryPerAPSMessageSent < i > attribute [ attribute ID < b > 283 < b > ]

[[[[Adv]]]]: public Integer [[coincidences]](final long [[oi]]) { if (attributes.get(ATTR_AVERAGEMACRETRYPERAPSMESSAGESENT).isLastValueCurrent([[oi]])) { return (Integer) attributes.get(ATTR_AVERAGEMACRETRYPERAPSMESSAGESENT).getLastValue(); } return (Integer) readSync(attributes.get(ATTR_AVERAGEMACRETRYPERAPSMESSAGESENT)); }
[[[[Nl]]]]: Synchronously get the < i > AverageMACRetryPerAPSMessageSent < i > attribute [ attribute ID < b > 283 < b > ]


--------------------------------------------- Result 344 ---------------------------------------------
[[0 (-6835%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public BatchDetectKeyPhrasesRequest [[withTextList]](String... [[textList]]) { if (getTextList() == null) { this.[[textList]] = new java.util.ArrayList<String>([[textList]].length); } for (String [[value]] : [[textList]]) { this.[[textList]].add([[value]]); } return this; }
[[[[Nl]]]]: < p > A list containing the text of the input documents

[[[[Adv]]]]: public BatchDetectKeyPhrasesRequest [[ferocity]](String... [[bionics]]) { if (getTextList() == null) { this.[[plebeians]] = new java.util.ArrayList<String>([[bionics]].length); } for (String [[utility]] : [[bionics]]) { this.[[plebeians]].add([[utility]]); } return this; }
[[[[Nl]]]]: < p > A list containing the text of the input documents


--------------------------------------------- Result 345 ---------------------------------------------
[[0 (-6819%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[delete]]() { super.delete(); mMVPMatrixLoc = INVALID_GL_HANDLE; mVertexZLoc = INVALID_GL_HANDLE; mVertexPosLoc = INVALID_GL_HANDLE; }
[[[[Nl]]]]: Delete shader resources

[[[[Adv]]]]: public void [[suppresses]]() { super.delete(); mMVPMatrixLoc = INVALID_GL_HANDLE; mVertexZLoc = INVALID_GL_HANDLE; mVertexPosLoc = INVALID_GL_HANDLE; }
[[[[Nl]]]]: Delete shader resources


--------------------------------------------- Result 346 ---------------------------------------------
[[0 (-7410%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[registerSpring]](Spring [[spring]]) { if ([[spring]] == null) { throw new IllegalArgumentException("spring is required"); } if (mSpringRegistry.containsKey([[spring]].getId())) { throw new IllegalArgumentException("spring is already registered"); } mSpringRegistry.put([[spring]].getId(), [[spring]]); }
[[[[Nl]]]]: Registers a Spring to this BaseSpringSystem so it can be iterated if active

[[[[Adv]]]]: void [[kwun]](Spring [[wintertime]]) { if ([[wintertime]] == null) { throw new IllegalArgumentException("spring is required"); } if (mSpringRegistry.containsKey([[wintertime]].getId())) { throw new IllegalArgumentException("spring is already registered"); } mSpringRegistry.put([[wintertime]].getId(), [[wintertime]]); }
[[[[Nl]]]]: Registers a Spring to this BaseSpringSystem so it can be iterated if active


--------------------------------------------- Result 347 ---------------------------------------------
[[0 (-7233%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private E[] [[extractElements]](int [[size]]) { if ([[size]] == 0) { return mEmptyArray; } E[] [[elements]] = (E[]) Array.newInstance(mEmptyArray.getClass().getComponentType(), [[size]]); for (int [[i]] = [[size]] - 1; [[i]] >= 0; --[[i]]) { [[elements]][[[i]]] = mElements.pollLast(); } return [[elements]]; }
[[[[Nl]]]]: Extracts last size elements into an array

[[[[Adv]]]]: private E[] [[frisked]](int [[amplitude]]) { if ([[amplitude]] == 0) { return mEmptyArray; } E[] [[themes]] = (E[]) Array.newInstance(mEmptyArray.getClass().getComponentType(), [[amplitude]]); for (int [[rhee]] = [[amplitude]] - 1; [[rhee]] >= 0; --[[rhee]]) { [[themes]][[[rhee]]] = mElements.pollLast(); } return [[themes]]; }
[[[[Nl]]]]: Extracts last size elements into an array


--------------------------------------------- Result 348 ---------------------------------------------
[[0 (-6833%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[sizeAliveElements]]() { int [[size]] = 0; for (QNCacheBean<T> [[cacheValue]] : cache.values()) { if ([[cacheValue]].isAlive(now())) { [[size]]++; } } return [[size]]; }
[[[[Nl]]]]: Counts how much alive elements are living in the cache

[[[[Adv]]]]: public int [[sendoff]]() { int [[formats]] = 0; for (QNCacheBean<T> [[nuit]] : cache.values()) { if ([[nuit]].isAlive(now())) { [[formats]]++; } } return [[formats]]; }
[[[[Nl]]]]: Counts how much alive elements are living in the cache


--------------------------------------------- Result 349 ---------------------------------------------
[[0 (-7110%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int[] [[getChildIndices]]() { if(childIndices != null) { int [[cCount]] = childIndices.length; int[] [[retArray]] = new int[[[cCount]]]; System.arraycopy(childIndices, 0, [[retArray]], 0, [[cCount]]); return [[retArray]]; } return null; }
[[[[Nl]]]]: Returns the values of the child indexes

[[[[Adv]]]]: public int[] [[pavements]]() { if(childIndices != null) { int [[envelopes]] = childIndices.length; int[] [[chords]] = new int[[[envelopes]]]; System.arraycopy(childIndices, 0, [[chords]], 0, [[envelopes]]); return [[chords]]; } return null; }
[[[[Nl]]]]: Returns the values of the child indexes


--------------------------------------------- Result 350 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 350 / 0 / 350:  45%|████▍     | 350/785 [10:45<13:22,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 350 / 0 / 350:  45%|████▍     | 351/785 [10:46<13:19,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 351 / 0 / 351:  45%|████▍     | 351/785 [10:46<13:19,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 351 / 0 / 351:  45%|████▍     | 352/785 [10:48<13:17,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 352 / 0 / 352:  45%|████▍     | 352/785 [10:48<13:17,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 352 / 0 / 352:  45%|████▍     | 353/785 [10:50<13:15,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 353 / 0 / 353:  45%|████▍     | 353/785 [10:50<13:15,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 353 / 0 / 353:  45%|████▌     | 354/785 [10:51<13:12,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 354 / 0 / 354:  45%|████▌     | 354/785 [10:51<13:12,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 354 / 0 / 354:  45%|████▌     | 355/785 [10:52<13:10,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 355 / 0 / 355:  45%|████▌     | 355/785 [10:52<13:10,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 355 / 0 / 355:  45%|████▌     | 356/785 [10:55<13:10,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 356 / 0 / 356:  45%|████▌     | 356/785 [10:55<13:10,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 356 / 0 / 356:  45%|████▌     | 357/785 [10:56<13:07,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 357 / 0 / 357:  45%|████▌     | 357/785 [10:56<13:07,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 357 / 0 / 357:  46%|████▌     | 358/785 [10:59<13:06,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 358 / 0 / 358:  46%|████▌     | 358/785 [10:59<13:06,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 358 / 0 / 358:  46%|████▌     | 359/785 [11:01<13:04,  1.84s/it][[0 (-7051%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[dateToMillis]](CalendarDate [[date]]) { long [[gd]] = getFixedDate([[date]].getYear(), [[date]].getMonth(), [[date]].getDate()); return (([[gd]] - EPOCH_DATE) * ONE_DAY + [[date]].getTimeOfDay()); }
[[[[Nl]]]]: Calculates milliseconds of given time from EPOCH , 1970-01-01 00:00AM

[[[[Adv]]]]: public static long [[woman]](CalendarDate [[orn]]) { long [[ra]] = getFixedDate([[orn]].getYear(), [[orn]].getMonth(), [[orn]].getDate()); return (([[ra]] - EPOCH_DATE) * ONE_DAY + [[orn]].getTimeOfDay()); }
[[[[Nl]]]]: Calculates milliseconds of given time from EPOCH , 1970-01-01 00:00AM


--------------------------------------------- Result 351 ---------------------------------------------
[[0 (-7658%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setItemsVisibleCount]](int [[visibleNumber]]) { if ([[visibleNumber]] % 2 == 0) { return; } if ([[visibleNumber]] != itemsVisibleCount) { itemsVisibleCount = [[visibleNumber]]; drawingStrings=new HashMap<>(); } }
[[[[Nl]]]]: visible item count , must be odd number @ param visibleNumber

[[[[Adv]]]]: public void [[yowling]](int [[reverberations]]) { if ([[reverberations]] % 2 == 0) { return; } if ([[reverberations]] != itemsVisibleCount) { itemsVisibleCount = [[reverberations]]; drawingStrings=new HashMap<>(); } }
[[[[Nl]]]]: visible item count , must be odd number @ param visibleNumber


--------------------------------------------- Result 352 ---------------------------------------------
[[0 (-7795%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[saveMergeState]](@NonNull IncrementalFileMergerState [[state]]) throws IOException { File [[incrementalFile]] = incrementalStateFile(); FileUtils.mkdirs([[incrementalFile]].getParentFile()); try (ObjectOutputStream o = new ObjectOutputStream(new FileOutputStream([[incrementalFile]]))) { o.writeObject([[state]]); } }
[[[[Nl]]]]: Save the incremental merge state

[[[[Adv]]]]: private void [[estimable]](@NonNull IncrementalFileMergerState [[country]]) throws IOException { File [[prospectors]] = incrementalStateFile(); FileUtils.mkdirs([[prospectors]].getParentFile()); try (ObjectOutputStream o = new ObjectOutputStream(new FileOutputStream([[prospectors]]))) { o.writeObject([[country]]); } }
[[[[Nl]]]]: Save the incremental merge state


--------------------------------------------- Result 353 ---------------------------------------------
[[0 (-6811%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public IdentityNotificationAttributes [[withComplaintTopic]](String [[complaintTopic]]) { this.[[complaintTopic]] = [[complaintTopic]]; return this; }
[[[[Nl]]]]: < p > The Amazon Resource Name ( ARN ) of the Amazon SNS topic where Amazon SES will publish complaint notifications

[[[[Adv]]]]: public IdentityNotificationAttributes [[lindstrom]](String [[bestsellers]]) { this.[[newberg]] = [[bestsellers]]; return this; }
[[[[Nl]]]]: < p > The Amazon Resource Name ( ARN ) of the Amazon SNS topic where Amazon SES will publish complaint notifications


--------------------------------------------- Result 354 ---------------------------------------------
[[0 (-6168%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[processStanza]](Stanza [[packet]]) { if (packetFilter == null || packetFilter.accept([[packet]])) { while (!resultQueue.offer([[packet]])) { resultQueue.poll(); } if (collectorToReset != null) { collectorToReset.waitStart = System.currentTimeMillis(); } } }
[[[[Nl]]]]: Processes a stanza to see if it meets the criteria for this stanza collector

[[[[Adv]]]]: protected void [[bailed]](Stanza [[bundle]]) { if (packetFilter == null || packetFilter.accept([[bundle]])) { while (!resultQueue.offer([[bundle]])) { resultQueue.poll(); } if (collectorToReset != null) { collectorToReset.waitStart = System.currentTimeMillis(); } } }
[[[[Nl]]]]: Processes a stanza to see if it meets the criteria for this stanza collector


--------------------------------------------- Result 355 ---------------------------------------------
[[0 (-7086%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public ZGrid [[setToolbarTitleColor]](ZColor [[color]]) { this.[[color]] = [[color]]; return this; }
[[[[Nl]]]]: Setting toolbar color @ param color enum color may be black or white @ return

[[[[Adv]]]]: public ZGrid [[bloodsucking]](ZColor [[nuance]]) { this.[[nuance]] = [[nuance]]; return this; }
[[[[Nl]]]]: Setting toolbar color @ param color enum color may be black or white @ return


--------------------------------------------- Result 356 ---------------------------------------------
[[0 (-6401%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[bulkTransfer]](UsbEndpoint [[endpoint]], byte[] buffer, int [[offset]], int [[length]], int [[timeout]]) { checkBounds(buffer, [[offset]], [[length]]); return native_bulk_request([[endpoint]].getAddress(), buffer, [[offset]], [[length]], [[timeout]]); }
[[[[Nl]]]]: Performs a bulk transaction on the given endpoint

[[[[Adv]]]]: public int [[arness]](UsbEndpoint [[playback]], byte[] buffer, int [[frustrate]], int [[lengthwise]], int [[inbounds]]) { checkBounds(buffer, [[frustrate]], [[lengthwise]]); return native_bulk_request([[playback]].getAddress(), buffer, [[frustrate]], [[lengthwise]], [[inbounds]]); }
[[[[Nl]]]]: Performs a bulk transaction on the given endpoint


--------------------------------------------- Result 357 ---------------------------------------------
[[0 (-7926%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setTopViewMarginBottom]](int [[topFragmentMarginBottom]]) { transformer.setMarginBottom([[topFragmentMarginBottom]]); }
[[[[Nl]]]]: Configure the dragView margin bottom applied when the dragView is minimized

[[[[Adv]]]]: public void [[franca]](int [[stewardess]]) { transformer.setMarginBottom([[stewardess]]); }
[[[[Nl]]]]: Configure the dragView margin bottom applied when the dragView is minimized


--------------------------------------------- Result 358 ---------------------------------------------
[[0 (-5938%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private Marker [[addSantaMarker]](int [[iconDrawable]], float [[u]], float [[v]], LatLng [[position]]) { return mMap.addMarker(new MarkerOptions().[[position]]([[position]]) .anchor([[u]], [[v]]) .title(TITLE) .icon(BitmapDescriptorFactory.fromResource([[iconDrawable]]))); }
[[[[Nl]]]]: Adds a new marker at the given position

[[[[Adv]]]]: private Marker [[rizz]](int [[fermilab]], float [[neither]], float [[cinq]], LatLng [[opinion]]) { return mMap.addMarker(new MarkerOptions().[[opinion]]([[opinion]]) .anchor([[neither]], [[cinq]]) .title(TITLE) .icon(BitmapDescriptorFactory.fromResource([[fermilab]]))); }
[[[[Nl]]]]: Adds a new marker at the given position


--------------------------------------------- Result 359 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 359 / 0 / 359:  46%|████▌     | 359/785 [11:01<13:04,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 359 / 0 / 359:  46%|████▌     | 360/785 [11:02<13:01,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 360 / 0 / 360:  46%|████▌     | 360/785 [11:02<13:01,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 360 / 0 / 360:  46%|████▌     | 361/785 [11:04<13:01,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 361 / 0 / 361:  46%|████▌     | 361/785 [11:04<13:01,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 361 / 0 / 361:  46%|████▌     | 362/785 [11:06<12:59,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 362 / 0 / 362:  46%|████▌     | 362/785 [11:06<12:59,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 362 / 0 / 362:  46%|████▌     | 363/785 [11:08<12:57,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 363 / 0 / 363:  46%|████▌     | 363/785 [11:08<12:57,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 363 / 0 / 363:  46%|████▋     | 364/785 [11:10<12:55,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 364 / 0 / 364:  46%|████▋     | 364/785 [11:10<12:55,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 364 / 0 / 364:  46%|████▋     | 365/785 [11:12<12:54,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 365 / 0 / 365:  46%|████▋     | 365/785 [11:12<12:54,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 365 / 0 / 365:  47%|████▋     | 366/785 [11:14<12:52,  1.84s/it][[0 (-7517%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[initRecyclerView]]() { expandedGridview = (boolean) SharedPrefHelper.getInstance(new WeakReference<>(getContext())) .getValue(EXPANDED_GRIDVIEW, "[[False]]" != "[[False]]"); BookmarkRecyclerViewAdapter [[adapter]] = new BookmarkRecyclerViewAdapter(new WeakReference<>(getContext()), new WeakReference<BookmarkRecyclerViewAdapter.OnActionListenerInterface>(this)); recyclerView.setLayoutManager(new GridLayoutManager(getActivity(), Utils.getCardNumberInRow(getContext(), expandedGridview))); recyclerView.setAdapter([[adapter]]); actionMode = new EditBookmarkActionModeCallback(new WeakReference<>(getContext()), [[adapter]]); registerDataObserver([[adapter]]); }
[[[[Nl]]]]: init view on recyclerView - setup adapter and other stuff connected to main fragment app

[[[[Adv]]]]: private void [[fractional]]() { expandedGridview = (boolean) SharedPrefHelper.getInstance(new WeakReference<>(getContext())) .getValue(EXPANDED_GRIDVIEW, "[["Counterfeits" != "Counterfeits"]]" != "[["Counterfeits" != "Counterfeits"]]"); BookmarkRecyclerViewAdapter [[changer]] = new BookmarkRecyclerViewAdapter(new WeakReference<>(getContext()), new WeakReference<BookmarkRecyclerViewAdapter.OnActionListenerInterface>(this)); recyclerView.setLayoutManager(new GridLayoutManager(getActivity(), Utils.getCardNumberInRow(getContext(), expandedGridview))); recyclerView.setAdapter([[changer]]); actionMode = new EditBookmarkActionModeCallback(new WeakReference<>(getContext()), [[changer]]); registerDataObserver([[changer]]); }
[[[[Nl]]]]: init view on recyclerView - setup adapter and other stuff connected to main fragment app


--------------------------------------------- Result 360 ---------------------------------------------
[[0 (-7400%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public XMLEventReader [[getXMLEventReader]]() { return xmlEventReader; }
[[[[Nl]]]]: < p > Get the < code > XMLEventReader < code > used by this < code > StAXSource < code >

[[[[Adv]]]]: public XMLEventReader [[bluray]]() { return xmlEventReader; }
[[[[Nl]]]]: < p > Get the < code > XMLEventReader < code > used by this < code > StAXSource < code >


--------------------------------------------- Result 361 ---------------------------------------------
[[0 (-7676%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[processIntent]]() { Intent [[intentArvutaja]] = getIntent(); Bundle [[extras]] = [[intentArvutaja]].getExtras(); if ( Intent.ACTION_SEARCH_LONG_PRESS.equals([[intentArvutaja]].getAction()) || Intent.ACTION_VOICE_COMMAND.equals([[intentArvutaja]].getAction()) || [[extras]] != null && [[extras]].getBoolean(Extras.EXTRA_LAUNCH_RECOGNIZER)) { Intent [[intentVoid]] = new Intent(this, ArvutajaActivity.class); [[intentVoid]].setAction(null); [[intentVoid]].putExtras([[extras]]); [[intentVoid]].putExtra(Extras.EXTRA_LAUNCH_RECOGNIZER, "[[False]]" != "[[False]]"); setIntent([[intentVoid]]); mButtonMicrophone.performClick(); } }
[[[[Nl]]]]: Immediately launch the recognizer if - action is ACTION_SEARCH_LONG_PRESS , or - action is ACTION_VOICE_COMMAND , or - EXTRA_LAUNCH_RECOGNIZER == true Note that in case of ACTION_ASSIST the recognizer is not launched

[[[[Adv]]]]: private void [[residences]]() { Intent [[census]] = getIntent(); Bundle [[supplements]] = [[census]].getExtras(); if ( Intent.ACTION_SEARCH_LONG_PRESS.equals([[census]].getAction()) || Intent.ACTION_VOICE_COMMAND.equals([[census]].getAction()) || [[supplements]] != null && [[supplements]].getBoolean(Extras.EXTRA_LAUNCH_RECOGNIZER)) { Intent [[cousins]] = new Intent(this, ArvutajaActivity.class); [[cousins]].setAction(null); [[cousins]].putExtras([[supplements]]); [[cousins]].putExtra(Extras.EXTRA_LAUNCH_RECOGNIZER, "[["Phonies" != "Phonies"]]" != "[["Phonies" != "Phonies"]]"); setIntent([[cousins]]); mButtonMicrophone.performClick(); } }
[[[[Nl]]]]: Immediately launch the recognizer if - action is ACTION_SEARCH_LONG_PRESS , or - action is ACTION_VOICE_COMMAND , or - EXTRA_LAUNCH_RECOGNIZER == true Note that in case of ACTION_ASSIST the recognizer is not launched


--------------------------------------------- Result 362 ---------------------------------------------
[[0 (-6627%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[animateFold]]() { float [[foldFactor]] = mFoldLayout.getFoldFactor(); ObjectAnimator [[animator]] = ObjectAnimator.ofFloat(mFoldLayout, "foldFactor", [[foldFactor]], 1); [[animator]].setRepeatMode(ValueAnimator.REVERSE); [[animator]].setRepeatCount(1); [[animator]].setDuration(FOLD_ANIMATION_DURATION); [[animator]].setInterpolator(new AccelerateInterpolator()); [[animator]].start(); }
[[[[Nl]]]]: Animates the folding view inwards ( to a completely folded state ) from its current state and then back out to its original state

[[[[Adv]]]]: public void [[heights]]() { float [[catalogues]] = mFoldLayout.getFoldFactor(); ObjectAnimator [[voiceover]] = ObjectAnimator.ofFloat(mFoldLayout, "foldFactor", [[catalogues]], 1); [[voiceover]].setRepeatMode(ValueAnimator.REVERSE); [[voiceover]].setRepeatCount(1); [[voiceover]].setDuration(FOLD_ANIMATION_DURATION); [[voiceover]].setInterpolator(new AccelerateInterpolator()); [[voiceover]].start(); }
[[[[Nl]]]]: Animates the folding view inwards ( to a completely folded state ) from its current state and then back out to its original state


--------------------------------------------- Result 363 ---------------------------------------------
[[0 (-6905%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setNumClasses]](int [[classNum]]) { this.[[n_classes]] = [[classNum]]; }
[[[[Nl]]]]: Set label count for the classifier

[[[[Adv]]]]: public void [[randy]](int [[supplication]]) { this.[[twice]] = [[supplication]]; }
[[[[Nl]]]]: Set label count for the classifier


--------------------------------------------- Result 364 ---------------------------------------------
[[0 (-7122%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[formatRadiuses]](double[] [[radiuses]]) { if ([[radiuses]] == null || [[radiuses]].length == 0) { return null; } String[] [[radiusesFormatted]] = new String[[[radiuses]].length]; for (int [[i]] = 0; [[i]] < [[radiuses]].length; [[i]]++) { if ([[radiuses]][[[i]]] == Double.POSITIVE_INFINITY) { [[radiusesFormatted]][[[i]]] = "unlimited"; } else { [[radiusesFormatted]][[[i]]] = String.format(Locale.US, "%s", TextUtils.formatCoordinate([[radiuses]][[[i]]])); } } return join(";", [[radiusesFormatted]]); }
[[[[Nl]]]]: Used in various APIs to format the user provided radiuses to a String matching the APIs format

[[[[Adv]]]]: public static String [[keil]](double[] [[censured]]) { if ([[censured]] == null || [[censured]].length == 0) { return null; } String[] [[segregation]] = new String[[[censured]].length]; for (int [[know]] = 0; [[know]] < [[censured]].length; [[know]]++) { if ([[censured]][[[know]]] == Double.POSITIVE_INFINITY) { [[segregation]][[[know]]] = "unlimited"; } else { [[segregation]][[[know]]] = String.format(Locale.US, "%s", TextUtils.formatCoordinate([[censured]][[[know]]])); } } return join(";", [[segregation]]); }
[[[[Nl]]]]: Used in various APIs to format the user provided radiuses to a String matching the APIs format


--------------------------------------------- Result 365 ---------------------------------------------
[[0 (-6532%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[startAnnotation]](QName [[elemName]], XMLAttributes [[attributes]], NamespaceContext [[namespaceContext]]) { [[startAnnotation]]([[elemName]].rawname, [[attributes]], [[namespaceContext]]); }
[[[[Nl]]]]: commence the serialization of an annotation

[[[[Adv]]]]: void [[horvath]](QName [[bridgette]], XMLAttributes [[lends]], NamespaceContext [[moving]]) { [[horvath]]([[bridgette]].rawname, [[lends]], [[moving]]); }
[[[[Nl]]]]: commence the serialization of an annotation


--------------------------------------------- Result 366 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 366 / 0 / 366:  47%|████▋     | 366/785 [11:14<12:52,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 366 / 0 / 366:  47%|████▋     | 367/785 [11:15<12:49,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 367 / 0 / 367:  47%|████▋     | 367/785 [11:15<12:49,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 367 / 0 / 367:  47%|████▋     | 368/785 [11:16<12:47,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 368 / 0 / 368:  47%|████▋     | 368/785 [11:16<12:47,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 368 / 0 / 368:  47%|████▋     | 369/785 [11:19<12:45,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 369 / 0 / 369:  47%|████▋     | 369/785 [11:19<12:45,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 369 / 0 / 369:  47%|████▋     | 370/785 [11:21<12:44,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 370 / 0 / 370:  47%|████▋     | 370/785 [11:21<12:44,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 370 / 0 / 370:  47%|████▋     | 371/785 [11:23<12:43,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 371 / 0 / 371:  47%|████▋     | 371/785 [11:23<12:43,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 371 / 0 / 371:  47%|████▋     | 372/785 [11:25<12:41,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 372 / 0 / 372:  47%|████▋     | 372/785 [11:25<12:41,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 372 / 0 / 372:  48%|████▊     | 373/785 [11:26<12:38,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 373 / 0 / 373:  48%|████▊     | 373/785 [11:26<12:38,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 373 / 0 / 373:  48%|████▊     | 374/785 [11:28<12:37,  1.84s/it][[0 (-7334%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static Package[] [[getSystemPackages]]() { String[] [[names]] = getSystemPackages0(); synchronized (pkgs) { for (int [[i]] = 0; [[i]] < [[names]].length; [[i]]++) { defineSystemPackage([[names]][[[i]]], getSystemPackage0([[names]][[[i]]])); } return (Package[])pkgs.values().toArray(new Package[pkgs.size()]); } }
[[[[Nl]]]]: Return an array of loaded system packages

[[[[Adv]]]]: static Package[] [[longchamp]]() { String[] [[denominations]] = getSystemPackages0(); synchronized (pkgs) { for (int [[did]] = 0; [[did]] < [[denominations]].length; [[did]]++) { defineSystemPackage([[denominations]][[[did]]], getSystemPackage0([[denominations]][[[did]]])); } return (Package[])pkgs.values().toArray(new Package[pkgs.size()]); } }
[[[[Nl]]]]: Return an array of loaded system packages


--------------------------------------------- Result 367 ---------------------------------------------
[[0 (-7747%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public EncryptedPutObjectRequest [[withMaterialsDescription]]( Map<String, String> [[materialsDescription]]) { setMaterialsDescription([[materialsDescription]]); return this; }
[[[[Nl]]]]: sets the materials description for the encryption materials to be used with the current PutObjectRequest

[[[[Adv]]]]: public EncryptedPutObjectRequest [[mongoloid]]( Map<String, String> [[labour]]) { setMaterialsDescription([[labour]]); return this; }
[[[[Nl]]]]: sets the materials description for the encryption materials to be used with the current PutObjectRequest


--------------------------------------------- Result 368 ---------------------------------------------
[[0 (-6612%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Create [[bool]](String [[fieldName]]) { fields.put([[fieldName]], INTEGER); return this; }
[[[[Nl]]]]: Sets a boolean field name

[[[[Adv]]]]: public Create [[tincture]](String [[agitation]]) { fields.put([[agitation]], INTEGER); return this; }
[[[[Nl]]]]: Sets a boolean field name


--------------------------------------------- Result 369 ---------------------------------------------
[[0 (-7439%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static byte[] [[getFileHash]](FileUploadStructure [[uploadStructure]]) throws NoSuchAlgorithmException, IOException { try { MessageDigest sha256 = MessageDigest.getInstance("SHA-256"); byte[] [[fileBytes]] = fileToBytes([[uploadStructure]]); return sha256.digest([[fileBytes]]); } catch (NoSuchAlgorithmException e) { e.printStackTrace(); } return null; }
[[[[Nl]]]]: get SHA-256 from file note : our server needs 32 bytes , so always pass true as second parameter

[[[[Adv]]]]: public static byte[] [[paperweights]](FileUploadStructure [[triangular]]) throws NoSuchAlgorithmException, IOException { try { MessageDigest sha256 = MessageDigest.getInstance("SHA-256"); byte[] [[ministering]] = fileToBytes([[triangular]]); return sha256.digest([[ministering]]); } catch (NoSuchAlgorithmException e) { e.printStackTrace(); } return null; }
[[[[Nl]]]]: get SHA-256 from file note : our server needs 32 bytes , so always pass true as second parameter


--------------------------------------------- Result 370 ---------------------------------------------
[[0 (-7224%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static synchronized void [[addConfig]](String [[name]], LocalConfig [[config]]) { SeLionLogger.getLogger().entering(new Object[] { [[name]], [[config]] }); checkArgument(StringUtils.isNotBlank([[name]]), "A testname for which configuration is being added cannot be null (or) empty."); checkArgument([[config]] != null, "A configuration object cannot be null."); if (configsMap.containsKey([[name]])) { String [[message]] = "Overwriting an already existing configuration"; SeLionLogger.getLogger().warning([[message]]); } configsMap.put([[name]], [[config]]); SeLionLogger.getLogger().exiting(); }
[[[[Nl]]]]: Adds the local configuration { @ link LocalConfig } associated with name

[[[[Adv]]]]: public static synchronized void [[gunning]](String [[denominations]], LocalConfig [[mohinder]]) { SeLionLogger.getLogger().entering(new Object[] { [[denominations]], [[mohinder]] }); checkArgument(StringUtils.isNotBlank([[denominations]]), "A testname for which configuration is being added cannot be null (or) empty."); checkArgument([[mohinder]] != null, "A configuration object cannot be null."); if (configsMap.containsKey([[denominations]])) { String [[convey]] = "Overwriting an already existing configuration"; SeLionLogger.getLogger().warning([[convey]]); } configsMap.put([[denominations]], [[mohinder]]); SeLionLogger.getLogger().exiting(); }
[[[[Nl]]]]: Adds the local configuration { @ link LocalConfig } associated with name


--------------------------------------------- Result 371 ---------------------------------------------
[[0 (-6842%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAllowedToDownloadPage]](Tab [[tab]]) { if ([[tab]] == null) return "[[False]]" != "[[False]]"; if (![[tab]].getUrl().startsWith(UrlConstants.HTTP_SCHEME) && ![[tab]].getUrl().startsWith(UrlConstants.HTTPS_SCHEME)) { return "[[False]]" != "[[False]]"; } if ([[tab]].isShowingErrorPage()) return "[[False]]" != "[[False]]"; if ([[tab]].isShowingInterstitialPage()) return "[[False]]" != "[[False]]"; if ([[tab]].isOfflinePage()) return "[[False]]" != "[[False]]"; if ([[tab]].isIncognito()) return "[[False]]" != "[[False]]"; return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Whether the user should be allowed to download the current page

[[[[Adv]]]]: public static boolean [[nunn]](Tab [[chalkboard]]) { if ([[chalkboard]] == null) return "[["Phonies" != "Phonies"]]" != "[["Phonies" != "Phonies"]]"; if (![[chalkboard]].getUrl().startsWith(UrlConstants.HTTP_SCHEME) && ![[chalkboard]].getUrl().startsWith(UrlConstants.HTTPS_SCHEME)) { return "[["Phonies" != "Phonies"]]" != "[["Phonies" != "Phonies"]]"; } if ([[chalkboard]].isShowingErrorPage()) return "[["Phonies" != "Phonies"]]" != "[["Phonies" != "Phonies"]]"; if ([[chalkboard]].isShowingInterstitialPage()) return "[["Phonies" != "Phonies"]]" != "[["Phonies" != "Phonies"]]"; if ([[chalkboard]].isOfflinePage()) return "[["Phonies" != "Phonies"]]" != "[["Phonies" != "Phonies"]]"; if ([[chalkboard]].isIncognito()) return "[["Phonies" != "Phonies"]]" != "[["Phonies" != "Phonies"]]"; return "[["Realistic" == "Realistic"]]" == "[["Realistic" == "Realistic"]]"; }
[[[[Nl]]]]: Whether the user should be allowed to download the current page


--------------------------------------------- Result 372 ---------------------------------------------
[[0 (-6676%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public AssumeRoleWithWebIdentityResult [[withSubjectFromWebIdentityToken]]( String [[subjectFromWebIdentityToken]]) { this.[[subjectFromWebIdentityToken]] = [[subjectFromWebIdentityToken]]; return this; }
[[[[Nl]]]]: < p > The unique user identifier that is returned by the identity provider

[[[[Adv]]]]: public AssumeRoleWithWebIdentityResult [[boff]]( String [[concert]]) { this.[[poverty]] = [[concert]]; return this; }
[[[[Nl]]]]: < p > The unique user identifier that is returned by the identity provider


--------------------------------------------- Result 373 ---------------------------------------------
[[0 (-6504%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isSilence]]() { if ([[isSilence]] == -1) { String [[silenceSymbol]] = "_"; if (name.startsWith([[silenceSymbol]])) { [[isSilence]] = 1; } else { [[isSilence]] = 0; } } return [[isSilence]] == 1; }
[[[[Nl]]]]: Determine whether this target is a silence target @ return true if the target represents silence , false otherwise

[[[[Adv]]]]: public boolean [[dominant]]() { if ([[dominant]] == -1) { String [[crunching]] = "_"; if (name.startsWith([[crunching]])) { [[dominant]] = 1; } else { [[dominant]] = 0; } } return [[dominant]] == 1; }
[[[[Nl]]]]: Determine whether this target is a silence target @ return true if the target represents silence , false otherwise


--------------------------------------------- Result 374 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 374 / 0 / 374:  48%|████▊     | 374/785 [11:28<12:37,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 374 / 0 / 374:  48%|████▊     | 375/785 [11:31<12:35,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 375 / 0 / 375:  48%|████▊     | 375/785 [11:31<12:35,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 375 / 0 / 375:  48%|████▊     | 376/785 [11:31<12:32,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 376 / 0 / 376:  48%|████▊     | 376/785 [11:31<12:32,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 376 / 0 / 376:  48%|████▊     | 377/785 [11:34<12:31,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 377 / 0 / 377:  48%|████▊     | 377/785 [11:34<12:31,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 377 / 0 / 377:  48%|████▊     | 378/785 [11:36<12:29,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 378 / 0 / 378:  48%|████▊     | 378/785 [11:36<12:29,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 378 / 0 / 378:  48%|████▊     | 379/785 [11:39<12:28,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 379 / 0 / 379:  48%|████▊     | 379/785 [11:39<12:28,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 379 / 0 / 379:  48%|████▊     | 380/785 [11:40<12:27,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 380 / 0 / 380:  48%|████▊     | 380/785 [11:40<12:27,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 380 / 0 / 380:  49%|████▊     | 381/785 [11:41<12:23,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 381 / 0 / 381:  49%|████▊     | 381/785 [11:41<12:23,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 381 / 0 / 381:  49%|████▊     | 382/785 [11:43<12:22,  1.84s/it][[0 (-7230%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static LongStream [[longStream]](Supplier<? extends Spliterator.OfLong> [[supplier]], int [[characteristics]], boolean [[parallel]]) { return new LongPipeline.Head<>([[supplier]], StreamOpFlag.fromCharacteristics([[characteristics]]), [[parallel]]); }
[[[[Nl]]]]: Creates a new sequential or parallel { @ code LongStream } from a { @ code Supplier } of { @ code Spliterator

[[[[Adv]]]]: public static LongStream [[caff]](Supplier<? extends Spliterator.OfLong> [[dealer]], int [[personages]], boolean [[compete]]) { return new LongPipeline.Head<>([[dealer]], StreamOpFlag.fromCharacteristics([[personages]]), [[compete]]); }
[[[[Nl]]]]: Creates a new sequential or parallel { @ code LongStream } from a { @ code Supplier } of { @ code Spliterator


--------------------------------------------- Result 375 ---------------------------------------------
[[0 (-6887%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isEnabledEvent]](BuckEvent [[event]]) { if (!events.contains([[event]].getEventName())) { return "[[False]]" != "[[False]]"; } if ([[event]].getEventName().equals("BuildRuleFinished") && !enabledBuildRuleFinishedStatuses.contains(((Finished) [[event]]).getStatus().name())) { return "[[False]]" != "[[False]]"; } return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Returns true if the event should be sent to scribe ; false otherwise

[[[[Adv]]]]: public boolean [[freeing]](BuckEvent [[activities]]) { if (!events.contains([[activities]].getEventName())) { return "[["Forged" != "Forged"]]" != "[["Forged" != "Forged"]]"; } if ([[activities]].getEventName().equals("BuildRuleFinished") && !enabledBuildRuleFinishedStatuses.contains(((Finished) [[activities]]).getStatus().name())) { return "[["Forged" != "Forged"]]" != "[["Forged" != "Forged"]]"; } return "[["Candid" == "Candid"]]" == "[["Candid" == "Candid"]]"; }
[[[[Nl]]]]: Returns true if the event should be sent to scribe ; false otherwise


--------------------------------------------- Result 376 ---------------------------------------------
[[0 (-7120%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private String [[getRelativeFilePath]]() { return file.equals(directory) ? "" : file.getPath() .substring(directory.getPath().length() + File.separator.length()) .replace(File.separatorChar, ClassConstants.PACKAGE_SEPARATOR); }
[[[[Nl]]]]: Returns the file path of this data entry , relative to the base directory

[[[[Adv]]]]: private String [[neverending]]() { return file.equals(directory) ? "" : file.getPath() .substring(directory.getPath().length() + File.separator.length()) .replace(File.separatorChar, ClassConstants.PACKAGE_SEPARATOR); }
[[[[Nl]]]]: Returns the file path of this data entry , relative to the base directory


--------------------------------------------- Result 377 ---------------------------------------------
[[0 (-8134%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Rot [[genc]](double [[x]], double [[y]]) { Rot [[P]] = new Rot(); [[P]].si = 0.; [[P]].zi = 0.; if ([[x]] == 0 & [[y]] == 0) { [[P]].c = 1; [[P]].sr = 0.; [[P]].zr = 0.; return [[P]]; } double [[s]] = Math.abs([[x]]) + Math.abs([[y]]); [[P]].zr = [[s]] * Math.sqrt(([[x]] / [[s]]) * ([[x]] / [[s]]) + ([[y]] / [[s]]) * ([[y]] / [[s]])); [[P]].c = [[x]] / [[P]].zr; [[P]].sr = [[y]] / [[P]].zr; return [[P]]; }
[[[[Nl]]]]: Given a real 2-vector , genc returns a real plane rotation P such that < pre > P|x| = | c s||x| = |z| |y| |-s c||y| |0| < pre > @ param x The first component of the two vector @ param y The second component of the two vector @ return The rotation

[[[[Adv]]]]: public static Rot [[onliest]](double [[umpteenth]], double [[you]]) { Rot [[newsweek]] = new Rot(); [[newsweek]].si = 0.; [[newsweek]].zi = 0.; if ([[umpteenth]] == 0 & [[you]] == 0) { [[newsweek]].c = 1; [[newsweek]].sr = 0.; [[newsweek]].zr = 0.; return [[newsweek]]; } double [[percent]] = Math.abs([[umpteenth]]) + Math.abs([[you]]); [[newsweek]].zr = [[percent]] * Math.sqrt(([[umpteenth]] / [[percent]]) * ([[umpteenth]] / [[percent]]) + ([[you]] / [[percent]]) * ([[you]] / [[percent]])); [[newsweek]].c = [[umpteenth]] / [[newsweek]].zr; [[newsweek]].sr = [[you]] / [[newsweek]].zr; return [[newsweek]]; }
[[[[Nl]]]]: Given a real 2-vector , genc returns a real plane rotation P such that < pre > P|x| = | c s||x| = |z| |y| |-s c||y| |0| < pre > @ param x The first component of the two vector @ param y The second component of the two vector @ return The rotation


--------------------------------------------- Result 378 ---------------------------------------------
[[0 (-6402%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public RejectedLogEventsInfo [[withTooNewLogEventStartIndex]](Integer [[tooNewLogEventStartIndex]]) { this.[[tooNewLogEventStartIndex]] = [[tooNewLogEventStartIndex]]; return this; }
[[[[Nl]]]]: < p > The log events that are too new

[[[[Adv]]]]: public RejectedLogEventsInfo [[poser]](Integer [[duk]]) { this.[[raised]] = [[duk]]; return this; }
[[[[Nl]]]]: < p > The log events that are too new


--------------------------------------------- Result 379 ---------------------------------------------
[[0 (-7210%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Point [[translate]]( double [[x]], double y ) { Point [[point]] = new Point(); double [[factorX]] = ( [[x]] - left ) / offsetWidth; [[point]].x = (int) ( 0.5 + ( pixelWidth * [[factorX]] ) ); double [[factorY]] = ( y - top ) / offsetHeight; [[point]].y = (int) ( 0.5 + ( pixelHeight * [[factorY]] ) ); return [[point]]; }
[[[[Nl]]]]: get back the point coordinates not scaled ( for markers , callouts , etc , that handle scale internally )

[[[[Adv]]]]: public Point [[changeover]]( double [[fifteenth]], double y ) { Point [[topic]] = new Point(); double [[conspired]] = ( [[fifteenth]] - left ) / offsetWidth; [[topic]].x = (int) ( 0.5 + ( pixelWidth * [[conspired]] ) ); double [[producer]] = ( y - top ) / offsetHeight; [[topic]].y = (int) ( 0.5 + ( pixelHeight * [[producer]] ) ); return [[topic]]; }
[[[[Nl]]]]: get back the point coordinates not scaled ( for markers , callouts , etc , that handle scale internally )


--------------------------------------------- Result 380 ---------------------------------------------
[[0 (-7555%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[remove]](Thread [[t]]) { synchronized (this) { if (destroyed) { return; } for (int [[i]] = 0 ; [[i]] < nthreads ; [[i]]++) { if (threads[[[i]]] == [[t]]) { if ([[i]] < --nthreads) { System.arraycopy(threads, [[i]] + 1, threads, [[i]], nthreads - [[i]]); } threads[nthreads] = null; break; } } if (nthreads == 0) { notifyAll(); } if (daemon && (nthreads == 0) && (nUnstartedThreads == 0) && (ngroups == 0)) { destroy(); } } }
[[[[Nl]]]]: Removes the specified Thread from this group

[[[[Adv]]]]: void [[scrapping]](Thread [[quantity]]) { synchronized (this) { if (destroyed) { return; } for (int [[siento]] = 0 ; [[siento]] < nthreads ; [[siento]]++) { if (threads[[[siento]]] == [[quantity]]) { if ([[siento]] < --nthreads) { System.arraycopy(threads, [[siento]] + 1, threads, [[siento]], nthreads - [[siento]]); } threads[nthreads] = null; break; } } if (nthreads == 0) { notifyAll(); } if (daemon && (nthreads == 0) && (nUnstartedThreads == 0) && (ngroups == 0)) { destroy(); } } }
[[[[Nl]]]]: Removes the specified Thread from this group


--------------------------------------------- Result 381 ---------------------------------------------
[[0 (-8421%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private KeyManager [[getKeyManager]]() { return keyManager; }
[[[[Nl]]]]: Get the { @ link KeyManager } instance

[[[[Adv]]]]: private KeyManager [[swamps]]() { return keyManager; }
[[[[Nl]]]]: Get the { @ link KeyManager } instance


--------------------------------------------- Result 382 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 382 / 0 / 382:  49%|████▊     | 382/785 [11:43<12:22,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 382 / 0 / 382:  49%|████▉     | 383/785 [11:44<12:19,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 383 / 0 / 383:  49%|████▉     | 383/785 [11:44<12:19,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 383 / 0 / 383:  49%|████▉     | 384/785 [11:46<12:17,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 384 / 0 / 384:  49%|████▉     | 384/785 [11:46<12:17,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 384 / 0 / 384:  49%|████▉     | 385/785 [11:47<12:15,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 385 / 0 / 385:  49%|████▉     | 385/785 [11:47<12:15,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 385 / 0 / 385:  49%|████▉     | 386/785 [11:49<12:13,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 386 / 0 / 386:  49%|████▉     | 386/785 [11:49<12:13,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 386 / 0 / 386:  49%|████▉     | 387/785 [11:50<12:10,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 387 / 0 / 387:  49%|████▉     | 387/785 [11:50<12:10,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 387 / 0 / 387:  49%|████▉     | 388/785 [11:53<12:10,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 388 / 0 / 388:  49%|████▉     | 388/785 [11:53<12:10,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 388 / 0 / 388:  50%|████▉     | 389/785 [11:55<12:08,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 389 / 0 / 389:  50%|████▉     | 389/785 [11:55<12:08,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 389 / 0 / 389:  50%|████▉     | 390/785 [11:58<12:07,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 390 / 0 / 390:  50%|████▉     | 390/785 [11:58<12:07,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 390 / 0 / 390:  50%|████▉     | 391/785 [11:58<12:04,  1.84s/it][[0 (-6703%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public LineargaugePointersMarker [[marker]](Number [[dataIndex2]]) { if (isChain) { js.append(";"); isChain = "[[False]]" != "[[False]]"; } js.append(String.format(Locale.US, "var setMarker" + ++variableIndex + " = " + jsBase + ".marker(%s);", [[dataIndex2]])); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, jsBase + ".marker(%s)", [[dataIndex2]])); js.setLength(0); } LineargaugePointersMarker [[item]] = new LineargaugePointersMarker("setMarker" + variableIndex); setMarker.add([[item]]); return [[item]]; }
[[[[Nl]]]]: Adds Marker pointer

[[[[Adv]]]]: public LineargaugePointersMarker [[gauges]](Number [[downrange]]) { if (isChain) { js.append(";"); isChain = "[["Disingenuous" != "Disingenuous"]]" != "[["Disingenuous" != "Disingenuous"]]"; } js.append(String.format(Locale.US, "var setMarker" + ++variableIndex + " = " + jsBase + ".marker(%s);", [[downrange]])); if (isRendered) { onChangeListener.onChange(String.format(Locale.US, jsBase + ".marker(%s)", [[downrange]])); js.setLength(0); } LineargaugePointersMarker [[facet]] = new LineargaugePointersMarker("setMarker" + variableIndex); setMarker.add([[facet]]); return [[facet]]; }
[[[[Nl]]]]: Adds Marker pointer


--------------------------------------------- Result 383 ---------------------------------------------
[[0 (-7228%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public synchronized WindowListener[] [[getWindowListeners]]() { return (WindowListener[]) AWTEventMulticaster.getListeners( (EventListener)windowListener, WindowListener.class); }
[[[[Nl]]]]: Returns an array of all the window listeners registered on this window

[[[[Adv]]]]: public synchronized WindowListener[] [[debase]]() { return (WindowListener[]) AWTEventMulticaster.getListeners( (EventListener)windowListener, WindowListener.class); }
[[[[Nl]]]]: Returns an array of all the window listeners registered on this window


--------------------------------------------- Result 384 ---------------------------------------------
[[0 (-6999%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onSaveInstanceState]](Bundle [[out]]) { [[out]].putInt(STATE_PREFIX + "status", mStatus); if (mFile != null) { [[out]].putString(STATE_PREFIX + "file", mFile.toString()); } mSaved = "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Used for saving dialog state on destroyrecreate cycles

[[[[Adv]]]]: public void [[extract]](Bundle [[distance]]) { [[distance]].putInt(STATE_PREFIX + "status", mStatus); if (mFile != null) { [[distance]].putString(STATE_PREFIX + "file", mFile.toString()); } mSaved = "[["Truth" == "Truth"]]" == "[["Truth" == "Truth"]]"; }
[[[[Nl]]]]: Used for saving dialog state on destroyrecreate cycles


--------------------------------------------- Result 385 ---------------------------------------------
[[0 (-7428%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[getUncollectedEpisodesOfSeason]](@NonNull Context [[context]], int [[seasonTvdbId]]) { return getCountOf([[context]].getContentResolver(), Episodes.buildEpisodesOfSeasonUri([[seasonTvdbId]]), Episodes.SELECTION_NOT_COLLECTED, null, UNKNOWN_COLLECTED_COUNT); }
[[[[Nl]]]]: Returns how many episodes of a season are left to collect

[[[[Adv]]]]: public static int [[lighter]](@NonNull Context [[meanings]], int [[coldness]]) { return getCountOf([[meanings]].getContentResolver(), Episodes.buildEpisodesOfSeasonUri([[coldness]]), Episodes.SELECTION_NOT_COLLECTED, null, UNKNOWN_COLLECTED_COUNT); }
[[[[Nl]]]]: Returns how many episodes of a season are left to collect


--------------------------------------------- Result 386 ---------------------------------------------
[[0 (-8260%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[checkVector]](int [[elemChannels]]) { int [[retVal]] = n_checkVector(nativeObj, [[elemChannels]]); return [[retVal]]; }
[[[[Nl]]]]: javadoc : Mat : :checkVector ( elemChannels )

[[[[Adv]]]]: public int [[altas]](int [[adrenaline]]) { int [[feelin]] = n_checkVector(nativeObj, [[adrenaline]]); return [[feelin]]; }
[[[[Nl]]]]: javadoc : Mat : :checkVector ( elemChannels )


--------------------------------------------- Result 387 ---------------------------------------------
[[0 (-5562%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[speakNow]](String [[text]]) { if (!isEnabled) { Log.e(TAG, "Should never speak when audible is disabled"); Exceptions.report(new IllegalStateException("MyAudible.speakNow should never speak when audible is disabled")); } if (speech != null) { speech.speakNow([[text]]); } else { Log.e(TAG, "speakNow called but speech is null"); } }
[[[[Nl]]]]: Make a special announcement

[[[[Adv]]]]: public void [[eliminate]](String [[language]]) { if (!isEnabled) { Log.e(TAG, "Should never speak when audible is disabled"); Exceptions.report(new IllegalStateException("MyAudible.speakNow should never speak when audible is disabled")); } if (speech != null) { speech.speakNow([[language]]); } else { Log.e(TAG, "speakNow called but speech is null"); } }
[[[[Nl]]]]: Make a special announcement


--------------------------------------------- Result 388 ---------------------------------------------
[[0 (-8065%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isWithinDistance]](Projection projection, Point [[point]], LatLng [[latLng]], double [[allowableScreenPercentage]]) { Point point2 = projection.toScreenLocation([[latLng]]); double [[distance]] = Math.sqrt(Math.pow([[point]].x - point2.x, 2) + Math.pow([[point]].y - point2.y, 2)); boolean withinDistance = [[distance]] / Math.min(view.getWidth(), view.getHeight()) <= [[allowableScreenPercentage]]; return withinDistance; }
[[[[Nl]]]]: Check if the point is within clicking distance to the lat lng corner @ param projection @ param point @ param latLng @ param allowableScreenPercentage @ return

[[[[Adv]]]]: private boolean [[scribbling]](Projection projection, Point [[commentary]], LatLng [[musketeers]], double [[uprising]]) { Point point2 = projection.toScreenLocation([[musketeers]]); double [[segregation]] = Math.sqrt(Math.pow([[commentary]].x - point2.x, 2) + Math.pow([[commentary]].y - point2.y, 2)); boolean withinDistance = [[segregation]] / Math.min(view.getWidth(), view.getHeight()) <= [[uprising]]; return withinDistance; }
[[[[Nl]]]]: Check if the point is within clicking distance to the lat lng corner @ param projection @ param point @ param latLng @ param allowableScreenPercentage @ return


--------------------------------------------- Result 389 ---------------------------------------------
[[0 (-7533%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[clear]](int [[key]]) { int [[index]] = mItems.indexOfKey([[key]]); if ([[index]] >= 0) { mItems.removeAt([[index]]); notifyItemRangeRemoved([[index]], 1); } }
[[[[Nl]]]]: Clears the given key and associated item from the adapter

[[[[Adv]]]]: public void [[categorical]](int [[importance]]) { int [[repertoire]] = mItems.indexOfKey([[importance]]); if ([[repertoire]] >= 0) { mItems.removeAt([[repertoire]]); notifyItemRangeRemoved([[repertoire]], 1); } }
[[[[Nl]]]]: Clears the given key and associated item from the adapter


--------------------------------------------- Result 390 ---------------------------------------------
[[0 (-5925%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[checkTrailUser]](String [[trailUserId]], String [[currentUserId]]) { if([[trailUserId]].equals([[currentUserId]])) return "[[True]]" == "[[True]]"; return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: Checks If The AddedDeletedChanged Trail Belongs To The Current User

[[[[Adv]]]]: private boolean [[pearson]](String [[directive]], String [[rio]]) { if([[directive]].equals([[rio]])) return "[["Precision" == "Precision"]]" == "[["Precision" == "Precision"]]"; return "[["Imaginary" != "Imaginary"]]" != "[["Imaginary" != "Imaginary"]]"; }
[[[[Nl]]]]: Checks If The AddedDeletedChanged Trail Belongs To The Current User


--------------------------------------------- Result 391 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 391 / 0 / 391:  50%|████▉     | 391/785 [11:58<12:04,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 391 / 0 / 391:  50%|████▉     | 392/785 [12:01<12:03,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 392 / 0 / 392:  50%|████▉     | 392/785 [12:01<12:03,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 392 / 0 / 392:  50%|█████     | 393/785 [12:03<12:01,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 393 / 0 / 393:  50%|█████     | 393/785 [12:03<12:01,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 393 / 0 / 393:  50%|█████     | 394/785 [12:06<12:00,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 394 / 0 / 394:  50%|█████     | 394/785 [12:06<12:00,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 394 / 0 / 394:  50%|█████     | 395/785 [12:07<11:58,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 395 / 0 / 395:  50%|█████     | 395/785 [12:07<11:58,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 395 / 0 / 395:  50%|█████     | 396/785 [12:08<11:55,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 396 / 0 / 396:  50%|█████     | 396/785 [12:08<11:55,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 396 / 0 / 396:  51%|█████     | 397/785 [12:10<11:54,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 397 / 0 / 397:  51%|█████     | 397/785 [12:10<11:54,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 397 / 0 / 397:  51%|█████     | 398/785 [12:11<11:50,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 398 / 0 / 398:  51%|█████     | 398/785 [12:11<11:50,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 398 / 0 / 398:  51%|█████     | 399/785 [12:13<11:49,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 399 / 0 / 399:  51%|█████     | 399/785 [12:13<11:49,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 399 / 0 / 399:  51%|█████     | 400/785 [12:15<11:47,  1.84s/it][[0 (-7233%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static AppStateHolder [[getStateHolder]]() { if (mAppStateHolder == null) { mAppStateHolder = new AppStateHolder(); } return mAppStateHolder; }
[[[[Nl]]]]: State holder reference provider by application @ return

[[[[Adv]]]]: public static AppStateHolder [[glimmering]]() { if (mAppStateHolder == null) { mAppStateHolder = new AppStateHolder(); } return mAppStateHolder; }
[[[[Nl]]]]: State holder reference provider by application @ return


--------------------------------------------- Result 392 ---------------------------------------------
[[0 (-7278%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addContentFragment]](@NonNull final BaseActivity [[activity]], final int [[containerId]], final Fragment [[fragment]]) { FragmentManager [[fragmentManager]] = [[activity]].getSupportFragmentManager(); [[fragmentManager]].beginTransaction().add([[containerId]], [[fragment]],[[fragment]].getClass().getSimpleName()).addToBackStack(null).commit(); [[fragmentManager]].executePendingTransactions(); }
[[[[Nl]]]]: This method will add fragment to back-stack

[[[[Adv]]]]: public static void [[deadlock]](@NonNull final BaseActivity [[effort]], final int [[kon]], final Fragment [[shard]]) { FragmentManager [[untouchables]] = [[effort]].getSupportFragmentManager(); [[untouchables]].beginTransaction().add([[kon]], [[shard]],[[shard]].getClass().getSimpleName()).addToBackStack(null).commit(); [[untouchables]].executePendingTransactions(); }
[[[[Nl]]]]: This method will add fragment to back-stack


--------------------------------------------- Result 393 ---------------------------------------------
[[0 (-6539%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[connect]]() { String [[username]] = Helpermethods.getpref().getString("username", ""); String [[password]] = Helpermethods.getpref().getString("password", ""); destroySSL(); HttpAuthentication [[authHeader]] = new HttpBasicAuthentication([[username]], [[password]]); requestHeaders = new HttpHeaders(); requestHeaders.setAuthorization([[authHeader]]); requestHeaders.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON)); restTemplate = new RestTemplate(); restTemplate.getMessageConverters().add(new StringHttpMessageConverter()); }
[[[[Nl]]]]: use saved password to populate header for further use

[[[[Adv]]]]: private static void [[linking]]() { String [[linking]] = Helpermethods.getpref().getString("username", ""); String [[authentication]] = Helpermethods.getpref().getString("password", ""); destroySSL(); HttpAuthentication [[fostering]] = new HttpBasicAuthentication([[linking]], [[authentication]]); requestHeaders = new HttpHeaders(); requestHeaders.setAuthorization([[fostering]]); requestHeaders.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON)); restTemplate = new RestTemplate(); restTemplate.getMessageConverters().add(new StringHttpMessageConverter()); }
[[[[Nl]]]]: use saved password to populate header for further use


--------------------------------------------- Result 394 ---------------------------------------------
[[0 (-6267%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void onTouchEvent(MotionEvent [[event]]) { if ([[event]].getAction() == MotionEvent.ACTION_DOWN) { if (values.getPauseButtonRect().contains(Math.round([[event]].getX()), Math.round([[event]].getY()))) { if (gameRunning) { gameRunning = False; player.stopAnimation(); } else { gameRunning = True; player.startAnimation(); } } } }
[[[[Nl]]]]: for pause button

[[[[Adv]]]]: public void onTouchEvent(MotionEvent [[incidents]]) { if ([[incidents]].getAction() == MotionEvent.ACTION_DOWN) { if (values.getPauseButtonRect().contains(Math.round([[incidents]].getX()), Math.round([[incidents]].getY()))) { if (gameRunning) { gameRunning = False; player.stopAnimation(); } else { gameRunning = True; player.startAnimation(); } } } }
[[[[Nl]]]]: for pause button


--------------------------------------------- Result 395 ---------------------------------------------
[[0 (-7329%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[set]](long [[millis]]) { allDay = "[[False]]" != "[[False]]"; calculator.timezone = timezone; calculator.setTimeInMillis([[millis]]); calculator.copyFieldsToTime(this); }
[[[[Nl]]]]: Sets the fields in this Time object given the UTC milliseconds

[[[[Adv]]]]: public void [[playing]](long [[waterways]]) { allDay = "[["Deceiving" != "Deceiving"]]" != "[["Deceiving" != "Deceiving"]]"; calculator.timezone = timezone; calculator.setTimeInMillis([[waterways]]); calculator.copyFieldsToTime(this); }
[[[[Nl]]]]: Sets the fields in this Time object given the UTC milliseconds


--------------------------------------------- Result 396 ---------------------------------------------
[[0 (-7395%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[resume]]() { if (isPausing) { mAudioManager.abandonAudioFocus(mAfChangeListener); if (mIsMuteStream && mCurrentVolume > 0) { mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, mCurrentVolume, 0); } isPausing = "[[False]]" != "[[False]]"; } }
[[[[Nl]]]]: Abandons audio focus and restores the audio volume

[[[[Adv]]]]: public void [[booted]]() { if (isPausing) { mAudioManager.abandonAudioFocus(mAfChangeListener); if (mIsMuteStream && mCurrentVolume > 0) { mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, mCurrentVolume, 0); } isPausing = "[["Fakes" != "Fakes"]]" != "[["Fakes" != "Fakes"]]"; } }
[[[[Nl]]]]: Abandons audio focus and restores the audio volume


--------------------------------------------- Result 397 ---------------------------------------------
[[0 (-7836%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setFloat]](int [[tagType]], float [[value]]) { setObject([[tagType]], new Float([[value]])); }
[[[[Nl]]]]: Sets a float value for the specified tag

[[[[Adv]]]]: public void [[befriended]](int [[neckties]], float [[extent]]) { setObject([[neckties]], new Float([[extent]])); }
[[[[Nl]]]]: Sets a float value for the specified tag


--------------------------------------------- Result 398 ---------------------------------------------
[[0 (-7841%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[emptyInputEditText]]() { textInputEditTextName.setText(null); textInputEditTextEmail.setText(null); textInputEditTextPassword.setText(null); textInputEditTextConfirmPassword.setText(null); }
[[[[Nl]]]]: This method is to empty all input edit text

[[[[Adv]]]]: private void [[preflight]]() { textInputEditTextName.setText(null); textInputEditTextEmail.setText(null); textInputEditTextPassword.setText(null); textInputEditTextConfirmPassword.setText(null); }
[[[[Nl]]]]: This method is to empty all input edit text


--------------------------------------------- Result 399 ---------------------------------------------
[[0 (-7003%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[addCountryListener]](CountryListener [[listener]], Looper [[looper]]) { synchronized (mListeners) { if (!mListeners.containsKey([[listener]])) { ListenerTransport [[transport]] = new ListenerTransport([[listener]], [[looper]]); try { mService.addCountryListener([[transport]]); mListeners.put([[listener]], [[transport]]); } catch (RemoteException e) { Log.e(TAG, "addCountryListener: RemoteException", e); } } } }
[[[[Nl]]]]: Add a listener to receive the notification when the country is detected or changed

[[[[Adv]]]]: public void [[snooze]](CountryListener [[microphone]], Looper [[washburn]]) { synchronized (mListeners) { if (!mListeners.containsKey([[microphone]])) { ListenerTransport [[hauling]] = new ListenerTransport([[microphone]], [[washburn]]); try { mService.addCountryListener([[hauling]]); mListeners.put([[microphone]], [[hauling]]); } catch (RemoteException e) { Log.e(TAG, "addCountryListener: RemoteException", e); } } } }
[[[[Nl]]]]: Add a listener to receive the notification when the country is detected or changed


--------------------------------------------- Result 400 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 400 / 0 / 400:  51%|█████     | 400/785 [12:15<11:47,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 400 / 0 / 400:  51%|█████     | 401/785 [12:16<11:45,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 401 / 0 / 401:  51%|█████     | 401/785 [12:16<11:45,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 401 / 0 / 401:  51%|█████     | 402/785 [12:19<11:44,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 402 / 0 / 402:  51%|█████     | 402/785 [12:19<11:44,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 402 / 0 / 402:  51%|█████▏    | 403/785 [12:20<11:41,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 403 / 0 / 403:  51%|█████▏    | 403/785 [12:20<11:41,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 403 / 0 / 403:  51%|█████▏    | 404/785 [12:22<11:39,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 404 / 0 / 404:  51%|█████▏    | 404/785 [12:22<11:39,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 404 / 0 / 404:  52%|█████▏    | 405/785 [12:23<11:37,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 405 / 0 / 405:  52%|█████▏    | 405/785 [12:23<11:37,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 405 / 0 / 405:  52%|█████▏    | 406/785 [12:24<11:34,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 406 / 0 / 406:  52%|█████▏    | 406/785 [12:24<11:34,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 406 / 0 / 406:  52%|█████▏    | 407/785 [12:26<11:32,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 407 / 0 / 407:  52%|█████▏    | 407/785 [12:26<11:32,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 407 / 0 / 407:  52%|█████▏    | 408/785 [12:28<11:31,  1.83s/it][[0 (-6470%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onItemSelected]](int [[position]]) { Log.i(TAG, "Entered onItemSelected(" + [[position]] + ")"); if (mFeedFragment == null) mFeedFragment = new FeedFragment(); if (!isInTwoPaneMode()) { FragmentTransaction [[fTransaction]] = getFragmentManager().beginTransaction(); [[fTransaction]].replace(R.id.fragment_container, mFeedFragment); [[fTransaction]].addToBackStack(null); [[fTransaction]].commit(); getFragmentManager().executePendingTransactions(); } mFeedFragment.updateFeedDisplay([[position]]); }
[[[[Nl]]]]: Display selected Twitter feed

[[[[Adv]]]]: public void [[unceasing]](int [[posture]]) { Log.i(TAG, "Entered onItemSelected(" + [[posture]] + ")"); if (mFeedFragment == null) mFeedFragment = new FeedFragment(); if (!isInTwoPaneMode()) { FragmentTransaction [[schemin]] = getFragmentManager().beginTransaction(); [[schemin]].replace(R.id.fragment_container, mFeedFragment); [[schemin]].addToBackStack(null); [[schemin]].commit(); getFragmentManager().executePendingTransactions(); } mFeedFragment.updateFeedDisplay([[posture]]); }
[[[[Nl]]]]: Display selected Twitter feed


--------------------------------------------- Result 401 ---------------------------------------------
[[0 (-6653%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[mail]]() { Intent i = new Intent(Intent.ACTION_SEND); i.setType(getString(R.string.type)); i.putExtra(Intent.EXTRA_EMAIL, new String[]{getString(R.string.address_email)}); i.putExtra(Intent.EXTRA_SUBJECT, getString(R.string.about_mail)); i.putExtra(Intent.EXTRA_TEXT, getString(R.string.main_me)); try { startActivity(Intent.createChooser(i, getString(R.string.send))); } catch (ActivityNotFoundException ex) { Toast.makeText(this, getString(R.string.no_mail_programs), Toast.LENGTH_SHORT).show(); } }
[[[[Nl]]]]: Function to email the developer

[[[[Adv]]]]: private void [[letterbox]]() { Intent i = new Intent(Intent.ACTION_SEND); i.setType(getString(R.string.type)); i.putExtra(Intent.EXTRA_EMAIL, new String[]{getString(R.string.address_email)}); i.putExtra(Intent.EXTRA_SUBJECT, getString(R.string.about_mail)); i.putExtra(Intent.EXTRA_TEXT, getString(R.string.main_me)); try { startActivity(Intent.createChooser(i, getString(R.string.send))); } catch (ActivityNotFoundException ex) { Toast.makeText(this, getString(R.string.no_mail_programs), Toast.LENGTH_SHORT).show(); } }
[[[[Nl]]]]: Function to email the developer


--------------------------------------------- Result 402 ---------------------------------------------
[[0 (-7661%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public View [[onCreateBackgroundView]](LayoutInflater [[inflater]], ViewGroup [[container]], Bundle [[savedInstanceState]]) { return [[inflater]].inflate(R.layout.lb_guidedstep_background, [[container]], "[[False]]" != "[[False]]"); }
[[[[Nl]]]]: Called by onCreateView to inflate background view

[[[[Adv]]]]: public View [[dampness]](LayoutInflater [[derivatives]], ViewGroup [[shipping]], Bundle [[tripped]]) { return [[derivatives]].inflate(R.layout.lb_guidedstep_background, [[shipping]], "[["Inaccurate" != "Inaccurate"]]" != "[["Inaccurate" != "Inaccurate"]]"); }
[[[[Nl]]]]: Called by onCreateView to inflate background view


--------------------------------------------- Result 403 ---------------------------------------------
[[0 (-6543%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[sync]]() { if (mRequeryCursor == null) { if (DEBUG) { LogUtils.i(LOG_TAG, "[sync() %s; no requery cursor]", mName); } return; } synchronized (mCacheMapLock) { if (DEBUG) { LogUtils.i(LOG_TAG, "[sync() %s]", mName); } mRefreshTask = null; mRefreshReady = "[[False]]" != "[[False]]"; resetCursor(mRequeryCursor); mRequeryCursor = null; } notifyDataChanged(); }
[[[[Nl]]]]: Put the refreshed cursor in place ( called by the UI )

[[[[Adv]]]]: public void [[stopwatch]]() { if (mRequeryCursor == null) { if (DEBUG) { LogUtils.i(LOG_TAG, "[sync() %s; no requery cursor]", mName); } return; } synchronized (mCacheMapLock) { if (DEBUG) { LogUtils.i(LOG_TAG, "[sync() %s]", mName); } mRefreshTask = null; mRefreshReady = "[["Deceiving" != "Deceiving"]]" != "[["Deceiving" != "Deceiving"]]"; resetCursor(mRequeryCursor); mRequeryCursor = null; } notifyDataChanged(); }
[[[[Nl]]]]: Put the refreshed cursor in place ( called by the UI )


--------------------------------------------- Result 404 ---------------------------------------------
[[0 (-7676%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public AttributeSet [[getCharacterAttributes]]() { StyledDocument [[doc]] = getStyledDocument(); Element [[run]] = [[doc]].getCharacterElement(getCaretPosition()); if ([[run]] != null) { return [[run]].getAttributes(); } return null; }
[[[[Nl]]]]: Fetches the character attributes in effect at the current location of the caret , or < code > null < code >

[[[[Adv]]]]: public AttributeSet [[gliders]]() { StyledDocument [[obstetrician]] = getStyledDocument(); Element [[deploying]] = [[obstetrician]].getCharacterElement(getCaretPosition()); if ([[deploying]] != null) { return [[deploying]].getAttributes(); } return null; }
[[[[Nl]]]]: Fetches the character attributes in effect at the current location of the caret , or < code > null < code >


--------------------------------------------- Result 405 ---------------------------------------------
[[0 (-7099%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[verifyInstalledConfig]](PasspointConfiguration [[expectedConfig]]) { List<PasspointConfiguration> [[installedConfigs]] = mManager.getProviderConfigs(); assertEquals(1, [[installedConfigs]].size()); assertEquals([[expectedConfig]], [[installedConfigs]].get(0)); }
[[[[Nl]]]]: Verify that the given Passpoint configuration matches the one that 's added to the PasspointManager

[[[[Adv]]]]: private void [[earl]](PasspointConfiguration [[offerings]]) { List<PasspointConfiguration> [[crowding]] = mManager.getProviderConfigs(); assertEquals(1, [[crowding]].size()); assertEquals([[offerings]], [[crowding]].get(0)); }
[[[[Nl]]]]: Verify that the given Passpoint configuration matches the one that 's added to the PasspointManager


--------------------------------------------- Result 406 ---------------------------------------------
[[0 (-7240%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public InternetDomainName [[parent]]() { checkState(hasParent(), "Domain '%s' has no parent", name); return ancestor(1); }
[[[[Nl]]]]: Returns an { @ code InternetDomainName } that is the immediate ancestor of this one ; that is , the current domain with the leftmost part removed

[[[[Adv]]]]: public InternetDomainName [[mother]]() { checkState(hasParent(), "Domain '%s' has no parent", name); return ancestor(1); }
[[[[Nl]]]]: Returns an { @ code InternetDomainName } that is the immediate ancestor of this one ; that is , the current domain with the leftmost part removed


--------------------------------------------- Result 407 ---------------------------------------------
[[0 (-7570%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getErrorReason]](int [[errorCode]]) { String [[errorReason]] = ""; switch ([[errorCode]]) { case AdRequest.ERROR_CODE_INTERNAL_ERROR: [[errorReason]] = "Internal error"; break; case AdRequest.ERROR_CODE_INVALID_REQUEST: [[errorReason]] = "Invalid request"; break; case AdRequest.ERROR_CODE_NETWORK_ERROR: [[errorReason]] = "Network Error"; break; case AdRequest.ERROR_CODE_NO_FILL: [[errorReason]] = "No fill"; break; } return [[errorReason]]; }
[[[[Nl]]]]: Gets a string error reason from an error code

[[[[Adv]]]]: public String [[notice]](int [[playlist]]) { String [[association]] = ""; switch ([[playlist]]) { case AdRequest.ERROR_CODE_INTERNAL_ERROR: [[association]] = "Internal error"; break; case AdRequest.ERROR_CODE_INVALID_REQUEST: [[association]] = "Invalid request"; break; case AdRequest.ERROR_CODE_NETWORK_ERROR: [[association]] = "Network Error"; break; case AdRequest.ERROR_CODE_NO_FILL: [[association]] = "No fill"; break; } return [[association]]; }
[[[[Nl]]]]: Gets a string error reason from an error code


--------------------------------------------- Result 408 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 408 / 0 / 408:  52%|█████▏    | 408/785 [12:28<11:31,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 408 / 0 / 408:  52%|█████▏    | 409/785 [12:29<11:29,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 409 / 0 / 409:  52%|█████▏    | 409/785 [12:29<11:29,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 409 / 0 / 409:  52%|█████▏    | 410/785 [12:31<11:27,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 410 / 0 / 410:  52%|█████▏    | 410/785 [12:31<11:27,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 410 / 0 / 410:  52%|█████▏    | 411/785 [12:33<11:26,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 411 / 0 / 411:  52%|█████▏    | 411/785 [12:33<11:26,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 411 / 0 / 411:  52%|█████▏    | 412/785 [12:35<11:23,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 412 / 0 / 412:  52%|█████▏    | 412/785 [12:35<11:23,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 412 / 0 / 412:  53%|█████▎    | 413/785 [12:36<11:21,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 413 / 0 / 413:  53%|█████▎    | 413/785 [12:36<11:21,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 413 / 0 / 413:  53%|█████▎    | 414/785 [12:37<11:19,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 414 / 0 / 414:  53%|█████▎    | 414/785 [12:37<11:19,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 414 / 0 / 414:  53%|█████▎    | 415/785 [12:39<11:16,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 415 / 0 / 415:  53%|█████▎    | 415/785 [12:39<11:16,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 415 / 0 / 415:  53%|█████▎    | 416/785 [12:40<11:14,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 416 / 0 / 416:  53%|█████▎    | 416/785 [12:40<11:14,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 416 / 0 / 416:  53%|█████▎    | 417/785 [12:43<11:13,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 417 / 0 / 417:  53%|█████▎    | 417/785 [12:43<11:13,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 417 / 0 / 417:  53%|█████▎    | 418/785 [12:43<11:10,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 418 / 0 / 418:  53%|█████▎    | 418/785 [12:43<11:10,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 418 / 0 / 418:  53%|█████▎    | 419/785 [12:46<11:09,  1.83s/it][[0 (-7525%)]] --> [[[FAILED]]]

[[[[Adv]]]]: synchronized void [[setObjectId]](String [[localId]], String [[objectId]]) { MapEntry [[entry]] = getMapEntry([[localId]]); if ([[entry]].retainCount > 0) { if ([[entry]].objectId != null) { throw new IllegalStateException( "Tried to set an objectId for a localId that already has one."); } [[entry]].objectId = [[objectId]]; putMapEntry([[localId]], [[entry]]); } }
[[[[Nl]]]]: Sets the objectId associated with a given local id

[[[[Adv]]]]: synchronized void [[skateboarder]](String [[hurts]], String [[commandment]]) { MapEntry [[penetrate]] = getMapEntry([[hurts]]); if ([[penetrate]].retainCount > 0) { if ([[penetrate]].objectId != null) { throw new IllegalStateException( "Tried to set an objectId for a localId that already has one."); } [[penetrate]].objectId = [[commandment]]; putMapEntry([[hurts]], [[penetrate]]); } }
[[[[Nl]]]]: Sets the objectId associated with a given local id


--------------------------------------------- Result 409 ---------------------------------------------
[[0 (-7214%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[testBlacklistedPublicKey]]() throws Exception { X509Certificate [[blacklistedCa]] = loadCertificate(BLACKLIST_CA); CertBlacklist [[blacklist]] = CertBlacklist.getDefault(); assertTrue([[blacklist]].isPublicKeyBlackListed([[blacklistedCa]].getPublicKey())); }
[[[[Nl]]]]: Ensure that the test blacklisted CA is actually blacklisted by default

[[[[Adv]]]]: public void [[intimates]]() throws Exception { X509Certificate [[texted]] = loadCertificate(BLACKLIST_CA); CertBlacklist [[nightfall]] = CertBlacklist.getDefault(); assertTrue([[nightfall]].isPublicKeyBlackListed([[texted]].getPublicKey())); }
[[[[Nl]]]]: Ensure that the test blacklisted CA is actually blacklisted by default


--------------------------------------------- Result 410 ---------------------------------------------
[[0 (-7822%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[calcYValueSum]](ArrayList<T> [[dataSets]]) { mYValueSum = 0; if ([[dataSets]] == null) return; for (int [[i]] = 0; [[i]] < [[dataSets]].size(); [[i]]++) { mYValueSum += Math.abs([[dataSets]].get([[i]]).getYValueSum()); } }
[[[[Nl]]]]: calculates the sum of all y-values in all datasets

[[[[Adv]]]]: protected void [[frolic]](ArrayList<T> [[triplets]]) { mYValueSum = 0; if ([[triplets]] == null) return; for (int [[ich]] = 0; [[ich]] < [[triplets]].size(); [[ich]]++) { mYValueSum += Math.abs([[triplets]].get([[ich]]).getYValueSum()); } }
[[[[Nl]]]]: calculates the sum of all y-values in all datasets


--------------------------------------------- Result 411 ---------------------------------------------
[[0 (-7587%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[unescape]](String [[original]]) { Matcher [[mm]] = escaped.matcher([[original]]); StringBuffer [[unescaped]] = new StringBuffer(); while ([[mm]].find()) { [[mm]].appendReplacement([[unescaped]], Character.toString((char) Integer .parseInt([[mm]].group(1), 10))); } [[mm]].appendTail([[unescaped]]); return [[unescaped]].toString(); }
[[[[Nl]]]]: Unescape UTF-8 escaped characters to string

[[[[Adv]]]]: public static String [[bernoulli]](String [[firstly]]) { Matcher [[diameter]] = escaped.matcher([[firstly]]); StringBuffer [[sponsorship]] = new StringBuffer(); while ([[diameter]].find()) { [[diameter]].appendReplacement([[sponsorship]], Character.toString((char) Integer .parseInt([[diameter]].group(1), 10))); } [[diameter]].appendTail([[sponsorship]]); return [[sponsorship]].toString(); }
[[[[Nl]]]]: Unescape UTF-8 escaped characters to string


--------------------------------------------- Result 412 ---------------------------------------------
[[0 (-7106%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]]( Point2D [[p]] ) { if( m_List.size() == 0 ) { m_List.add( new PolySimple() ); } m_List.get(0).add( [[p]] ); }
[[[[Nl]]]]: Add a point to the first inner polygon

[[[[Adv]]]]: public void [[totalled]]( Point2D [[newsweek]] ) { if( m_List.size() == 0 ) { m_List.add( new PolySimple() ); } m_List.get(0).add( [[newsweek]] ); }
[[[[Nl]]]]: Add a point to the first inner polygon


--------------------------------------------- Result 413 ---------------------------------------------
[[0 (-7516%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addHeader]](@NonNull EditText [[editText]], @IntRange(from = 1, to = 6) int [[level]]) { [[addHeader]]([[editText]].getText(), [[level]]); }
[[[[Nl]]]]: Turns the selected tag to Markdown header tag `` # text '' with the specified heading level

[[[[Adv]]]]: public static void [[sufficient]](@NonNull EditText [[notify]], @IntRange(from = 1, to = 6) int [[amplitude]]) { [[sufficient]]([[notify]].getText(), [[amplitude]]); }
[[[[Nl]]]]: Turns the selected tag to Markdown header tag `` # text '' with the specified heading level


--------------------------------------------- Result 414 ---------------------------------------------
[[0 (-7725%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[internalClearModelStateLocked]]() { for (ModelData [[modelData]] : mModelDataMap.values()) { [[modelData]].clearState(); } }
[[[[Nl]]]]: Clears state for all models ( generic and keyphrase )

[[[[Adv]]]]: private void [[xerox]]() { for (ModelData [[imaginings]] : mModelDataMap.values()) { [[imaginings]].clearState(); } }
[[[[Nl]]]]: Clears state for all models ( generic and keyphrase )


--------------------------------------------- Result 415 ---------------------------------------------
[[0 (-6764%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[getMaxY]](){ maxY=0.0; for (int [[i]]=0; [[i]]<array_hours.length; [[i]]++) if (maxY<array_hours[[[i]]]) maxY=array_hours[[[i]]]; }
[[[[Nl]]]]: devuelve el valor máximo que alcanzará el eje y

[[[[Adv]]]]: protected void [[stretchy]](){ maxY=0.0; for (int [[wanted]]=0; [[wanted]]<array_hours.length; [[wanted]]++) if (maxY<array_hours[[[wanted]]]) maxY=array_hours[[[wanted]]]; }
[[[[Nl]]]]: devuelve el valor máximo que alcanzará el eje y


--------------------------------------------- Result 416 ---------------------------------------------
[[0 (-7451%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getFormattedResult]]() { StringBuilder [[res]] = new StringBuilder(); for (ObdCommand [[command]] : commands) [[res]].append([[command]].getFormattedResult()).append(","); return [[res]].toString(); }
[[[[Nl]]]]: < p > getFormattedResult

[[[[Adv]]]]: public String [[biker]]() { StringBuilder [[assuredly]] = new StringBuilder(); for (ObdCommand [[commandos]] : commands) [[assuredly]].append([[commandos]].getFormattedResult()).append(","); return [[assuredly]].toString(); }
[[[[Nl]]]]: < p > getFormattedResult


--------------------------------------------- Result 417 ---------------------------------------------
[[0 (-7020%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isPrime]](long [[n]]) { for (int [[p]] : primes) { if ([[n]] % [[p]] == 0) return False; } return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Only valid if 1 < n < = 10^DIGITS

[[[[Adv]]]]: private boolean [[coming]](long [[phosphorous]]) { for (int [[phosphorous]] : primes) { if ([[phosphorous]] % [[phosphorous]] == 0) return False; } return "[["Staunch" == "Staunch"]]" == "[["Staunch" == "Staunch"]]"; }
[[[[Nl]]]]: Only valid if 1 < n < = 10^DIGITS


--------------------------------------------- Result 418 ---------------------------------------------
[[0 (-6777%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[getInCapture]]() { return inCapture; }
[[[[Nl]]]]: In camera1 mode always must be true

[[[[Adv]]]]: public boolean [[titillating]]() { return inCapture; }
[[[[Nl]]]]: In camera1 mode always must be true


--------------------------------------------- Result 419 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 419 / 0 / 419:  53%|█████▎    | 419/785 [12:46<11:09,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 419 / 0 / 419:  54%|█████▎    | 420/785 [12:48<11:07,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 420 / 0 / 420:  54%|█████▎    | 420/785 [12:48<11:07,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 420 / 0 / 420:  54%|█████▎    | 421/785 [12:48<11:04,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 421 / 0 / 421:  54%|█████▎    | 421/785 [12:48<11:04,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 421 / 0 / 421:  54%|█████▍    | 422/785 [12:51<11:03,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 422 / 0 / 422:  54%|█████▍    | 422/785 [12:51<11:03,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 422 / 0 / 422:  54%|█████▍    | 423/785 [12:54<11:02,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 423 / 0 / 423:  54%|█████▍    | 423/785 [12:54<11:02,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 423 / 0 / 423:  54%|█████▍    | 424/785 [12:57<11:01,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 424 / 0 / 424:  54%|█████▍    | 424/785 [12:57<11:01,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 424 / 0 / 424:  54%|█████▍    | 425/785 [12:58<10:59,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 425 / 0 / 425:  54%|█████▍    | 425/785 [12:58<10:59,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 425 / 0 / 425:  54%|█████▍    | 426/785 [13:00<10:58,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 426 / 0 / 426:  54%|█████▍    | 426/785 [13:00<10:58,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 426 / 0 / 426:  54%|█████▍    | 427/785 [13:01<10:55,  1.83s/it][[0 (-5616%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[initCipher]](Cipher [[cipher]], String keyName) { try { mKeyStore.load(null); SecretKey [[key]] = (SecretKey) mKeyStore.getKey(keyName, null); [[cipher]].init(Cipher.ENCRYPT_MODE, [[key]]); return "[[True]]" == "[[True]]"; } catch (KeyPermanentlyInvalidatedException e) { return "[[False]]" != "[[False]]"; } catch (KeyStoreException | CertificateException | UnrecoverableKeyException | IOException | NoSuchAlgorithmException | InvalidKeyException e) { throw new RuntimeException("Failed to init Cipher", e); } }
[[[[Nl]]]]: finger print stuff

[[[[Adv]]]]: private boolean [[dropping]](Cipher [[decoder]], String keyName) { try { mKeyStore.load(null); SecretKey [[predicate]] = (SecretKey) mKeyStore.getKey(keyName, null); [[decoder]].init(Cipher.ENCRYPT_MODE, [[predicate]]); return "[["Veritable" == "Veritable"]]" == "[["Veritable" == "Veritable"]]"; } catch (KeyPermanentlyInvalidatedException e) { return "[["Deceiving" != "Deceiving"]]" != "[["Deceiving" != "Deceiving"]]"; } catch (KeyStoreException | CertificateException | UnrecoverableKeyException | IOException | NoSuchAlgorithmException | InvalidKeyException e) { throw new RuntimeException("Failed to init Cipher", e); } }
[[[[Nl]]]]: finger print stuff


--------------------------------------------- Result 420 ---------------------------------------------
[[0 (-7528%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static ViewGroup [[getActivityDecorView]]() { ViewGroup [[decorView]] = null; [[decorView]] = (ViewGroup) ((Activity) getContext()).getWindow().getDecorView(); return [[decorView]]; }
[[[[Nl]]]]: Return activity parent view @ return

[[[[Adv]]]]: private static ViewGroup [[downbeat]]() { ViewGroup [[embezzled]] = null; [[embezzled]] = (ViewGroup) ((Activity) getContext()).getWindow().getDecorView(); return [[embezzled]]; }
[[[[Nl]]]]: Return activity parent view @ return


--------------------------------------------- Result 421 ---------------------------------------------
[[0 (-8089%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[clearAll]]() { realm.beginTransaction(); realm.deleteAll(); realm.commitTransaction(); }
[[[[Nl]]]]: clear all objects from Book

[[[[Adv]]]]: public void [[electrocution]]() { realm.beginTransaction(); realm.deleteAll(); realm.commitTransaction(); }
[[[[Nl]]]]: clear all objects from Book


--------------------------------------------- Result 422 ---------------------------------------------
[[0 (-7094%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[updateQuote]](SQLiteDatabase [[db]], long [[quoteId]], long [[authorId]]) { ContentValues [[cv]] = new ContentValues(); [[cv]].put(Quote.Columns.AUTHOR_ID, [[authorId]]); [[db]].update(Quote.TABLE_NAME, [[cv]], Quote.Columns.ID + "=?", new String[]{String.valueOf([[quoteId]])}); }
[[[[Nl]]]]: Changes Author_id of quote with given quoteId

[[[[Adv]]]]: public void [[belches]](SQLiteDatabase [[oracle]], long [[impressionism]], long [[roofs]]) { ContentValues [[regains]] = new ContentValues(); [[regains]].put(Quote.Columns.AUTHOR_ID, [[roofs]]); [[oracle]].update(Quote.TABLE_NAME, [[regains]], Quote.Columns.ID + "=?", new String[]{String.valueOf([[impressionism]])}); }
[[[[Nl]]]]: Changes Author_id of quote with given quoteId


--------------------------------------------- Result 423 ---------------------------------------------
[[0 (-8558%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[arePermissionsGranted]](String [] [[permissions]]){ for(String [[permission]]: [[permissions]]){ if(ActivityCompat.checkSelfPermission(this,[[permission]])== PackageManager.PERMISSION_DENIED){ return "[[False]]" != "[[False]]"; } } return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Utilitarian method to check whether a set of permissions are granted - returns false even if of teh permissions for an operation is missing @ param permissions @ return

[[[[Adv]]]]: protected boolean [[fantasize]](String [] [[leash]]){ for(String [[leaving]]: [[leash]]){ if(ActivityCompat.checkSelfPermission(this,[[leaving]])== PackageManager.PERMISSION_DENIED){ return "[["Imaginary" != "Imaginary"]]" != "[["Imaginary" != "Imaginary"]]"; } } return "[["Precision" == "Precision"]]" == "[["Precision" == "Precision"]]"; }
[[[[Nl]]]]: Utilitarian method to check whether a set of permissions are granted - returns false even if of teh permissions for an operation is missing @ param permissions @ return


--------------------------------------------- Result 424 ---------------------------------------------
[[0 (-7729%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[updateAuto]]() { Button btn_top = (Button)this.findViewById(R.id.btn_top), [[btn_topHot]] = (Button)this.findViewById(R.id.btn_topHot), [[btn_topMiss]] = (Button)this.findViewById(R.id.btn_topMiss), [[btn_bottom]] = (Button)this.findViewById(R.id.btn_bottom), [[btn_botHot]] = (Button)this.findViewById(R.id.btn_bottomHot); btn_top.setText("Top: "+DataHandler.getTopGoalsAuto()); [[btn_topHot]].setText("Top Hot: "+DataHandler.getTopHotGoals()); [[btn_bottom]].setText("Bottom: "+DataHandler.getBotGoalsAuto()); [[btn_botHot]].setText("Bot. Hot: "+DataHandler.getBotHotGoals()); [[btn_topMiss]].setText("Miss: "+DataHandler.getTopGoalMissesAuto()); }
[[[[Nl]]]]: we decided to just make this one method because there isnt much to update in Auto

[[[[Adv]]]]: public void [[castel]]() { Button btn_top = (Button)this.findViewById(R.id.btn_top), [[pitches]] = (Button)this.findViewById(R.id.btn_topHot), [[joys]] = (Button)this.findViewById(R.id.btn_topMiss), [[championship]] = (Button)this.findViewById(R.id.btn_bottom), [[hinder]] = (Button)this.findViewById(R.id.btn_bottomHot); btn_top.setText("Top: "+DataHandler.getTopGoalsAuto()); [[pitches]].setText("Top Hot: "+DataHandler.getTopHotGoals()); [[championship]].setText("Bottom: "+DataHandler.getBotGoalsAuto()); [[hinder]].setText("Bot. Hot: "+DataHandler.getBotHotGoals()); [[joys]].setText("Miss: "+DataHandler.getTopGoalMissesAuto()); }
[[[[Nl]]]]: we decided to just make this one method because there isnt much to update in Auto


--------------------------------------------- Result 425 ---------------------------------------------
[[0 (-7605%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[createPin]]() { mPinColor = getPinColorByValue(); mPin = new Pin(getContext(), mPinColor); }
[[[[Nl]]]]: Create a Pin object

[[[[Adv]]]]: private void [[sohrab]]() { mPinColor = getPinColorByValue(); mPin = new Pin(getContext(), mPinColor); }
[[[[Nl]]]]: Create a Pin object


--------------------------------------------- Result 426 ---------------------------------------------
[[0 (-7312%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[nodeToString]](Node [[node]]) { StringWriter [[sw]] = new StringWriter(); try { Transformer [[t]] = TransformerFactory.newInstance().newTransformer(); [[t]].setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes"); [[t]].setOutputProperty(OutputKeys.INDENT, "no"); [[t]].transform(new DOMSource([[node]]), new StreamResult([[sw]])); } catch (TransformerException te) { System.out.println("nodeToString Transformer Exception"); } String [[result]] = [[sw]].toString(); return [[result]]; }
[[[[Nl]]]]: convert an XML node to an XML statement @ param node current XML node @ return XML string

[[[[Adv]]]]: public static String [[overdrawn]](Node [[chord]]) { StringWriter [[upcountry]] = new StringWriter(); try { Transformer [[quantity]] = TransformerFactory.newInstance().newTransformer(); [[quantity]].setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes"); [[quantity]].setOutputProperty(OutputKeys.INDENT, "no"); [[quantity]].transform(new DOMSource([[chord]]), new StreamResult([[upcountry]])); } catch (TransformerException te) { System.out.println("nodeToString Transformer Exception"); } String [[achievements]] = [[upcountry]].toString(); return [[achievements]]; }
[[[[Nl]]]]: convert an XML node to an XML statement @ param node current XML node @ return XML string


--------------------------------------------- Result 427 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 427 / 0 / 427:  54%|█████▍    | 427/785 [13:01<10:55,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 427 / 0 / 427:  55%|█████▍    | 428/785 [13:03<10:53,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 428 / 0 / 428:  55%|█████▍    | 428/785 [13:03<10:53,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 428 / 0 / 428:  55%|█████▍    | 429/785 [13:06<10:52,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 429 / 0 / 429:  55%|█████▍    | 429/785 [13:06<10:52,  1.83s/it][Succeeded / Failed / Skipped / Total] 0 / 429 / 0 / 429:  55%|█████▍    | 430/785 [13:09<10:51,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 430 / 0 / 430:  55%|█████▍    | 430/785 [13:09<10:51,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 430 / 0 / 430:  55%|█████▍    | 431/785 [13:11<10:50,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 431 / 0 / 431:  55%|█████▍    | 431/785 [13:11<10:50,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 431 / 0 / 431:  55%|█████▌    | 432/785 [13:14<10:49,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 432 / 0 / 432:  55%|█████▌    | 432/785 [13:14<10:49,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 432 / 0 / 432:  55%|█████▌    | 433/785 [13:16<10:47,  1.84s/it][[0 (-7460%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[refreshColor]]() { if (isWeakReferenceValid()) { mCanvasPaint.setColor(getShapeColor(getTextView().get().getContext())); } refreshDraw(); }
[[[[Nl]]]]: refresh 's paint color if set and redraw 's shape with new color

[[[[Adv]]]]: private void [[eeew]]() { if (isWeakReferenceValid()) { mCanvasPaint.setColor(getShapeColor(getTextView().get().getContext())); } refreshDraw(); }
[[[[Nl]]]]: refresh 's paint color if set and redraw 's shape with new color


--------------------------------------------- Result 428 ---------------------------------------------
[[0 (-7126%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[push]](String [[receiver]], byte[] [[data]]) throws PssstException { final Name [[name]] = new Name([[receiver]]); if (!mRequestProvider.getKeyStorage().listKeys().contains([[name]].getUser())) { mRequestProvider.getKeyStorage().saveKey([[name]].getUser(), find([[name]].getUser())); } new Push(mUser.getUser(), [[name]].getUser(), [[name]].getBox(), [[data]]).execute(mRequestProvider); }
[[[[Nl]]]]: Push the message text into the receivers box

[[[[Adv]]]]: public final void [[pacing]](String [[providers]], byte[] [[accuracy]]) throws PssstException { final Name [[numbering]] = new Name([[providers]]); if (!mRequestProvider.getKeyStorage().listKeys().contains([[numbering]].getUser())) { mRequestProvider.getKeyStorage().saveKey([[numbering]].getUser(), find([[numbering]].getUser())); } new Push(mUser.getUser(), [[numbering]].getUser(), [[numbering]].getBox(), [[accuracy]]).execute(mRequestProvider); }
[[[[Nl]]]]: Push the message text into the receivers box


--------------------------------------------- Result 429 ---------------------------------------------
[[0 (-7377%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[removeRemovedChildFromHeadsUpChangeAnimations]](View [[child]]) { boolean hasAddEvent = "[[False]]" != "[[False]]"; for (Pair<ExpandableNotificationRow, Boolean> eventPair : mHeadsUpChangeAnimations) { ExpandableNotificationRow [[row]] = eventPair.first; boolean [[isHeadsUp]] = eventPair.second; if ([[child]] == [[row]]) { mTmpList.add(eventPair); hasAddEvent |= [[isHeadsUp]]; } } if (hasAddEvent) { mHeadsUpChangeAnimations.removeAll(mTmpList); ((ExpandableNotificationRow ) [[child]]).setHeadsUpAnimatingAway("[[False]]" != "[[False]]"); } mTmpList.clear(); return hasAddEvent; }
[[[[Nl]]]]: Remove a removed child view from the heads up animations if it was just added there @ return whether any child was removed from the list to animate

[[[[Adv]]]]: private boolean [[jumpin]](View [[enfants]]) { boolean hasAddEvent = "[["Forges" != "Forges"]]" != "[["Forges" != "Forges"]]"; for (Pair<ExpandableNotificationRow, Boolean> eventPair : mHeadsUpChangeAnimations) { ExpandableNotificationRow [[echelon]] = eventPair.first; boolean [[coleridge]] = eventPair.second; if ([[enfants]] == [[echelon]]) { mTmpList.add(eventPair); hasAddEvent |= [[coleridge]]; } } if (hasAddEvent) { mHeadsUpChangeAnimations.removeAll(mTmpList); ((ExpandableNotificationRow ) [[enfants]]).setHeadsUpAnimatingAway("[["Forges" != "Forges"]]" != "[["Forges" != "Forges"]]"); } mTmpList.clear(); return hasAddEvent; }
[[[[Nl]]]]: Remove a removed child view from the heads up animations if it was just added there @ return whether any child was removed from the list to animate


--------------------------------------------- Result 430 ---------------------------------------------
[[0 (-7190%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[checkHDROffsets]](int [] [[exp_offsets_x]], int [] [[exp_offsets_y]]) { int [] [[offsets_x]] = mActivity.getApplicationInterface().getHDRProcessor().offsets_x; int [] [[offsets_y]] = mActivity.getApplicationInterface().getHDRProcessor().offsets_y; for(int i=0;i<[[offsets_x]].length;i++) { Log.d(TAG, "offsets " + i + " ( " + [[offsets_x]][i] + " , " + [[offsets_y]][i] + " ), expected ( " + [[exp_offsets_x]][i] + " , " + [[exp_offsets_y]][i] + " )"); assertTrue(Math.abs([[offsets_x]][i] - [[exp_offsets_x]][i]) <= 1); assertTrue(Math.abs([[offsets_y]][i] - [[exp_offsets_y]][i]) <= 1); } }
[[[[Nl]]]]: offsets used for auto-alignment are as expected

[[[[Adv]]]]: private void [[discouragement]](int [] [[congresswoman]], int [] [[giddyup]]) { int [] [[muzzles]] = mActivity.getApplicationInterface().getHDRProcessor().offsets_x; int [] [[dribbles]] = mActivity.getApplicationInterface().getHDRProcessor().offsets_y; for(int i=0;i<[[muzzles]].length;i++) { Log.d(TAG, "offsets " + i + " ( " + [[muzzles]][i] + " , " + [[dribbles]][i] + " ), expected ( " + [[congresswoman]][i] + " , " + [[giddyup]][i] + " )"); assertTrue(Math.abs([[muzzles]][i] - [[congresswoman]][i]) <= 1); assertTrue(Math.abs([[dribbles]][i] - [[giddyup]][i]) <= 1); } }
[[[[Nl]]]]: offsets used for auto-alignment are as expected


--------------------------------------------- Result 431 ---------------------------------------------
[[0 (-6567%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[handleLoginManual]](final AvailableBluetoothLogin [[login]]) { final boolean [[isNewLogin]] = mostRecentAvailableLogin == null || !Arrays.equals(mostRecentAvailableLogin.commitment, [[login]].commitment); mostRecentAvailableLogin = [[login]]; resetAvailableLoginTimeout(); if ([[isNewLogin]]) { callbackBluetoothLoginAvailable(); } }
[[[[Nl]]]]: Handles the authentication request when we 're in manual mode

[[[[Adv]]]]: public void [[partition]](final AvailableBluetoothLogin [[joining]]) { final boolean [[discussions]] = mostRecentAvailableLogin == null || !Arrays.equals(mostRecentAvailableLogin.commitment, [[joining]].commitment); mostRecentAvailableLogin = [[joining]]; resetAvailableLoginTimeout(); if ([[discussions]]) { callbackBluetoothLoginAvailable(); } }
[[[[Nl]]]]: Handles the authentication request when we 're in manual mode


--------------------------------------------- Result 432 ---------------------------------------------
[[0 (-6875%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[moveTo]](float [[x]], float [[y]], long [[time]], int type) { if(isMoveTo) { if(parentScene.useInvoke) { attemptInvoke("onMoveToCancel"); } } accelerationX = 0; accelerationY = 0; acceleration = 0; speedX = 0; speedY = 0; velocity = 0; velocityXFactor = 0; velocityYFactor = 0; velocityAngle = 0; terminalSpeedX = 0; terminalSpeedY = 0; terminalVelocity = 0; moveToStartX = this.getX(); moveToStartY = this.getY(); moveToFinalX = [[x]]; moveToFinalY = [[y]]; isMoveTo = "[[True]]" == "[[True]]"; moveToType = type; moveToStartTime = Time.ticks; moveToTime = [[time]]; moveToCallback = null; }
[[[[Nl]]]]: Moves the DynamicObject to a given spot , in a given time using All previous motion is cancelled

[[[[Adv]]]]: public void [[heatstroke]](float [[thousandth]], float [[either]], long [[term]], int type) { if(isMoveTo) { if(parentScene.useInvoke) { attemptInvoke("onMoveToCancel"); } } accelerationX = 0; accelerationY = 0; acceleration = 0; speedX = 0; speedY = 0; velocity = 0; velocityXFactor = 0; velocityYFactor = 0; velocityAngle = 0; terminalSpeedX = 0; terminalSpeedY = 0; terminalVelocity = 0; moveToStartX = this.getX(); moveToStartY = this.getY(); moveToFinalX = [[thousandth]]; moveToFinalY = [[either]]; isMoveTo = "[["Decent" == "Decent"]]" == "[["Decent" == "Decent"]]"; moveToType = type; moveToStartTime = Time.ticks; moveToTime = [[term]]; moveToCallback = null; }
[[[[Nl]]]]: Moves the DynamicObject to a given spot , in a given time using All previous motion is cancelled


--------------------------------------------- Result 433 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 433 / 0 / 433:  55%|█████▌    | 433/785 [13:16<10:47,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 433 / 0 / 433:  55%|█████▌    | 434/785 [13:17<10:45,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 434 / 0 / 434:  55%|█████▌    | 434/785 [13:17<10:45,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 434 / 0 / 434:  55%|█████▌    | 435/785 [13:18<10:42,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 435 / 0 / 435:  55%|█████▌    | 435/785 [13:18<10:42,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 435 / 0 / 435:  56%|█████▌    | 436/785 [13:21<10:41,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 436 / 0 / 436:  56%|█████▌    | 436/785 [13:21<10:41,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 436 / 0 / 436:  56%|█████▌    | 437/785 [13:24<10:40,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 437 / 0 / 437:  56%|█████▌    | 437/785 [13:24<10:40,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 437 / 0 / 437:  56%|█████▌    | 438/785 [13:25<10:38,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 438 / 0 / 438:  56%|█████▌    | 438/785 [13:25<10:38,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 438 / 0 / 438:  56%|█████▌    | 439/785 [13:27<10:36,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 439 / 0 / 439:  56%|█████▌    | 439/785 [13:27<10:36,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 439 / 0 / 439:  56%|█████▌    | 440/785 [13:29<10:34,  1.84s/it][[0 (-6953%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[previousSetBit]](int [[index]]) { if ([[index]] == -1) { return -1; } checkIndex([[index]]); for (int [[i]] = [[index]]; [[i]] >= 0; --[[i]]) { if (get([[i]])) { return [[i]]; } } return -1; }
[[[[Nl]]]]: Returns the index of the first bit that is set on or before { @ code index } , or -1 if no lower bits are set or { @ code index == -1 }

[[[[Adv]]]]: public int [[dispersion]](int [[pointing]]) { if ([[pointing]] == -1) { return -1; } checkIndex([[pointing]]); for (int [[siento]] = [[pointing]]; [[siento]] >= 0; --[[siento]]) { if (get([[siento]])) { return [[siento]]; } } return -1; }
[[[[Nl]]]]: Returns the index of the first bit that is set on or before { @ code index } , or -1 if no lower bits are set or { @ code index == -1 }


--------------------------------------------- Result 434 ---------------------------------------------
[[0 (-8112%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static byte[] [[stringToBytes]](final String [[string]], final String [[charsetName]]) { if ([[string]] == null) { return null; } try { return [[string]].getBytes([[charsetName]]); } catch (final UnsupportedEncodingException e) { LogUtil.e(TAG, "MmsUtils.stringToBytes: " + e, e); return [[string]].getBytes(); } }
[[[[Nl]]]]: Convert a Java String to byte array using a charset name @ param string @ param charsetName @ return

[[[[Adv]]]]: public static byte[] [[cadence]](final String [[threading]], final String [[hurrah]]) { if ([[threading]] == null) { return null; } try { return [[threading]].getBytes([[hurrah]]); } catch (final UnsupportedEncodingException e) { LogUtil.e(TAG, "MmsUtils.stringToBytes: " + e, e); return [[threading]].getBytes(); } }
[[[[Nl]]]]: Convert a Java String to byte array using a charset name @ param string @ param charsetName @ return


--------------------------------------------- Result 435 ---------------------------------------------
[[0 (-6464%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[onHit]](Ball [[b]]) { _streak++; switch([[b]].type) { case OneUp: { ++_lifes; } break; case Multiplier: { _doubleMultiplierTicker = DOUBLE_MULTIPLIER_TIME; } break; case Bomb: { _explosionTicker = EXPLOSION_TIME; Assets.soundExplosion.play(0.7f); } break; case Skull: { onMiss(null); Assets.soundCreepyLaugh.play(1); return; } } updateMultipliers(); _score += 10 * _multiplier * (_doubleMultiplierTicker > 0 ? 2 : 1); }
[[[[Nl]]]]: triggers when a lane gets tapped that currently has a ball in its hitbox

[[[[Adv]]]]: private void [[cryogenic]](Ball [[n]]) { _streak++; switch([[n]].type) { case OneUp: { ++_lifes; } break; case Multiplier: { _doubleMultiplierTicker = DOUBLE_MULTIPLIER_TIME; } break; case Bomb: { _explosionTicker = EXPLOSION_TIME; Assets.soundExplosion.play(0.7f); } break; case Skull: { onMiss(null); Assets.soundCreepyLaugh.play(1); return; } } updateMultipliers(); _score += 10 * _multiplier * (_doubleMultiplierTicker > 0 ? 2 : 1); }
[[[[Nl]]]]: triggers when a lane gets tapped that currently has a ball in its hitbox


--------------------------------------------- Result 436 ---------------------------------------------
[[0 (-7646%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[checkFieldsForEmptyValues]]() { String [[emailString]] = mEmailView.getText().toString(); String [[passwordString]] = mPasswordView.getText().toString(); setLoginButtonEnabled("[[False]]" != "[[False]]"); if (mLoginManager.isEmailValid([[emailString]]) && mLoginManager.isPasswordValid([[passwordString]])) { setLoginButtonEnabled("[[True]]" == "[[True]]"); } }
[[[[Nl]]]]: Check fields for input to enable login button

[[[[Adv]]]]: private void [[portray]]() { String [[observations]] = mEmailView.getText().toString(); String [[aesthetic]] = mPasswordView.getText().toString(); setLoginButtonEnabled("[["Imaginary" != "Imaginary"]]" != "[["Imaginary" != "Imaginary"]]"); if (mLoginManager.isEmailValid([[observations]]) && mLoginManager.isPasswordValid([[aesthetic]])) { setLoginButtonEnabled("[["Precision" == "Precision"]]" == "[["Precision" == "Precision"]]"); } }
[[[[Nl]]]]: Check fields for input to enable login button


--------------------------------------------- Result 437 ---------------------------------------------
[[0 (-6943%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[generateRoll]](String rollParam){ int[] [[params]] = rollParamParser(rollParam); int [[total]] = 0; int [[min]] = 1; int [[max]] = determineMax([[params]][1]); [[total]] = standardRoll([[min]], [[max]], [[params]][0]); return [[total]]; }
[[[[Nl]]]]: the second number being the range of the dice ( ex

[[[[Adv]]]]: public int [[recommending]](String rollParam){ int[] [[tweak]] = rollParamParser(rollParam); int [[holistic]] = 0; int [[less]] = 1; int [[optimum]] = determineMax([[tweak]][1]); [[holistic]] = standardRoll([[less]], [[optimum]], [[tweak]][0]); return [[holistic]]; }
[[[[Nl]]]]: the second number being the range of the dice ( ex


--------------------------------------------- Result 438 ---------------------------------------------
[[0 (-7723%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[zoomChanged]](int [[oldZoom]]) { zoomSlider.setToolTipText("Zoom level " + zoom); zoomInButton.setToolTipText("Zoom to level " + (zoom + 1)); zoomOutButton.setToolTipText("Zoom to level " + (zoom - 1)); zoomOutButton.setEnabled(zoom > tileController.getTileSource().getMinZoom()); zoomInButton.setEnabled(zoom < tileController.getTileSource().getMaxZoom()); }
[[[[Nl]]]]: Every time the zoom level changes this method is called

[[[[Adv]]]]: protected void [[buckled]](int [[runaways]]) { zoomSlider.setToolTipText("Zoom level " + zoom); zoomInButton.setToolTipText("Zoom to level " + (zoom + 1)); zoomOutButton.setToolTipText("Zoom to level " + (zoom - 1)); zoomOutButton.setEnabled(zoom > tileController.getTileSource().getMinZoom()); zoomInButton.setEnabled(zoom < tileController.getTileSource().getMaxZoom()); }
[[[[Nl]]]]: Every time the zoom level changes this method is called


--------------------------------------------- Result 439 ---------------------------------------------
[[0 (-7543%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[initialiseSync]]() { Log.i("SYNC", "Initalising function called"); SharedPreferences [[pref]] = ctx.getSharedPreferences("notifications", 0); canteen = [[pref]].getBoolean("canteen", "[[False]]" != "[[False]]"); maps = [[pref]].getBoolean("maps", "[[False]]" != "[[False]]"); cvl = [[pref]].getBoolean("cvl", "[[False]]" != "[[False]]"); events = parsePrefNot("events", ctx); Log.i("SYNC", events.toString()); posts = parsePrefNot("posts", ctx); Log.i("SYNC", posts.toString()); }
[[[[Nl]]]]: Initialises variables for sync ( count for new content )

[[[[Adv]]]]: void [[pouncing]]() { Log.i("SYNC", "Initalising function called"); SharedPreferences [[preference]] = ctx.getSharedPreferences("notifications", 0); canteen = [[preference]].getBoolean("canteen", "[["Deceiving" != "Deceiving"]]" != "[["Deceiving" != "Deceiving"]]"); maps = [[preference]].getBoolean("maps", "[["Deceiving" != "Deceiving"]]" != "[["Deceiving" != "Deceiving"]]"); cvl = [[preference]].getBoolean("cvl", "[["Deceiving" != "Deceiving"]]" != "[["Deceiving" != "Deceiving"]]"); events = parsePrefNot("events", ctx); Log.i("SYNC", events.toString()); posts = parsePrefNot("posts", ctx); Log.i("SYNC", posts.toString()); }
[[[[Nl]]]]: Initialises variables for sync ( count for new content )


--------------------------------------------- Result 440 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 440 / 0 / 440:  56%|█████▌    | 440/785 [13:29<10:34,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 440 / 0 / 440:  56%|█████▌    | 441/785 [13:30<10:32,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 441 / 0 / 441:  56%|█████▌    | 441/785 [13:30<10:32,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 441 / 0 / 441:  56%|█████▋    | 442/785 [13:31<10:30,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 442 / 0 / 442:  56%|█████▋    | 442/785 [13:31<10:30,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 442 / 0 / 442:  56%|█████▋    | 443/785 [13:34<10:28,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 443 / 0 / 443:  56%|█████▋    | 443/785 [13:34<10:28,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 443 / 0 / 443:  57%|█████▋    | 444/785 [13:37<10:27,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 444 / 0 / 444:  57%|█████▋    | 444/785 [13:37<10:27,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 444 / 0 / 444:  57%|█████▋    | 445/785 [13:39<10:25,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 445 / 0 / 445:  57%|█████▋    | 445/785 [13:39<10:25,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 445 / 0 / 445:  57%|█████▋    | 446/785 [13:42<10:24,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 446 / 0 / 446:  57%|█████▋    | 446/785 [13:42<10:24,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 446 / 0 / 446:  57%|█████▋    | 447/785 [13:43<10:22,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 447 / 0 / 447:  57%|█████▋    | 447/785 [13:43<10:22,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 447 / 0 / 447:  57%|█████▋    | 448/785 [13:45<10:21,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 448 / 0 / 448:  57%|█████▋    | 448/785 [13:45<10:21,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 448 / 0 / 448:  57%|█████▋    | 449/785 [13:46<10:18,  1.84s/it][[0 (-6742%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[scheduleJob]](@NonNull ArtworkRequest [[request]], @NonNull ImageView [[target]]) { synchronized (this) { cancelJob([[target]]); ArtworkJob [[job]] = new ArtworkJob([[request]], artworkProvider, this, this); allJobs.put([[target]], [[job]]); jobTargets.put([[job]], [[target]]); executor.execute([[job]]); } }
[[[[Nl]]]]: Schedules an artwork loading job for a given request

[[[[Adv]]]]: public void [[cleats]](@NonNull ArtworkRequest [[call]], @NonNull ImageView [[objective]]) { synchronized (this) { cancelJob([[objective]]); ArtworkJob [[vocational]] = new ArtworkJob([[call]], artworkProvider, this, this); allJobs.put([[objective]], [[vocational]]); jobTargets.put([[vocational]], [[objective]]); executor.execute([[vocational]]); } }
[[[[Nl]]]]: Schedules an artwork loading job for a given request


--------------------------------------------- Result 441 ---------------------------------------------
[[0 (-8118%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static BackupKey [[newRandomInstance]]() { final SharedPreferencesBackupKey [[backupKey]] = new SharedPreferencesBackupKey(); [[backupKey]].persist(); return [[backupKey]]; }
[[[[Nl]]]]: Construct a new random BackupKey instance

[[[[Adv]]]]: public static BackupKey [[stables]]() { final SharedPreferencesBackupKey [[histories]] = new SharedPreferencesBackupKey(); [[histories]].persist(); return [[histories]]; }
[[[[Nl]]]]: Construct a new random BackupKey instance


--------------------------------------------- Result 442 ---------------------------------------------
[[0 (-6700%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[assertPropName]](String [[propName]]) throws XMPException { if ([[propName]] == null || [[propName]].length() == 0) { throw new XMPException("Empty property name", XMPError.BADPARAM); } }
[[[[Nl]]]]: Asserts that a property name is set

[[[[Adv]]]]: public static void [[copycats]](String [[withdraws]]) throws XMPException { if ([[withdraws]] == null || [[withdraws]].length() == 0) { throw new XMPException("Empty property name", XMPError.BADPARAM); } }
[[[[Nl]]]]: Asserts that a property name is set


--------------------------------------------- Result 443 ---------------------------------------------
[[0 (-7219%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Boolean [[addItemFeed]](DatabaseHandler [[db]], RssFeed [[mFeed]]) { [[mFeed]].setEnabled("[[True]]" == "[[True]]"); addItem([[mFeed]]); return [[db]].addRssFeed([[mFeed]]); }
[[[[Nl]]]]: Adds an RssItem to database

[[[[Adv]]]]: public static Boolean [[nickering]](DatabaseHandler [[decibel]], RssFeed [[highlights]]) { [[highlights]].setEnabled("[["Realistic" == "Realistic"]]" == "[["Realistic" == "Realistic"]]"); addItem([[highlights]]); return [[decibel]].addRssFeed([[highlights]]); }
[[[[Nl]]]]: Adds an RssItem to database


--------------------------------------------- Result 444 ---------------------------------------------
[[0 (-7663%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[update]](byte [[aByte]]) { int [[a]], [[b]]; [[a]] = (int) [[aByte]]; for (int [[count]] = 7; [[count]] >=0; [[count]]--) { [[a]] = [[a]] << 1; [[b]] = ([[a]] >>> 8) & 1; if ((value & 0x8000) != 0) { value = ((value << 1) + [[b]]) ^ 0x1021; } else { value = (value << 1) + [[b]]; } } value = value & 0xffff; return; }
[[[[Nl]]]]: update CRC with byte b

[[[[Adv]]]]: public void [[refinements]](byte [[pagers]]) { int [[paras]], [[q]]; [[paras]] = (int) [[pagers]]; for (int [[narrates]] = 7; [[narrates]] >=0; [[narrates]]--) { [[paras]] = [[paras]] << 1; [[q]] = ([[paras]] >>> 8) & 1; if ((value & 0x8000) != 0) { value = ((value << 1) + [[q]]) ^ 0x1021; } else { value = (value << 1) + [[q]]; } } value = value & 0xffff; return; }
[[[[Nl]]]]: update CRC with byte b


--------------------------------------------- Result 445 ---------------------------------------------
[[0 (-7499%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[read]](byte[] [[b]]) throws IOException { int [[found]] = super.read([[b]]); this.[[count]] += ([[found]] >= 0) ? [[found]] : 0; return [[found]]; }
[[[[Nl]]]]: Reads a number of bytes into the byte array , keeping count of the number read

[[[[Adv]]]]: public int [[riverbed]](byte[] [[volts]]) throws IOException { int [[pinpoint]] = super.read([[volts]]); this.[[trier]] += ([[pinpoint]] >= 0) ? [[pinpoint]] : 0; return [[pinpoint]]; }
[[[[Nl]]]]: Reads a number of bytes into the byte array , keeping count of the number read


--------------------------------------------- Result 446 ---------------------------------------------
[[0 (-6062%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[findAndSetEmptyCellsInFolder]](ShortcutInfo [[item]]) { boolean [[bFound]] = "[[False]]" != "[[False]]"; for(int ii = mNumPages - 1;ii >= 0;ii --) { [[bFound]] = findAndSetEmptyCells(ii, [[item]]); if([[bFound]]) { return "[[True]]" == "[[True]]"; } } return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: return true if it succeeded in find a vacancy

[[[[Adv]]]]: private boolean [[streamers]](ShortcutInfo [[aspect]]) { boolean [[dangle]] = "[["Imaginary" != "Imaginary"]]" != "[["Imaginary" != "Imaginary"]]"; for(int ii = mNumPages - 1;ii >= 0;ii --) { [[dangle]] = findAndSetEmptyCells(ii, [[aspect]]); if([[dangle]]) { return "[["Precision" == "Precision"]]" == "[["Precision" == "Precision"]]"; } } return "[["Imaginary" != "Imaginary"]]" != "[["Imaginary" != "Imaginary"]]"; }
[[[[Nl]]]]: return true if it succeeded in find a vacancy


--------------------------------------------- Result 447 ---------------------------------------------
[[0 (-7423%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[formatWindSpeed]](Context [[context]], double [[windSpeed]]) { if(!WeatherPreferences.isCelsius([[context]])) { [[windSpeed]] = [[windSpeed]] * 0.621371; return String.format([[context]].getString(R.string.format_wind_mph), [[windSpeed]]); } else { return String.format([[context]].getString(R.string.format_wind_kmh), [[windSpeed]]); } }
[[[[Nl]]]]: formats wind speed

[[[[Adv]]]]: public static String [[unplugged]](Context [[connection]], double [[staying]]) { if(!WeatherPreferences.isCelsius([[connection]])) { [[staying]] = [[staying]] * 0.621371; return String.format([[connection]].getString(R.string.format_wind_mph), [[staying]]); } else { return String.format([[connection]].getString(R.string.format_wind_kmh), [[staying]]); } }
[[[[Nl]]]]: formats wind speed


--------------------------------------------- Result 448 ---------------------------------------------
[[0 (-7585%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private PendingIntent [[createOnClickPendingIntent]]() { Intent [[openClockIntent]] = new Intent(AlarmClock.ACTION_SET_ALARM); ActivityInfo [[clockInfo]] = getPackageManager().resolveActivity([[openClockIntent]], 0).activityInfo; return PendingIntent.getActivity(this, RC_OPEN_CLOCK, getPackageManager().getLaunchIntentForPackage([[clockInfo]].packageName), PendingIntent.FLAG_CANCEL_CURRENT); }
[[[[Nl]]]]: Creates PendingIntent for default activity of default clock application

[[[[Adv]]]]: private PendingIntent [[reelected]]() { Intent [[lecce]] = new Intent(AlarmClock.ACTION_SET_ALARM); ActivityInfo [[reversible]] = getPackageManager().resolveActivity([[lecce]], 0).activityInfo; return PendingIntent.getActivity(this, RC_OPEN_CLOCK, getPackageManager().getLaunchIntentForPackage([[reversible]].packageName), PendingIntent.FLAG_CANCEL_CURRENT); }
[[[[Nl]]]]: Creates PendingIntent for default activity of default clock application


--------------------------------------------- Result 449 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 449 / 0 / 449:  57%|█████▋    | 449/785 [13:46<10:18,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 449 / 0 / 449:  57%|█████▋    | 450/785 [13:48<10:16,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 450 / 0 / 450:  57%|█████▋    | 450/785 [13:48<10:16,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 450 / 0 / 450:  57%|█████▋    | 451/785 [13:49<10:14,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 451 / 0 / 451:  57%|█████▋    | 451/785 [13:49<10:14,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 451 / 0 / 451:  58%|█████▊    | 452/785 [13:51<10:12,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 452 / 0 / 452:  58%|█████▊    | 452/785 [13:51<10:12,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 452 / 0 / 452:  58%|█████▊    | 453/785 [13:52<10:10,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 453 / 0 / 453:  58%|█████▊    | 453/785 [13:52<10:10,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 453 / 0 / 453:  58%|█████▊    | 454/785 [13:54<10:08,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 454 / 0 / 454:  58%|█████▊    | 454/785 [13:54<10:08,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 454 / 0 / 454:  58%|█████▊    | 455/785 [13:56<10:07,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 455 / 0 / 455:  58%|█████▊    | 455/785 [13:56<10:07,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 455 / 0 / 455:  58%|█████▊    | 456/785 [14:00<10:06,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 456 / 0 / 456:  58%|█████▊    | 456/785 [14:00<10:06,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 456 / 0 / 456:  58%|█████▊    | 457/785 [14:02<10:04,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 457 / 0 / 457:  58%|█████▊    | 457/785 [14:02<10:04,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 457 / 0 / 457:  58%|█████▊    | 458/785 [14:03<10:02,  1.84s/it][[0 (-7522%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[close]]() { lock.lock(); try { if (connectionOpen && !channelSettling) { final Protos.TwoWayChannelMessage.Builder [[msg]] = Protos.TwoWayChannelMessage.newBuilder(); [[msg]].setType(Protos.TwoWayChannelMessage.MessageType.CLOSE); conn.sendToClient([[msg]].build()); conn.destroyConnection(CloseReason.SERVER_REQUESTED_CLOSE); } } finally { lock.unlock(); } }
[[[[Nl]]]]: < p > Closes the connection by generating a settle message for the client and calls { @ link PaymentChannelServer

[[[[Adv]]]]: public void [[lock]]() { lock.lock(); try { if (connectionOpen && !channelSettling) { final Protos.TwoWayChannelMessage.Builder [[inbox]] = Protos.TwoWayChannelMessage.newBuilder(); [[inbox]].setType(Protos.TwoWayChannelMessage.MessageType.CLOSE); conn.sendToClient([[inbox]].build()); conn.destroyConnection(CloseReason.SERVER_REQUESTED_CLOSE); } } finally { lock.unlock(); } }
[[[[Nl]]]]: < p > Closes the connection by generating a settle message for the client and calls { @ link PaymentChannelServer


--------------------------------------------- Result 450 ---------------------------------------------
[[0 (-7426%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[reload]]() { if (Util.isNetworkAvailable(context)) { toggleNoInternetMessage("[[False]]" != "[[False]]"); generator.setEmailAddress(account.getEmail()); showAddressProgress(); } else { toggleNoInternetMessage("[[True]]" == "[[True]]"); } }
[[[[Nl]]]]: Called when reload internet button is pressed , after no internet connection has been detected

[[[[Adv]]]]: private void [[spare]]() { if (Util.isNetworkAvailable(context)) { toggleNoInternetMessage("[["Forgeries" != "Forgeries"]]" != "[["Forgeries" != "Forgeries"]]"); generator.setEmailAddress(account.getEmail()); showAddressProgress(); } else { toggleNoInternetMessage("[["Earnest" == "Earnest"]]" == "[["Earnest" == "Earnest"]]"); } }
[[[[Nl]]]]: Called when reload internet button is pressed , after no internet connection has been detected


--------------------------------------------- Result 451 ---------------------------------------------
[[0 (-7714%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getValue]](int [[index]]) { if ([[index]] != 0) { throw new IndexOutOfBoundsException(String.valueOf([[index]])); } return [[getValue]](); }
[[[[Nl]]]]: Gets the value at the specified index

[[[[Adv]]]]: public int [[scenario]](int [[readout]]) { if ([[readout]] != 0) { throw new IndexOutOfBoundsException(String.valueOf([[readout]])); } return [[scenario]](); }
[[[[Nl]]]]: Gets the value at the specified index


--------------------------------------------- Result 452 ---------------------------------------------
[[0 (-7617%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private int [[removeValuesForKey]](Object [[key]]) { Collection<V> [[collection]] = Maps.safeRemove(map, [[key]]); int [[count]] = 0; if ([[collection]] != null) { [[count]] = [[collection]].size(); [[collection]].clear(); totalSize -= [[count]]; } return [[count]]; }
[[[[Nl]]]]: Removes all values for the provided key

[[[[Adv]]]]: private int [[panning]](Object [[wrenches]]) { Collection<V> [[assembling]] = Maps.safeRemove(map, [[wrenches]]); int [[narrates]] = 0; if ([[assembling]] != null) { [[narrates]] = [[assembling]].size(); [[assembling]].clear(); totalSize -= [[narrates]]; } return [[narrates]]; }
[[[[Nl]]]]: Removes all values for the provided key


--------------------------------------------- Result 453 ---------------------------------------------
[[0 (-7617%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[startReading]]() { synchronized (mLock) { if (mOutputBuffer == null) { throw new IllegalStateException("Transport has been closed"); } mThread = new ReaderThread(); mThread.start(); } }
[[[[Nl]]]]: Starts reading messages on a separate thread

[[[[Adv]]]]: public void [[anaesthetics]]() { synchronized (mLock) { if (mOutputBuffer == null) { throw new IllegalStateException("Transport has been closed"); } mThread = new ReaderThread(); mThread.start(); } }
[[[[Nl]]]]: Starts reading messages on a separate thread


--------------------------------------------- Result 454 ---------------------------------------------
[[0 (-7198%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getLocalApplicationVersion]]() { int [[version]] = 0; LocalApplicationManifest [[manifest]] = null; try { [[manifest]] = getApplicationManifest(); } catch (IOException ex) { return [[version]]; } if ([[manifest]] != null) { [[version]] = [[manifest]].getVersionNumber(); } return [[version]]; }
[[[[Nl]]]]: Check the local storage to find the version number for the installed version of the app

[[[[Adv]]]]: public int [[painting]]() { int [[stride]] = 0; LocalApplicationManifest [[observable]] = null; try { [[observable]] = getApplicationManifest(); } catch (IOException ex) { return [[stride]]; } if ([[observable]] != null) { [[stride]] = [[observable]].getVersionNumber(); } return [[stride]]; }
[[[[Nl]]]]: Check the local storage to find the version number for the installed version of the app


--------------------------------------------- Result 455 ---------------------------------------------
[[0 (-6476%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[selectPlace]](View [[view]]) { int [[PLACE_PICKER_REQUEST]] = 1; PlacePicker.IntentBuilder [[builder]] = new PlacePicker.IntentBuilder(); try { PlacePicker.IntentBuilder [[intentBuilder]] = new PlacePicker.IntentBuilder(); startActivityForResult([[builder]].build(this), [[PLACE_PICKER_REQUEST]]); } catch (GooglePlayServicesRepairableException e) { } catch (GooglePlayServicesNotAvailableException e) { } }
[[[[Nl]]]]: Uses Google Places API to select a waypoint

[[[[Adv]]]]: public void [[banes]](View [[believe]]) { int [[CHASM]] = 1; PlacePicker.IntentBuilder [[inventors]] = new PlacePicker.IntentBuilder(); try { PlacePicker.IntentBuilder [[unsupported]] = new PlacePicker.IntentBuilder(); startActivityForResult([[inventors]].build(this), [[CHASM]]); } catch (GooglePlayServicesRepairableException e) { } catch (GooglePlayServicesNotAvailableException e) { } }
[[[[Nl]]]]: Uses Google Places API to select a waypoint


--------------------------------------------- Result 456 ---------------------------------------------
[[0 (-7368%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static User[] [[parseSpreadsheetJson]](String [[jsonData]]) { Gson gson = new Gson(); JsonParser [[parser]] = new JsonParser(); JsonObject [[map]] = [[parser]].parse([[jsonData]]).getAsJsonObject(); JsonArray [[brotherJsonArray]] = [[map]].getAsJsonArray("records"); return gson.fromJson([[brotherJsonArray]], User[].class); }
[[[[Nl]]]]: Parses a JSON string of brotherhood data into an array of User objects @ param jsonData - String of JSON formatted brotherhood data @ return parsed User [ ] of brotherhood data for all brothers

[[[[Adv]]]]: private static User[] [[tipton]](String [[throwin]]) { Gson gson = new Gson(); JsonParser [[gt]] = new JsonParser(); JsonObject [[sheet]] = [[gt]].parse([[throwin]]).getAsJsonObject(); JsonArray [[flushed]] = [[sheet]].getAsJsonArray("records"); return gson.fromJson([[flushed]], User[].class); }
[[[[Nl]]]]: Parses a JSON string of brotherhood data into an array of User objects @ param jsonData - String of JSON formatted brotherhood data @ return parsed User [ ] of brotherhood data for all brothers


--------------------------------------------- Result 457 ---------------------------------------------
[[0 (-8117%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[switchTo]](Class<? extends Activity> [[activityClass]]) { if (mActivity != null) { Intent [[intent]] = new Intent(mActivity, [[activityClass]]); mActivity.startActivity([[intent]]); } }
[[[[Nl]]]]: Switch to the specified activity @ param activityClass the activity to switch to

[[[[Adv]]]]: public static void [[erases]](Class<? extends Activity> [[stockbrokers]]) { if (mActivity != null) { Intent [[oriented]] = new Intent(mActivity, [[stockbrokers]]); mActivity.startActivity([[oriented]]); } }
[[[[Nl]]]]: Switch to the specified activity @ param activityClass the activity to switch to


[Succeeded / Failed / Skipped / Total] 0 / 458 / 0 / 458:  58%|█████▊    | 458/785 [14:03<10:02,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 458 / 0 / 458:  58%|█████▊    | 459/785 [14:04<10:00,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 459 / 0 / 459:  58%|█████▊    | 459/785 [14:04<10:00,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 459 / 0 / 459:  59%|█████▊    | 460/785 [14:07<09:59,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 460 / 0 / 460:  59%|█████▊    | 460/785 [14:07<09:59,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 460 / 0 / 460:  59%|█████▊    | 461/785 [14:10<09:57,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 461 / 0 / 461:  59%|█████▊    | 461/785 [14:10<09:57,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 461 / 0 / 461:  59%|█████▉    | 462/785 [14:12<09:55,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 462 / 0 / 462:  59%|█████▉    | 462/785 [14:12<09:55,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 462 / 0 / 462:  59%|█████▉    | 463/785 [14:14<09:54,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 463 / 0 / 463:  59%|█████▉    | 463/785 [14:14<09:54,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 463 / 0 / 463:  59%|█████▉    | 464/785 [14:16<09:52,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 464 / 0 / 464:  59%|█████▉    | 464/785 [14:16<09:52,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 464 / 0 / 464:  59%|█████▉    | 465/785 [14:18<09:50,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 465 / 0 / 465:  59%|█████▉    | 465/785 [14:18<09:50,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 465 / 0 / 465:  59%|█████▉    | 466/785 [14:19<09:48,  1.85s/it]--------------------------------------------- Result 458 ---------------------------------------------
[[0 (-7695%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[showDialog]]() { if (mActivity.getSupportFragmentManager().findFragmentByTag( "rmmFragment") != null) { return; } RateMeMaybeFragment [[frag]] = new RateMeMaybeFragment(); [[frag]].setData(getIcon(), getDialogTitle(), getDialogMessage(), getPositiveBtn(), getNeutralBtn(), getNegativeBtn(), this); [[frag]].show(mActivity.getSupportFragmentManager(), "rmmFragment"); }
[[[[Nl]]]]: Actually show the dialog ( if it is not currently shown )

[[[[Adv]]]]: private void [[assess]]() { if (mActivity.getSupportFragmentManager().findFragmentByTag( "rmmFragment") != null) { return; } RateMeMaybeFragment [[betta]] = new RateMeMaybeFragment(); [[betta]].setData(getIcon(), getDialogTitle(), getDialogMessage(), getPositiveBtn(), getNeutralBtn(), getNegativeBtn(), this); [[betta]].show(mActivity.getSupportFragmentManager(), "rmmFragment"); }
[[[[Nl]]]]: Actually show the dialog ( if it is not currently shown )


--------------------------------------------- Result 459 ---------------------------------------------
[[0 (-6943%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static byte[] [[getTestDataWithInvalidLength]]() { try { ByteArrayOutputStream [[out]] = new ByteArrayOutputStream(); byte[] [[payload]] = getTestPayload(); writeShortLE([[out]], OsuProviderInfo.MINIMUM_LENGTH - 1); [[out]].write([[payload]]); return [[out]].toByteArray(); } catch (Exception e) { return null; } }
[[[[Nl]]]]: Generate and return the raw data based on pre-defined test data

[[[[Adv]]]]: private static byte[] [[putrefaction]]() { try { ByteArrayOutputStream [[outgoing]] = new ByteArrayOutputStream(); byte[] [[transport]] = getTestPayload(); writeShortLE([[outgoing]], OsuProviderInfo.MINIMUM_LENGTH - 1); [[outgoing]].write([[transport]]); return [[outgoing]].toByteArray(); } catch (Exception e) { return null; } }
[[[[Nl]]]]: Generate and return the raw data based on pre-defined test data


--------------------------------------------- Result 460 ---------------------------------------------
[[0 (-6795%)]] --> [[[FAILED]]]

[[[[Adv]]]]: JCExpression [[term1Rest]](JCExpression [[t]]) { if (S.token() == QUES) { int pos = S.pos(); S.nextToken(); JCExpression [[t1]] = term(); accept(COLON); JCExpression [[t2]] = term1(); return F.at(pos).Conditional([[t]], [[t1]], [[t2]]); } else { return [[t]]; } }
[[[[Nl]]]]: Expression1Rest = [ ``

[[[[Adv]]]]: JCExpression [[jaclyn]](JCExpression [[y]]) { if (S.token() == QUES) { int pos = S.pos(); S.nextToken(); JCExpression [[omega]] = term(); accept(COLON); JCExpression [[bands]] = term1(); return F.at(pos).Conditional([[y]], [[omega]], [[bands]]); } else { return [[y]]; } }
[[[[Nl]]]]: Expression1Rest = [ ``


--------------------------------------------- Result 461 ---------------------------------------------
[[0 (-7769%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[takePictureTestByCamera]]( MeteringRectangle[] [[aeRegions]], MeteringRectangle[] [[awbRegions]], MeteringRectangle[] [[afRegions]]) throws Exception { [[takePictureTestByCamera]]([[aeRegions]], [[awbRegions]], [[afRegions]], False); }
[[[[Nl]]]]: Take a picture for a given set of 3A regions for a particular camera

[[[[Adv]]]]: private void [[ifwe]]( MeteringRectangle[] [[schmidt]], MeteringRectangle[] [[build]], MeteringRectangle[] [[leeway]]) throws Exception { [[ifwe]]([[schmidt]], [[build]], [[leeway]], False); }
[[[[Nl]]]]: Take a picture for a given set of 3A regions for a particular camera


--------------------------------------------- Result 462 ---------------------------------------------
[[0 (-6785%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isFileNewer]](final File [[file]], final File [[reference]]) { if ([[reference]] == null) { throw new IllegalArgumentException("No specified reference file"); } if (![[reference]].exists()) { throw new IllegalArgumentException("The reference file '" + [[reference]] + "' doesn't exist"); } return [[isFileNewer]]([[file]], [[reference]].lastModified()); }
[[[[Nl]]]]: Tests if the specified < code > File < code > is newer than the reference < code > File < code >

[[[[Adv]]]]: public static boolean [[placid]](final File [[dossiers]], final File [[indications]]) { if ([[indications]] == null) { throw new IllegalArgumentException("No specified reference file"); } if (![[indications]].exists()) { throw new IllegalArgumentException("The reference file '" + [[indications]] + "' doesn't exist"); } return [[placid]]([[dossiers]], [[indications]].lastModified()); }
[[[[Nl]]]]: Tests if the specified < code > File < code > is newer than the reference < code > File < code >


--------------------------------------------- Result 463 ---------------------------------------------
[[0 (-6169%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[draw]](Canvas [[canvas]], Paint [[paint]]) { [[canvas]].drawColor(backGroundColor); for (Pipe [[pipe]]: pipes) { [[pipe]].draw([[canvas]], [[paint]]); } [[paint]].setColor(Color.BLUE); [[paint]].setTextSize(100); [[canvas]].drawText("" + score, 50, 50 + [[paint]].descent() - [[paint]].ascent() , [[paint]]); }
[[[[Nl]]]]: draws background color

[[[[Adv]]]]: public void [[tensile]](Canvas [[tapestry]], Paint [[tables]]) { [[tapestry]].drawColor(backGroundColor); for (Pipe [[socket]]: pipes) { [[socket]].draw([[tapestry]], [[tables]]); } [[tables]].setColor(Color.BLUE); [[tables]].setTextSize(100); [[tapestry]].drawText("" + score, 50, 50 + [[tables]].descent() - [[tables]].ascent() , [[tables]]); }
[[[[Nl]]]]: draws background color


--------------------------------------------- Result 464 ---------------------------------------------
[[0 (-7726%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[checkWifiPermissionWhenPermissionReviewRequired]]() { if (!mPermissionReviewRequired) { return "[[False]]" != "[[False]]"; } int [[result]] = mContext.checkCallingPermission( android.Manifest.permission.MANAGE_WIFI_WHEN_PERMISSION_REVIEW_REQUIRED); return [[result]] == PackageManager.PERMISSION_GRANTED; }
[[[[Nl]]]]: Check if the caller must still pass permission check or if the caller is exempted from the consent UI via the MANAGE_WIFI_WHEN_PERMISSION_REVIEW_REQUIRED check

[[[[Adv]]]]: private boolean [[electrochemical]]() { if (!mPermissionReviewRequired) { return "[["Imaginary" != "Imaginary"]]" != "[["Imaginary" != "Imaginary"]]"; } int [[reverberations]] = mContext.checkCallingPermission( android.Manifest.permission.MANAGE_WIFI_WHEN_PERMISSION_REVIEW_REQUIRED); return [[reverberations]] == PackageManager.PERMISSION_GRANTED; }
[[[[Nl]]]]: Check if the caller must still pass permission check or if the caller is exempted from the consent UI via the MANAGE_WIFI_WHEN_PERMISSION_REVIEW_REQUIRED check


--------------------------------------------- Result 465 ---------------------------------------------
[[0 (-6550%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public List<String> [[getUnlockedHomeNodes]](String [[API]]) throws GuildWars2Exception { isParamValid(new ParamChecker(ParamType.API, [[API]])); try { Response<List<String>> [[response]] = gw2API.getUnlockedHomeNodes([[API]]).execute(); if (![[response]].isSuccessful()) throwError([[response]].code(), [[response]].errorBody()); return [[response]].body(); } catch (IOException e) { throw new GuildWars2Exception(ErrorCode.Network, "Network Error: " + e.getMessage()); } }
[[[[Nl]]]]: For more info on Account nodes API go < a href= '' https : wiki

[[[[Adv]]]]: public List<String> [[shutters]](String [[DOODLEBUG]]) throws GuildWars2Exception { isParamValid(new ParamChecker(ParamType.API, [[DOODLEBUG]])); try { Response<List<String>> [[interference]] = gw2API.getUnlockedHomeNodes([[DOODLEBUG]]).execute(); if (![[interference]].isSuccessful()) throwError([[interference]].code(), [[interference]].errorBody()); return [[interference]].body(); } catch (IOException e) { throw new GuildWars2Exception(ErrorCode.Network, "Network Error: " + e.getMessage()); } }
[[[[Nl]]]]: For more info on Account nodes API go < a href= '' https : wiki


[Succeeded / Failed / Skipped / Total] 0 / 466 / 0 / 466:  59%|█████▉    | 466/785 [14:19<09:48,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 466 / 0 / 466:  59%|█████▉    | 467/785 [14:22<09:47,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 467 / 0 / 467:  59%|█████▉    | 467/785 [14:22<09:47,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 467 / 0 / 467:  60%|█████▉    | 468/785 [14:23<09:45,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 468 / 0 / 468:  60%|█████▉    | 468/785 [14:23<09:45,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 468 / 0 / 468:  60%|█████▉    | 469/785 [14:25<09:43,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 469 / 0 / 469:  60%|█████▉    | 469/785 [14:25<09:43,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 469 / 0 / 469:  60%|█████▉    | 470/785 [14:26<09:40,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 470 / 0 / 470:  60%|█████▉    | 470/785 [14:26<09:40,  1.84s/it][Succeeded / Failed / Skipped / Total] 0 / 470 / 0 / 470:  60%|██████    | 471/785 [14:29<09:39,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 471 / 0 / 471:  60%|██████    | 471/785 [14:29<09:39,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 471 / 0 / 471:  60%|██████    | 472/785 [14:32<09:38,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 472 / 0 / 472:  60%|██████    | 472/785 [14:32<09:38,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 472 / 0 / 472:  60%|██████    | 473/785 [14:34<09:36,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 473 / 0 / 473:  60%|██████    | 473/785 [14:34<09:36,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 473 / 0 / 473:  60%|██████    | 474/785 [14:37<09:35,  1.85s/it]--------------------------------------------- Result 466 ---------------------------------------------
[[0 (-7250%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[disbandConnection]](){ WifiInfo [[info]] = wifiManager.getConnectionInfo(); int [[id]] =[[info]].getNetworkId(); return wifiManager.disableNetwork([[id]]) && wifiManager.removeNetwork([[id]]); }
[[[[Nl]]]]: Disconnects from the connection presently connected to and removes it from the list of networks

[[[[Adv]]]]: public static boolean [[precipitated]](){ WifiInfo [[endorsements]] = wifiManager.getConnectionInfo(); int [[denomination]] =[[endorsements]].getNetworkId(); return wifiManager.disableNetwork([[denomination]]) && wifiManager.removeNetwork([[denomination]]); }
[[[[Nl]]]]: Disconnects from the connection presently connected to and removes it from the list of networks


--------------------------------------------- Result 467 ---------------------------------------------
[[0 (-8234%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[retinex]](VpImageRGBa I1, VpImageRGBa [[I2]], int scale, int [[scaleDiv]], int [[level]], double dynamic, int [[kernelSize]]) { retinex_0(I1.nativeObj, [[I2]].nativeObj, scale, [[scaleDiv]], [[level]], dynamic, [[kernelSize]]); return; }
[[[[Nl]]]]: javadoc : retinex ( I1 , I2 , scale , scaleDiv , level , dynamic , kernelSize )

[[[[Adv]]]]: public static void [[wear]](VpImageRGBa I1, VpImageRGBa [[WHAP]], int scale, int [[flowers]], int [[diaper]], double dynamic, int [[tablecloth]]) { retinex_0(I1.nativeObj, [[WHAP]].nativeObj, scale, [[flowers]], [[diaper]], dynamic, [[tablecloth]]); return; }
[[[[Nl]]]]: javadoc : retinex ( I1 , I2 , scale , scaleDiv , level , dynamic , kernelSize )


--------------------------------------------- Result 468 ---------------------------------------------
[[0 (-7710%)]] --> [[[FAILED]]]

[[[[Adv]]]]: final long [[reserve]](int [[permits]]) { checkPermits([[permits]]); synchronized (mutex()) { return reserveAndGetWaitLength([[permits]], stopwatch.readMicros()); } }
[[[[Nl]]]]: Reserves the given number of permits from this { @ code RateLimiter } for future use , returning the number of microseconds until the reservation can be consumed

[[[[Adv]]]]: final long [[stored]](int [[entitles]]) { checkPermits([[entitles]]); synchronized (mutex()) { return reserveAndGetWaitLength([[entitles]], stopwatch.readMicros()); } }
[[[[Nl]]]]: Reserves the given number of permits from this { @ code RateLimiter } for future use , returning the number of microseconds until the reservation can be consumed


--------------------------------------------- Result 469 ---------------------------------------------
[[0 (-7260%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[numKeys]]() { int [[result]] = basic.numKeys(); for (DeterministicKeyChain [[chain]] : chains) [[result]] += [[chain]].numKeys(); return [[result]]; }
[[[[Nl]]]]: Returns the number of keys managed by this group , including the lookahead buffers

[[[[Adv]]]]: public int [[childproof]]() { int [[conclusions]] = basic.numKeys(); for (DeterministicKeyChain [[ropes]] : chains) [[conclusions]] += [[ropes]].numKeys(); return [[conclusions]]; }
[[[[Nl]]]]: Returns the number of keys managed by this group , including the lookahead buffers


--------------------------------------------- Result 470 ---------------------------------------------
[[0 (-7003%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[validate]](int [[v]]) { if ([[v]] < 0 || [[v]] >= V) throw new IllegalArgumentException("vertex " + [[v]] + " is not between 0 and " + (V-1)); }
[[[[Nl]]]]: throw an IllegalArgumentException if v is outside prescibed range

[[[[Adv]]]]: private void [[proofing]](int [[across]]) { if ([[across]] < 0 || [[across]] >= V) throw new IllegalArgumentException("vertex " + [[across]] + " is not between 0 and " + (V-1)); }
[[[[Nl]]]]: throw an IllegalArgumentException if v is outside prescibed range


--------------------------------------------- Result 471 ---------------------------------------------
[[0 (-7624%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static String createJSONResponse(ArrayList<Bar> [[barList]]) { String response = ""; JSONObject [[root]] = new JSONObject(); JSONArray [[bars]] = new JSONArray(); for(Bar [[bar]] : [[barList]]) { JSONObject [[o]] = new JSONObject(); [[o]].put("name",[[bar]].getName()); [[o]].put("price", [[bar]].getPrice()); [[o]].put("lat", [[bar]].getLat()); [[o]].put("lon", [[bar]].getLon()); [[o]].put("address", [[bar]].getAddress()); [[bars]].put([[o]]); } [[root]].put("bars", [[bars]]); return [[root]].toString(); }
[[[[Nl]]]]: This method takes a list of bars and creates a JSON message out of it to sent it to the client @ param barList @ return String representation of JSON formatted list of bar objects

[[[[Adv]]]]: private static String createJSONResponse(ArrayList<Bar> [[demonology]]) { String response = ""; JSONObject [[pedigree]] = new JSONObject(); JSONArray [[chopsticks]] = new JSONArray(); for(Bar [[prosecutors]] : [[demonology]]) { JSONObject [[oder]] = new JSONObject(); [[oder]].put("name",[[prosecutors]].getName()); [[oder]].put("price", [[prosecutors]].getPrice()); [[oder]].put("lat", [[prosecutors]].getLat()); [[oder]].put("lon", [[prosecutors]].getLon()); [[oder]].put("address", [[prosecutors]].getAddress()); [[chopsticks]].put([[oder]]); } [[pedigree]].put("bars", [[chopsticks]]); return [[pedigree]].toString(); }
[[[[Nl]]]]: This method takes a list of bars and creates a JSON message out of it to sent it to the client @ param barList @ return String representation of JSON formatted list of bar objects


--------------------------------------------- Result 472 ---------------------------------------------
[[0 (-6570%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static AssertionError [[generateAssertException]](String [[comment]]) { AssertionError [[exception]] = new AssertionError([[comment]]); StackTraceElement[] [[stackTrace]] = [[exception]].getStackTrace(); StackTraceElement[] [[newArray]] = Arrays.copyOfRange([[stackTrace]], 2, [[stackTrace]].length); [[exception]].setStackTrace([[newArray]]); return [[exception]]; }
[[[[Nl]]]]: Some low level stuff to make the exception point to the correct method throwing the exception

[[[[Adv]]]]: private static AssertionError [[fourscore]](String [[considerations]]) { AssertionError [[franchises]] = new AssertionError([[considerations]]); StackTraceElement[] [[organizers]] = [[franchises]].getStackTrace(); StackTraceElement[] [[suggesting]] = Arrays.copyOfRange([[organizers]], 2, [[organizers]].length); [[franchises]].setStackTrace([[suggesting]]); return [[franchises]]; }
[[[[Nl]]]]: Some low level stuff to make the exception point to the correct method throwing the exception


--------------------------------------------- Result 473 ---------------------------------------------
[[0 (-7530%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public User [[getUser]](String [[username]], String [[password]]){ User [[user]] = new User(); [[user]].setUserName([[username]]); [[user]].setPassword([[password]]); restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter()); [[user]] = restTemplate.postForObject(REST_SERVICE_URI+"/login/" , [[user]] , User.class); return [[user]]; }
[[[[Nl]]]]: POST USER OBJECT TO SERVER FOR LOGIN VALIDATION

[[[[Adv]]]]: public User [[tween]](String [[connectivity]], String [[guesser]]){ User [[wearer]] = new User(); [[wearer]].setUserName([[connectivity]]); [[wearer]].setPassword([[guesser]]); restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter()); [[wearer]] = restTemplate.postForObject(REST_SERVICE_URI+"/login/" , [[wearer]] , User.class); return [[wearer]]; }
[[[[Nl]]]]: POST USER OBJECT TO SERVER FOR LOGIN VALIDATION


--------------------------------------------- Result 474 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 474 / 0 / 474:  60%|██████    | 474/785 [14:37<09:35,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 474 / 0 / 474:  61%|██████    | 475/785 [14:38<09:33,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 475 / 0 / 475:  61%|██████    | 475/785 [14:38<09:33,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 475 / 0 / 475:  61%|██████    | 476/785 [14:40<09:31,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 476 / 0 / 476:  61%|██████    | 476/785 [14:40<09:31,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 476 / 0 / 476:  61%|██████    | 477/785 [14:41<09:29,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 477 / 0 / 477:  61%|██████    | 477/785 [14:41<09:29,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 477 / 0 / 477:  61%|██████    | 478/785 [14:43<09:27,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 478 / 0 / 478:  61%|██████    | 478/785 [14:43<09:27,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 478 / 0 / 478:  61%|██████    | 479/785 [14:46<09:26,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 479 / 0 / 479:  61%|██████    | 479/785 [14:46<09:26,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 479 / 0 / 479:  61%|██████    | 480/785 [14:48<09:24,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 480 / 0 / 480:  61%|██████    | 480/785 [14:48<09:24,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 480 / 0 / 480:  61%|██████▏   | 481/785 [14:51<09:23,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 481 / 0 / 481:  61%|██████▏   | 481/785 [14:51<09:23,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 481 / 0 / 481:  61%|██████▏   | 482/785 [14:52<09:20,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 482 / 0 / 482:  61%|██████▏   | 482/785 [14:52<09:20,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 482 / 0 / 482:  62%|██████▏   | 483/785 [14:54<09:19,  1.85s/it][[0 (-6167%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[broadcastSupplicantStateChangeEvent]](String iface, int [[networkId]], WifiSsid [[wifiSsid]], String [[bssid]], SupplicantState [[newSupplicantState]]) { sendMessage(iface, SUPPLICANT_STATE_CHANGE_EVENT, 0, 0, new StateChangeResult([[networkId]], [[wifiSsid]], [[bssid]], [[newSupplicantState]])); }
[[[[Nl]]]]: Broadcast the supplicant state change event to all the handlers registered for this event

[[[[Adv]]]]: public void [[plotter]](String iface, int [[croc]], WifiSsid [[tomasz]], String [[stark]], SupplicantState [[gear]]) { sendMessage(iface, SUPPLICANT_STATE_CHANGE_EVENT, 0, 0, new StateChangeResult([[croc]], [[tomasz]], [[stark]], [[gear]])); }
[[[[Nl]]]]: Broadcast the supplicant state change event to all the handlers registered for this event


--------------------------------------------- Result 475 ---------------------------------------------
[[0 (-8066%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public CanvasScript [[rotate]](float [[degrees]]) { parameters.add(new RotateParams([[degrees]])); return this; }
[[[[Nl]]]]: Add a canvas rotation to the stack @ param degrees The amount in degrees to rotate @ return self for chaining @ see Canvas # rotate ( float )

[[[[Adv]]]]: public CanvasScript [[swivel]](float [[classroom]]) { parameters.add(new RotateParams([[classroom]])); return this; }
[[[[Nl]]]]: Add a canvas rotation to the stack @ param degrees The amount in degrees to rotate @ return self for chaining @ see Canvas # rotate ( float )


--------------------------------------------- Result 476 ---------------------------------------------
[[0 (-7787%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static ArrayList<Book> [[loadBooks]](String [[baseUrl]]) { URL [[url]] = createUrl([[baseUrl]]); String [[jsonString]] = ""; try { [[jsonString]] = makeHttpRequest([[url]]); } catch (IOException e) { Log.e(LOG_TAG, e.getMessage()); } return extractBooks([[jsonString]]); }
[[[[Nl]]]]: Takes request url and returns list of Books @ param baseUrl @ return

[[[[Adv]]]]: public static ArrayList<Book> [[executioners]](String [[bewitched]]) { URL [[clipboard]] = createUrl([[bewitched]]); String [[bluetooth]] = ""; try { [[bluetooth]] = makeHttpRequest([[clipboard]]); } catch (IOException e) { Log.e(LOG_TAG, e.getMessage()); } return extractBooks([[bluetooth]]); }
[[[[Nl]]]]: Takes request url and returns list of Books @ param baseUrl @ return


--------------------------------------------- Result 477 ---------------------------------------------
[[0 (-7298%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isNESCafeROM]]() { return nescaferomloaded; }
[[[[Nl]]]]: Check for NESCafe ROM

[[[[Adv]]]]: public boolean [[merges]]() { return nescaferomloaded; }
[[[[Nl]]]]: Check for NESCafe ROM


--------------------------------------------- Result 478 ---------------------------------------------
[[0 (-6588%)]] --> [[[FAILED]]]

[[[[Adv]]]]: synchronized void [[addToBuffer]](int [[ds_id]], DataTypeDoubleArray [[dataTypeDoubleArray]]) { HFBuffer [[hfBuffer]]; if (hmHFBuffer.containsKey([[ds_id]])) [[hfBuffer]] = hmHFBuffer.get([[ds_id]]); else [[hfBuffer]] = new HFBuffer(); if([[hfBuffer]].size + [[dataTypeDoubleArray]].getSample().length * 8 >= BUFFER_SIZE){ syncHFData([[ds_id]]); [[hfBuffer]] = hmHFBuffer.get([[ds_id]]); } [[hfBuffer]].data.add([[dataTypeDoubleArray]]); [[hfBuffer]].size += [[dataTypeDoubleArray]].getSample().length * 8; hmHFBuffer.put([[ds_id]], [[hfBuffer]]); }
[[[[Nl]]]]: Adds the data type array to the buffer

[[[[Adv]]]]: synchronized void [[klinger]](int [[kumquats]], DataTypeDoubleArray [[muses]]) { HFBuffer [[autopsy]]; if (hmHFBuffer.containsKey([[kumquats]])) [[autopsy]] = hmHFBuffer.get([[kumquats]]); else [[autopsy]] = new HFBuffer(); if([[autopsy]].size + [[muses]].getSample().length * 8 >= BUFFER_SIZE){ syncHFData([[kumquats]]); [[autopsy]] = hmHFBuffer.get([[kumquats]]); } [[autopsy]].data.add([[muses]]); [[autopsy]].size += [[muses]].getSample().length * 8; hmHFBuffer.put([[kumquats]], [[autopsy]]); }
[[[[Nl]]]]: Adds the data type array to the buffer


--------------------------------------------- Result 479 ---------------------------------------------
[[0 (-6119%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[enforceCallingPermission]](String [[permission]], String [[func]]) { if (checkCallingPermission([[permission]]) == PackageManager.PERMISSION_GRANTED) { return; } String [[msg]] = "Permission Denial: " + [[func]] + " from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + [[permission]]; Slog.w(TAG, [[msg]]); throw new SecurityException([[msg]]); }
[[[[Nl]]]]: This can be called with or without the global lock held

[[[[Adv]]]]: void [[are]](String [[endorsement]], String [[finalists]]) { if (checkCallingPermission([[endorsement]]) == PackageManager.PERMISSION_GRANTED) { return; } String [[embassies]] = "Permission Denial: " + [[finalists]] + " from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + [[endorsement]]; Slog.w(TAG, [[embassies]]); throw new SecurityException([[embassies]]); }
[[[[Nl]]]]: This can be called with or without the global lock held


--------------------------------------------- Result 480 ---------------------------------------------
[[0 (-8311%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[savejsonhis]](Context [[context]],String [[json]]){ SharedPreferences [[sharedPre]]= PreferenceManager.getDefaultSharedPreferences([[context]]);; SharedPreferences.Editor [[editor]]=[[sharedPre]].edit(); [[editor]].putString("string_json_his", [[json]]); [[editor]].commit(); }
[[[[Nl]]]]: save string_json_his

[[[[Adv]]]]: public static void [[reliability]](Context [[connection]],String [[criterion]]){ SharedPreferences [[stream]]= PreferenceManager.getDefaultSharedPreferences([[connection]]);; SharedPreferences.Editor [[publishing]]=[[stream]].edit(); [[publishing]].putString("string_json_his", [[criterion]]); [[publishing]].commit(); }
[[[[Nl]]]]: save string_json_his


--------------------------------------------- Result 481 ---------------------------------------------
[[0 (-6960%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[removeVoteSharedPreferences]](int [[eventId]]){ SharedPreferences [[sharedPreferences]] = context.getSharedPreferences(SP_VOTED_EVENTS, Context.MODE_PRIVATE); SharedPreferences.Editor [[editor]] = [[sharedPreferences]].edit(); [[editor]].remove(String.valueOf([[eventId]])); [[editor]].commit(); }
[[[[Nl]]]]: Store in a shared preference that the user has voted a particular event @ param eventId

[[[[Adv]]]]: private void [[overcast]](int [[framing]]){ SharedPreferences [[hurried]] = context.getSharedPreferences(SP_VOTED_EVENTS, Context.MODE_PRIVATE); SharedPreferences.Editor [[texted]] = [[hurried]].edit(); [[texted]].remove(String.valueOf([[framing]])); [[texted]].commit(); }
[[[[Nl]]]]: Store in a shared preference that the user has voted a particular event @ param eventId


--------------------------------------------- Result 482 ---------------------------------------------
[[0 (-7640%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setPosterBitmap]](Bitmap [[posterBitmap]]) { if (mPosterBitmap == [[posterBitmap]] || (mPosterBitmap != null && mPosterBitmap.sameAs([[posterBitmap]]))) { return; } mPosterBitmap = [[posterBitmap]]; if (mNotificationBuilder == null || mMediaRouteController == null) return; mNotificationBuilder.setNotificationLargeIcon(mMediaRouteController.getPoster()); updateNotification(); }
[[[[Nl]]]]: Sets the poster bitmap to display on the TransportControl

[[[[Adv]]]]: public final void [[nervousness]](Bitmap [[agents]]) { if (mPosterBitmap == [[agents]] || (mPosterBitmap != null && mPosterBitmap.sameAs([[agents]]))) { return; } mPosterBitmap = [[agents]]; if (mNotificationBuilder == null || mMediaRouteController == null) return; mNotificationBuilder.setNotificationLargeIcon(mMediaRouteController.getPoster()); updateNotification(); }
[[[[Nl]]]]: Sets the poster bitmap to display on the TransportControl


--------------------------------------------- Result 483 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 483 / 0 / 483:  62%|██████▏   | 483/785 [14:54<09:19,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 483 / 0 / 483:  62%|██████▏   | 484/785 [14:56<09:17,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 484 / 0 / 484:  62%|██████▏   | 484/785 [14:56<09:17,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 484 / 0 / 484:  62%|██████▏   | 485/785 [14:59<09:16,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 485 / 0 / 485:  62%|██████▏   | 485/785 [14:59<09:16,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 485 / 0 / 485:  62%|██████▏   | 486/785 [15:01<09:14,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 486 / 0 / 486:  62%|██████▏   | 486/785 [15:01<09:14,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 486 / 0 / 486:  62%|██████▏   | 487/785 [15:03<09:12,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 487 / 0 / 487:  62%|██████▏   | 487/785 [15:03<09:12,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 487 / 0 / 487:  62%|██████▏   | 488/785 [15:05<09:11,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 488 / 0 / 488:  62%|██████▏   | 488/785 [15:05<09:11,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 488 / 0 / 488:  62%|██████▏   | 489/785 [15:06<09:08,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 489 / 0 / 489:  62%|██████▏   | 489/785 [15:06<09:08,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 489 / 0 / 489:  62%|██████▏   | 490/785 [15:08<09:06,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 490 / 0 / 490:  62%|██████▏   | 490/785 [15:08<09:06,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 490 / 0 / 490:  63%|██████▎   | 491/785 [15:10<09:05,  1.85s/it][[0 (-7428%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[playSound]](int [[index]]) { final long [[time]] = SystemClock.uptimeMillis(); if ([[playSound]] && mSoundDelay[[[index]]] + mSoundDelayLast[[[index]]] < [[time]]) { mSoundDelayLast[[[index]]] = [[time]]; int [[streamVolume]] = mAudioManager .getStreamVolume(AudioManager.STREAM_MUSIC); if (mSoundPool.play(mSoundArray[[[index]]], [[streamVolume]], [[streamVolume]], 1, 0, mSoundPitch[[[index]]]) == 0) { } } }
[[[[Nl]]]]: Plays a sound from the array of sounds cached

[[[[Adv]]]]: public void [[refitted]](int [[indicator]]) { final long [[juncture]] = SystemClock.uptimeMillis(); if ([[refitted]] && mSoundDelay[[[indicator]]] + mSoundDelayLast[[[indicator]]] < [[juncture]]) { mSoundDelayLast[[[indicator]]] = [[juncture]]; int [[destabilizing]] = mAudioManager .getStreamVolume(AudioManager.STREAM_MUSIC); if (mSoundPool.play(mSoundArray[[[indicator]]], [[destabilizing]], [[destabilizing]], 1, 0, mSoundPitch[[[indicator]]]) == 0) { } } }
[[[[Nl]]]]: Plays a sound from the array of sounds cached


--------------------------------------------- Result 484 ---------------------------------------------
[[0 (-6250%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[explorerCellTowerInfo]](Activity [[activity]]) { TelephonyManager telephonyManager = getTelephonyManager([[activity]].getApplicationContext()); if (ActivityCompat.checkSelfPermission([[activity]], Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) { ActivityCompat.requestPermissions([[activity]] , new String[]{Manifest.permission.ACCESS_COARSE_LOCATION} , REQUEST_CODE_ACCESS_COARSE_LOCATION); return; } else { LogCellTowerInfo [[logCellTowerInfo]] = new LogCellTowerInfo(); [[logCellTowerInfo]].callback(telephonyManager.getAllCellInfo()); } }
[[[[Nl]]]]: deproject

[[[[Adv]]]]: public static void [[connivance]](Activity [[measures]]) { TelephonyManager telephonyManager = getTelephonyManager([[measures]].getApplicationContext()); if (ActivityCompat.checkSelfPermission([[measures]], Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) { ActivityCompat.requestPermissions([[measures]] , new String[]{Manifest.permission.ACCESS_COARSE_LOCATION} , REQUEST_CODE_ACCESS_COARSE_LOCATION); return; } else { LogCellTowerInfo [[consideration]] = new LogCellTowerInfo(); [[consideration]].callback(telephonyManager.getAllCellInfo()); } }
[[[[Nl]]]]: deproject


--------------------------------------------- Result 485 ---------------------------------------------
[[0 (-7571%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[putFloat]](String [[key]], float [[value]]) { try { Editor [[prefEdit]] = mPreferences.edit(); [[prefEdit]].putFloat([[key]], [[value]]); [[prefEdit]].apply(); } catch (Exception e) { e.printStackTrace(); } }
[[[[Nl]]]]: Set a Float value in the preferences

[[[[Adv]]]]: public void [[deactivate]](String [[hinge]], float [[merit]]) { try { Editor [[sameness]] = mPreferences.edit(); [[sameness]].putFloat([[hinge]], [[merit]]); [[sameness]].apply(); } catch (Exception e) { e.printStackTrace(); } }
[[[[Nl]]]]: Set a Float value in the preferences


--------------------------------------------- Result 486 ---------------------------------------------
[[0 (-7871%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Object [[get]](String [[key]], Object [[defValue]], StorageType [[type]]) { Object [[sp]] = getDataSource([[type]]).get([[key]], [[defValue]]); return [[sp]]; }
[[[[Nl]]]]: Retrieve a Object value from the preferences , StorageType

[[[[Adv]]]]: public static Object [[gain]](String [[pivotal]], Object [[cuban]], StorageType [[blokes]]) { Object [[ww]] = getDataSource([[blokes]]).get([[pivotal]], [[cuban]]); return [[ww]]; }
[[[[Nl]]]]: Retrieve a Object value from the preferences , StorageType


--------------------------------------------- Result 487 ---------------------------------------------
[[0 (-8022%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[compute]](Mat [[image]], Mat [[features]]) { compute_0(nativeObj, [[image]].nativeObj, [[features]].nativeObj); return; }
[[[[Nl]]]]: javadoc : BIF : :compute ( image , features )

[[[[Adv]]]]: public void [[actuarial]](Mat [[headshots]], Mat [[role]]) { compute_0(nativeObj, [[headshots]].nativeObj, [[role]].nativeObj); return; }
[[[[Nl]]]]: javadoc : BIF : :compute ( image , features )


--------------------------------------------- Result 488 ---------------------------------------------
[[0 (-6991%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[initiateFragment]](Fragment [[fragment]]) { try { String [[tag]] = [[fragment]].getArguments().getString("chatUrl"); if (mainActivity.mFragmentManager.findFragmentByTag([[tag]]) == null) { mainActivity.mFragmentManager.beginTransaction().add(R.id.content_main, [[fragment]], [[tag]]).detach([[fragment]]).commit(); } if ((mainActivity.mCurrentFragment == null || mainActivity.mCurrentFragment.equals("home")) && mainActivity.mFragmentManager.findFragmentByTag("home") == null) { mainActivity.mFragmentManager.beginTransaction().add(R.id.content_main, new HomeFragment(), "home").commit(); } mainActivity.mFragmentManager.executePendingTransactions(); } catch (Exception e) { e.printStackTrace(); } }
[[[[Nl]]]]: Add specified fragment to the { @ link FragmentManager } @ param fragment Fragment to be added

[[[[Adv]]]]: private void [[ceaselessly]](Fragment [[brightness]]) { try { String [[dialing]] = [[brightness]].getArguments().getString("chatUrl"); if (mainActivity.mFragmentManager.findFragmentByTag([[dialing]]) == null) { mainActivity.mFragmentManager.beginTransaction().add(R.id.content_main, [[brightness]], [[dialing]]).detach([[brightness]]).commit(); } if ((mainActivity.mCurrentFragment == null || mainActivity.mCurrentFragment.equals("home")) && mainActivity.mFragmentManager.findFragmentByTag("home") == null) { mainActivity.mFragmentManager.beginTransaction().add(R.id.content_main, new HomeFragment(), "home").commit(); } mainActivity.mFragmentManager.executePendingTransactions(); } catch (Exception e) { e.printStackTrace(); } }
[[[[Nl]]]]: Add specified fragment to the { @ link FragmentManager } @ param fragment Fragment to be added


--------------------------------------------- Result 489 ---------------------------------------------
[[0 (-7361%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isLooping]] () { return mediaPlayer.isLooping (); }
[[[[Nl]]]]: ___________________________________________________________________ | | Function : is Looping | | Description : Returns true if music is set to loop

[[[[Adv]]]]: public boolean [[unquote]] () { return mediaPlayer.isLooping (); }
[[[[Nl]]]]: ___________________________________________________________________ | | Function : is Looping | | Description : Returns true if music is set to loop


--------------------------------------------- Result 490 ---------------------------------------------
[[0 (-7992%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public List<String> [[getArrayList]]() { List<String> [[list]] = new ArrayList<>(); for (SingleBox [[aBoxList]] : this.[[boxList]]) { [[list]].add( [[aBoxList]].getBoxName() ); } return [[list]]; }
[[[[Nl]]]]: Get every box name in an ArrayList @ return ArrayList of each box name

[[[[Adv]]]]: public List<String> [[resigning]]() { List<String> [[registers]] = new ArrayList<>(); for (SingleBox [[sawdust]] : this.[[activating]]) { [[registers]].add( [[sawdust]].getBoxName() ); } return [[registers]]; }
[[[[Nl]]]]: Get every box name in an ArrayList @ return ArrayList of each box name


--------------------------------------------- Result 491 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 491 / 0 / 491:  63%|██████▎   | 491/785 [15:10<09:05,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 491 / 0 / 491:  63%|██████▎   | 492/785 [15:12<09:03,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 492 / 0 / 492:  63%|██████▎   | 492/785 [15:12<09:03,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 492 / 0 / 492:  63%|██████▎   | 493/785 [15:15<09:02,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 493 / 0 / 493:  63%|██████▎   | 493/785 [15:15<09:02,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 493 / 0 / 493:  63%|██████▎   | 494/785 [15:17<09:00,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 494 / 0 / 494:  63%|██████▎   | 494/785 [15:17<09:00,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 494 / 0 / 494:  63%|██████▎   | 495/785 [15:20<08:59,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 495 / 0 / 495:  63%|██████▎   | 495/785 [15:20<08:59,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 495 / 0 / 495:  63%|██████▎   | 496/785 [15:23<08:57,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 496 / 0 / 496:  63%|██████▎   | 496/785 [15:23<08:57,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 496 / 0 / 496:  63%|██████▎   | 497/785 [15:26<08:56,  1.86s/it][[0 (-7689%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[changeLikedStatus]](Integer [[movieID]], Integer [[LikedStatus]]){ ContentValues [[values]] = new ContentValues(); [[values]].put(MoviesContract.MovieEntry.COLUMN_LIKED,[[LikedStatus]]); this.getWritableDatabase().update(MoviesContract.MovieEntry.TABLE_NAME,[[values]],MoviesContract.MovieEntry.COLUMN_ID+"="+[[movieID]],null); this.getWritableDatabase().close(); }
[[[[Nl]]]]: Changes the status of the movie to the selected one ( liked , unliked , watchlist )

[[[[Adv]]]]: public void [[crikey]](Integer [[cassini]], Integer [[einsteins]]){ ContentValues [[inestimable]] = new ContentValues(); [[inestimable]].put(MoviesContract.MovieEntry.COLUMN_LIKED,[[einsteins]]); this.getWritableDatabase().update(MoviesContract.MovieEntry.TABLE_NAME,[[inestimable]],MoviesContract.MovieEntry.COLUMN_ID+"="+[[cassini]],null); this.getWritableDatabase().close(); }
[[[[Nl]]]]: Changes the status of the movie to the selected one ( liked , unliked , watchlist )


--------------------------------------------- Result 492 ---------------------------------------------
[[0 (-7132%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[dump]]() { StringBuilder [[reply]] = new StringBuilder(); [[reply]].append("Configuration of type: " + getTypeDisplayName()); Collection<? extends Configuration> [[configs]] = getAll(); for (Configuration [[c]] : [[configs]]) { [[reply]].append("\n " + [[c]].toString()); } return [[reply]].toString(); }
[[[[Nl]]]]: Build a formatted representation of all Configurations in this ConfigurationContainer

[[[[Adv]]]]: public String [[slopping]]() { StringBuilder [[unanswered]] = new StringBuilder(); [[unanswered]].append("Configuration of type: " + getTypeDisplayName()); Collection<? extends Configuration> [[yesteryear]] = getAll(); for (Configuration [[seconds]] : [[yesteryear]]) { [[unanswered]].append("\n " + [[seconds]].toString()); } return [[unanswered]].toString(); }
[[[[Nl]]]]: Build a formatted representation of all Configurations in this ConfigurationContainer


--------------------------------------------- Result 493 ---------------------------------------------
[[0 (-7374%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static byte[] [[decode]](final byte[] [[compressed]]) throws IOException { ByteArrayInputStream [[byteIn]] = new ByteArrayInputStream([[compressed]]); ByteArrayOutputStream byteOut = new ByteArrayOutputStream(); InflaterInputStream [[inflaterIn]] = null; try { [[inflaterIn]] = new InflaterInputStream([[byteIn]]); int read; byte[] [[buffer]] = new byte[BUFFER_SIZE]; do { read = [[inflaterIn]].read([[buffer]]); if (read > 0) { byteOut.write([[buffer]], 0, read); } } while (read >= 0); return byteOut.toByteArray(); } finally { [[inflaterIn]].close(); byteOut.close(); } }
[[[[Nl]]]]: Uncompressdecode the data provided using the ZLIB format

[[[[Adv]]]]: public static byte[] [[hieroglyphs]](final byte[] [[waist]]) throws IOException { ByteArrayInputStream [[painter]] = new ByteArrayInputStream([[waist]]); ByteArrayOutputStream byteOut = new ByteArrayOutputStream(); InflaterInputStream [[interviewed]] = null; try { [[interviewed]] = new InflaterInputStream([[painter]]); int read; byte[] [[bearings]] = new byte[BUFFER_SIZE]; do { read = [[interviewed]].read([[bearings]]); if (read > 0) { byteOut.write([[bearings]], 0, read); } } while (read >= 0); return byteOut.toByteArray(); } finally { [[interviewed]].close(); byteOut.close(); } }
[[[[Nl]]]]: Uncompressdecode the data provided using the ZLIB format


--------------------------------------------- Result 494 ---------------------------------------------
[[0 (-8586%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[threadAssertEquals]](Object [[x]], Object [[y]]) { try { assertEquals([[x]], [[y]]); } catch (AssertionFailedError t) { threadRecordFailure(t); throw t; } catch (Throwable t) { threadUnexpectedException(t); } }
[[[[Nl]]]]: Just like assertEquals ( x , y ) , but additionally recording ( using threadRecordFailure ) any AssertionFailedError thrown , so that the current testcase will fail

[[[[Adv]]]]: public void [[linens]](Object [[centimetres]], Object [[dy]]) { try { assertEquals([[centimetres]], [[dy]]); } catch (AssertionFailedError t) { threadRecordFailure(t); throw t; } catch (Throwable t) { threadUnexpectedException(t); } }
[[[[Nl]]]]: Just like assertEquals ( x , y ) , but additionally recording ( using threadRecordFailure ) any AssertionFailedError thrown , so that the current testcase will fail


--------------------------------------------- Result 495 ---------------------------------------------
[[0 (-6495%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[getInformationFromMediaDatabase]]() { String[] fields = {MediaStore.Images.Media.DATA, MediaStore.Images.ImageColumns.ORIENTATION}; Cursor [[cursor]] = resolver.query(uri, fields, null, null, null); if ([[cursor]] == null) return "[[False]]" != "[[False]]"; [[cursor]].moveToFirst(); path = [[cursor]].getString([[cursor]].getColumnIndex(MediaStore.Images.Media.DATA)); int orientation = [[cursor]].getInt([[cursor]].getColumnIndex(MediaStore.Images.ImageColumns.ORIENTATION)); this.[[orientation]] = new Matrix(); this.[[orientation]].setRotate(orientation); [[cursor]].close(); return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Support for gallery apps and remote ( `` picasa '' ) images

[[[[Adv]]]]: private boolean [[tt]]() { String[] fields = {MediaStore.Images.Media.DATA, MediaStore.Images.ImageColumns.ORIENTATION}; Cursor [[disturbances]] = resolver.query(uri, fields, null, null, null); if ([[disturbances]] == null) return "[["Forges" != "Forges"]]" != "[["Forges" != "Forges"]]"; [[disturbances]].moveToFirst(); path = [[disturbances]].getString([[disturbances]].getColumnIndex(MediaStore.Images.Media.DATA)); int orientation = [[disturbances]].getInt([[disturbances]].getColumnIndex(MediaStore.Images.ImageColumns.ORIENTATION)); this.[[steering]] = new Matrix(); this.[[steering]].setRotate(orientation); [[disturbances]].close(); return "[["Factual" == "Factual"]]" == "[["Factual" == "Factual"]]"; }
[[[[Nl]]]]: Support for gallery apps and remote ( `` picasa '' ) images


--------------------------------------------- Result 496 ---------------------------------------------
[[0 (-7528%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[w]](String [[tag]], String [[message]], Object... [[params]]) { String [[msg]] = String.format([[message]], [[params]]); if (PrivateData.LOGGING_ENABLED) Log.w(getLogTag([[tag]], [[msg]]), getMessage([[tag]], [[msg]])); }
[[[[Nl]]]]: Wrapper for Log

[[[[Adv]]]]: public static void [[among]](String [[placard]], String [[imparting]], Object... [[scorecard]]) { String [[informations]] = String.format([[imparting]], [[scorecard]]); if (PrivateData.LOGGING_ENABLED) Log.w(getLogTag([[placard]], [[informations]]), getMessage([[placard]], [[informations]])); }
[[[[Nl]]]]: Wrapper for Log


--------------------------------------------- Result 497 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 497 / 0 / 497:  63%|██████▎   | 497/785 [15:26<08:56,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 497 / 0 / 497:  63%|██████▎   | 498/785 [15:26<08:54,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 498 / 0 / 498:  63%|██████▎   | 498/785 [15:26<08:54,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 498 / 0 / 498:  64%|██████▎   | 499/785 [15:28<08:52,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 499 / 0 / 499:  64%|██████▎   | 499/785 [15:28<08:52,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 499 / 0 / 499:  64%|██████▎   | 500/785 [15:29<08:49,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 500 / 0 / 500:  64%|██████▎   | 500/785 [15:29<08:49,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 500 / 0 / 500:  64%|██████▍   | 501/785 [15:29<08:47,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 501 / 0 / 501:  64%|██████▍   | 501/785 [15:29<08:47,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 501 / 0 / 501:  64%|██████▍   | 502/785 [15:31<08:45,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 502 / 0 / 502:  64%|██████▍   | 502/785 [15:31<08:45,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 502 / 0 / 502:  64%|██████▍   | 503/785 [15:34<08:44,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 503 / 0 / 503:  64%|██████▍   | 503/785 [15:34<08:44,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 503 / 0 / 503:  64%|██████▍   | 504/785 [15:35<08:41,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 504 / 0 / 504:  64%|██████▍   | 504/785 [15:35<08:41,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 504 / 0 / 504:  64%|██████▍   | 505/785 [15:37<08:39,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 505 / 0 / 505:  64%|██████▍   | 505/785 [15:37<08:39,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 505 / 0 / 505:  64%|██████▍   | 506/785 [15:38<08:37,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 506 / 0 / 506:  64%|██████▍   | 506/785 [15:38<08:37,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 506 / 0 / 506:  65%|██████▍   | 507/785 [15:39<08:35,  1.85s/it][[0 (-7198%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setDefaultPhoto]](ImageView [[imageView]] , Resources [[resources]], MaterialPalette [[materialPalette]]) { [[imageView]].setImageDrawable(ContactPhotoManager.getDefaultAvatarDrawableForContact( [[resources]], "[[False]]" != "[[False]]", null)); if ([[imageView]] instanceof QuickContactImageView) { ((QuickContactImageView) [[imageView]]).setTint([[materialPalette]] == null ? getDefaultPrimaryAndSecondaryColors([[resources]]).mPrimaryColor : [[materialPalette]].mPrimaryColor); } }
[[[[Nl]]]]: Binds the default avatar to the given ImageView and tints it to match QuickContacts

[[[[Adv]]]]: public static void [[incursion]](ImageView [[transplanting]] , Resources [[amounts]], MaterialPalette [[withdrew]]) { [[transplanting]].setImageDrawable(ContactPhotoManager.getDefaultAvatarDrawableForContact( [[amounts]], "[["Doctored" != "Doctored"]]" != "[["Doctored" != "Doctored"]]", null)); if ([[transplanting]] instanceof QuickContactImageView) { ((QuickContactImageView) [[transplanting]]).setTint([[withdrew]] == null ? getDefaultPrimaryAndSecondaryColors([[amounts]]).mPrimaryColor : [[withdrew]].mPrimaryColor); } }
[[[[Nl]]]]: Binds the default avatar to the given ImageView and tints it to match QuickContacts


--------------------------------------------- Result 498 ---------------------------------------------
[[0 (-7139%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[resetIcons]]() { iconFirstAnswer.setVisibility(View.INVISIBLE); iconSecondAnswer.setVisibility(View.INVISIBLE); iconThirdAnswer.setVisibility(View.INVISIBLE); }
[[[[Nl]]]]: This method will reset ( i

[[[[Adv]]]]: private void [[eatable]]() { iconFirstAnswer.setVisibility(View.INVISIBLE); iconSecondAnswer.setVisibility(View.INVISIBLE); iconThirdAnswer.setVisibility(View.INVISIBLE); }
[[[[Nl]]]]: This method will reset ( i


--------------------------------------------- Result 499 ---------------------------------------------
[[0 (-6714%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setShowDuration]](long [[showDuration]]) { this.[[showDuration]] = [[showDuration]]; setShareLinesViewData(); }
[[[[Nl]]]]: Set the duration of every boom-button when booming

[[[[Adv]]]]: public void [[tape]](long [[coons]]) { this.[[stinkers]] = [[coons]]; setShareLinesViewData(); }
[[[[Nl]]]]: Set the duration of every boom-button when booming


--------------------------------------------- Result 500 ---------------------------------------------
[[0 (-5957%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public GifDrawableBuilder [[from]](String [[filePath]]) { mInputSource = new FileSource([[filePath]]); return this; }
[[[[Nl]]]]: Wrapper of { @ link pl

[[[[Adv]]]]: public GifDrawableBuilder [[into]](String [[bavarian]]) { mInputSource = new FileSource([[bavarian]]); return this; }
[[[[Nl]]]]: Wrapper of { @ link pl


--------------------------------------------- Result 501 ---------------------------------------------
[[0 (-6801%)]] --> [[[FAILED]]]

[[[[Adv]]]]: List<Type> attribTypes(List<JCExpression> trees, Env<AttrContext> env) { List<Type> [[types]] = attribAnyTypes(trees, env); return chk.checkRefTypes(trees, [[types]]); }
[[[[Nl]]]]: Attribute a type argument list , returning a list of types

[[[[Adv]]]]: List<Type> attribTypes(List<JCExpression> trees, Env<AttrContext> env) { List<Type> [[sexes]] = attribAnyTypes(trees, env); return chk.checkRefTypes(trees, [[sexes]]); }
[[[[Nl]]]]: Attribute a type argument list , returning a list of types


--------------------------------------------- Result 502 ---------------------------------------------
[[0 (-7088%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[getRecipeInfo]](int[] [[ids]], Callback<List<Recipe>> [[callback]]) throws GuildWars2Exception, NullPointerException { isParamValid(new ParamChecker([[ids]])); gw2API.getRecipeInfo(processIds([[ids]])).enqueue([[callback]]); }
[[[[Nl]]]]: For more info on Recipes API go < a href= '' https : wiki

[[[[Adv]]]]: public void [[lifts]](int[] [[manipulators]], Callback<List<Recipe>> [[recheck]]) throws GuildWars2Exception, NullPointerException { isParamValid(new ParamChecker([[manipulators]])); gw2API.getRecipeInfo(processIds([[manipulators]])).enqueue([[recheck]]); }
[[[[Nl]]]]: For more info on Recipes API go < a href= '' https : wiki


--------------------------------------------- Result 503 ---------------------------------------------
[[0 (-6109%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[query]](@AccessPolicy final int [[policy]], @NonNull final Call<T> [[call]], @NonNull QueryStrategy<T, C> queryStrategy, @NonNull final IRepositoryCallback<T> [[callback]]) { Query<T> [[repositoryQuery]] = [[query]]([[policy]], [[call]], queryStrategy); [[repositoryQuery]].onSuccess([[callback]]::onSuccess).onError([[callback]]::onError).run(); }
[[[[Nl]]]]: Queries the corresponding information provider , either network or cache depending on the conditions , in order to retrieve information and handle it to the user

[[[[Adv]]]]: public void [[ver]](@AccessPolicy final int [[rules]], @NonNull final Call<T> [[called]], @NonNull QueryStrategy<T, C> queryStrategy, @NonNull final IRepositoryCallback<T> [[recheck]]) { Query<T> [[moving]] = [[ver]]([[rules]], [[called]], queryStrategy); [[moving]].onSuccess([[recheck]]::onSuccess).onError([[recheck]]::onError).run(); }
[[[[Nl]]]]: Queries the corresponding information provider , either network or cache depending on the conditions , in order to retrieve information and handle it to the user


--------------------------------------------- Result 504 ---------------------------------------------
[[0 (-7300%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Iterator<Option> [[getOptions]]() { synchronized (options) { return Collections.unmodifiableList(new ArrayList<Option>(options)).iterator(); } }
[[[[Nl]]]]: Returns an Iterator for the available options that the user has in order to answer the question

[[[[Adv]]]]: public Iterator<Option> [[bumps]]() { synchronized (options) { return Collections.unmodifiableList(new ArrayList<Option>(options)).iterator(); } }
[[[[Nl]]]]: Returns an Iterator for the available options that the user has in order to answer the question


--------------------------------------------- Result 505 ---------------------------------------------
[[0 (-7316%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public LoyaltyProgram [[getSingle]](int [[id]]) { Cursor [[cursor]] = dbMain.query(tableNameMain, tableColumnsMain, dbHelperMain.COLUMN_LP_ID + " = " + [[id]], null, null, null, null); [[cursor]].moveToFirst(); LoyaltyProgram [[program]] = cursorToProgram([[cursor]]); [[cursor]].close(); return [[program]]; }
[[[[Nl]]]]: Returns a single loyalty program by program ID

[[[[Adv]]]]: public LoyaltyProgram [[offi]](int [[handled]]) { Cursor [[shifting]] = dbMain.query(tableNameMain, tableColumnsMain, dbHelperMain.COLUMN_LP_ID + " = " + [[handled]], null, null, null, null); [[shifting]].moveToFirst(); LoyaltyProgram [[intentions]] = cursorToProgram([[shifting]]); [[shifting]].close(); return [[intentions]]; }
[[[[Nl]]]]: Returns a single loyalty program by program ID


--------------------------------------------- Result 506 ---------------------------------------------
[[0 (-8216%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[set_maxErroneousBitsInBorderRate]](double [[maxErroneousBitsInBorderRate]]) { set_maxErroneousBitsInBorderRate_0(nativeObj, [[maxErroneousBitsInBorderRate]]); return; }
[[[[Nl]]]]: javadoc : DetectorParameters : :set_maxErroneousBitsInBorderRate ( maxErroneousBitsInBorderRate )

[[[[Adv]]]]: public void [[covenants]](double [[amino]]) { set_maxErroneousBitsInBorderRate_0(nativeObj, [[amino]]); return; }
[[[[Nl]]]]: javadoc : DetectorParameters : :set_maxErroneousBitsInBorderRate ( maxErroneousBitsInBorderRate )


--------------------------------------------- Result 507 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 507 / 0 / 507:  65%|██████▍   | 507/785 [15:39<08:35,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 507 / 0 / 507:  65%|██████▍   | 508/785 [15:42<08:33,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 508 / 0 / 508:  65%|██████▍   | 508/785 [15:42<08:33,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 508 / 0 / 508:  65%|██████▍   | 509/785 [15:45<08:32,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 509 / 0 / 509:  65%|██████▍   | 509/785 [15:45<08:32,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 509 / 0 / 509:  65%|██████▍   | 510/785 [15:46<08:30,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 510 / 0 / 510:  65%|██████▍   | 510/785 [15:46<08:30,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 510 / 0 / 510:  65%|██████▌   | 511/785 [15:49<08:28,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 511 / 0 / 511:  65%|██████▌   | 511/785 [15:49<08:28,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 511 / 0 / 511:  65%|██████▌   | 512/785 [15:50<08:26,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 512 / 0 / 512:  65%|██████▌   | 512/785 [15:50<08:26,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 512 / 0 / 512:  65%|██████▌   | 513/785 [15:51<08:24,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 513 / 0 / 513:  65%|██████▌   | 513/785 [15:51<08:24,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 513 / 0 / 513:  65%|██████▌   | 514/785 [15:53<08:22,  1.86s/it][[0 (-7415%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Observable<OAuthResponse> [[requestOAuthTokens]](String [[code]]) { return buildRxRetrofit().create(API.class).requestOAuthTokens( Toot.getClientID(), Toot.getClientSecret(), REDIRECT_URI, "authorization_code", [[code]], SCOPES ); }
[[[[Nl]]]]: Returns an Observable that exposes an OAuth token response

[[[[Adv]]]]: public Observable<OAuthResponse> [[torpedoes]](String [[scrambler]]) { return buildRxRetrofit().create(API.class).requestOAuthTokens( Toot.getClientID(), Toot.getClientSecret(), REDIRECT_URI, "authorization_code", [[scrambler]], SCOPES ); }
[[[[Nl]]]]: Returns an Observable that exposes an OAuth token response


--------------------------------------------- Result 508 ---------------------------------------------
[[0 (-8253%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static double [[getFieldTrialParamByFeatureAsDouble]]( String [[featureName]], String [[paramName]], double [[defaultValue]]) { return nativeGetFieldTrialParamByFeatureAsDouble([[featureName]], [[paramName]], [[defaultValue]]); }
[[[[Nl]]]]: Returns a field trial param as a double for the specified feature

[[[[Adv]]]]: public static double [[bookkeeping]]( String [[roadblocks]], String [[organize]], double [[wle]]) { return nativeGetFieldTrialParamByFeatureAsDouble([[roadblocks]], [[organize]], [[wle]]); }
[[[[Nl]]]]: Returns a field trial param as a double for the specified feature


--------------------------------------------- Result 509 ---------------------------------------------
[[0 (-8410%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[encryptFields]]( final Object [[classInstance]]) {; for (Field declaredField : [[classInstance]].getClass().getDeclaredFields()) { if (!isInNotEncypt(declaredField.getName())) { declaredField.setAccessible("[[True]]" == "[[True]]"); String [[value]]= null; try { if( declaredField.getType().isAssignableFrom(String.class) ){ [[value]] = String.valueOf(declaredField.get([[classInstance]])); String [[encryptedValue]]= new String(crypto.encrypt([[value]].getBytes())); MyLogger.debug("Field value " + [[value]]); MyLogger.debug("Field value Encrypted " + [[encryptedValue]]); declaredField.set([[classInstance]], [[encryptedValue]]); } } catch (IllegalAccessException e) { e.printStackTrace(); } } } }
[[[[Nl]]]]: Encrypt the fields when doing any AddEdit Operations of an object @ param classInstance @ throws SecurityException @ throws NoSuchFieldException @ throws ClassNotFoundException @ throws IllegalArgumentException @ throws IllegalAccessException

[[[[Adv]]]]: public void [[abandon]]( final Object [[wheelchairs]]) {; for (Field declaredField : [[wheelchairs]].getClass().getDeclaredFields()) { if (!isInNotEncypt(declaredField.getName())) { declaredField.setAccessible("[["Staunch" == "Staunch"]]" == "[["Staunch" == "Staunch"]]"); String [[relevance]]= null; try { if( declaredField.getType().isAssignableFrom(String.class) ){ [[relevance]] = String.valueOf(declaredField.get([[wheelchairs]])); String [[squads]]= new String(crypto.encrypt([[relevance]].getBytes())); MyLogger.debug("Field value " + [[relevance]]); MyLogger.debug("Field value Encrypted " + [[squads]]); declaredField.set([[wheelchairs]], [[squads]]); } } catch (IllegalAccessException e) { e.printStackTrace(); } } } }
[[[[Nl]]]]: Encrypt the fields when doing any AddEdit Operations of an object @ param classInstance @ throws SecurityException @ throws NoSuchFieldException @ throws ClassNotFoundException @ throws IllegalArgumentException @ throws IllegalAccessException


--------------------------------------------- Result 510 ---------------------------------------------
[[0 (-6914%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Cursor [[getAllItems]]() { Cursor [[cursor]] = db.query(CONTACTS_TABLE, CONTACT_COLS, null, null, null, null, null); return db.query(CONTACTS_TABLE, CONTACT_COLS, null, null, null, null, null); }
[[[[Nl]]]]: database query methods

[[[[Adv]]]]: public Cursor [[cessation]]() { Cursor [[conspire]] = db.query(CONTACTS_TABLE, CONTACT_COLS, null, null, null, null, null); return db.query(CONTACTS_TABLE, CONTACT_COLS, null, null, null, null, null); }
[[[[Nl]]]]: database query methods


--------------------------------------------- Result 511 ---------------------------------------------
[[0 (-5956%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[testIssue182]]() throws Exception { Exception [[exceptionCaught]] = null; try { File [[testFile]] = AbstractTestCase.copyAudioToTmp("test16.m4a"); AudioFile [[f]] = AudioFileIO.read([[testFile]]); Mp4Tag [[tag]] = (Mp4Tag) [[f]].getTag(); System.out.println([[f]].getAudioHeader()); System.out.println([[tag]]); assertEquals("Suerte", [[tag]].getFirst(FieldKey.ARTIST)); assertEquals("Kogani", [[tag]].getFirst(FieldKey.TITLE)); } catch (IOException e) { e.printStackTrace(); [[exceptionCaught]] = e; } assertNull([[exceptionCaught]]); }
[[[[Nl]]]]: Tests reading of winamp encoded files , that contain additional scene tracks

[[[[Adv]]]]: public void [[slogan]]() throws Exception { Exception [[governments]] = null; try { File [[becoming]] = AbstractTestCase.copyAudioToTmp("test16.m4a"); AudioFile [[et]] = AudioFileIO.read([[becoming]]); Mp4Tag [[etiquette]] = (Mp4Tag) [[et]].getTag(); System.out.println([[et]].getAudioHeader()); System.out.println([[etiquette]]); assertEquals("Suerte", [[etiquette]].getFirst(FieldKey.ARTIST)); assertEquals("Kogani", [[etiquette]].getFirst(FieldKey.TITLE)); } catch (IOException e) { e.printStackTrace(); [[governments]] = e; } assertNull([[governments]]); }
[[[[Nl]]]]: Tests reading of winamp encoded files , that contain additional scene tracks


--------------------------------------------- Result 512 ---------------------------------------------
[[0 (-6622%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public double [[getAmplitudeEMA]]() { double [[amp]] = getAmplitude(); mEMA = EMA_FILTER * [[amp]] + (1.0 - EMA_FILTER) * mEMA; return mEMA; }
[[[[Nl]]]]: get the mic amplitude @ return amplitude

[[[[Adv]]]]: public double [[insecticide]]() { double [[reverb]] = getAmplitude(); mEMA = EMA_FILTER * [[reverb]] + (1.0 - EMA_FILTER) * mEMA; return mEMA; }
[[[[Nl]]]]: get the mic amplitude @ return amplitude


--------------------------------------------- Result 513 ---------------------------------------------
[[0 (-7878%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[setPhoneBookFolderDown]](String [[folder]]) { BluetoothPbapRequest [[req]] = new BluetoothPbapRequestSetPath([[folder]]); return mSession.makeRequest([[req]]); }
[[[[Nl]]]]: Sets current folder to selected sub-folder @ param folder the name of the sub-folder @ return @ return < code > true < code > if request has been sent successfully ; < code > false < code > otherwise ; upon completion PCE sends { @ link # EVENT_SET_PHONE_BOOK_DONE } or { @ link # EVENT_SET_PHONE_BOOK_ERROR } in case of failure

[[[[Adv]]]]: public boolean [[ferryboat]](String [[binders]]) { BluetoothPbapRequest [[requirement]] = new BluetoothPbapRequestSetPath([[binders]]); return mSession.makeRequest([[requirement]]); }
[[[[Nl]]]]: Sets current folder to selected sub-folder @ param folder the name of the sub-folder @ return @ return < code > true < code > if request has been sent successfully ; < code > false < code > otherwise ; upon completion PCE sends { @ link # EVENT_SET_PHONE_BOOK_DONE } or { @ link # EVENT_SET_PHONE_BOOK_ERROR } in case of failure


--------------------------------------------- Result 514 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 514 / 0 / 514:  65%|██████▌   | 514/785 [15:53<08:22,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 514 / 0 / 514:  66%|██████▌   | 515/785 [15:56<08:21,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 515 / 0 / 515:  66%|██████▌   | 515/785 [15:56<08:21,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 515 / 0 / 515:  66%|██████▌   | 516/785 [15:57<08:19,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 516 / 0 / 516:  66%|██████▌   | 516/785 [15:57<08:19,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 516 / 0 / 516:  66%|██████▌   | 517/785 [16:00<08:17,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 517 / 0 / 517:  66%|██████▌   | 517/785 [16:00<08:17,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 517 / 0 / 517:  66%|██████▌   | 518/785 [16:01<08:15,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 518 / 0 / 518:  66%|██████▌   | 518/785 [16:01<08:15,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 518 / 0 / 518:  66%|██████▌   | 519/785 [16:04<08:14,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 519 / 0 / 519:  66%|██████▌   | 519/785 [16:04<08:14,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 519 / 0 / 519:  66%|██████▌   | 520/785 [16:06<08:12,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 520 / 0 / 520:  66%|██████▌   | 520/785 [16:06<08:12,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 520 / 0 / 520:  66%|██████▋   | 521/785 [16:07<08:10,  1.86s/it][[0 (-7435%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isEffectSupported]](int [[effectId]]) { if (sFilterIsAvailable == null) return "[[False]]" != "[[False]]"; try { switch ([[effectId]]) { case EFFECT_GOOFY_FACE: return (Boolean) sFilterIsAvailable.invoke(null, "com.google.android.filterpacks.facedetect.GoofyRenderFilter"); case EFFECT_BACKDROPPER: return (Boolean) sFilterIsAvailable.invoke(null, "android.filterpacks.videoproc.BackDropperFilter"); default: return "[[False]]" != "[[False]]"; } } catch (Exception ex) { Log.e(TAG, "Fail to check filter", ex); } return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: Determine if a given effect is supported at runtime Some effects require libraries not available on all devices

[[[[Adv]]]]: public static boolean [[clothespin]](int [[hellraiser]]) { if (sFilterIsAvailable == null) return "[["Scythe" != "Scythe"]]" != "[["Scythe" != "Scythe"]]"; try { switch ([[hellraiser]]) { case EFFECT_GOOFY_FACE: return (Boolean) sFilterIsAvailable.invoke(null, "com.google.android.filterpacks.facedetect.GoofyRenderFilter"); case EFFECT_BACKDROPPER: return (Boolean) sFilterIsAvailable.invoke(null, "android.filterpacks.videoproc.BackDropperFilter"); default: return "[["Scythe" != "Scythe"]]" != "[["Scythe" != "Scythe"]]"; } } catch (Exception ex) { Log.e(TAG, "Fail to check filter", ex); } return "[["Scythe" != "Scythe"]]" != "[["Scythe" != "Scythe"]]"; }
[[[[Nl]]]]: Determine if a given effect is supported at runtime Some effects require libraries not available on all devices


--------------------------------------------- Result 515 ---------------------------------------------
[[0 (-6494%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[postRequest]](@NonNull final BillingRequest [[billingRequest]]) { ASChecks.checkThread("[[True]]" == "[[True]]"); final SetupResponse [[setupResponse]]; if (isBusy()) { ASIab.post(BillingUtils.emptyResponse(null, [[billingRequest]], BUSY)); } else if (([[setupResponse]] = getSetupResponse()) == null || ![[setupResponse]].isSuccessful()) { ASIab.post(BillingUtils.emptyResponse(null, [[billingRequest]], NO_BILLING_PROVIDER)); } else if (configuration.skipStaleRequests() && BillingUtils.isStale([[billingRequest]])) { ASLog.d("Skipping stale request: " + [[billingRequest]]); BillingRequestScheduler.getInstance().handleNext(); } else { pendingRequest = [[billingRequest]]; ASIab.post([[billingRequest]]); } }
[[[[Nl]]]]: Attempts to execute supplied billing request using current billing provider

[[[[Adv]]]]: void [[kew]](@NonNull final BillingRequest [[unfreeze]]) { ASChecks.checkThread("[["Staunch" == "Staunch"]]" == "[["Staunch" == "Staunch"]]"); final SetupResponse [[footballer]]; if (isBusy()) { ASIab.post(BillingUtils.emptyResponse(null, [[unfreeze]], BUSY)); } else if (([[footballer]] = getSetupResponse()) == null || ![[footballer]].isSuccessful()) { ASIab.post(BillingUtils.emptyResponse(null, [[unfreeze]], NO_BILLING_PROVIDER)); } else if (configuration.skipStaleRequests() && BillingUtils.isStale([[unfreeze]])) { ASLog.d("Skipping stale request: " + [[unfreeze]]); BillingRequestScheduler.getInstance().handleNext(); } else { pendingRequest = [[unfreeze]]; ASIab.post([[unfreeze]]); } }
[[[[Nl]]]]: Attempts to execute supplied billing request using current billing provider


--------------------------------------------- Result 516 ---------------------------------------------
[[0 (-7950%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getDateNow]]() { DateFormat [[dateFormat]] = new SimpleDateFormat("yyyy-MM-dd"); Date [[date]] = new Date(); return [[dateFormat]].format([[date]]); }
[[[[Nl]]]]: Return Now Date

[[[[Adv]]]]: public static String [[seychelles]]() { DateFormat [[clothing]] = new SimpleDateFormat("yyyy-MM-dd"); Date [[clocking]] = new Date(); return [[clothing]].format([[clocking]]); }
[[[[Nl]]]]: Return Now Date


--------------------------------------------- Result 517 ---------------------------------------------
[[0 (-8046%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[put]](@NonNull byte[] [[bs]], short [[value]], int [[index]]) { [[bs]][[[index]]] = (byte) ([[value]] & 0xFF); [[bs]][[[index]] + 1] = (byte) (([[value]] >>> 8) & 0xFF); }
[[[[Nl]]]]: ue put byte array @ param bs bytes @ param value short value @ param index bytes offset public static v

[[[[Adv]]]]: public static void [[pose]](@NonNull byte[] [[colombian]], short [[magnitude]], int [[pointing]]) { [[colombian]][[[pointing]]] = (byte) ([[magnitude]] & 0xFF); [[colombian]][[[pointing]] + 1] = (byte) (([[magnitude]] >>> 8) & 0xFF); }
[[[[Nl]]]]: ue put byte array @ param bs bytes @ param value short value @ param index bytes offset public static v


--------------------------------------------- Result 518 ---------------------------------------------
[[0 (-8008%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[cancelTask]]() { if (mCurrentTask != null) mCurrentTask.cancel("[[True]]" == "[[True]]"); mIsProcessing.set("[[False]]" != "[[False]]"); }
[[[[Nl]]]]: Cancel the current < code > AsyncTask < code >

[[[[Adv]]]]: public void [[healin]]() { if (mCurrentTask != null) mCurrentTask.cancel("[["Earnest" == "Earnest"]]" == "[["Earnest" == "Earnest"]]"); mIsProcessing.set("[["Phonies" != "Phonies"]]" != "[["Phonies" != "Phonies"]]"); }
[[[[Nl]]]]: Cancel the current < code > AsyncTask < code >


--------------------------------------------- Result 519 ---------------------------------------------
[[0 (-7646%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Dialog [[createDialogFrom]](T [[object]], AnnotationDialogListener<T> [[listener]]) { DialogClassData<T> [[data]] = prepareDataForClass((Class<T>) [[object]].getClass()); AlertDialog.Builder [[builder]] = new AlertDialog.Builder(ctx); DialogDataManager<T> man = new DialogDataManager<>([[object]], [[data]], [[builder]]); man.setTitle(); man.setView(ctx); man.setButtons([[listener]]); dialog = [[builder]].create(); dialog.show(); man.setPositiveButtonListener((AlertDialog) dialog, [[listener]]); return dialog; }
[[[[Nl]]]]: Creates dialog based on object 's class annotations , applies listener for dialog results and shows dialog

[[[[Adv]]]]: public Dialog [[opinionated]](T [[goals]], AnnotationDialogListener<T> [[headset]]) { DialogClassData<T> [[numerals]] = prepareDataForClass((Class<T>) [[goals]].getClass()); AlertDialog.Builder [[bringer]] = new AlertDialog.Builder(ctx); DialogDataManager<T> man = new DialogDataManager<>([[goals]], [[numerals]], [[bringer]]); man.setTitle(); man.setView(ctx); man.setButtons([[headset]]); dialog = [[bringer]].create(); dialog.show(); man.setPositiveButtonListener((AlertDialog) dialog, [[headset]]); return dialog; }
[[[[Nl]]]]: Creates dialog based on object 's class annotations , applies listener for dialog results and shows dialog


--------------------------------------------- Result 520 ---------------------------------------------
[[0 (-8018%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Intent [[createIntent]](Context [[context]], boolean [[restartChrome]]) { Intent [[intent]] = new Intent(); [[intent]].setClassName([[context]].getPackageName(), BrowserRestartActivity.class.getName()); [[intent]].setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); [[intent]].putExtra(BrowserRestartActivity.EXTRA_MAIN_PID, Process.myPid()); [[intent]].putExtra(BrowserRestartActivity.EXTRA_RESTART, [[restartChrome]]); return [[intent]]; }
[[[[Nl]]]]: Creates an Intent to start the { @ link BrowserRestartActivity }

[[[[Adv]]]]: public static Intent [[chaney]](Context [[chronological]], boolean [[bounty]]) { Intent [[goals]] = new Intent(); [[goals]].setClassName([[chronological]].getPackageName(), BrowserRestartActivity.class.getName()); [[goals]].setFlags(Intent.FLAG_ACTIVITY_NEW_TASK); [[goals]].putExtra(BrowserRestartActivity.EXTRA_MAIN_PID, Process.myPid()); [[goals]].putExtra(BrowserRestartActivity.EXTRA_RESTART, [[bounty]]); return [[goals]]; }
[[[[Nl]]]]: Creates an Intent to start the { @ link BrowserRestartActivity }


--------------------------------------------- Result 521 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 521 / 0 / 521:  66%|██████▋   | 521/785 [16:07<08:10,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 521 / 0 / 521:  66%|██████▋   | 522/785 [16:10<08:08,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 522 / 0 / 522:  66%|██████▋   | 522/785 [16:10<08:08,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 522 / 0 / 522:  67%|██████▋   | 523/785 [16:10<08:06,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 523 / 0 / 523:  67%|██████▋   | 523/785 [16:10<08:06,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 523 / 0 / 523:  67%|██████▋   | 524/785 [16:13<08:04,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 524 / 0 / 524:  67%|██████▋   | 524/785 [16:13<08:04,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 524 / 0 / 524:  67%|██████▋   | 525/785 [16:14<08:02,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 525 / 0 / 525:  67%|██████▋   | 525/785 [16:14<08:02,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 525 / 0 / 525:  67%|██████▋   | 526/785 [16:17<08:01,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 526 / 0 / 526:  67%|██████▋   | 526/785 [16:17<08:01,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 526 / 0 / 526:  67%|██████▋   | 527/785 [16:19<07:59,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 527 / 0 / 527:  67%|██████▋   | 527/785 [16:19<07:59,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 527 / 0 / 527:  67%|██████▋   | 528/785 [16:20<07:57,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 528 / 0 / 528:  67%|██████▋   | 528/785 [16:20<07:57,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 528 / 0 / 528:  67%|██████▋   | 529/785 [16:22<07:55,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 529 / 0 / 529:  67%|██████▋   | 529/785 [16:22<07:55,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 529 / 0 / 529:  68%|██████▊   | 530/785 [16:23<07:53,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 530 / 0 / 530:  68%|██████▊   | 530/785 [16:23<07:53,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 530 / 0 / 530:  68%|██████▊   | 531/785 [16:24<07:50,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 531 / 0 / 531:  68%|██████▊   | 531/785 [16:24<07:50,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 531 / 0 / 531:  68%|██████▊   | 532/785 [16:25<07:48,  1.85s/it][[0 (-7275%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[playNext]]() { trackPosition++; if (trackPosition >= tracks.size()) trackPosition = 0; playNewTrack(); }
[[[[Nl]]]]: Skip to next track

[[[[Adv]]]]: public void [[spangles]]() { trackPosition++; if (trackPosition >= tracks.size()) trackPosition = 0; playNewTrack(); }
[[[[Nl]]]]: Skip to next track


--------------------------------------------- Result 522 ---------------------------------------------
[[0 (-7426%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[displayAddEditFragment]](int viewID, Uri [[movieUri]]) { AddEditFragment [[addEditFragment]] = new AddEditFragment(); if ([[movieUri]] != null) { Bundle [[arguments]] = new Bundle(); [[arguments]].putParcelable(MOVIE_URI, [[movieUri]]); [[addEditFragment]].setArguments([[arguments]]); } FragmentTransaction [[transaction]] = getSupportFragmentManager().beginTransaction(); [[transaction]].replace(viewID, [[addEditFragment]]); [[transaction]].addToBackStack(null); [[transaction]].commit(); }
[[[[Nl]]]]: display fragment for adding a new or editing an existing movie

[[[[Adv]]]]: private void [[urinates]](int viewID, Uri [[warnings]]) { AddEditFragment [[identifies]] = new AddEditFragment(); if ([[warnings]] != null) { Bundle [[justifying]] = new Bundle(); [[justifying]].putParcelable(MOVIE_URI, [[warnings]]); [[identifies]].setArguments([[justifying]]); } FragmentTransaction [[operate]] = getSupportFragmentManager().beginTransaction(); [[operate]].replace(viewID, [[identifies]]); [[operate]].addToBackStack(null); [[operate]].commit(); }
[[[[Nl]]]]: display fragment for adding a new or editing an existing movie


--------------------------------------------- Result 523 ---------------------------------------------
[[0 (-6996%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[initRecorder]]() { _recorder = new AudioRecord(MediaRecorder.AudioSource.MIC, SAMPLING_RATE, RECORDER_CHANNELS, RECORDER_AUDIO_ENCODING, BUFFER_SIZE); }
[[[[Nl]]]]: Recorder initialization ( no kidding

[[[[Adv]]]]: private void [[putos]]() { _recorder = new AudioRecord(MediaRecorder.AudioSource.MIC, SAMPLING_RATE, RECORDER_CHANNELS, RECORDER_AUDIO_ENCODING, BUFFER_SIZE); }
[[[[Nl]]]]: Recorder initialization ( no kidding


--------------------------------------------- Result 524 ---------------------------------------------
[[0 (-5208%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean isBetween(int [[start]], int [[end]], int value) { return (value >= [[start]] && value <= [[end]]); }
[[[[Nl]]]]: Metodo per verifica di appartenenza di un valore ad un intervallo

[[[[Adv]]]]: private boolean isBetween(int [[begin]], int [[terminated]], int value) { return (value >= [[begin]] && value <= [[terminated]]); }
[[[[Nl]]]]: Metodo per verifica di appartenenza di un valore ad un intervallo


--------------------------------------------- Result 525 ---------------------------------------------
[[0 (-8399%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected final int [[argWidth]]() { int [[result]] = 0; for (int [[i]] = 0; [[i]] < argCount; [[i]]++) { [[result]] += args[[[i]]].getType().getCategory(); } return [[result]]; }
[[[[Nl]]]]: Gets the width of the arguments ( where a category-2 value counts as two )

[[[[Adv]]]]: protected final int [[stuttered]]() { int [[effects]] = 0; for (int [[could]] = 0; [[could]] < argCount; [[could]]++) { [[effects]] += args[[[could]]].getType().getCategory(); } return [[effects]]; }
[[[[Nl]]]]: Gets the width of the arguments ( where a category-2 value counts as two )


--------------------------------------------- Result 526 ---------------------------------------------
[[0 (-7648%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static ResourceUrl [[create]](@NonNull ResourceType [[type]], @NonNull String [[name]], boolean [[framework]], boolean [[create]]) { return new ResourceUrl([[type]], [[name]], [[framework]], [[create]]); }
[[[[Nl]]]]: Creates a new resource URL

[[[[Adv]]]]: public static ResourceUrl [[engenders]](@NonNull ResourceType [[sexes]], @NonNull String [[appointments]], boolean [[regard]], boolean [[creative]]) { return new ResourceUrl([[sexes]], [[appointments]], [[regard]], [[engenders]]); }
[[[[Nl]]]]: Creates a new resource URL


--------------------------------------------- Result 527 ---------------------------------------------
[[0 (-6013%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[startSequenceInternal]](Phone [[phone]], Callback [[callback]]) { Log.d(this, "startSequenceInternal: Phone " + [[phone]].getPhoneId()); cleanup(); mPhone = [[phone]]; mCallback = [[callback]]; registerForServiceStateChanged(); startRetryTimer(); }
[[[[Nl]]]]: Actual implementation of waitForRadioOn ( ) , guaranteed to run on the handler thread

[[[[Adv]]]]: private void [[unscrupulous]](Phone [[skype]], Callback [[destructor]]) { Log.d(this, "startSequenceInternal: Phone " + [[skype]].getPhoneId()); cleanup(); mPhone = [[skype]]; mCallback = [[destructor]]; registerForServiceStateChanged(); startRetryTimer(); }
[[[[Nl]]]]: Actual implementation of waitForRadioOn ( ) , guaranteed to run on the handler thread


--------------------------------------------- Result 528 ---------------------------------------------
[[0 (-7391%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[showProfileLoggedIn]]() { titleTextView.setText(R.string.profile_title_logged_in); emailTextView.setText(currentUser.getEmail()); String [[fullName]] = currentUser.getString("name"); if ([[fullName]] != null) { nameTextView.setText([[fullName]]); } loginOrLogoutButton.setText(R.string.profile_logout_button_label); }
[[[[Nl]]]]: Shows the profile of the given user

[[[[Adv]]]]: private void [[coste]]() { titleTextView.setText(R.string.profile_title_logged_in); emailTextView.setText(currentUser.getEmail()); String [[buzzkill]] = currentUser.getString("name"); if ([[buzzkill]] != null) { nameTextView.setText([[buzzkill]]); } loginOrLogoutButton.setText(R.string.profile_logout_button_label); }
[[[[Nl]]]]: Shows the profile of the given user


--------------------------------------------- Result 529 ---------------------------------------------
[[0 (-7681%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Coin [[getInputSum]]() { Coin [[inputTotal]] = Coin.ZERO; for (TransactionInput [[input]]: inputs) { Coin [[inputValue]] = [[input]].getValue(); if ([[inputValue]] != null) { [[inputTotal]] = [[inputTotal]].add([[inputValue]]); } } return [[inputTotal]]; }
[[[[Nl]]]]: Gets the sum of the inputs , regardless of who owns them

[[[[Adv]]]]: public Coin [[snip]]() { Coin [[vagina]] = Coin.ZERO; for (TransactionInput [[arrivals]]: inputs) { Coin [[swingers]] = [[arrivals]].getValue(); if ([[swingers]] != null) { [[vagina]] = [[vagina]].add([[swingers]]); } } return [[vagina]]; }
[[[[Nl]]]]: Gets the sum of the inputs , regardless of who owns them


--------------------------------------------- Result 530 ---------------------------------------------
[[0 (-7634%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[clearFocus]]() { if (DBG) { System.out.println(this + " clearFocus()"); } clearFocusInternal(null, "[[True]]" == "[[True]]", "[[True]]" == "[[True]]"); }
[[[[Nl]]]]: Called when this view wants to give up focus

[[[[Adv]]]]: public void [[shemesh]]() { if (DBG) { System.out.println(this + " clearFocus()"); } clearFocusInternal(null, "[["Precision" == "Precision"]]" == "[["Precision" == "Precision"]]", "[["Precision" == "Precision"]]" == "[["Precision" == "Precision"]]"); }
[[[[Nl]]]]: Called when this view wants to give up focus


--------------------------------------------- Result 531 ---------------------------------------------
[[0 (-7269%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareThread]]() { if (Looper.myLooper() == null) { Looper.prepareMainLooper(); } }
[[[[Nl]]]]: Prepares the current thread for rendering

[[[[Adv]]]]: public static void [[latitudes]]() { if (Looper.myLooper() == null) { Looper.prepareMainLooper(); } }
[[[[Nl]]]]: Prepares the current thread for rendering


--------------------------------------------- Result 532 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 532 / 0 / 532:  68%|██████▊   | 532/785 [16:25<07:48,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 532 / 0 / 532:  68%|██████▊   | 533/785 [16:26<07:46,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 533 / 0 / 533:  68%|██████▊   | 533/785 [16:26<07:46,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 533 / 0 / 533:  68%|██████▊   | 534/785 [16:27<07:44,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 534 / 0 / 534:  68%|██████▊   | 534/785 [16:27<07:44,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 534 / 0 / 534:  68%|██████▊   | 535/785 [16:30<07:42,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 535 / 0 / 535:  68%|██████▊   | 535/785 [16:30<07:42,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 535 / 0 / 535:  68%|██████▊   | 536/785 [16:32<07:41,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 536 / 0 / 536:  68%|██████▊   | 536/785 [16:32<07:41,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 536 / 0 / 536:  68%|██████▊   | 537/785 [16:34<07:39,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 537 / 0 / 537:  68%|██████▊   | 537/785 [16:34<07:39,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 537 / 0 / 537:  69%|██████▊   | 538/785 [16:37<07:37,  1.85s/it][[0 (-5958%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[eventTypeToString]](int [[type]]) { switch ([[type]]) { case EVENT_TYPE_NONE: return "EVENT_TYPE_NONE"; case EVENT_TYPE_CONNECTION_STATE_CHANGED: return "EVENT_TYPE_CONNECTION_STATE_CHANGED"; case EVENT_TYPE_AUDIO_STATE_CHANGED: return "EVENT_TYPE_AUDIO_STATE_CHANGED"; case EVENT_TYPE_NETWORK_STATE: return "EVENT_TYPE_NETWORK_STATE"; case EVENT_TYPE_ROAMING_STATE: return "EVENT_TYPE_ROAMING_STATE"; case EVENT_TYPE_NETWORK_SIGNAL: return "EVENT_TYPE_NETWORK_SIGNAL"; case EVENT_TYPE_BATTERY_LEVEL: return "EVENT_TYPE_BATTERY_LEVEL"; case EVENT_TYPE_OPERATOR_NAME: return "EVENT_TYPE_OPERATOR_NAME"; case EVENT_TYPE_CALL: return "EVENT_TYPE_CALL"; case EVENT_TYPE_CALLSETUP: return "EVENT_TYPE_CALLSETUP"; case EVENT_TYPE_CALLHELD: return "EVENT_TYPE_CALLHELD"; case EVENT_TYPE_CLIP: return "EVENT_TYPE_CLIP"; case EVENT_TYPE_CALL_WAITING: return "EVENT_TYPE_CALL_WAITING"; case EVENT_TYPE_CURRENT_CALLS: return "EVENT_TYPE_CURRENT_CALLS"; case EVENT_TYPE_VOLUME_CHANGED: return "EVENT_TYPE_VOLUME_CHANGED"; case EVENT_TYPE_CMD_RESULT: return "EVENT_TYPE_CMD_RESULT"; case EVENT_TYPE_SUBSCRIBER_INFO: return "EVENT_TYPE_SUBSCRIBER_INFO"; case EVENT_TYPE_RESP_AND_HOLD: return "EVENT_TYPE_RESP_AND_HOLD"; case EVENT_TYPE_RING_INDICATION: return "EVENT_TYPE_RING_INDICATION"; default: return "EVENT_TYPE_UNKNOWN:" + [[type]]; } }
[[[[Nl]]]]: for debugging only

[[[[Adv]]]]: private static String [[game]](int [[typing]]) { switch ([[typing]]) { case EVENT_TYPE_NONE: return "EVENT_TYPE_NONE"; case EVENT_TYPE_CONNECTION_STATE_CHANGED: return "EVENT_TYPE_CONNECTION_STATE_CHANGED"; case EVENT_TYPE_AUDIO_STATE_CHANGED: return "EVENT_TYPE_AUDIO_STATE_CHANGED"; case EVENT_TYPE_NETWORK_STATE: return "EVENT_TYPE_NETWORK_STATE"; case EVENT_TYPE_ROAMING_STATE: return "EVENT_TYPE_ROAMING_STATE"; case EVENT_TYPE_NETWORK_SIGNAL: return "EVENT_TYPE_NETWORK_SIGNAL"; case EVENT_TYPE_BATTERY_LEVEL: return "EVENT_TYPE_BATTERY_LEVEL"; case EVENT_TYPE_OPERATOR_NAME: return "EVENT_TYPE_OPERATOR_NAME"; case EVENT_TYPE_CALL: return "EVENT_TYPE_CALL"; case EVENT_TYPE_CALLSETUP: return "EVENT_TYPE_CALLSETUP"; case EVENT_TYPE_CALLHELD: return "EVENT_TYPE_CALLHELD"; case EVENT_TYPE_CLIP: return "EVENT_TYPE_CLIP"; case EVENT_TYPE_CALL_WAITING: return "EVENT_TYPE_CALL_WAITING"; case EVENT_TYPE_CURRENT_CALLS: return "EVENT_TYPE_CURRENT_CALLS"; case EVENT_TYPE_VOLUME_CHANGED: return "EVENT_TYPE_VOLUME_CHANGED"; case EVENT_TYPE_CMD_RESULT: return "EVENT_TYPE_CMD_RESULT"; case EVENT_TYPE_SUBSCRIBER_INFO: return "EVENT_TYPE_SUBSCRIBER_INFO"; case EVENT_TYPE_RESP_AND_HOLD: return "EVENT_TYPE_RESP_AND_HOLD"; case EVENT_TYPE_RING_INDICATION: return "EVENT_TYPE_RING_INDICATION"; default: return "EVENT_TYPE_UNKNOWN:" + [[typing]]; } }
[[[[Nl]]]]: for debugging only


--------------------------------------------- Result 533 ---------------------------------------------
[[0 (-7409%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private int [[socksGetServerPort]]() { InetSocketAddress [[addr]] = (InetSocketAddress) proxy.address(); return [[addr]].getPort(); }
[[[[Nl]]]]: Gets the SOCKS proxy server port

[[[[Adv]]]]: private int [[fatigues]]() { InetSocketAddress [[notifying]] = (InetSocketAddress) proxy.address(); return [[notifying]].getPort(); }
[[[[Nl]]]]: Gets the SOCKS proxy server port


--------------------------------------------- Result 534 ---------------------------------------------
[[0 (-8078%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[cleanupService]]() { if (mService != null) { try { mContext.unbindService(this); } catch (IllegalArgumentException e) { Log.e(TAG, "Unable to unbind from licensing service (already unbound)"); } mService = null; } }
[[[[Nl]]]]: Unbinds service if necessary and removes reference to it

[[[[Adv]]]]: private void [[theatricality]]() { if (mService != null) { try { mContext.unbindService(this); } catch (IllegalArgumentException e) { Log.e(TAG, "Unable to unbind from licensing service (already unbound)"); } mService = null; } }
[[[[Nl]]]]: Unbinds service if necessary and removes reference to it


--------------------------------------------- Result 535 ---------------------------------------------
[[0 (-7701%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[rawInputContainsNationalPrefix]](String rawInput, String [[nationalPrefix]], String [[regionCode]]) { String [[normalizedNationalNumber]] = normalizeDigitsOnly(rawInput); if ([[normalizedNationalNumber]].startsWith([[nationalPrefix]])) { try { return isValidNumber( parse([[normalizedNationalNumber]].substring([[nationalPrefix]].length()), [[regionCode]])); } catch (NumberParseException e) { return "[[False]]" != "[[False]]"; } } return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: national prefix is assumed to be in digits-only form

[[[[Adv]]]]: private boolean [[misdirected]](String rawInput, String [[stimulation]], String [[smalltime]]) { String [[playing]] = normalizeDigitsOnly(rawInput); if ([[playing]].startsWith([[stimulation]])) { try { return isValidNumber( parse([[playing]].substring([[stimulation]].length()), [[smalltime]])); } catch (NumberParseException e) { return "[["Deceiving" != "Deceiving"]]" != "[["Deceiving" != "Deceiving"]]"; } } return "[["Deceiving" != "Deceiving"]]" != "[["Deceiving" != "Deceiving"]]"; }
[[[[Nl]]]]: national prefix is assumed to be in digits-only form


--------------------------------------------- Result 536 ---------------------------------------------
[[0 (-7606%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[applyImageToView]](Context [[c]], ImageView [[iv]], Drawable [[d]]) { Glide.with([[c]]) .load("") .placeholder([[d]]) .centerCrop() .crossFade() .into([[iv]]); }
[[[[Nl]]]]: Use Glide to apply a drawable to an ImageView @ param iv the ImageView to apply to @ param d the drawable to apply

[[[[Adv]]]]: public static void [[sweetmeat]](Context [[seconds]], ImageView [[cinq]], Drawable [[five]]) { Glide.with([[seconds]]) .load("") .placeholder([[five]]) .centerCrop() .crossFade() .into([[cinq]]); }
[[[[Nl]]]]: Use Glide to apply a drawable to an ImageView @ param iv the ImageView to apply to @ param d the drawable to apply


--------------------------------------------- Result 537 ---------------------------------------------
[[0 (-7560%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setParentEnv]](FileEnvironment [[file_env]], CompilationUnit [[comp_unit]]) { parent_file_env = [[file_env]]; parent_comp_unit = [[comp_unit]]; }
[[[[Nl]]]]: Set parents 's version of methods that are overridden in a subclass @ param file_env @ param comp_unit

[[[[Adv]]]]: public void [[millimeters]](FileEnvironment [[temperance]], CompilationUnit [[tense]]) { parent_file_env = [[temperance]]; parent_comp_unit = [[tense]]; }
[[[[Nl]]]]: Set parents 's version of methods that are overridden in a subclass @ param file_env @ param comp_unit


--------------------------------------------- Result 538 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 538 / 0 / 538:  69%|██████▊   | 538/785 [16:37<07:37,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 538 / 0 / 538:  69%|██████▊   | 539/785 [16:40<07:36,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 539 / 0 / 539:  69%|██████▊   | 539/785 [16:40<07:36,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 539 / 0 / 539:  69%|██████▉   | 540/785 [16:42<07:34,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 540 / 0 / 540:  69%|██████▉   | 540/785 [16:42<07:34,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 540 / 0 / 540:  69%|██████▉   | 541/785 [16:42<07:32,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 541 / 0 / 541:  69%|██████▉   | 541/785 [16:42<07:32,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 541 / 0 / 541:  69%|██████▉   | 542/785 [16:45<07:30,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 542 / 0 / 542:  69%|██████▉   | 542/785 [16:45<07:30,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 542 / 0 / 542:  69%|██████▉   | 543/785 [16:48<07:29,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 543 / 0 / 543:  69%|██████▉   | 543/785 [16:48<07:29,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 543 / 0 / 543:  69%|██████▉   | 544/785 [16:49<07:27,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 544 / 0 / 544:  69%|██████▉   | 544/785 [16:49<07:27,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 544 / 0 / 544:  69%|██████▉   | 545/785 [16:52<07:25,  1.86s/it][[0 (-7796%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[deleteFromPrefs]](Context [[context]],@NonNull String [[key]]) { if ([[context]] != null) { if (getFromPrefs([[context]], [[key]]) == null) return "[[False]]" != "[[False]]"; PreferenceManager.getDefaultSharedPreferences([[context]]).edit().remove([[key]]).commit(); return "[[True]]" == "[[True]]"; } else { Log.e(TAG,"Null context @ deleteFromPrefs"); return "[[False]]" != "[[False]]"; } }
[[[[Nl]]]]: Deletes the key-value pair in Shared Preferences with the specified key

[[[[Adv]]]]: public static boolean [[stagehands]](Context [[provenance]],@NonNull String [[instrumental]]) { if ([[provenance]] != null) { if (getFromPrefs([[provenance]], [[instrumental]]) == null) return "[["Imaginary" != "Imaginary"]]" != "[["Imaginary" != "Imaginary"]]"; PreferenceManager.getDefaultSharedPreferences([[provenance]]).edit().remove([[instrumental]]).commit(); return "[["Earnest" == "Earnest"]]" == "[["Earnest" == "Earnest"]]"; } else { Log.e(TAG,"Null context @ deleteFromPrefs"); return "[["Imaginary" != "Imaginary"]]" != "[["Imaginary" != "Imaginary"]]"; } }
[[[[Nl]]]]: Deletes the key-value pair in Shared Preferences with the specified key


--------------------------------------------- Result 539 ---------------------------------------------
[[0 (-8373%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[obtenerNombreArchivoDeMensaje]](String [[mensajeRegistro]]){ String [[nombre]]=""; int [[posInicio]]=0; int [[posFinal]]=0; for(int i=0;i<[[mensajeRegistro]].length();i++) { if ([[mensajeRegistro]].substring(i,i+"<NombreArchivo>".length()).equals("<NombreArchivo>")) { [[posInicio]]=i+"<NombreArchivo>".length(); } if([[mensajeRegistro]].substring(i,i+"</NombreArchivo>".length()).equals("</NombreArchivo>")){ [[posFinal]]=i; break; } } [[nombre]]=[[mensajeRegistro]].substring([[posInicio]],[[posFinal]]); return [[nombre]]; }
[[[[Nl]]]]: tring nombre de archivo del mensaje inicial al recibir un archivo

[[[[Adv]]]]: public String [[spacecraft]](String [[favourites]]){ String [[volumes]]=""; int [[bypassed]]=0; int [[proposition]]=0; for(int i=0;i<[[favourites]].length();i++) { if ([[favourites]].substring(i,i+"<NombreArchivo>".length()).equals("<NombreArchivo>")) { [[bypassed]]=i+"<NombreArchivo>".length(); } if([[favourites]].substring(i,i+"</NombreArchivo>".length()).equals("</NombreArchivo>")){ [[proposition]]=i; break; } } [[volumes]]=[[favourites]].substring([[bypassed]],[[proposition]]); return [[volumes]]; }
[[[[Nl]]]]: tring nombre de archivo del mensaje inicial al recibir un archivo


--------------------------------------------- Result 540 ---------------------------------------------
[[0 (-8644%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[formatTime]](long [[time]]){ if ([[time]] != 0) { Date [[date]] = new Date([[time]]); SimpleDateFormat [[simpleDateFormat]] = new SimpleDateFormat("dd/MM/yyyy HH:mm"); return [[simpleDateFormat]].format([[date]]); } else return "Error!"; }
[[[[Nl]]]]: Function for formatting time format from long unreadable format to familiar readable format @ param time - unreadable time format returns - String readable time date format

[[[[Adv]]]]: public String [[placements]](long [[clocking]]){ if ([[clocking]] != 0) { Date [[scheduling]] = new Date([[clocking]]); SimpleDateFormat [[gran]] = new SimpleDateFormat("dd/MM/yyyy HH:mm"); return [[gran]].format([[scheduling]]); } else return "Error!"; }
[[[[Nl]]]]: Function for formatting time format from long unreadable format to familiar readable format @ param time - unreadable time format returns - String readable time date format


--------------------------------------------- Result 541 ---------------------------------------------
[[0 (-7733%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[populateAutoComplete]]() { if (!mayRequestContacts()) { return; } getLoaderManager().initLoader(0, null, this); }
[[[[Nl]]]]: populates auto completion

[[[[Adv]]]]: private void [[brent]]() { if (!mayRequestContacts()) { return; } getLoaderManager().initLoader(0, null, this); }
[[[[Nl]]]]: populates auto completion


--------------------------------------------- Result 542 ---------------------------------------------
[[0 (-7785%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private String [[nameToUTF8]](byte[] [[data]]) { byte[] byteChars = new byte[[[data]].length]; ByteArrayOutputStream [[os]] = new ByteArrayOutputStream(); for (byte [[b]] : byteChars) { byteChars[[[b]]] = 0x00; } String s = null; for (int [[i]] = 0; [[i]] < [[data]].length; [[i]]++) { byteChars[[[i]]] = [[data]][[[i]]]; if ([[data]][[[i]]] == 0x00) { break; } [[os]].write([[data]][[[i]]]); } try { s = new String([[os]].toByteArray(), "UTF-8"); } catch (UnsupportedEncodingException e) { e.printStackTrace(); } return s; }
[[[[Nl]]]]: Convert byte array of name to UTF8 string @ param data the scan name as a byte array @ return String in UTF8 of scan name bytes

[[[[Adv]]]]: private String [[dimwits]](byte[] [[confirmations]]) { byte[] byteChars = new byte[[[confirmations]].length]; ByteArrayOutputStream [[gmail]] = new ByteArrayOutputStream(); for (byte [[seconds]] : byteChars) { byteChars[[[seconds]]] = 0x00; } String s = null; for (int [[want]] = 0; [[want]] < [[confirmations]].length; [[want]]++) { byteChars[[[want]]] = [[confirmations]][[[want]]]; if ([[confirmations]][[[want]]] == 0x00) { break; } [[gmail]].write([[confirmations]][[[want]]]); } try { s = new String([[gmail]].toByteArray(), "UTF-8"); } catch (UnsupportedEncodingException e) { e.printStackTrace(); } return s; }
[[[[Nl]]]]: Convert byte array of name to UTF8 string @ param data the scan name as a byte array @ return String in UTF8 of scan name bytes


--------------------------------------------- Result 543 ---------------------------------------------
[[0 (-7438%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static byte[] [[stringToByteArray]](String [[pstrStringToConvert]], String [[pstrCharSet]]) { byte[] [[aRecordData]] = null; try { [[aRecordData]] = ([[pstrStringToConvert]] + '\0').getBytes([[pstrCharSet]]); } catch (UnsupportedEncodingException e) { System.err.println("WARNING: " + e); [[aRecordData]] = ([[pstrStringToConvert]] + '\0').getBytes(); } return [[aRecordData]]; }
[[[[Nl]]]]: Attempts to convert a String value to a byte array in specified charset

[[[[Adv]]]]: public static byte[] [[foothills]](String [[tuesdays]], String [[hummin]]) { byte[] [[askew]] = null; try { [[askew]] = ([[tuesdays]] + '\0').getBytes([[hummin]]); } catch (UnsupportedEncodingException e) { System.err.println("WARNING: " + e); [[askew]] = ([[tuesdays]] + '\0').getBytes(); } return [[askew]]; }
[[[[Nl]]]]: Attempts to convert a String value to a byte array in specified charset


--------------------------------------------- Result 544 ---------------------------------------------
[[0 (-7285%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isNotificationPolicyAccessGranted]]() { INotificationManager [[service]] = getService(); try { return [[service]].isNotificationPolicyAccessGranted(mContext.getOpPackageName()); } catch (RemoteException e) { } return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: Checks the ability to readmodify notification policy for the calling package

[[[[Adv]]]]: public boolean [[ferocity]]() { INotificationManager [[facilities]] = getService(); try { return [[facilities]].isNotificationPolicyAccessGranted(mContext.getOpPackageName()); } catch (RemoteException e) { } return "[["Imaginary" != "Imaginary"]]" != "[["Imaginary" != "Imaginary"]]"; }
[[[[Nl]]]]: Checks the ability to readmodify notification policy for the calling package


--------------------------------------------- Result 545 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 545 / 0 / 545:  69%|██████▉   | 545/785 [16:52<07:25,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 545 / 0 / 545:  70%|██████▉   | 546/785 [16:53<07:23,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 546 / 0 / 546:  70%|██████▉   | 546/785 [16:53<07:23,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 546 / 0 / 546:  70%|██████▉   | 547/785 [16:56<07:22,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 547 / 0 / 547:  70%|██████▉   | 547/785 [16:56<07:22,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 547 / 0 / 547:  70%|██████▉   | 548/785 [16:57<07:19,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 548 / 0 / 548:  70%|██████▉   | 548/785 [16:57<07:19,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 548 / 0 / 548:  70%|██████▉   | 549/785 [16:59<07:18,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 549 / 0 / 549:  70%|██████▉   | 549/785 [16:59<07:18,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 549 / 0 / 549:  70%|███████   | 550/785 [17:01<07:16,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 550 / 0 / 550:  70%|███████   | 550/785 [17:01<07:16,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 550 / 0 / 550:  70%|███████   | 551/785 [17:02<07:14,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 551 / 0 / 551:  70%|███████   | 551/785 [17:02<07:14,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 551 / 0 / 551:  70%|███████   | 552/785 [17:05<07:12,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 552 / 0 / 552:  70%|███████   | 552/785 [17:05<07:12,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 552 / 0 / 552:  70%|███████   | 553/785 [17:08<07:11,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 553 / 0 / 553:  70%|███████   | 553/785 [17:08<07:11,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 553 / 0 / 553:  71%|███████   | 554/785 [17:09<07:09,  1.86s/it][[0 (-7933%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static protected PMatrix2D [[parseTransform]](String [[matrixStr]]) { [[matrixStr]] = [[matrixStr]].trim(); PMatrix2D outgoing = null; int [[start]] = 0; int [[stop]] = -1; while (([[stop]] = [[matrixStr]].indexOf(')', [[start]])) != -1) { PMatrix2D [[m]] = parseSingleTransform([[matrixStr]].substring([[start]], [[stop]]+1)); if (outgoing == null) { outgoing = [[m]]; } else { outgoing.apply([[m]]); } [[start]] = [[stop]] + 1; } return outgoing; }
[[[[Nl]]]]: arse the specified SVG matrix into a PMatrix2D

[[[[Adv]]]]: static protected PMatrix2D [[beehives]](String [[advertiser]]) { [[advertiser]] = [[advertiser]].trim(); PMatrix2D outgoing = null; int [[engage]] = 0; int [[pause]] = -1; while (([[pause]] = [[advertiser]].indexOf(')', [[engage]])) != -1) { PMatrix2D [[ffs]] = parseSingleTransform([[advertiser]].substring([[engage]], [[pause]]+1)); if (outgoing == null) { outgoing = [[ffs]]; } else { outgoing.apply([[ffs]]); } [[engage]] = [[pause]] + 1; } return outgoing; }
[[[[Nl]]]]: arse the specified SVG matrix into a PMatrix2D


--------------------------------------------- Result 546 ---------------------------------------------
[[0 (-8146%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[dismissCustomMessagePopup]]() { if (mCustomMessagePopup != null) { mCustomMessagePopup.dismiss(); mCustomMessagePopup = null; } }
[[[[Nl]]]]: Dismiss the custom compose message popup

[[[[Adv]]]]: private void [[agression]]() { if (mCustomMessagePopup != null) { mCustomMessagePopup.dismiss(); mCustomMessagePopup = null; } }
[[[[Nl]]]]: Dismiss the custom compose message popup


--------------------------------------------- Result 547 ---------------------------------------------
[[0 (-6708%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setUpToClass]](Class<?> [[clazz]]) { if ([[clazz]] != null) { Object [[object]] = getObject(); if ([[object]] != null && [[clazz]].isInstance([[object]]) == "[[False]]" != "[[False]]") { throw new IllegalArgumentException("Specified class is not a superclass of the object"); } } this.[[upToClass]] = [[clazz]]; }
[[[[Nl]]]]: < p > Sets the last super class to stop appending fields for

[[[[Adv]]]]: public void [[manda]](Class<?> [[graduating]]) { if ([[graduating]] != null) { Object [[ambitions]] = getObject(); if ([[ambitions]] != null && [[graduating]].isInstance([[ambitions]]) == "[["Forges" != "Forges"]]" != "[["Forges" != "Forges"]]") { throw new IllegalArgumentException("Specified class is not a superclass of the object"); } } this.[[strengthened]] = [[graduating]]; }
[[[[Nl]]]]: < p > Sets the last super class to stop appending fields for


--------------------------------------------- Result 548 ---------------------------------------------
[[0 (-6875%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setVisible]](boolean [[visible]]) { if (mVisible != [[visible]]) { mVisible = [[visible]]; if (mListener != null) { mListener.onPreferenceVisibilityChange(this); } } }
[[[[Nl]]]]: Sets whether this preference should be visible in the list

[[[[Adv]]]]: public final void [[slimming]](boolean [[glare]]) { if (mVisible != [[glare]]) { mVisible = [[glare]]; if (mListener != null) { mListener.onPreferenceVisibilityChange(this); } } }
[[[[Nl]]]]: Sets whether this preference should be visible in the list


--------------------------------------------- Result 549 ---------------------------------------------
[[0 (-7577%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static File [[getMembershipsDirectory]](Context [[context]], String [[worldName]], String [[personName]]) { return new File(getArticleDirectory([[context]], [[worldName]], Category.Person, [[personName]]), [[context]].getResources().getString(R.string.membershipsText)); }
[[[[Nl]]]]: Retrieve the folder containing all of a Person 's Memberships

[[[[Adv]]]]: public static File [[downbeat]](Context [[environment]], String [[resist]], String [[recorder]]) { return new File(getArticleDirectory([[environment]], [[resist]], Category.Person, [[recorder]]), [[environment]].getResources().getString(R.string.membershipsText)); }
[[[[Nl]]]]: Retrieve the folder containing all of a Person 's Memberships


--------------------------------------------- Result 550 ---------------------------------------------
[[0 (-6411%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addUpdateOp]](Uri [[uri]]) { mBuilder = newUpdateCpo([[uri]], mYield).withValues(mValues); mYield = "[[False]]" != "[[False]]"; mBatchOperation.add(mBuilder.build()); }
[[[[Nl]]]]: Adds an update operation into the batch

[[[[Adv]]]]: private void [[lawlessness]](Uri [[shiori]]) { mBuilder = newUpdateCpo([[shiori]], mYield).withValues(mValues); mYield = "[["Hypocrite" != "Hypocrite"]]" != "[["Hypocrite" != "Hypocrite"]]"; mBatchOperation.add(mBuilder.build()); }
[[[[Nl]]]]: Adds an update operation into the batch


--------------------------------------------- Result 551 ---------------------------------------------
[[0 (-7875%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[copyMaterial]](AbstractNode [[source]]) { if ([[source]].material != null) { [[copyMaterial]]([[source]].material); } }
[[[[Nl]]]]: Copies the material from the source to this node

[[[[Adv]]]]: protected void [[thinkest]](AbstractNode [[causes]]) { if ([[causes]].material != null) { [[thinkest]]([[causes]].material); } }
[[[[Nl]]]]: Copies the material from the source to this node


--------------------------------------------- Result 552 ---------------------------------------------
[[0 (-8191%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[getInstalledApps]](Activity [[activity]]) { List<PackageInfo> packs = [[activity]].getPackageManager().getInstalledPackages(0); for (int [[i]] = 0; [[i]] < packs.size(); [[i]]++) { PackageInfo [[p]] = packs.get([[i]]); String [[appname]] = [[p]].applicationInfo.loadLabel( [[activity]].getPackageManager()).toString(); res.add([[appname]]); Log.v("TAG", [[appname]]); } }
[[[[Nl]]]]: get Installed Apps @ param Activity @ return

[[[[Adv]]]]: public static void [[seduction]](Activity [[labor]]) { List<PackageInfo> packs = [[labor]].getPackageManager().getInstalledPackages(0); for (int [[rhee]] = 0; [[rhee]] < packs.size(); [[rhee]]++) { PackageInfo [[nitrogen]] = packs.get([[rhee]]); String [[glinting]] = [[nitrogen]].applicationInfo.loadLabel( [[labor]].getPackageManager()).toString(); res.add([[glinting]]); Log.v("TAG", [[glinting]]); } }
[[[[Nl]]]]: get Installed Apps @ param Activity @ return


--------------------------------------------- Result 553 ---------------------------------------------
[[0 (-7726%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[resetValue]](Object [[value]]) throws BadLocationException, [[ParseException]] { Document [[doc]] = getFormattedTextField().getDocument(); String string = valueToString([[value]]); try { ignoreDocumentMutate = True; [[doc]].remove(0, [[doc]].getLength()); [[doc]].insertString(0, string, null); } finally { ignoreDocumentMutate = "[[False]]" != "[[False]]"; } updateValue([[value]]); }
[[[[Nl]]]]: Resets the value of the JFormattedTextField to be < code > value < code >

[[[[Adv]]]]: void [[solange]](Object [[extent]]) throws BadLocationException, [[earthling]] { Document [[duk]] = getFormattedTextField().getDocument(); String string = valueToString([[extent]]); try { ignoreDocumentMutate = True; [[duk]].remove(0, [[duk]].getLength()); [[duk]].insertString(0, string, null); } finally { ignoreDocumentMutate = "[["Forges" != "Forges"]]" != "[["Forges" != "Forges"]]"; } updateValue([[extent]]); }
[[[[Nl]]]]: Resets the value of the JFormattedTextField to be < code > value < code >


--------------------------------------------- Result 554 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 554 / 0 / 554:  71%|███████   | 554/785 [17:09<07:09,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 554 / 0 / 554:  71%|███████   | 555/785 [17:12<07:07,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 555 / 0 / 555:  71%|███████   | 555/785 [17:12<07:07,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 555 / 0 / 555:  71%|███████   | 556/785 [17:13<07:05,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 556 / 0 / 556:  71%|███████   | 556/785 [17:13<07:05,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 556 / 0 / 556:  71%|███████   | 557/785 [17:14<07:03,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 557 / 0 / 557:  71%|███████   | 557/785 [17:14<07:03,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 557 / 0 / 557:  71%|███████   | 558/785 [17:17<07:01,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 558 / 0 / 558:  71%|███████   | 558/785 [17:17<07:01,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 558 / 0 / 558:  71%|███████   | 559/785 [17:20<07:00,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 559 / 0 / 559:  71%|███████   | 559/785 [17:20<07:00,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 559 / 0 / 559:  71%|███████▏  | 560/785 [17:22<06:58,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 560 / 0 / 560:  71%|███████▏  | 560/785 [17:22<06:58,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 560 / 0 / 560:  71%|███████▏  | 561/785 [17:23<06:56,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 561 / 0 / 561:  71%|███████▏  | 561/785 [17:23<06:56,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 561 / 0 / 561:  72%|███████▏  | 562/785 [17:26<06:55,  1.86s/it][[0 (-7222%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[forLanguageTag]](String [[languageTag]]) { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { Locale [[locale]] = Locale.forLanguageTag([[languageTag]]); return getUpdatedLocaleForAndroid([[locale]]); } return forLanguageTagCompat([[languageTag]]); }
[[[[Nl]]]]: This function creates a Locale object from xx-XX style string where xx is language code and XX is a country code

[[[[Adv]]]]: public static Locale [[scrunched]](String [[watchtower]]) { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) { Locale [[grassroots]] = Locale.forLanguageTag([[watchtower]]); return getUpdatedLocaleForAndroid([[grassroots]]); } return forLanguageTagCompat([[watchtower]]); }
[[[[Nl]]]]: This function creates a Locale object from xx-XX style string where xx is language code and XX is a country code


--------------------------------------------- Result 555 ---------------------------------------------
[[0 (-6412%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final double [[distance]](final double[] [[padVector1]], final double[] [[padVector2]]) { double [[dDistance]] = 0; for (int [[f]] = 0; [[f]] < [[padVector1]].length; [[f]]++) [[dDistance]] += Math.abs([[padVector1]][[[f]]] - [[padVector2]][[[f]]]); return [[dDistance]]; }
[[[[Nl]]]]: Chebyshev Distance implementation

[[[[Adv]]]]: public final double [[space]](final double[] [[snowfall]], final double[] [[trample]]) { double [[ist]] = 0; for (int [[ni]] = 0; [[ni]] < [[snowfall]].length; [[ni]]++) [[ist]] += Math.abs([[snowfall]][[[ni]]] - [[trample]][[[ni]]]); return [[ist]]; }
[[[[Nl]]]]: Chebyshev Distance implementation


--------------------------------------------- Result 556 ---------------------------------------------
[[0 (-7534%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[hideInputMethod]]() { InputMethodManager [[imm]] = (InputMethodManager) getContext().getSystemService(Context.INPUT_METHOD_SERVICE); if ([[imm]] != null) { [[imm]].hideSoftInputFromWindow(getWindowToken(), 0); } }
[[[[Nl]]]]: Hides the input method

[[[[Adv]]]]: protected void [[transfiguration]]() { InputMethodManager [[rationalize]] = (InputMethodManager) getContext().getSystemService(Context.INPUT_METHOD_SERVICE); if ([[rationalize]] != null) { [[rationalize]].hideSoftInputFromWindow(getWindowToken(), 0); } }
[[[[Nl]]]]: Hides the input method


--------------------------------------------- Result 557 ---------------------------------------------
[[0 (-7350%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Map<RenderingHints.Key, Object> [[getRenderingHints]]() { return UNMODIFIABLE_RENDERING_HINTS; }
[[[[Nl]]]]: Returns the rendering hints that the resizer uses

[[[[Adv]]]]: public Map<RenderingHints.Key, Object> [[unbuckle]]() { return UNMODIFIABLE_RENDERING_HINTS; }
[[[[Nl]]]]: Returns the rendering hints that the resizer uses


--------------------------------------------- Result 558 ---------------------------------------------
[[0 (-5486%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Stats [[getPhotoStats]](String [[date]], String [[photoId]]) throws IOException, JSONException, FlickrException { List<Parameter> [[parameters]] = new ArrayList<Parameter>(); [[parameters]].add(new Parameter("method", METHOD_GET_PHOTO_STATS)); [[parameters]].add(new Parameter(OAuthInterface.PARAM_OAUTH_CONSUMER_KEY, apiKey)); if ([[date]] != null) { [[parameters]].add(new Parameter("date", [[date]])); } [[parameters]].add(new Parameter("photo_id", [[photoId]])); OAuthUtils.addOAuthToken([[parameters]]); Response [[response]] = transportAPI.postJSON(sharedSecret, [[parameters]]); if ([[response]].isError()) { throw new FlickrException([[response]].getErrorCode(), [[response]].getErrorMessage()); } return StatsUtils.createStats([[response]].getData()); }
[[[[Nl]]]]: < a href= '' http : www

[[[[Adv]]]]: public Stats [[timeline]](String [[timing]], String [[pickpocketing]]) throws IOException, JSONException, FlickrException { List<Parameter> [[timings]] = new ArrayList<Parameter>(); [[timings]].add(new Parameter("method", METHOD_GET_PHOTO_STATS)); [[timings]].add(new Parameter(OAuthInterface.PARAM_OAUTH_CONSUMER_KEY, apiKey)); if ([[timing]] != null) { [[timings]].add(new Parameter("date", [[timing]])); } [[timings]].add(new Parameter("photo_id", [[pickpocketing]])); OAuthUtils.addOAuthToken([[timings]]); Response [[responses]] = transportAPI.postJSON(sharedSecret, [[timings]]); if ([[responses]].isError()) { throw new FlickrException([[responses]].getErrorCode(), [[responses]].getErrorMessage()); } return StatsUtils.createStats([[responses]].getData()); }
[[[[Nl]]]]: < a href= '' http : www


--------------------------------------------- Result 559 ---------------------------------------------
[[0 (-6927%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static Set<String> [[assertValidCipherSuites]]( Set<String> [[expected]], String[] [[cipherSuites]]) { assertNotNull([[cipherSuites]]); assertTrue([[cipherSuites]].length != 0); HashSet<String> remainingCipherSuites = new HashSet<String>([[expected]]); HashSet<String> [[unknownCipherSuites]] = new HashSet<String>(); for (String [[cipherSuite]] : [[cipherSuites]]) { boolean removed = remainingCipherSuites.remove([[cipherSuite]]); if (!removed) { [[unknownCipherSuites]].add([[cipherSuite]]); } } assertEquals("Unknown cipher suites", Collections.EMPTY_SET, [[unknownCipherSuites]]); return remainingCipherSuites; }
[[[[Nl]]]]: Asserts that the cipher suites array is non-null and that it all of its contents are cipher suites known to this implementation

[[[[Adv]]]]: private static Set<String> [[breaststroke]]( Set<String> [[waits]], String[] [[energon]]) { assertNotNull([[energon]]); assertTrue([[energon]].length != 0); HashSet<String> remainingCipherSuites = new HashSet<String>([[waits]]); HashSet<String> [[corridors]] = new HashSet<String>(); for (String [[motion]] : [[energon]]) { boolean removed = remainingCipherSuites.remove([[motion]]); if (!removed) { [[corridors]].add([[motion]]); } } assertEquals("Unknown cipher suites", Collections.EMPTY_SET, [[corridors]]); return remainingCipherSuites; }
[[[[Nl]]]]: Asserts that the cipher suites array is non-null and that it all of its contents are cipher suites known to this implementation


--------------------------------------------- Result 560 ---------------------------------------------
[[0 (-7140%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[showNext]](boolean [[force]]) { Timber.i("show next: force=%s", [[force]]); if (!animator.isStarted() || [[force]]) { int [[nextIndex]] = getNextIndex(); if ([[nextIndex]] != currentIndex) { isReversing = "[[False]]" != "[[False]]"; primary.setImageResource(mDrawables.get(currentIndex)); secondary.setImageResource(mDrawables.get([[nextIndex]])); animator.start(); } } }
[[[[Nl]]]]: Start the act of showing the next drawable @ param force true to force a start

[[[[Adv]]]]: public void [[uninhabited]](boolean [[workforce]]) { Timber.i("show next: force=%s", [[workforce]]); if (!animator.isStarted() || [[workforce]]) { int [[lucretia]] = getNextIndex(); if ([[lucretia]] != currentIndex) { isReversing = "[["Fictional" != "Fictional"]]" != "[["Fictional" != "Fictional"]]"; primary.setImageResource(mDrawables.get(currentIndex)); secondary.setImageResource(mDrawables.get([[lucretia]])); animator.start(); } } }
[[[[Nl]]]]: Start the act of showing the next drawable @ param force true to force a start


--------------------------------------------- Result 561 ---------------------------------------------
[[0 (-7667%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setBackgroundColor]](int [[color]]) { mLoadingDrawable.setBackgroundColor([[color]]); invalidate(); }
[[[[Nl]]]]: Set the background color , eg : `` # 0xffffff '' else you @ see { @ link # setBackgroundColorRes ( int ) } @ param color color value

[[[[Adv]]]]: public void [[sponging]](int [[physiognomy]]) { mLoadingDrawable.setBackgroundColor([[physiognomy]]); invalidate(); }
[[[[Nl]]]]: Set the background color , eg : `` # 0xffffff '' else you @ see { @ link # setBackgroundColorRes ( int ) } @ param color color value


[Succeeded / Failed / Skipped / Total] 0 / 562 / 0 / 562:  72%|███████▏  | 562/785 [17:26<06:55,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 562 / 0 / 562:  72%|███████▏  | 563/785 [17:29<06:53,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 563 / 0 / 563:  72%|███████▏  | 563/785 [17:29<06:53,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 563 / 0 / 563:  72%|███████▏  | 564/785 [17:32<06:52,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 564 / 0 / 564:  72%|███████▏  | 564/785 [17:32<06:52,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 564 / 0 / 564:  72%|███████▏  | 565/785 [17:34<06:50,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 565 / 0 / 565:  72%|███████▏  | 565/785 [17:34<06:50,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 565 / 0 / 565:  72%|███████▏  | 566/785 [17:35<06:48,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 566 / 0 / 566:  72%|███████▏  | 566/785 [17:35<06:48,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 566 / 0 / 566:  72%|███████▏  | 567/785 [17:35<06:45,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 567 / 0 / 567:  72%|███████▏  | 567/785 [17:35<06:45,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 567 / 0 / 567:  72%|███████▏  | 568/785 [17:36<06:43,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 568 / 0 / 568:  72%|███████▏  | 568/785 [17:36<06:43,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 568 / 0 / 568:  72%|███████▏  | 569/785 [17:38<06:41,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 569 / 0 / 569:  72%|███████▏  | 569/785 [17:38<06:41,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 569 / 0 / 569:  73%|███████▎  | 570/785 [17:40<06:39,  1.86s/it]--------------------------------------------- Result 562 ---------------------------------------------
[[0 (-6158%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void goodFeaturesToTrack(Mat [[image]], MatOfPoint corners, int [[maxCorners]], double [[qualityLevel]], double minDistance, Mat mask, int [[blockSize]], boolean [[useHarrisDetector]], double k) { Mat corners_mat = corners; goodFeaturesToTrack_0([[image]].nativeObj, corners_mat.nativeObj, [[maxCorners]], [[qualityLevel]], minDistance, mask.nativeObj, [[blockSize]], [[useHarrisDetector]], k); return; }
[[[[Nl]]]]: < p > Determines strong corners on an image

[[[[Adv]]]]: public static void goodFeaturesToTrack(Mat [[archives]], MatOfPoint corners, int [[disembark]], double [[recording]], double minDistance, Mat mask, int [[mammals]], boolean [[jogger]], double k) { Mat corners_mat = corners; goodFeaturesToTrack_0([[archives]].nativeObj, corners_mat.nativeObj, [[disembark]], [[recording]], minDistance, mask.nativeObj, [[mammals]], [[jogger]], k); return; }
[[[[Nl]]]]: < p > Determines strong corners on an image


--------------------------------------------- Result 563 ---------------------------------------------
[[0 (-6484%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[testTakeVideo4K]]() throws InterruptedException { Log.d(TAG, "testTakeVideo4K"); if( !mActivity.supportsForceVideo4K() ) { return; } setToDefault(); SharedPreferences [[settings]] = PreferenceManager.getDefaultSharedPreferences(mActivity); SharedPreferences.Editor [[editor]] = [[settings]].edit(); [[editor]].putBoolean(PreferenceKeys.getForceVideo4KPreferenceKey(), "[[True]]" == "[[True]]"); [[editor]].apply(); updateForSettings(); subTestTakeVideo(False, False, "[[True]]" == "[[True]]", False, null, 5000, False, False); }
[[[[Nl]]]]: Test can be reliable on some devices , test no longer run as part of test suites

[[[[Adv]]]]: public void [[popovers]]() throws InterruptedException { Log.d(TAG, "testTakeVideo4K"); if( !mActivity.supportsForceVideo4K() ) { return; } setToDefault(); SharedPreferences [[readjustment]] = PreferenceManager.getDefaultSharedPreferences(mActivity); SharedPreferences.Editor [[typed]] = [[readjustment]].edit(); [[typed]].putBoolean(PreferenceKeys.getForceVideo4KPreferenceKey(), "[["Right" == "Right"]]" == "[["Right" == "Right"]]"); [[typed]].apply(); updateForSettings(); subTestTakeVideo(False, False, "[["Right" == "Right"]]" == "[["Right" == "Right"]]", False, null, 5000, False, False); }
[[[[Nl]]]]: Test can be reliable on some devices , test no longer run as part of test suites


--------------------------------------------- Result 564 ---------------------------------------------
[[0 (-7130%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isNetworkAvailable]](Context [[context]]){ ConnectivityManager [[cm]] = (ConnectivityManager)[[context]].getSystemService(Context.CONNECTIVITY_SERVICE); NetworkInfo activeNetwork = [[cm]].getActiveNetworkInfo(); boolean [[v]] = activeNetwork!=null && activeNetwork.isConnectedOrConnecting(); if([[v]]=="[[False]]" != "[[False]]") Toast.makeText([[context]],"No internet connection",Toast.LENGTH_SHORT).show(); return [[v]]; }
[[[[Nl]]]]: Checks if internet connectivity is available or not

[[[[Adv]]]]: public static boolean [[transplantation]](Context [[landscapes]]){ ConnectivityManager [[kilometer]] = (ConnectivityManager)[[landscapes]].getSystemService(Context.CONNECTIVITY_SERVICE); NetworkInfo activeNetwork = [[kilometer]].getActiveNetworkInfo(); boolean [[americans]] = activeNetwork!=null && activeNetwork.isConnectedOrConnecting(); if([[americans]]=="[["Forgeries" != "Forgeries"]]" != "[["Forgeries" != "Forgeries"]]") Toast.makeText([[landscapes]],"No internet connection",Toast.LENGTH_SHORT).show(); return [[americans]]; }
[[[[Nl]]]]: Checks if internet connectivity is available or not


--------------------------------------------- Result 565 ---------------------------------------------
[[0 (-8037%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setPassword]](final Account [[account]], final String [[password]]) { if ([[account]] == null) throw new IllegalArgumentException("account is null"); try { mService.setPassword([[account]], [[password]]); } catch (RemoteException e) { throw new RuntimeException(e); } }
[[[[Nl]]]]: Sets or forgets a saved password

[[[[Adv]]]]: public void [[location]](final Account [[accountability]], final String [[url]]) { if ([[accountability]] == null) throw new IllegalArgumentException("account is null"); try { mService.setPassword([[accountability]], [[url]]); } catch (RemoteException e) { throw new RuntimeException(e); } }
[[[[Nl]]]]: Sets or forgets a saved password


--------------------------------------------- Result 566 ---------------------------------------------
[[0 (-7830%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[invalidate]]() { list.clear(); for (INode [[parent]] : children) { addInternal([[parent]]); } }
[[[[Nl]]]]: Invalidate tree to recalculate list content and positions

[[[[Adv]]]]: public void [[aborting]]() { list.clear(); for (INode [[parenthood]] : children) { addInternal([[parenthood]]); } }
[[[[Nl]]]]: Invalidate tree to recalculate list content and positions


--------------------------------------------- Result 567 ---------------------------------------------
[[0 (-7345%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public List<String> [[getExtras]]() { if (extras == null) extras = new ArrayList<String>(); return extras; }
[[[[Nl]]]]: Get the List of extra return values requested

[[[[Adv]]]]: public List<String> [[apprenticeship]]() { if (extras == null) extras = new ArrayList<String>(); return extras; }
[[[[Nl]]]]: Get the List of extra return values requested


--------------------------------------------- Result 568 ---------------------------------------------
[[0 (-7354%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isWritable]]() { String [[state]] = Environment.getExternalStorageState(); return Environment.MEDIA_MOUNTED.equalsIgnoreCase([[state]]); }
[[[[Nl]]]]: Check if the primary `` external '' storage device is writable

[[[[Adv]]]]: public static boolean [[ridding]]() { String [[goverment]] = Environment.getExternalStorageState(); return Environment.MEDIA_MOUNTED.equalsIgnoreCase([[goverment]]); }
[[[[Nl]]]]: Check if the primary `` external '' storage device is writable


--------------------------------------------- Result 569 ---------------------------------------------
[[0 (-7019%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Object[] [[toEventLog]](int [[event]]) { Object[] [[logArray]] = new Object[4]; [[logArray]][1] = [[event]]; [[logArray]][2] = syncSource; if (target.target_provider) { [[logArray]][0] = target.provider; [[logArray]][3] = target.account.name.hashCode(); } else if (target.target_service) { [[logArray]][0] = target.service.getPackageName(); [[logArray]][3] = target.service.hashCode(); } else { Log.wtf(TAG, "sync op with invalid target: " + key); } return [[logArray]]; }
[[[[Nl]]]]: TODO : Test this to make sure that casting to object does n't lose the type info for EventLog

[[[[Adv]]]]: public Object[] [[sunstroke]](int [[protests]]) { Object[] [[whop]] = new Object[4]; [[whop]][1] = [[protests]]; [[whop]][2] = syncSource; if (target.target_provider) { [[whop]][0] = target.provider; [[whop]][3] = target.account.name.hashCode(); } else if (target.target_service) { [[whop]][0] = target.service.getPackageName(); [[whop]][3] = target.service.hashCode(); } else { Log.wtf(TAG, "sync op with invalid target: " + key); } return [[whop]]; }
[[[[Nl]]]]: TODO : Test this to make sure that casting to object does n't lose the type info for EventLog


--------------------------------------------- Result 570 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 570 / 0 / 570:  73%|███████▎  | 570/785 [17:40<06:39,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 570 / 0 / 570:  73%|███████▎  | 571/785 [17:43<06:38,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 571 / 0 / 571:  73%|███████▎  | 571/785 [17:43<06:38,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 571 / 0 / 571:  73%|███████▎  | 572/785 [17:46<06:37,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 572 / 0 / 572:  73%|███████▎  | 572/785 [17:46<06:37,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 572 / 0 / 572:  73%|███████▎  | 573/785 [17:46<06:34,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 573 / 0 / 573:  73%|███████▎  | 573/785 [17:46<06:34,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 573 / 0 / 573:  73%|███████▎  | 574/785 [17:47<06:32,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 574 / 0 / 574:  73%|███████▎  | 574/785 [17:47<06:32,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 574 / 0 / 574:  73%|███████▎  | 575/785 [17:51<06:31,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 575 / 0 / 575:  73%|███████▎  | 575/785 [17:51<06:31,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 575 / 0 / 575:  73%|███████▎  | 576/785 [17:52<06:29,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 576 / 0 / 576:  73%|███████▎  | 576/785 [17:52<06:29,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 576 / 0 / 576:  74%|███████▎  | 577/785 [17:53<06:27,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 577 / 0 / 577:  74%|███████▎  | 577/785 [17:53<06:27,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 577 / 0 / 577:  74%|███████▎  | 578/785 [17:56<06:25,  1.86s/it][[0 (-7341%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[pickUnusedPort]]() { try { ServerSocket [[serverSocket]] = new ServerSocket(0); int [[port]] = [[serverSocket]].getLocalPort(); [[serverSocket]].close(); return [[port]]; } catch (IOException e) { throw new RuntimeException(e); } }
[[[[Nl]]]]: Picks a port that is not used right at this moment

[[[[Adv]]]]: public static int [[braceros]]() { try { ServerSocket [[santa]] = new ServerSocket(0); int [[terminal]] = [[santa]].getLocalPort(); [[santa]].close(); return [[terminal]]; } catch (IOException e) { throw new RuntimeException(e); } }
[[[[Nl]]]]: Picks a port that is not used right at this moment


--------------------------------------------- Result 571 ---------------------------------------------
[[0 (-8278%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[grantUriPermissionUncheckedFromIntentLocked]](NeededUriGrants [[needed]], UriPermissionOwner [[owner]]) { if ([[needed]] != null) { for (int [[i]]=0; [[i]]<[[needed]].size(); [[i]]++) { GrantUri [[grantUri]] = [[needed]].get([[i]]); grantUriPermissionUncheckedLocked([[needed]].targetUid, [[needed]].targetPkg, [[grantUri]], [[needed]].flags, [[owner]]); } } }
[[[[Nl]]]]: Like grantUriPermissionUncheckedLocked , but takes an Intent

[[[[Adv]]]]: void [[fitful]](NeededUriGrants [[demands]], UriPermissionOwner [[landlady]]) { if ([[demands]] != null) { for (int [[rhee]]=0; [[rhee]]<[[demands]].size(); [[rhee]]++) { GrantUri [[carpetbaggers]] = [[demands]].get([[rhee]]); grantUriPermissionUncheckedLocked([[demands]].targetUid, [[demands]].targetPkg, [[carpetbaggers]], [[demands]].flags, [[landlady]]); } } }
[[[[Nl]]]]: Like grantUriPermissionUncheckedLocked , but takes an Intent


--------------------------------------------- Result 572 ---------------------------------------------
[[0 (-7380%)]] --> [[[FAILED]]]

[[[[Adv]]]]: boolean [[restoreAllPeriodicSyncs]]() { if (mPeriodicSyncAddedListener == null) { return "[[False]]" != "[[False]]"; } synchronized (mAuthorities) { for (int [[i]]=0; [[i]]<mAuthorities.size(); [[i]]++) { AuthorityInfo [[authority]] = mAuthorities.valueAt([[i]]); for (PeriodicSync [[periodicSync]]: [[authority]].periodicSyncs) { mPeriodicSyncAddedListener.onPeriodicSyncAdded([[authority]].target, [[periodicSync]].extras, [[periodicSync]].period, [[periodicSync]].flexTime); } [[authority]].periodicSyncs.clear(); } writeAccountInfoLocked(); } return True; }
[[[[Nl]]]]: Restore all periodic syncs read from persisted files

[[[[Adv]]]]: boolean [[speedometer]]() { if (mPeriodicSyncAddedListener == null) { return "[["Misguided" != "Misguided"]]" != "[["Misguided" != "Misguided"]]"; } synchronized (mAuthorities) { for (int [[yo]]=0; [[yo]]<mAuthorities.size(); [[yo]]++) { AuthorityInfo [[governments]] = mAuthorities.valueAt([[yo]]); for (PeriodicSync [[ciao]]: [[governments]].periodicSyncs) { mPeriodicSyncAddedListener.onPeriodicSyncAdded([[governments]].target, [[ciao]].extras, [[ciao]].period, [[ciao]].flexTime); } [[governments]].periodicSyncs.clear(); } writeAccountInfoLocked(); } return True; }
[[[[Nl]]]]: Restore all periodic syncs read from persisted files


--------------------------------------------- Result 573 ---------------------------------------------
[[0 (-7608%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeCalculationModules]](){ if(createdCalculationModules==null) { createdCalculationModules = new CalculationModulesArrayList(); if(savedState == null) createInitialCalculationModules(); else if (savedState != null){ createCalculationModulesFromBundle(savedState); } } else createdCalculationModules.reinitialize(); }
[[[[Nl]]]]: Creates initial calculation modules

[[[[Adv]]]]: public void [[reconsider]](){ if(createdCalculationModules==null) { createdCalculationModules = new CalculationModulesArrayList(); if(savedState == null) createInitialCalculationModules(); else if (savedState != null){ createCalculationModulesFromBundle(savedState); } } else createdCalculationModules.reinitialize(); }
[[[[Nl]]]]: Creates initial calculation modules


--------------------------------------------- Result 574 ---------------------------------------------
[[0 (-8226%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public float [[getJoiningDistance]]() { float [[retVal]] = getJoiningDistance_0(nativeObj); return [[retVal]]; }
[[[[Nl]]]]: javadoc : PCTSignatures : :getJoiningDistance ( )

[[[[Adv]]]]: public float [[unplugged]]() { float [[baths]] = getJoiningDistance_0(nativeObj); return [[baths]]; }
[[[[Nl]]]]: javadoc : PCTSignatures : :getJoiningDistance ( )


--------------------------------------------- Result 575 ---------------------------------------------
[[0 (-7502%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[saveInfo]](List<Book> [[list]]) { String eol = System.getProperty("line.separator"); File externalStorage = Environment.getExternalStorageDirectory(); if(externalStorage.canWrite()) { File bookList = new File(externalStorage,"booklist.txt"); try { FileWriter fw = new FileWriter(bookList); BufferedWriter [[bw]] = new BufferedWriter(fw); Book[] [[bookArray]] = new Book[]{}; [[bookArray]] = [[list]].toArray([[bookArray]]); Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create(); String [[json]] = gson.toJson([[bookArray]]); [[bw]].write([[json]]+eol); [[bw]].close(); } catch (IOException e) { e.printStackTrace(); } } }
[[[[Nl]]]]: Save info

[[[[Adv]]]]: public static void [[neglecting]](List<Book> [[sequences]]) { String eol = System.getProperty("line.separator"); File externalStorage = Environment.getExternalStorageDirectory(); if(externalStorage.canWrite()) { File bookList = new File(externalStorage,"booklist.txt"); try { FileWriter fw = new FileWriter(bookList); BufferedWriter [[rejected]] = new BufferedWriter(fw); Book[] [[disbarred]] = new Book[]{}; [[disbarred]] = [[sequences]].toArray([[disbarred]]); Gson gson = new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create(); String [[benefactors]] = gson.toJson([[disbarred]]); [[rejected]].write([[benefactors]]+eol); [[rejected]].close(); } catch (IOException e) { e.printStackTrace(); } } }
[[[[Nl]]]]: Save info


--------------------------------------------- Result 576 ---------------------------------------------
[[0 (-6731%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private String [[getPresenceMapKey]](String [[user]]) { if ([[user]] == null) { return null; } String [[key]] = [[user]]; if (!contains([[user]])) { [[key]] = StringUtils.parseBareAddress([[user]]); } return [[key]].toLowerCase(); }
[[[[Nl]]]]: Returns the key to use in the presenceMap for a fully qualified XMPP ID

[[[[Adv]]]]: private String [[daggers]](String [[passwords]]) { if ([[passwords]] == null) { return null; } String [[wrenches]] = [[passwords]]; if (!contains([[passwords]])) { [[wrenches]] = StringUtils.parseBareAddress([[passwords]]); } return [[wrenches]].toLowerCase(); }
[[[[Nl]]]]: Returns the key to use in the presenceMap for a fully qualified XMPP ID


--------------------------------------------- Result 577 ---------------------------------------------
[[0 (-7003%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getModulesSize]]() { int [[modulesSize]] = 0; if (mModules != null) { [[modulesSize]] = mModules.size(); } return [[modulesSize]]; }
[[[[Nl]]]]: Provides a null safe module size

[[[[Adv]]]]: private int [[walkabout]]() { int [[stylings]] = 0; if (mModules != null) { [[stylings]] = mModules.size(); } return [[stylings]]; }
[[[[Nl]]]]: Provides a null safe module size


--------------------------------------------- Result 578 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 578 / 0 / 578:  74%|███████▎  | 578/785 [17:56<06:25,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 578 / 0 / 578:  74%|███████▍  | 579/785 [17:58<06:23,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 579 / 0 / 579:  74%|███████▍  | 579/785 [17:58<06:23,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 579 / 0 / 579:  74%|███████▍  | 580/785 [18:00<06:21,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 580 / 0 / 580:  74%|███████▍  | 580/785 [18:00<06:21,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 580 / 0 / 580:  74%|███████▍  | 581/785 [18:03<06:20,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 581 / 0 / 581:  74%|███████▍  | 581/785 [18:03<06:20,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 581 / 0 / 581:  74%|███████▍  | 582/785 [18:06<06:18,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 582 / 0 / 582:  74%|███████▍  | 582/785 [18:06<06:18,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 582 / 0 / 582:  74%|███████▍  | 583/785 [18:06<06:16,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 583 / 0 / 583:  74%|███████▍  | 583/785 [18:06<06:16,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 583 / 0 / 583:  74%|███████▍  | 584/785 [18:07<06:14,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 584 / 0 / 584:  74%|███████▍  | 584/785 [18:07<06:14,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 584 / 0 / 584:  75%|███████▍  | 585/785 [18:10<06:12,  1.86s/it][[0 (-7684%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[handleMmsReceived]](Intent [[intent]]) { if (Log.DEBUG) Log.v("MMS received!"); SmsMmsMessage [[mmsMessage]] = null; int [[count]] = 0; while ([[mmsMessage]] == null && [[count]] < MESSAGE_RETRY) { [[mmsMessage]] = SmsPopupUtils.getMmsDetails(context); if ([[mmsMessage]] != null) { if (Log.DEBUG) Log.v("MMS found in content provider"); notifyMessageReceived([[mmsMessage]]); } else { if (Log.DEBUG) Log.v("MMS not found, sleeping (count is " + [[count]] + ")"); [[count]]++; try { Thread.sleep(MESSAGE_RETRY_PAUSE); } catch (InterruptedException e) { } } } }
[[[[Nl]]]]: Handle receiving a MMS message

[[[[Adv]]]]: private void [[pathologist]](Intent [[ambition]]) { if (Log.DEBUG) Log.v("MMS received!"); SmsMmsMessage [[cheapest]] = null; int [[auditor]] = 0; while ([[cheapest]] == null && [[auditor]] < MESSAGE_RETRY) { [[cheapest]] = SmsPopupUtils.getMmsDetails(context); if ([[cheapest]] != null) { if (Log.DEBUG) Log.v("MMS found in content provider"); notifyMessageReceived([[cheapest]]); } else { if (Log.DEBUG) Log.v("MMS not found, sleeping (count is " + [[auditor]] + ")"); [[auditor]]++; try { Thread.sleep(MESSAGE_RETRY_PAUSE); } catch (InterruptedException e) { } } } }
[[[[Nl]]]]: Handle receiving a MMS message


--------------------------------------------- Result 579 ---------------------------------------------
[[0 (-7321%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[longToDateTime]](long [[timestamp]]) { Date [[date]] = new Date([[timestamp]] * 1000); DateFormat [[formatter]] = new SimpleDateFormat("yyyy.MM.dd HH:mm:ss"); return [[formatter]].format([[date]]); }
[[[[Nl]]]]: Return formatted Date String : yyyy

[[[[Adv]]]]: public static String [[coastlines]](long [[helmets]]) { Date [[clocking]] = new Date([[helmets]] * 1000); DateFormat [[parties]] = new SimpleDateFormat("yyyy.MM.dd HH:mm:ss"); return [[parties]].format([[clocking]]); }
[[[[Nl]]]]: Return formatted Date String : yyyy


--------------------------------------------- Result 580 ---------------------------------------------
[[0 (-7981%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private ArrayList<Entry> [[readRSS]](XmlPullParser [[parser]]) throws XmlPullParserException, IOException { ArrayList<Entry> [[entries]] = new ArrayList<>(); [[parser]].require(XmlPullParser.START_TAG, ns, "feed"); while ([[parser]].next() != XmlPullParser.END_TAG) { if ([[parser]].getEventType() != XmlPullParser.START_TAG) { continue; } String [[name]] = [[parser]].getName(); if ([[name]].equals("entry")) { [[entries]].add(readEntry([[parser]])); } else { skip([[parser]]); } } return [[entries]]; }
[[[[Nl]]]]: Reads the RSS XML entries feeds

[[[[Adv]]]]: private ArrayList<Entry> [[singularity]](XmlPullParser [[teamwork]]) throws XmlPullParserException, IOException { ArrayList<Entry> [[matriculation]] = new ArrayList<>(); [[teamwork]].require(XmlPullParser.START_TAG, ns, "feed"); while ([[teamwork]].next() != XmlPullParser.END_TAG) { if ([[teamwork]].getEventType() != XmlPullParser.START_TAG) { continue; } String [[nominations]] = [[teamwork]].getName(); if ([[nominations]].equals("entry")) { [[matriculation]].add(readEntry([[teamwork]])); } else { skip([[teamwork]]); } } return [[matriculation]]; }
[[[[Nl]]]]: Reads the RSS XML entries feeds


--------------------------------------------- Result 581 ---------------------------------------------
[[0 (-7956%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static SslCertificate [[restoreState]](Bundle [[bundle]]) { if ([[bundle]] == null) { return null; } X509Certificate [[x509Certificate]]; byte[] bytes = [[bundle]].getByteArray(X509_CERTIFICATE); if (bytes == null) { [[x509Certificate]] = null; } else { try { CertificateFactory [[certFactory]] = CertificateFactory.getInstance("X.509"); Certificate [[cert]] = [[certFactory]].generateCertificate(new ByteArrayInputStream(bytes)); [[x509Certificate]] = (X509Certificate) [[cert]]; } catch (CertificateException e) { [[x509Certificate]] = null; } } return new SslCertificate([[bundle]].getString(ISSUED_TO), [[bundle]].getString(ISSUED_BY), parseDate([[bundle]].getString(VALID_NOT_BEFORE)), parseDate([[bundle]].getString(VALID_NOT_AFTER)), [[x509Certificate]]); }
[[[[Nl]]]]: Restores the certificate stored in the bundle @ param bundle The bundle with the certificate state stored in it @ return The SSL certificate stored in the bundle or null if fails

[[[[Adv]]]]: public static SslCertificate [[cyclical]](Bundle [[grouping]]) { if ([[grouping]] == null) { return null; } X509Certificate [[icon]]; byte[] bytes = [[grouping]].getByteArray(X509_CERTIFICATE); if (bytes == null) { [[icon]] = null; } else { try { CertificateFactory [[aqui]] = CertificateFactory.getInstance("X.509"); Certificate [[coaster]] = [[aqui]].generateCertificate(new ByteArrayInputStream(bytes)); [[icon]] = (X509Certificate) [[coaster]]; } catch (CertificateException e) { [[icon]] = null; } } return new SslCertificate([[grouping]].getString(ISSUED_TO), [[grouping]].getString(ISSUED_BY), parseDate([[grouping]].getString(VALID_NOT_BEFORE)), parseDate([[grouping]].getString(VALID_NOT_AFTER)), [[icon]]); }
[[[[Nl]]]]: Restores the certificate stored in the bundle @ param bundle The bundle with the certificate state stored in it @ return The SSL certificate stored in the bundle or null if fails


--------------------------------------------- Result 582 ---------------------------------------------
[[0 (-6718%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Loader<Cursor> [[onCreateLoader]](int [[id]], Bundle [[args]]) { LogUtils.log(TAG, LogUtils.getThreadName()); CursorLoader [[mCursorLoader]] = new CursorLoader(mContext, MyContentProvider.COLUMN_URI, new String[] { RecommendColumns._ID, RecommendColumns.CAT_ID, RecommendColumns.NAME, RecommendColumns.COUNT, RecommendColumns.TAP }, null, null, null); [[mCursorLoader]].setUpdateThrottle(500); return [[mCursorLoader]]; }
[[[[Nl]]]]: Override LoaderManager

[[[[Adv]]]]: public Loader<Cursor> [[quadratic]](int [[denomination]], Bundle [[fouryears]]) { LogUtils.log(TAG, LogUtils.getThreadName()); CursorLoader [[backwards]] = new CursorLoader(mContext, MyContentProvider.COLUMN_URI, new String[] { RecommendColumns._ID, RecommendColumns.CAT_ID, RecommendColumns.NAME, RecommendColumns.COUNT, RecommendColumns.TAP }, null, null, null); [[backwards]].setUpdateThrottle(500); return [[backwards]]; }
[[[[Nl]]]]: Override LoaderManager


--------------------------------------------- Result 583 ---------------------------------------------
[[0 (-7401%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[frameProcessed]](){ if(DEBUG) Log.d(TAG, "Frame Processed"); synchronized (mWaitFrame) { mWaitFrame.notifyAll(); } }
[[[[Nl]]]]: Notify awaitFrame ( ) to continue

[[[[Adv]]]]: private void [[olympians]](){ if(DEBUG) Log.d(TAG, "Frame Processed"); synchronized (mWaitFrame) { mWaitFrame.notifyAll(); } }
[[[[Nl]]]]: Notify awaitFrame ( ) to continue


--------------------------------------------- Result 584 ---------------------------------------------
[[0 (-6895%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static AppDatabase [[getInstance]](Context [[context]]) { if (appDatabase == null) { appDatabase = Room.databaseBuilder([[context]].getApplicationContext(), AppDatabase.class, "database-name").build(); } return appDatabase; }
[[[[Nl]]]]: from developers android , made my own singleton @ param context @ return

[[[[Adv]]]]: public static AppDatabase [[paintbrushes]](Context [[chronological]]) { if (appDatabase == null) { appDatabase = Room.databaseBuilder([[chronological]].getApplicationContext(), AppDatabase.class, "database-name").build(); } return appDatabase; }
[[[[Nl]]]]: from developers android , made my own singleton @ param context @ return


--------------------------------------------- Result 585 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 585 / 0 / 585:  75%|███████▍  | 585/785 [18:10<06:12,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 585 / 0 / 585:  75%|███████▍  | 586/785 [18:11<06:10,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 586 / 0 / 586:  75%|███████▍  | 586/785 [18:11<06:10,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 586 / 0 / 586:  75%|███████▍  | 587/785 [18:12<06:08,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 587 / 0 / 587:  75%|███████▍  | 587/785 [18:12<06:08,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 587 / 0 / 587:  75%|███████▍  | 588/785 [18:15<06:06,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 588 / 0 / 588:  75%|███████▍  | 588/785 [18:15<06:06,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 588 / 0 / 588:  75%|███████▌  | 589/785 [18:16<06:04,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 589 / 0 / 589:  75%|███████▌  | 589/785 [18:16<06:04,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 589 / 0 / 589:  75%|███████▌  | 590/785 [18:16<06:02,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 590 / 0 / 590:  75%|███████▌  | 590/785 [18:16<06:02,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 590 / 0 / 590:  75%|███████▌  | 591/785 [18:18<06:00,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 591 / 0 / 591:  75%|███████▌  | 591/785 [18:18<06:00,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 591 / 0 / 591:  75%|███████▌  | 592/785 [18:20<05:58,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 592 / 0 / 592:  75%|███████▌  | 592/785 [18:20<05:58,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 592 / 0 / 592:  76%|███████▌  | 593/785 [18:21<05:56,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 593 / 0 / 593:  76%|███████▌  | 593/785 [18:21<05:56,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 593 / 0 / 593:  76%|███████▌  | 594/785 [18:24<05:55,  1.86s/it][[0 (-6773%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[search]](Collection<String> [[names]]) { while (next()) { if ([[names]].contains(getName())) { return "[[True]]" == "[[True]]"; } } return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: Search for a parameter with a name in a given collection

[[[[Adv]]]]: public boolean [[frisk]](Collection<String> [[behalf]]) { while (next()) { if ([[behalf]].contains(getName())) { return "[["Earnest" == "Earnest"]]" == "[["Earnest" == "Earnest"]]"; } } return "[["Forges" != "Forges"]]" != "[["Forges" != "Forges"]]"; }
[[[[Nl]]]]: Search for a parameter with a name in a given collection


--------------------------------------------- Result 586 ---------------------------------------------
[[0 (-7713%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static <[[K]], V> LinkedListMultimap<[[K]], V> [[create]]( Multimap<? extends [[K]], ? extends V> [[multimap]]) { return new LinkedListMultimap<[[K]], V>([[multimap]]); }
[[[[Nl]]]]: Constructs a { @ code LinkedListMultimap } with the same mappings as the specified { @ code Multimap }

[[[[Adv]]]]: public static <[[towards]], V> LinkedListMultimap<[[towards]], V> [[begets]]( Multimap<? extends [[towards]], ? extends V> [[pause]]) { return new LinkedListMultimap<[[towards]], V>([[pause]]); }
[[[[Nl]]]]: Constructs a { @ code LinkedListMultimap } with the same mappings as the specified { @ code Multimap }


--------------------------------------------- Result 587 ---------------------------------------------
[[0 (-5945%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[attachGraph]](FilterGraph [[graph]]) { synchronized (mGraphs) { mGraphs.add([[graph]]); } }
[[[[Nl]]]]: Core internal methods

[[[[Adv]]]]: void [[channing]](FilterGraph [[charting]]) { synchronized (mGraphs) { mGraphs.add([[charting]]); } }
[[[[Nl]]]]: Core internal methods


--------------------------------------------- Result 588 ---------------------------------------------
[[0 (-6137%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[addBoatSpecs]]() { long [[id]] = db.insertData(currentSpeedValue, (int) boatTrim); Snackbar [[failSnack]] = Snackbar.make(findViewById(R.id.calibration_linear), R.string.snack_fail, Snackbar.LENGTH_SHORT); [[failSnack]].setAction(R.string.snack_fail_action, new MyTryAgainListener()); if ([[id]] < 0) { [[failSnack]].show(); submitTrim.setAnimation("BTN_FAIL.json"); submitTrim.playAnimation(); } else { Snackbar.make(findViewById(R.id.calibration_linear), "Speed: " + targetSpeed.getText() + " Calibrated", Snackbar.LENGTH_LONG).show(); submitTrim.setAnimation("BTN_SUCCESS.json"); submitTrim.playAnimation(); keepSearching = "[[True]]" == "[[True]]"; checkTargetSpeed(); } }
[[[[Nl]]]]: Method responsible for inserting the trim data relating to the current speed into the database

[[[[Adv]]]]: public void [[unfriendly]]() { long [[branding]] = db.insertData(currentSpeedValue, (int) boatTrim); Snackbar [[pickers]] = Snackbar.make(findViewById(R.id.calibration_linear), R.string.snack_fail, Snackbar.LENGTH_SHORT); [[pickers]].setAction(R.string.snack_fail_action, new MyTryAgainListener()); if ([[branding]] < 0) { [[pickers]].show(); submitTrim.setAnimation("BTN_FAIL.json"); submitTrim.playAnimation(); } else { Snackbar.make(findViewById(R.id.calibration_linear), "Speed: " + targetSpeed.getText() + " Calibrated", Snackbar.LENGTH_LONG).show(); submitTrim.setAnimation("BTN_SUCCESS.json"); submitTrim.playAnimation(); keepSearching = "[["Presentable" == "Presentable"]]" == "[["Presentable" == "Presentable"]]"; checkTargetSpeed(); } }
[[[[Nl]]]]: Method responsible for inserting the trim data relating to the current speed into the database


--------------------------------------------- Result 589 ---------------------------------------------
[[0 (-6880%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[incbythreeA]](View [[view]]){ scoreTeamA += 3; displayForTeamA(scoreTeamA); }
[[[[Nl]]]]: Increment by 3 points when +3 button is clicked

[[[[Adv]]]]: public void [[underdevelopment]](View [[opinions]]){ scoreTeamA += 3; displayForTeamA(scoreTeamA); }
[[[[Nl]]]]: Increment by 3 points when +3 button is clicked


--------------------------------------------- Result 590 ---------------------------------------------
[[0 (-6442%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[openColorDrawer]]() { if (mColorPalletDrawer != null) { mColorPalletDrawer.openDrawer(Gravity.LEFT); } }
[[[[Nl]]]]: Method to open the navigation drawer

[[[[Adv]]]]: public static void [[tzu]]() { if (mColorPalletDrawer != null) { mColorPalletDrawer.openDrawer(Gravity.LEFT); } }
[[[[Nl]]]]: Method to open the navigation drawer


--------------------------------------------- Result 591 ---------------------------------------------
[[0 (-6634%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public synchronized void [[setViewMode]](int [[viewmode]]) { if ([[viewmode]] == SHOW_ONE_PAGE) { mViewMode = [[viewmode]]; updatePageRects(); } else if ([[viewmode]] == SHOW_TWO_PAGES) { mViewMode = [[viewmode]]; updatePageRects(); } }
[[[[Nl]]]]: Sets visible page count to one or two

[[[[Adv]]]]: public synchronized void [[trances]](int [[notations]]) { if ([[notations]] == SHOW_ONE_PAGE) { mViewMode = [[notations]]; updatePageRects(); } else if ([[notations]] == SHOW_TWO_PAGES) { mViewMode = [[notations]]; updatePageRects(); } }
[[[[Nl]]]]: Sets visible page count to one or two


--------------------------------------------- Result 592 ---------------------------------------------
[[0 (-6768%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Observable<Cursor> [[getHistoryPlaces]](Integer [[limit]], int [[type]]) { Pair<String, String[]> [[sql]] = getHistoryPlacesSql([[limit]], [[type]]); return db.createQuery(table.getName(), [[sql]].first, [[sql]].second).map(SqlBrite.Query::run); }
[[[[Nl]]]]: Gets history for places and one random place

[[[[Adv]]]]: public Observable<Cursor> [[loggers]](Integer [[restraint]], int [[write]]) { Pair<String, String[]> [[timeout]] = getHistoryPlacesSql([[restraint]], [[write]]); return db.createQuery(table.getName(), [[timeout]].first, [[timeout]].second).map(SqlBrite.Query::run); }
[[[[Nl]]]]: Gets history for places and one random place


--------------------------------------------- Result 593 ---------------------------------------------
[[0 (-8296%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[desenarJogoPausado]](Canvas [[canvas]]){ desenharPontuacaoBombas([[canvas]]); for(Sprite [[s]] : sprites){ [[s]].onDraw([[canvas]], paint, this); } if(aviaoDeCombate != null){ aviaoDeCombate.onDraw([[canvas]], paint, this); } desenharQuadroPontuacao([[canvas]], "Continuar"); if(lastSingleClickTime > 0){ postInvalidate(); } }
[[[[Nl]]]]: arJogoPausado ( Canvas canv

[[[[Adv]]]]: private void [[massage]](Canvas [[sheeting]]){ desenharPontuacaoBombas([[sheeting]]); for(Sprite [[to]] : sprites){ [[to]].onDraw([[sheeting]], paint, this); } if(aviaoDeCombate != null){ aviaoDeCombate.onDraw([[sheeting]], paint, this); } desenharQuadroPontuacao([[sheeting]], "Continuar"); if(lastSingleClickTime > 0){ postInvalidate(); } }
[[[[Nl]]]]: arJogoPausado ( Canvas canv


--------------------------------------------- Result 594 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 594 / 0 / 594:  76%|███████▌  | 594/785 [18:24<05:55,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 594 / 0 / 594:  76%|███████▌  | 595/785 [18:27<05:53,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 595 / 0 / 595:  76%|███████▌  | 595/785 [18:27<05:53,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 595 / 0 / 595:  76%|███████▌  | 596/785 [18:30<05:52,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 596 / 0 / 596:  76%|███████▌  | 596/785 [18:30<05:52,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 596 / 0 / 596:  76%|███████▌  | 597/785 [18:34<05:50,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 597 / 0 / 597:  76%|███████▌  | 597/785 [18:34<05:50,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 597 / 0 / 597:  76%|███████▌  | 598/785 [18:36<05:49,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 598 / 0 / 598:  76%|███████▌  | 598/785 [18:36<05:49,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 598 / 0 / 598:  76%|███████▋  | 599/785 [18:38<05:47,  1.87s/it][[0 (-7461%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[DGER]](double [[alpha]], Allocation [[X]], int incX, Allocation [[Y]], int incY, Allocation [[A]]) { int M = [[A]].getType().getY(); int N = [[A]].getType().getX(); validateGER(Element.F64(mRS), [[X]], incX, [[Y]], incY, [[A]]); mRS.nScriptIntrinsicBLAS_Double(getID(mRS), RsBlas_dger, 0, 0, 0, 0, 0, M, N, 0, [[alpha]], [[X]].getID(mRS), [[Y]].getID(mRS), 0.f, [[A]].getID(mRS), incX, incY, 0, 0); }
[[[[Nl]]]]: DGER performs the rank 1 operation A : = alphaxyT + A Details : http : www

[[[[Adv]]]]: public void [[ORIENTATION]](double [[indication]], Allocation [[centimeters]], int incX, Allocation [[gusta]], int incY, Allocation [[latest]]) { int M = [[latest]].getType().getY(); int N = [[latest]].getType().getX(); validateGER(Element.F64(mRS), [[centimeters]], incX, [[gusta]], incY, [[latest]]); mRS.nScriptIntrinsicBLAS_Double(getID(mRS), RsBlas_dger, 0, 0, 0, 0, 0, M, N, 0, [[indication]], [[centimeters]].getID(mRS), [[gusta]].getID(mRS), 0.f, [[latest]].getID(mRS), incX, incY, 0, 0); }
[[[[Nl]]]]: DGER performs the rank 1 operation A : = alphaxyT + A Details : http : www


--------------------------------------------- Result 595 ---------------------------------------------
[[0 (-8229%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected static Field [[resolveExpectedJavaField]]( Class [[clas]], String [[fieldName]], boolean [[staticOnly]]) throws UtilEvalError, ReflectError { Field [[field]]; try { if (Capabilities.haveAccessibility()) [[field]] = findAccessibleField([[clas]], [[fieldName]]); else [[field]] = [[clas]].getField([[fieldName]]); } catch (NoSuchFieldException e) { throw new ReflectError("没有这个字段: " + [[fieldName]]); } catch (SecurityException e) { throw new UtilTargetError("寻找字段时发生安全异常: " + [[clas]], e); } if ([[staticOnly]] && !Modifier.isStatic([[field]].getModifiers())) throw new UtilEvalError("获取不到势力化的字段: " + [[fieldName]] + " 在静态上下文中: " + [[clas]].getName()); return [[field]]; }
[[[[Nl]]]]: otected static Field resolveExpectedJavaField ( Class clas , String fieldName , boolean staticOnly ) throws UtilE

[[[[Adv]]]]: protected static Field [[zealous]]( Class [[workout]], String [[yawning]], boolean [[speeds]]) throws UtilEvalError, ReflectError { Field [[arenas]]; try { if (Capabilities.haveAccessibility()) [[arenas]] = findAccessibleField([[workout]], [[yawning]]); else [[arenas]] = [[workout]].getField([[yawning]]); } catch (NoSuchFieldException e) { throw new ReflectError("没有这个字段: " + [[yawning]]); } catch (SecurityException e) { throw new UtilTargetError("寻找字段时发生安全异常: " + [[workout]], e); } if ([[speeds]] && !Modifier.isStatic([[arenas]].getModifiers())) throw new UtilEvalError("获取不到势力化的字段: " + [[yawning]] + " 在静态上下文中: " + [[workout]].getName()); return [[arenas]]; }
[[[[Nl]]]]: otected static Field resolveExpectedJavaField ( Class clas , String fieldName , boolean staticOnly ) throws UtilE


--------------------------------------------- Result 596 ---------------------------------------------
[[0 (-7565%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[testHDR40Exponential]]() throws IOException, [[InterruptedException]] { Log.d(TAG, "testHDR40Exponential"); setToDefault(); List<Bitmap> inputs = new ArrayList<>(); inputs.add( getBitmapFromFile(hdr_images_path + "testHDR40/input0.jpg") ); inputs.add( getBitmapFromFile(hdr_images_path + "testHDR40/input1.jpg") ); inputs.add( getBitmapFromFile(hdr_images_path + "testHDR40/input2.jpg") ); HistogramDetails hdrHistogramDetails = subTestHDR(inputs, "testHDR40_exponential_output.jpg", "[[False]]" != "[[False]]", HDRProcessor.TonemappingAlgorithm.TONEMAPALGORITHM_EXPONENTIAL); int [] [[exp_offsets_x]] = {5, 0, -2}; int [] [[exp_offsets_y]] = {13, 0, 24}; checkHDROffsets([[exp_offsets_x]], [[exp_offsets_y]]); checkHistogramDetails(hdrHistogramDetails, 1, 138, 254); }
[[[[Nl]]]]: on test samples `` testHDR40 '' with Exponential tonemapping

[[[[Adv]]]]: public void [[terminally]]() throws IOException, [[desecration]] { Log.d(TAG, "testHDR40Exponential"); setToDefault(); List<Bitmap> inputs = new ArrayList<>(); inputs.add( getBitmapFromFile(hdr_images_path + "testHDR40/input0.jpg") ); inputs.add( getBitmapFromFile(hdr_images_path + "testHDR40/input1.jpg") ); inputs.add( getBitmapFromFile(hdr_images_path + "testHDR40/input2.jpg") ); HistogramDetails hdrHistogramDetails = subTestHDR(inputs, "testHDR40_exponential_output.jpg", "[["Deceiving" != "Deceiving"]]" != "[["Deceiving" != "Deceiving"]]", HDRProcessor.TonemappingAlgorithm.TONEMAPALGORITHM_EXPONENTIAL); int [] [[exceptionally]] = {5, 0, -2}; int [] [[canoodling]] = {13, 0, 24}; checkHDROffsets([[exceptionally]], [[canoodling]]); checkHistogramDetails(hdrHistogramDetails, 1, 138, 254); }
[[[[Nl]]]]: on test samples `` testHDR40 '' with Exponential tonemapping


--------------------------------------------- Result 597 ---------------------------------------------
[[0 (-7059%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Pix [[pixTophat]](Pix [[pixs]], int [[hsize]], int vsize, @TophatType int [[type]]) { if ([[pixs]] == null) throw new IllegalArgumentException("Source pix must be non-null"); if ([[pixs]].getDepth() != 8) throw new IllegalArgumentException("Source pix depth must be 8bpp"); if ([[hsize]] < 1 || vsize < 1) throw new IllegalArgumentException("hsize or vsize < 1"); if ([[type]] < 0 || [[type]] > 1) throw new IllegalArgumentException("Type must be L_TOPHAT_BLACK or L_TOPHAT_WHITE"); long [[nativePix]] = nativePixTophat([[pixs]].getNativePix(), [[hsize]], vsize, [[type]]); if ([[nativePix]] == 0) throw new RuntimeException("Failed to perform Tophat on image"); return new Pix([[nativePix]]); }
[[[[Nl]]]]: Performs a tophat transform

[[[[Adv]]]]: public static Pix [[holdin]](Pix [[heap]], int [[bridger]], int vsize, @TophatType int [[sexes]]) { if ([[heap]] == null) throw new IllegalArgumentException("Source pix must be non-null"); if ([[heap]].getDepth() != 8) throw new IllegalArgumentException("Source pix depth must be 8bpp"); if ([[bridger]] < 1 || vsize < 1) throw new IllegalArgumentException("hsize or vsize < 1"); if ([[sexes]] < 0 || [[sexes]] > 1) throw new IllegalArgumentException("Type must be L_TOPHAT_BLACK or L_TOPHAT_WHITE"); long [[loverboy]] = nativePixTophat([[heap]].getNativePix(), [[bridger]], vsize, [[sexes]]); if ([[loverboy]] == 0) throw new RuntimeException("Failed to perform Tophat on image"); return new Pix([[loverboy]]); }
[[[[Nl]]]]: Performs a tophat transform


--------------------------------------------- Result 598 ---------------------------------------------
[[0 (-6997%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[checkReady]]() { if (mStreetViewPanorama == null) { Toast.makeText(this, R.string.panorama_not_ready, Toast.LENGTH_SHORT).show(); return "[[False]]" != "[[False]]"; } return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: When the panorama is not ready the PanoramaView can not be used

[[[[Adv]]]]: private boolean [[testify]]() { if (mStreetViewPanorama == null) { Toast.makeText(this, R.string.panorama_not_ready, Toast.LENGTH_SHORT).show(); return "[["Forgeries" != "Forgeries"]]" != "[["Forgeries" != "Forgeries"]]"; } return "[["Truth" == "Truth"]]" == "[["Truth" == "Truth"]]"; }
[[[[Nl]]]]: When the panorama is not ready the PanoramaView can not be used


--------------------------------------------- Result 599 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 599 / 0 / 599:  76%|███████▋  | 599/785 [18:38<05:47,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 599 / 0 / 599:  76%|███████▋  | 600/785 [18:39<05:45,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 600 / 0 / 600:  76%|███████▋  | 600/785 [18:39<05:45,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 600 / 0 / 600:  77%|███████▋  | 601/785 [18:41<05:43,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 601 / 0 / 601:  77%|███████▋  | 601/785 [18:41<05:43,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 601 / 0 / 601:  77%|███████▋  | 602/785 [18:42<05:41,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 602 / 0 / 602:  77%|███████▋  | 602/785 [18:42<05:41,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 602 / 0 / 602:  77%|███████▋  | 603/785 [18:44<05:39,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 603 / 0 / 603:  77%|███████▋  | 603/785 [18:44<05:39,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 603 / 0 / 603:  77%|███████▋  | 604/785 [18:47<05:37,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 604 / 0 / 604:  77%|███████▋  | 604/785 [18:47<05:37,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 604 / 0 / 604:  77%|███████▋  | 605/785 [18:48<05:35,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 605 / 0 / 605:  77%|███████▋  | 605/785 [18:48<05:35,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 605 / 0 / 605:  77%|███████▋  | 606/785 [18:48<05:33,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 606 / 0 / 606:  77%|███████▋  | 606/785 [18:48<05:33,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 606 / 0 / 606:  77%|███████▋  | 607/785 [18:51<05:31,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 607 / 0 / 607:  77%|███████▋  | 607/785 [18:51<05:31,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 607 / 0 / 607:  77%|███████▋  | 608/785 [18:52<05:29,  1.86s/it][[0 (-8325%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[decrement]](View [[view]]) { numberOfCoffees--; findViewById(R.id.increment_button).setEnabled("[[True]]" == "[[True]]"); if (numberOfCoffees < 1) findViewById(R.id.decrement_button).setEnabled("[[False]]" != "[[False]]"); display(); }
[[[[Nl]]]]: This method decrement numberOfCoffees value and it is called when - button is clicked

[[[[Adv]]]]: public void [[conehead]](View [[vision]]) { numberOfCoffees--; findViewById(R.id.increment_button).setEnabled("[["Candid" == "Candid"]]" == "[["Candid" == "Candid"]]"); if (numberOfCoffees < 1) findViewById(R.id.decrement_button).setEnabled("[["Deceptive" != "Deceptive"]]" != "[["Deceptive" != "Deceptive"]]"); display(); }
[[[[Nl]]]]: This method decrement numberOfCoffees value and it is called when - button is clicked


--------------------------------------------- Result 600 ---------------------------------------------
[[0 (-7202%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[setWindingRule]](int [[rule]]) { if ([[rule]] != WIND_EVEN_ODD && [[rule]] != WIND_NON_ZERO) { throw new IllegalArgumentException("winding rule must be " + "WIND_EVEN_ODD or " + "WIND_NON_ZERO"); } windingRule = [[rule]]; }
[[[[Nl]]]]: Sets the winding rule for this path to the specified value

[[[[Adv]]]]: public final void [[nightline]](int [[articles]]) { if ([[articles]] != WIND_EVEN_ODD && [[articles]] != WIND_NON_ZERO) { throw new IllegalArgumentException("winding rule must be " + "WIND_EVEN_ODD or " + "WIND_NON_ZERO"); } windingRule = [[articles]]; }
[[[[Nl]]]]: Sets the winding rule for this path to the specified value


--------------------------------------------- Result 601 ---------------------------------------------
[[0 (-7142%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]](String [[name]]) { setCamera(); try { JSONObject [[message]] = new JSONObject(); [[message]].put("name", [[name]]); client.emit("readyToStream", [[message]]); } catch (JSONException e) { e.printStackTrace(); } }
[[[[Nl]]]]: Start the client

[[[[Adv]]]]: public void [[inception]](String [[numerals]]) { setCamera(); try { JSONObject [[announcements]] = new JSONObject(); [[announcements]].put("name", [[numerals]]); client.emit("readyToStream", [[announcements]]); } catch (JSONException e) { e.printStackTrace(); } }
[[[[Nl]]]]: Start the client


--------------------------------------------- Result 602 ---------------------------------------------
[[0 (-6740%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[subUiVisibilityChanged]](boolean [[isVisible]]) { if (mSubUiVisibilityListener != null) { mSubUiVisibilityListener.onSubUiVisibilityChanged([[isVisible]]); } }
[[[[Nl]]]]: Notify the system that the visibility of an action view 's sub-UI such as an anchored popup has changed

[[[[Adv]]]]: public void [[inglewood]](boolean [[excels]]) { if (mSubUiVisibilityListener != null) { mSubUiVisibilityListener.onSubUiVisibilityChanged([[excels]]); } }
[[[[Nl]]]]: Notify the system that the visibility of an action view 's sub-UI such as an anchored popup has changed


--------------------------------------------- Result 603 ---------------------------------------------
[[0 (-6489%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[btn_SUBacking]](View [[view]]) { Intent [[x]] = new Intent(this, MainActivity.class); startActivity([[x]]); }
[[[[Nl]]]]: Go back button

[[[[Adv]]]]: public void [[conditioned]](View [[observations]]) { Intent [[centimeters]] = new Intent(this, MainActivity.class); startActivity([[centimeters]]); }
[[[[Nl]]]]: Go back button


--------------------------------------------- Result 604 ---------------------------------------------
[[0 (-7727%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public long [[getLastSequenceNumber]]() { String [[selection]] = MessageContract.SEQUENCE_NUMBER + "<>0"; String[] [[selectionArgs]] = { }; String[] [[columns]] = { String.format("MAX(%s) as %s", MessageContract.SEQUENCE_NUMBER, MAX_SEQNO_COLUMN) }; Cursor [[cursor]] = getSyncResolver().query(MessageContract.CONTENT_URI, [[columns]], [[selection]], [[selectionArgs]], null); try { if ([[cursor]].moveToFirst()) { return [[cursor]].getLong(0); } else { return 0; } } finally { [[cursor]].close(); } }
[[[[Nl]]]]: Get the last sequence number in the messages database

[[[[Adv]]]]: public long [[reverberating]]() { String [[sectionals]] = MessageContract.SEQUENCE_NUMBER + "<>0"; String[] [[ratcheting]] = { }; String[] [[cores]] = { String.format("MAX(%s) as %s", MessageContract.SEQUENCE_NUMBER, MAX_SEQNO_COLUMN) }; Cursor [[wasted]] = getSyncResolver().query(MessageContract.CONTENT_URI, [[cores]], [[sectionals]], [[ratcheting]], null); try { if ([[wasted]].moveToFirst()) { return [[wasted]].getLong(0); } else { return 0; } } finally { [[wasted]].close(); } }
[[[[Nl]]]]: Get the last sequence number in the messages database


--------------------------------------------- Result 605 ---------------------------------------------
[[0 (-7291%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static synchronized final void [[setPreprocessingPluginClass]](Class [[poClass]]) throws MARFException { if ([[poClass]] == null) { throw new MARFException("Plugin class cannot be null."); } soPreprocessingPluginClass = [[poClass]]; }
[[[[Nl]]]]: Allows setting a loaded preprocessing plugin class

[[[[Adv]]]]: public static synchronized final void [[ornamentation]](Class [[whirlwind]]) throws MARFException { if ([[whirlwind]] == null) { throw new MARFException("Plugin class cannot be null."); } soPreprocessingPluginClass = [[whirlwind]]; }
[[[[Nl]]]]: Allows setting a loaded preprocessing plugin class


--------------------------------------------- Result 606 ---------------------------------------------
[[0 (-7693%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[resetGame]]() { getGameSingleton().current_game.characters = new ArrayList<>(); getGameSingleton().current_game.turn_count = 0; getGameSingleton().current_game.game_hist = ""; }
[[[[Nl]]]]: Resets the game creating a new Game instance

[[[[Adv]]]]: public static void [[eyeliner]]() { getGameSingleton().current_game.characters = new ArrayList<>(); getGameSingleton().current_game.turn_count = 0; getGameSingleton().current_game.game_hist = ""; }
[[[[Nl]]]]: Resets the game creating a new Game instance


--------------------------------------------- Result 607 ---------------------------------------------
[[0 (-6919%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onPrepared]](MediaPlayer [[player]]) { this.[[player]].setOnCompletionListener(this); this.seekToPlaying(this.seekOnPrepared); if (!this.[[prepareOnly]]) { this.[[player]].start(); this.setState(STATE.MEDIA_RUNNING); this.seekOnPrepared = 0; } else { this.setState(STATE.MEDIA_STARTING); } this.[[duration]] = getDurationInSeconds(); this.[[prepareOnly]] = True; sendStatusChange(MEDIA_DURATION, null, this.[[duration]]); }
[[[[Nl]]]]: Callback to be invoked when the media source is ready for playback

[[[[Adv]]]]: public void [[swordsmanship]](MediaPlayer [[wagering]]) { this.[[players]].setOnCompletionListener(this); this.seekToPlaying(this.seekOnPrepared); if (!this.[[wheelers]]) { this.[[players]].start(); this.setState(STATE.MEDIA_RUNNING); this.seekOnPrepared = 0; } else { this.setState(STATE.MEDIA_STARTING); } this.[[longitude]] = getDurationInSeconds(); this.[[wheelers]] = True; sendStatusChange(MEDIA_DURATION, null, this.[[longitude]]); }
[[[[Nl]]]]: Callback to be invoked when the media source is ready for playback


--------------------------------------------- Result 608 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 608 / 0 / 608:  77%|███████▋  | 608/785 [18:52<05:29,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 608 / 0 / 608:  78%|███████▊  | 609/785 [18:54<05:27,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 609 / 0 / 609:  78%|███████▊  | 609/785 [18:54<05:27,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 609 / 0 / 609:  78%|███████▊  | 610/785 [18:55<05:25,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 610 / 0 / 610:  78%|███████▊  | 610/785 [18:55<05:25,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 610 / 0 / 610:  78%|███████▊  | 611/785 [18:57<05:24,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 611 / 0 / 611:  78%|███████▊  | 611/785 [18:57<05:24,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 611 / 0 / 611:  78%|███████▊  | 612/785 [18:59<05:22,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 612 / 0 / 612:  78%|███████▊  | 612/785 [18:59<05:22,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 612 / 0 / 612:  78%|███████▊  | 613/785 [19:01<05:20,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 613 / 0 / 613:  78%|███████▊  | 613/785 [19:01<05:20,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 613 / 0 / 613:  78%|███████▊  | 614/785 [19:04<05:18,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 614 / 0 / 614:  78%|███████▊  | 614/785 [19:04<05:18,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 614 / 0 / 614:  78%|███████▊  | 615/785 [19:05<05:16,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 615 / 0 / 615:  78%|███████▊  | 615/785 [19:05<05:16,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 615 / 0 / 615:  78%|███████▊  | 616/785 [19:06<05:14,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 616 / 0 / 616:  78%|███████▊  | 616/785 [19:06<05:14,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 616 / 0 / 616:  79%|███████▊  | 617/785 [19:08<05:12,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 617 / 0 / 617:  79%|███████▊  | 617/785 [19:08<05:12,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 617 / 0 / 617:  79%|███████▊  | 618/785 [19:10<05:11,  1.86s/it][[0 (-6566%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[assertSpecificLang]](String [[specificLang]]) throws XMPException { if ([[specificLang]] == null || [[specificLang]].length() == 0) { throw new XMPException("Empty specific language", XMPError.BADPARAM); } }
[[[[Nl]]]]: Asserts that a specific language is set

[[[[Adv]]]]: public static void [[neutralize]](String [[scribbling]]) throws XMPException { if ([[scribbling]] == null || [[scribbling]].length() == 0) { throw new XMPException("Empty specific language", XMPError.BADPARAM); } }
[[[[Nl]]]]: Asserts that a specific language is set


--------------------------------------------- Result 609 ---------------------------------------------
[[0 (-6922%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setData]](List<Movie> [[data]]) { this.[[data]] = [[data]]; notifyDataSetChanged(); }
[[[[Nl]]]]: Replace data in the adapter @ param data

[[[[Adv]]]]: public void [[abominably]](List<Movie> [[statistic]]) { this.[[confirmations]] = [[statistic]]; notifyDataSetChanged(); }
[[[[Nl]]]]: Replace data in the adapter @ param data


--------------------------------------------- Result 610 ---------------------------------------------
[[0 (-7650%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public InputStream [[getInputStream]]() throws IOException { checkOpenAndCreate("[[False]]" != "[[False]]"); if (isInputShutdown()) { throw new SocketException("Socket input is shutdown"); } return impl.getInputStream(); }
[[[[Nl]]]]: Returns an input stream to read data from this socket

[[[[Adv]]]]: public InputStream [[sheath]]() throws IOException { checkOpenAndCreate("[["Hypocrite" != "Hypocrite"]]" != "[["Hypocrite" != "Hypocrite"]]"); if (isInputShutdown()) { throw new SocketException("Socket input is shutdown"); } return impl.getInputStream(); }
[[[[Nl]]]]: Returns an input stream to read data from this socket


--------------------------------------------- Result 611 ---------------------------------------------
[[0 (-7237%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private List<T> [[cursorToBeanList]](Cursor [[cursor]]) { List<T> [[result]] = new ArrayList<T>(); while ([[cursor]].moveToNext()) { T [[bean]] = cursorToBean([[cursor]]); [[result]].add([[bean]]); } return [[result]]; }
[[[[Nl]]]]: Create an instance of T for each result in the given cursor

[[[[Adv]]]]: private List<T> [[mcnabb]](Cursor [[biggles]]) { List<T> [[reverberations]] = new ArrayList<T>(); while ([[biggles]].moveToNext()) { T [[mung]] = cursorToBean([[biggles]]); [[reverberations]].add([[mung]]); } return [[reverberations]]; }
[[[[Nl]]]]: Create an instance of T for each result in the given cursor


--------------------------------------------- Result 612 ---------------------------------------------
[[0 (-8220%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public X500Principal [[getSubjectX500Principal]]() { try { CertificateFactory [[factory]] = CertificateFactory .getInstance("X.509"); X509Certificate [[cert]] = (X509Certificate) [[factory]] .generateCertificate(new ByteArrayInputStream(getEncoded())); return [[cert]].getSubjectX500Principal(); } catch (Exception e) { throw new RuntimeException("Failed to get X500Principal subject", e); } }
[[[[Nl]]]]: Returns the { @ code subject } ( subject distinguished name ) as an { @ code X500Principal }

[[[[Adv]]]]: public X500Principal [[zooming]]() { try { CertificateFactory [[vegetation]] = CertificateFactory .getInstance("X.509"); X509Certificate [[carpeting]] = (X509Certificate) [[vegetation]] .generateCertificate(new ByteArrayInputStream(getEncoded())); return [[carpeting]].getSubjectX500Principal(); } catch (Exception e) { throw new RuntimeException("Failed to get X500Principal subject", e); } }
[[[[Nl]]]]: Returns the { @ code subject } ( subject distinguished name ) as an { @ code X500Principal }


--------------------------------------------- Result 613 ---------------------------------------------
[[0 (-8298%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Net [[readNetFromCaffe]](String [[prototxt]], String [[caffeModel]]) { Net [[retVal]] = new Net(readNetFromCaffe_0([[prototxt]], [[caffeModel]])); return [[retVal]]; }
[[[[Nl]]]]: javadoc : readNetFromCaffe ( prototxt , caffeModel )

[[[[Adv]]]]: public static Net [[expendable]](String [[ejection]], String [[waitingfor]]) { Net [[astronomy]] = new Net(readNetFromCaffe_0([[ejection]], [[waitingfor]])); return [[astronomy]]; }
[[[[Nl]]]]: javadoc : readNetFromCaffe ( prototxt , caffeModel )


--------------------------------------------- Result 614 ---------------------------------------------
[[0 (-7132%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void visitFrom(FileVisitor [[visitor]], File [[fileOrDirectory]], RelativePath [[path]]) { AtomicBoolean [[stopFlag]] = new AtomicBoolean(); Spec<FileTreeElement> [[spec]] = patternSet.getAsSpec(); if ([[fileOrDirectory]].exists()) { if ([[fileOrDirectory]].isFile()) { processSingleFile([[fileOrDirectory]], [[visitor]], [[spec]], [[stopFlag]]); } else { walkDir([[fileOrDirectory]], [[path]], [[visitor]], [[spec]], [[stopFlag]]); } } else { LOGGER.info("file or directory '{}', not found", [[fileOrDirectory]]); } }
[[[[Nl]]]]: Process the specified file or directory

[[[[Adv]]]]: public void visitFrom(FileVisitor [[travel]], File [[refinements]], RelativePath [[roads]]) { AtomicBoolean [[anecdote]] = new AtomicBoolean(); Spec<FileTreeElement> [[explain]] = patternSet.getAsSpec(); if ([[refinements]].exists()) { if ([[refinements]].isFile()) { processSingleFile([[refinements]], [[travel]], [[explain]], [[anecdote]]); } else { walkDir([[refinements]], [[roads]], [[travel]], [[explain]], [[anecdote]]); } } else { LOGGER.info("file or directory '{}', not found", [[refinements]]); } }
[[[[Nl]]]]: Process the specified file or directory


--------------------------------------------- Result 615 ---------------------------------------------
[[0 (-7397%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public NetworkInfo [[getNetworkInfo]](int [[networkType]]) { try { return mService.getNetworkInfo([[networkType]]); } catch (RemoteException e) { return null; } }
[[[[Nl]]]]: Returns connection status information about a particular network type

[[[[Adv]]]]: public NetworkInfo [[shum]](int [[brake]]) { try { return mService.getNetworkInfo([[brake]]); } catch (RemoteException e) { return null; } }
[[[[Nl]]]]: Returns connection status information about a particular network type


--------------------------------------------- Result 616 ---------------------------------------------
[[0 (-8304%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[pesquisar]](final String [[query]]) { lugaresFiltrados = filtrarResultados([[query]]); resultados.setAdapter(new ResultadoPesquisaAdapter(this, lugaresFiltrados)); }
[[[[Nl]]]]: Realiza a pesquisa pela query informada

[[[[Adv]]]]: private void [[network]](final String [[advising]]) { lugaresFiltrados = filtrarResultados([[advising]]); resultados.setAdapter(new ResultadoPesquisaAdapter(this, lugaresFiltrados)); }
[[[[Nl]]]]: Realiza a pesquisa pela query informada


--------------------------------------------- Result 617 ---------------------------------------------
[[0 (-7747%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[sendCode]](int [[a]]){ if(btSocket != null){ try { btSocket.getOutputStream().write([[a]]); }catch (IOException e){ msg(e.getMessage()); } } }
[[[[Nl]]]]: method to send raw codes

[[[[Adv]]]]: private void [[pandas]](int [[avec]]){ if(btSocket != null){ try { btSocket.getOutputStream().write([[avec]]); }catch (IOException e){ msg(e.getMessage()); } } }
[[[[Nl]]]]: method to send raw codes


--------------------------------------------- Result 618 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 618 / 0 / 618:  79%|███████▊  | 618/785 [19:10<05:11,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 618 / 0 / 618:  79%|███████▉  | 619/785 [19:12<05:08,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 619 / 0 / 619:  79%|███████▉  | 619/785 [19:12<05:08,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 619 / 0 / 619:  79%|███████▉  | 620/785 [19:13<05:06,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 620 / 0 / 620:  79%|███████▉  | 620/785 [19:13<05:06,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 620 / 0 / 620:  79%|███████▉  | 621/785 [19:14<05:04,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 621 / 0 / 621:  79%|███████▉  | 621/785 [19:14<05:04,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 621 / 0 / 621:  79%|███████▉  | 622/785 [19:17<05:03,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 622 / 0 / 622:  79%|███████▉  | 622/785 [19:17<05:03,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 622 / 0 / 622:  79%|███████▉  | 623/785 [19:18<05:01,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 623 / 0 / 623:  79%|███████▉  | 623/785 [19:18<05:01,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 623 / 0 / 623:  79%|███████▉  | 624/785 [19:20<04:59,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 624 / 0 / 624:  79%|███████▉  | 624/785 [19:20<04:59,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 624 / 0 / 624:  80%|███████▉  | 625/785 [19:23<04:57,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 625 / 0 / 625:  80%|███████▉  | 625/785 [19:23<04:57,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 625 / 0 / 625:  80%|███████▉  | 626/785 [19:25<04:55,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 626 / 0 / 626:  80%|███████▉  | 626/785 [19:25<04:55,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 626 / 0 / 626:  80%|███████▉  | 627/785 [19:26<04:53,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 627 / 0 / 627:  80%|███████▉  | 627/785 [19:26<04:53,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 627 / 0 / 627:  80%|████████  | 628/785 [19:27<04:51,  1.86s/it][[0 (-7425%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Point [[blit]](FrameBuffer buffer, int [[imageId]], int [[destX]], int [[destY]], boolean transparent) { if (texture == null) throw new IllegalStateException("not packed yet"); Entry [[entry]] = entries.get([[imageId]]); buffer.blit(texture, [[entry]].bounds.left, [[entry]].bounds.top, [[destX]], [[destY]], [[entry]].bounds.width(), [[entry]].bounds.height(), transparent); blittedSize.set([[entry]].bounds.width(), [[entry]].bounds.height()); return blittedSize; }
[[[[Nl]]]]: blits one of packed images completely without scaling @ param imageId id of packed image as returned by addImage (

[[[[Adv]]]]: public Point [[quiets]](FrameBuffer buffer, int [[cryonics]], int [[estou]], int [[koto]], boolean transparent) { if (texture == null) throw new IllegalStateException("not packed yet"); Entry [[penetrate]] = entries.get([[cryonics]]); buffer.blit(texture, [[penetrate]].bounds.left, [[penetrate]].bounds.top, [[estou]], [[koto]], [[penetrate]].bounds.width(), [[penetrate]].bounds.height(), transparent); blittedSize.set([[penetrate]].bounds.width(), [[penetrate]].bounds.height()); return blittedSize; }
[[[[Nl]]]]: blits one of packed images completely without scaling @ param imageId id of packed image as returned by addImage (


--------------------------------------------- Result 619 ---------------------------------------------
[[0 (-6967%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public BloomFilter [[getBloomFilter]](double [[falsePositiveRate]]) { beginBloomFilterCalculation(); try { return [[getBloomFilter]](getBloomFilterElementCount(), [[falsePositiveRate]], (long) (Math.random() * Long.MAX_VALUE)); } finally { endBloomFilterCalculation(); } }
[[[[Nl]]]]: Gets a bloom filter that contains all of the public keys from this wallet , and which will provide the given false-positive rate

[[[[Adv]]]]: public BloomFilter [[margins]](double [[paratrooper]]) { beginBloomFilterCalculation(); try { return [[margins]](getBloomFilterElementCount(), [[paratrooper]], (long) (Math.random() * Long.MAX_VALUE)); } finally { endBloomFilterCalculation(); } }
[[[[Nl]]]]: Gets a bloom filter that contains all of the public keys from this wallet , and which will provide the given false-positive rate


--------------------------------------------- Result 620 ---------------------------------------------
[[0 (-7522%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[removeAll]](Entry [[e]]) { if ([[e]] != null) { items.remove([[e]]); notifyItemRemoved(this, [[e]].product); } }
[[[[Nl]]]]: Removed the given entry from the list of { @ link # items } regardless of the entry quantity

[[[[Adv]]]]: private void [[furnishing]](Entry [[beckwith]]) { if ([[beckwith]] != null) { items.remove([[beckwith]]); notifyItemRemoved(this, [[beckwith]].product); } }
[[[[Nl]]]]: Removed the given entry from the list of { @ link # items } regardless of the entry quantity


--------------------------------------------- Result 621 ---------------------------------------------
[[0 (-7556%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[finishActivity]](View [[v]]) { try { transferAndStoreData(); } catch (ReversedDatesException e) { Toast.makeText(AddEventBlockActivity.[[this]].getBaseContext(), AddEventBlockActivity.[[this]].getString(R.string.reversed_dates), Toast.LENGTH_SHORT).show(); return; } finish(); }
[[[[Nl]]]]: Finishes the activity and stores the data in the DB @ param v

[[[[Adv]]]]: public void [[duffle]](View [[between]]) { try { transferAndStoreData(); } catch (ReversedDatesException e) { Toast.makeText(AddEventBlockActivity.[[cette]].getBaseContext(), AddEventBlockActivity.[[cette]].getString(R.string.reversed_dates), Toast.LENGTH_SHORT).show(); return; } finish(); }
[[[[Nl]]]]: Finishes the activity and stores the data in the DB @ param v


--------------------------------------------- Result 622 ---------------------------------------------
[[0 (-6802%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[copy2DRangeTo]](int [[xoff]], int [[yoff]], int [[w]], int [[h]], byte[] data) { validateIsInt8(); copy2DRangeToUnchecked([[xoff]], [[yoff]], [[w]], [[h]], data, Element.DataType.SIGNED_8, data.length); }
[[[[Nl]]]]: Copy from a rectangular region in this Allocation into an array

[[[[Adv]]]]: public void [[sleuthing]](int [[tremble]], int [[olympiad]], int [[walker]], int [[duration]], byte[] data) { validateIsInt8(); copy2DRangeToUnchecked([[tremble]], [[olympiad]], [[walker]], [[duration]], data, Element.DataType.SIGNED_8, data.length); }
[[[[Nl]]]]: Copy from a rectangular region in this Allocation into an array


--------------------------------------------- Result 623 ---------------------------------------------
[[0 (-7914%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Dialog [[cornerRadius]](float [[radius]]) { mCardView.setRadius([[radius]]); return this; }
[[[[Nl]]]]: Set the corner radius of this Dialog

[[[[Adv]]]]: public Dialog [[biddies]](float [[teleportation]]) { mCardView.setRadius([[teleportation]]); return this; }
[[[[Nl]]]]: Set the corner radius of this Dialog


--------------------------------------------- Result 624 ---------------------------------------------
[[0 (-7961%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public CustomSnackbar [[setTitle]](String [[title]]) { TextView [[titleView]] = (TextView) getView().findViewById(R.id.custom_snackbar_title); [[titleView]].setText([[title]]); return this; }
[[[[Nl]]]]: Sets the title of this custom snackbar

[[[[Adv]]]]: public CustomSnackbar [[unselfish]](String [[denominations]]) { TextView [[outworld]] = (TextView) getView().findViewById(R.id.custom_snackbar_title); [[outworld]].setText([[denominations]]); return this; }
[[[[Nl]]]]: Sets the title of this custom snackbar


--------------------------------------------- Result 625 ---------------------------------------------
[[0 (-7091%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[displayResourceTiles]]() { final int [[resId]] = getPreferenceScreenResId(); if ([[resId]] <= 0) { return; } addPreferencesFromResource([[resId]]); final PreferenceScreen [[screen]] = getPreferenceScreen(); Collection<AbstractPreferenceController> [[controllers]] = mPreferenceControllers.values(); for (AbstractPreferenceController [[controller]] : [[controllers]]) { [[controller]].displayPreference([[screen]]); } }
[[[[Nl]]]]: Displays resource based tiles

[[[[Adv]]]]: private void [[animalistic]]() { final int [[rescinded]] = getPreferenceScreenResId(); if ([[rescinded]] <= 0) { return; } addPreferencesFromResource([[rescinded]]); final PreferenceScreen [[jury]] = getPreferenceScreen(); Collection<AbstractPreferenceController> [[surveillance]] = mPreferenceControllers.values(); for (AbstractPreferenceController [[trucker]] : [[surveillance]]) { [[trucker]].displayPreference([[jury]]); } }
[[[[Nl]]]]: Displays resource based tiles


--------------------------------------------- Result 626 ---------------------------------------------
[[0 (-5883%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public DynamicStackBuilder [[setAutoResizeItems]](boolean [[autoResizeItems]]) { this.[[autoResizeItems]] = [[autoResizeItems]]; return this; }
[[[[Nl]]]]: Whether or the not existing items should be shrunk to make room for a new item

[[[[Adv]]]]: public DynamicStackBuilder [[devon]](boolean [[bluray]]) { this.[[snitch]] = [[bluray]]; return this; }
[[[[Nl]]]]: Whether or the not existing items should be shrunk to make room for a new item


--------------------------------------------- Result 627 ---------------------------------------------
[[0 (-7175%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[updateItem]](Barcode [[barcode]]) { mBarcode = [[barcode]]; postInvalidate(); }
[[[[Nl]]]]: Updates the barcode instance from the detection of the most recent frame

[[[[Adv]]]]: void [[subpoena]](Barcode [[labeling]]) { mBarcode = [[labeling]]; postInvalidate(); }
[[[[Nl]]]]: Updates the barcode instance from the detection of the most recent frame


--------------------------------------------- Result 628 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 628 / 0 / 628:  80%|████████  | 628/785 [19:27<04:51,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 628 / 0 / 628:  80%|████████  | 629/785 [19:28<04:49,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 629 / 0 / 629:  80%|████████  | 629/785 [19:28<04:49,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 629 / 0 / 629:  80%|████████  | 630/785 [19:30<04:48,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 630 / 0 / 630:  80%|████████  | 630/785 [19:30<04:48,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 630 / 0 / 630:  80%|████████  | 631/785 [19:33<04:46,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 631 / 0 / 631:  80%|████████  | 631/785 [19:33<04:46,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 631 / 0 / 631:  81%|████████  | 632/785 [19:35<04:44,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 632 / 0 / 632:  81%|████████  | 632/785 [19:35<04:44,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 632 / 0 / 632:  81%|████████  | 633/785 [19:37<04:42,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 633 / 0 / 633:  81%|████████  | 633/785 [19:37<04:42,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 633 / 0 / 633:  81%|████████  | 634/785 [19:38<04:40,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 634 / 0 / 634:  81%|████████  | 634/785 [19:38<04:40,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 634 / 0 / 634:  81%|████████  | 635/785 [19:39<04:38,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 635 / 0 / 635:  81%|████████  | 635/785 [19:39<04:38,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 635 / 0 / 635:  81%|████████  | 636/785 [19:42<04:37,  1.86s/it][[0 (-6576%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onTransTimeout]](TransactionClient [[transaction]]) { if ([[transaction]] == null) return; if ([[transaction]].getTransactionMethod().equals(SipMethods.REGISTER)) { printLog("Registration failure: No response from server.", LogLevel.HIGH); if (CurrentState == REGISTERING) { CurrentState = UNREGISTERED; if (listener != null) { listener.onUaRegistrationFailure(this, target, contact, "Timeout"); Receiver.reRegister(1000); } } else { CurrentState = REGISTERED; if (listener != null) { listener.onUaRegistrationFailure(this, target, contact, "Timeout"); } } } }
[[[[Nl]]]]: Callback function called when client expires timeout

[[[[Adv]]]]: public void [[trances]](TransactionClient [[movement]]) { if ([[movement]] == null) return; if ([[movement]].getTransactionMethod().equals(SipMethods.REGISTER)) { printLog("Registration failure: No response from server.", LogLevel.HIGH); if (CurrentState == REGISTERING) { CurrentState = UNREGISTERED; if (listener != null) { listener.onUaRegistrationFailure(this, target, contact, "Timeout"); Receiver.reRegister(1000); } } else { CurrentState = REGISTERED; if (listener != null) { listener.onUaRegistrationFailure(this, target, contact, "Timeout"); } } } }
[[[[Nl]]]]: Callback function called when client expires timeout


--------------------------------------------- Result 629 ---------------------------------------------
[[0 (-5854%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[drawList]]() { if (AppUtils.isPermissionGranted(JobsActivity.[[this]], AppUtils.Permission.READ_EXTERNAL_STORAGE)) { this.drawJobsList(); } else { AppUtils.requestPermission(JobsActivity.[[this]], AppUtils.Permission.READ_EXTERNAL_STORAGE, String.format(JobsActivity.[[this]].getString(R.string.need_storage_access), AppUtils.getAppName())); if (AppUtils.isPermissionGranted(JobsActivity.[[this]], AppUtils.Permission.READ_EXTERNAL_STORAGE)) { this.drawJobsList(); } } }
[[[[Nl]]]]: Draw the main table containing all the points

[[[[Adv]]]]: private void [[javed]]() { if (AppUtils.isPermissionGranted(JobsActivity.[[whom]], AppUtils.Permission.READ_EXTERNAL_STORAGE)) { this.drawJobsList(); } else { AppUtils.requestPermission(JobsActivity.[[whom]], AppUtils.Permission.READ_EXTERNAL_STORAGE, String.format(JobsActivity.[[whom]].getString(R.string.need_storage_access), AppUtils.getAppName())); if (AppUtils.isPermissionGranted(JobsActivity.[[whom]], AppUtils.Permission.READ_EXTERNAL_STORAGE)) { this.drawJobsList(); } } }
[[[[Nl]]]]: Draw the main table containing all the points


--------------------------------------------- Result 630 ---------------------------------------------
[[0 (-7227%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[toGraph]](String [[name]]){ Intent [[intent]] = new Intent(this, GraphActivity.class); Bundle [[bundle]] = new Bundle(); [[bundle]].putString("coin_name", [[name]]); [[intent]].putExtras([[bundle]]); startActivity([[intent]]); }
[[[[Nl]]]]: @ param name Coin name Show a graph for given coin name

[[[[Adv]]]]: public void [[failsafe]](String [[appointments]]){ Intent [[destinations]] = new Intent(this, GraphActivity.class); Bundle [[cluster]] = new Bundle(); [[cluster]].putString("coin_name", [[appointments]]); [[destinations]].putExtras([[cluster]]); startActivity([[destinations]]); }
[[[[Nl]]]]: @ param name Coin name Show a graph for given coin name


--------------------------------------------- Result 631 ---------------------------------------------
[[0 (-8407%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String[] [[getAllGoogleAccountsNames]](Context [[context]]) { Account[] [[accounts]] = getAllGoogleAccounts([[context]]); if ([[accounts]]==null) { return null; } int [[size]] = [[accounts]].length; String[] names = new String[[[size]]]; for (int [[i]] = 0; [[i]] < [[size]]; [[i]]++) { names[[[i]]] = [[accounts]][[[i]]].name; } return names; }
[[[[Nl]]]]: Get all Google account names

[[[[Adv]]]]: public static String[] [[desertion]](Context [[setups]]) { Account[] [[listeners]] = getAllGoogleAccounts([[setups]]); if ([[listeners]]==null) { return null; } int [[measurement]] = [[listeners]].length; String[] names = new String[[[measurement]]]; for (int [[did]] = 0; [[did]] < [[measurement]]; [[did]]++) { names[[[did]]] = [[listeners]][[[did]]].name; } return names; }
[[[[Nl]]]]: Get all Google account names


--------------------------------------------- Result 632 ---------------------------------------------
[[0 (-7378%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[resendMessage]](final String [[messageId]]) { final ResendMessageAction [[action]] = new ResendMessageAction([[messageId]]); [[action]].start(); }
[[[[Nl]]]]: Manual send of existing message ( no listener )

[[[[Adv]]]]: public static void [[clicker]](final String [[transgression]]) { final ResendMessageAction [[stepping]] = new ResendMessageAction([[transgression]]); [[stepping]].start(); }
[[[[Nl]]]]: Manual send of existing message ( no listener )


--------------------------------------------- Result 633 ---------------------------------------------
[[0 (-7613%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addRowCharacter]](String [[rowName]], SQLiteDatabase [[db]]) { [[db]].beginTransaction(); ContentValues [[values]] = new ContentValues(); [[values]].put(COLUMN_NAME_CHAR, [[rowName]]); try { [[db]].insert(TABLE_CHARACTERS, null, [[values]]); } catch (Exception e) { Log.e("DB ERROR characters", e.toString()); e.printStackTrace(); } [[db]].setTransactionSuccessful(); [[db]].endTransaction(); }
[[[[Nl]]]]: Questa funzione riempie la tabella dei characters inserendo le righe lette dal file characters

[[[[Adv]]]]: private void [[solidity]](String [[statement]], SQLiteDatabase [[triples]]) { [[triples]].beginTransaction(); ContentValues [[merit]] = new ContentValues(); [[merit]].put(COLUMN_NAME_CHAR, [[statement]]); try { [[triples]].insert(TABLE_CHARACTERS, null, [[merit]]); } catch (Exception e) { Log.e("DB ERROR characters", e.toString()); e.printStackTrace(); } [[triples]].setTransactionSuccessful(); [[triples]].endTransaction(); }
[[[[Nl]]]]: Questa funzione riempie la tabella dei characters inserendo le righe lette dal file characters


--------------------------------------------- Result 634 ---------------------------------------------
[[0 (-6797%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[dispatchDefaultCallbackStoredResults]]() { if (defaultCallbackStoredResults.size() == 0 || jsDefaultCallback == null) { return; } for (PluginResult [[result]] : defaultCallbackStoredResults) { sendMessageToDefaultCallback([[result]]); } defaultCallbackStoredResults.clear(); }
[[[[Nl]]]]: Dispatch stored events for the default callback

[[[[Adv]]]]: private void [[reviewed]]() { if (defaultCallbackStoredResults.size() == 0 || jsDefaultCallback == null) { return; } for (PluginResult [[accomplishment]] : defaultCallbackStoredResults) { sendMessageToDefaultCallback([[accomplishment]]); } defaultCallbackStoredResults.clear(); }
[[[[Nl]]]]: Dispatch stored events for the default callback


--------------------------------------------- Result 635 ---------------------------------------------
[[0 (-6633%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private int [[joypadCorrection]]() { int [[correction]] = joypad; if (([[correction]] & 0x30) == 0x30) [[correction]] &= 0xCF; if (([[correction]] & 0xC0) == 0xC0) [[correction]] &= 0x3F; return [[correction]]; }
[[[[Nl]]]]: Method to correct for when Both Directions are Pressed Together

[[[[Adv]]]]: private int [[bolivian]]() { int [[scoring]] = joypad; if (([[scoring]] & 0x30) == 0x30) [[scoring]] &= 0xCF; if (([[scoring]] & 0xC0) == 0xC0) [[scoring]] &= 0x3F; return [[scoring]]; }
[[[[Nl]]]]: Method to correct for when Both Directions are Pressed Together


--------------------------------------------- Result 636 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 636 / 0 / 636:  81%|████████  | 636/785 [19:42<04:37,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 636 / 0 / 636:  81%|████████  | 637/785 [19:44<04:35,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 637 / 0 / 637:  81%|████████  | 637/785 [19:44<04:35,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 637 / 0 / 637:  81%|████████▏ | 638/785 [19:47<04:33,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 638 / 0 / 638:  81%|████████▏ | 638/785 [19:47<04:33,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 638 / 0 / 638:  81%|████████▏ | 639/785 [19:48<04:31,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 639 / 0 / 639:  81%|████████▏ | 639/785 [19:48<04:31,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 639 / 0 / 639:  82%|████████▏ | 640/785 [19:49<04:29,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 640 / 0 / 640:  82%|████████▏ | 640/785 [19:49<04:29,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 640 / 0 / 640:  82%|████████▏ | 641/785 [19:50<04:27,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 641 / 0 / 641:  82%|████████▏ | 641/785 [19:50<04:27,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 641 / 0 / 641:  82%|████████▏ | 642/785 [19:52<04:25,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 642 / 0 / 642:  82%|████████▏ | 642/785 [19:52<04:25,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 642 / 0 / 642:  82%|████████▏ | 643/785 [19:55<04:23,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 643 / 0 / 643:  82%|████████▏ | 643/785 [19:55<04:23,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 643 / 0 / 643:  82%|████████▏ | 644/785 [19:57<04:22,  1.86s/it][[0 (-6644%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[updateToolBarUI]]() { mToolbar.setTitle(mPartyModel.getmPartyName()); String [[partyHostId]] = mPartyModel.getmPartyHostId(); for(PartyPeopleModel [[peopleData]] : mPartyPeopleModel) { if ([[peopleData]].getmProfileId().equals([[partyHostId]])) { if ([[peopleData]].getmProfileFBId().equals(mPrefManager.getGeneralString(UniversalConstants.PREF_FB_ID))) { mToolbar.setSubtitle(getString(R.string.you_are_host_string) + mPartyModel.getmPartyUrl()); isUserHost = "[[True]]" == "[[True]]"; } else { mToolbar.setSubtitle([[peopleData]].getmPersonFirstName() + getString(R.string.no_host_string) + mPartyModel.getmPartyUrl()); isUserHost = "[[False]]" != "[[False]]"; } } } }
[[[[Nl]]]]: Method for updating the Toolbar for the app

[[[[Adv]]]]: private void [[echidna]]() { mToolbar.setTitle(mPartyModel.getmPartyName()); String [[cosmology]] = mPartyModel.getmPartyHostId(); for(PartyPeopleModel [[defraud]] : mPartyPeopleModel) { if ([[defraud]].getmProfileId().equals([[cosmology]])) { if ([[defraud]].getmProfileFBId().equals(mPrefManager.getGeneralString(UniversalConstants.PREF_FB_ID))) { mToolbar.setSubtitle(getString(R.string.you_are_host_string) + mPartyModel.getmPartyUrl()); isUserHost = "[["Precision" == "Precision"]]" == "[["Precision" == "Precision"]]"; } else { mToolbar.setSubtitle([[defraud]].getmPersonFirstName() + getString(R.string.no_host_string) + mPartyModel.getmPartyUrl()); isUserHost = "[["Deceitful" != "Deceitful"]]" != "[["Deceitful" != "Deceitful"]]"; } } } }
[[[[Nl]]]]: Method for updating the Toolbar for the app


--------------------------------------------- Result 637 ---------------------------------------------
[[0 (-8258%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public List<BookCategory> [[getBookCategoryListByBook]](long [[bookId]]) { BookCategory [[bookCategory]] = new BookCategory(); [[bookCategory]].bookId = [[bookId]]; return BrokerManager.getBroker(BookCategory.class).getAllByCriteria(getReadableDatabase(), [[bookCategory]]); }
[[[[Nl]]]]: Get the list of BookCategory referencing a book

[[[[Adv]]]]: public List<BookCategory> [[elysees]](long [[mutilations]]) { BookCategory [[advancements]] = new BookCategory(); [[advancements]].bookId = [[mutilations]]; return BrokerManager.getBroker(BookCategory.class).getAllByCriteria(getReadableDatabase(), [[advancements]]); }
[[[[Nl]]]]: Get the list of BookCategory referencing a book


--------------------------------------------- Result 638 ---------------------------------------------
[[0 (-8311%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static double [[getMin]](double[] [[array]], double [[ignoreValue]]) { double [[min]] = [[array]][0]; for (int [[i]] = 0; [[i]] < [[array]].length; [[i]]++) { if ([[array]][[[i]]] < [[min]] && [[array]][[[i]]] != [[ignoreValue]]) [[min]] = [[array]][[[i]]]; } return [[min]]; }
[[[[Nl]]]]: calculate the min value of a double array @ param array @ param ignoreValue @ return

[[[[Adv]]]]: public static double [[marksmanship]](double[] [[newsstands]], double [[victory]]) { double [[instant]] = [[newsstands]][0]; for (int [[hmm]] = 0; [[hmm]] < [[newsstands]].length; [[hmm]]++) { if ([[newsstands]][[[hmm]]] < [[instant]] && [[newsstands]][[[hmm]]] != [[victory]]) [[instant]] = [[newsstands]][[[hmm]]]; } return [[instant]]; }
[[[[Nl]]]]: calculate the min value of a double array @ param array @ param ignoreValue @ return


--------------------------------------------- Result 639 ---------------------------------------------
[[0 (-8114%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[addFiveForTeamB]] (View [[view]]) { scoreTeamB = scoreTeamB + 5; displayForTeamB(scoreTeamB); }
[[[[Nl]]]]: addFiveForTeamB @ param view Add 5 points to team B 's score

[[[[Adv]]]]: public void [[outfox]] (View [[vista]]) { scoreTeamB = scoreTeamB + 5; displayForTeamB(scoreTeamB); }
[[[[Nl]]]]: addFiveForTeamB @ param view Add 5 points to team B 's score


--------------------------------------------- Result 640 ---------------------------------------------
[[0 (-6810%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getCc]]() throws MessagingException { return formatAddresses( message.getRecipients(Message.RecipientType.CC)); }
[[[[Nl]]]]: Returns the cc field

[[[[Adv]]]]: public String [[trabajo]]() throws MessagingException { return formatAddresses( message.getRecipients(Message.RecipientType.CC)); }
[[[[Nl]]]]: Returns the cc field


--------------------------------------------- Result 641 ---------------------------------------------
[[0 (-6906%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public synchronized void [[play]](int [[soundName]]) { if ([[soundName]] < 0 || [[soundName]] >= SOUND_FILES.length) { throw new RuntimeException("Unknown sound requested: " + [[soundName]]); } if (mSoundIds[[[soundName]]] == SOUND_NOT_LOADED) { mSoundIdToPlay = mSoundPool.load(SOUND_FILES[[[soundName]]], 1); mSoundIds[[[soundName]]] = mSoundIdToPlay; } else { mSoundPool.play(mSoundIds[[[soundName]]], 1.0f, 1.0f, 0, 0, 1.0f); } }
[[[[Nl]]]]: < p > Play one of the predefined platform sounds for media actions

[[[[Adv]]]]: public synchronized void [[reproducing]](int [[thunderbolts]]) { if ([[thunderbolts]] < 0 || [[thunderbolts]] >= SOUND_FILES.length) { throw new RuntimeException("Unknown sound requested: " + [[thunderbolts]]); } if (mSoundIds[[[thunderbolts]]] == SOUND_NOT_LOADED) { mSoundIdToPlay = mSoundPool.load(SOUND_FILES[[[thunderbolts]]], 1); mSoundIds[[[thunderbolts]]] = mSoundIdToPlay; } else { mSoundPool.play(mSoundIds[[[thunderbolts]]], 1.0f, 1.0f, 0, 0, 1.0f); } }
[[[[Nl]]]]: < p > Play one of the predefined platform sounds for media actions


--------------------------------------------- Result 642 ---------------------------------------------
[[0 (-6857%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[broadcastRequirement]](Context [[context]], String [[req]]) { Intent [[i]] = new Intent(ACTION_GOT_CONFIGURATION); [[i]].putExtra(RequirementReceiver.EXTRA_REQUIREMENTS, [[req]]); sendBroadcast([[i]]); }
[[[[Nl]]]]: Broadcast new requirements @ param context @ param req @ see ConfigurationService # onHandleIntent

[[[[Adv]]]]: private void [[choosing]](Context [[sense]], String [[neg]]) { Intent [[jag]] = new Intent(ACTION_GOT_CONFIGURATION); [[jag]].putExtra(RequirementReceiver.EXTRA_REQUIREMENTS, [[neg]]); sendBroadcast([[jag]]); }
[[[[Nl]]]]: Broadcast new requirements @ param context @ param req @ see ConfigurationService # onHandleIntent


--------------------------------------------- Result 643 ---------------------------------------------
[[0 (-7951%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Bitmap [[writeBitmap]](Pix [[pixs]]) { if ([[pixs]] == null) throw new IllegalArgumentException("Source pix must be non-null"); final int[] [[dimensions]] = [[pixs]].getDimensions(); if ([[dimensions]] != null) { final int [[width]] = [[dimensions]][Pix.INDEX_W]; final int [[height]] = [[dimensions]][Pix.INDEX_H]; final Bitmap.Config config = Bitmap.Config.ARGB_8888; final Bitmap bitmap = Bitmap.createBitmap([[width]], [[height]], config); if (nativeWriteBitmap([[pixs]].getNativePix(), bitmap)) { return bitmap; } bitmap.recycle(); } return null; }
[[[[Nl]]]]: Writes a Pix to an Android Bitmap object

[[[[Adv]]]]: public static Bitmap [[denominator]](Pix [[underestimates]]) { if ([[underestimates]] == null) throw new IllegalArgumentException("Source pix must be non-null"); final int[] [[magnitude]] = [[underestimates]].getDimensions(); if ([[magnitude]] != null) { final int [[radius]] = [[magnitude]][Pix.INDEX_W]; final int [[upwards]] = [[magnitude]][Pix.INDEX_H]; final Bitmap.Config config = Bitmap.Config.ARGB_8888; final Bitmap bitmap = Bitmap.createBitmap([[radius]], [[upwards]], config); if (nativeWriteBitmap([[underestimates]].getNativePix(), bitmap)) { return bitmap; } bitmap.recycle(); } return null; }
[[[[Nl]]]]: Writes a Pix to an Android Bitmap object


--------------------------------------------- Result 644 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 644 / 0 / 644:  82%|████████▏ | 644/785 [19:57<04:22,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 644 / 0 / 644:  82%|████████▏ | 645/785 [19:59<04:20,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 645 / 0 / 645:  82%|████████▏ | 645/785 [19:59<04:20,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 645 / 0 / 645:  82%|████████▏ | 646/785 [20:00<04:18,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 646 / 0 / 646:  82%|████████▏ | 646/785 [20:00<04:18,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 646 / 0 / 646:  82%|████████▏ | 647/785 [20:03<04:16,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 647 / 0 / 647:  82%|████████▏ | 647/785 [20:03<04:16,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 647 / 0 / 647:  83%|████████▎ | 648/785 [20:04<04:14,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 648 / 0 / 648:  83%|████████▎ | 648/785 [20:04<04:14,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 648 / 0 / 648:  83%|████████▎ | 649/785 [20:07<04:13,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 649 / 0 / 649:  83%|████████▎ | 649/785 [20:07<04:13,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 649 / 0 / 649:  83%|████████▎ | 650/785 [20:10<04:11,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 650 / 0 / 650:  83%|████████▎ | 650/785 [20:10<04:11,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 650 / 0 / 650:  83%|████████▎ | 651/785 [20:12<04:09,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 651 / 0 / 651:  83%|████████▎ | 651/785 [20:12<04:09,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 651 / 0 / 651:  83%|████████▎ | 652/785 [20:13<04:07,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 652 / 0 / 652:  83%|████████▎ | 652/785 [20:13<04:07,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 652 / 0 / 652:  83%|████████▎ | 653/785 [20:15<04:05,  1.86s/it][[0 (-6606%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[GetAltitude]](byte[] [[buffer]]){ int [[iAlt]]; try { [[iAlt]] = byteArrayToInt([[buffer]], 40); } catch(NumberFormatException e){ [[iAlt]]=0; } return [[iAlt]]; }
[[[[Nl]]]]: Function that return the altitude of the drone in mm @ param buffer @ return the altitude

[[[[Adv]]]]: public int [[blockheads]](byte[] [[buffers]]){ int [[runneth]]; try { [[runneth]] = byteArrayToInt([[buffers]], 40); } catch(NumberFormatException e){ [[runneth]]=0; } return [[runneth]]; }
[[[[Nl]]]]: Function that return the altitude of the drone in mm @ param buffer @ return the altitude


--------------------------------------------- Result 645 ---------------------------------------------
[[0 (-6595%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[onOptionsItemSelected]](MenuItem [[item]]){ Intent [[myIntent]] = new Intent(getApplicationContext(), DestaqueActivity.class); startActivityForResult([[myIntent]], 0); return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: BOTAO VOLTAR ACTIONBAR

[[[[Adv]]]]: public boolean [[clinical]](MenuItem [[facet]]){ Intent [[unsatisfied]] = new Intent(getApplicationContext(), DestaqueActivity.class); startActivityForResult([[unsatisfied]], 0); return "[["Presentable" == "Presentable"]]" == "[["Presentable" == "Presentable"]]"; }
[[[[Nl]]]]: BOTAO VOLTAR ACTIONBAR


--------------------------------------------- Result 646 ---------------------------------------------
[[0 (-5800%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[add]](ExceptionAnnotatedClass [[toInsert]]) throws ProcessingException { itemsMap.put([[toInsert]].getTypeElement().getQualifiedName().toString(), [[toInsert]]); qualifiedItemClassName = [[toInsert]].getTypeElement().getQualifiedName().toString(); }
[[[[Nl]]]]: Adds an annotated class to this factory

[[[[Adv]]]]: void [[summing]](ExceptionAnnotatedClass [[battlefield]]) throws ProcessingException { itemsMap.put([[battlefield]].getTypeElement().getQualifiedName().toString(), [[battlefield]]); qualifiedItemClassName = [[battlefield]].getTypeElement().getQualifiedName().toString(); }
[[[[Nl]]]]: Adds an annotated class to this factory


--------------------------------------------- Result 647 ---------------------------------------------
[[0 (-7451%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public HttpMessage [[create]](String [[url]], Map<String, String> [[params]]) throws URISyntaxException { MultipartEntity [[multipartEntity]] = null; if ([[params]] != null) { [[multipartEntity]] = new MultipartEntity(); for (final String [[key]] : [[params]].keySet()) { try { [[multipartEntity]].addPart([[key]], new StringBody([[params]].get([[key]]))); } catch (final UnsupportedEncodingException e) { e.printStackTrace(); } } } return this.createFromParts([[url]], [[multipartEntity]]); }
[[[[Nl]]]]: Create a new http uri request with more standard datatypes

[[[[Adv]]]]: public HttpMessage [[engendered]](String [[clipboard]], Map<String, String> [[twitches]]) throws URISyntaxException { MultipartEntity [[fouryears]] = null; if ([[twitches]] != null) { [[fouryears]] = new MultipartEntity(); for (final String [[instrumental]] : [[twitches]].keySet()) { try { [[fouryears]].addPart([[instrumental]], new StringBody([[twitches]].get([[instrumental]]))); } catch (final UnsupportedEncodingException e) { e.printStackTrace(); } } } return this.createFromParts([[clipboard]], [[fouryears]]); }
[[[[Nl]]]]: Create a new http uri request with more standard datatypes


--------------------------------------------- Result 648 ---------------------------------------------
[[0 (-7473%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setText]](int [[resId]]) { if ([[resId]] != 0) { mButtonImageView.setContentDescription(getContext().getString([[resId]])); mDescriptionTextView.setText([[resId]]); } }
[[[[Nl]]]]: Sets the text for description the with the given resource id

[[[[Adv]]]]: public void [[tulipe]](int [[throngs]]) { if ([[throngs]] != 0) { mButtonImageView.setContentDescription(getContext().getString([[throngs]])); mDescriptionTextView.setText([[throngs]]); } }
[[[[Nl]]]]: Sets the text for description the with the given resource id


--------------------------------------------- Result 649 ---------------------------------------------
[[0 (-8425%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[undistortPointsIter]](Mat src, Mat dst, Mat [[cameraMatrix]], Mat distCoeffs, Mat [[R]], Mat [[P]], TermCriteria [[criteria]]) { undistortPointsIter_0(src.nativeObj, dst.nativeObj, [[cameraMatrix]].nativeObj, distCoeffs.nativeObj, [[R]].nativeObj, [[P]].nativeObj, [[criteria]].type, [[criteria]].maxCount, [[criteria]].epsilon); return; }
[[[[Nl]]]]: javadoc : undistortPoints ( src , dst , cameraMatrix , distCoeffs , R , P , criteria )

[[[[Adv]]]]: public static void [[fluctuation]](Mat src, Mat dst, Mat [[carnales]], Mat distCoeffs, Mat [[percent]], Mat [[newsweek]], TermCriteria [[testing]]) { undistortPointsIter_0(src.nativeObj, dst.nativeObj, [[carnales]].nativeObj, distCoeffs.nativeObj, [[percent]].nativeObj, [[newsweek]].nativeObj, [[testing]].type, [[testing]].maxCount, [[testing]].epsilon); return; }
[[[[Nl]]]]: javadoc : undistortPoints ( src , dst , cameraMatrix , distCoeffs , R , P , criteria )


--------------------------------------------- Result 650 ---------------------------------------------
[[0 (-7873%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Fragment [[replaceFragment]](@NonNull Fragment [[srcFragment]], @NonNull Fragment [[destFragment]], boolean [[isAddStack]]) { if ([[srcFragment]].getArguments() == null) return null; int [[containerId]] = [[srcFragment]].getArguments().getInt(ARGS_ID); if ([[containerId]] == 0) return null; return [[replaceFragment]]([[srcFragment]].getFragmentManager(), [[destFragment]], [[containerId]], [[isAddStack]]); }
[[[[Nl]]]]: Replace the fragment @ param srcFragment Source fragment @ param destFragment Target fragment @ param isAddStack Whether to fall back to the stack @ return Target fragment

[[[[Adv]]]]: public static Fragment [[sweethearts]](@NonNull Fragment [[pose]], @NonNull Fragment [[calzones]], boolean [[tickety]]) { if ([[pose]].getArguments() == null) return null; int [[bierce]] = [[pose]].getArguments().getInt(ARGS_ID); if ([[bierce]] == 0) return null; return [[sweethearts]]([[pose]].getFragmentManager(), [[calzones]], [[bierce]], [[tickety]]); }
[[[[Nl]]]]: Replace the fragment @ param srcFragment Source fragment @ param destFragment Target fragment @ param isAddStack Whether to fall back to the stack @ return Target fragment


--------------------------------------------- Result 651 ---------------------------------------------
[[0 (-6549%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isDeviceLocked]](int [[userId]]) { if (mKgm == null) { return "[[False]]" != "[[False]]"; } return mKgm.isDeviceLocked([[userId]]); }
[[[[Nl]]]]: Returns whether the provided { @ param userId } is currently locked ( and showing Keyguard )

[[[[Adv]]]]: public boolean [[dense]](int [[assemblage]]) { if (mKgm == null) { return "[["Imaginary" != "Imaginary"]]" != "[["Imaginary" != "Imaginary"]]"; } return mKgm.isDeviceLocked([[assemblage]]); }
[[[[Nl]]]]: Returns whether the provided { @ param userId } is currently locked ( and showing Keyguard )


--------------------------------------------- Result 652 ---------------------------------------------
[[0 (-6739%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public CtMethod [[toMethod]](String [[name]], CtClass [[declaring]]) throws CannotCompileException { return [[toMethod]]([[name]], [[declaring]], null); }
[[[[Nl]]]]: Makes a copy of this constructor and converts it into a method

[[[[Adv]]]]: public CtMethod [[weekdays]](String [[numbering]], CtClass [[announces]]) throws CannotCompileException { return [[weekdays]]([[numbering]], [[announces]], null); }
[[[[Nl]]]]: Makes a copy of this constructor and converts it into a method


--------------------------------------------- Result 653 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 653 / 0 / 653:  83%|████████▎ | 653/785 [20:15<04:05,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 653 / 0 / 653:  83%|████████▎ | 654/785 [20:16<04:03,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 654 / 0 / 654:  83%|████████▎ | 654/785 [20:16<04:03,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 654 / 0 / 654:  83%|████████▎ | 655/785 [20:17<04:01,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 655 / 0 / 655:  83%|████████▎ | 655/785 [20:17<04:01,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 655 / 0 / 655:  84%|████████▎ | 656/785 [20:20<03:59,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 656 / 0 / 656:  84%|████████▎ | 656/785 [20:20<03:59,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 656 / 0 / 656:  84%|████████▎ | 657/785 [20:21<03:57,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 657 / 0 / 657:  84%|████████▎ | 657/785 [20:21<03:57,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 657 / 0 / 657:  84%|████████▍ | 658/785 [20:24<03:56,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 658 / 0 / 658:  84%|████████▍ | 658/785 [20:24<03:56,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 658 / 0 / 658:  84%|████████▍ | 659/785 [20:26<03:54,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 659 / 0 / 659:  84%|████████▍ | 659/785 [20:26<03:54,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 659 / 0 / 659:  84%|████████▍ | 660/785 [20:26<03:52,  1.86s/it][[0 (-7872%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[saveUser]](View [[view]]) { if (user != null) { user.setStreet(Utils.getTextFromEditText(streetText.getText().toString())); user.setZipCode(Utils.getTextFromEditText(zipCodeText.getText().toString())); user.setTown(Utils.getTextFromEditText(townText.getText().toString())); user.setPhoneNumber(Utils.getTextFromEditText(phoneNumberText.getText().toString())); user.setWebSite(Utils.getTextFromEditText(webPageText.getText().toString())); data.putExtras(extras); setResult(RESULT_OK, data); finish(); } }
[[[[Nl]]]]: Saves the { @ link User } with the current data and sends it back to { @ link MainActivity }

[[[[Adv]]]]: public void [[snake]](View [[visualizing]]) { if (user != null) { user.setStreet(Utils.getTextFromEditText(streetText.getText().toString())); user.setZipCode(Utils.getTextFromEditText(zipCodeText.getText().toString())); user.setTown(Utils.getTextFromEditText(townText.getText().toString())); user.setPhoneNumber(Utils.getTextFromEditText(phoneNumberText.getText().toString())); user.setWebSite(Utils.getTextFromEditText(webPageText.getText().toString())); data.putExtras(extras); setResult(RESULT_OK, data); finish(); } }
[[[[Nl]]]]: Saves the { @ link User } with the current data and sends it back to { @ link MainActivity }


--------------------------------------------- Result 654 ---------------------------------------------
[[0 (-6470%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[resetScoreForUrl]](String [[url]], double [[score]]) { assert ThreadUtils.runningOnUiThread(); if (mNativePointer == 0) return; nativeResetScoreForURL(mNativePointer, [[url]], [[score]]); }
[[[[Nl]]]]: Sets the provided URL to have the provided engagement score

[[[[Adv]]]]: public void [[unread]](String [[archive]], double [[odds]]) { assert ThreadUtils.runningOnUiThread(); if (mNativePointer == 0) return; nativeResetScoreForURL(mNativePointer, [[archive]], [[odds]]); }
[[[[Nl]]]]: Sets the provided URL to have the provided engagement score


--------------------------------------------- Result 655 ---------------------------------------------
[[0 (-7477%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[initialize]](@NonNull Initializer [[initializer]]) { Utilities.requireNonNull([[initializer]], RemoteConfigMessages.NOT_VALID_INITIALIZER); if ([[initializer]].context.getApplicationContext() != null) Holder.INSTANCE.contextWR = new WeakReference<>([[initializer]].context.getApplicationContext()); else Holder.INSTANCE.contextWR = new WeakReference<>([[initializer]].context); if ([[initializer]].lruCacheSize > 0) Holder.INSTANCE.lruCache = new LruCache<>([[initializer]].lruCacheSize); if ([[initializer]].developerMode) Logger.setLogLevel(Logger.DEBUG); }
[[[[Nl]]]]: Init library with custom values @ see Initializer @ param initializer initializer for library

[[[[Adv]]]]: public static void [[profiled]](@NonNull Initializer [[sail]]) { Utilities.requireNonNull([[sail]], RemoteConfigMessages.NOT_VALID_INITIALIZER); if ([[sail]].context.getApplicationContext() != null) Holder.INSTANCE.contextWR = new WeakReference<>([[sail]].context.getApplicationContext()); else Holder.INSTANCE.contextWR = new WeakReference<>([[sail]].context); if ([[sail]].lruCacheSize > 0) Holder.INSTANCE.lruCache = new LruCache<>([[sail]].lruCacheSize); if ([[sail]].developerMode) Logger.setLogLevel(Logger.DEBUG); }
[[[[Nl]]]]: Init library with custom values @ see Initializer @ param initializer initializer for library


--------------------------------------------- Result 656 ---------------------------------------------
[[0 (-6692%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[matches]](@NonNull DelimitedVersion [[version]]) { if (mLowerBound != null && mLowerBound.compareTo([[version]]) > 0) { return "[[False]]" != "[[False]]"; } if (mUpperBound != null && mUpperBound.compareTo([[version]]) < 0) { return "[[False]]" != "[[False]]"; } return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: Determines whether the specified version falls within the version range

[[[[Adv]]]]: public boolean [[twinning]](@NonNull DelimitedVersion [[stride]]) { if (mLowerBound != null && mLowerBound.compareTo([[stride]]) > 0) { return "[["Erroneous" != "Erroneous"]]" != "[["Erroneous" != "Erroneous"]]"; } if (mUpperBound != null && mUpperBound.compareTo([[stride]]) < 0) { return "[["Erroneous" != "Erroneous"]]" != "[["Erroneous" != "Erroneous"]]"; } return "[["Real" == "Real"]]" == "[["Real" == "Real"]]"; }
[[[[Nl]]]]: Determines whether the specified version falls within the version range


--------------------------------------------- Result 657 ---------------------------------------------
[[0 (-7479%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected static String [[getDeviceName]]() { try { if (WonderPush.getApplicationContext().getPackageManager().checkPermission(android.Manifest.permission.BLUETOOTH, WonderPush.getApplicationContext().getPackageName()) == PackageManager.PERMISSION_GRANTED) { BluetoothAdapter [[btDevice]] = BluetoothAdapter.getDefaultAdapter(); return [[btDevice]].getName(); } } catch (Exception ex) { } return null; }
[[[[Nl]]]]: Returns the Bluetooth device name , if permissions are granted , and provided the device actually has Bluetooth

[[[[Adv]]]]: protected static String [[reschedule]]() { try { if (WonderPush.getApplicationContext().getPackageManager().checkPermission(android.Manifest.permission.BLUETOOTH, WonderPush.getApplicationContext().getPackageName()) == PackageManager.PERMISSION_GRANTED) { BluetoothAdapter [[added]] = BluetoothAdapter.getDefaultAdapter(); return [[added]].getName(); } } catch (Exception ex) { } return null; }
[[[[Nl]]]]: Returns the Bluetooth device name , if permissions are granted , and provided the device actually has Bluetooth


--------------------------------------------- Result 658 ---------------------------------------------
[[0 (-8497%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Point [[projectGeoPoint]](final double aLat, final double [[aLon]], final int [[aZoom]], final Point [[aUseAsReturnValue]]) { final Point [[p]] = [[aUseAsReturnValue]] != null ? [[aUseAsReturnValue]] : new Point(0, 0); [[p]].x = ((int) Math.floor(([[aLon]] + 180) / 360 * (1 << [[aZoom]]))); [[p]].y = ((int) Math.floor((1 - Math.log(Math.tan(aLat * DEG2RAD) + 1 / Math.cos(aLat * DEG2RAD)) / Math.PI) / 2 * (1 << [[aZoom]]))); return [[p]]; }
[[[[Nl]]]]: Mercator projection of GeoPoint at given zoom level @ param aLat latitude in degrees [ -89 to 89 ] @ param aLon longitude in degrees [ -180 to 180 ] @ param zoom zoom level @ param aUseAsReturnValue @ return Point with x , y in the range [ -2^ ( zoom-1 ) to 2^ ( zoom-1 ) ]

[[[[Adv]]]]: public static Point [[aqaba]](final double aLat, final double [[aaron]], final int [[disqualification]], final Point [[commits]]) { final Point [[newsweek]] = [[commits]] != null ? [[commits]] : new Point(0, 0); [[newsweek]].x = ((int) Math.floor(([[aaron]] + 180) / 360 * (1 << [[disqualification]]))); [[newsweek]].y = ((int) Math.floor((1 - Math.log(Math.tan(aLat * DEG2RAD) + 1 / Math.cos(aLat * DEG2RAD)) / Math.PI) / 2 * (1 << [[disqualification]]))); return [[newsweek]]; }
[[[[Nl]]]]: Mercator projection of GeoPoint at given zoom level @ param aLat latitude in degrees [ -89 to 89 ] @ param aLon longitude in degrees [ -180 to 180 ] @ param zoom zoom level @ param aUseAsReturnValue @ return Point with x , y in the range [ -2^ ( zoom-1 ) to 2^ ( zoom-1 ) ]


--------------------------------------------- Result 659 ---------------------------------------------
[[0 (-7405%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static <[[K]], V> SetMultimap<[[K]], V> [[synchronizedSetMultimap]]( SetMultimap<[[K]], V> [[multimap]]) { return Synchronized.setMultimap([[multimap]], null); }
[[[[Nl]]]]: Returns a synchronized ( thread-safe ) { @ code SetMultimap } backed by the specified multimap

[[[[Adv]]]]: public static <[[toward]], V> SetMultimap<[[toward]], V> [[wickedest]]( SetMultimap<[[toward]], V> [[ramsay]]) { return Synchronized.setMultimap([[ramsay]], null); }
[[[[Nl]]]]: Returns a synchronized ( thread-safe ) { @ code SetMultimap } backed by the specified multimap


[Succeeded / Failed / Skipped / Total] 0 / 660 / 0 / 660:  84%|████████▍ | 660/785 [20:26<03:52,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 660 / 0 / 660:  84%|████████▍ | 661/785 [20:28<03:50,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 661 / 0 / 661:  84%|████████▍ | 661/785 [20:28<03:50,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 661 / 0 / 661:  84%|████████▍ | 662/785 [20:30<03:48,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 662 / 0 / 662:  84%|████████▍ | 662/785 [20:30<03:48,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 662 / 0 / 662:  84%|████████▍ | 663/785 [20:31<03:46,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 663 / 0 / 663:  84%|████████▍ | 663/785 [20:31<03:46,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 663 / 0 / 663:  85%|████████▍ | 664/785 [20:32<03:44,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 664 / 0 / 664:  85%|████████▍ | 664/785 [20:32<03:44,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 664 / 0 / 664:  85%|████████▍ | 665/785 [20:34<03:42,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 665 / 0 / 665:  85%|████████▍ | 665/785 [20:34<03:42,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 665 / 0 / 665:  85%|████████▍ | 666/785 [20:35<03:40,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 666 / 0 / 666:  85%|████████▍ | 666/785 [20:35<03:40,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 666 / 0 / 666:  85%|████████▍ | 667/785 [20:36<03:38,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 667 / 0 / 667:  85%|████████▍ | 667/785 [20:36<03:38,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 667 / 0 / 667:  85%|████████▌ | 668/785 [20:38<03:36,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 668 / 0 / 668:  85%|████████▌ | 668/785 [20:38<03:36,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 668 / 0 / 668:  85%|████████▌ | 669/785 [20:39<03:34,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 669 / 0 / 669:  85%|████████▌ | 669/785 [20:39<03:34,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 669 / 0 / 669:  85%|████████▌ | 670/785 [20:41<03:33,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 670 / 0 / 670:  85%|████████▌ | 670/785 [20:41<03:33,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 670 / 0 / 670:  85%|████████▌ | 671/785 [20:44<03:31,  1.85s/it]--------------------------------------------- Result 660 ---------------------------------------------
[[0 (-6986%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[markUpdateSeen]]() { if (hasNewLayout()) { markLayoutSeen(); } }
[[[[Nl]]]]: Mark the update has been seen

[[[[Adv]]]]: public final void [[nationalized]]() { if (hasNewLayout()) { markLayoutSeen(); } }
[[[[Nl]]]]: Mark the update has been seen


--------------------------------------------- Result 661 ---------------------------------------------
[[0 (-7008%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[initOnActivity]](Activity [[activity]]) { sContext = [[activity]]; sIsLocal = True; init(); ASMExceptionHandler.init([[activity]]); }
[[[[Nl]]]]: true to activity

[[[[Adv]]]]: public static void [[exoskeleton]](Activity [[moves]]) { sContext = [[moves]]; sIsLocal = True; init(); ASMExceptionHandler.init([[moves]]); }
[[[[Nl]]]]: true to activity


--------------------------------------------- Result 662 ---------------------------------------------
[[0 (-8189%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getLineBounds]](int [[line]], Rect [[bounds]]) { if ([[bounds]] != null) { [[bounds]].left = 0; [[bounds]].top = getLineTop([[line]]); [[bounds]].right = mWidth; [[bounds]].bottom = getLineTop([[line]] + 1); } return getLineBaseline([[line]]); }
[[[[Nl]]]]: Return the baseline for the specified line ( 0 & hellip ; getLineCount ( ) - 1 ) If bounds is not null , return the top , left , right , bottom extents of the specified line in it

[[[[Adv]]]]: public int [[milano]](int [[course]], Rect [[limitations]]) { if ([[limitations]] != null) { [[limitations]].left = 0; [[limitations]].top = getLineTop([[course]]); [[limitations]].right = mWidth; [[limitations]].bottom = getLineTop([[course]] + 1); } return getLineBaseline([[course]]); }
[[[[Nl]]]]: Return the baseline for the specified line ( 0 & hellip ; getLineCount ( ) - 1 ) If bounds is not null , return the top , left , right , bottom extents of the specified line in it


--------------------------------------------- Result 663 ---------------------------------------------
[[0 (-7427%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[formatSecondsToDuration]](int [[second]]) { String [[minutes]] = String.format(Locale.getDefault(), "0%.2f", (double)([[second]]/60.0F)); return [[minutes]].replace(",", ":").replace(".", ":"); }
[[[[Nl]]]]: Metodo para convertir segundos a minutos y aplicar un formato

[[[[Adv]]]]: public static String [[weeding]](int [[others]]) { String [[taping]] = String.format(Locale.getDefault(), "0%.2f", (double)([[others]]/60.0F)); return [[taping]].replace(",", ":").replace(".", ":"); }
[[[[Nl]]]]: Metodo para convertir segundos a minutos y aplicar un formato


--------------------------------------------- Result 664 ---------------------------------------------
[[0 (-5484%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[markDead]]() { inits.inclRange(firstadr, nextadr); uninits.inclRange(firstadr, nextadr); alive = "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: Record that statement is unreachable

[[[[Adv]]]]: void [[dressings]]() { inits.inclRange(firstadr, nextadr); uninits.inclRange(firstadr, nextadr); alive = "[["Adulterated" != "Adulterated"]]" != "[["Adulterated" != "Adulterated"]]"; }
[[[[Nl]]]]: Record that statement is unreachable


--------------------------------------------- Result 665 ---------------------------------------------
[[0 (-7210%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[parse]](InputStream [[is]]) throws IOException { rootStream = new RootInputStream([[is]]); parseMessage(rootStream); }
[[[[Nl]]]]: Parses a stream of bytes containing a MIME message

[[[[Adv]]]]: public void [[quilts]](InputStream [[involves]]) throws IOException { rootStream = new RootInputStream([[involves]]); parseMessage(rootStream); }
[[[[Nl]]]]: Parses a stream of bytes containing a MIME message


--------------------------------------------- Result 666 ---------------------------------------------
[[0 (-7634%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[emitScore]](int [[score]]) { JSONObject [[json]] = new JSONObject(); try { [[json]].put("id", playerId); [[json]].put("score", [[score]]); socket.emit("updateScore", [[json]]); } catch (JSONException e) { Gdx.app.log("Error", "Error sending new score"); } }
[[[[Nl]]]]: Send player score to server

[[[[Adv]]]]: public void [[reachable]](int [[footnote]]) { JSONObject [[violated]] = new JSONObject(); try { [[violated]].put("id", playerId); [[violated]].put("score", [[footnote]]); socket.emit("updateScore", [[violated]]); } catch (JSONException e) { Gdx.app.log("Error", "Error sending new score"); } }
[[[[Nl]]]]: Send player score to server


--------------------------------------------- Result 667 ---------------------------------------------
[[0 (-7193%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[alterPhoneLayout]]() { phonePaneLayoutBounds = phonePane.getLayoutBounds(); phone.setLayoutX(phonePaneLayoutBounds.getMaxX()/2); phone.setLayoutY(phonePaneLayoutBounds.getMaxY()/2); }
[[[[Nl]]]]: Keeps the 3D phone shape in the middle of the phonePane

[[[[Adv]]]]: public void [[train]]() { phonePaneLayoutBounds = phonePane.getLayoutBounds(); phone.setLayoutX(phonePaneLayoutBounds.getMaxX()/2); phone.setLayoutY(phonePaneLayoutBounds.getMaxY()/2); }
[[[[Nl]]]]: Keeps the 3D phone shape in the middle of the phonePane


--------------------------------------------- Result 668 ---------------------------------------------
[[0 (-5388%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setChecked]](boolean [[checked]]) { this.[[checked]] = [[checked]]; }
[[[[Nl]]]]: Nadaje , że zaznaczono lub nie

[[[[Adv]]]]: public void [[unpleasantly]](boolean [[tested]]) { this.[[tested]] = [[tested]]; }
[[[[Nl]]]]: Nadaje , że zaznaczono lub nie


--------------------------------------------- Result 669 ---------------------------------------------
[[0 (-6093%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[aquireProof]](View [[view]]) { if (device != null) { new Thread(new ConnectThread(device)).start(); } }
[[[[Nl]]]]: Create a new thread to connect to the bluetooth beacon with @ param view

[[[[Adv]]]]: public void [[recall]](View [[opinion]]) { if (device != null) { new Thread(new ConnectThread(device)).start(); } }
[[[[Nl]]]]: Create a new thread to connect to the bluetooth beacon with @ param view


--------------------------------------------- Result 670 ---------------------------------------------
[[0 (-7790%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public float[] [[applyInverse]](float [[x]], float [[y]]) { Matrix [[temp]] = getInverse(); float[] [[dst]] = new float[2]; [[temp]].mapPoints([[dst]], new float[]{[[x]], [[y]]}); return [[dst]]; }
[[[[Nl]]]]: Apply camera 's inverse matrix to a vector ( x , y ) < br > Can be used to convert screen point to same point in camera 's coordinates @ param x @ param y @ return mapped vector

[[[[Adv]]]]: public float[] [[gain]](float [[thirteen]], float [[either]]) { Matrix [[fluctuation]] = getInverse(); float[] [[wakeup]] = new float[2]; [[fluctuation]].mapPoints([[wakeup]], new float[]{[[thirteen]], [[either]]}); return [[wakeup]]; }
[[[[Nl]]]]: Apply camera 's inverse matrix to a vector ( x , y ) < br > Can be used to convert screen point to same point in camera 's coordinates @ param x @ param y @ return mapped vector


--------------------------------------------- Result 671 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 671 / 0 / 671:  85%|████████▌ | 671/785 [20:44<03:31,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 671 / 0 / 671:  86%|████████▌ | 672/785 [20:45<03:29,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 672 / 0 / 672:  86%|████████▌ | 672/785 [20:45<03:29,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 672 / 0 / 672:  86%|████████▌ | 673/785 [20:47<03:27,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 673 / 0 / 673:  86%|████████▌ | 673/785 [20:47<03:27,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 673 / 0 / 673:  86%|████████▌ | 674/785 [20:50<03:25,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 674 / 0 / 674:  86%|████████▌ | 674/785 [20:50<03:25,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 674 / 0 / 674:  86%|████████▌ | 675/785 [20:52<03:24,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 675 / 0 / 675:  86%|████████▌ | 675/785 [20:52<03:24,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 675 / 0 / 675:  86%|████████▌ | 676/785 [20:53<03:22,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 676 / 0 / 676:  86%|████████▌ | 676/785 [20:53<03:22,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 676 / 0 / 676:  86%|████████▌ | 677/785 [20:56<03:20,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 677 / 0 / 677:  86%|████████▌ | 677/785 [20:56<03:20,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 677 / 0 / 677:  86%|████████▋ | 678/785 [20:59<03:18,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 678 / 0 / 678:  86%|████████▋ | 678/785 [20:59<03:18,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 678 / 0 / 678:  86%|████████▋ | 679/785 [20:59<03:16,  1.86s/it][[0 (-7139%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static long [[getLastNotificationTime]](Context [[context]], String [[key]]) { if([[key]].equals([[context]].getString(R.string.pref_update_notification_time_key)) || [[key]].equals([[context]].getString(R.string.pref_rain_notification_time_key)) || [[key]].equals([[context]].getString(R.string.pref_snow_notification_time_key)) || [[key]].equals([[context]].getString(R.string.pref_extreme_notification_time_key))) { SharedPreferences [[sp]] = PreferenceManager.getDefaultSharedPreferences([[context]]); return [[sp]].getLong([[key]], 0); } else { throw new RuntimeException("Key not recognized for SharedPreferences: " + [[key]]); } }
[[[[Nl]]]]: returns last time the notification had been notified

[[[[Adv]]]]: public static long [[velasquez]](Context [[landscapes]], String [[wrenches]]) { if([[wrenches]].equals([[landscapes]].getString(R.string.pref_update_notification_time_key)) || [[wrenches]].equals([[landscapes]].getString(R.string.pref_rain_notification_time_key)) || [[wrenches]].equals([[landscapes]].getString(R.string.pref_snow_notification_time_key)) || [[wrenches]].equals([[landscapes]].getString(R.string.pref_extreme_notification_time_key))) { SharedPreferences [[vis]] = PreferenceManager.getDefaultSharedPreferences([[landscapes]]); return [[vis]].getLong([[wrenches]], 0); } else { throw new RuntimeException("Key not recognized for SharedPreferences: " + [[wrenches]]); } }
[[[[Nl]]]]: returns last time the notification had been notified


--------------------------------------------- Result 672 ---------------------------------------------
[[0 (-8287%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public ObjectWriter [[withPrettyPrinter]](PrettyPrinter [[pp]]) { if ([[pp]] == _prettyPrinter) { return this; } if ([[pp]] == null) { [[pp]] = NULL_PRETTY_PRINTER; } return new ObjectWriter(this, _config, _rootType, [[pp]], _schema); }
[[[[Nl]]]]: Method that will construct a new instance that will use specified pretty printer ( or , if null , will not do any pretty-printing ) @ since 1

[[[[Adv]]]]: public ObjectWriter [[transgression]](PrettyPrinter [[decibel]]) { if ([[decibel]] == _prettyPrinter) { return this; } if ([[decibel]] == null) { [[decibel]] = NULL_PRETTY_PRINTER; } return new ObjectWriter(this, _config, _rootType, [[decibel]], _schema); }
[[[[Nl]]]]: Method that will construct a new instance that will use specified pretty printer ( or , if null , will not do any pretty-printing ) @ since 1


--------------------------------------------- Result 673 ---------------------------------------------
[[0 (-7427%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[enableWifi]](Context [[context]], ListenerAdapter [[listenerAdapter]]) { try { dataLinkManager.enable(0, [[context]], Service.WIFI, [[listenerAdapter]]); } catch (BluetoothBadDuration ignored) { } }
[[[[Nl]]]]: Method allowing to enable Wi-Fi adapter

[[[[Adv]]]]: public void [[mitten]](Context [[vein]], ListenerAdapter [[lost]]) { try { dataLinkManager.enable(0, [[vein]], Service.WIFI, [[lost]]); } catch (BluetoothBadDuration ignored) { } }
[[[[Nl]]]]: Method allowing to enable Wi-Fi adapter


--------------------------------------------- Result 674 ---------------------------------------------
[[0 (-7644%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[updateNotification]](Context context) { if (!PreferenceManager.getDefaultSharedPreferences(context.getApplicationContext()) .getBoolean(context.getString(R.string.pref_key_notification_enable), "[[True]]" == "[[True]]")) { dismissNotification(context); return; } WifiManager [[wifiManager]] = (WifiManager) context.getSystemService(Context.WIFI_SERVICE); WifiInfo [[wifiInfo]] = [[wifiManager]].getConnectionInfo(); String [[ssid]] = [[wifiInfo]].getSSID(); if ([[ssid]] != null && ([[ssid]].contains("Routers of Rohan"))) { showNotification(context); } else { dismissNotification(context); } }
[[[[Nl]]]]: Show or hide the shortcuts notification bases on the WiFi status and user preference

[[[[Adv]]]]: public static void [[restarted]](Context context) { if (!PreferenceManager.getDefaultSharedPreferences(context.getApplicationContext()) .getBoolean(context.getString(R.string.pref_key_notification_enable), "[["Staunch" == "Staunch"]]" == "[["Staunch" == "Staunch"]]")) { dismissNotification(context); return; } WifiManager [[costs]] = (WifiManager) context.getSystemService(Context.WIFI_SERVICE); WifiInfo [[mamba]] = [[costs]].getConnectionInfo(); String [[snoopers]] = [[mamba]].getSSID(); if ([[snoopers]] != null && ([[snoopers]].contains("Routers of Rohan"))) { showNotification(context); } else { dismissNotification(context); } }
[[[[Nl]]]]: Show or hide the shortcuts notification bases on the WiFi status and user preference


--------------------------------------------- Result 675 ---------------------------------------------
[[0 (-7567%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static double[] [[getSequenceNumber]](byte[] [[data]]) { int [[y]]=([[data]][18] & 0x03); int [[x]]=([[data]][19] & 0xff); int [[seq]]=([[y]]<<8)+[[x]]; return new double[]{[[seq]]}; }
[[[[Nl]]]]: Returns the sequence number from the given data

[[[[Adv]]]]: static double[] [[fraternities]](byte[] [[report]]) { int [[both]]=([[report]][18] & 0x03); int [[w]]=([[report]][19] & 0xff); int [[crossing]]=([[both]]<<8)+[[w]]; return new double[]{[[crossing]]}; }
[[[[Nl]]]]: Returns the sequence number from the given data


--------------------------------------------- Result 676 ---------------------------------------------
[[0 (-7732%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[l]](String [[s]]) { Log.d(TAG, [[s]]); }
[[[[Nl]]]]: Simple log function

[[[[Adv]]]]: protected void [[prince]](String [[among]]) { Log.d(TAG, [[among]]); }
[[[[Nl]]]]: Simple log function


--------------------------------------------- Result 677 ---------------------------------------------
[[0 (-8534%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[loadMovieData]](Cursor [[data]]) { if (null != [[data]] && [[data]].getCount() > 0) { [[data]].moveToFirst(); movieSelected = new Movie([[data]]); buttonFavorite("[[True]]" == "[[True]]"); } else { movieSelected = new Movie(mMovieId); buttonFavorite("[[False]]" != "[[False]]"); } new FetchMovieDetailsTask(this, movieDbHelper).execute(movieSelected); }
[[[[Nl]]]]: Load movieSelected details , via database or API @ param data Movie data , if found in database

[[[[Adv]]]]: private void [[lune]](Cursor [[numerals]]) { if (null != [[numerals]] && [[numerals]].getCount() > 0) { [[numerals]].moveToFirst(); movieSelected = new Movie([[numerals]]); buttonFavorite("[["Realistic" == "Realistic"]]" == "[["Realistic" == "Realistic"]]"); } else { movieSelected = new Movie(mMovieId); buttonFavorite("[["Forges" != "Forges"]]" != "[["Forges" != "Forges"]]"); } new FetchMovieDetailsTask(this, movieDbHelper).execute(movieSelected); }
[[[[Nl]]]]: Load movieSelected details , via database or API @ param data Movie data , if found in database


--------------------------------------------- Result 678 ---------------------------------------------
[[0 (-6352%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public List<Entry> [[parse]](InputStream [[in]]) throws XmlPullParserException, [[IOException]] { try { XmlPullParser [[parser]] = Xml.newPullParser(); [[parser]].setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, "[[False]]" != "[[False]]"); [[parser]].setInput([[in]], null); [[parser]].nextTag(); return readFeed([[parser]]); } finally { [[in]].close(); } }
[[[[Nl]]]]: We do n't use namespaces

[[[[Adv]]]]: public List<Entry> [[trajectories]](InputStream [[avec]]) throws XmlPullParserException, [[supplement]] { try { XmlPullParser [[bursting]] = Xml.newPullParser(); [[bursting]].setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, "[["Imaginary" != "Imaginary"]]" != "[["Imaginary" != "Imaginary"]]"); [[bursting]].setInput([[avec]], null); [[bursting]].nextTag(); return readFeed([[bursting]]); } finally { [[avec]].close(); } }
[[[[Nl]]]]: We do n't use namespaces


--------------------------------------------- Result 679 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 679 / 0 / 679:  86%|████████▋ | 679/785 [20:59<03:16,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 679 / 0 / 679:  87%|████████▋ | 680/785 [21:00<03:14,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 680 / 0 / 680:  87%|████████▋ | 680/785 [21:00<03:14,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 680 / 0 / 680:  87%|████████▋ | 681/785 [21:03<03:12,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 681 / 0 / 681:  87%|████████▋ | 681/785 [21:03<03:12,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 681 / 0 / 681:  87%|████████▋ | 682/785 [21:04<03:11,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 682 / 0 / 682:  87%|████████▋ | 682/785 [21:04<03:11,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 682 / 0 / 682:  87%|████████▋ | 683/785 [21:05<03:08,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 683 / 0 / 683:  87%|████████▋ | 683/785 [21:05<03:08,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 683 / 0 / 683:  87%|████████▋ | 684/785 [21:07<03:07,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 684 / 0 / 684:  87%|████████▋ | 684/785 [21:07<03:07,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 684 / 0 / 684:  87%|████████▋ | 685/785 [21:08<03:05,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 685 / 0 / 685:  87%|████████▋ | 685/785 [21:08<03:05,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 685 / 0 / 685:  87%|████████▋ | 686/785 [21:10<03:03,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 686 / 0 / 686:  87%|████████▋ | 686/785 [21:10<03:03,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 686 / 0 / 686:  88%|████████▊ | 687/785 [21:13<03:01,  1.85s/it][[0 (-5675%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[removeListeners]]() { if( getMap() != null ) { getMap().setOnMarkerClickListener( null ); getMap().setOnMapLongClickListener(null); getMap().setOnInfoWindowClickListener(null); getMap().setOnMapClickListener(null); } }
[[[[Nl]]]]: Metodo que elimina los escuchadores

[[[[Adv]]]]: private void [[propel]]() { if( getMap() != null ) { getMap().setOnMarkerClickListener( null ); getMap().setOnMapLongClickListener(null); getMap().setOnInfoWindowClickListener(null); getMap().setOnMapClickListener(null); } }
[[[[Nl]]]]: Metodo que elimina los escuchadores


--------------------------------------------- Result 680 ---------------------------------------------
[[0 (-7709%)]] --> [[[FAILED]]]

[[[[Adv]]]]: char [[getLiteral]](int [[index]]) { if (isValidMask() && string != null && [[index]] < string.length()) { return string.charAt([[index]]); } return (char) 0; }
[[[[Nl]]]]: Returns the literal character at index

[[[[Adv]]]]: char [[rumoured]](int [[gauges]]) { if (isValidMask() && string != null && [[gauges]] < string.length()) { return string.charAt([[gauges]]); } return (char) 0; }
[[[[Nl]]]]: Returns the literal character at index


--------------------------------------------- Result 681 ---------------------------------------------
[[0 (-7040%)]] --> [[[FAILED]]]

[[[[Adv]]]]: boolean [[detectNodeRemovedForAllEncoders]]( EdgeExplorer edgeExplorerAllEdges, int [[nodeIndex]] ) { EdgeIterator [[iter]] = edgeExplorerAllEdges.setBaseNode([[nodeIndex]]); while ([[iter]].next()) { for (FlagEncoder encoder : encoders) { if (encoder.isBackward([[iter]].getFlags()) || encoder.isForward([[iter]].getFlags())) return "[[False]]" != "[[False]]"; } } return "[[True]]" == "[[True]]"; }
[[[[Nl]]]]: This method checks if the node is removed or inaccessible for ALL encoders

[[[[Adv]]]]: boolean [[strolls]]( EdgeExplorer edgeExplorerAllEdges, int [[sponging]] ) { EdgeIterator [[pageantry]] = edgeExplorerAllEdges.setBaseNode([[sponging]]); while ([[pageantry]].next()) { for (FlagEncoder encoder : encoders) { if (encoder.isBackward([[pageantry]].getFlags()) || encoder.isForward([[pageantry]].getFlags())) return "[["Awry" != "Awry"]]" != "[["Awry" != "Awry"]]"; } } return "[["Staunch" == "Staunch"]]" == "[["Staunch" == "Staunch"]]"; }
[[[[Nl]]]]: This method checks if the node is removed or inaccessible for ALL encoders


--------------------------------------------- Result 682 ---------------------------------------------
[[0 (-8014%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[testReplaceValuesRandomAccess]]() { Multimap<String, Integer> [[multimap]] = create(); [[multimap]].put("foo", 1); [[multimap]].put("foo", 3); assertTrue([[multimap]].replaceValues("foo", asList(2, 4)) instanceof RandomAccess); assertTrue([[multimap]].replaceValues("bar", asList(2, 4)) instanceof RandomAccess); }
[[[[Nl]]]]: Confirm that replaceValues ( ) returns a List implementing RandomAccess

[[[[Adv]]]]: public void [[desk]]() { Multimap<String, Integer> [[tickling]] = create(); [[tickling]].put("foo", 1); [[tickling]].put("foo", 3); assertTrue([[tickling]].replaceValues("foo", asList(2, 4)) instanceof RandomAccess); assertTrue([[tickling]].replaceValues("bar", asList(2, 4)) instanceof RandomAccess); }
[[[[Nl]]]]: Confirm that replaceValues ( ) returns a List implementing RandomAccess


--------------------------------------------- Result 683 ---------------------------------------------
[[0 (-7635%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[fetchFromDB]]() { skuProductsAndPurchasesList = AppDatabase.getAppDatabase(this.getApplication()) .getBillingDao().getSkuRelatedPurchases(); }
[[[[Nl]]]]: Fetches Sku Products List and its related Purchases stored in the local database and assigns it to { @ link # skuProductsAndPurchasesList } LiveData

[[[[Adv]]]]: private void [[braintree]]() { skuProductsAndPurchasesList = AppDatabase.getAppDatabase(this.getApplication()) .getBillingDao().getSkuRelatedPurchases(); }
[[[[Nl]]]]: Fetches Sku Products List and its related Purchases stored in the local database and assigns it to { @ link # skuProductsAndPurchasesList } LiveData


--------------------------------------------- Result 684 ---------------------------------------------
[[0 (-8415%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[ellipse]](Mat [[img]], RotatedRect [[box]], Scalar [[color]]) { ellipse_5([[img]].nativeObj, [[box]].center.x, [[box]].center.y, [[box]].size.width, [[box]].size.height, [[box]].angle, [[color]].val[0], [[color]].val[1], [[color]].val[2], [[color]].val[3]); return; }
[[[[Nl]]]]: javadoc : ellipse ( img , box , color )

[[[[Adv]]]]: public static void [[checkerboard]](Mat [[upbeat]], RotatedRect [[clipboard]], Scalar [[dyes]]) { ellipse_5([[upbeat]].nativeObj, [[clipboard]].center.x, [[clipboard]].center.y, [[clipboard]].size.width, [[clipboard]].size.height, [[clipboard]].angle, [[dyes]].val[0], [[dyes]].val[1], [[dyes]].val[2], [[dyes]].val[3]); return; }
[[[[Nl]]]]: javadoc : ellipse ( img , box , color )


--------------------------------------------- Result 685 ---------------------------------------------
[[0 (-6692%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[generate]]() { classFile.generate16(nameIndex); classFile.generate32(attributeSize); classFile.generate16((short) annotations.size()); for (Annotation [[annotation]] : annotations) { [[annotation]].generate(); } }
[[[[Nl]]]]: Generates binary data for the attribute into its class file 's data buffer

[[[[Adv]]]]: protected void [[leads]]() { classFile.generate16(nameIndex); classFile.generate32(attributeSize); classFile.generate16((short) annotations.size()); for (Annotation [[resignations]] : annotations) { [[resignations]].generate(); } }
[[[[Nl]]]]: Generates binary data for the attribute into its class file 's data buffer


--------------------------------------------- Result 686 ---------------------------------------------
[[0 (-7568%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[createSurfaceInternal]](Object [[surface]]) { if (!([[surface]] instanceof Surface) && !([[surface]] instanceof SurfaceTexture)) { throw new IllegalStateException("Input must be either a Surface or SurfaceTexture"); } checkIsNotReleased(); if (eglSurface != EGL14.EGL_NO_SURFACE) { throw new RuntimeException("Already has an EGLSurface"); } int[] [[surfaceAttribs]] = {EGL14.EGL_NONE}; eglSurface = EGL14.eglCreateWindowSurface(eglDisplay, eglConfig, [[surface]], [[surfaceAttribs]], 0); if (eglSurface == EGL14.EGL_NO_SURFACE) { throw new RuntimeException( "Failed to create window surface: 0x" + Integer.toHexString(EGL14.eglGetError())); } }
[[[[Nl]]]]: Create EGLSurface from either Surface or SurfaceTexture

[[[[Adv]]]]: private void [[unattached]](Object [[varnish]]) { if (!([[varnish]] instanceof Surface) && !([[varnish]] instanceof SurfaceTexture)) { throw new IllegalStateException("Input must be either a Surface or SurfaceTexture"); } checkIsNotReleased(); if (eglSurface != EGL14.EGL_NO_SURFACE) { throw new RuntimeException("Already has an EGLSurface"); } int[] [[workouts]] = {EGL14.EGL_NONE}; eglSurface = EGL14.eglCreateWindowSurface(eglDisplay, eglConfig, [[varnish]], [[workouts]], 0); if (eglSurface == EGL14.EGL_NO_SURFACE) { throw new RuntimeException( "Failed to create window surface: 0x" + Integer.toHexString(EGL14.eglGetError())); } }
[[[[Nl]]]]: Create EGLSurface from either Surface or SurfaceTexture


--------------------------------------------- Result 687 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 687 / 0 / 687:  88%|████████▊ | 687/785 [21:13<03:01,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 687 / 0 / 687:  88%|████████▊ | 688/785 [21:16<02:59,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 688 / 0 / 688:  88%|████████▊ | 688/785 [21:16<02:59,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 688 / 0 / 688:  88%|████████▊ | 689/785 [21:17<02:58,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 689 / 0 / 689:  88%|████████▊ | 689/785 [21:17<02:58,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 689 / 0 / 689:  88%|████████▊ | 690/785 [21:19<02:56,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 690 / 0 / 690:  88%|████████▊ | 690/785 [21:19<02:56,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 690 / 0 / 690:  88%|████████▊ | 691/785 [21:20<02:54,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 691 / 0 / 691:  88%|████████▊ | 691/785 [21:20<02:54,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 691 / 0 / 691:  88%|████████▊ | 692/785 [21:21<02:52,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 692 / 0 / 692:  88%|████████▊ | 692/785 [21:21<02:52,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 692 / 0 / 692:  88%|████████▊ | 693/785 [21:24<02:50,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 693 / 0 / 693:  88%|████████▊ | 693/785 [21:24<02:50,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 693 / 0 / 693:  88%|████████▊ | 694/785 [21:24<02:48,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 694 / 0 / 694:  88%|████████▊ | 694/785 [21:24<02:48,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 694 / 0 / 694:  89%|████████▊ | 695/785 [21:26<02:46,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 695 / 0 / 695:  89%|████████▊ | 695/785 [21:26<02:46,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 695 / 0 / 695:  89%|████████▊ | 696/785 [21:29<02:44,  1.85s/it][[0 (-7679%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[hit]](int [[i]]) { if ([[i]] == 1) { System.out.println("___________________________________"); System.out.println(""); System.out.println("Hit me!"); Card [[c]] = userHand.draw(deck); System.out.println("You received: " + [[c]].toString()); System.out.println("___________________________________"); System.out.println(""); return "[[True]]" == "[[True]]"; } else { System.out.println("You stayed."); return "[[False]]" != "[[False]]"; } }
[[[[Nl]]]]: Function : hit Description : gives card to user Parameters : i - a variable of type int Return : NA

[[[[Adv]]]]: public boolean [[sideswiped]](int [[wo]]) { if ([[wo]] == 1) { System.out.println("___________________________________"); System.out.println(""); System.out.println("Hit me!"); Card [[volts]] = userHand.draw(deck); System.out.println("You received: " + [[volts]].toString()); System.out.println("___________________________________"); System.out.println(""); return "[["Reales" == "Reales"]]" == "[["Reales" == "Reales"]]"; } else { System.out.println("You stayed."); return "[["Forges" != "Forges"]]" != "[["Forges" != "Forges"]]"; } }
[[[[Nl]]]]: Function : hit Description : gives card to user Parameters : i - a variable of type int Return : NA


--------------------------------------------- Result 688 ---------------------------------------------
[[0 (-6924%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[animateToProgress]](float [[start]], float end, long [[duration]], Interpolator [[interpolator]]) { mRecentsAnimationWrapper.runOnInit(() -> animateToProgressInternal([[start]], end, [[duration]], [[interpolator]])); }
[[[[Nl]]]]: Animates to the given progress , where 0 is the current app and 1 is overview

[[[[Adv]]]]: private void [[macedonians]](float [[begin]], float end, long [[longitude]], Interpolator [[massif]]) { mRecentsAnimationWrapper.runOnInit(() -> animateToProgressInternal([[begin]], end, [[longitude]], [[massif]])); }
[[[[Nl]]]]: Animates to the given progress , where 0 is the current app and 1 is overview


--------------------------------------------- Result 689 ---------------------------------------------
[[0 (-7454%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static RoutingManager [[getInstance]](Context [[context]]) throws IOException { if (instance == null) instance = new RoutingManager([[context]]); return instance; }
[[[[Nl]]]]: Returns this instance of this class

[[[[Adv]]]]: public static RoutingManager [[caprices]](Context [[meanings]]) throws IOException { if (instance == null) instance = new RoutingManager([[meanings]]); return instance; }
[[[[Nl]]]]: Returns this instance of this class


--------------------------------------------- Result 690 ---------------------------------------------
[[0 (-7788%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[cancelAlarm]]() { Intent [[intent]] = new Intent(ACTION_TIMERSERVICE_ALARM); PendingIntent [[sender]] = PendingIntent.getBroadcast(this, 0, [[intent]], PendingIntent.FLAG_CANCEL_CURRENT); mAlarmManager.cancel([[sender]]); Log.d(TAG,"Alarm Cancelled"); try { this.unregisterReceiver(mAlarmReceiver); } catch(IllegalArgumentException e) { Log.d(TAG, "AlarmReceiver is already unregistered."); } }
[[[[Nl]]]]: cancel alarm if service is sent to background on resuming app

[[[[Adv]]]]: private void [[genevieve]]() { Intent [[objectives]] = new Intent(ACTION_TIMERSERVICE_ALARM); PendingIntent [[receptor]] = PendingIntent.getBroadcast(this, 0, [[objectives]], PendingIntent.FLAG_CANCEL_CURRENT); mAlarmManager.cancel([[receptor]]); Log.d(TAG,"Alarm Cancelled"); try { this.unregisterReceiver(mAlarmReceiver); } catch(IllegalArgumentException e) { Log.d(TAG, "AlarmReceiver is already unregistered."); } }
[[[[Nl]]]]: cancel alarm if service is sent to background on resuming app


--------------------------------------------- Result 691 ---------------------------------------------
[[0 (-7078%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[resume]]() { playing = "[[True]]" == "[[True]]"; gameThread = new Thread(this); gameThread.start(); }
[[[[Nl]]]]: start our thread

[[[[Adv]]]]: public void [[regained]]() { playing = "[["Realities" == "Realities"]]" == "[["Realities" == "Realities"]]"; gameThread = new Thread(this); gameThread.start(); }
[[[[Nl]]]]: start our thread


--------------------------------------------- Result 692 ---------------------------------------------
[[0 (-8421%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[getLabelContourMask]](Mat [[image]]) { getLabelContourMask_1(nativeObj, [[image]].nativeObj); return; }
[[[[Nl]]]]: javadoc : SuperpixelSEEDS : :getLabelContourMask ( image )

[[[[Adv]]]]: public void [[chairing]](Mat [[headshots]]) { getLabelContourMask_1(nativeObj, [[headshots]].nativeObj); return; }
[[[[Nl]]]]: javadoc : SuperpixelSEEDS : :getLabelContourMask ( image )


--------------------------------------------- Result 693 ---------------------------------------------
[[0 (-6578%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[append]](CalculatorExpr expr2) { int [[s]] = mExpr.size(); int s2 = expr2.mExpr.size(); if ([[s]] != 0 && s2 != 0) { Token [[last]] = mExpr.get([[s]]-1); Token [[first]] = expr2.mExpr.get(0); if (!([[first]] instanceof Operator) && !([[last]] instanceof Operator)) { mExpr.add(new Operator(R.id.op_mul)); } } for (int [[i]] = 0; [[i]] < s2; ++[[i]]) { mExpr.add(expr2.mExpr.get([[i]])); } }
[[[[Nl]]]]: Append the contents of the argument expression

[[[[Adv]]]]: public void [[molar]](CalculatorExpr expr2) { int [[y]] = mExpr.size(); int s2 = expr2.mExpr.size(); if ([[y]] != 0 && s2 != 0) { Token [[ayer]] = mExpr.get([[y]]-1); Token [[induction]] = expr2.mExpr.get(0); if (!([[induction]] instanceof Operator) && !([[ayer]] instanceof Operator)) { mExpr.add(new Operator(R.id.op_mul)); } } for (int [[yo]] = 0; [[yo]] < s2; ++[[yo]]) { mExpr.add(expr2.mExpr.get([[yo]])); } }
[[[[Nl]]]]: Append the contents of the argument expression


--------------------------------------------- Result 694 ---------------------------------------------
[[0 (-7744%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[createBuffer]]() { if (buffer != null) { throw new IllegalArgumentException("Buffer already created"); } SimpleLogger.d(getClass(), "Creating buffer with byte size: " + byteLength); buffer = ByteBuffer.allocateDirect(byteLength).order(ByteOrder.nativeOrder()); }
[[[[Nl]]]]: Creates the buffer for the storage

[[[[Adv]]]]: public void [[playback]]() { if (buffer != null) { throw new IllegalArgumentException("Buffer already created"); } SimpleLogger.d(getClass(), "Creating buffer with byte size: " + byteLength); buffer = ByteBuffer.allocateDirect(byteLength).order(ByteOrder.nativeOrder()); }
[[[[Nl]]]]: Creates the buffer for the storage


--------------------------------------------- Result 695 ---------------------------------------------
[[0 (-5634%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldContinue]](Point [[point]]) { double [[t]] = [[point]].getT(); return ([[t]] - lastDrawnPoint.getT() < 0.1) && ([[t]] - lastDrawnPoint.getT() >= 0) && (Math.abs(lastDrawnPoint.getX() - [[point]].getX()) < 50); }
[[[[Nl]]]]: Did the user unintentionally scroll out of the touch pad

[[[[Adv]]]]: private boolean [[boga]](Point [[question]]) { double [[quantity]] = [[question]].getT(); return ([[quantity]] - lastDrawnPoint.getT() < 0.1) && ([[quantity]] - lastDrawnPoint.getT() >= 0) && (Math.abs(lastDrawnPoint.getX() - [[question]].getX()) < 50); }
[[[[Nl]]]]: Did the user unintentionally scroll out of the touch pad


--------------------------------------------- Result 696 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 696 / 0 / 696:  89%|████████▊ | 696/785 [21:29<02:44,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 696 / 0 / 696:  89%|████████▉ | 697/785 [21:32<02:43,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 697 / 0 / 697:  89%|████████▉ | 697/785 [21:32<02:43,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 697 / 0 / 697:  89%|████████▉ | 698/785 [21:35<02:41,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 698 / 0 / 698:  89%|████████▉ | 698/785 [21:35<02:41,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 698 / 0 / 698:  89%|████████▉ | 699/785 [21:37<02:39,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 699 / 0 / 699:  89%|████████▉ | 699/785 [21:37<02:39,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 699 / 0 / 699:  89%|████████▉ | 700/785 [21:38<02:37,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 700 / 0 / 700:  89%|████████▉ | 700/785 [21:38<02:37,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 700 / 0 / 700:  89%|████████▉ | 701/785 [21:40<02:35,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 701 / 0 / 701:  89%|████████▉ | 701/785 [21:40<02:35,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 701 / 0 / 701:  89%|████████▉ | 702/785 [21:41<02:33,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 702 / 0 / 702:  89%|████████▉ | 702/785 [21:41<02:33,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 702 / 0 / 702:  90%|████████▉ | 703/785 [21:42<02:31,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 703 / 0 / 703:  90%|████████▉ | 703/785 [21:42<02:31,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 703 / 0 / 703:  90%|████████▉ | 704/785 [21:43<02:30,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 704 / 0 / 704:  90%|████████▉ | 704/785 [21:43<02:30,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 704 / 0 / 704:  90%|████████▉ | 705/785 [21:46<02:28,  1.85s/it][[0 (-7436%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Packet [[deserialize]](byte[] [[inputData]]) { TYPE type = TYPE.values()[(int) [[inputData]][0]]; byte[] [[data]] = new byte[[[inputData]].length - 14]; int timetolive = (int) [[inputData]][1]; String [[mac]] = getMacBytesAsString([[inputData]], 2); String receivermac = getMacBytesAsString([[inputData]], 8); for (int [[i]] = 14; [[i]] < [[inputData]].length; [[i]]++) { [[data]][[[i]] - 14] = [[inputData]][[[i]]]; } return new Packet(type, [[data]], [[mac]], receivermac, timetolive); }
[[[[Nl]]]]: Deserialize a packet according to a predefined structure

[[[[Adv]]]]: public static Packet [[gyroscope]](byte[] [[irregulars]]) { TYPE type = TYPE.values()[(int) [[irregulars]][0]]; byte[] [[digit]] = new byte[[[irregulars]].length - 14]; int timetolive = (int) [[irregulars]][1]; String [[oro]] = getMacBytesAsString([[irregulars]], 2); String receivermac = getMacBytesAsString([[irregulars]], 8); for (int [[y]] = 14; [[y]] < [[irregulars]].length; [[y]]++) { [[digit]][[[y]] - 14] = [[irregulars]][[[y]]]; } return new Packet(type, [[digit]], [[oro]], receivermac, timetolive); }
[[[[Nl]]]]: Deserialize a packet according to a predefined structure


--------------------------------------------- Result 697 ---------------------------------------------
[[0 (-7987%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static List<String> [[getStackList]](@NonNull FragmentActivity [[activity]]) { List<String> [[stackList]] = new ArrayList<>(); [[stackList]].clear(); if ([[activity]] == null) return [[stackList]]; FragmentManager [[fm]] = [[activity]].getFragmentManager(); for (int [[entry]] = 0; [[entry]] < [[fm]].getBackStackEntryCount(); [[entry]]++) { [[stackList]].add([[fm]].getBackStackEntryAt([[entry]]).getName()); } return [[stackList]]; }
[[[[Nl]]]]: This method is used to get List of backstack fragments @ param activity the activity @ return { @ link List }

[[[[Adv]]]]: public static List<String> [[athenian]](@NonNull FragmentActivity [[procedure]]) { List<String> [[goofing]] = new ArrayList<>(); [[goofing]].clear(); if ([[procedure]] == null) return [[goofing]]; FragmentManager [[bg]] = [[procedure]].getFragmentManager(); for (int [[imported]] = 0; [[imported]] < [[bg]].getBackStackEntryCount(); [[imported]]++) { [[goofing]].add([[bg]].getBackStackEntryAt([[imported]]).getName()); } return [[goofing]]; }
[[[[Nl]]]]: This method is used to get List of backstack fragments @ param activity the activity @ return { @ link List }


--------------------------------------------- Result 698 ---------------------------------------------
[[0 (-8220%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public synchronized void [[updateBlogPost]](BlogPost [[updatedBlogPost]]) { SQLiteDatabase [[database]] = getWritableDatabase(); ContentValues [[contentValues]] = new ContentValues(); [[contentValues]].put(KEY_ID, [[updatedBlogPost]].getId()); [[contentValues]].put(KEY_TITLE, [[updatedBlogPost]].getTitle()); String whereClause = KEY_ID + "=?"; String[] [[whereArgs]] = new String[]{String.valueOf([[updatedBlogPost]].getId())}; [[database]].update(TABLE_BLOGPOSTS, [[contentValues]], whereClause, [[whereArgs]]); [[database]].close(); }
[[[[Nl]]]]: Updates the BlogPost in the Database

[[[[Adv]]]]: public synchronized void [[dominator]](BlogPost [[suggestions]]) { SQLiteDatabase [[decibels]] = getWritableDatabase(); ContentValues [[encompasses]] = new ContentValues(); [[encompasses]].put(KEY_ID, [[suggestions]].getId()); [[encompasses]].put(KEY_TITLE, [[suggestions]].getTitle()); String whereClause = KEY_ID + "=?"; String[] [[lakefront]] = new String[]{String.valueOf([[suggestions]].getId())}; [[decibels]].update(TABLE_BLOGPOSTS, [[encompasses]], whereClause, [[lakefront]]); [[decibels]].close(); }
[[[[Nl]]]]: Updates the BlogPost in the Database


--------------------------------------------- Result 699 ---------------------------------------------
[[0 (-7509%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[getGuildMemberInfo]](String [[id]], String [[api]], Callback<List<GuildMember>> [[callback]]) throws GuildWars2Exception, NullPointerException { isParamValid(new ParamChecker(ParamType.GUILD, [[id]]), new ParamChecker(ParamType.API, [[api]])); gw2API.getGuildMemberInfo([[id]], [[api]]).enqueue([[callback]]); }
[[[[Nl]]]]: For more info on guild member API go < a href= '' https : wiki

[[[[Adv]]]]: public void [[plumber]](String [[detecting]], String [[bedbug]], Callback<List<GuildMember>> [[reminds]]) throws GuildWars2Exception, NullPointerException { isParamValid(new ParamChecker(ParamType.GUILD, [[detecting]]), new ParamChecker(ParamType.API, [[bedbug]])); gw2API.getGuildMemberInfo([[detecting]], [[bedbug]]).enqueue([[reminds]]); }
[[[[Nl]]]]: For more info on guild member API go < a href= '' https : wiki


--------------------------------------------- Result 700 ---------------------------------------------
[[0 (-7841%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[checkForNetworkSignon]](HttpURLConnection [[connection]]) throws IOException { if( !url.getHost().equals( [[connection]].getURL().getHost() ) ) { throw new IOException("Network sign-on"); } }
[[[[Nl]]]]: Check for network signon

[[[[Adv]]]]: protected void [[trumps]](HttpURLConnection [[ratio]]) throws IOException { if( !url.getHost().equals( [[ratio]].getURL().getHost() ) ) { throw new IOException("Network sign-on"); } }
[[[[Nl]]]]: Check for network signon


--------------------------------------------- Result 701 ---------------------------------------------
[[0 (-6229%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void moveOn(View [[view]]) { Intent [[intent]] = new Intent(getApplicationContext(),Homepage.class); startActivity([[intent]]); }
[[[[Nl]]]]: Termina a activity @ param view publi

[[[[Adv]]]]: public void moveOn(View [[position]]) { Intent [[oriented]] = new Intent(getApplicationContext(),Homepage.class); startActivity([[oriented]]); }
[[[[Nl]]]]: Termina a activity @ param view publi


--------------------------------------------- Result 702 ---------------------------------------------
[[0 (-7107%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getPresetName]](short [[preset]]) { if ([[preset]] >= 0 && [[preset]] < mNumPresets) { return mPresetNames[[[preset]]]; } else { return ""; } }
[[[[Nl]]]]: Gets the preset name based on the index

[[[[Adv]]]]: public String [[perceptible]](short [[failsafe]]) { if ([[failsafe]] >= 0 && [[failsafe]] < mNumPresets) { return mPresetNames[[[failsafe]]]; } else { return ""; } }
[[[[Nl]]]]: Gets the preset name based on the index


--------------------------------------------- Result 703 ---------------------------------------------
[[0 (-7908%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final Object [[get]](Object [[bean]]) throws Exception { if (_accessorMethod != null) { return _accessorMethod.invoke([[bean]]); } return _field.get([[bean]]); }
[[[[Nl]]]]: Method that can be used to access value of the property this Object describes , from given bean instance

[[[[Adv]]]]: public final Object [[earn]](Object [[pulses]]) throws Exception { if (_accessorMethod != null) { return _accessorMethod.invoke([[pulses]]); } return _field.get([[pulses]]); }
[[[[Nl]]]]: Method that can be used to access value of the property this Object describes , from given bean instance


--------------------------------------------- Result 704 ---------------------------------------------
[[0 (-7426%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public CensusStatus [[getCensusOriginalAdmission]](int [[residentSerial]]) throws MedrexException { return CensusStatusDAO.getInstance().getCensusOriginalAdmission( [[residentSerial]]); }
[[[[Nl]]]]: for ORIGINAL Admisstion or first time admission

[[[[Adv]]]]: public CensusStatus [[polythene]](int [[text]]) throws MedrexException { return CensusStatusDAO.getInstance().getCensusOriginalAdmission( [[text]]); }
[[[[Nl]]]]: for ORIGINAL Admisstion or first time admission


--------------------------------------------- Result 705 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 705 / 0 / 705:  90%|████████▉ | 705/785 [21:46<02:28,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 705 / 0 / 705:  90%|████████▉ | 706/785 [21:47<02:26,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 706 / 0 / 706:  90%|████████▉ | 706/785 [21:47<02:26,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 706 / 0 / 706:  90%|█████████ | 707/785 [21:49<02:24,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 707 / 0 / 707:  90%|█████████ | 707/785 [21:49<02:24,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 707 / 0 / 707:  90%|█████████ | 708/785 [21:52<02:22,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 708 / 0 / 708:  90%|█████████ | 708/785 [21:52<02:22,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 708 / 0 / 708:  90%|█████████ | 709/785 [21:55<02:21,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 709 / 0 / 709:  90%|█████████ | 709/785 [21:55<02:21,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 709 / 0 / 709:  90%|█████████ | 710/785 [21:57<02:19,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 710 / 0 / 710:  90%|█████████ | 710/785 [21:57<02:19,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 710 / 0 / 710:  91%|█████████ | 711/785 [21:58<02:17,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 711 / 0 / 711:  91%|█████████ | 711/785 [21:58<02:17,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 711 / 0 / 711:  91%|█████████ | 712/785 [22:00<02:15,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 712 / 0 / 712:  91%|█████████ | 712/785 [22:00<02:15,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 712 / 0 / 712:  91%|█████████ | 713/785 [22:01<02:13,  1.85s/it][[0 (-7578%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[populateProviders]]() { PackageManager [[pm]] = this.mPackageManager; for (PackageInfo pack : [[pm]].getInstalledPackages(PackageManager.GET_PROVIDERS)) { ProviderInfo[] providers = pack.providers; if (providers != null) { for (ProviderInfo provider : providers) { String [[a]] = provider.authority; if([[a]].contains(";")) { String[] [[aa]] = [[a]].split(";"); for(String [[x]] : [[aa]]) { mKnownProviders.add([[x]]); } } else mKnownProviders.add([[a]]); } } } }
[[[[Nl]]]]: Populates the provider authority list : < code > mKnownProviders < code > from the PackageManager of the target device

[[[[Adv]]]]: protected void [[quarts]]() { PackageManager [[afternoons]] = this.mPackageManager; for (PackageInfo pack : [[afternoons]].getInstalledPackages(PackageManager.GET_PROVIDERS)) { ProviderInfo[] providers = pack.providers; if (providers != null) { for (ProviderInfo provider : providers) { String [[nova]] = provider.authority; if([[nova]].contains(";")) { String[] [[wearer]] = [[nova]].split(";"); for(String [[seconds]] : [[wearer]]) { mKnownProviders.add([[seconds]]); } } else mKnownProviders.add([[nova]]); } } } }
[[[[Nl]]]]: Populates the provider authority list : < code > mKnownProviders < code > from the PackageManager of the target device


--------------------------------------------- Result 706 ---------------------------------------------
[[0 (-7326%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[stopUsingGPS]]() { if(locationManager != null) { locationManager.removeUpdates(GPSTracker.[[this]]); } }
[[[[Nl]]]]: FORCE STOP GPS

[[[[Adv]]]]: public void [[overact]]() { if(locationManager != null) { locationManager.removeUpdates(GPSTracker.[[declaring]]); } }
[[[[Nl]]]]: FORCE STOP GPS


--------------------------------------------- Result 707 ---------------------------------------------
[[0 (-7041%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private float [[getValue]](Matrix [[matrix]], int [[whichValue]]) { [[matrix]].getValues(mMatrixValues); return mMatrixValues[[[whichValue]]]; }
[[[[Nl]]]]: Helper method that 'unpacks ' a Matrix and returns the required value @ param matrix - Matrix to unpack @ param whichValue - Which value from Matrix

[[[[Adv]]]]: private float [[chart]](Matrix [[range]], int [[uncertainties]]) { [[range]].getValues(mMatrixValues); return mMatrixValues[[[uncertainties]]]; }
[[[[Nl]]]]: Helper method that 'unpacks ' a Matrix and returns the required value @ param matrix - Matrix to unpack @ param whichValue - Which value from Matrix


--------------------------------------------- Result 708 ---------------------------------------------
[[0 (-7140%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[offer]](final int [[pPriority]], final T pItem) throws IllegalArgumentException { if (pItem == null) { throw new IllegalArgumentException("pItem must not be null."); } final ReentrantLock [[lock]] = this.[[mLock]]; [[lock]].lock(); try { final IList<T> queue = this.mQueues.get([[pPriority]]); if (queue == null) { throw new IllegalArgumentException("No queue found for pPriority: '" + [[pPriority]] + "'."); } final int [[queueCapacity]] = this.mQueueCapacities.get([[pPriority]]); if (queue.size() == [[queueCapacity]]) { return False; } else { insert([[pPriority]], pItem); return True; } } finally { [[lock]].unlock(); } }
[[[[Nl]]]]: Inserts the specified element at the tail of this queue with the given priority , if it is possible without exceeding the capacity of the queue with the given priority

[[[[Adv]]]]: public boolean [[bids]](final int [[disillusionment]], final T pItem) throws IllegalArgumentException { if (pItem == null) { throw new IllegalArgumentException("pItem must not be null."); } final ReentrantLock [[turnoff]] = this.[[decades]]; [[turnoff]].lock(); try { final IList<T> queue = this.mQueues.get([[disillusionment]]); if (queue == null) { throw new IllegalArgumentException("No queue found for pPriority: '" + [[disillusionment]] + "'."); } final int [[alliance]] = this.mQueueCapacities.get([[disillusionment]]); if (queue.size() == [[alliance]]) { return False; } else { insert([[disillusionment]], pItem); return True; } } finally { [[turnoff]].unlock(); } }
[[[[Nl]]]]: Inserts the specified element at the tail of this queue with the given priority , if it is possible without exceeding the capacity of the queue with the given priority


--------------------------------------------- Result 709 ---------------------------------------------
[[0 (-6869%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[insertNormal]](int [[insertCount]]){ try{ SQLiteDatabase [[db]] = this.getWritableDatabase(); for(int [[x]]=1; [[x]]<=[[insertCount]]; [[x]]++){ ContentValues [[values]] = new ContentValues(); [[values]].put(fieldObjectName, "Name # " + [[x]]); [[values]].put(fieldObjectDescription, "Description # " + [[x]]); [[db]].insert(tableName, null, [[values]]); } [[db]].close(); }catch(Exception e){ e.printStackTrace(); } }
[[[[Nl]]]]: inserts the record without using transaction and prepare statement

[[[[Adv]]]]: public void [[eddy]](int [[palestinians]]){ try{ SQLiteDatabase [[database]] = this.getWritableDatabase(); for(int [[z]]=1; [[z]]<=[[palestinians]]; [[z]]++){ ContentValues [[magnitude]] = new ContentValues(); [[magnitude]].put(fieldObjectName, "Name # " + [[z]]); [[magnitude]].put(fieldObjectDescription, "Description # " + [[z]]); [[database]].insert(tableName, null, [[magnitude]]); } [[database]].close(); }catch(Exception e){ e.printStackTrace(); } }
[[[[Nl]]]]: inserts the record without using transaction and prepare statement


--------------------------------------------- Result 710 ---------------------------------------------
[[0 (-7295%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getChipVersion]](String [[defaultValue]]) { String [[chipVersion]] = SystemProperties.get(GPS_CHIP_PROP); if (null == [[chipVersion]] || [[chipVersion]].isEmpty()) { [[chipVersion]] = [[defaultValue]]; } return [[chipVersion]]; }
[[[[Nl]]]]: Get gps chip version @ param defaultValue Default value @ return GPS chip version

[[[[Adv]]]]: public static String [[quoted]](String [[unspoiled]]) { String [[narrative]] = SystemProperties.get(GPS_CHIP_PROP); if (null == [[narrative]] || [[narrative]].isEmpty()) { [[narrative]] = [[unspoiled]]; } return [[narrative]]; }
[[[[Nl]]]]: Get gps chip version @ param defaultValue Default value @ return GPS chip version


--------------------------------------------- Result 711 ---------------------------------------------
[[0 (-7189%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[stopAndCollectDeviceProfiling]]() { batteryVoltageDelta = SysClassBattery.getCurrentVoltage() - mStartBatteryVoltage; synchronized (this) { stopReadingFiles = "[[True]]" == "[[True]]"; } }
[[[[Nl]]]]: Stop device information tracking and store the data in the object

[[[[Adv]]]]: public void [[bestest]]() { batteryVoltageDelta = SysClassBattery.getCurrentVoltage() - mStartBatteryVoltage; synchronized (this) { stopReadingFiles = "[["Reales" == "Reales"]]" == "[["Reales" == "Reales"]]"; } }
[[[[Nl]]]]: Stop device information tracking and store the data in the object


--------------------------------------------- Result 712 ---------------------------------------------
[[0 (-6717%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static EditText [[get_Locus_General_Area]](Solo [[solo]]) { String [[ref]] = "Locus/General/Area"; return (android.widget.EditText) [[solo]].getView((Object) [[ref]]); }
[[[[Nl]]]]: Type : input Ref : LocusGeneralArea

[[[[Adv]]]]: public static EditText [[wracked]](Solo [[unmarried]]) { String [[reviewers]] = "Locus/General/Area"; return (android.widget.EditText) [[unmarried]].getView((Object) [[reviewers]]); }
[[[[Nl]]]]: Type : input Ref : LocusGeneralArea


--------------------------------------------- Result 713 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 713 / 0 / 713:  91%|█████████ | 713/785 [22:01<02:13,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 713 / 0 / 713:  91%|█████████ | 714/785 [22:03<02:11,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 714 / 0 / 714:  91%|█████████ | 714/785 [22:03<02:11,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 714 / 0 / 714:  91%|█████████ | 715/785 [22:04<02:09,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 715 / 0 / 715:  91%|█████████ | 715/785 [22:04<02:09,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 715 / 0 / 715:  91%|█████████ | 716/785 [22:06<02:07,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 716 / 0 / 716:  91%|█████████ | 716/785 [22:06<02:07,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 716 / 0 / 716:  91%|█████████▏| 717/785 [22:10<02:06,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 717 / 0 / 717:  91%|█████████▏| 717/785 [22:10<02:06,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 717 / 0 / 717:  91%|█████████▏| 718/785 [22:11<02:04,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 718 / 0 / 718:  91%|█████████▏| 718/785 [22:11<02:04,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 718 / 0 / 718:  92%|█████████▏| 719/785 [22:12<02:02,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 719 / 0 / 719:  92%|█████████▏| 719/785 [22:12<02:02,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 719 / 0 / 719:  92%|█████████▏| 720/785 [22:14<02:00,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 720 / 0 / 720:  92%|█████████▏| 720/785 [22:14<02:00,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 720 / 0 / 720:  92%|█████████▏| 721/785 [22:17<01:58,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 721 / 0 / 721:  92%|█████████▏| 721/785 [22:17<01:58,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 721 / 0 / 721:  92%|█████████▏| 722/785 [22:18<01:56,  1.85s/it][[0 (-7509%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public <[[T]]> [[T]] getModel() { Bundle [[args]] = getIntent().getExtras(); if ([[args]] == null) return null; return ([[T]]) [[args]].getSerializable(Extras.MODEL.name()); }
[[[[Nl]]]]: return Extras passed to the activity using { @ link BaseIntent # setModel ( Serializable object ) setModel } and { @ link BaseIntent # setModel ( Model object ) setModel } methods

[[[[Adv]]]]: public <[[sum]]> [[sum]] getModel() { Bundle [[regression]] = getIntent().getExtras(); if ([[regression]] == null) return null; return ([[sum]]) [[regression]].getSerializable(Extras.MODEL.name()); }
[[[[Nl]]]]: return Extras passed to the activity using { @ link BaseIntent # setModel ( Serializable object ) setModel } and { @ link BaseIntent # setModel ( Model object ) setModel } methods


--------------------------------------------- Result 714 ---------------------------------------------
[[0 (-7120%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setPreemptive]]() { if (!this.[[preemptive]]) { if (this.[[authScheme]] != null) { throw new IllegalStateException("Authentication state already initialized"); } this.[[authScheme]] = AuthPolicy.getAuthScheme(PREEMPTIVE_AUTH_SCHEME); this.[[preemptive]] = "[[True]]" == "[[True]]"; } }
[[[[Nl]]]]: Preemptively assigns Basic authentication scheme

[[[[Adv]]]]: public void [[observance]]() { if (!this.[[prevent]]) { if (this.[[frequency]] != null) { throw new IllegalStateException("Authentication state already initialized"); } this.[[frequency]] = AuthPolicy.getAuthScheme(PREEMPTIVE_AUTH_SCHEME); this.[[prevent]] = "[["Precision" == "Precision"]]" == "[["Precision" == "Precision"]]"; } }
[[[[Nl]]]]: Preemptively assigns Basic authentication scheme


--------------------------------------------- Result 715 ---------------------------------------------
[[0 (-6561%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static void [[register]](Object [[value]]) { synchronized (HashCodeBuilder.class) { if (getRegistry() == null) { REGISTRY.set(new HashSet<IDKey>()); } } getRegistry().add(new IDKey([[value]])); }
[[[[Nl]]]]: < p > Registers the given object

[[[[Adv]]]]: static void [[inscriptions]](Object [[evaluate]]) { synchronized (HashCodeBuilder.class) { if (getRegistry() == null) { REGISTRY.set(new HashSet<IDKey>()); } } getRegistry().add(new IDKey([[evaluate]])); }
[[[[Nl]]]]: < p > Registers the given object


--------------------------------------------- Result 716 ---------------------------------------------
[[0 (-7125%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public float [[remove]](int [[index]]) { if ([[index]] < 0 || [[index]] >= count) { throw new ArrayIndexOutOfBoundsException([[index]]); } float [[entry]] = data[[[index]]]; for (int [[i]] = [[index]]; [[i]] < count-1; [[i]]++) { data[[[i]]] = data[[[i]]+1]; } count--; return [[entry]]; }
[[[[Nl]]]]: Remove an element from the specified index

[[[[Adv]]]]: public float [[scrapping]](int [[readout]]) { if ([[readout]] < 0 || [[readout]] >= count) { throw new ArrayIndexOutOfBoundsException([[readout]]); } float [[introduction]] = data[[[readout]]]; for (int [[wanna]] = [[readout]]; [[wanna]] < count-1; [[wanna]]++) { data[[[wanna]]] = data[[[wanna]]+1]; } count--; return [[introduction]]; }
[[[[Nl]]]]: Remove an element from the specified index


--------------------------------------------- Result 717 ---------------------------------------------
[[0 (-6774%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private byte[] [[colorMap]]() { byte[] [[map]] = new byte[3 * netsize]; int[] [[index]] = new int[netsize]; for (int [[i]] = 0; [[i]] < netsize; [[i]]++) { [[index]][network[[[i]]][3]] = [[i]]; } int [[k]] = 0; for (int [[i]] = 0; [[i]] < netsize; [[i]]++) { int j = [[index]][[[i]]]; [[map]][[[k]]++] = (byte) network[j][0]; [[map]][[[k]]++] = (byte) network[j][1]; [[map]][[[k]]++] = (byte) network[j][2]; } return [[map]]; }
[[[[Nl]]]]: Returns the image color map @ return - Returns the image colormap

[[[[Adv]]]]: private byte[] [[blvd]]() { byte[] [[assignment]] = new byte[3 * netsize]; int[] [[clues]] = new int[netsize]; for (int [[du]] = 0; [[du]] < netsize; [[du]]++) { [[clues]][network[[[du]]][3]] = [[du]]; } int [[t]] = 0; for (int [[du]] = 0; [[du]] < netsize; [[du]]++) { int j = [[clues]][[[du]]]; [[assignment]][[[t]]++] = (byte) network[j][0]; [[assignment]][[[t]]++] = (byte) network[j][1]; [[assignment]][[[t]]++] = (byte) network[j][2]; } return [[assignment]]; }
[[[[Nl]]]]: Returns the image color map @ return - Returns the image colormap


--------------------------------------------- Result 718 ---------------------------------------------
[[0 (-7428%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[setIdentifyButtonEnabledStatus]](boolean [[isEnabled]]) { Button [[button]] = (Button) findViewById(R.id.identify); [[button]].setEnabled([[isEnabled]]); }
[[[[Nl]]]]: up button is enabled or not

[[[[Adv]]]]: private void [[tanner]](boolean [[hiring]]) { Button [[dialing]] = (Button) findViewById(R.id.identify); [[dialing]].setEnabled([[hiring]]); }
[[[[Nl]]]]: up button is enabled or not


--------------------------------------------- Result 719 ---------------------------------------------
[[0 (-8000%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[activateFirstInputMethod]]() { ensureInputMethods(); if (mActiveMethodIndex == -1 || !mInputMethods.get(mActiveMethodIndex).isEnabled()) { activateInputMethod(0); } }
[[[[Nl]]]]: Activates first enabled input method

[[[[Adv]]]]: public void [[denominator]]() { ensureInputMethods(); if (mActiveMethodIndex == -1 || !mInputMethods.get(mActiveMethodIndex).isEnabled()) { activateInputMethod(0); } }
[[[[Nl]]]]: Activates first enabled input method


--------------------------------------------- Result 720 ---------------------------------------------
[[0 (-8144%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[startManagedQuickContact]](String [[actualLookupKey]], long [[actualContactId]], Intent [[originalIntent]]) { if (mService != null) { try { mService.startManagedQuickContact( [[actualLookupKey]], [[actualContactId]], [[originalIntent]]); } catch (RemoteException e) { Log.w(TAG, "Failed talking with device policy service", e); } } }
[[[[Nl]]]]: Start Quick Contact on the managed profile for the current user , if the policy allows

[[[[Adv]]]]: public void [[wastage]](String [[baguette]], long [[stardate]], Intent [[shrinking]]) { if (mService != null) { try { mService.startManagedQuickContact( [[baguette]], [[stardate]], [[shrinking]]); } catch (RemoteException e) { Log.w(TAG, "Failed talking with device policy service", e); } } }
[[[[Nl]]]]: Start Quick Contact on the managed profile for the current user , if the policy allows


--------------------------------------------- Result 721 ---------------------------------------------
[[0 (-7902%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[toMemory]](List<City> [[cities]]) { Timber.w("Saving to memory..."); Map<Integer, City> [[cityMap]] = new HashMap<>(); for (City [[city]] : this.[[cities]]) { [[cityMap]].put([[city]].apiId, [[city]]); } for (City [[city]] : [[cities]]) { if (![[cityMap]].containsKey([[city]].apiId)) [[cityMap]].put([[city]].apiId, [[city]]); } this.[[cities]] = new ArrayList<City>([[cityMap]].values()); }
[[[[Nl]]]]: Stores cities into memory @ param cities to save

[[[[Adv]]]]: private void [[appraise]](List<City> [[district]]) { Timber.w("Saving to memory..."); Map<Integer, City> [[fueling]] = new HashMap<>(); for (City [[stadt]] : this.[[neighborhoods]]) { [[fueling]].put([[stadt]].apiId, [[stadt]]); } for (City [[stadt]] : [[district]]) { if (![[fueling]].containsKey([[stadt]].apiId)) [[fueling]].put([[stadt]].apiId, [[stadt]]); } this.[[neighborhoods]] = new ArrayList<City>([[fueling]].values()); }
[[[[Nl]]]]: Stores cities into memory @ param cities to save


--------------------------------------------- Result 722 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 722 / 0 / 722:  92%|█████████▏| 722/785 [22:18<01:56,  1.85s/it][Succeeded / Failed / Skipped / Total] 0 / 722 / 0 / 722:  92%|█████████▏| 723/785 [22:22<01:55,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 723 / 0 / 723:  92%|█████████▏| 723/785 [22:22<01:55,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 723 / 0 / 723:  92%|█████████▏| 724/785 [22:23<01:53,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 724 / 0 / 724:  92%|█████████▏| 724/785 [22:23<01:53,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 724 / 0 / 724:  92%|█████████▏| 725/785 [22:26<01:51,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 725 / 0 / 725:  92%|█████████▏| 725/785 [22:26<01:51,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 725 / 0 / 725:  92%|█████████▏| 726/785 [22:28<01:49,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 726 / 0 / 726:  92%|█████████▏| 726/785 [22:28<01:49,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 726 / 0 / 726:  93%|█████████▎| 727/785 [22:30<01:47,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 727 / 0 / 727:  93%|█████████▎| 727/785 [22:30<01:47,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 727 / 0 / 727:  93%|█████████▎| 728/785 [22:32<01:45,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 728 / 0 / 728:  93%|█████████▎| 728/785 [22:32<01:45,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 728 / 0 / 728:  93%|█████████▎| 729/785 [22:35<01:44,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 729 / 0 / 729:  93%|█████████▎| 729/785 [22:35<01:44,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 729 / 0 / 729:  93%|█████████▎| 730/785 [22:37<01:42,  1.86s/it][[0 (-7594%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[destroy]]() throws IOException { closeStream(); File [[c]] = new File(location + decompressedFolder); deleteDir([[c]]); }
[[[[Nl]]]]: close the stream and delete the extraction folder

[[[[Adv]]]]: public void [[ravaging]]() throws IOException { closeStream(); File [[volts]] = new File(location + decompressedFolder); deleteDir([[volts]]); }
[[[[Nl]]]]: close the stream and delete the extraction folder


--------------------------------------------- Result 723 ---------------------------------------------
[[0 (-5029%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[prepareWindowReplacementTransition]](AppWindowToken [[atoken]]) { [[atoken]].clearAllDrawn(); final WindowState [[replacedWindow]] = [[atoken]].getReplacingWindow(); if ([[replacedWindow]] == null) { return False; } Rect [[frame]] = [[replacedWindow]].mVisibleFrame; mOpeningApps.add([[atoken]]); prepareAppTransition(AppTransition.TRANSIT_ACTIVITY_RELAUNCH, ALWAYS_KEEP_CURRENT); mAppTransition.overridePendingAppTransitionClipReveal([[frame]].left, [[frame]].top, [[frame]].width(), [[frame]].height()); executeAppTransition(); return True; }
[[[[Nl]]]]: Returns true if we 're done setting up any transitions

[[[[Adv]]]]: private boolean [[angela]](AppWindowToken [[stockport]]) { [[stockport]].clearAllDrawn(); final WindowState [[geographic]] = [[stockport]].getReplacingWindow(); if ([[geographic]] == null) { return False; } Rect [[texture]] = [[geographic]].mVisibleFrame; mOpeningApps.add([[stockport]]); prepareAppTransition(AppTransition.TRANSIT_ACTIVITY_RELAUNCH, ALWAYS_KEEP_CURRENT); mAppTransition.overridePendingAppTransitionClipReveal([[texture]].left, [[texture]].top, [[texture]].width(), [[texture]].height()); executeAppTransition(); return True; }
[[[[Nl]]]]: Returns true if we 're done setting up any transitions


--------------------------------------------- Result 724 ---------------------------------------------
[[0 (-8167%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[hideLevelCompleteMenu]]() { if (hasBlurred) { screenshot.addAction( sequence( alpha(0f, .4f, Interpolation.linear), removeActor(screenshot) )); levelCompleteDialog.hide(); levelCompleteLabel.addAction( sequence(Actions.fadeOut(0.4f), Actions.removeActor()) ); hasBlurred = "[[False]]" != "[[False]]"; } }
[[[[Nl]]]]: Hides the level complate menu and unblurs the screen

[[[[Adv]]]]: private void [[coasting]]() { if (hasBlurred) { screenshot.addAction( sequence( alpha(0f, .4f, Interpolation.linear), removeActor(screenshot) )); levelCompleteDialog.hide(); levelCompleteLabel.addAction( sequence(Actions.fadeOut(0.4f), Actions.removeActor()) ); hasBlurred = "[["Forges" != "Forges"]]" != "[["Forges" != "Forges"]]"; } }
[[[[Nl]]]]: Hides the level complate menu and unblurs the screen


--------------------------------------------- Result 725 ---------------------------------------------
[[0 (-7079%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public PreferenceScreen [[inflateFromResource]](Context [[context]], int resId, PreferenceScreen [[rootPreferences]]) { setNoCommit("[[True]]" == "[[True]]"); final PreferenceInflater inflater = new PreferenceInflater([[context]], this); [[rootPreferences]] = (PreferenceScreen) inflater.inflate(resId, [[rootPreferences]], "[[True]]" == "[[True]]"); [[rootPreferences]].onAttachedToHierarchy(this); setNoCommit("[[False]]" != "[[False]]"); return [[rootPreferences]]; }
[[[[Nl]]]]: Inflates a preference hierarchy from XML

[[[[Adv]]]]: public PreferenceScreen [[erhard]](Context [[connection]], int resId, PreferenceScreen [[whereof]]) { setNoCommit("[["Staunch" == "Staunch"]]" == "[["Staunch" == "Staunch"]]"); final PreferenceInflater inflater = new PreferenceInflater([[connection]], this); [[whereof]] = (PreferenceScreen) inflater.inflate(resId, [[whereof]], "[["Staunch" == "Staunch"]]" == "[["Staunch" == "Staunch"]]"); [[whereof]].onAttachedToHierarchy(this); setNoCommit("[["Forged" != "Forged"]]" != "[["Forged" != "Forged"]]"); return [[whereof]]; }
[[[[Nl]]]]: Inflates a preference hierarchy from XML


--------------------------------------------- Result 726 ---------------------------------------------
[[0 (-7667%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[getLocalFaviconForUrl]](String [[url]], int [[size]], FaviconImageCallback [[faviconCallback]]) { return mFaviconHelper.getLocalFaviconImageForURL(mProfile, [[url]], [[size]], [[faviconCallback]]); }
[[[[Nl]]]]: Fetches a favicon for snapshot document url which is returned via callback

[[[[Adv]]]]: public boolean [[decrees]](String [[connect]], int [[amount]], FaviconImageCallback [[algiers]]) { return mFaviconHelper.getLocalFaviconImageForURL(mProfile, [[connect]], [[amount]], [[algiers]]); }
[[[[Nl]]]]: Fetches a favicon for snapshot document url which is returned via callback


--------------------------------------------- Result 727 ---------------------------------------------
[[0 (-7132%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isDexOptNeeded]](File [[dexFile]]) { try { return DexFile.isDexOptNeeded([[dexFile]].getPath()); } catch (Exception e) { e.printStackTrace(); fail(); return "[[False]]" != "[[False]]"; } }
[[[[Nl]]]]: Returns whether the Android OS thinks that a dex file needs to be re-optimized

[[[[Adv]]]]: private boolean [[tubes]](File [[airlines]]) { try { return DexFile.isDexOptNeeded([[airlines]].getPath()); } catch (Exception e) { e.printStackTrace(); fail(); return "[["Forges" != "Forges"]]" != "[["Forges" != "Forges"]]"; } }
[[[[Nl]]]]: Returns whether the Android OS thinks that a dex file needs to be re-optimized


--------------------------------------------- Result 728 ---------------------------------------------
[[0 (-7049%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[Altmax]](){ int [[iAltitudemax]]=0; int [[iAltitudeattime]]=0; Cursor [[c]] = getNavdata(); if ([[c]].moveToFirst()) { do { [[iAltitudeattime]]=Integer.valueOf([[c]].getString([[c]].getColumnIndex(NavdataManager_BDD.KEY_ALTITUDE_NAV))); if([[iAltitudeattime]]>[[iAltitudemax]]){ [[iAltitudemax]]=[[iAltitudeattime]]; } } while ([[c]].moveToNext()); } [[c]].close(); return [[iAltitudemax]]; }
[[[[Nl]]]]: Function that calculates and returns the maximum altitude contained in the bdd @ return The maximum altitude

[[[[Adv]]]]: public int [[Resignations]](){ int [[begun]]=0; int [[relapse]]=0; Cursor [[chapter]] = getNavdata(); if ([[chapter]].moveToFirst()) { do { [[relapse]]=Integer.valueOf([[chapter]].getString([[chapter]].getColumnIndex(NavdataManager_BDD.KEY_ALTITUDE_NAV))); if([[relapse]]>[[begun]]){ [[begun]]=[[relapse]]; } } while ([[chapter]].moveToNext()); } [[chapter]].close(); return [[begun]]; }
[[[[Nl]]]]: Function that calculates and returns the maximum altitude contained in the bdd @ return The maximum altitude


--------------------------------------------- Result 729 ---------------------------------------------
[[0 (-7017%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[call]](final String uri, final Map<String, Object> [[body]], final ResponseListener<JSONObject> [[responseListener]], final ErrorListener [[errorListener]]) { getAppToken(False, (token) -> { Map<String, Object> [[requestBody]] = new HashMap<>(); if ([[body]] != null) [[requestBody]].putAll([[body]]); [[requestBody]].put("access_token", token); execPost(uri, [[requestBody]], False, config.retries, [[responseListener]], [[errorListener]]); }, [[errorListener]]); }
[[[[Nl]]]]: Api call with body

[[[[Adv]]]]: public void [[invite]](final String uri, final Map<String, Object> [[schools]], final ResponseListener<JSONObject> [[offender]], final ErrorListener [[oblivious]]) { getAppToken(False, (token) -> { Map<String, Object> [[spoiled]] = new HashMap<>(); if ([[schools]] != null) [[spoiled]].putAll([[schools]]); [[spoiled]].put("access_token", token); execPost(uri, [[spoiled]], False, config.retries, [[offender]], [[oblivious]]); }, [[oblivious]]); }
[[[[Nl]]]]: Api call with body


--------------------------------------------- Result 730 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 730 / 0 / 730:  93%|█████████▎| 730/785 [22:37<01:42,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 730 / 0 / 730:  93%|█████████▎| 731/785 [22:37<01:40,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 731 / 0 / 731:  93%|█████████▎| 731/785 [22:37<01:40,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 731 / 0 / 731:  93%|█████████▎| 732/785 [22:40<01:38,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 732 / 0 / 732:  93%|█████████▎| 732/785 [22:40<01:38,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 732 / 0 / 732:  93%|█████████▎| 733/785 [22:42<01:36,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 733 / 0 / 733:  93%|█████████▎| 733/785 [22:42<01:36,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 733 / 0 / 733:  94%|█████████▎| 734/785 [22:44<01:34,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 734 / 0 / 734:  94%|█████████▎| 734/785 [22:44<01:34,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 734 / 0 / 734:  94%|█████████▎| 735/785 [22:46<01:32,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 735 / 0 / 735:  94%|█████████▎| 735/785 [22:46<01:32,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 735 / 0 / 735:  94%|█████████▍| 736/785 [22:49<01:31,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 736 / 0 / 736:  94%|█████████▍| 736/785 [22:49<01:31,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 736 / 0 / 736:  94%|█████████▍| 737/785 [22:50<01:29,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 737 / 0 / 737:  94%|█████████▍| 737/785 [22:50<01:29,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 737 / 0 / 737:  94%|█████████▍| 738/785 [22:53<01:27,  1.86s/it][[0 (-6716%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[startLogoActivity]]() { Intent [[logoIntent]] = new Intent(this, LogoFormatsActivity.class); startActivity([[logoIntent]]); }
[[[[Nl]]]]: Shows the list of logos

[[[[Adv]]]]: public void [[pact]]() { Intent [[terminating]] = new Intent(this, LogoFormatsActivity.class); startActivity([[terminating]]); }
[[[[Nl]]]]: Shows the list of logos


--------------------------------------------- Result 731 ---------------------------------------------
[[0 (-7202%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[stopRecording]]() { if (!mIsRecordingStarted) { Log.w(TAG, "stopRecording failed - recording not yet started"); } if (mSession != null) { mSession.stopRecording(); } }
[[[[Nl]]]]: Stops TV program recording in the current recording session

[[[[Adv]]]]: public void [[extract]]() { if (!mIsRecordingStarted) { Log.w(TAG, "stopRecording failed - recording not yet started"); } if (mSession != null) { mSession.stopRecording(); } }
[[[[Nl]]]]: Stops TV program recording in the current recording session


--------------------------------------------- Result 732 ---------------------------------------------
[[0 (-7498%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private boolean isValidMethod(Element [[element]], String... methodPrefixes) { if ([[element]] instanceof ExecutableElement) { String [[fieldName]] = [[element]].getSimpleName().toString(); for (String [[prefix]] : methodPrefixes) { if ([[fieldName]].startsWith([[prefix]])) { return "[[True]]" == "[[True]]"; } } } return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: Check if the method in ExecutableElement starts with one of the methodPrefixes @ param element element object @ param methodPrefixes method prefix list @ return true if the the element is a method and start with one of the method prefixes

[[[[Adv]]]]: private boolean isValidMethod(Element [[coefficient]], String... methodPrefixes) { if ([[coefficient]] instanceof ExecutableElement) { String [[stakes]] = [[coefficient]].getSimpleName().toString(); for (String [[numbering]] : methodPrefixes) { if ([[stakes]].startsWith([[numbering]])) { return "[["Realty" == "Realty"]]" == "[["Realty" == "Realty"]]"; } } } return "[["Counterfeits" != "Counterfeits"]]" != "[["Counterfeits" != "Counterfeits"]]"; }
[[[[Nl]]]]: Check if the method in ExecutableElement starts with one of the methodPrefixes @ param element element object @ param methodPrefixes method prefix list @ return true if the the element is a method and start with one of the method prefixes


--------------------------------------------- Result 733 ---------------------------------------------
[[0 (-7066%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[onAmazonProductDataResponseEvent]](@NonNull final AmazonProductDataResponse [[response]]) { final ProductDataResponse.RequestStatus [[status]] = [[response]].getProductDataResponse().getRequestStatus(); switch ([[status]]) { case SUCCESSFUL: final Collection<SkuDetails> [[skusDetails]] = AmazonUtils.getSkusDetails([[response]].getProductDataResponse()); postResponse(new SkuDetailsResponse(SUCCESS, getName(), [[skusDetails]])); break; case FAILED: case NOT_SUPPORTED: ASLog.e("Product data request failed: %s", [[response]]); postResponse(new SkuDetailsResponse(AmazonUtils.handleFailure(context), getName())); break; default: ASLog.e("Unknown status: " + [[status]]); postResponse(new SkuDetailsResponse(UNKNOWN_ERROR, getName())); break; } }
[[[[Nl]]]]: Handles sku details response from Amazon

[[[[Adv]]]]: private void [[organization]](@NonNull final AmazonProductDataResponse [[reaction]]) { final ProductDataResponse.RequestStatus [[ordinances]] = [[reaction]].getProductDataResponse().getRequestStatus(); switch ([[ordinances]]) { case SUCCESSFUL: final Collection<SkuDetails> [[constabulary]] = AmazonUtils.getSkusDetails([[reaction]].getProductDataResponse()); postResponse(new SkuDetailsResponse(SUCCESS, getName(), [[constabulary]])); break; case FAILED: case NOT_SUPPORTED: ASLog.e("Product data request failed: %s", [[reaction]]); postResponse(new SkuDetailsResponse(AmazonUtils.handleFailure(context), getName())); break; default: ASLog.e("Unknown status: " + [[ordinances]]); postResponse(new SkuDetailsResponse(UNKNOWN_ERROR, getName())); break; } }
[[[[Nl]]]]: Handles sku details response from Amazon


--------------------------------------------- Result 734 ---------------------------------------------
[[0 (-7258%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getDate]]() { SimpleDateFormat [[simpleDate]] = new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()); String [[date]] = [[simpleDate]].format(Calendar.getInstance().getTime()); return [[date]]; }
[[[[Nl]]]]: Passed EditText and fills with current date

[[[[Adv]]]]: public String [[zette]]() { SimpleDateFormat [[constrictor]] = new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()); String [[chronology]] = [[constrictor]].format(Calendar.getInstance().getTime()); return [[chronology]]; }
[[[[Nl]]]]: Passed EditText and fills with current date


--------------------------------------------- Result 735 ---------------------------------------------
[[0 (-5469%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static int[] [[getArrayFromList]](List <Integer> [[list]]) { int[] [[array]] = new int[[[list]].size()]; for(int [[i]] = 0; [[i]] < [[list]].size(); [[i]]++) { [[array]][[[i]]] = [[list]].get([[i]]); } return [[array]]; }
[[[[Nl]]]]: Auxiliar functions for RenderScript

[[[[Adv]]]]: public static int[] [[distance]](List <Integer> [[recorded]]) { int[] [[range]] = new int[[[recorded]].size()]; for(int [[to]] = 0; [[to]] < [[recorded]].size(); [[to]]++) { [[range]][[[to]]] = [[recorded]].get([[to]]); } return [[range]]; }
[[[[Nl]]]]: Auxiliar functions for RenderScript


--------------------------------------------- Result 736 ---------------------------------------------
[[0 (-7493%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static ArrayList<Playlist> createPlaylistsFromCursor(Cursor [[c]]) { ArrayList<Playlist> [[playlists]] = new ArrayList<>(); LumberJack.v("creation of playlists in progress.. "); if ([[c]].getCount() != 0) { [[c]].moveToFirst(); do { String id = [[c]].getString(PLAYLIST_ID_COLUMN); String name = [[c]].getString(PLAYLIST_NAME_COLUMN); String [[data]] = [[c]].getString(PLAYLIST_DATA_COLUMN); String [[date_added]] = [[c]].getString(PLAYLIST_DATE_ADDED_COLUMN); String [[date_modeified]] = [[c]].getString(PLAYLIST_DATE_MODIFIED_COLUMN); [[playlists]].add(new Playlist(id, name, [[data]], [[date_added]], [[date_modeified]])); } while ([[c]].moveToNext()); } LumberJack.v("cursor size for playlists: " + [[c]].getCount()); [[c]].close(); return [[playlists]]; }
[[[[Nl]]]]: Method to get list of all playlists from cursor

[[[[Adv]]]]: public static ArrayList<Playlist> createPlaylistsFromCursor(Cursor [[chapter]]) { ArrayList<Playlist> [[review]] = new ArrayList<>(); LumberJack.v("creation of playlists in progress.. "); if ([[chapter]].getCount() != 0) { [[chapter]].moveToFirst(); do { String id = [[chapter]].getString(PLAYLIST_ID_COLUMN); String name = [[chapter]].getString(PLAYLIST_NAME_COLUMN); String [[reports]] = [[chapter]].getString(PLAYLIST_DATA_COLUMN); String [[intricacies]] = [[chapter]].getString(PLAYLIST_DATE_ADDED_COLUMN); String [[blackface]] = [[chapter]].getString(PLAYLIST_DATE_MODIFIED_COLUMN); [[review]].add(new Playlist(id, name, [[reports]], [[intricacies]], [[blackface]])); } while ([[chapter]].moveToNext()); } LumberJack.v("cursor size for playlists: " + [[chapter]].getCount()); [[chapter]].close(); return [[review]]; }
[[[[Nl]]]]: Method to get list of all playlists from cursor


--------------------------------------------- Result 737 ---------------------------------------------
[[0 (-8063%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[incrementPnoScanFailedOverOffloadCount]]() { synchronized (mLock) { mPnoScanMetrics.numPnoScanFailedOverOffload++; } }
[[[[Nl]]]]: Increment number of pno scans failed over offload

[[[[Adv]]]]: public void [[usher]]() { synchronized (mLock) { mPnoScanMetrics.numPnoScanFailedOverOffload++; } }
[[[[Nl]]]]: Increment number of pno scans failed over offload


[Succeeded / Failed / Skipped / Total] 0 / 738 / 0 / 738:  94%|█████████▍| 738/785 [22:53<01:27,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 738 / 0 / 738:  94%|█████████▍| 739/785 [22:55<01:25,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 739 / 0 / 739:  94%|█████████▍| 739/785 [22:55<01:25,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 739 / 0 / 739:  94%|█████████▍| 740/785 [22:58<01:23,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 740 / 0 / 740:  94%|█████████▍| 740/785 [22:58<01:23,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 740 / 0 / 740:  94%|█████████▍| 741/785 [23:01<01:22,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 741 / 0 / 741:  94%|█████████▍| 741/785 [23:01<01:22,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 741 / 0 / 741:  95%|█████████▍| 742/785 [23:02<01:20,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 742 / 0 / 742:  95%|█████████▍| 742/785 [23:02<01:20,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 742 / 0 / 742:  95%|█████████▍| 743/785 [23:03<01:18,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 743 / 0 / 743:  95%|█████████▍| 743/785 [23:03<01:18,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 743 / 0 / 743:  95%|█████████▍| 744/785 [23:06<01:16,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 744 / 0 / 744:  95%|█████████▍| 744/785 [23:06<01:16,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 744 / 0 / 744:  95%|█████████▍| 745/785 [23:08<01:14,  1.86s/it]--------------------------------------------- Result 738 ---------------------------------------------
[[0 (-6369%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[load]](Context [[context]]) { File [[responseFile]] = new File([[context]].getFilesDir(), RESPONSE_FILE); if ([[responseFile]].exists()) { try (ObjectInputStream stream = new ObjectInputStream([[context]].openFileInput(RESPONSE_FILE))) { this.[[responseCollection]] = (ResponseCollection) stream.readObject(); } catch (ClassNotFoundException | IOException e) { responseCollection = null; } } File dataFile = new File([[context]].getFilesDir(), DATA_FILE); if (dataFile.exists()) { try (ObjectInputStream stream = new ObjectInputStream([[context]].openFileInput(DATA_FILE))) { this.[[dataCollection]] = (DataCollection) stream.readObject(); } catch (ClassNotFoundException | IOException e) { dataCollection = null; } } }
[[[[Nl]]]]: Load the cache from the disk

[[[[Adv]]]]: private void [[tasked]](Context [[regard]]) { File [[abducting]] = new File([[regard]].getFilesDir(), RESPONSE_FILE); if ([[abducting]].exists()) { try (ObjectInputStream stream = new ObjectInputStream([[regard]].openFileInput(RESPONSE_FILE))) { this.[[surgeon]] = (ResponseCollection) stream.readObject(); } catch (ClassNotFoundException | IOException e) { responseCollection = null; } } File dataFile = new File([[regard]].getFilesDir(), DATA_FILE); if (dataFile.exists()) { try (ObjectInputStream stream = new ObjectInputStream([[regard]].openFileInput(DATA_FILE))) { this.[[commence]] = (DataCollection) stream.readObject(); } catch (ClassNotFoundException | IOException e) { dataCollection = null; } } }
[[[[Nl]]]]: Load the cache from the disk


--------------------------------------------- Result 739 ---------------------------------------------
[[0 (-6804%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public QueryBuilder<T> [[stringOrderCollation]](String [[stringOrderCollation]]) { if (dao.getDatabase().getRawDatabase() instanceof SQLiteDatabase) { this.[[stringOrderCollation]] = [[stringOrderCollation]] == null || [[stringOrderCollation]].startsWith(" ") ? [[stringOrderCollation]] : " " + [[stringOrderCollation]]; } return this; }
[[[[Nl]]]]: Customizes the ordering of strings used by { @ link # orderAsc ( Property

[[[[Adv]]]]: public QueryBuilder<T> [[evenin]](String [[youll]]) { if (dao.getDatabase().getRawDatabase() instanceof SQLiteDatabase) { this.[[conjecture]] = [[evenin]] == null || [[evenin]].startsWith(" ") ? [[evenin]] : " " + [[evenin]]; } return this; }
[[[[Nl]]]]: Customizes the ordering of strings used by { @ link # orderAsc ( Property


--------------------------------------------- Result 740 ---------------------------------------------
[[0 (-7976%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getReadableFileSize]](int [[size]]) { final int [[BYTES_IN_KILOBYTES]] = 1024; final DecimalFormat dec = new DecimalFormat("###.#"); final String KILOBYTES = " KB"; final String MEGABYTES = " MB"; final String [[GIGABYTES]] = " GB"; float [[fileSize]] = 0; String suffix = KILOBYTES; if ([[size]] > [[BYTES_IN_KILOBYTES]]) { [[fileSize]] = [[size]] / [[BYTES_IN_KILOBYTES]]; if ([[fileSize]] > [[BYTES_IN_KILOBYTES]]) { [[fileSize]] = [[fileSize]] / [[BYTES_IN_KILOBYTES]]; if ([[fileSize]] > [[BYTES_IN_KILOBYTES]]) { [[fileSize]] = [[fileSize]] / [[BYTES_IN_KILOBYTES]]; suffix = [[GIGABYTES]]; } else { suffix = MEGABYTES; } } } return String.valueOf(dec.format([[fileSize]]) + suffix); }
[[[[Nl]]]]: Get the file size in a human-readable string

[[[[Adv]]]]: public static String [[detonate]](int [[amplitude]]) { final int [[DEACTIVATE]] = 1024; final DecimalFormat dec = new DecimalFormat("###.#"); final String KILOBYTES = " KB"; final String MEGABYTES = " MB"; final String [[ROADRUNNER]] = " GB"; float [[killed]] = 0; String suffix = KILOBYTES; if ([[amplitude]] > [[DEACTIVATE]]) { [[killed]] = [[amplitude]] / [[DEACTIVATE]]; if ([[killed]] > [[DEACTIVATE]]) { [[killed]] = [[killed]] / [[DEACTIVATE]]; if ([[killed]] > [[DEACTIVATE]]) { [[killed]] = [[killed]] / [[DEACTIVATE]]; suffix = [[ROADRUNNER]]; } else { suffix = MEGABYTES; } } } return String.valueOf(dec.format([[killed]]) + suffix); }
[[[[Nl]]]]: Get the file size in a human-readable string


--------------------------------------------- Result 741 ---------------------------------------------
[[0 (-7531%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private ColorStateList [[createTextColor]](int [[accentColor]], boolean [[darkMode]]) { int[][] [[states]] = new int[][]{ new int[]{android.R.attr.state_pressed}, new int[]{android.R.attr.state_selected}, new int[]{} }; int[] [[colors]] = new int[]{ [[accentColor]], Color.WHITE, [[darkMode]] ? Color.WHITE : Color.BLACK }; return new ColorStateList([[states]], [[colors]]); }
[[[[Nl]]]]: Programmatically set the color state list ( see mdtp_date_picker_year_selector ) @ param accentColor pressed state text color @ param darkMode current theme mode @ return ColorStateList with pressed state

[[[[Adv]]]]: private ColorStateList [[player]](int [[signatures]], boolean [[imagined]]) { int[][] [[nations]] = new int[][]{ new int[]{android.R.attr.state_pressed}, new int[]{android.R.attr.state_selected}, new int[]{} }; int[] [[shading]] = new int[]{ [[signatures]], Color.WHITE, [[imagined]] ? Color.WHITE : Color.BLACK }; return new ColorStateList([[nations]], [[shading]]); }
[[[[Nl]]]]: Programmatically set the color state list ( see mdtp_date_picker_year_selector ) @ param accentColor pressed state text color @ param darkMode current theme mode @ return ColorStateList with pressed state


--------------------------------------------- Result 742 ---------------------------------------------
[[0 (-7831%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private ResultSet [[executeQuery]](String [[query]]) { ResultSet [[rs]]; Log.d("Execute Query: ", "Query string: " + [[query]]); try { [[rs]] = stmt.executeQuery([[query]]); [[rs]].next(); return [[rs]]; } catch (Exception e) { Log.d("Execute Query Error: ", e.getMessage()); } return null; }
[[[[Nl]]]]: Executes a query on the server

[[[[Adv]]]]: private ResultSet [[kiffer]](String [[counsellors]]) { ResultSet [[lakhs]]; Log.d("Execute Query: ", "Query string: " + [[counsellors]]); try { [[lakhs]] = stmt.executeQuery([[counsellors]]); [[lakhs]].next(); return [[lakhs]]; } catch (Exception e) { Log.d("Execute Query Error: ", e.getMessage()); } return null; }
[[[[Nl]]]]: Executes a query on the server


--------------------------------------------- Result 743 ---------------------------------------------
[[0 (-8066%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[startSelectionMode]](){ this.[[startSelectionModeHandler]].sendEmptyMessage(0); }
[[[[Nl]]]]: Starts selection mode

[[[[Adv]]]]: public void [[disordered]](){ this.[[economies]].sendEmptyMessage(0); }
[[[[Nl]]]]: Starts selection mode


--------------------------------------------- Result 744 ---------------------------------------------
[[0 (-6415%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getSubjectID]](String [[encodedEmail]]) { String timeStamp = new SimpleDateFormat(Utils.SIMPLE_DATE_FORMAT1, Locale.US).format(new Date()); String [[imageName]] = [[encodedEmail]] + timeStamp; return [[imageName]]; }
[[[[Nl]]]]: TODO : remove unnecessary thing

[[[[Adv]]]]: public static String [[solids]](String [[squares]]) { String timeStamp = new SimpleDateFormat(Utils.SIMPLE_DATE_FORMAT1, Locale.US).format(new Date()); String [[salamanders]] = [[squares]] + timeStamp; return [[salamanders]]; }
[[[[Nl]]]]: TODO : remove unnecessary thing


--------------------------------------------- Result 745 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 745 / 0 / 745:  95%|█████████▍| 745/785 [23:08<01:14,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 745 / 0 / 745:  95%|█████████▌| 746/785 [23:10<01:12,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 746 / 0 / 746:  95%|█████████▌| 746/785 [23:10<01:12,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 746 / 0 / 746:  95%|█████████▌| 747/785 [23:13<01:10,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 747 / 0 / 747:  95%|█████████▌| 747/785 [23:13<01:10,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 747 / 0 / 747:  95%|█████████▌| 748/785 [23:13<01:08,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 748 / 0 / 748:  95%|█████████▌| 748/785 [23:13<01:08,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 748 / 0 / 748:  95%|█████████▌| 749/785 [23:14<01:07,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 749 / 0 / 749:  95%|█████████▌| 749/785 [23:14<01:07,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 749 / 0 / 749:  96%|█████████▌| 750/785 [23:17<01:05,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 750 / 0 / 750:  96%|█████████▌| 750/785 [23:17<01:05,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 750 / 0 / 750:  96%|█████████▌| 751/785 [23:19<01:03,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 751 / 0 / 751:  96%|█████████▌| 751/785 [23:19<01:03,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 751 / 0 / 751:  96%|█████████▌| 752/785 [23:22<01:01,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 752 / 0 / 752:  96%|█████████▌| 752/785 [23:22<01:01,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 752 / 0 / 752:  96%|█████████▌| 753/785 [23:24<00:59,  1.86s/it][[0 (-7437%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[add]](String [[s]], String [[add]], String [[delimiter]]) { return [[add]]([[s]], [[add]], [[delimiter]], "[[False]]" != "[[False]]"); }
[[[[Nl]]]]: Adds string < code > add < code > to string < code > s < code > that represents a delimited list of strings , using a specified delimiter and disallowing duplicate words

[[[[Adv]]]]: public static String [[embed]](String [[percent]], String [[integration]], String [[stakeouts]]) { return [[embed]]([[percent]], [[embed]], [[stakeouts]], "[["Deceiving" != "Deceiving"]]" != "[["Deceiving" != "Deceiving"]]"); }
[[[[Nl]]]]: Adds string < code > add < code > to string < code > s < code > that represents a delimited list of strings , using a specified delimiter and disallowing duplicate words


--------------------------------------------- Result 746 ---------------------------------------------
[[0 (-8529%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[sendDownUpKeyEvent]](final int [[keyCode]]) { final long [[eventTime]] = SystemClock.uptimeMillis(); mConnection.sendKeyEvent(new KeyEvent([[eventTime]], [[eventTime]], KeyEvent.ACTION_DOWN, [[keyCode]], 0, 0, KeyCharacterMap.VIRTUAL_KEYBOARD, 0, KeyEvent.FLAG_SOFT_KEYBOARD | KeyEvent.FLAG_KEEP_TOUCH_MODE)); mConnection.sendKeyEvent(new KeyEvent(SystemClock.uptimeMillis(), [[eventTime]], KeyEvent.ACTION_UP, [[keyCode]], 0, 0, KeyCharacterMap.VIRTUAL_KEYBOARD, 0, KeyEvent.FLAG_SOFT_KEYBOARD | KeyEvent.FLAG_KEEP_TOUCH_MODE)); }
[[[[Nl]]]]: Sends a DOWN key event followed by an UP key event to the editor

[[[[Adv]]]]: private void [[strain]](final int [[guide]]) { final long [[archeologists]] = SystemClock.uptimeMillis(); mConnection.sendKeyEvent(new KeyEvent([[archeologists]], [[archeologists]], KeyEvent.ACTION_DOWN, [[guide]], 0, 0, KeyCharacterMap.VIRTUAL_KEYBOARD, 0, KeyEvent.FLAG_SOFT_KEYBOARD | KeyEvent.FLAG_KEEP_TOUCH_MODE)); mConnection.sendKeyEvent(new KeyEvent(SystemClock.uptimeMillis(), [[archeologists]], KeyEvent.ACTION_UP, [[guide]], 0, 0, KeyCharacterMap.VIRTUAL_KEYBOARD, 0, KeyEvent.FLAG_SOFT_KEYBOARD | KeyEvent.FLAG_KEEP_TOUCH_MODE)); }
[[[[Nl]]]]: Sends a DOWN key event followed by an UP key event to the editor


--------------------------------------------- Result 747 ---------------------------------------------
[[0 (-7791%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[lockCells]](){ undoButton.setClickable("[[False]]" != "[[False]]"); for(int [[i]] = 0 ; [[i]] < _width ; ++[[i]]) { for (int [[j]] = 0; [[j]] < _height; ++[[j]]) { gameCells[[[i]]][[[j]]].setClickable("[[False]]" != "[[False]]"); } } }
[[[[Nl]]]]: locks cells and buttons

[[[[Adv]]]]: private void [[hypodermic]](){ undoButton.setClickable("[["Imaginary" != "Imaginary"]]" != "[["Imaginary" != "Imaginary"]]"); for(int [[wanted]] = 0 ; [[wanted]] < _width ; ++[[wanted]]) { for (int [[evans]] = 0; [[evans]] < _height; ++[[evans]]) { gameCells[[[wanted]]][[[evans]]].setClickable("[["Imaginary" != "Imaginary"]]" != "[["Imaginary" != "Imaginary"]]"); } } }
[[[[Nl]]]]: locks cells and buttons


--------------------------------------------- Result 748 ---------------------------------------------
[[0 (-6771%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[doSolve]]() { reset(); worker = solver.getThread(0); worker.start(); }
[[[[Nl]]]]: Solves the puzzle

[[[[Adv]]]]: void [[attributes]]() { reset(); worker = solver.getThread(0); worker.start(); }
[[[[Nl]]]]: Solves the puzzle


--------------------------------------------- Result 749 ---------------------------------------------
[[0 (-7176%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[getUser]]() { if (AuthenticationUtils.getInstance().getUser() != null) startMainActivity(); }
[[[[Nl]]]]: Method to check User Details

[[[[Adv]]]]: private void [[unsociable]]() { if (AuthenticationUtils.getInstance().getUser() != null) startMainActivity(); }
[[[[Nl]]]]: Method to check User Details


--------------------------------------------- Result 750 ---------------------------------------------
[[0 (-7635%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[extractFile]](ZipInputStream [[zipIn]], String filePath) throws IOException { BufferedOutputStream [[bos]] = new BufferedOutputStream(new FileOutputStream(filePath)); byte[] [[bytesIn]] = new byte[BUFFER_SIZE]; int [[read]] = 0; while (([[read]] = [[zipIn]].read([[bytesIn]])) != -1) { [[bos]].write([[bytesIn]], 0, [[read]]); } [[bos]].close(); }
[[[[Nl]]]]: Writes extracted files to output directory @ param zipIn input zip file @ param filePath output directory @ throws IOException

[[[[Adv]]]]: private static void [[alimony]](ZipInputStream [[emotion]], String filePath) throws IOException { BufferedOutputStream [[everglades]] = new BufferedOutputStream(new FileOutputStream(filePath)); byte[] [[meanings]] = new byte[BUFFER_SIZE]; int [[kristin]] = 0; while (([[kristin]] = [[emotion]].read([[meanings]])) != -1) { [[everglades]].write([[meanings]], 0, [[kristin]]); } [[everglades]].close(); }
[[[[Nl]]]]: Writes extracted files to output directory @ param zipIn input zip file @ param filePath output directory @ throws IOException


--------------------------------------------- Result 751 ---------------------------------------------
[[0 (-6426%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static Bitmap [[loadObfuscatedThumbnail]](Uri [[inUri]]) { try { byte[] [[fis]] = getImage(ImageInfo.getSecuredThumbnailPath([[inUri]])); byte[] [[out]] = ObfscateUtil.deObfuscate([[fis]]); return ImageUtil.load([[out]]); } catch (Exception e) { e.printStackTrace(); } return null; }
[[[[Nl]]]]: The given URI should be of the FULL SIZED IMAGE @ param inUri @ return

[[[[Adv]]]]: public static Bitmap [[claudie]](Uri [[sharpener]]) { try { byte[] [[launched]] = getImage(ImageInfo.getSecuredThumbnailPath([[sharpener]])); byte[] [[off]] = ObfscateUtil.deObfuscate([[launched]]); return ImageUtil.load([[off]]); } catch (Exception e) { e.printStackTrace(); } return null; }
[[[[Nl]]]]: The given URI should be of the FULL SIZED IMAGE @ param inUri @ return


--------------------------------------------- Result 752 ---------------------------------------------
[[0 (-7101%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static String createETSTaskListId(Tasks [[tasksClient]], String [[taskListName]]) throws IOException { String [[taskListId]] = ""; List<TaskList> [[items]] = [[tasksClient]].tasklists().list().execute().getItems(); for (TaskList [[item]] : [[items]]) { if ([[item]].getTitle().equals([[taskListName]])) { [[tasksClient]].tasklists().delete([[item]].getId()).execute(); } } TaskList taskList = new TaskList(); taskList.setTitle([[taskListName]]); [[taskListId]] = [[tasksClient]].tasklists().insert(taskList).execute().getId(); return [[taskListId]]; }
[[[[Nl]]]]: Deletes the tasklist with the specified name if it exists and creates a new tasklist with the specified name @ param tasksClient @ param taskListName @ return id of the tasklist @ throws IOException

[[[[Adv]]]]: public static String createETSTaskListId(Tasks [[rippling]], String [[friday]]) throws IOException { String [[psychoanalytical]] = ""; List<TaskList> [[substances]] = [[rippling]].tasklists().list().execute().getItems(); for (TaskList [[question]] : [[substances]]) { if ([[question]].getTitle().equals([[friday]])) { [[rippling]].tasklists().delete([[question]].getId()).execute(); } } TaskList taskList = new TaskList(); taskList.setTitle([[friday]]); [[psychoanalytical]] = [[rippling]].tasklists().insert(taskList).execute().getId(); return [[psychoanalytical]]; }
[[[[Nl]]]]: Deletes the tasklist with the specified name if it exists and creates a new tasklist with the specified name @ param tasksClient @ param taskListName @ return id of the tasklist @ throws IOException


--------------------------------------------- Result 753 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 753 / 0 / 753:  96%|█████████▌| 753/785 [23:24<00:59,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 753 / 0 / 753:  96%|█████████▌| 754/785 [23:25<00:57,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 754 / 0 / 754:  96%|█████████▌| 754/785 [23:25<00:57,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 754 / 0 / 754:  96%|█████████▌| 755/785 [23:25<00:55,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 755 / 0 / 755:  96%|█████████▌| 755/785 [23:25<00:55,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 755 / 0 / 755:  96%|█████████▋| 756/785 [23:27<00:53,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 756 / 0 / 756:  96%|█████████▋| 756/785 [23:27<00:53,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 756 / 0 / 756:  96%|█████████▋| 757/785 [23:30<00:52,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 757 / 0 / 757:  96%|█████████▋| 757/785 [23:30<00:52,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 757 / 0 / 757:  97%|█████████▋| 758/785 [23:33<00:50,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 758 / 0 / 758:  97%|█████████▋| 758/785 [23:33<00:50,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 758 / 0 / 758:  97%|█████████▋| 759/785 [23:36<00:48,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 759 / 0 / 759:  97%|█████████▋| 759/785 [23:36<00:48,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 759 / 0 / 759:  97%|█████████▋| 760/785 [23:36<00:46,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 760 / 0 / 760:  97%|█████████▋| 760/785 [23:36<00:46,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 760 / 0 / 760:  97%|█████████▋| 761/785 [23:39<00:44,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 761 / 0 / 761:  97%|█████████▋| 761/785 [23:39<00:44,  1.87s/it][Succeeded / Failed / Skipped / Total] 0 / 761 / 0 / 761:  97%|█████████▋| 762/785 [23:40<00:42,  1.86s/it][[0 (-7056%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[playSoundRandomScore]]() { scoreOrder++; if (scoreOrder == 3) { scoreOrder = 0; int [[fraction]] = (int) (randomEndScore * random.nextDouble()); int [[randomNumber]] = (int) ([[fraction]] + randomStartScore); playSound([[randomNumber]]); } }
[[[[Nl]]]]: Plays a random sound from the array of sounds cached

[[[[Adv]]]]: public void [[chou]]() { scoreOrder++; if (scoreOrder == 3) { scoreOrder = 0; int [[dividing]] = (int) (randomEndScore * random.nextDouble()); int [[legit]] = (int) ([[dividing]] + randomStartScore); playSound([[legit]]); } }
[[[[Nl]]]]: Plays a random sound from the array of sounds cached


--------------------------------------------- Result 754 ---------------------------------------------
[[0 (-8078%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getSubElementName]](int [[index]]) { if (mVisibleElementMap == null) { throw new RSIllegalArgumentException("Element contains no sub-elements"); } if ([[index]] < 0 || [[index]] >= mVisibleElementMap.length) { throw new RSIllegalArgumentException("Illegal sub-element index"); } return mElementNames[mVisibleElementMap[[[index]]]]; }
[[[[Nl]]]]: For complex elements , this function will return the sub-element name at index @ param index index of the sub-element @ return sub-element in this element at given index

[[[[Adv]]]]: public String [[buggered]](int [[gauges]]) { if (mVisibleElementMap == null) { throw new RSIllegalArgumentException("Element contains no sub-elements"); } if ([[gauges]] < 0 || [[gauges]] >= mVisibleElementMap.length) { throw new RSIllegalArgumentException("Illegal sub-element index"); } return mElementNames[mVisibleElementMap[[[gauges]]]]; }
[[[[Nl]]]]: For complex elements , this function will return the sub-element name at index @ param index index of the sub-element @ return sub-element in this element at given index


--------------------------------------------- Result 755 ---------------------------------------------
[[0 (-7118%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[redirectToRegister]]() { finish(); startActivity(new Intent(this, Registration.class)); }
[[[[Nl]]]]: Method to switch from Login page to the Registration Page

[[[[Adv]]]]: private void [[grotto]]() { finish(); startActivity(new Intent(this, Registration.class)); }
[[[[Nl]]]]: Method to switch from Login page to the Registration Page


--------------------------------------------- Result 756 ---------------------------------------------
[[0 (-7055%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[processWarningOccurred]](int [[imageIndex]], String [[warning]]) { }
[[[[Nl]]]]: Broadcasts a warning message to all registered < code > IIOWriteWarningListener < code > s by calling their < code > warningOccurred < code > method

[[[[Adv]]]]: protected void [[commemorative]](int [[homerun]], String [[ultimatum]]) { }
[[[[Nl]]]]: Broadcasts a warning message to all registered < code > IIOWriteWarningListener < code > s by calling their < code > warningOccurred < code > method


--------------------------------------------- Result 757 ---------------------------------------------
[[0 (-6324%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setValue]](String verb, String [[directObject]], String longFlagName, Object [[value]]) { String [[key]] = verb + '/' + [[directObject]] + '/' + longFlagName; Arg [[arg]] = mArguments.get([[key]]); [[arg]].setCurrentValue([[value]]); }
[[[[Nl]]]]: Internal setter for raw parameter value

[[[[Adv]]]]: protected void [[version]](String verb, String [[videogames]], String longFlagName, Object [[worthwhile]]) { String [[decisive]] = verb + '/' + [[videogames]] + '/' + longFlagName; Arg [[when]] = mArguments.get([[decisive]]); [[when]].setCurrentValue([[worthwhile]]); }
[[[[Nl]]]]: Internal setter for raw parameter value


--------------------------------------------- Result 758 ---------------------------------------------
[[0 (-7736%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static public void [[assertEquals]](String [[message]], float [[expected]], float [[actual]], float [[delta]]) { if (Float.compare([[expected]], [[actual]]) == 0) return; if (!(Math.abs([[expected]] - [[actual]]) <= [[delta]])) failNotEquals([[message]], new Float([[expected]]), new Float([[actual]])); }
[[[[Nl]]]]: Asserts that two floats are equal concerning a positive delta

[[[[Adv]]]]: static public void [[crawlers]](String [[couriers]], float [[anticipation]], float [[rem]], float [[claw]]) { if (Float.compare([[anticipation]], [[rem]]) == 0) return; if (!(Math.abs([[anticipation]] - [[rem]]) <= [[claw]])) failNotEquals([[couriers]], new Float([[anticipation]]), new Float([[rem]])); }
[[[[Nl]]]]: Asserts that two floats are equal concerning a positive delta


--------------------------------------------- Result 759 ---------------------------------------------
[[0 (-7316%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isSameItemAs]](PkgItem item) { if (this == item) { return True; } boolean [[same]] = this.mState == item.mState; if ([[same]]) { [[same]] = isSameMainPackageAs(item.getMainPackage()); } if ([[same]]) { Package [[p1]] = this.[[mUpdatePkg]]; Package [[p2]] = item.getUpdatePkg(); [[same]] = ([[p1]] == [[p2]]) || ([[p1]] == null && [[p2]] == null) || ([[p1]] != null && [[p2]] != null); if ([[same]] && [[p1]] != null) { [[same]] = [[p1]].canBeUpdatedBy([[p2]]) == UpdateInfo.NOT_UPDATE; } } return [[same]]; }
[[[[Nl]]]]: Checks whether too { @ link PkgItem } are the same

[[[[Adv]]]]: public boolean [[brighten]](PkgItem item) { if (this == item) { return True; } boolean [[wager]] = this.mState == item.mState; if ([[wager]]) { [[wager]] = isSameMainPackageAs(item.getMainPackage()); } if ([[wager]]) { Package [[save]] = this.[[activism]]; Package [[players]] = item.getUpdatePkg(); [[wager]] = ([[save]] == [[players]]) || ([[save]] == null && [[players]] == null) || ([[save]] != null && [[players]] != null); if ([[wager]] && [[save]] != null) { [[wager]] = [[save]].canBeUpdatedBy([[players]]) == UpdateInfo.NOT_UPDATE; } } return [[wager]]; }
[[[[Nl]]]]: Checks whether too { @ link PkgItem } are the same


--------------------------------------------- Result 760 ---------------------------------------------
[[0 (-5046%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public final Tint [[getTint]]() { return tint; }
[[[[Nl]]]]: Returns the current Noise

[[[[Adv]]]]: public final Tint [[robster]]() { return tint; }
[[[[Nl]]]]: Returns the current Noise


--------------------------------------------- Result 761 ---------------------------------------------
[[0 (-8263%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Evento [[buscarEventoNome]](String [[nome]]) throws MindbitException { SQLiteDatabase [[db]]; [[db]] = databaseHelper.getReadableDatabase(); Evento [[evento]] = null; Cursor [[cursor]] = [[db]].rawQuery("SELECT * FROM " + databaseHelper.TABELA_EVENTO + " WHERE " + databaseHelper.EVENTO_NOME + " =?", new String[]{[[nome]]}); if ([[cursor]].moveToFirst()){ [[evento]] = criarEvento([[cursor]]); } [[db]].close(); [[cursor]].close(); return [[evento]]; }
[[[[Nl]]]]: metodo utilizado para fazer a busca dos evento no banco atraves do nome @ param nome nome do evento que sera encontrado @ return evento com o nome desejado encontrado @ throws MindbitException caso o evento nao possa ser encontrado

[[[[Adv]]]]: public Evento [[brother]](String [[comstock]]) throws MindbitException { SQLiteDatabase [[decibels]]; [[decibels]] = databaseHelper.getReadableDatabase(); Evento [[greenhouses]] = null; Cursor [[volatility]] = [[decibels]].rawQuery("SELECT * FROM " + databaseHelper.TABELA_EVENTO + " WHERE " + databaseHelper.EVENTO_NOME + " =?", new String[]{[[comstock]]}); if ([[volatility]].moveToFirst()){ [[greenhouses]] = criarEvento([[volatility]]); } [[decibels]].close(); [[volatility]].close(); return [[greenhouses]]; }
[[[[Nl]]]]: metodo utilizado para fazer a busca dos evento no banco atraves do nome @ param nome nome do evento que sera encontrado @ return evento com o nome desejado encontrado @ throws MindbitException caso o evento nao possa ser encontrado


[Succeeded / Failed / Skipped / Total] 0 / 762 / 0 / 762:  97%|█████████▋| 762/785 [23:40<00:42,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 762 / 0 / 762:  97%|█████████▋| 763/785 [23:41<00:40,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 763 / 0 / 763:  97%|█████████▋| 763/785 [23:41<00:40,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 763 / 0 / 763:  97%|█████████▋| 764/785 [23:42<00:39,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 764 / 0 / 764:  97%|█████████▋| 764/785 [23:42<00:39,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 764 / 0 / 764:  97%|█████████▋| 765/785 [23:43<00:37,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 765 / 0 / 765:  97%|█████████▋| 765/785 [23:43<00:37,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 765 / 0 / 765:  98%|█████████▊| 766/785 [23:45<00:35,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 766 / 0 / 766:  98%|█████████▊| 766/785 [23:45<00:35,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 766 / 0 / 766:  98%|█████████▊| 767/785 [23:46<00:33,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 767 / 0 / 767:  98%|█████████▊| 767/785 [23:46<00:33,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 767 / 0 / 767:  98%|█████████▊| 768/785 [23:47<00:31,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 768 / 0 / 768:  98%|█████████▊| 768/785 [23:47<00:31,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 768 / 0 / 768:  98%|█████████▊| 769/785 [23:49<00:29,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 769 / 0 / 769:  98%|█████████▊| 769/785 [23:49<00:29,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 769 / 0 / 769:  98%|█████████▊| 770/785 [23:51<00:27,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 770 / 0 / 770:  98%|█████████▊| 770/785 [23:51<00:27,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 770 / 0 / 770:  98%|█████████▊| 771/785 [23:54<00:26,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 771 / 0 / 771:  98%|█████████▊| 771/785 [23:54<00:26,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 771 / 0 / 771:  98%|█████████▊| 772/785 [23:57<00:24,  1.86s/it]--------------------------------------------- Result 762 ---------------------------------------------
[[0 (-7582%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[getNextPageResults]](){ if (totalPagesConsumed >= totalPages) { } else { getSinglePageResults(totalPagesConsumed + 1); } }
[[[[Nl]]]]: Fetch REST Data from the next page < > when user is scrolling continuously < >

[[[[Adv]]]]: public static void [[burnham]](){ if (totalPagesConsumed >= totalPages) { } else { getSinglePageResults(totalPagesConsumed + 1); } }
[[[[Nl]]]]: Fetch REST Data from the next page < > when user is scrolling continuously < >


--------------------------------------------- Result 763 ---------------------------------------------
[[0 (-8003%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[unregisterService]](ComponentName [[name]], int [[userid]]) { synchronized (mMutex) { unregisterServiceLocked([[name]], [[userid]]); } }
[[[[Nl]]]]: Remove a service for the given user by ComponentName

[[[[Adv]]]]: private void [[favoritism]](ComponentName [[numerals]], int [[otherwords]]) { synchronized (mMutex) { unregisterServiceLocked([[numerals]], [[otherwords]]); } }
[[[[Nl]]]]: Remove a service for the given user by ComponentName


--------------------------------------------- Result 764 ---------------------------------------------
[[0 (-6132%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static String [[getDeviceRelease]]() { return Build.MODEL; }
[[[[Nl]]]]: ment

[[[[Adv]]]]: static String [[roofing]]() { return Build.MODEL; }
[[[[Nl]]]]: ment


--------------------------------------------- Result 765 ---------------------------------------------
[[0 (-8120%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private void [[limitZoom]]() { if (mState.getZoom() < MIN_ZOOM) { mState.setZoom(MIN_ZOOM); } else if (mState.getZoom() > MAX_ZOOM) { mState.setZoom(MAX_ZOOM); } }
[[[[Nl]]]]: Force zoom to stay within limits

[[[[Adv]]]]: private void [[drawbridge]]() { if (mState.getZoom() < MIN_ZOOM) { mState.setZoom(MIN_ZOOM); } else if (mState.getZoom() > MAX_ZOOM) { mState.setZoom(MAX_ZOOM); } }
[[[[Nl]]]]: Force zoom to stay within limits


--------------------------------------------- Result 766 ---------------------------------------------
[[0 (-7415%)]] --> [[[FAILED]]]

[[[[Adv]]]]: private int[] [[coordArrayListToArray]](ArrayList<Coordinate> cvec) { int [[count]] = cvec.size(); int[] [[rawArray]] = new int[[[count]] * 2]; for (int [[index]] = 0; [[index]] < [[count]]; [[index]]++) { Coordinate [[c]] = cvec.get([[index]]); [[rawArray]][2 * [[index]]] = [[c]].x; [[rawArray]][2 * [[index]] + 1] = [[c]].y; } return [[rawArray]]; }
[[[[Nl]]]]: Given a ArrayList of coordinates , we need to flatten them into an array of ints before we can stuff them into a map for flattening and storage

[[[[Adv]]]]: private int[] [[bolder]](ArrayList<Coordinate> cvec) { int [[countdown]] = cvec.size(); int[] [[yevgeny]] = new int[[[countdown]] * 2]; for (int [[yearbooks]] = 0; [[yearbooks]] < [[countdown]]; [[yearbooks]]++) { Coordinate [[chapter]] = cvec.get([[yearbooks]]); [[yevgeny]][2 * [[yearbooks]]] = [[chapter]].x; [[yevgeny]][2 * [[yearbooks]] + 1] = [[chapter]].y; } return [[yevgeny]]; }
[[[[Nl]]]]: Given a ArrayList of coordinates , we need to flatten them into an array of ints before we can stuff them into a map for flattening and storage


--------------------------------------------- Result 767 ---------------------------------------------
[[0 (-7161%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onClose]]() { }
[[[[Nl]]]]: Initialize the close ( ) state

[[[[Adv]]]]: public void [[tankers]]() { }
[[[[Nl]]]]: Initialize the close ( ) state


--------------------------------------------- Result 768 ---------------------------------------------
[[0 (-7534%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[overlayVerticalScrollbar]]() { checkThread(); return mProvider.overlayVerticalScrollbar(); }
[[[[Nl]]]]: Gets whether vertical scrollbar has overlay style

[[[[Adv]]]]: public boolean [[scruples]]() { checkThread(); return mProvider.overlayVerticalScrollbar(); }
[[[[Nl]]]]: Gets whether vertical scrollbar has overlay style


--------------------------------------------- Result 769 ---------------------------------------------
[[0 (-7555%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[indexOfFirstWritableRawContact]](Context [[context]]) { int [[entityIndex]] = 0; for (RawContactDelta [[delta]] : this) { if ([[delta]].getRawContactAccountType([[context]]).areContactsWritable()) return [[entityIndex]]; [[entityIndex]]++; } return -1; }
[[[[Nl]]]]: Return the index of the first RawContactDelta corresponding to a writable raw-contact , or -1

[[[[Adv]]]]: public int [[renan]](Context [[environments]]) { int [[judgments]] = 0; for (RawContactDelta [[vampire]] : this) { if ([[vampire]].getRawContactAccountType([[environments]]).areContactsWritable()) return [[judgments]]; [[judgments]]++; } return -1; }
[[[[Nl]]]]: Return the index of the first RawContactDelta corresponding to a writable raw-contact , or -1


--------------------------------------------- Result 770 ---------------------------------------------
[[0 (-5935%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getConversationListSwipeActionInteger]](final boolean [[allowArchive]]) { final boolean [[swipeEnabled]] = getIsConversationListSwipeEnabled(); final boolean [[archive]] = !RemovalActions.DELETE.equals(getRemovalAction([[allowArchive]])); if ([[swipeEnabled]]) { return [[archive]] ? UIProvider.Swipe.ARCHIVE : UIProvider.Swipe.DELETE; } return UIProvider.Swipe.DISABLED; }
[[[[Nl]]]]: Gets the action to take ( one of the values from { @ link UIProvider

[[[[Adv]]]]: public int [[unfeeling]](final boolean [[disarming]]) { final boolean [[tethers]] = getIsConversationListSwipeEnabled(); final boolean [[unzipped]] = !RemovalActions.DELETE.equals(getRemovalAction([[disarming]])); if ([[tethers]]) { return [[unzipped]] ? UIProvider.Swipe.ARCHIVE : UIProvider.Swipe.DELETE; } return UIProvider.Swipe.DISABLED; }
[[[[Nl]]]]: Gets the action to take ( one of the values from { @ link UIProvider


--------------------------------------------- Result 771 ---------------------------------------------
[[0 (-6562%)]] --> [[[FAILED]]]

[[[[Adv]]]]: static void [[register]](Object [[lhs]], Object [[rhs]]) { synchronized (EqualsBuilder.class) { if (getRegistry() == null) { REGISTRY.set(new HashSet<Pair<IDKey, IDKey>>()); } } Set<Pair<IDKey, IDKey>> [[registry]] = getRegistry(); Pair<IDKey, IDKey> [[pair]] = getRegisterPair([[lhs]], [[rhs]]); [[registry]].add([[pair]]); }
[[[[Nl]]]]: < p > Registers the given object pair

[[[[Adv]]]]: static void [[inscriptions]](Object [[goaded]], Object [[redouble]]) { synchronized (EqualsBuilder.class) { if (getRegistry() == null) { REGISTRY.set(new HashSet<Pair<IDKey, IDKey>>()); } } Set<Pair<IDKey, IDKey>> [[grafts]] = getRegistry(); Pair<IDKey, IDKey> [[colleagues]] = getRegisterPair([[goaded]], [[redouble]]); [[grafts]].add([[colleagues]]); }
[[[[Nl]]]]: < p > Registers the given object pair


--------------------------------------------- Result 772 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 772 / 0 / 772:  98%|█████████▊| 772/785 [23:57<00:24,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 772 / 0 / 772:  98%|█████████▊| 773/785 [23:59<00:22,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 773 / 0 / 773:  98%|█████████▊| 773/785 [23:59<00:22,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 773 / 0 / 773:  99%|█████████▊| 774/785 [24:00<00:20,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 774 / 0 / 774:  99%|█████████▊| 774/785 [24:00<00:20,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 774 / 0 / 774:  99%|█████████▊| 775/785 [24:00<00:18,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 775 / 0 / 775:  99%|█████████▊| 775/785 [24:00<00:18,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 775 / 0 / 775:  99%|█████████▉| 776/785 [24:01<00:16,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 776 / 0 / 776:  99%|█████████▉| 776/785 [24:01<00:16,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 776 / 0 / 776:  99%|█████████▉| 777/785 [24:04<00:14,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 777 / 0 / 777:  99%|█████████▉| 777/785 [24:04<00:14,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 777 / 0 / 777:  99%|█████████▉| 778/785 [24:06<00:13,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 778 / 0 / 778:  99%|█████████▉| 778/785 [24:06<00:13,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 778 / 0 / 778:  99%|█████████▉| 779/785 [24:08<00:11,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 779 / 0 / 779:  99%|█████████▉| 779/785 [24:08<00:11,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 779 / 0 / 779:  99%|█████████▉| 780/785 [24:10<00:09,  1.86s/it][[0 (-8015%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public JsonGenerator [[createJsonGenerator]](OutputStream [[out]], JsonEncoding enc) throws IOException { IOContext [[ctxt]] = _createContext([[out]], "[[False]]" != "[[False]]"); [[ctxt]].setEncoding(enc); if (enc == JsonEncoding.UTF8) { if (_outputDecorator != null) { [[out]] = _outputDecorator.decorate([[ctxt]], [[out]]); } return _createUTF8JsonGenerator([[out]], [[ctxt]]); } Writer [[w]] = _createWriter([[out]], enc, [[ctxt]]); if (_outputDecorator != null) { [[w]] = _outputDecorator.decorate([[ctxt]], [[w]]); } return _createJsonGenerator([[w]], [[ctxt]]); }
[[[[Nl]]]]: Method for constructing JSON generator for writing JSON content using specified output stream

[[[[Adv]]]]: public JsonGenerator [[synonym]](OutputStream [[distance]], JsonEncoding enc) throws IOException { IOContext [[permission]] = _createContext([[distance]], "[["Hypocrite" != "Hypocrite"]]" != "[["Hypocrite" != "Hypocrite"]]"); [[permission]].setEncoding(enc); if (enc == JsonEncoding.UTF8) { if (_outputDecorator != null) { [[distance]] = _outputDecorator.decorate([[permission]], [[distance]]); } return _createUTF8JsonGenerator([[distance]], [[permission]]); } Writer [[widescreen]] = _createWriter([[distance]], enc, [[permission]]); if (_outputDecorator != null) { [[widescreen]] = _outputDecorator.decorate([[permission]], [[widescreen]]); } return _createJsonGenerator([[widescreen]], [[permission]]); }
[[[[Nl]]]]: Method for constructing JSON generator for writing JSON content using specified output stream


--------------------------------------------- Result 773 ---------------------------------------------
[[0 (-7324%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[dump]](FileDescriptor [[fd]], PrintWriter [[pw]], String[] [[args]]) { [[pw]].println("--Dump of ScanOnlyModeManager--"); [[pw]].println("current StateMachine mode: " + getCurrentStateName()); [[pw]].println("mClientInterfaceName: " + mClientInterfaceName); [[pw]].println("mIfaceIsUp: " + mIfaceIsUp); }
[[[[Nl]]]]: Dump info about this ScanOnlyMode manager

[[[[Adv]]]]: public void [[discharging]](FileDescriptor [[parts]], PrintWriter [[deliver]], String[] [[cartridge]]) { [[deliver]].println("--Dump of ScanOnlyModeManager--"); [[deliver]].println("current StateMachine mode: " + getCurrentStateName()); [[deliver]].println("mClientInterfaceName: " + mClientInterfaceName); [[deliver]].println("mIfaceIsUp: " + mIfaceIsUp); }
[[[[Nl]]]]: Dump info about this ScanOnlyMode manager


--------------------------------------------- Result 774 ---------------------------------------------
[[0 (-7972%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getFrameHeight]] () { return mBitmapSprite.getHeight (); }
[[[[Nl]]]]: Gets the frame height of the sprite @ return the frame height

[[[[Adv]]]]: public int [[kappa]] () { return mBitmapSprite.getHeight (); }
[[[[Nl]]]]: Gets the frame height of the sprite @ return the frame height


--------------------------------------------- Result 775 ---------------------------------------------
[[0 (-6522%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[isActive]]() { return jniIsActive( addr ); }
[[[[Nl]]]]: Get the active state of the body

[[[[Adv]]]]: public boolean [[dials]]() { return jniIsActive( addr ); }
[[[[Nl]]]]: Get the active state of the body


--------------------------------------------- Result 776 ---------------------------------------------
[[0 (-6779%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[resetShotCordinates]]() { x = tower.x + tower.getWidth() / 2 - this.getWidth() / 2; y = tower.y + tower.getHeight() / 2 - this.getHeight() / 2; }
[[[[Nl]]]]: Method that places a shot back to the start position

[[[[Adv]]]]: public void [[splice]]() { x = tower.x + tower.getWidth() / 2 - this.getWidth() / 2; y = tower.y + tower.getHeight() / 2 - this.getHeight() / 2; }
[[[[Nl]]]]: Method that places a shot back to the start position


--------------------------------------------- Result 777 ---------------------------------------------
[[0 (-6123%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[getSuggestedWords]](final int [[inputStyle]], final int [[sequenceNumber]], final OnGetSuggestedWordsCallback [[callback]]) { final Keyboard [[keyboard]] = mKeyboardSwitcher.getKeyboard(); if ([[keyboard]] == null) { [[callback]].onGetSuggestedWords(SuggestedWords.getEmptyInstance()); return; } mInputLogic.getSuggestedWords(mSettings.getCurrent(), [[keyboard]], mKeyboardSwitcher.getKeyboardShiftMode(), [[inputStyle]], [[sequenceNumber]], [[callback]]); }
[[[[Nl]]]]: TODO [ IL ] : Move this out of LatinIME

[[[[Adv]]]]: public void [[worthiness]](final int [[swipe]], final int [[intensively]], final OnGetSuggestedWordsCallback [[recheck]]) { final Keyboard [[swiping]] = mKeyboardSwitcher.getKeyboard(); if ([[swiping]] == null) { [[recheck]].onGetSuggestedWords(SuggestedWords.getEmptyInstance()); return; } mInputLogic.getSuggestedWords(mSettings.getCurrent(), [[swiping]], mKeyboardSwitcher.getKeyboardShiftMode(), [[swipe]], [[intensively]], [[recheck]]); }
[[[[Nl]]]]: TODO [ IL ] : Move this out of LatinIME


--------------------------------------------- Result 778 ---------------------------------------------
[[0 (-7709%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public static <[[K]], V> SetMultimap<[[K]], V> [[unmodifiableSetMultimap]]( SetMultimap<[[K]], V> [[delegate]]) { if ([[delegate]] instanceof UnmodifiableSetMultimap || [[delegate]] instanceof ImmutableSetMultimap) { return [[delegate]]; } return new UnmodifiableSetMultimap<[[K]], V>([[delegate]]); }
[[[[Nl]]]]: Returns an unmodifiable view of the specified { @ code SetMultimap }

[[[[Adv]]]]: public static <[[toward]], V> SetMultimap<[[toward]], V> [[baling]]( SetMultimap<[[toward]], V> [[dispatches]]) { if ([[dispatches]] instanceof UnmodifiableSetMultimap || [[dispatches]] instanceof ImmutableSetMultimap) { return [[dispatches]]; } return new UnmodifiableSetMultimap<[[toward]], V>([[dispatches]]); }
[[[[Nl]]]]: Returns an unmodifiable view of the specified { @ code SetMultimap }


--------------------------------------------- Result 779 ---------------------------------------------
[[0 (-7076%)]] --> [[[FAILED]]]

[[[[Adv]]]]: protected Location [[getLocation]]() { locationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE); if (locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) { mLastLocation = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient); if (mLastLocation == null) { locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE); Criteria [[criteria]] = new Criteria(); String [[provider]] = locationManager.getBestProvider([[criteria]], "[[False]]" != "[[False]]"); mLastLocation = locationManager.getLastKnownLocation([[provider]]); } else { Log.e("LOCATION", "lt:" + mLastLocation.getLatitude()); } } return mLastLocation; }
[[[[Nl]]]]: Recupera a localização do device @ return

[[[[Adv]]]]: protected Location [[clatters]]() { locationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE); if (locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) { mLastLocation = LocationServices.FusedLocationApi.getLastLocation(mGoogleApiClient); if (mLastLocation == null) { locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE); Criteria [[norms]] = new Criteria(); String [[traders]] = locationManager.getBestProvider([[norms]], "[["Forges" != "Forges"]]" != "[["Forges" != "Forges"]]"); mLastLocation = locationManager.getLastKnownLocation([[traders]]); } else { Log.e("LOCATION", "lt:" + mLastLocation.getLatitude()); } } return mLastLocation; }
[[[[Nl]]]]: Recupera a localização do device @ return


--------------------------------------------- Result 780 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 780 / 0 / 780:  99%|█████████▉| 780/785 [24:10<00:09,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 780 / 0 / 780:  99%|█████████▉| 781/785 [24:11<00:07,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 781 / 0 / 781:  99%|█████████▉| 781/785 [24:11<00:07,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 781 / 0 / 781: 100%|█████████▉| 782/785 [24:14<00:05,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 782 / 0 / 782: 100%|█████████▉| 782/785 [24:14<00:05,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 782 / 0 / 782: 100%|█████████▉| 783/785 [24:14<00:03,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 783 / 0 / 783: 100%|█████████▉| 783/785 [24:14<00:03,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 783 / 0 / 783: 100%|█████████▉| 784/785 [24:16<00:01,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 784 / 0 / 784: 100%|█████████▉| 784/785 [24:16<00:01,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 784 / 0 / 784: 100%|██████████| 785/785 [24:17<00:00,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 785 / 0 / 785: 100%|██████████| 785/785 [24:17<00:00,  1.86s/it][Succeeded / Failed / Skipped / Total] 0 / 785 / 0 / 785: 100%|██████████| 785/785 [24:17<00:00,  1.86s/it][[0 (-7950%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[deleteAll]]() { android.database.Cursor [[c]] = getAllRows(); long [[rowId]] = [[c]].getColumnIndexOrThrow(KEY_ROWID); if ([[c]].moveToFirst()) { do { deleteRow([[c]].getLong((int) [[rowId]])); } while ([[c]].moveToNext()); } [[c]].close(); }
[[[[Nl]]]]: Delete all entries in the table

[[[[Adv]]]]: public void [[embellish]]() { android.database.Cursor [[sects]] = getAllRows(); long [[inhibiting]] = [[sects]].getColumnIndexOrThrow(KEY_ROWID); if ([[sects]].moveToFirst()) { do { deleteRow([[sects]].getLong((int) [[inhibiting]])); } while ([[sects]].moveToNext()); } [[sects]].close(); }
[[[[Nl]]]]: Delete all entries in the table


--------------------------------------------- Result 781 ---------------------------------------------
[[0 (-8359%)]] --> [[[FAILED]]]

[[[[Adv]]]]: void [[showMessage]](String [[message]]) { Snackbar [[snackbar]] = Snackbar.make(coordinatorLayout, [[message]], Snackbar.LENGTH_LONG); [[snackbar]].show(); }
[[[[Nl]]]]: Show simple message using SnackBar

[[[[Adv]]]]: void [[unauthorised]](String [[couriers]]) { Snackbar [[objections]] = Snackbar.make(coordinatorLayout, [[couriers]], Snackbar.LENGTH_LONG); [[objections]].show(); }
[[[[Nl]]]]: Show simple message using SnackBar


--------------------------------------------- Result 782 ---------------------------------------------
[[0 (-7161%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public void [[checkLinkStatus]](GLES20Wrapper [[gles]], int [[program]]) throws GLException { int[] [[linkStatus]] = new int[1]; [[gles]].glGetProgramiv([[program]], GLES20.GL_LINK_STATUS, [[linkStatus]], 0); if ([[linkStatus]][0] != GLES20.GL_TRUE) { throw new GLException(LINK_PROGRAM_ERROR + Integer.toString([[program]])); } }
[[[[Nl]]]]: Checks the link status of the specified program - if link status returns false then an exception is thrown

[[[[Adv]]]]: public void [[carve]](GLES20Wrapper [[screaming]], int [[emission]]) throws GLException { int[] [[mercury]] = new int[1]; [[screaming]].glGetProgramiv([[emission]], GLES20.GL_LINK_STATUS, [[mercury]], 0); if ([[mercury]][0] != GLES20.GL_TRUE) { throw new GLException(LINK_PROGRAM_ERROR + Integer.toString([[emission]])); } }
[[[[Nl]]]]: Checks the link status of the specified program - if link status returns false then an exception is thrown


--------------------------------------------- Result 783 ---------------------------------------------
[[0 (-6156%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public Message [[getMessage]]() { mEncoderState.byteBuffer.position(0); mEncoderState.byteBuffer.limit(mEncoderState.dataEnd); return new Message(mEncoderState.byteBuffer, mEncoderState.handles); }
[[[[Nl]]]]: Returns the result message

[[[[Adv]]]]: public Message [[strop]]() { mEncoderState.byteBuffer.position(0); mEncoderState.byteBuffer.limit(mEncoderState.dataEnd); return new Message(mEncoderState.byteBuffer, mEncoderState.handles); }
[[[[Nl]]]]: Returns the result message


--------------------------------------------- Result 784 ---------------------------------------------
[[0 (-7123%)]] --> [[[FAILED]]]

[[[[Adv]]]]: boolean [[resurrectSelectionIfNeeded]]() { if (mSelectedPosition < 0 && resurrectSelection()) { updateSelectorState(); return "[[True]]" == "[[True]]"; } return "[[False]]" != "[[False]]"; }
[[[[Nl]]]]: If there is a selection returns false

[[[[Adv]]]]: boolean [[refreshed]]() { if (mSelectedPosition < 0 && resurrectSelection()) { updateSelectorState(); return "[["Realities" == "Realities"]]" == "[["Realities" == "Realities"]]"; } return "[["Imaginary" != "Imaginary"]]" != "[["Imaginary" != "Imaginary"]]"; }
[[[[Nl]]]]: If there is a selection returns false


--------------------------------------------- Result 785 ---------------------------------------------
[[0 (-7059%)]] --> [[[FAILED]]]

[[[[Adv]]]]: public String [[composer]]() { return ""; }
[[[[Nl]]]]: The composer of the recording

[[[[Adv]]]]: public String [[symphonies]]() { return ""; }
[[[[Nl]]]]: The composer of the recording



+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 0      |
| Number of failed attacks:     | 785    |
| Number of skipped attacks:    | 0      |
| Original accuracy:            | 100.0% |
| Accuracy under attack:        | 100.0% |
| Attack success rate:          | 0.0%   |
| Average perturbed word %:     | 95.45% |
| Average num. words per input: | 3.52   |
| Avg num queries:              | 165.92 |
| Original MRR:                 | 0.8424 |
| Perturbed MRR:                | 0.1289 |
+-------------------------------+--------+


Attempting to acquire lock 139835748992240 on /data/zzr/.cache/textattack/transformations/hownet/word_candidates_sense.pkl.lock
Lock 139835748992240 acquired on /data/zzr/.cache/textattack/transformations/hownet/word_candidates_sense.pkl.lock
Attempting to release lock 139835748992240 on /data/zzr/.cache/textattack/transformations/hownet/word_candidates_sense.pkl.lock
Lock 139835748992240 released on /data/zzr/.cache/textattack/transformations/hownet/word_candidates_sense.pkl.lock
textattack: Running 4 worker(s) on 4 GPU(s).
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 0 / 1 / 0 / 1:   0%|          | 1/1000 [00:00<00:00, 1333.22it/s][Succeeded / Failed / Skipped / Total] 0 / 2 / 0 / 2:   0%|          | 2/1000 [00:00<00:00, 1630.12it/s][Succeeded / Failed / Skipped / Total] 0 / 3 / 0 / 3:   0%|          | 3/1000 [00:00<00:00, 1796.79it/s][Succeeded / Failed / Skipped / Total] 0 / 4 / 0 / 4:   0%|          | 4/1000 [00:00<00:00, 1940.46it/s][Succeeded / Failed / Skipped / Total] 0 / 5 / 0 / 5:   0%|          | 5/1000 [00:00<00:00, 2004.73it/s]--------------------------------------------- Result 1 ---------------------------------------------
Wrap the given Observable into an Observable . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > wrap ( ObservableSource < T > [[source]] ) { ObjectHelper . requireNonNull ( [[source]] , "source is null" ) ; if ( [[source]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[source]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[source]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > wrap ( ObservableSource < T > [[genesis]] ) { ObjectHelper . requireNonNull ( [[genesis]] , "source is null" ) ; if ( [[genesis]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[genesis]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[genesis]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 2 ---------------------------------------------
Returns an observable sorted by the specified comparator . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[group]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 3 ---------------------------------------------
Adapts a ConnectableObserver to a Connectable Observable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 4 ---------------------------------------------
Create a new instance of this processor . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 5 ---------------------------------------------
Create a new instance of this processor . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 6 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 6 / 0 / 6:   1%|          | 6/1000 [00:00<00:00, 1909.39it/s][Succeeded / Failed / Skipped / Total] 0 / 7 / 0 / 7:   1%|          | 7/1000 [00:00<00:00, 1983.26it/s][Succeeded / Failed / Skipped / Total] 0 / 8 / 0 / 8:   1%|          | 8/1000 [00:00<00:00, 2050.88it/s][Succeeded / Failed / Skipped / Total] 0 / 9 / 0 / 9:   1%|          | 9/1000 [00:00<00:00, 2103.93it/s][Succeeded / Failed / Skipped / Total] 0 / 10 / 0 / 10:   1%|          | 10/1000 [00:00<00:00, 2132.23it/s]Try to perform a scalar function . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( Publisher < T > [[source]] , Subscriber < ? super R > [[subscriber]] , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( [[source]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[source]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( [[subscriber]] ) ; return "True" == "True" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( [[subscriber]] ) ; return "True" == "True" ; } [[subscriber]] . onSubscribe ( new ScalarSubscription < R > ( [[subscriber]] , u ) ) ; } else { r . subscribe ( [[subscriber]] ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( Publisher < T > [[groundwork]] , Subscriber < ? super R > [[user]] , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( [[groundwork]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[groundwork]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[user]] ) ; return "True" == "True" ; } if ( t == null ) { EmptySubscription . complete ( [[user]] ) ; return "True" == "True" ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[user]] ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[user]] ) ; return "True" == "True" ; } if ( u == null ) { EmptySubscription . complete ( [[user]] ) ; return "True" == "True" ; } [[user]] . onSubscribe ( new ScalarSubscription < R > ( [[user]] , u ) ) ; } else { r . subscribe ( [[user]] ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 7 ---------------------------------------------
Reset all variables . --> [[[FAILED]]]

[[[[Adv]]]]: public static void reset ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void reset ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "False" != "False" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 8 ---------------------------------------------
Construct a Maybe from a Completable --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromCompletable ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromCompletable ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 9 ---------------------------------------------
Construct a Maybe from a single source . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromSingle ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromSingle ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 10 ---------------------------------------------
Retries the given number of times the given number of times . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[times]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[times]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[metres]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[metres]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 11 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 11 / 0 / 11:   1%|          | 11/1000 [00:00<00:00, 2177.83it/s][Succeeded / Failed / Skipped / Total] 0 / 12 / 0 / 12:   1%|          | 12/1000 [00:00<00:00, 2207.72it/s][Succeeded / Failed / Skipped / Total] 0 / 12 / 0 / 12:   1%|▏         | 13/1000 [00:01<01:41,  9.68it/s]  [Succeeded / Failed / Skipped / Total] 0 / 13 / 0 / 13:   1%|▏         | 13/1000 [00:01<01:41,  9.68it/s][Succeeded / Failed / Skipped / Total] 1 / 13 / 0 / 14:   1%|▏         | 14/1000 [00:05<06:16,  2.62it/s][Succeeded / Failed / Skipped / Total] 1 / 14 / 0 / 15:   2%|▏         | 15/1000 [00:05<05:56,  2.76it/s][Succeeded / Failed / Skipped / Total] 1 / 15 / 0 / 16:   2%|▏         | 16/1000 [00:05<05:48,  2.82it/s][Succeeded / Failed / Skipped / Total] 1 / 16 / 0 / 17:   2%|▏         | 17/1000 [00:05<05:34,  2.94it/s][Succeeded / Failed / Skipped / Total] 1 / 17 / 0 / 18:   2%|▏         | 18/1000 [00:06<05:29,  2.98it/s][Succeeded / Failed / Skipped / Total] 1 / 18 / 0 / 19:   2%|▏         | 19/1000 [00:06<05:16,  3.10it/s][Succeeded / Failed / Skipped / Total] 1 / 19 / 0 / 20:   2%|▏         | 20/1000 [00:06<05:15,  3.11it/s][Succeeded / Failed / Skipped / Total] 1 / 20 / 0 / 21:   2%|▏         | 21/1000 [00:07<05:48,  2.81it/s]Require that the given object is not null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > T requireNonNull ( T object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < T > T requireNonNull ( T object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 12 ---------------------------------------------
Returns an identity function . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > [[identity]] ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > [[caste]] ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 13 ---------------------------------------------
Performs a scalar operation on a scalar value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Flowable < U > scalarXMap ( final T [[value]] , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[value]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > scalarXMap ( final T [[attention]] , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[attention]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 14 ---------------------------------------------
Wraps a value . --> Convenience function --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > justCallable ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > justCallable ( T [[toll]] ) { return new JustValue < Object , T > ( [[toll]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 15 ---------------------------------------------
Cast function . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Function < T , U > castFunction ( Class < U > [[target]] ) { return new CastToClass < T , U > ( [[target]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < T , U > Function < T , U > castFunction ( Class < U > [[clout]] ) { return new CastToClass < T , U > ( [[clout]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 16 ---------------------------------------------
Create a new unicast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( ) { return new UnicastSubject < T > ( bufferSize ( ) , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 17 ---------------------------------------------
Create a new instance with the specified capacity . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint ) { return new UnicastSubject < T > ( capacityHint , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint ) { return new UnicastSubject < T > ( capacityHint , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 18 ---------------------------------------------
Create a dummy subject with the specified capacity . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint , Runnable onTerminate ) { return new UnicastSubject < T > ( capacityHint , onTerminate , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint , Runnable onTerminate ) { return new UnicastSubject < T > ( capacityHint , onTerminate , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 19 ---------------------------------------------
Create a new unicast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean delayError ) { return new UnicastSubject < T > ( bufferSize ( ) , delayError ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean delayError ) { return new UnicastSubject < T > ( bufferSize ( ) , delayError ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 20 ---------------------------------------------
Get an error from the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable blockingGetError ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable blockingGetError ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 21 ---------------------------------------------
Returns a function that wraps the given value --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Function < T , U > justFunction ( U [[value]] ) { return new JustValue < T , U > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < T , U > Function < T , U > justFunction ( U [[treasure]] ) { return new JustValue < T , U > ( [[treasure]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 22 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 1 / 21 / 0 / 22:   2%|▏         | 22/1000 [00:10<08:02,  2.03it/s][Succeeded / Failed / Skipped / Total] 1 / 22 / 0 / 23:   2%|▏         | 23/1000 [00:12<08:56,  1.82it/s][Succeeded / Failed / Skipped / Total] 1 / 23 / 0 / 24:   2%|▏         | 24/1000 [00:12<08:45,  1.86it/s][Succeeded / Failed / Skipped / Total] 1 / 24 / 0 / 25:   2%|▎         | 25/1000 [00:13<08:42,  1.86it/s][Succeeded / Failed / Skipped / Total] 1 / 24 / 0 / 25:   3%|▎         | 26/1000 [00:13<08:34,  1.89it/s][Succeeded / Failed / Skipped / Total] 1 / 25 / 0 / 26:   3%|▎         | 26/1000 [00:13<08:34,  1.89it/s][Succeeded / Failed / Skipped / Total] 1 / 25 / 0 / 26:   3%|▎         | 27/1000 [00:14<08:25,  1.92it/s][Succeeded / Failed / Skipped / Total] 1 / 26 / 0 / 27:   3%|▎         | 27/1000 [00:14<08:25,  1.92it/s][Succeeded / Failed / Skipped / Total] 1 / 27 / 0 / 28:   3%|▎         | 28/1000 [00:14<08:10,  1.98it/s][Succeeded / Failed / Skipped / Total] 1 / 27 / 0 / 28:   3%|▎         | 29/1000 [00:15<08:29,  1.91it/s]Fast implementation for fast - path elements . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void fastPathOrderedEmit ( U [[value]] , boolean delayError , Disposable disposable ) { final Observer < ? super V > [[observer]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[observer]] , [[value]] ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( [[value]] ) ; } } else { q . offer ( [[value]] ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[observer]] , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void fastPathOrderedEmit ( U [[comment]] , boolean delayError , Disposable disposable ) { final Observer < ? super V > [[appraiser]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[appraiser]] , [[comment]] ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( [[comment]] ) ; } } else { q . offer ( [[comment]] ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[appraiser]] , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 23 ---------------------------------------------
Request a synchronous request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[request]] ( Subscription s , int prefetch ) { s . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void [[term]] ( Subscription s , int prefetch ) { s . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 24 ---------------------------------------------
Removes the max loop from queue . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int [[missed]] = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } [[missed]] = qd . leave ( - [[missed]] ) ; if ( [[missed]] == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int [[ignorance]] = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } [[ignorance]] = qd . leave ( - [[ignorance]] ) ; if ( [[ignorance]] == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 25 ---------------------------------------------
Completes the next value . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 26 ---------------------------------------------
Returns the value associated with this notification . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T getValue ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T getValue ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 27 ---------------------------------------------
Gets the error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable getError ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable getError ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 28 ---------------------------------------------
Get an error from the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable blockingGetError ( long timeout , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[unit]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , [[unit]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable blockingGetError ( long timeout , TimeUnit [[installation]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[installation]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , [[installation]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
[Succeeded / Failed / Skipped / Total] 2 / 27 / 0 / 29:   3%|▎         | 29/1000 [00:15<08:29,  1.91it/s][Succeeded / Failed / Skipped / Total] 2 / 28 / 0 / 30:   3%|▎         | 30/1000 [00:15<08:29,  1.90it/s][Succeeded / Failed / Skipped / Total] 2 / 28 / 0 / 30:   3%|▎         | 31/1000 [00:16<08:31,  1.90it/s][Succeeded / Failed / Skipped / Total] 3 / 28 / 0 / 31:   3%|▎         | 31/1000 [00:16<08:31,  1.90it/s][Succeeded / Failed / Skipped / Total] 3 / 29 / 0 / 32:   3%|▎         | 32/1000 [00:16<08:24,  1.92it/s][Succeeded / Failed / Skipped / Total] 3 / 29 / 0 / 32:   3%|▎         | 33/1000 [00:17<08:18,  1.94it/s][Succeeded / Failed / Skipped / Total] 3 / 30 / 0 / 33:   3%|▎         | 33/1000 [00:17<08:18,  1.94it/s][Succeeded / Failed / Skipped / Total] 3 / 31 / 0 / 34:   3%|▎         | 34/1000 [00:17<08:10,  1.97it/s][Succeeded / Failed / Skipped / Total] 3 / 31 / 0 / 34:   4%|▎         | 35/1000 [00:19<09:03,  1.78it/s]--------------------------------------------- Result 29 ---------------------------------------------
Determines whether two streams are disjoint . --> Checks whether two streams are disambigable --> Socre: 1.0

[[[[Adv]]]]: public static boolean validate ( Disposable upstream , Disposable next , Class < ? > [[observer]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[observer]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Disposable upstream , Disposable next , Class < ? > [[appraiser]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[appraiser]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 30 ---------------------------------------------
Atomically sets the AtomicReference to false . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > upstream , Disposable next , Class < ? > [[observer]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( upstream . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[observer]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > upstream , Disposable next , Class < ? > [[appraiser]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( upstream . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[appraiser]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 31 ---------------------------------------------
Validate two Subscription objects --> Validate two SubSubscription --> Socre: 1.0

[[[[Adv]]]]: public static boolean validate ( Subscription upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Subscription upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 32 ---------------------------------------------
Add a capacity to a long --> [[[FAILED]]]

[[[[Adv]]]]: public static long addCap ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long addCap ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 33 ---------------------------------------------
Returns the capacity of a long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long multiplyCap ( long a , long b ) { long u = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( u / a != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long multiplyCap ( long a , long b ) { long u = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( u / a != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 34 ---------------------------------------------
Atomically updates the AtomicReference with the given AtomicReference . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > [[subscriber]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( [[subscriber]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > [[user]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( [[user]] ) ; } return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 35 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 3 / 32 / 0 / 35:   4%|▎         | 35/1000 [00:19<09:03,  1.78it/s][Succeeded / Failed / Skipped / Total] 3 / 33 / 0 / 36:   4%|▎         | 36/1000 [00:20<08:55,  1.80it/s][Succeeded / Failed / Skipped / Total] 3 / 33 / 0 / 36:   4%|▎         | 37/1000 [00:20<08:53,  1.80it/s][Succeeded / Failed / Skipped / Total] 4 / 33 / 0 / 37:   4%|▎         | 37/1000 [00:20<08:53,  1.80it/s][Succeeded / Failed / Skipped / Total] 4 / 34 / 0 / 38:   4%|▍         | 38/1000 [00:21<08:56,  1.79it/s][Succeeded / Failed / Skipped / Total] 4 / 34 / 0 / 38:   4%|▍         | 39/1000 [00:21<08:54,  1.80it/s][Succeeded / Failed / Skipped / Total] 4 / 35 / 0 / 39:   4%|▍         | 39/1000 [00:21<08:54,  1.80it/s][Succeeded / Failed / Skipped / Total] 4 / 36 / 0 / 40:   4%|▍         | 40/1000 [00:22<08:48,  1.82it/s][Succeeded / Failed / Skipped / Total] 4 / 36 / 0 / 40:   4%|▍         | 41/1000 [00:22<08:38,  1.85it/s][Succeeded / Failed / Skipped / Total] 4 / 37 / 0 / 41:   4%|▍         | 41/1000 [00:22<08:38,  1.85it/s][Succeeded / Failed / Skipped / Total] 4 / 38 / 0 / 42:   4%|▍         | 42/1000 [00:23<08:57,  1.78it/s][Succeeded / Failed / Skipped / Total] 4 / 38 / 0 / 42:   4%|▍         | 43/1000 [00:24<08:55,  1.79it/s]Adds n to the specified long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long add ( AtomicLong [[requested]] , long n ) { for ( ; ; ) { long r = [[requested]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( [[requested]] . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long add ( AtomicLong [[term]] , long n ) { for ( ; ; ) { long r = [[term]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( [[term]] . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 36 ---------------------------------------------
Add an object to the list --> [[[FAILED]]]

[[[[Adv]]]]: public void add ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void add ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 37 ---------------------------------------------
Called when a subscriber is complete . --> Called after an image has completed --> Socre: 1.0

[[[[Adv]]]]: public static < T > void postComplete ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong [[state]] , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[state]] . get ( ) , actual , queue , [[state]] , isCancelled ) ) { return ; } for ( ; ; ) { long r = [[state]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void postComplete ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong [[imagery]] , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[imagery]] . get ( ) , actual , queue , [[imagery]] , isCancelled ) ) { return ; } for ( ; ; ) { long r = [[imagery]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 38 ---------------------------------------------
Shuts down the background thread . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[interruption]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 39 ---------------------------------------------
Sets the next subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public final void setSubscription ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( s ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void setSubscription ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( s ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 40 ---------------------------------------------
Process the loop . --> [[[FAILED]]]

[[[[Adv]]]]: void emitLoop ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "False" != "False" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void emitLoop ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > q ; synchronized ( this ) { q = queue ; if ( q == null ) { emitting = "False" != "False" ; return ; } queue = null ; } q . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 41 ---------------------------------------------
Creates a new scheduled executor service . --> [[[FAILED]]]

[[[[Adv]]]]: public static ScheduledExecutorService create ( ThreadFactory [[factory]] ) { final ScheduledExecutorService exec = Executors . newScheduledThreadPool ( 1 , [[factory]] ) ; tryPutIntoPool ( PURGE_ENABLED , exec ) ; return exec ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService create ( ThreadFactory [[foundry]] ) { final ScheduledExecutorService exec = Executors . newScheduledThreadPool ( 1 , [[foundry]] ) ; tryPutIntoPool ( PURGE_ENABLED , exec ) ; return exec ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 42 ---------------------------------------------
Flattens the given exception into a flat list . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable t ) { List < Throwable > [[list]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { [[list]] . add ( e ) ; } } return [[list]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable t ) { List < Throwable > [[citation]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { [[citation]] . add ( e ) ; } } return [[citation]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 43 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 4 / 39 / 0 / 43:   4%|▍         | 43/1000 [00:24<08:55,  1.79it/s][Succeeded / Failed / Skipped / Total] 4 / 40 / 0 / 44:   4%|▍         | 44/1000 [00:26<09:37,  1.66it/s][Succeeded / Failed / Skipped / Total] 4 / 40 / 0 / 44:   4%|▍         | 45/1000 [00:27<09:39,  1.65it/s][Succeeded / Failed / Skipped / Total] 4 / 41 / 0 / 45:   4%|▍         | 45/1000 [00:27<09:39,  1.65it/s][Succeeded / Failed / Skipped / Total] 5 / 41 / 0 / 46:   5%|▍         | 46/1000 [00:32<11:20,  1.40it/s][Succeeded / Failed / Skipped / Total] 5 / 41 / 0 / 46:   5%|▍         | 47/1000 [00:32<11:06,  1.43it/s][Succeeded / Failed / Skipped / Total] 6 / 41 / 0 / 47:   5%|▍         | 47/1000 [00:32<11:06,  1.43it/s][Succeeded / Failed / Skipped / Total] 6 / 42 / 0 / 48:   5%|▍         | 48/1000 [00:34<11:31,  1.38it/s][Succeeded / Failed / Skipped / Total] 6 / 42 / 0 / 48:   5%|▍         | 49/1000 [00:38<12:25,  1.28it/s][Succeeded / Failed / Skipped / Total] 6 / 43 / 0 / 49:   5%|▍         | 49/1000 [00:38<12:25,  1.28it/s][Succeeded / Failed / Skipped / Total] 6 / 44 / 0 / 50:   5%|▌         | 50/1000 [00:42<13:30,  1.17it/s][Succeeded / Failed / Skipped / Total] 6 / 44 / 0 / 50:   5%|▌         | 51/1000 [00:42<13:15,  1.19it/s]If the given exception is an unchecked exception it will be thrown . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < E extends Throwable > Exception throwIfThrowable ( Throwable e ) throws E { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( E ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < E extends Throwable > Exception throwIfThrowable ( Throwable e ) throws E { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( E ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 44 ---------------------------------------------
Wraps a RuntimeException to a RuntimeException . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException wrapOrThrow ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException wrapOrThrow ( Throwable [[deviation]] ) { if ( [[deviation]] instanceof Error ) { throw ( Error ) [[deviation]] ; } if ( [[deviation]] instanceof RuntimeException ) { return ( RuntimeException ) [[deviation]] ; } return new RuntimeException ( [[deviation]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 45 ---------------------------------------------
Convert null pointer to NullPointerException --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException toNpe ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException toNpe ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 46 ---------------------------------------------
Removes all resources --> Dispose resources --> Socre: 1.0

[[[[Adv]]]]: public void clear ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[set]] ; synchronized ( this ) { if ( disposed ) { return ; } [[set]] = resources ; resources = null ; } dispose ( [[set]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void clear ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[erection]] ; synchronized ( this ) { if ( disposed ) { return ; } [[erection]] = resources ; resources = null ; } dispose ( [[erection]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 47 ---------------------------------------------
Wait for elements to be executed . --> Blocks waiting for errors --> Socre: 1.0

[[[[Adv]]]]: public boolean blockingAwait ( long [[timeout]] , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , [[unit]] ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( [[ex]] ) ; } } Throwable [[ex]] = error ; if ( [[ex]] != null ) { throw ExceptionHelper . wrapOrThrow ( [[ex]] ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean blockingAwait ( long [[overtime]] , TimeUnit [[corps]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[overtime]] , [[corps]] ) ) { dispose ( ) ; return "False" != "False" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( [[plus]] ) ; } } Throwable [[plus]] = error ; if ( [[plus]] != null ) { throw ExceptionHelper . wrapOrThrow ( [[plus]] ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 48 ---------------------------------------------
Accept a subscriber . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > [[subscriber]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[subscriber]] ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > [[user]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[user]] ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 49 ---------------------------------------------
Accepts a notification . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > [[observer]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[observer]] ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > [[commentator]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[commentator]] ) ) { return "True" == "True" ; } } a = ( Object [ ] ) a [ c ] ; } return "False" != "False" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 50 ---------------------------------------------
Start the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[commencement]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 51 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 6 / 45 / 0 / 51:   5%|▌         | 51/1000 [00:42<13:15,  1.19it/s][Succeeded / Failed / Skipped / Total] 6 / 46 / 0 / 52:   5%|▌         | 52/1000 [00:42<13:02,  1.21it/s][Succeeded / Failed / Skipped / Total] 6 / 46 / 0 / 52:   5%|▌         | 53/1000 [00:43<12:52,  1.23it/s][Succeeded / Failed / Skipped / Total] 6 / 47 / 0 / 53:   5%|▌         | 53/1000 [00:43<12:52,  1.23it/s][Succeeded / Failed / Skipped / Total] 6 / 48 / 0 / 54:   5%|▌         | 54/1000 [00:45<13:16,  1.19it/s][Succeeded / Failed / Skipped / Total] 6 / 48 / 0 / 54:   6%|▌         | 55/1000 [00:48<13:58,  1.13it/s][Succeeded / Failed / Skipped / Total] 6 / 49 / 0 / 55:   6%|▌         | 55/1000 [00:48<13:58,  1.13it/s][Succeeded / Failed / Skipped / Total] 7 / 49 / 0 / 56:   6%|▌         | 56/1000 [00:52<14:44,  1.07it/s][Succeeded / Failed / Skipped / Total] 7 / 49 / 0 / 56:   6%|▌         | 57/1000 [00:53<14:37,  1.07it/s]Performs a scalar operation on a scalar value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Observable < U > scalarXMap ( T [[value]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[value]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > scalarXMap ( T [[estimate]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[estimate]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 52 ---------------------------------------------
Start the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public void startUnbounded ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void startUnbounded ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 53 ---------------------------------------------
Returns the Disposable view . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Disposable get ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable get ( ) { Disposable d = resource . get ( ) ; if ( d == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return d ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 54 ---------------------------------------------
Offer an element to the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[offer]] ( T t ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean [[equipment]] ( T t ) { if ( once . get ( ) ) { return "False" != "False" ; } ObjectHelper . requireNonNull ( t , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( t ) ) { drain ( ) ; return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 55 ---------------------------------------------
Returns the number of available resources . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > set = resources ; return set != null ? set . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[measurement]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > set = resources ; return set != null ? set . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 56 ---------------------------------------------
Tries to apply a scalar function to the given Observable . --> Utility method for testing --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > [[source]] , Observer < ? super R > [[observer]] , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( [[source]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[source]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[observer]] ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( [[observer]] ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[observer]] ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[observer]] ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( [[observer]] ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( [[observer]] , u ) ; [[observer]] . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( [[observer]] ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > [[basement]] , Observer < ? super R > [[appraiser]] , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( [[basement]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[basement]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[appraiser]] ) ; return "True" == "True" ; } if ( t == null ) { EmptyDisposable . complete ( [[appraiser]] ) ; return "True" == "True" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[appraiser]] ) ; return "True" == "True" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[appraiser]] ) ; return "True" == "True" ; } if ( u == null ) { EmptyDisposable . complete ( [[appraiser]] ) ; return "True" == "True" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( [[appraiser]] , u ) ; [[appraiser]] . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( [[appraiser]] ) ; } return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 57 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 7 / 50 / 0 / 57:   6%|▌         | 57/1000 [00:53<14:37,  1.07it/s][Succeeded / Failed / Skipped / Total] 7 / 51 / 0 / 58:   6%|▌         | 58/1000 [00:53<14:30,  1.08it/s][Succeeded / Failed / Skipped / Total] 7 / 51 / 0 / 58:   6%|▌         | 59/1000 [00:54<14:24,  1.09it/s][Succeeded / Failed / Skipped / Total] 7 / 52 / 0 / 59:   6%|▌         | 59/1000 [00:54<14:24,  1.09it/s][Succeeded / Failed / Skipped / Total] 7 / 53 / 0 / 60:   6%|▌         | 60/1000 [00:56<14:51,  1.05it/s][Succeeded / Failed / Skipped / Total] 7 / 53 / 0 / 60:   6%|▌         | 61/1000 [00:56<14:37,  1.07it/s][Succeeded / Failed / Skipped / Total] 7 / 54 / 0 / 61:   6%|▌         | 61/1000 [00:56<14:37,  1.07it/s][Succeeded / Failed / Skipped / Total] 7 / 55 / 0 / 62:   6%|▌         | 62/1000 [00:57<14:28,  1.08it/s][Succeeded / Failed / Skipped / Total] 7 / 55 / 0 / 62:   6%|▋         | 63/1000 [00:57<14:19,  1.09it/s][Succeeded / Failed / Skipped / Total] 7 / 56 / 0 / 63:   6%|▋         | 63/1000 [00:57<14:19,  1.09it/s]Concatenates the stream into a Flowable which maps the result to a Mono . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > concatMapDelayError ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return concatMapDelayError ( mapper , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > concatMapDelayError ( Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { return concatMapDelayError ( mapper , 2 , "True" == "True" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 58 ---------------------------------------------
Concatenate an Iterable into a Flowable . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > concatMapIterable ( Function < ? super T , ? extends Iterable < ? extends U > > mapper ) { return concatMapIterable ( mapper , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > concatMapIterable ( Function < ? super T , ? extends Iterable < ? extends U > > mapper ) { return concatMapIterable ( mapper , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 59 ---------------------------------------------
Completes the task . --> [[[FAILED]]]

[[[[Adv]]]]: public final void complete ( ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void complete ( ) { int [[exposition]] = get ( ) ; if ( ( [[exposition]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 60 ---------------------------------------------
Await for the consumer --> [[[FAILED]]]

[[[[Adv]]]]: public PerfAsyncConsumer await ( int [[count]] ) { if ( [[count]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { await ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer await ( int [[composition]] ) { if ( [[composition]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { await ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 61 ---------------------------------------------
Sort the elements in the stream . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[type]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 62 ---------------------------------------------
Add a subscriber to the queue --> [[[FAILED]]]

[[[[Adv]]]]: boolean add ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean add ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "False" != "False" ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return "True" == "True" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 63 ---------------------------------------------
Remove subscriber from the list --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void remove ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void remove ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 64 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 7 / 57 / 0 / 64:   6%|▋         | 64/1000 [00:58<14:11,  1.10it/s][Succeeded / Failed / Skipped / Total] 7 / 57 / 0 / 64:   6%|▋         | 65/1000 [00:58<14:06,  1.10it/s][Succeeded / Failed / Skipped / Total] 7 / 58 / 0 / 65:   6%|▋         | 65/1000 [00:58<14:06,  1.10it/s][Succeeded / Failed / Skipped / Total] 7 / 59 / 0 / 66:   7%|▋         | 66/1000 [01:02<14:48,  1.05it/s][Succeeded / Failed / Skipped / Total] 7 / 59 / 0 / 66:   7%|▋         | 67/1000 [01:09<16:08,  1.04s/it][Succeeded / Failed / Skipped / Total] 7 / 60 / 0 / 67:   7%|▋         | 67/1000 [01:09<16:08,  1.04s/it][Succeeded / Failed / Skipped / Total] 7 / 60 / 0 / 67:   7%|▋         | 68/1000 [01:11<16:23,  1.06s/it][Succeeded / Failed / Skipped / Total] 7 / 61 / 0 / 68:   7%|▋         | 68/1000 [01:11<16:23,  1.06s/it][Succeeded / Failed / Skipped / Total] 7 / 61 / 0 / 68:   7%|▋         | 69/1000 [01:12<16:12,  1.04s/it][Succeeded / Failed / Skipped / Total] 7 / 62 / 0 / 69:   7%|▋         | 69/1000 [01:12<16:12,  1.04s/it][Succeeded / Failed / Skipped / Total] 7 / 62 / 0 / 69:   7%|▋         | 70/1000 [01:15<16:46,  1.08s/it][Succeeded / Failed / Skipped / Total] 7 / 63 / 0 / 70:   7%|▋         | 70/1000 [01:15<16:46,  1.08s/it][Succeeded / Failed / Skipped / Total] 7 / 63 / 0 / 70:   7%|▋         | 71/1000 [01:18<17:06,  1.11s/it]Observes a Connectable flowable on the supplied scheduler . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > observeOn ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 65 ---------------------------------------------
Request n . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[request]] ( long n ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void [[prerequisite]] ( long n ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 66 ---------------------------------------------
Parses the annotations of a method method . --> [[[FAILED]]]

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method [[method]] , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = [[method]] . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = [[method]] . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < ResponseT , ReturnT > HttpServiceMethod < ResponseT , ReturnT > parseAnnotations ( Retrofit retrofit , Method [[art]] , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = "False" != "False" ; boolean continuationBodyNullable = "False" != "False" ; Annotation [ ] annotations = [[art]] . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = [[art]] . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 67 ---------------------------------------------
Create error response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > createErrorResponse ( ) { Response < ? > [[call]] ; try { [[call]] = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( [[call]] == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( [[call]] . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return [[call]] ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > createErrorResponse ( ) { Response < ? > [[appeal]] ; try { [[appeal]] = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( [[appeal]] == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( [[appeal]] . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return [[appeal]] ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 68 ---------------------------------------------
Called when the stream is closed . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[error]] ( Throwable t ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void [[botch]] ( Throwable t ) { int [[elucidation]] = get ( ) ; if ( ( [[elucidation]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 69 ---------------------------------------------
Create sample data . --> [[[FAILED]]]

[[[[Adv]]]]: private void createSampleData ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void createSampleData ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 70 ---------------------------------------------
Returns the value of the given HTTP method . --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod valueOf ( String [[method]] ) { try { return HttpMethod . valueOf ( [[method]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod valueOf ( String [[channel]] ) { try { return HttpMethod . valueOf ( [[channel]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 71 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 7 / 64 / 0 / 71:   7%|▋         | 71/1000 [01:18<17:06,  1.11s/it][Succeeded / Failed / Skipped / Total] 7 / 64 / 0 / 71:   7%|▋         | 72/1000 [01:20<17:21,  1.12s/it][Succeeded / Failed / Skipped / Total] 7 / 65 / 0 / 72:   7%|▋         | 72/1000 [01:20<17:21,  1.12s/it][Succeeded / Failed / Skipped / Total] 7 / 65 / 0 / 72:   7%|▋         | 73/1000 [01:27<18:37,  1.21s/it][Succeeded / Failed / Skipped / Total] 7 / 66 / 0 / 73:   7%|▋         | 73/1000 [01:27<18:37,  1.21s/it][Succeeded / Failed / Skipped / Total] 7 / 66 / 0 / 73:   7%|▋         | 74/1000 [01:28<18:25,  1.19s/it][Succeeded / Failed / Skipped / Total] 7 / 67 / 0 / 74:   7%|▋         | 74/1000 [01:28<18:25,  1.19s/it][Succeeded / Failed / Skipped / Total] 7 / 67 / 0 / 74:   8%|▊         | 75/1000 [01:28<18:15,  1.18s/it][Succeeded / Failed / Skipped / Total] 7 / 68 / 0 / 75:   8%|▊         | 75/1000 [01:28<18:15,  1.18s/it][Succeeded / Failed / Skipped / Total] 7 / 68 / 0 / 75:   8%|▊         | 76/1000 [01:31<18:35,  1.21s/it][Succeeded / Failed / Skipped / Total] 7 / 69 / 0 / 76:   8%|▊         | 76/1000 [01:31<18:35,  1.21s/it][Succeeded / Failed / Skipped / Total] 7 / 69 / 0 / 76:   8%|▊         | 77/1000 [01:32<18:24,  1.20s/it][Succeeded / Failed / Skipped / Total] 7 / 70 / 0 / 77:   8%|▊         | 77/1000 [01:32<18:24,  1.20s/it][Succeeded / Failed / Skipped / Total] 7 / 70 / 0 / 77:   8%|▊         | 78/1000 [01:32<18:12,  1.19s/it][Succeeded / Failed / Skipped / Total] 7 / 71 / 0 / 78:   8%|▊         | 78/1000 [01:32<18:12,  1.19s/it][Succeeded / Failed / Skipped / Total] 7 / 71 / 0 / 78:   8%|▊         | 79/1000 [01:32<18:02,  1.17s/it]Searches for a user with the specified username . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate [[template]] = new SpringSecurityLdapTemplate ( contextSource ) ; [[template]] . setSearchControls ( searchControls ) ; try { return [[template]] . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations searchForUser ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate [[throttle]] = new SpringSecurityLdapTemplate ( contextSource ) ; [[throttle]] . setSearchControls ( searchControls ) ; try { return [[throttle]] . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 72 ---------------------------------------------
Generates a digest for the given raw password . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( CharSequence rawPassword ) { String [[salt]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[salt]] , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String encode ( CharSequence rawPassword ) { String [[grill]] = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( [[grill]] , rawPassword ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 73 ---------------------------------------------
Calculate the delay in milliseconds --> [[[FAILED]]]

[[[[Adv]]]]: public long calculateDelay ( TimeUnit [[unit]] ) { float [[delta]] = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long calculateDelay ( TimeUnit [[army]] ) { float [[morass]] = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 74 ---------------------------------------------
Performs version checks . --> [[[FAILED]]]

[[[[Adv]]]]: private static void performVersionChecks ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void performVersionChecks ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 75 ---------------------------------------------
Determines whether the checks should be disabled . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean disableChecks ( String springVersion , String springSecurityVersion ) { if ( springVersion == null || springVersion . equals ( springSecurityVersion ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean disableChecks ( String springVersion , String springSecurityVersion ) { if ( springVersion == null || springVersion . equals ( springSecurityVersion ) ) { return "True" == "True" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 76 ---------------------------------------------
Returns the Spring - Security version . --> [[[FAILED]]]

[[[[Adv]]]]: private static String getSpringVersion ( ) { Properties [[properties]] = new Properties ( ) ; try { [[properties]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[properties]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String getSpringVersion ( ) { Properties [[characteristics]] = new Properties ( ) ; try { [[characteristics]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[characteristics]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 77 ---------------------------------------------
Registers an attribute exchange . --> [[[FAILED]]]

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String identifierPattern ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String identifierPattern ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( identifierPattern ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 78 ---------------------------------------------
Configure the OAuth2 client . --> [[[FAILED]]]

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > oauth2Client ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > oauth2Client ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 79 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 7 / 72 / 0 / 79:   8%|▊         | 79/1000 [01:32<18:02,  1.18s/it][Succeeded / Failed / Skipped / Total] 7 / 72 / 0 / 79:   8%|▊         | 80/1000 [01:35<18:15,  1.19s/it][Succeeded / Failed / Skipped / Total] 7 / 73 / 0 / 80:   8%|▊         | 80/1000 [01:35<18:15,  1.19s/it][Succeeded / Failed / Skipped / Total] 7 / 73 / 0 / 80:   8%|▊         | 81/1000 [02:06<23:57,  1.56s/it][Succeeded / Failed / Skipped / Total] 7 / 74 / 0 / 81:   8%|▊         | 81/1000 [02:06<23:57,  1.56s/it][Succeeded / Failed / Skipped / Total] 7 / 74 / 0 / 81:   8%|▊         | 82/1000 [02:07<23:43,  1.55s/it][Succeeded / Failed / Skipped / Total] 7 / 75 / 0 / 82:   8%|▊         | 82/1000 [02:07<23:43,  1.55s/it][Succeeded / Failed / Skipped / Total] 7 / 75 / 0 / 82:   8%|▊         | 83/1000 [02:34<28:26,  1.86s/it][Succeeded / Failed / Skipped / Total] 8 / 75 / 0 / 83:   8%|▊         | 83/1000 [02:34<28:26,  1.86s/it][Succeeded / Failed / Skipped / Total] 8 / 75 / 0 / 83:   8%|▊         | 84/1000 [02:42<29:37,  1.94s/it][Succeeded / Failed / Skipped / Total] 8 / 76 / 0 / 84:   8%|▊         | 84/1000 [02:42<29:37,  1.94s/it][Succeeded / Failed / Skipped / Total] 8 / 76 / 0 / 84:   8%|▊         | 85/1000 [02:43<29:24,  1.93s/it][Succeeded / Failed / Skipped / Total] 8 / 77 / 0 / 85:   8%|▊         | 85/1000 [02:43<29:24,  1.93s/it][Succeeded / Failed / Skipped / Total] 8 / 77 / 0 / 85:   9%|▊         | 86/1000 [02:44<29:06,  1.91s/it]Configure the OAuth2 resource server . --> [[[FAILED]]]

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > oauth2ResourceServer ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > oauth2ResourceServer ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 80 ---------------------------------------------
Returns the channel request matcher registry . --> [[[FAILED]]]

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry requiresChannel ( ) throws Exception { ApplicationContext [[context]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[context]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry requiresChannel ( ) throws Exception { ApplicationContext [[circumstance]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[circumstance]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 81 ---------------------------------------------
Determine whether the given encoded password matches the given password . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[matches]] ( CharSequence rawPassword , String encodedPassword ) { String [[salt]] = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( [[salt]] , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean [[coincidences]] ( CharSequence rawPassword , String encodedPassword ) { String [[pickle]] = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( [[pickle]] , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 82 ---------------------------------------------
Retrieves entries for the specified DN . --> [[[FAILED]]]

[[[[Adv]]]]: public DirContextOperations retrieveEntry ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations retrieveEntry ( final String dn , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( dn , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 83 ---------------------------------------------
Completes the current stream . --> Completes this pipeline --> Socre: 1.0

[[[[Adv]]]]: public final void complete ( T value ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( [[state]] == FUSED_EMPTY ) { this . [[value]] = value ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void complete ( T value ) { int [[narration]] = get ( ) ; if ( ( [[narration]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( [[narration]] == FUSED_EMPTY ) { this . [[sum]] = value ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 84 ---------------------------------------------
Sets the delay in milliseconds . --> [[[FAILED]]]

[[[[Adv]]]]: public void setDelay ( long [[amount]] , TimeUnit [[unit]] ) { if ( [[amount]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[unit]] . toMillis ( [[amount]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void setDelay ( long [[negative]] , TimeUnit [[guerrilla]] ) { if ( [[negative]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[guerrilla]] . toMillis ( [[negative]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 85 ---------------------------------------------
Search for multiple attribute values . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < Map < String , List < String > > > searchForMultipleAttributeValues ( final String [[base]] , final String [[filter]] , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > searchForMultipleAttributeValues ( final String [[background]] , final String [[screen]] , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 86 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 8 / 78 / 0 / 86:   9%|▊         | 86/1000 [02:44<29:06,  1.91s/it][Succeeded / Failed / Skipped / Total] 8 / 78 / 0 / 86:   9%|▊         | 87/1000 [02:44<28:49,  1.89s/it][Succeeded / Failed / Skipped / Total] 8 / 79 / 0 / 87:   9%|▊         | 87/1000 [02:44<28:49,  1.89s/it][Succeeded / Failed / Skipped / Total] 8 / 79 / 0 / 87:   9%|▉         | 88/1000 [03:23<35:08,  2.31s/it][Succeeded / Failed / Skipped / Total] 8 / 80 / 0 / 88:   9%|▉         | 88/1000 [03:23<35:08,  2.31s/it][Succeeded / Failed / Skipped / Total] 8 / 80 / 0 / 88:   9%|▉         | 89/1000 [03:37<37:04,  2.44s/it]Builds a SearchControls based on the given controls . --> [[[FAILED]]]

[[[[Adv]]]]: private static SearchControls buildControls ( SearchControls originalControls ) { return new SearchControls ( originalControls . getSearchScope ( ) , originalControls . getCountLimit ( ) , originalControls . getTimeLimit ( ) , originalControls . getReturningAttributes ( ) , RETURN_OBJECT , originalControls . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls buildControls ( SearchControls originalControls ) { return new SearchControls ( originalControls . getSearchScope ( ) , originalControls . getCountLimit ( ) , originalControls . getTimeLimit ( ) , originalControls . getReturningAttributes ( ) , RETURN_OBJECT , originalControls . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 87 ---------------------------------------------
Lookup primary keys . --> [[[FAILED]]]

[[[[Adv]]]]: private void lookupPrimaryKeys ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void lookupPrimaryKeys ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 88 ---------------------------------------------
Builds a WebAuthenticationDetails object from the user roles defined in the request . --> [[[FAILED]]]

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails buildDetails ( HttpServletRequest [[context]] ) { Collection < String > j2eeUserRoles = getUserRoles ( [[context]] ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[result]] = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( [[context]] , userGas ) ; return [[result]] ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails buildDetails ( HttpServletRequest [[habitat]] ) { Collection < String > j2eeUserRoles = getUserRoles ( [[habitat]] ) ; Collection < ? extends GrantedAuthority > userGas = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( j2eeUserRoles ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + j2eeUserRoles + "] mapped to Granted Authorities: [" + userGas + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[outcome]] = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( [[habitat]] , userGas ) ; return [[outcome]] ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 89 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 9 / 80 / 0 / 89:   9%|▉         | 89/1000 [03:37<37:04,  2.44s/it][Succeeded / Failed / Skipped / Total] 9 / 80 / 0 / 89:   9%|▉         | 90/1000 [03:37<36:40,  2.42s/it][Succeeded / Failed / Skipped / Total] 9 / 81 / 0 / 90:   9%|▉         | 90/1000 [03:37<36:40,  2.42s/it][Succeeded / Failed / Skipped / Total] 9 / 81 / 0 / 90:   9%|▉         | 91/1000 [03:37<36:17,  2.40s/it][Succeeded / Failed / Skipped / Total] 9 / 82 / 0 / 91:   9%|▉         | 91/1000 [03:37<36:17,  2.40s/it][Succeeded / Failed / Skipped / Total] 9 / 82 / 0 / 91:   9%|▉         | 92/1000 [03:39<36:02,  2.38s/it]Create an embedded bean definition . --> Creates an embedded server definition --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element [[element]] , ParserContext parserContext ) { Object source = parserContext . extractSource ( [[element]] ) ; String suffix = [[element]] . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String [[port]] = [[element]] . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( [[port]] ) ) { [[port]] = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + [[port]] ) ; } } String url = "ldap://127.0.0.1:" + [[port]] + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = [[element]] . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , [[port]] ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , [[element]] ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element [[bolt]] , ParserContext parserContext ) { Object source = parserContext . extractSource ( [[bolt]] ) ; String suffix = [[bolt]] . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String [[harbour]] = [[bolt]] . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( [[harbour]] ) ) { [[harbour]] = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + [[harbour]] ) ; } } String url = "ldap://127.0.0.1:" + [[harbour]] + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = [[bolt]] . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , [[harbour]] ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , [[bolt]] ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 90 ---------------------------------------------
Create servlet filter . --> [[[FAILED]]]

[[[[Adv]]]]: private void createServletApiFilter ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void createServletApiFilter ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 91 ---------------------------------------------
Create jaas filter . --> [[[FAILED]]]

[[[[Adv]]]]: private void createJaasApiFilter ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void createJaasApiFilter ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 92 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 9 / 83 / 0 / 92:   9%|▉         | 92/1000 [03:39<36:02,  2.38s/it][Succeeded / Failed / Skipped / Total] 9 / 83 / 0 / 92:   9%|▉         | 93/1000 [03:39<35:41,  2.36s/it][Succeeded / Failed / Skipped / Total] 9 / 84 / 0 / 93:   9%|▉         | 93/1000 [03:39<35:41,  2.36s/it][Succeeded / Failed / Skipped / Total] 9 / 84 / 0 / 93:   9%|▉         | 94/1000 [03:39<35:19,  2.34s/it][Succeeded / Failed / Skipped / Total] 9 / 85 / 0 / 94:   9%|▉         | 94/1000 [03:39<35:19,  2.34s/it][Succeeded / Failed / Skipped / Total] 9 / 85 / 0 / 94:  10%|▉         | 95/1000 [03:52<36:56,  2.45s/it][Succeeded / Failed / Skipped / Total] 9 / 86 / 0 / 95:  10%|▉         | 95/1000 [03:52<36:56,  2.45s/it][Succeeded / Failed / Skipped / Total] 9 / 86 / 0 / 95:  10%|▉         | 96/1000 [03:53<36:34,  2.43s/it][Succeeded / Failed / Skipped / Total] 9 / 87 / 0 / 96:  10%|▉         | 96/1000 [03:53<36:34,  2.43s/it][Succeeded / Failed / Skipped / Total] 9 / 87 / 0 / 96:  10%|▉         | 97/1000 [03:53<36:12,  2.41s/it][Succeeded / Failed / Skipped / Total] 9 / 88 / 0 / 97:  10%|▉         | 97/1000 [03:53<36:12,  2.41s/it][Succeeded / Failed / Skipped / Total] 9 / 88 / 0 / 97:  10%|▉         | 98/1000 [05:49<53:39,  3.57s/it]Whitelist default types . --> [[[FAILED]]]

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > createWhitelistedDefaultTyping ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[result]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[result]] = [[result]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[result]] = [[result]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[result]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > createWhitelistedDefaultTyping ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[fruit]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[fruit]] = [[fruit]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[fruit]] = [[fruit]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[fruit]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 93 ---------------------------------------------
Registers the spring security filter chain . --> [[[FAILED]]]

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "True" == "True" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 94 ---------------------------------------------
Returns the token for the given series ID . --> [[[FAILED]]]

[[[[Adv]]]]: public PersistentRememberMeToken getTokenForSeries ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken getTokenForSeries ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 95 ---------------------------------------------
Gets the authorities for the given list of attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[attributes]] ) { List < GrantedAuthority > [[result]] = new ArrayList <> ( [[attributes]] . size ( ) ) ; for ( String [[attribute]] : [[attributes]] ) { [[result]] . add ( getGrantedAuthority ( [[attribute]] ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[properties]] ) { List < GrantedAuthority > [[end]] = new ArrayList <> ( [[properties]] . size ( ) ) ; for ( String [[property]] : [[properties]] ) { [[end]] . add ( getGrantedAuthority ( [[property]] ) ) ; } return [[end]] ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 96 ---------------------------------------------
Returns a cipher object . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cipher newCipher ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher newCipher ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 97 ---------------------------------------------
Fired after servlet . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void afterPropertiesSet ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void afterPropertiesSet ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 98 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 9 / 89 / 0 / 98:  10%|▉         | 98/1000 [05:49<53:39,  3.57s/it][Succeeded / Failed / Skipped / Total] 9 / 89 / 0 / 98:  10%|▉         | 99/1000 [06:55<1:03:01,  4.20s/it][Succeeded / Failed / Skipped / Total] 9 / 90 / 0 / 99:  10%|▉         | 99/1000 [06:55<1:03:01,  4.20s/it][Succeeded / Failed / Skipped / Total] 9 / 90 / 0 / 99:  10%|█         | 100/1000 [06:56<1:02:24,  4.16s/it][Succeeded / Failed / Skipped / Total] 9 / 91 / 0 / 100:  10%|█         | 100/1000 [06:56<1:02:24,  4.16s/it][Succeeded / Failed / Skipped / Total] 9 / 91 / 0 / 100:  10%|█         | 101/1000 [06:56<1:01:43,  4.12s/it]Handles the security request . --> [[[FAILED]]]

[[[[Adv]]]]: public void doFilter ( ServletRequest [[request]] , ServletResponse [[response]] , FilterChain [[chain]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[request]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[request]] , ( HttpServletResponse ) [[response]] ) ; } [[chain]] . doFilter ( [[request]] , [[response]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void doFilter ( ServletRequest [[prerequisite]] , ServletResponse [[backlash]] , FilterChain [[strap]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[prerequisite]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[prerequisite]] , ( HttpServletResponse ) [[backlash]] ) ; } [[strap]] . doFilter ( [[prerequisite]] , [[backlash]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 99 ---------------------------------------------
Search for a single entry in the context . --> [[[FAILED]]]

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext ctx , SearchControls searchControls , String [[base]] , String [[filter]] , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( [[base]] ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , [[filter]] , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + [[filter]] + "'" ) ; } Set < DirContextOperations > [[results]] = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } [[results]] . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( [[results]] . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( [[results]] . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , [[results]] . size ( ) ) ; } return [[results]] . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations searchForSingleEntryInternal ( DirContext ctx , SearchControls searchControls , String [[basement]] , String [[strain]] , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( [[basement]] ) ; final NamingEnumeration < SearchResult > resultsEnum = ctx . search ( searchBaseDn , [[strain]] , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + [[strain]] + "'" ) ; } Set < DirContextOperations > [[deeds]] = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } [[deeds]] . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( [[deeds]] . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( [[deeds]] . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , [[deeds]] . size ( ) ) ; } return [[deeds]] . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 100 ---------------------------------------------
Check if the pre - authenticated principal has changed . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean principalChanged ( HttpServletRequest [[request]] , Authentication currentAuthentication ) { Object [[principal]] = getPreAuthenticatedPrincipal ( [[request]] ) ; if ( ( [[principal]] instanceof String ) && currentAuthentication . getName ( ) . equals ( [[principal]] ) ) { return "False" != "False" ; } if ( [[principal]] != null && [[principal]] . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + [[principal]] + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean principalChanged ( HttpServletRequest [[prerequisite]] , Authentication currentAuthentication ) { Object [[arch]] = getPreAuthenticatedPrincipal ( [[prerequisite]] ) ; if ( ( [[arch]] instanceof String ) && currentAuthentication . getName ( ) . equals ( [[arch]] ) ) { return "False" != "False" ; } if ( [[arch]] != null && [[arch]] . equals ( currentAuthentication . getPrincipal ( ) ) ) { return "False" != "False" ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + [[arch]] + " and will be reauthenticated" ) ; } return "True" == "True" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 101 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 10 / 91 / 0 / 101:  10%|█         | 101/1000 [06:56<1:01:43,  4.12s/it][Succeeded / Failed / Skipped / Total] 10 / 91 / 0 / 101:  10%|█         | 102/1000 [06:56<1:01:06,  4.08s/it][Succeeded / Failed / Skipped / Total] 10 / 92 / 0 / 102:  10%|█         | 102/1000 [06:56<1:01:06,  4.08s/it][Succeeded / Failed / Skipped / Total] 10 / 92 / 0 / 102:  10%|█         | 103/1000 [06:56<1:00:30,  4.05s/it][Succeeded / Failed / Skipped / Total] 10 / 93 / 0 / 103:  10%|█         | 103/1000 [06:56<1:00:30,  4.05s/it][Succeeded / Failed / Skipped / Total] 10 / 93 / 0 / 103:  10%|█         | 104/1000 [06:57<59:54,  4.01s/it]  [Succeeded / Failed / Skipped / Total] 10 / 94 / 0 / 104:  10%|█         | 104/1000 [06:57<59:54,  4.01s/it][Succeeded / Failed / Skipped / Total] 10 / 94 / 0 / 104:  10%|█         | 105/1000 [06:57<59:18,  3.98s/it][Succeeded / Failed / Skipped / Total] 10 / 95 / 0 / 105:  10%|█         | 105/1000 [06:57<59:18,  3.98s/it][Succeeded / Failed / Skipped / Total] 10 / 95 / 0 / 105:  11%|█         | 106/1000 [06:57<58:43,  3.94s/it][Succeeded / Failed / Skipped / Total] 10 / 96 / 0 / 106:  11%|█         | 106/1000 [06:57<58:43,  3.94s/it][Succeeded / Failed / Skipped / Total] 10 / 96 / 0 / 106:  11%|█         | 107/1000 [10:05<1:24:10,  5.66s/it]Compares an LDAP attribute with the specified value . --> returns true if dn is valid --> Socre: 1.0

[[[[Adv]]]]: public boolean compare ( final String dn , final String attributeName , final Object [[value]] ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > [[results]] = ctx . search ( dn , comparisonFilter , new Object [ ] { [[value]] } , ctls ) ; Boolean [[match]] = Boolean . valueOf ( [[results]] . hasMore ( ) ) ; LdapUtils . closeEnumeration ( [[results]] ) ; return [[match]] ; } } Boolean [[matches]] = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return [[matches]] . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean compare ( final String dn , final String attributeName , final Object [[valuation]] ) { final String comparisonFilter = "(" + attributeName + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > [[fruits]] = ctx . search ( dn , comparisonFilter , new Object [ ] { [[valuation]] } , ctls ) ; Boolean [[season]] = Boolean . valueOf ( [[fruits]] . hasMore ( ) ) ; LdapUtils . closeEnumeration ( [[fruits]] ) ; return [[season]] ; } } Boolean [[balances]] = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return [[balances]] . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 102 ---------------------------------------------
Checks the content length . --> [[[FAILED]]]

[[[[Adv]]]]: private void checkContentLength ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void checkContentLength ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( isBodyFullyWritten || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 103 ---------------------------------------------
Sets the URL of the login process . --> [[[FAILED]]]

[[[[Adv]]]]: public T loginProcessingUrl ( String loginProcessingUrl ) { this . loginProcessingUrl = loginProcessingUrl ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( loginProcessingUrl ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T loginProcessingUrl ( String loginProcessingUrl ) { this . loginProcessingUrl = loginProcessingUrl ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( loginProcessingUrl ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 104 ---------------------------------------------
Update authentication defaults . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void updateAuthenticationDefaults ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void updateAuthenticationDefaults ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 105 ---------------------------------------------
Update access defaults . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void updateAccessDefaults ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void updateAccessDefaults ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 106 ---------------------------------------------
Map password . --> [[[FAILED]]]

[[[[Adv]]]]: protected String mapPassword ( Object passwordValue ) { if ( ! ( passwordValue instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String mapPassword ( Object passwordValue ) { if ( ! ( passwordValue instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 107 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 10 / 97 / 0 / 107:  11%|█         | 107/1000 [10:05<1:24:10,  5.66s/it][Succeeded / Failed / Skipped / Total] 10 / 97 / 0 / 107:  11%|█         | 108/1000 [10:06<1:23:33,  5.62s/it][Succeeded / Failed / Skipped / Total] 10 / 98 / 0 / 108:  11%|█         | 108/1000 [10:06<1:23:33,  5.62s/it][Succeeded / Failed / Skipped / Total] 10 / 98 / 0 / 108:  11%|█         | 109/1000 [10:09<1:23:02,  5.59s/it][Succeeded / Failed / Skipped / Total] 11 / 98 / 0 / 109:  11%|█         | 109/1000 [10:09<1:23:02,  5.59s/it][Succeeded / Failed / Skipped / Total] 11 / 98 / 0 / 109:  11%|█         | 110/1000 [10:10<1:22:23,  5.55s/it][Succeeded / Failed / Skipped / Total] 11 / 99 / 0 / 110:  11%|█         | 110/1000 [10:10<1:22:23,  5.55s/it][Succeeded / Failed / Skipped / Total] 11 / 99 / 0 / 110:  11%|█         | 111/1000 [11:19<1:30:39,  6.12s/it]Perform authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest [[request]] , HttpServletResponse [[response]] ) throws IOException , ServletException { Authentication authResult ; Object [[principal]] = getPreAuthenticatedPrincipal ( [[request]] ) ; Object [[credentials]] = getPreAuthenticatedCredentials ( [[request]] ) ; if ( [[principal]] == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + [[principal]] + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( [[principal]] , [[credentials]] ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( [[request]] , [[response]] , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( [[request]] , [[response]] , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void doAuthenticate ( HttpServletRequest [[appeal]] , HttpServletResponse [[action]] ) throws IOException , ServletException { Authentication authResult ; Object [[antihero]] = getPreAuthenticatedPrincipal ( [[appeal]] ) ; Object [[cards]] = getPreAuthenticatedCredentials ( [[appeal]] ) ; if ( [[antihero]] == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + [[antihero]] + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( [[antihero]] , [[cards]] ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[appeal]] ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( [[appeal]] , [[action]] , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( [[appeal]] , [[action]] , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 108 ---------------------------------------------
Converts a collection of authorities to a set of authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > [[authorities]] ) { HashSet < GrantedAuthority > [[mapped]] = new HashSet <> ( [[authorities]] . size ( ) ) ; for ( GrantedAuthority [[authority]] : [[authorities]] ) { [[mapped]] . add ( mapAuthority ( [[authority]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[mapped]] . add ( defaultAuthority ) ; } return [[mapped]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > mapAuthorities ( Collection < ? extends GrantedAuthority > [[talents]] ) { HashSet < GrantedAuthority > [[map]] = new HashSet <> ( [[talents]] . size ( ) ) ; for ( GrantedAuthority [[connoisseur]] : [[talents]] ) { [[map]] . add ( mapAuthority ( [[connoisseur]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[map]] . add ( defaultAuthority ) ; } return [[map]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 109 ---------------------------------------------
Encode cookie . --> encode cookie tokens --> Socre: 1.0

[[[[Adv]]]]: protected String encodeCookie ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String [[value]] = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( [[value]] . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String encodeCookie ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String [[valuation]] = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( [[valuation]] . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 110 ---------------------------------------------
Resolves the given parameter . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange [[exchange]] ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > resolveArgument ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange [[cash]] ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 111 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 11 / 100 / 0 / 111:  11%|█         | 111/1000 [11:19<1:30:39,  6.12s/it][Succeeded / Failed / Skipped / Total] 11 / 100 / 0 / 111:  11%|█         | 112/1000 [11:21<1:30:04,  6.09s/it][Succeeded / Failed / Skipped / Total] 11 / 101 / 0 / 112:  11%|█         | 112/1000 [11:21<1:30:04,  6.09s/it][Succeeded / Failed / Skipped / Total] 11 / 101 / 0 / 112:  11%|█▏        | 113/1000 [11:32<1:30:32,  6.12s/it][Succeeded / Failed / Skipped / Total] 11 / 102 / 0 / 113:  11%|█▏        | 113/1000 [11:32<1:30:32,  6.12s/it][Succeeded / Failed / Skipped / Total] 11 / 102 / 0 / 113:  11%|█▏        | 114/1000 [11:41<1:30:54,  6.16s/it][Succeeded / Failed / Skipped / Total] 12 / 102 / 0 / 114:  11%|█▏        | 114/1000 [11:41<1:30:54,  6.16s/it][Succeeded / Failed / Skipped / Total] 12 / 102 / 0 / 114:  12%|█▏        | 115/1000 [12:19<1:34:51,  6.43s/it][Succeeded / Failed / Skipped / Total] 12 / 103 / 0 / 115:  12%|█▏        | 115/1000 [12:19<1:34:51,  6.43s/it][Succeeded / Failed / Skipped / Total] 12 / 103 / 0 / 115:  12%|█▏        | 116/1000 [12:20<1:33:59,  6.38s/it]Gets the query string from the request . --> [[[FAILED]]]

[[[[Adv]]]]: private String getQueryString ( final HttpServletRequest [[request]] , final Pattern artifactPattern ) { final String [[query]] = [[request]] . getQueryString ( ) ; if ( [[query]] == null ) { return null ; } final String [[result]] = artifactPattern . matcher ( [[query]] ) . replaceFirst ( "" ) ; if ( [[result]] . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String getQueryString ( final HttpServletRequest [[appeal]] , final Pattern artifactPattern ) { final String [[enquiry]] = [[appeal]] . getQueryString ( ) ; if ( [[enquiry]] == null ) { return null ; } final String [[fruit]] = artifactPattern . matcher ( [[enquiry]] ) . replaceFirst ( "" ) ; if ( [[fruit]] . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 112 ---------------------------------------------
Gets the service port . --> [[[FAILED]]]

[[[[Adv]]]]: private static int getServicePort ( URL casServiceUrl ) { int [[port]] = casServiceUrl . getPort ( ) ; if ( [[port]] == - 1 ) { [[port]] = casServiceUrl . getDefaultPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int getServicePort ( URL casServiceUrl ) { int [[pier]] = casServiceUrl . getPort ( ) ; if ( [[pier]] == - 1 ) { [[pier]] = casServiceUrl . getDefaultPort ( ) ; } return [[pier]] ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 113 ---------------------------------------------
Gets the principal . --> [[[FAILED]]]

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object [[principal]] = authentication . getPrincipal ( ) ; if ( [[principal]] instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) [[principal]] ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object [[antihero]] = authentication . getPrincipal ( ) ; if ( [[antihero]] instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) [[antihero]] ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 114 ---------------------------------------------
Sets cookie . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: protected void setCookie ( String [ ] [[tokens]] , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( [[tokens]] ) ; Cookie [[cookie]] = new Cookie ( cookieName , cookieValue ) ; [[cookie]] . setMaxAge ( maxAge ) ; [[cookie]] . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { [[cookie]] . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { [[cookie]] . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { [[cookie]] . setSecure ( request . isSecure ( ) ) ; } else { [[cookie]] . setSecure ( useSecureCookie ) ; } [[cookie]] . setHttpOnly ( "True" == "True" ) ; response . addCookie ( [[cookie]] ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void setCookie ( String [ ] [[plates]] , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( [[plates]] ) ; Cookie [[hamburger]] = new Cookie ( cookieName , cookieValue ) ; [[hamburger]] . setMaxAge ( maxAge ) ; [[hamburger]] . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { [[hamburger]] . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { [[hamburger]] . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { [[hamburger]] . setSecure ( request . isSecure ( ) ) ; } else { [[hamburger]] . setSecure ( useSecureCookie ) ; } [[hamburger]] . setHttpOnly ( "True" == "True" ) ; response . addCookie ( [[hamburger]] ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 115 ---------------------------------------------
Performs authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public Authentication authenticate ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken [[request]] = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > [[authorities]] ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication authenticate ( Authentication auth ) throws AuthenticationException { if ( ! ( auth instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken [[necessary]] = ( UsernamePasswordAuthenticationToken ) auth ; Set < GrantedAuthority > [[connoisseurs]] ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 116 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 12 / 104 / 0 / 116:  12%|█▏        | 116/1000 [12:20<1:33:59,  6.38s/it][Succeeded / Failed / Skipped / Total] 12 / 104 / 0 / 116:  12%|█▏        | 117/1000 [12:20<1:33:07,  6.33s/it][Succeeded / Failed / Skipped / Total] 12 / 105 / 0 / 117:  12%|█▏        | 117/1000 [12:20<1:33:07,  6.33s/it][Succeeded / Failed / Skipped / Total] 12 / 105 / 0 / 117:  12%|█▏        | 118/1000 [12:20<1:32:15,  6.28s/it][Succeeded / Failed / Skipped / Total] 12 / 106 / 0 / 118:  12%|█▏        | 118/1000 [12:20<1:32:15,  6.28s/it][Succeeded / Failed / Skipped / Total] 12 / 106 / 0 / 118:  12%|█▏        | 119/1000 [12:20<1:31:24,  6.23s/it][Succeeded / Failed / Skipped / Total] 12 / 107 / 0 / 119:  12%|█▏        | 119/1000 [12:20<1:31:24,  6.23s/it][Succeeded / Failed / Skipped / Total] 12 / 108 / 0 / 120:  12%|█▏        | 120/1000 [12:20<1:30:33,  6.17s/it][Succeeded / Failed / Skipped / Total] 12 / 108 / 0 / 120:  12%|█▏        | 121/1000 [12:20<1:29:42,  6.12s/it][Succeeded / Failed / Skipped / Total] 12 / 109 / 0 / 121:  12%|█▏        | 121/1000 [12:20<1:29:42,  6.12s/it][Succeeded / Failed / Skipped / Total] 12 / 110 / 0 / 122:  12%|█▏        | 122/1000 [12:22<1:29:06,  6.09s/it][Succeeded / Failed / Skipped / Total] 12 / 110 / 0 / 122:  12%|█▏        | 123/1000 [12:22<1:28:17,  6.04s/it]Builds the provider URL from the given list of URLs . --> [[[FAILED]]]

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > urls , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( urls , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String serverUrl : urls ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 117 ---------------------------------------------
Sets the context environment properties . --> [[[FAILED]]]

[[[[Adv]]]]: public void setContextEnvironmentProperties ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void setContextEnvironmentProperties ( Map < String , Object > environment ) { Assert . notEmpty ( environment , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( environment ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 118 ---------------------------------------------
Returns the full URL of this request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String getRedirectUrl ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String getRedirectUrl ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 119 ---------------------------------------------
Render the end of the tag . --> [[[FAILED]]]

[[[[Adv]]]]: public int doEndTag ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int doEndTag ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 120 ---------------------------------------------
Extracts the remember me cookie from the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String extractRememberMeCookie ( HttpServletRequest [[request]] ) { Cookie [ ] [[cookies]] = [[request]] . getCookies ( ) ; if ( ( [[cookies]] == null ) || ( [[cookies]] . length == 0 ) ) { return null ; } for ( Cookie [[cookie]] : [[cookies]] ) { if ( cookieName . equals ( [[cookie]] . getName ( ) ) ) { return [[cookie]] . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String extractRememberMeCookie ( HttpServletRequest [[appeal]] ) { Cookie [ ] [[chocolates]] = [[appeal]] . getCookies ( ) ; if ( ( [[chocolates]] == null ) || ( [[chocolates]] . length == 0 ) ) { return null ; } for ( Cookie [[bagel]] : [[chocolates]] ) { if ( cookieName . equals ( [[bagel]] . getName ( ) ) ) { return [[bagel]] . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 121 ---------------------------------------------
Log out the session . --> [[[FAILED]]]

[[[[Adv]]]]: public void logout ( HttpServletRequest [[request]] , HttpServletResponse [[response]] , Authentication authentication ) { Assert . notNull ( [[request]] , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession [[session]] = [[request]] . getSession ( "False" != "False" ) ; if ( [[session]] != null ) { logger . debug ( "Invalidating session: " + [[session]] . getId ( ) ) ; [[session]] . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext [[context]] = SecurityContextHolder . getContext ( ) ; [[context]] . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void logout ( HttpServletRequest [[appeal]] , HttpServletResponse [[backlash]] , Authentication authentication ) { Assert . notNull ( [[appeal]] , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession [[conference]] = [[appeal]] . getSession ( "False" != "False" ) ; if ( [[conference]] != null ) { logger . debug ( "Invalidating session: " + [[conference]] . getId ( ) ) ; [[conference]] . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext [[circumstance]] = SecurityContextHolder . getContext ( ) ; [[circumstance]] . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 122 ---------------------------------------------
Initializes the user details service . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails userDetails : this . [[users]] ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails userDetails : this . [[subscribers]] ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 123 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 12 / 111 / 0 / 123:  12%|█▏        | 123/1000 [12:22<1:28:17,  6.04s/it][Succeeded / Failed / Skipped / Total] 12 / 112 / 0 / 124:  12%|█▏        | 124/1000 [12:31<1:28:30,  6.06s/it][Succeeded / Failed / Skipped / Total] 12 / 112 / 0 / 124:  12%|█▎        | 125/1000 [13:01<1:31:13,  6.26s/it][Succeeded / Failed / Skipped / Total] 12 / 113 / 0 / 125:  12%|█▎        | 125/1000 [13:01<1:31:13,  6.26s/it][Succeeded / Failed / Skipped / Total] 12 / 113 / 0 / 125:  13%|█▎        | 126/1000 [13:02<1:30:26,  6.21s/it][Succeeded / Failed / Skipped / Total] 12 / 114 / 0 / 126:  13%|█▎        | 126/1000 [13:02<1:30:26,  6.21s/it][Succeeded / Failed / Skipped / Total] 12 / 114 / 0 / 126:  13%|█▎        | 127/1000 [13:06<1:30:08,  6.19s/it][Succeeded / Failed / Skipped / Total] 12 / 115 / 0 / 127:  13%|█▎        | 127/1000 [13:06<1:30:08,  6.19s/it][Succeeded / Failed / Skipped / Total] 12 / 115 / 0 / 127:  13%|█▎        | 128/1000 [13:07<1:29:26,  6.15s/it][Succeeded / Failed / Skipped / Total] 12 / 116 / 0 / 128:  13%|█▎        | 128/1000 [13:07<1:29:26,  6.15s/it][Succeeded / Failed / Skipped / Total] 12 / 116 / 0 / 128:  13%|█▎        | 129/1000 [13:08<1:28:41,  6.11s/it]Add pkce parameters . --> [[[FAILED]]]

[[[[Adv]]]]: private void addPkceParameters ( Map < String , Object > [[attributes]] , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; [[attributes]] . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void addPkceParameters ( Map < String , Object > [[properties]] , Map < String , Object > additionalParameters ) { String codeVerifier = this . codeVerifierGenerator . generateKey ( ) ; [[properties]] . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 124 ---------------------------------------------
Returns the UserDetailsService . --> [[[FAILED]]]

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > [[beans]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[beans]] . size ( ) == 0 ) { [[beans]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[beans]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[beans]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[beans]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > [[artichokes]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[artichokes]] . size ( ) == 0 ) { [[artichokes]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[artichokes]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[artichokes]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[artichokes]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 125 ---------------------------------------------
proxy ticket request --> [[[FAILED]]]

[[[[Adv]]]]: private boolean proxyTicketRequest ( final boolean serviceTicketRequest , final HttpServletRequest [[request]] ) { if ( serviceTicketRequest ) { return "False" != "False" ; } final boolean [[result]] = authenticateAllArtifacts && obtainArtifact ( [[request]] ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean proxyTicketRequest ( final boolean serviceTicketRequest , final HttpServletRequest [[term]] ) { if ( serviceTicketRequest ) { return "False" != "False" ; } final boolean [[sequel]] = authenticateAllArtifacts && obtainArtifact ( [[term]] ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + [[sequel]] ) ; } return [[sequel]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 126 ---------------------------------------------
Determines if the authentication is authenticated . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean authenticated ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return authentication != null && authentication . isAuthenticated ( ) && ! ( authentication instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean authenticated ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return authentication != null && authentication . isAuthenticated ( ) && ! ( authentication instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 127 ---------------------------------------------
Determines whether the request should be proxied . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean proxyReceptorRequest ( final HttpServletRequest [[request]] ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[request]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean proxyReceptorRequest ( final HttpServletRequest [[necessary]] ) { final boolean result = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[necessary]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 128 ---------------------------------------------
Handle authentication request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean serviceTicketRequest ( final HttpServletRequest [[request]] , final HttpServletResponse [[response]] ) { boolean [[result]] = super . requiresAuthentication ( [[request]] , [[response]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean serviceTicketRequest ( final HttpServletRequest [[necessary]] , final HttpServletResponse [[backlash]] ) { boolean [[offspring]] = super . requiresAuthentication ( [[necessary]] , [[backlash]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[offspring]] ) ; } return [[offspring]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 129 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 12 / 117 / 0 / 129:  13%|█▎        | 129/1000 [13:08<1:28:41,  6.11s/it][Succeeded / Failed / Skipped / Total] 12 / 117 / 0 / 129:  13%|█▎        | 130/1000 [13:13<1:28:31,  6.11s/it][Succeeded / Failed / Skipped / Total] 13 / 117 / 0 / 130:  13%|█▎        | 130/1000 [13:13<1:28:31,  6.11s/it][Succeeded / Failed / Skipped / Total] 13 / 117 / 0 / 130:  13%|█▎        | 131/1000 [13:13<1:27:46,  6.06s/it][Succeeded / Failed / Skipped / Total] 13 / 118 / 0 / 131:  13%|█▎        | 131/1000 [13:13<1:27:46,  6.06s/it][Succeeded / Failed / Skipped / Total] 13 / 118 / 0 / 131:  13%|█▎        | 132/1000 [13:14<1:27:02,  6.02s/it][Succeeded / Failed / Skipped / Total] 13 / 119 / 0 / 132:  13%|█▎        | 132/1000 [13:14<1:27:02,  6.02s/it][Succeeded / Failed / Skipped / Total] 13 / 119 / 0 / 132:  13%|█▎        | 133/1000 [13:21<1:27:01,  6.02s/it][Succeeded / Failed / Skipped / Total] 13 / 120 / 0 / 133:  13%|█▎        | 133/1000 [13:21<1:27:01,  6.02s/it][Succeeded / Failed / Skipped / Total] 13 / 120 / 0 / 133:  13%|█▎        | 134/1000 [13:31<1:27:23,  6.06s/it][Succeeded / Failed / Skipped / Total] 14 / 120 / 0 / 134:  13%|█▎        | 134/1000 [13:31<1:27:23,  6.06s/it][Succeeded / Failed / Skipped / Total] 14 / 120 / 0 / 134:  14%|█▎        | 135/1000 [13:39<1:27:29,  6.07s/it][Succeeded / Failed / Skipped / Total] 14 / 121 / 0 / 135:  14%|█▎        | 135/1000 [13:39<1:27:29,  6.07s/it][Succeeded / Failed / Skipped / Total] 14 / 121 / 0 / 135:  14%|█▎        | 136/1000 [13:43<1:27:11,  6.05s/it]Gets the JWK set . --> [[[FAILED]]]

[[[[Adv]]]]: private Mono < JWKSet > getJWKSet ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > getJWKSet ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 130 ---------------------------------------------
Encodes the given value using UTF - 8 . --> Encodes a string . --> Socre: 1.0

[[[[Adv]]]]: private String utf8UrlEncode ( String [[value]] ) { try { return URLEncoder . encode ( [[value]] , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String utf8UrlEncode ( String [[amount]] ) { try { return URLEncoder . encode ( [[amount]] , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 131 ---------------------------------------------
Creates a new SecurityExpressionRoot . --> [[[FAILED]]]

[[[[Adv]]]]: protected MethodSecurityExpressionOperations createSecurityExpressionRoot ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot [[root]] = new MethodSecurityExpressionRoot ( authentication ) ; [[root]] . setThis ( invocation . getThis ( ) ) ; [[root]] . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; [[root]] . setTrustResolver ( getTrustResolver ( ) ) ; [[root]] . setRoleHierarchy ( getRoleHierarchy ( ) ) ; [[root]] . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return [[root]] ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations createSecurityExpressionRoot ( Authentication authentication , MethodInvocation invocation ) { MethodSecurityExpressionRoot [[bottom]] = new MethodSecurityExpressionRoot ( authentication ) ; [[bottom]] . setThis ( invocation . getThis ( ) ) ; [[bottom]] . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; [[bottom]] . setTrustResolver ( getTrustResolver ( ) ) ; [[bottom]] . setRoleHierarchy ( getRoleHierarchy ( ) ) ; [[bottom]] . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return [[bottom]] ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 132 ---------------------------------------------
Get the list of groups based on the authenticated user --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > getWebSphereGroupsBasedGrantedAuthorities ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > getWebSphereGroupsBasedGrantedAuthorities ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 133 ---------------------------------------------
Gets the pre - authenticated principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object [[principal]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object [[essential]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[essential]] ) ; } return [[essential]] ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 134 ---------------------------------------------
Determines if the request requires authentication . --> Does the required authentication? --> Socre: 1.0

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( [[request]] , response ) ; final boolean [[result]] = serviceTicketRequest || proxyReceptorRequest ( [[request]] ) || ( proxyTicketRequest ( serviceTicketRequest , [[request]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest [[necessary]] , final HttpServletResponse response ) { final boolean serviceTicketRequest = serviceTicketRequest ( [[necessary]] , response ) ; final boolean [[offspring]] = serviceTicketRequest || proxyReceptorRequest ( [[necessary]] ) || ( proxyTicketRequest ( serviceTicketRequest , [[necessary]] ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + [[offspring]] ) ; } return [[offspring]] ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 135 ---------------------------------------------
Load user by assertion . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails loadUserByAssertion ( final Assertion [[assertion]] ) { final CasAssertionAuthenticationToken [[token]] = new CasAssertionAuthenticationToken ( [[assertion]] , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( [[token]] ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails loadUserByAssertion ( final Assertion [[profession]] ) { final CasAssertionAuthenticationToken [[mercury]] = new CasAssertionAuthenticationToken ( [[profession]] , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( [[mercury]] ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 136 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 14 / 122 / 0 / 136:  14%|█▎        | 136/1000 [13:43<1:27:11,  6.05s/it][Succeeded / Failed / Skipped / Total] 14 / 122 / 0 / 136:  14%|█▎        | 137/1000 [13:50<1:27:13,  6.06s/it][Succeeded / Failed / Skipped / Total] 14 / 123 / 0 / 137:  14%|█▎        | 137/1000 [13:50<1:27:13,  6.06s/it][Succeeded / Failed / Skipped / Total] 14 / 123 / 0 / 137:  14%|█▍        | 138/1000 [13:53<1:26:43,  6.04s/it][Succeeded / Failed / Skipped / Total] 15 / 123 / 0 / 138:  14%|█▍        | 138/1000 [13:53<1:26:43,  6.04s/it][Succeeded / Failed / Skipped / Total] 15 / 123 / 0 / 138:  14%|█▍        | 139/1000 [14:23<1:29:08,  6.21s/it][Succeeded / Failed / Skipped / Total] 15 / 124 / 0 / 139:  14%|█▍        | 139/1000 [14:23<1:29:08,  6.21s/it][Succeeded / Failed / Skipped / Total] 15 / 124 / 0 / 139:  14%|█▍        | 140/1000 [14:25<1:28:39,  6.19s/it][Succeeded / Failed / Skipped / Total] 15 / 125 / 0 / 140:  14%|█▍        | 140/1000 [14:25<1:28:39,  6.19s/it][Succeeded / Failed / Skipped / Total] 15 / 125 / 0 / 140:  14%|█▍        | 141/1000 [14:26<1:27:57,  6.14s/it][Succeeded / Failed / Skipped / Total] 15 / 126 / 0 / 141:  14%|█▍        | 141/1000 [14:26<1:27:57,  6.14s/it][Succeeded / Failed / Skipped / Total] 15 / 126 / 0 / 141:  14%|█▍        | 142/1000 [14:27<1:27:24,  6.11s/it]Get a list of granted authorities for a list of attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[attributes]] ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String [[attribute]] : [[attributes]] ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( [[attribute]] ) ; if ( c != null ) { gaList . addAll ( c ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > getGrantedAuthorities ( Collection < String > [[properties]] ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String [[property]] : [[properties]] ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( [[property]] ) ; if ( c != null ) { gaList . addAll ( c ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 137 ---------------------------------------------
Concatenate multiple arrays . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] concatenate ( byte [ ] ... arrays ) { int [[length]] = 0 ; for ( byte [ ] [[array]] : arrays ) { [[length]] += [[array]] . length ; } byte [ ] newArray = new byte [ [[length]] ] ; int destPos = 0 ; for ( byte [ ] [[array]] : arrays ) { System . arraycopy ( [[array]] , 0 , newArray , destPos , [[array]] . length ) ; destPos += [[array]] . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] concatenate ( byte [ ] ... arrays ) { int [[course]] = 0 ; for ( byte [ ] [[cascade]] : arrays ) { [[course]] += [[cascade]] . length ; } byte [ ] newArray = new byte [ [[course]] ] ; int destPos = 0 ; for ( byte [ ] [[cascade]] : arrays ) { System . arraycopy ( [[cascade]] , 0 , newArray , destPos , [[cascade]] . length ) ; destPos += [[cascade]] . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 138 ---------------------------------------------
Returns a portion of a byte array . --> Utility method for subclasses --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] subArray ( byte [ ] [[array]] , int beginIndex , int endIndex ) { int [[length]] = endIndex - beginIndex ; byte [ ] subarray = new byte [ [[length]] ] ; System . arraycopy ( [[array]] , beginIndex , subarray , 0 , [[length]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] subArray ( byte [ ] [[disposition]] , int beginIndex , int endIndex ) { int [[stint]] = endIndex - beginIndex ; byte [ ] subarray = new byte [ [[stint]] ] ; System . arraycopy ( [[disposition]] , beginIndex , subarray , 0 , [[stint]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 139 ---------------------------------------------
Gets the granted authority collection . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < GrantedAuthority > getGrantedAuthorityCollection ( Object [[value]] ) { Collection < GrantedAuthority > [[result]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[result]] , [[value]] ) ; return [[result]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > getGrantedAuthorityCollection ( Object [[review]] ) { Collection < GrantedAuthority > [[outcome]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[outcome]] , [[review]] ) ; return [[outcome]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 140 ---------------------------------------------
Adds a collection of granted authorities to the result . --> [[[FAILED]]]

[[[[Adv]]]]: private void addGrantedAuthorityCollection ( Collection < GrantedAuthority > [[result]] , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[value]] instanceof Collection < ? > ) { addGrantedAuthorityCollection ( [[result]] , ( Collection < ? > ) [[value]] ) ; } else if ( [[value]] instanceof Object [ ] ) { addGrantedAuthorityCollection ( [[result]] , ( Object [ ] ) [[value]] ) ; } else if ( [[value]] instanceof String ) { addGrantedAuthorityCollection ( [[result]] , ( String ) [[value]] ) ; } else if ( [[value]] instanceof GrantedAuthority ) { [[result]] . add ( ( GrantedAuthority ) [[value]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[value]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void addGrantedAuthorityCollection ( Collection < GrantedAuthority > [[fruit]] , Object [[valuation]] ) { if ( [[valuation]] == null ) { return ; } if ( [[valuation]] instanceof Collection < ? > ) { addGrantedAuthorityCollection ( [[fruit]] , ( Collection < ? > ) [[valuation]] ) ; } else if ( [[valuation]] instanceof Object [ ] ) { addGrantedAuthorityCollection ( [[fruit]] , ( Object [ ] ) [[valuation]] ) ; } else if ( [[valuation]] instanceof String ) { addGrantedAuthorityCollection ( [[fruit]] , ( String ) [[valuation]] ) ; } else if ( [[valuation]] instanceof GrantedAuthority ) { [[fruit]] . add ( ( GrantedAuthority ) [[valuation]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[valuation]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 141 ---------------------------------------------
Gets a shared object . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < C > C getSharedObject ( Class < C > sharedType ) { return ( C ) this . sharedObjects . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < C > C getSharedObject ( Class < C > sharedType ) { return ( C ) this . sharedObjects . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 142 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 15 / 127 / 0 / 142:  14%|█▍        | 142/1000 [14:27<1:27:24,  6.11s/it][Succeeded / Failed / Skipped / Total] 15 / 127 / 0 / 142:  14%|█▍        | 143/1000 [14:30<1:26:56,  6.09s/it][Succeeded / Failed / Skipped / Total] 15 / 128 / 0 / 143:  14%|█▍        | 143/1000 [14:30<1:26:56,  6.09s/it][Succeeded / Failed / Skipped / Total] 15 / 128 / 0 / 143:  14%|█▍        | 144/1000 [14:31<1:26:21,  6.05s/it][Succeeded / Failed / Skipped / Total] 15 / 129 / 0 / 144:  14%|█▍        | 144/1000 [14:31<1:26:21,  6.05s/it][Succeeded / Failed / Skipped / Total] 15 / 129 / 0 / 144:  14%|█▍        | 145/1000 [14:33<1:25:47,  6.02s/it][Succeeded / Failed / Skipped / Total] 16 / 129 / 0 / 145:  14%|█▍        | 145/1000 [14:33<1:25:47,  6.02s/it][Succeeded / Failed / Skipped / Total] 16 / 130 / 0 / 146:  15%|█▍        | 146/1000 [14:33<1:25:07,  5.98s/it][Succeeded / Failed / Skipped / Total] 16 / 130 / 0 / 146:  15%|█▍        | 147/1000 [14:43<1:25:27,  6.01s/it][Succeeded / Failed / Skipped / Total] 16 / 131 / 0 / 147:  15%|█▍        | 147/1000 [14:43<1:25:27,  6.01s/it][Succeeded / Failed / Skipped / Total] 16 / 131 / 0 / 147:  15%|█▍        | 148/1000 [14:45<1:24:59,  5.98s/it]Build redirect URL for given request . --> [[[FAILED]]]

[[[[Adv]]]]: protected String buildHttpsRedirectUrlForRequest ( HttpServletRequest [[request]] ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( [[request]] ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( [[request]] . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( [[request]] . getContextPath ( ) ) ; urlBuilder . setServletPath ( [[request]] . getServletPath ( ) ) ; urlBuilder . setPathInfo ( [[request]] . getPathInfo ( ) ) ; urlBuilder . setQuery ( [[request]] . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String buildHttpsRedirectUrlForRequest ( HttpServletRequest [[petition]] ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( [[petition]] ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder urlBuilder = new RedirectUrlBuilder ( ) ; urlBuilder . setScheme ( "https" ) ; urlBuilder . setServerName ( [[petition]] . getServerName ( ) ) ; urlBuilder . setPort ( httpsPort . intValue ( ) ) ; urlBuilder . setContextPath ( [[petition]] . getContextPath ( ) ) ; urlBuilder . setServletPath ( [[petition]] . getServletPath ( ) ) ; urlBuilder . setPathInfo ( [[petition]] . getPathInfo ( ) ) ; urlBuilder . setQuery ( [[petition]] . getQueryString ( ) ) ; return urlBuilder . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 143 ---------------------------------------------
Returns the pre - authenticated principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object [[principal]] = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object [[chancellor]] = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[chancellor]] ) ; } return [[chancellor]] ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 144 ---------------------------------------------
Returns the role s role . --> [[[FAILED]]]

[[[[Adv]]]]: private static String hasRole ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String hasRole ( String [[compensation]] ) { Assert . isTrue ( ! [[compensation]] . startsWith ( "ROLE_" ) , ( ) -> [[compensation]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[compensation]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 145 ---------------------------------------------
Inspect the interceptor . --> Perform the interceptor --> Socre: 1.0

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken [[token]] = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( [[token]] ) ; } return super . afterInvocation ( [[token]] , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken [[brand]] = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( [[brand]] ) ; } return super . afterInvocation ( [[brand]] , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 146 ---------------------------------------------
Converts a list of roles to a list of roles --> [[[FAILED]]]

[[[[Adv]]]]: private static String [ ] hasAnyRole ( String ... [[roles]] ) { for ( int i = 0 ; i < [[roles]] . length ; i ++ ) { [[roles]] [ i ] = "ROLE_" + [[roles]] [ i ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] hasAnyRole ( String ... [[functions]] ) { for ( int i = 0 ; i < [[functions]] . length ; i ++ ) { [[functions]] [ i ] = "ROLE_" + [[functions]] [ i ] ; } return [[functions]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 147 ---------------------------------------------
On login success . --> [[[FAILED]]]

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest [[request]] , HttpServletResponse [[response]] , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , [[request]] , [[response]] ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest [[appeal]] , HttpServletResponse [[action]] , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , [[appeal]] , [[action]] ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 148 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 16 / 132 / 0 / 148:  15%|█▍        | 148/1000 [14:45<1:24:59,  5.98s/it][Succeeded / Failed / Skipped / Total] 16 / 132 / 0 / 148:  15%|█▍        | 149/1000 [14:47<1:24:28,  5.96s/it][Succeeded / Failed / Skipped / Total] 16 / 133 / 0 / 149:  15%|█▍        | 149/1000 [14:47<1:24:28,  5.96s/it][Succeeded / Failed / Skipped / Total] 16 / 133 / 0 / 149:  15%|█▌        | 150/1000 [14:47<1:23:50,  5.92s/it][Succeeded / Failed / Skipped / Total] 16 / 134 / 0 / 150:  15%|█▌        | 150/1000 [14:47<1:23:50,  5.92s/it][Succeeded / Failed / Skipped / Total] 16 / 134 / 0 / 150:  15%|█▌        | 151/1000 [14:47<1:23:12,  5.88s/it][Succeeded / Failed / Skipped / Total] 16 / 135 / 0 / 151:  15%|█▌        | 151/1000 [14:47<1:23:12,  5.88s/it][Succeeded / Failed / Skipped / Total] 16 / 135 / 0 / 151:  15%|█▌        | 152/1000 [14:48<1:22:35,  5.84s/it][Succeeded / Failed / Skipped / Total] 16 / 136 / 0 / 152:  15%|█▌        | 152/1000 [14:48<1:22:35,  5.84s/it][Succeeded / Failed / Skipped / Total] 16 / 136 / 0 / 152:  15%|█▌        | 153/1000 [14:51<1:22:17,  5.83s/it][Succeeded / Failed / Skipped / Total] 16 / 137 / 0 / 153:  15%|█▌        | 153/1000 [14:51<1:22:17,  5.83s/it][Succeeded / Failed / Skipped / Total] 16 / 137 / 0 / 153:  15%|█▌        | 154/1000 [14:53<1:21:46,  5.80s/it][Succeeded / Failed / Skipped / Total] 16 / 138 / 0 / 154:  15%|█▌        | 154/1000 [14:53<1:21:46,  5.80s/it][Succeeded / Failed / Skipped / Total] 16 / 138 / 0 / 154:  16%|█▌        | 155/1000 [14:53<1:21:11,  5.76s/it]Attempt to switch to a user . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication attemptSwitchUser ( HttpServletRequest [[request]] ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = [[request]] . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication attemptSwitchUser ( HttpServletRequest [[term]] ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = [[term]] . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 149 ---------------------------------------------
Attempt to exit the login user . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication attemptExitUser ( HttpServletRequest [[request]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication attemptExitUser ( HttpServletRequest [[appeal]] ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 150 ---------------------------------------------
Sets the exit user url . --> [[[FAILED]]]

[[[[Adv]]]]: public void setExitUserUrl ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void setExitUserUrl ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 151 ---------------------------------------------
Display public index --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView displayPublicIndex ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView displayPublicIndex ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 152 ---------------------------------------------
Build the spring security filter chain . --> [[[FAILED]]]

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter springSecurityFilterChain ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter springSecurityFilterChain ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 153 ---------------------------------------------
Decodes the given token . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Jwt decode ( String [[token]] ) throws JwtException { JWT jwt = parse ( [[token]] ) ; if ( jwt instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[token]] , jwt ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String [[mercury]] ) throws JwtException { JWT jwt = parse ( [[mercury]] ) ; if ( jwt instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[mercury]] , jwt ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + jwt . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 154 ---------------------------------------------
Check access using the access expression --> [[[FAILED]]]

[[[[Adv]]]]: public boolean authorizeUsingAccessExpression ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > [[handler]] = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = [[handler]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( [[handler]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean authorizeUsingAccessExpression ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return "False" != "False" ; } SecurityExpressionHandler < FilterInvocation > [[superintendent]] = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = [[superintendent]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( [[superintendent]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 155 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 16 / 139 / 0 / 155:  16%|█▌        | 155/1000 [14:53<1:21:11,  5.76s/it][Succeeded / Failed / Skipped / Total] 16 / 139 / 0 / 155:  16%|█▌        | 156/1000 [14:53<1:20:36,  5.73s/it][Succeeded / Failed / Skipped / Total] 16 / 140 / 0 / 156:  16%|█▌        | 156/1000 [14:53<1:20:36,  5.73s/it][Succeeded / Failed / Skipped / Total] 16 / 140 / 0 / 156:  16%|█▌        | 157/1000 [14:55<1:20:09,  5.71s/it][Succeeded / Failed / Skipped / Total] 16 / 141 / 0 / 157:  16%|█▌        | 157/1000 [14:55<1:20:09,  5.71s/it][Succeeded / Failed / Skipped / Total] 16 / 141 / 0 / 157:  16%|█▌        | 158/1000 [15:05<1:20:23,  5.73s/it][Succeeded / Failed / Skipped / Total] 16 / 142 / 0 / 158:  16%|█▌        | 158/1000 [15:05<1:20:23,  5.73s/it][Succeeded / Failed / Skipped / Total] 16 / 142 / 0 / 158:  16%|█▌        | 159/1000 [15:39<1:22:49,  5.91s/it][Succeeded / Failed / Skipped / Total] 16 / 143 / 0 / 159:  16%|█▌        | 159/1000 [15:39<1:22:49,  5.91s/it][Succeeded / Failed / Skipped / Total] 16 / 143 / 0 / 159:  16%|█▌        | 160/1000 [16:36<1:27:09,  6.23s/it][Succeeded / Failed / Skipped / Total] 16 / 144 / 0 / 160:  16%|█▌        | 160/1000 [16:36<1:27:09,  6.23s/it][Succeeded / Failed / Skipped / Total] 16 / 144 / 0 / 160:  16%|█▌        | 161/1000 [16:56<1:28:15,  6.31s/it]Allow the access to access the URL using the URL . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean authorizeUsingUrlCheck ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean authorizeUsingUrlCheck ( ) throws IOException { String contextPath = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( contextPath , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 156 ---------------------------------------------
Converts the given JWT to granted authorities . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > convert ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > convert ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 157 ---------------------------------------------
Generates a new Csr token . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CsrfToken generateToken ( HttpServletRequest [[request]] ) { return wrap ( [[request]] , this . delegate . generateToken ( [[request]] ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken generateToken ( HttpServletRequest [[requirement]] ) { return wrap ( [[requirement]] , this . delegate . generateToken ( [[requirement]] ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 158 ---------------------------------------------
Display admin page . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAdminPage ( @ RequestParam ( "contactId" ) int contactId ) { Contact [[contact]] = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( [[contact]] ) ) ; Map < String , Object > [[model]] = new HashMap <> ( ) ; [[model]] . put ( "contact" , [[contact]] ) ; [[model]] . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , [[model]] ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAdminPage ( @ RequestParam ( "contactId" ) int contactId ) { Contact [[attendant]] = contactManager . getById ( Long . valueOf ( contactId ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( [[attendant]] ) ) ; Map < String , Object > [[ferment]] = new HashMap <> ( ) ; [[ferment]] . put ( "contact" , [[attendant]] ) ; [[ferment]] . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , [[ferment]] ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
--------------------------------------------- Result 159 ---------------------------------------------
Display the HTML page for a contact . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAddPermissionPageForContact ( @ RequestParam ( "contactId" ) long contactId ) { Contact [[contact]] = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( [[contact]] ) ; Map < String , Object > [[model]] = new HashMap <> ( ) ; [[model]] . put ( "addPermission" , addPermission ) ; [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[model]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView displayAddPermissionPageForContact ( @ RequestParam ( "contactId" ) long contactId ) { Contact [[companion]] = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( [[companion]] ) ; Map < String , Object > [[illustration]] = new HashMap <> ( ) ; [[illustration]] . put ( "addPermission" , addPermission ) ; [[illustration]] . put ( "recipients" , listRecipients ( ) ) ; [[illustration]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[illustration]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 160 ---------------------------------------------
Parses auto login cookie token . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails processAutoLoginCookie ( String [ ] cookieTokens , HttpServletRequest [[request]] , HttpServletResponse [[response]] ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken [[token]] = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( [[token]] == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails processAutoLoginCookie ( String [ ] cookieTokens , HttpServletRequest [[requirement]] , HttpServletResponse [[backlash]] ) { if ( cookieTokens . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( cookieTokens ) + "'" ) ; } final String presentedSeries = cookieTokens [ 0 ] ; final String presentedToken = cookieTokens [ 1 ] ; PersistentRememberMeToken [[flag]] = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( [[flag]] == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 161 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 16 / 145 / 0 / 161:  16%|█▌        | 161/1000 [16:56<1:28:15,  6.31s/it][Succeeded / Failed / Skipped / Total] 16 / 145 / 0 / 161:  16%|█▌        | 162/1000 [16:59<1:27:55,  6.30s/it][Succeeded / Failed / Skipped / Total] 16 / 146 / 0 / 162:  16%|█▌        | 162/1000 [16:59<1:27:55,  6.30s/it][Succeeded / Failed / Skipped / Total] 16 / 146 / 0 / 162:  16%|█▋        | 163/1000 [17:20<1:29:03,  6.38s/it][Succeeded / Failed / Skipped / Total] 16 / 147 / 0 / 163:  16%|█▋        | 163/1000 [17:20<1:29:03,  6.38s/it][Succeeded / Failed / Skipped / Total] 16 / 147 / 0 / 163:  16%|█▋        | 164/1000 [17:41<1:30:08,  6.47s/it][Succeeded / Failed / Skipped / Total] 16 / 148 / 0 / 164:  16%|█▋        | 164/1000 [17:41<1:30:08,  6.47s/it][Succeeded / Failed / Skipped / Total] 16 / 148 / 0 / 164:  16%|█▋        | 165/1000 [17:49<1:30:12,  6.48s/it][Succeeded / Failed / Skipped / Total] 16 / 149 / 0 / 165:  16%|█▋        | 165/1000 [17:49<1:30:12,  6.48s/it][Succeeded / Failed / Skipped / Total] 16 / 149 / 0 / 165:  17%|█▋        | 166/1000 [18:02<1:30:40,  6.52s/it]Preprocess the given map of attributes into a map of granted authorities . --> [[[FAILED]]]

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > [[result]] = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[result]] . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > [[end]] = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[end]] . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return [[end]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 162 ---------------------------------------------
Gets the role prefix . --> [[[FAILED]]]

[[[[Adv]]]]: private static String getRoleWithDefaultPrefix ( String defaultRolePrefix , String [[role]] ) { if ( [[role]] == null ) { return [[role]] ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return [[role]] ; } if ( [[role]] . startsWith ( defaultRolePrefix ) ) { return [[role]] ; } return defaultRolePrefix + [[role]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String getRoleWithDefaultPrefix ( String defaultRolePrefix , String [[character]] ) { if ( [[character]] == null ) { return [[character]] ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return [[character]] ; } if ( [[character]] . startsWith ( defaultRolePrefix ) ) { return [[character]] ; } return defaultRolePrefix + [[character]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 163 ---------------------------------------------
Creates a UserDetailsResourceFactory from a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean fromString ( String [[users]] ) { InMemoryResource [[resource]] = new InMemoryResource ( [[users]] ) ; return fromResource ( [[resource]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean fromString ( String [[subscribers]] ) { InMemoryResource [[buna]] = new InMemoryResource ( [[subscribers]] ) ; return fromResource ( [[buna]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 164 ---------------------------------------------
Get the values for a given attribute . --> [[[FAILED]]]

[[[[Adv]]]]: public List < String > getAttributeValues ( String [[name]] ) { List < String > [[result]] = null ; if ( attributes != null ) { [[result]] = attributes . get ( [[name]] ) ; } if ( [[result]] == null ) { [[result]] = Collections . emptyList ( ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > getAttributeValues ( String [[lucy]] ) { List < String > [[offspring]] = null ; if ( attributes != null ) { [[offspring]] = attributes . get ( [[lucy]] ) ; } if ( [[offspring]] == null ) { [[offspring]] = Collections . emptyList ( ) ; } return [[offspring]] ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 165 ---------------------------------------------
Handles adding permission . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String addPermission ( AddPermission addPermission , BindingResult [[result]] , ModelMap [[model]] ) { addPermissionValidator . validate ( addPermission , [[result]] ) ; if ( [[result]] . hasErrors ( ) ) { [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( addPermission . getRecipient ( ) ) ; Permission [[permission]] = permissionFactory . buildFromMask ( addPermission . getPermission ( ) ) ; try { contactManager . addPermission ( addPermission . getContact ( ) , sid , [[permission]] ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; [[result]] . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String addPermission ( AddPermission addPermission , BindingResult [[end]] , ModelMap [[preparation]] ) { addPermissionValidator . validate ( addPermission , [[end]] ) ; if ( [[end]] . hasErrors ( ) ) { [[preparation]] . put ( "recipients" , listRecipients ( ) ) ; [[preparation]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( addPermission . getRecipient ( ) ) ; Permission [[approval]] = permissionFactory . buildFromMask ( addPermission . getPermission ( ) ) ; try { contactManager . addPermission ( addPermission . getContact ( ) , sid , [[approval]] ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; [[end]] . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; [[preparation]] . put ( "recipients" , listRecipients ( ) ) ; [[preparation]] . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 166 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 17 / 149 / 0 / 166:  17%|█▋        | 166/1000 [18:02<1:30:40,  6.52s/it][Succeeded / Failed / Skipped / Total] 17 / 149 / 0 / 166:  17%|█▋        | 167/1000 [18:03<1:30:03,  6.49s/it][Succeeded / Failed / Skipped / Total] 17 / 150 / 0 / 167:  17%|█▋        | 167/1000 [18:03<1:30:03,  6.49s/it][Succeeded / Failed / Skipped / Total] 17 / 150 / 0 / 167:  17%|█▋        | 168/1000 [18:03<1:29:27,  6.45s/it][Succeeded / Failed / Skipped / Total] 17 / 151 / 0 / 168:  17%|█▋        | 168/1000 [18:03<1:29:27,  6.45s/it][Succeeded / Failed / Skipped / Total] 17 / 151 / 0 / 168:  17%|█▋        | 169/1000 [18:05<1:28:59,  6.43s/it][Succeeded / Failed / Skipped / Total] 18 / 151 / 0 / 169:  17%|█▋        | 169/1000 [18:05<1:28:59,  6.43s/it][Succeeded / Failed / Skipped / Total] 18 / 151 / 0 / 169:  17%|█▋        | 170/1000 [18:06<1:28:23,  6.39s/it][Succeeded / Failed / Skipped / Total] 18 / 152 / 0 / 170:  17%|█▋        | 170/1000 [18:06<1:28:23,  6.39s/it][Succeeded / Failed / Skipped / Total] 18 / 152 / 0 / 170:  17%|█▋        | 171/1000 [18:09<1:28:01,  6.37s/it][Succeeded / Failed / Skipped / Total] 18 / 153 / 0 / 171:  17%|█▋        | 171/1000 [18:09<1:28:01,  6.37s/it][Succeeded / Failed / Skipped / Total] 18 / 153 / 0 / 171:  17%|█▋        | 172/1000 [18:09<1:27:25,  6.34s/it][Succeeded / Failed / Skipped / Total] 18 / 154 / 0 / 172:  17%|█▋        | 172/1000 [18:09<1:27:25,  6.34s/it]Renders a request . --> Handles delete request . --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView deletePermission ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int [[mask]] ) { Contact [[contact]] = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission [[permission]] = permissionFactory . buildFromMask ( [[mask]] ) ; contactManager . deletePermission ( [[contact]] , sidObject , [[permission]] ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , [[contact]] ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , [[permission]] ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView deletePermission ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int [[ball]] ) { Contact [[periscope]] = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission [[favor]] = permissionFactory . buildFromMask ( [[ball]] ) ; contactManager . deletePermission ( [[periscope]] , sidObject , [[favor]] ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , [[periscope]] ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , [[favor]] ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 167 ---------------------------------------------
Decode bytes . --> [[[FAILED]]]

[[[[Adv]]]]: public static String decode ( byte [ ] bytes ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( bytes ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String decode ( byte [ ] bytes ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( bytes ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 168 ---------------------------------------------
Looks up parameter names . --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = "False" != "False" ; for ( int i = 0 ; i < parameterCount ; i ++ ) { Annotation [ ] annotations = parameterAnnotations [ i ] ; String parameterName = findParameterName ( annotations ) ; if ( parameterName != null ) { found = "True" == "True" ; paramNames [ i ] = parameterName ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 169 ---------------------------------------------
Encodes a string into a byte array . --> Encode a strand --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence [[string]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[string]] ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence [[strand]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[strand]] ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 170 ---------------------------------------------
Returns the first attribute of the specified name . --> [[[FAILED]]]

[[[[Adv]]]]: public String getFirstAttributeValue ( String [[name]] ) { List < String > [[result]] = getAttributeValues ( [[name]] ) ; if ( [[result]] . isEmpty ( ) ) { return null ; } else { return [[result]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String getFirstAttributeValue ( String [[edward]] ) { List < String > [[fruit]] = getAttributeValues ( [[edward]] ) ; if ( [[fruit]] . isEmpty ( ) ) { return null ; } else { return [[fruit]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 171 ---------------------------------------------
Adds a secure method . --> [[[FAILED]]]

[[[[Adv]]]]: private void addSecureMethod ( RegisteredMethod [[method]] , List < ConfigAttribute > attr ) { Assert . notNull ( [[method]] , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[method]] + "] with attributes [" + attr + "]" ) ; } this . methodMap . put ( [[method]] , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void addSecureMethod ( RegisteredMethod [[device]] , List < ConfigAttribute > attr ) { Assert . notNull ( [[device]] , "RegisteredMethod required" ) ; Assert . notNull ( attr , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[device]] + "] with attributes [" + attr + "]" ) ; } this . methodMap . put ( [[device]] , attr ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 172 ---------------------------------------------
Get all config attributes . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > getAllConfigAttributes ( ) { Set < ConfigAttribute > allAttributes = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { allAttributes . addAll ( attributeList ) ; } return allAttributes ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > getAllConfigAttributes ( ) { Set < ConfigAttribute > allAttributes = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { allAttributes . addAll ( attributeList ) ; } return allAttributes ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 173 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 18 / 155 / 0 / 173:  17%|█▋        | 173/1000 [18:09<1:26:49,  6.30s/it][Succeeded / Failed / Skipped / Total] 18 / 155 / 0 / 173:  17%|█▋        | 174/1000 [18:10<1:26:14,  6.26s/it][Succeeded / Failed / Skipped / Total] 18 / 156 / 0 / 174:  17%|█▋        | 174/1000 [18:10<1:26:14,  6.26s/it][Succeeded / Failed / Skipped / Total] 18 / 157 / 0 / 175:  18%|█▊        | 175/1000 [18:10<1:25:39,  6.23s/it][Succeeded / Failed / Skipped / Total] 18 / 157 / 0 / 175:  18%|█▊        | 176/1000 [18:11<1:25:10,  6.20s/it][Succeeded / Failed / Skipped / Total] 19 / 157 / 0 / 176:  18%|█▊        | 176/1000 [18:11<1:25:10,  6.20s/it][Succeeded / Failed / Skipped / Total] 19 / 158 / 0 / 177:  18%|█▊        | 177/1000 [18:12<1:24:39,  6.17s/it][Succeeded / Failed / Skipped / Total] 19 / 158 / 0 / 177:  18%|█▊        | 178/1000 [18:12<1:24:06,  6.14s/it][Succeeded / Failed / Skipped / Total] 19 / 159 / 0 / 178:  18%|█▊        | 178/1000 [18:12<1:24:06,  6.14s/it][Succeeded / Failed / Skipped / Total] 19 / 160 / 0 / 179:  18%|█▊        | 179/1000 [18:16<1:23:47,  6.12s/it][Succeeded / Failed / Skipped / Total] 19 / 160 / 0 / 179:  18%|█▊        | 180/1000 [18:16<1:23:14,  6.09s/it][Succeeded / Failed / Skipped / Total] 19 / 161 / 0 / 180:  18%|█▊        | 180/1000 [18:16<1:23:14,  6.09s/it]Finds all attributes that match the specified method . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > findAttributes ( Method [[method]] , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[method]] , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > findAttributes ( Method [[key]] , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[key]] , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 174 ---------------------------------------------
Determine if the mapped name matches the mapped name --> [[[FAILED]]]

[[[[Adv]]]]: private boolean isMatch ( String methodName , String mappedName ) { return ( mappedName . endsWith ( "*" ) && methodName . startsWith ( mappedName . substring ( 0 , mappedName . length ( ) - 1 ) ) ) || ( mappedName . startsWith ( "*" ) && methodName . endsWith ( mappedName . substring ( 1 , mappedName . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean isMatch ( String methodName , String mappedName ) { return ( mappedName . endsWith ( "*" ) && methodName . startsWith ( mappedName . substring ( 0 , mappedName . length ( ) - 1 ) ) ) || ( mappedName . startsWith ( "*" ) && methodName . endsWith ( mappedName . substring ( 1 , mappedName . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 175 ---------------------------------------------
Specifies that any request has a specific request . --> [[[FAILED]]]

[[[[Adv]]]]: public C anyRequest ( ) { Assert . state ( ! this . anyRequestConfigured , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . anyRequestConfigured = "True" == "True" ; return configurer ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C anyRequest ( ) { Assert . state ( ! this . anyRequestConfigured , "Can't configure anyRequest after itself" ) ; C configurer = requestMatchers ( ANY_REQUEST ) ; this . anyRequestConfigured = "True" == "True" ; return configurer ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 176 ---------------------------------------------
Get a random contact . --> Get random contact --> Socre: 1.0

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > [[contacts]] = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( [[contacts]] . size ( ) ) ; return [[contacts]] . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "True" == "True" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > [[companions]] = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( [[companions]] . size ( ) ) ; return [[companions]] . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 177 ---------------------------------------------
Handle bind exceptions . --> [[[FAILED]]]

[[[[Adv]]]]: protected void handleBindException ( String userDn , String username , Throwable [[cause]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + [[cause]] ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void handleBindException ( String userDn , String username , Throwable [[labour]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + userDn + ": " + [[labour]] ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 178 ---------------------------------------------
Returns the field of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public static Field getField ( Class < ? > clazz , String fieldName ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( fieldName , "Field name required" ) ; try { return clazz . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field getField ( Class < ? > clazz , String fieldName ) throws IllegalStateException { Assert . notNull ( clazz , "Class required" ) ; Assert . hasText ( fieldName , "Field name required" ) ; try { return clazz . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 179 ---------------------------------------------
Remove authentication attributes from the session . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void clearAuthenticationAttributes ( HttpServletRequest [[request]] ) { HttpSession [[session]] = [[request]] . getSession ( "False" != "False" ) ; if ( [[session]] == null ) { return ; } [[session]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void clearAuthenticationAttributes ( HttpServletRequest [[appeal]] ) { HttpSession [[convention]] = [[appeal]] . getSession ( "False" != "False" ) ; if ( [[convention]] == null ) { return ; } [[convention]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 180 ---------------------------------------------
Creates the redirect url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String createRedirectUrl ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String createRedirectUrl ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 181 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 19 / 162 / 0 / 181:  18%|█▊        | 181/1000 [18:16<1:22:42,  6.06s/it][Succeeded / Failed / Skipped / Total] 19 / 162 / 0 / 181:  18%|█▊        | 182/1000 [18:17<1:22:14,  6.03s/it][Succeeded / Failed / Skipped / Total] 19 / 163 / 0 / 182:  18%|█▊        | 182/1000 [18:17<1:22:14,  6.03s/it][Succeeded / Failed / Skipped / Total] 19 / 164 / 0 / 183:  18%|█▊        | 183/1000 [18:18<1:21:43,  6.00s/it][Succeeded / Failed / Skipped / Total] 19 / 164 / 0 / 183:  18%|█▊        | 184/1000 [18:18<1:21:12,  5.97s/it][Succeeded / Failed / Skipped / Total] 19 / 165 / 0 / 184:  18%|█▊        | 184/1000 [18:18<1:21:12,  5.97s/it][Succeeded / Failed / Skipped / Total] 19 / 166 / 0 / 185:  18%|█▊        | 185/1000 [18:22<1:20:56,  5.96s/it][Succeeded / Failed / Skipped / Total] 19 / 166 / 0 / 185:  19%|█▊        | 186/1000 [18:32<1:21:09,  5.98s/it][Succeeded / Failed / Skipped / Total] 19 / 167 / 0 / 186:  19%|█▊        | 186/1000 [18:32<1:21:09,  5.98s/it][Succeeded / Failed / Skipped / Total] 19 / 167 / 0 / 186:  19%|█▊        | 187/1000 [18:48<1:21:47,  6.04s/it]Extracts the prefix . --> [[[FAILED]]]

[[[[Adv]]]]: private String extractPrefix ( String encPass ) { if ( ! encPass . startsWith ( "{" ) ) { return null ; } int secondBrace = encPass . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return encPass . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String extractPrefix ( String encPass ) { if ( ! encPass . startsWith ( "{" ) ) { return null ; } int secondBrace = encPass . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return encPass . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 182 ---------------------------------------------
Create the service url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String createServiceUrl ( final HttpServletRequest [[request]] , final HttpServletResponse [[response]] ) { return CommonUtils . constructServiceUrl ( null , [[response]] , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String createServiceUrl ( final HttpServletRequest [[appeal]] , final HttpServletResponse [[reaction]] ) { return CommonUtils . constructServiceUrl ( null , [[reaction]] , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 183 ---------------------------------------------
Check the filters stack . --> [[[FAILED]]]

[[[[Adv]]]]: private void checkFilterStack ( List < Filter > [[filters]] ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , [[filters]] ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , [[filters]] ) ; checkForDuplicates ( SessionManagementFilter . class , [[filters]] ) ; checkForDuplicates ( BasicAuthenticationFilter . class , [[filters]] ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , [[filters]] ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , [[filters]] ) ; checkForDuplicates ( ExceptionTranslationFilter . class , [[filters]] ) ; checkForDuplicates ( FilterSecurityInterceptor . class , [[filters]] ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void checkFilterStack ( List < Filter > [[strains]] ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , [[strains]] ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , [[strains]] ) ; checkForDuplicates ( SessionManagementFilter . class , [[strains]] ) ; checkForDuplicates ( BasicAuthenticationFilter . class , [[strains]] ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , [[strains]] ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , [[strains]] ) ; checkForDuplicates ( ExceptionTranslationFilter . class , [[strains]] ) ; checkForDuplicates ( FilterSecurityInterceptor . class , [[strains]] ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 184 ---------------------------------------------
Gets the registered types . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] getRegisteredTypes ( ) { Set < Class < ? extends Throwable > > typeList = this . extractorMap . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] getRegisteredTypes ( ) { Set < Class < ? extends Throwable > > typeList = this . extractorMap . keySet ( ) ; return typeList . toArray ( new Class [ typeList . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 185 ---------------------------------------------
Retrieves the cause of the given exception . --> [[[FAILED]]]

[[[[Adv]]]]: private Throwable extractCause ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > [[entry]] : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = [[entry]] . getKey ( ) ; if ( throwableType . isInstance ( throwable ) ) { ThrowableCauseExtractor extractor = [[entry]] . getValue ( ) ; return extractor . extractCause ( throwable ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable extractCause ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > [[doorway]] : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = [[doorway]] . getKey ( ) ; if ( throwableType . isInstance ( throwable ) ) { ThrowableCauseExtractor extractor = [[doorway]] . getValue ( ) ; return extractor . extractCause ( throwable ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 186 ---------------------------------------------
Ends the authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public void commence ( HttpServletRequest [[request]] , HttpServletResponse [[response]] , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } [[response]] . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void commence ( HttpServletRequest [[necessary]] , HttpServletResponse [[backlash]] , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } [[backlash]] . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 187 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 19 / 168 / 0 / 187:  19%|█▊        | 187/1000 [18:48<1:21:47,  6.04s/it][Succeeded / Failed / Skipped / Total] 19 / 168 / 0 / 187:  19%|█▉        | 188/1000 [18:54<1:21:41,  6.04s/it][Succeeded / Failed / Skipped / Total] 20 / 168 / 0 / 188:  19%|█▉        | 188/1000 [18:54<1:21:41,  6.04s/it][Succeeded / Failed / Skipped / Total] 20 / 168 / 0 / 188:  19%|█▉        | 189/1000 [18:55<1:21:10,  6.01s/it][Succeeded / Failed / Skipped / Total] 20 / 169 / 0 / 189:  19%|█▉        | 189/1000 [18:55<1:21:10,  6.01s/it][Succeeded / Failed / Skipped / Total] 20 / 169 / 0 / 189:  19%|█▉        | 190/1000 [18:55<1:20:41,  5.98s/it][Succeeded / Failed / Skipped / Total] 20 / 170 / 0 / 190:  19%|█▉        | 190/1000 [18:55<1:20:41,  5.98s/it][Succeeded / Failed / Skipped / Total] 20 / 170 / 0 / 190:  19%|█▉        | 191/1000 [18:56<1:20:11,  5.95s/it][Succeeded / Failed / Skipped / Total] 20 / 171 / 0 / 191:  19%|█▉        | 191/1000 [18:56<1:20:11,  5.95s/it][Succeeded / Failed / Skipped / Total] 20 / 171 / 0 / 191:  19%|█▉        | 192/1000 [18:56<1:19:42,  5.92s/it][Succeeded / Failed / Skipped / Total] 20 / 172 / 0 / 192:  19%|█▉        | 192/1000 [18:56<1:19:42,  5.92s/it][Succeeded / Failed / Skipped / Total] 20 / 172 / 0 / 192:  19%|█▉        | 193/1000 [19:16<1:20:36,  5.99s/it]Registers access manager bean . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String registerAccessManager ( ParserContext [[pc]] , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList [[voters]] = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { [[voters]] . add ( expressionVoter ) ; } [[voters]] . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; [[voters]] . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { [[voters]] . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( [[voters]] ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String [[id]] = [[pc]] . getReaderContext ( ) . generateBeanName ( accessManager ) ; [[pc]] . registerBeanComponent ( new BeanComponentDefinition ( accessManager , [[id]] ) ) ; return [[id]] ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String registerAccessManager ( ParserContext [[proportionality]] , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList [[pickers]] = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { [[pickers]] . add ( expressionVoter ) ; } [[pickers]] . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; [[pickers]] . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { [[pickers]] . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( [[pickers]] ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String [[brace]] = [[proportionality]] . getReaderContext ( ) . generateBeanName ( accessManager ) ; [[proportionality]] . registerBeanComponent ( new BeanComponentDefinition ( accessManager , [[brace]] ) ) ; return [[brace]] ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 188 ---------------------------------------------
Compares two bytes . --> Compare two byte arrays --> Socre: 1.0

[[[[Adv]]]]: private boolean [[matches]] ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean [[accommodations]] ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return "False" != "False" ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 189 ---------------------------------------------
Sets the default failure url . --> [[[FAILED]]]

[[[[Adv]]]]: public void setDefaultFailureUrl ( String defaultFailureUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( defaultFailureUrl ) , ( ) -> "'" + defaultFailureUrl + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = defaultFailureUrl ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void setDefaultFailureUrl ( String defaultFailureUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( defaultFailureUrl ) , ( ) -> "'" + defaultFailureUrl + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = defaultFailureUrl ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 190 ---------------------------------------------
Resolve hidden inputs for the request . --> [[[FAILED]]]

[[[[Adv]]]]: public void setResolveHiddenInputs ( Function < HttpServletRequest , Map < String , String > > resolveHiddenInputs ) { Assert . notNull ( resolveHiddenInputs , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = resolveHiddenInputs ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void setResolveHiddenInputs ( Function < HttpServletRequest , Map < String , String > > resolveHiddenInputs ) { Assert . notNull ( resolveHiddenInputs , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = resolveHiddenInputs ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 191 ---------------------------------------------
Build the request URL . --> [[[FAILED]]]

[[[[Adv]]]]: private static String buildRequestUrl ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String buildRequestUrl ( String servletPath , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( servletPath != null ) { url . append ( servletPath ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 192 ---------------------------------------------
Checks if is an absolute URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean isAbsoluteUrl ( String url ) { if ( url == null ) { return "False" != "False" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean isAbsoluteUrl ( String url ) { if ( url == null ) { return "False" != "False" ; } final Pattern ABSOLUTE_URL = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return ABSOLUTE_URL . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 193 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 20 / 173 / 0 / 193:  19%|█▉        | 193/1000 [19:16<1:20:36,  5.99s/it][Succeeded / Failed / Skipped / Total] 20 / 173 / 0 / 193:  19%|█▉        | 194/1000 [19:17<1:20:10,  5.97s/it][Succeeded / Failed / Skipped / Total] 21 / 173 / 0 / 194:  19%|█▉        | 194/1000 [19:17<1:20:10,  5.97s/it][Succeeded / Failed / Skipped / Total] 21 / 173 / 0 / 194:  20%|█▉        | 195/1000 [19:23<1:20:04,  5.97s/it][Succeeded / Failed / Skipped / Total] 21 / 174 / 0 / 195:  20%|█▉        | 195/1000 [19:23<1:20:04,  5.97s/it][Succeeded / Failed / Skipped / Total] 21 / 174 / 0 / 195:  20%|█▉        | 196/1000 [19:42<1:20:52,  6.04s/it][Succeeded / Failed / Skipped / Total] 21 / 175 / 0 / 196:  20%|█▉        | 196/1000 [19:42<1:20:52,  6.04s/it][Succeeded / Failed / Skipped / Total] 21 / 175 / 0 / 196:  20%|█▉        | 197/1000 [19:43<1:20:26,  6.01s/it][Succeeded / Failed / Skipped / Total] 21 / 176 / 0 / 197:  20%|█▉        | 197/1000 [19:43<1:20:26,  6.01s/it][Succeeded / Failed / Skipped / Total] 21 / 176 / 0 / 197:  20%|█▉        | 198/1000 [19:49<1:20:16,  6.01s/it]Returns a list of OpenIDAttributes matching the given identifier . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > createAttributeList ( String [[identifier]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[entry]] : idToAttributes . entrySet ( ) ) { if ( [[entry]] . getKey ( ) . matcher ( [[identifier]] ) . matches ( ) ) { return [[entry]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > createAttributeList ( String [[capital]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > [[admission]] : idToAttributes . entrySet ( ) ) { if ( [[admission]] . getKey ( ) . matcher ( [[capital]] ) . matches ( ) ) { return [[admission]] . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 194 ---------------------------------------------
Converts the given resultSet into a serializable identifier . --> Convert a TickSet to a Serializable Object --> Socre: 1.0

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[identifier]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[identifier]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[identifier]] = convertFromStringTo ( ( String ) [[identifier]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[tick]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[tick]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[tick]] = convertFromStringTo ( ( String ) [[tick]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 195 ---------------------------------------------
Create entries . --> [[[FAILED]]]

[[[[Adv]]]]: protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl [[entry]] = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( [[entry]] . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , [[entry]] . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , [[entry]] . isGranting ( ) ) ; stmt . setBoolean ( 6 , [[entry]] . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , [[entry]] . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl [[admission]] = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( [[admission]] . getSid ( ) , "True" == "True" ) . longValue ( ) ) ; stmt . setInt ( 4 , [[admission]] . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , [[admission]] . isGranting ( ) ) ; stmt . setBoolean ( 6 , [[admission]] . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , [[admission]] . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 196 ---------------------------------------------
Deletes the object identity . --> [[[FAILED]]]

[[[[Adv]]]]: protected void createObjectIdentity ( ObjectIdentity [[object]] , Sid [[owner]] ) { Long sidId = createOrRetrieveSidPrimaryKey ( [[owner]] , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( [[object]] . getType ( ) , "True" == "True" , [[object]] . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , [[object]] . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void createObjectIdentity ( ObjectIdentity [[adjective]] , Sid [[holder]] ) { Long sidId = createOrRetrieveSidPrimaryKey ( [[holder]] , "True" == "True" ) ; Long classId = createOrRetrieveClassPrimaryKey ( [[adjective]] . getType ( ) , "True" == "True" , [[adjective]] . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , [[adjective]] . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 197 ---------------------------------------------
Handle a contact . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact [[form]] , BindingResult [[result]] ) { validator . validate ( [[form]] , [[result]] ) ; if ( [[result]] . hasErrors ( ) ) { return "add" ; } Contact [[contact]] = new Contact ( [[form]] . getName ( ) , [[form]] . getEmail ( ) ) ; contactManager . create ( [[contact]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact [[department]] , BindingResult [[end]] ) { validator . validate ( [[department]] , [[end]] ) ; if ( [[end]] . hasErrors ( ) ) { return "add" ; } Contact [[eyepiece]] = new Contact ( [[department]] . getName ( ) , [[department]] . getEmail ( ) ) ; contactManager . create ( [[eyepiece]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 198 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 21 / 177 / 0 / 198:  20%|█▉        | 198/1000 [19:49<1:20:16,  6.01s/it][Succeeded / Failed / Skipped / Total] 21 / 177 / 0 / 198:  20%|█▉        | 199/1000 [19:51<1:19:57,  5.99s/it][Succeeded / Failed / Skipped / Total] 21 / 178 / 0 / 199:  20%|█▉        | 199/1000 [19:51<1:19:57,  5.99s/it][Succeeded / Failed / Skipped / Total] 21 / 178 / 0 / 199:  20%|██        | 200/1000 [19:52<1:19:28,  5.96s/it][Succeeded / Failed / Skipped / Total] 21 / 179 / 0 / 200:  20%|██        | 200/1000 [19:52<1:19:28,  5.96s/it][Succeeded / Failed / Skipped / Total] 21 / 179 / 0 / 200:  20%|██        | 201/1000 [19:54<1:19:08,  5.94s/it][Succeeded / Failed / Skipped / Total] 21 / 180 / 0 / 201:  20%|██        | 201/1000 [19:54<1:19:08,  5.94s/it][Succeeded / Failed / Skipped / Total] 21 / 180 / 0 / 201:  20%|██        | 202/1000 [19:58<1:18:53,  5.93s/it][Succeeded / Failed / Skipped / Total] 21 / 181 / 0 / 202:  20%|██        | 202/1000 [19:58<1:18:53,  5.93s/it][Succeeded / Failed / Skipped / Total] 21 / 181 / 0 / 202:  20%|██        | 203/1000 [20:06<1:18:57,  5.94s/it][Succeeded / Failed / Skipped / Total] 21 / 182 / 0 / 203:  20%|██        | 203/1000 [20:06<1:18:57,  5.94s/it][Succeeded / Failed / Skipped / Total] 21 / 182 / 0 / 203:  20%|██        | 204/1000 [20:12<1:18:49,  5.94s/it][Succeeded / Failed / Skipped / Total] 21 / 183 / 0 / 204:  20%|██        | 204/1000 [20:12<1:18:49,  5.94s/it][Succeeded / Failed / Skipped / Total] 21 / 183 / 0 / 204:  20%|██        | 205/1000 [20:22<1:19:01,  5.96s/it]Updates the owner identity . --> [[[FAILED]]]

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int [[count]] = jdbcOperations . update ( updateObjectIdentity , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( [[count]] != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl acl ) { Long parentId = null ; if ( acl . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , acl . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) acl . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( acl . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( acl . getOwner ( ) , "True" == "True" ) ; int [[composition]] = jdbcOperations . update ( updateObjectIdentity , parentId , ownerSid , Boolean . valueOf ( acl . isEntriesInheriting ( ) ) , acl . getId ( ) ) ; if ( [[composition]] != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 199 ---------------------------------------------
Converts a collection of user authorities to a set of authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public static Set < String > authorityListToSet ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > [[set]] = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority [[authority]] : userAuthorities ) { [[set]] . add ( [[authority]] . getAuthority ( ) ) ; } return [[set]] ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > authorityListToSet ( Collection < ? extends GrantedAuthority > userAuthorities ) { Assert . notNull ( userAuthorities , "userAuthorities cannot be null" ) ; Set < String > [[heap]] = new HashSet <> ( userAuthorities . size ( ) ) ; for ( GrantedAuthority [[entitlement]] : userAuthorities ) { [[heap]] . add ( [[entitlement]] . getAuthority ( ) ) ; } return [[heap]] ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 200 ---------------------------------------------
Returns a matcher that matches any of the specified exchange exchange . --> [[[FAILED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher anyExchange ( ) {
[[[[Nl]]]]: Matches any exchange

[[[[Adv]]]]: public static ServerWebExchangeMatcher anyExchange ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 201 ---------------------------------------------
Creates a decryptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence password , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( stronger ( password , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor delux ( CharSequence password , CharSequence [[barbeque]] ) { return new HexEncodingTextEncryptor ( stronger ( password , [[barbeque]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 202 ---------------------------------------------
Save request . --> [[[FAILED]]]

[[[[Adv]]]]: public void saveRequest ( HttpServletRequest [[request]] , HttpServletResponse [[response]] ) { if ( requestMatcher . matches ( [[request]] ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( [[request]] , portResolver ) ; if ( createSessionAllowed || [[request]] . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void saveRequest ( HttpServletRequest [[appeal]] , HttpServletResponse [[action]] ) { if ( requestMatcher . matches ( [[appeal]] ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( [[appeal]] , portResolver ) ; if ( createSessionAllowed || [[appeal]] . getSession ( "False" != "False" ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 203 ---------------------------------------------
Returns a text encryptor --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence password , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence password , CharSequence [[barbecue]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , [[barbecue]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 204 ---------------------------------------------
Creates a text encryption cipher . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[text]] ( CharSequence password , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( standard ( password , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[lecture]] ( CharSequence password , CharSequence [[cook]] ) { return new HexEncodingTextEncryptor ( standard ( password , [[cook]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 205 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 22 / 183 / 0 / 205:  20%|██        | 205/1000 [20:22<1:19:01,  5.96s/it][Succeeded / Failed / Skipped / Total] 22 / 183 / 0 / 205:  21%|██        | 206/1000 [20:27<1:18:50,  5.96s/it][Succeeded / Failed / Skipped / Total] 22 / 184 / 0 / 206:  21%|██        | 206/1000 [20:27<1:18:50,  5.96s/it][Succeeded / Failed / Skipped / Total] 22 / 184 / 0 / 206:  21%|██        | 207/1000 [20:27<1:18:22,  5.93s/it][Succeeded / Failed / Skipped / Total] 22 / 185 / 0 / 207:  21%|██        | 207/1000 [20:27<1:18:22,  5.93s/it][Succeeded / Failed / Skipped / Total] 22 / 185 / 0 / 207:  21%|██        | 208/1000 [20:29<1:18:00,  5.91s/it][Succeeded / Failed / Skipped / Total] 22 / 186 / 0 / 208:  21%|██        | 208/1000 [20:29<1:18:00,  5.91s/it][Succeeded / Failed / Skipped / Total] 22 / 186 / 0 / 208:  21%|██        | 209/1000 [20:29<1:17:33,  5.88s/it][Succeeded / Failed / Skipped / Total] 22 / 187 / 0 / 209:  21%|██        | 209/1000 [20:29<1:17:33,  5.88s/it][Succeeded / Failed / Skipped / Total] 22 / 187 / 0 / 209:  21%|██        | 210/1000 [20:29<1:17:06,  5.86s/it][Succeeded / Failed / Skipped / Total] 22 / 188 / 0 / 210:  21%|██        | 210/1000 [20:29<1:17:06,  5.86s/it][Succeeded / Failed / Skipped / Total] 22 / 188 / 0 / 210:  21%|██        | 211/1000 [20:42<1:17:26,  5.89s/it][Succeeded / Failed / Skipped / Total] 22 / 189 / 0 / 211:  21%|██        | 211/1000 [20:42<1:17:26,  5.89s/it][Succeeded / Failed / Skipped / Total] 22 / 189 / 0 / 211:  21%|██        | 212/1000 [20:42<1:16:59,  5.86s/it]Write headers to the response . --> Write headers to response --> Socre: 1.0

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest [[request]] , HttpServletResponse [[response]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( [[request]] ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest [[appeal]] , HttpServletResponse [[reaction]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( [[appeal]] ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! [[reaction]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[reaction]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! [[reaction]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[reaction]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { [[reaction]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 206 ---------------------------------------------
Determines the target URL . --> [[[FAILED]]]

[[[[Adv]]]]: protected String determineTargetUrl ( HttpServletRequest [[request]] , HttpServletResponse [[response]] ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String determineTargetUrl ( HttpServletRequest [[essential]] , HttpServletResponse [[reaction]] ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 207 ---------------------------------------------
Sets the target URL parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public void setTargetUrlParameter ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void setTargetUrlParameter ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . targetUrlParameter = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 208 ---------------------------------------------
Gets the Directory with the immediate parent directory . --> [[[FAILED]]]

[[[[Adv]]]]: private Directory getDirectoryWithImmediateParentPopulated ( final Long [[id]] ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { [[id]] } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory getDirectoryWithImmediateParentPopulated ( final Long [[capital]] ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { [[capital]] } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory parentDirectory = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 209 ---------------------------------------------
Builds a distinguished name . --> [[[FAILED]]]

[[[[Adv]]]]: public DistinguishedName buildDn ( String username ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , username ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName buildDn ( String username ) { DistinguishedName dn = new DistinguishedName ( userDnBase ) ; dn . add ( usernameAttribute , username ) ; return dn ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 210 ---------------------------------------------
Creates a map of shared objects . --> [[[FAILED]]]

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > createSharedObjects ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > createSharedObjects ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 211 ---------------------------------------------
Determines the target URL . --> [[[FAILED]]]

[[[[Adv]]]]: protected String determineTargetUrl ( HttpServletRequest [[request]] , HttpServletResponse [[response]] , Authentication authentication ) { return determineTargetUrl ( [[request]] , [[response]] ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String determineTargetUrl ( HttpServletRequest [[appeal]] , HttpServletResponse [[reaction]] , Authentication authentication ) { return determineTargetUrl ( [[appeal]] , [[reaction]] ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 212 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 22 / 190 / 0 / 212:  21%|██        | 212/1000 [20:42<1:16:59,  5.86s/it][Succeeded / Failed / Skipped / Total] 22 / 190 / 0 / 212:  21%|██▏       | 213/1000 [20:50<1:16:59,  5.87s/it][Succeeded / Failed / Skipped / Total] 22 / 191 / 0 / 213:  21%|██▏       | 213/1000 [20:50<1:16:59,  5.87s/it][Succeeded / Failed / Skipped / Total] 22 / 191 / 0 / 213:  21%|██▏       | 214/1000 [20:54<1:16:49,  5.86s/it][Succeeded / Failed / Skipped / Total] 23 / 191 / 0 / 214:  21%|██▏       | 214/1000 [20:54<1:16:49,  5.86s/it][Succeeded / Failed / Skipped / Total] 23 / 191 / 0 / 214:  22%|██▏       | 215/1000 [20:59<1:16:37,  5.86s/it][Succeeded / Failed / Skipped / Total] 23 / 192 / 0 / 215:  22%|██▏       | 215/1000 [20:59<1:16:37,  5.86s/it][Succeeded / Failed / Skipped / Total] 23 / 192 / 0 / 215:  22%|██▏       | 216/1000 [21:03<1:16:24,  5.85s/it][Succeeded / Failed / Skipped / Total] 23 / 193 / 0 / 216:  22%|██▏       | 216/1000 [21:03<1:16:24,  5.85s/it][Succeeded / Failed / Skipped / Total] 23 / 193 / 0 / 216:  22%|██▏       | 217/1000 [21:03<1:15:58,  5.82s/it][Succeeded / Failed / Skipped / Total] 23 / 194 / 0 / 217:  22%|██▏       | 217/1000 [21:03<1:15:58,  5.82s/it][Succeeded / Failed / Skipped / Total] 23 / 194 / 0 / 217:  22%|██▏       | 218/1000 [21:03<1:15:33,  5.80s/it]Get current date --> [[[FAILED]]]

[[[[Adv]]]]: public static String getCurrentDate ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String getCurrentDate ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 213 ---------------------------------------------
Sets the JAAS using loop configuration . --> [[[FAILED]]]

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String [[key]] = prefix + n ; log . debug ( "Setting security property [" + [[key]] + "] to: " + loginConfigUrl ) ; Security . setProperty ( [[key]] , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void configureJaasUsingLoop ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = "False" != "False" ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String [[adjustment]] = prefix + n ; log . debug ( "Setting security property [" + [[adjustment]] + "] to: " + loginConfigUrl ) ; Security . setProperty ( [[adjustment]] , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 214 ---------------------------------------------
Internal parse function . --> Internal parsing routine --> Socre: 1.0

[[[[Adv]]]]: private static Long internalParseDate ( String value , DateFormat [ ] formats ) { Date [[date]] = null ; for ( int i = 0 ; ( [[date]] == null ) && ( i < formats . length ) ; i ++ ) { try { [[date]] = formats [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( [[date]] == null ) { return null ; } return new Long ( [[date]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long internalParseDate ( String value , DateFormat [ ] formats ) { Date [[appointment]] = null ; for ( int i = 0 ; ( [[appointment]] == null ) && ( i < formats . length ) ; i ++ ) { try { [[appointment]] = formats [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( [[appointment]] == null ) { return null ; } return new Long ( [[appointment]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 215 ---------------------------------------------
Set authentication details . --> [[[FAILED]]]

[[[[Adv]]]]: protected void setDetails ( HttpServletRequest [[request]] , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void setDetails ( HttpServletRequest [[appeal]] , UsernamePasswordAuthenticationToken authRequest ) { authRequest . setDetails ( authenticationDetailsSource . buildDetails ( [[appeal]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 216 ---------------------------------------------
Searches for a single attribute and returns all values found in the attribute list . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < String > searchForSingleAttributeValues ( final String [[base]] , final String [[filter]] , final Object [ ] params , final String attributeName ) { String [ ] attributeNames = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( [[base]] , [[filter]] , params , attributeNames ) ; Set < String > [[result]] = new HashSet <> ( ) ; for ( Map < String , List < String > > [[map]] : multipleAttributeValues ) { List < String > [[values]] = [[map]] . get ( attributeName ) ; if ( [[values]] != null ) { [[result]] . addAll ( [[values]] ) ; } } return [[result]] ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > searchForSingleAttributeValues ( final String [[foot]] , final String [[screen]] , final Object [ ] params , final String attributeName ) { String [ ] attributeNames = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( [[foot]] , [[screen]] , params , attributeNames ) ; Set < String > [[outcome]] = new HashSet <> ( ) ; for ( Map < String , List < String > > [[delineation]] : multipleAttributeValues ) { List < String > [[quantities]] = [[delineation]] . get ( attributeName ) ; if ( [[quantities]] != null ) { [[outcome]] . addAll ( [[quantities]] ) ; } } return [[outcome]] ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 217 ---------------------------------------------
Returns a list of webSphere groups . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > getWebSphereGroups ( final String securityName ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > getWebSphereGroups ( final String securityName ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 218 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 23 / 195 / 0 / 218:  22%|██▏       | 218/1000 [21:03<1:15:33,  5.80s/it][Succeeded / Failed / Skipped / Total] 23 / 195 / 0 / 218:  22%|██▏       | 219/1000 [21:04<1:15:10,  5.77s/it][Succeeded / Failed / Skipped / Total] 23 / 196 / 0 / 219:  22%|██▏       | 219/1000 [21:04<1:15:10,  5.77s/it][Succeeded / Failed / Skipped / Total] 23 / 196 / 0 / 219:  22%|██▏       | 220/1000 [21:09<1:15:02,  5.77s/it][Succeeded / Failed / Skipped / Total] 24 / 196 / 0 / 220:  22%|██▏       | 220/1000 [21:09<1:15:02,  5.77s/it][Succeeded / Failed / Skipped / Total] 24 / 196 / 0 / 220:  22%|██▏       | 221/1000 [21:10<1:14:36,  5.75s/it][Succeeded / Failed / Skipped / Total] 24 / 197 / 0 / 221:  22%|██▏       | 221/1000 [21:10<1:14:36,  5.75s/it][Succeeded / Failed / Skipped / Total] 24 / 197 / 0 / 221:  22%|██▏       | 222/1000 [21:14<1:14:28,  5.74s/it][Succeeded / Failed / Skipped / Total] 24 / 198 / 0 / 222:  22%|██▏       | 222/1000 [21:14<1:14:28,  5.74s/it][Succeeded / Failed / Skipped / Total] 24 / 198 / 0 / 222:  22%|██▏       | 223/1000 [21:15<1:14:03,  5.72s/it][Succeeded / Failed / Skipped / Total] 24 / 199 / 0 / 223:  22%|██▏       | 223/1000 [21:15<1:14:03,  5.72s/it][Succeeded / Failed / Skipped / Total] 24 / 199 / 0 / 223:  22%|██▏       | 224/1000 [21:15<1:13:38,  5.69s/it][Succeeded / Failed / Skipped / Total] 24 / 200 / 0 / 224:  22%|██▏       | 224/1000 [21:15<1:13:38,  5.69s/it][Succeeded / Failed / Skipped / Total] 24 / 200 / 0 / 224:  22%|██▎       | 225/1000 [21:16<1:13:15,  5.67s/it][Succeeded / Failed / Skipped / Total] 24 / 201 / 0 / 225:  22%|██▎       | 225/1000 [21:16<1:13:15,  5.67s/it][Succeeded / Failed / Skipped / Total] 24 / 201 / 0 / 225:  23%|██▎       | 226/1000 [21:16<1:12:51,  5.65s/it]Change the password for the current user . --> [[[FAILED]]]

[[[[Adv]]]]: public void changePassword ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void changePassword ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( userDn , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
--------------------------------------------- Result 219 ---------------------------------------------
Determines the security name for the subject . --> [[[FAILED]]]

[[[[Adv]]]]: private static String getSecurityName ( final Subject [[subject]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[subject]] ) ; } String userSecurityName = null ; if ( [[subject]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String getSecurityName ( final Subject [[dependent]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[dependent]] ) ; } String userSecurityName = null ; if ( [[dependent]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 220 ---------------------------------------------
Update cache . --> Update the given key with the given key --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void updateCache ( HashMap cache , Object key , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , [[value]] ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void updateCache ( HashMap cache , Object key , Object [[liquidation]] ) { if ( [[liquidation]] == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , [[liquidation]] ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 221 ---------------------------------------------
Build the group DN from the group --> [[[FAILED]]]

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String [[group]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[group]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String [[concern]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[concern]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 222 ---------------------------------------------
Throws an exception if the number of sessions is exceeded . --> [[[FAILED]]]

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > [[sessions]] , int allowableSessions , SessionRegistry [[registry]] ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[sessions]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > [[conferences]] , int allowableSessions , SessionRegistry [[roster]] ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[conferences]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 223 ---------------------------------------------
Returns all filters matching the specified URL . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Filter > getFilters ( String url ) { return getFilters ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .

[[[[Adv]]]]: public List < Filter > getFilters ( String url ) { return getFilters ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 224 ---------------------------------------------
Get the required web application context . --> [[[FAILED]]]

[[[[Adv]]]]: protected ApplicationContext getContext ( PageContext pageContext ) { ServletContext servletContext = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext getContext ( PageContext pageContext ) { ServletContext servletContext = pageContext . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 225 ---------------------------------------------
Converts a distinguished name into a full distinguished name . --> [[[FAILED]]]

[[[[Adv]]]]: public static DistinguishedName getFullDn ( DistinguishedName dn , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( dn . contains ( baseDn ) ) { return dn ; } baseDn . append ( dn ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName getFullDn ( DistinguishedName dn , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( dn . contains ( baseDn ) ) { return dn ; } baseDn . append ( dn ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 226 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 24 / 202 / 0 / 226:  23%|██▎       | 226/1000 [21:16<1:12:51,  5.65s/it][Succeeded / Failed / Skipped / Total] 24 / 202 / 0 / 226:  23%|██▎       | 227/1000 [21:19<1:12:35,  5.63s/it][Succeeded / Failed / Skipped / Total] 24 / 203 / 0 / 227:  23%|██▎       | 227/1000 [21:19<1:12:35,  5.63s/it][Succeeded / Failed / Skipped / Total] 24 / 203 / 0 / 227:  23%|██▎       | 228/1000 [21:20<1:12:14,  5.61s/it][Succeeded / Failed / Skipped / Total] 24 / 204 / 0 / 228:  23%|██▎       | 228/1000 [21:20<1:12:14,  5.61s/it][Succeeded / Failed / Skipped / Total] 24 / 204 / 0 / 228:  23%|██▎       | 229/1000 [21:27<1:12:14,  5.62s/it][Succeeded / Failed / Skipped / Total] 24 / 205 / 0 / 229:  23%|██▎       | 229/1000 [21:27<1:12:14,  5.62s/it][Succeeded / Failed / Skipped / Total] 24 / 205 / 0 / 229:  23%|██▎       | 230/1000 [21:30<1:12:01,  5.61s/it][Succeeded / Failed / Skipped / Total] 24 / 206 / 0 / 230:  23%|██▎       | 230/1000 [21:30<1:12:01,  5.61s/it][Succeeded / Failed / Skipped / Total] 24 / 206 / 0 / 230:  23%|██▎       | 231/1000 [21:38<1:12:02,  5.62s/it][Succeeded / Failed / Skipped / Total] 24 / 207 / 0 / 231:  23%|██▎       | 231/1000 [21:38<1:12:02,  5.62s/it][Succeeded / Failed / Skipped / Total] 24 / 207 / 0 / 231:  23%|██▎       | 232/1000 [21:42<1:11:51,  5.61s/it][Succeeded / Failed / Skipped / Total] 25 / 207 / 0 / 232:  23%|██▎       | 232/1000 [21:42<1:11:51,  5.61s/it][Succeeded / Failed / Skipped / Total] 25 / 207 / 0 / 232:  23%|██▎       | 233/1000 [21:42<1:11:28,  5.59s/it][Succeeded / Failed / Skipped / Total] 25 / 208 / 0 / 233:  23%|██▎       | 233/1000 [21:42<1:11:28,  5.59s/it][Succeeded / Failed / Skipped / Total] 25 / 208 / 0 / 233:  23%|██▎       | 234/1000 [21:57<1:11:52,  5.63s/it]Sets session attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecification sessionAttrs ( Map < String , Object > sessionAttributes ) { notNull ( sessionAttributes , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , sessionAttributes , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification sessionAttrs ( Map < String , Object > sessionAttributes ) { notNull ( sessionAttributes , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , sessionAttributes , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 227 ---------------------------------------------
Creates a basic authentication scheme with the specified username and password . --> [[[FAILED]]]

[[[[Adv]]]]: public AuthenticationScheme [[basic]] ( String userName , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme [[cardinal]] ( String userName , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( userName ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 228 ---------------------------------------------
Adds a list of filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > filters ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[screens]] ( List < Filter > filters ) { Validate . notNull ( [[screens]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[screens]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 229 ---------------------------------------------
Add additional filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( Filter [[filter]] , Filter ... additionalFilters ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[strains]] ( Filter [[strain]] , Filter ... additionalFilters ) { Validate . notNull ( [[strain]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[strain]] ) ; if ( additionalFilters != null ) { Collections . addAll ( RestAssured . filters , additionalFilters ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 230 ---------------------------------------------
Returns the chain of filters matching the given request . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest [[request]] ) { for ( SecurityFilterChain [[chain]] : filterChains ) { if ( [[chain]] . matches ( [[request]] ) ) { return [[chain]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest [[petition]] ) { for ( SecurityFilterChain [[thread]] : filterChains ) { if ( [[thread]] . matches ( [[petition]] ) ) { return [[thread]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 231 ---------------------------------------------
Copy the authentication details from source to destination . --> [[[FAILED]]]

[[[[Adv]]]]: private void copyDetails ( Authentication [[source]] , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken [[token]] = ( AbstractAuthenticationToken ) dest ; [[token]] . setDetails ( [[source]] . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void copyDetails ( Authentication [[fountain]] , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken [[logo]] = ( AbstractAuthenticationToken ) dest ; [[logo]] . setDetails ( [[fountain]] . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 232 ---------------------------------------------
Creates a default authentication scheme . --> Static factory method --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme [[basic]] ( String userName , String password ) { final BasicAuthScheme [[scheme]] = new BasicAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[cardinal]] ( String userName , String password ) { final BasicAuthScheme [[tactic]] = new BasicAuthScheme ( ) ; [[tactic]] . setUserName ( userName ) ; [[tactic]] . setPassword ( password ) ; return [[tactic]] ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 233 ---------------------------------------------
Proxy a proxy for the given URI . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[proxy]] ( URI uri ) { if ( uri == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[proxy]] ( new ProxySpecification ( uri . getHost ( ) , uri . getPort ( ) , uri . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void [[agent]] ( URI uri ) { if ( uri == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[agent]] ( new ProxySpecification ( uri . getHost ( ) , uri . getPort ( ) , uri . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 234 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 26 / 208 / 0 / 234:  23%|██▎       | 234/1000 [21:57<1:11:52,  5.63s/it][Succeeded / Failed / Skipped / Total] 26 / 208 / 0 / 234:  24%|██▎       | 235/1000 [21:57<1:11:29,  5.61s/it][Succeeded / Failed / Skipped / Total] 26 / 209 / 0 / 235:  24%|██▎       | 235/1000 [21:57<1:11:29,  5.61s/it][Succeeded / Failed / Skipped / Total] 26 / 209 / 0 / 235:  24%|██▎       | 236/1000 [21:58<1:11:07,  5.59s/it][Succeeded / Failed / Skipped / Total] 26 / 210 / 0 / 236:  24%|██▎       | 236/1000 [21:58<1:11:07,  5.59s/it][Succeeded / Failed / Skipped / Total] 26 / 210 / 0 / 236:  24%|██▎       | 237/1000 [21:58<1:10:43,  5.56s/it][Succeeded / Failed / Skipped / Total] 27 / 210 / 0 / 237:  24%|██▎       | 237/1000 [21:58<1:10:43,  5.56s/it][Succeeded / Failed / Skipped / Total] 27 / 210 / 0 / 237:  24%|██▍       | 238/1000 [21:58<1:10:20,  5.54s/it][Succeeded / Failed / Skipped / Total] 27 / 210 / 1 / 238:  24%|██▍       | 238/1000 [21:58<1:10:20,  5.54s/it][Succeeded / Failed / Skipped / Total] 27 / 210 / 1 / 238:  24%|██▍       | 239/1000 [21:58<1:09:58,  5.52s/it][Succeeded / Failed / Skipped / Total] 27 / 211 / 1 / 239:  24%|██▍       | 239/1000 [21:58<1:09:58,  5.52s/it][Succeeded / Failed / Skipped / Total] 27 / 211 / 1 / 239:  24%|██▍       | 240/1000 [21:58<1:09:35,  5.49s/it]Create an NTLMuthscheme instance with the given properties . --> Returns an NTLMuthScheme object with the given username and password --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String password , String workstation , String [[domain]] ) { final NTLMAuthScheme [[scheme]] = new NTLMAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setWorkstation ( workstation ) ; [[scheme]] . setDomain ( [[domain]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String password , String workstation , String [[kingdom]] ) { final NTLMAuthScheme [[expedient]] = new NTLMAuthScheme ( ) ; [[expedient]] . setUserName ( userName ) ; [[expedient]] . setPassword ( password ) ; [[expedient]] . setWorkstation ( workstation ) ; [[expedient]] . setDomain ( [[kingdom]] ) ; return [[expedient]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 235 ---------------------------------------------
Retrieve configuration based on redirect configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredConfig redirect ( RedirectConfig redirectConfig ) { notNull ( redirectConfig , "Redirect config" ) ; return new RestAssuredConfig ( redirectConfig , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig redirect ( RedirectConfig redirectConfig ) { notNull ( redirectConfig , "Redirect config" ) ; return new RestAssuredConfig ( redirectConfig , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 236 ---------------------------------------------
Sets the encoding charset to use . --> [[[FAILED]]]

[[[[Adv]]]]: public EncoderConfig defaultQueryParameterCharset ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig defaultQueryParameterCharset ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 237 ---------------------------------------------
Prints the response . --> Creates a canvas . --> Socre: 1.0

[[[[Adv]]]]: public static String [[print]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String [[canvas]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 238 ---------------------------------------------
Configure Jackson ObjectMapperFactory --> [[[SKIPPED]]]

[[[[Adv]]]]: public ObjectMapperConfig jaxbObjectMapperFactory ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 239 ---------------------------------------------
Sets the default object mapper type --> [[[FAILED]]]

[[[[Adv]]]]: public ObjectMapperConfig defaultObjectMapperType ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig defaultObjectMapperType ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , "True" == "True" ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
[Succeeded / Failed / Skipped / Total] 27 / 212 / 1 / 240:  24%|██▍       | 240/1000 [21:58<1:09:35,  5.49s/it][Succeeded / Failed / Skipped / Total] 27 / 212 / 1 / 240:  24%|██▍       | 241/1000 [21:58<1:09:13,  5.47s/it][Succeeded / Failed / Skipped / Total] 27 / 213 / 1 / 241:  24%|██▍       | 241/1000 [21:58<1:09:13,  5.47s/it][Succeeded / Failed / Skipped / Total] 27 / 213 / 1 / 241:  24%|██▍       | 242/1000 [21:59<1:08:51,  5.45s/it][Succeeded / Failed / Skipped / Total] 27 / 214 / 1 / 242:  24%|██▍       | 242/1000 [21:59<1:08:51,  5.45s/it][Succeeded / Failed / Skipped / Total] 27 / 214 / 1 / 242:  24%|██▍       | 243/1000 [21:59<1:08:29,  5.43s/it][Succeeded / Failed / Skipped / Total] 27 / 215 / 1 / 243:  24%|██▍       | 243/1000 [21:59<1:08:29,  5.43s/it][Succeeded / Failed / Skipped / Total] 27 / 215 / 1 / 243:  24%|██▍       | 244/1000 [21:59<1:08:08,  5.41s/it][Succeeded / Failed / Skipped / Total] 27 / 216 / 1 / 244:  24%|██▍       | 244/1000 [21:59<1:08:08,  5.41s/it][Succeeded / Failed / Skipped / Total] 27 / 216 / 1 / 244:  24%|██▍       | 245/1000 [21:59<1:07:46,  5.39s/it][Succeeded / Failed / Skipped / Total] 27 / 217 / 1 / 245:  24%|██▍       | 245/1000 [21:59<1:07:46,  5.39s/it][Succeeded / Failed / Skipped / Total] 27 / 217 / 1 / 245:  25%|██▍       | 246/1000 [21:59<1:07:25,  5.37s/it][Succeeded / Failed / Skipped / Total] 27 / 218 / 1 / 246:  25%|██▍       | 246/1000 [21:59<1:07:25,  5.37s/it][Succeeded / Failed / Skipped / Total] 27 / 218 / 1 / 246:  25%|██▍       | 247/1000 [21:59<1:07:03,  5.34s/it][Succeeded / Failed / Skipped / Total] 27 / 219 / 1 / 247:  25%|██▍       | 247/1000 [21:59<1:07:03,  5.34s/it][Succeeded / Failed / Skipped / Total] 27 / 219 / 1 / 247:  25%|██▍       | 248/1000 [22:00<1:06:43,  5.32s/it]--------------------------------------------- Result 240 ---------------------------------------------
Sets the config for the log . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig logConfig ( LogConfig logConfig ) { notNull ( logConfig , "Log config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig logConfig ( LogConfig logConfig ) { notNull ( logConfig , "Log config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 241 ---------------------------------------------
Sets the session config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig sessionConfig ( SessionConfig sessionConfig ) { notNull ( sessionConfig , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig sessionConfig ( SessionConfig sessionConfig ) { notNull ( sessionConfig , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 242 ---------------------------------------------
Sets the restured mapper configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig objectMapperConfig ( ObjectMapperConfig objectMapperConfig ) { notNull ( objectMapperConfig , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig objectMapperConfig ( ObjectMapperConfig objectMapperConfig ) { notNull ( objectMapperConfig , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 243 ---------------------------------------------
Sets the RestAssuredMock configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig jsonConfig ( JsonConfig jsonConfig ) { notNull ( jsonConfig , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig jsonConfig ( JsonConfig jsonConfig ) { notNull ( jsonConfig , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 244 ---------------------------------------------
Sets the REST config for the given xml configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig xmlConfig ( XmlConfig xmlConfig ) { notNull ( xmlConfig , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig xmlConfig ( XmlConfig xmlConfig ) { notNull ( xmlConfig , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 245 ---------------------------------------------
Sets the restured config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig encoderConfig ( EncoderConfig encoderConfig ) { notNull ( encoderConfig , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config

[[[[Adv]]]]: public RestAssuredMockMvcConfig encoderConfig ( EncoderConfig encoderConfig ) { notNull ( encoderConfig , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 246 ---------------------------------------------
Sets the REST client configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig headerConfig ( HeaderConfig headerConfig ) { notNull ( headerConfig , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config

[[[[Adv]]]]: public RestAssuredMockMvcConfig headerConfig ( HeaderConfig headerConfig ) { notNull ( headerConfig , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 247 ---------------------------------------------
Sets the restured config . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig asyncConfig ( AsyncConfig asyncConfig ) { notNull ( asyncConfig , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig asyncConfig ( AsyncConfig asyncConfig ) { notNull ( asyncConfig , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 248 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 27 / 220 / 1 / 248:  25%|██▍       | 248/1000 [22:00<1:06:43,  5.32s/it][Succeeded / Failed / Skipped / Total] 27 / 220 / 1 / 248:  25%|██▍       | 249/1000 [22:00<1:06:22,  5.30s/it][Succeeded / Failed / Skipped / Total] 27 / 221 / 1 / 249:  25%|██▍       | 249/1000 [22:00<1:06:22,  5.30s/it][Succeeded / Failed / Skipped / Total] 27 / 221 / 1 / 249:  25%|██▌       | 250/1000 [22:00<1:06:01,  5.28s/it][Succeeded / Failed / Skipped / Total] 27 / 222 / 1 / 250:  25%|██▌       | 250/1000 [22:00<1:06:01,  5.28s/it][Succeeded / Failed / Skipped / Total] 27 / 223 / 1 / 251:  25%|██▌       | 251/1000 [22:00<1:05:41,  5.26s/it][Succeeded / Failed / Skipped / Total] 27 / 223 / 1 / 251:  25%|██▌       | 252/1000 [22:00<1:05:20,  5.24s/it][Succeeded / Failed / Skipped / Total] 27 / 224 / 1 / 252:  25%|██▌       | 252/1000 [22:00<1:05:20,  5.24s/it][Succeeded / Failed / Skipped / Total] 27 / 225 / 1 / 253:  25%|██▌       | 253/1000 [22:01<1:05:00,  5.22s/it][Succeeded / Failed / Skipped / Total] 27 / 225 / 1 / 253:  25%|██▌       | 254/1000 [22:01<1:04:40,  5.20s/it][Succeeded / Failed / Skipped / Total] 27 / 226 / 1 / 254:  25%|██▌       | 254/1000 [22:01<1:04:40,  5.20s/it][Succeeded / Failed / Skipped / Total] 28 / 226 / 1 / 255:  26%|██▌       | 255/1000 [22:12<1:04:54,  5.23s/it][Succeeded / Failed / Skipped / Total] 28 / 226 / 1 / 255:  26%|██▌       | 256/1000 [22:13<1:04:36,  5.21s/it]Create a RestAssuredMock initialized with the given mock configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig mockMvcConfig ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig mockMvcConfig ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 249 ---------------------------------------------
Sets the mock mapper configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig multiPartConfig ( MultiPartConfig multiPartConfig ) { notNull ( multiPartConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig multiPartConfig ( MultiPartConfig multiPartConfig ) { notNull ( multiPartConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 250 ---------------------------------------------
Sets the RestAssuredMockConfig . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig paramConfig ( MockMvcParamConfig paramConfig ) { notNull ( paramConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config

[[[[Adv]]]]: public RestAssuredMockMvcConfig paramConfig ( MockMvcParamConfig paramConfig ) { notNull ( paramConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 251 ---------------------------------------------
Sets the restured matcher configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig matcherConfig ( MatcherConfig matcherConfig ) { notNull ( matcherConfig , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig matcherConfig ( MatcherConfig matcherConfig ) { notNull ( matcherConfig , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 252 ---------------------------------------------
Allow all hostnames to be allowed . --> [[[FAILED]]]

[[[[Adv]]]]: public CertificateAuthSettings allowAllHostnames ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings allowAllHostnames ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 253 ---------------------------------------------
Declare the XMLPath configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig declareNamespaces ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig declareNamespaces ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 254 ---------------------------------------------
Declare a namespace with the given prefix . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig declaredNamespace ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig declaredNamespace ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , "True" == "True" , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 255 ---------------------------------------------
Issues HTTP request . --> Perform a prerequisite for a key --> Socre: 1.0

[[[[Adv]]]]: public Object [[request]] ( String [[method]] , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , [[method]] , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object [[prerequisite]] ( String [[key]] , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , [[key]] , this . defaultContentType , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 256 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 28 / 227 / 1 / 256:  26%|██▌       | 256/1000 [22:13<1:04:36,  5.21s/it][Succeeded / Failed / Skipped / Total] 28 / 227 / 1 / 256:  26%|██▌       | 257/1000 [22:14<1:04:16,  5.19s/it][Succeeded / Failed / Skipped / Total] 28 / 228 / 1 / 257:  26%|██▌       | 257/1000 [22:14<1:04:16,  5.19s/it][Succeeded / Failed / Skipped / Total] 28 / 228 / 1 / 257:  26%|██▌       | 258/1000 [22:19<1:04:11,  5.19s/it][Succeeded / Failed / Skipped / Total] 28 / 229 / 1 / 258:  26%|██▌       | 258/1000 [22:19<1:04:11,  5.19s/it][Succeeded / Failed / Skipped / Total] 28 / 229 / 1 / 258:  26%|██▌       | 259/1000 [22:39<1:04:48,  5.25s/it][Succeeded / Failed / Skipped / Total] 28 / 230 / 1 / 259:  26%|██▌       | 259/1000 [22:39<1:04:48,  5.25s/it][Succeeded / Failed / Skipped / Total] 28 / 230 / 1 / 259:  26%|██▌       | 260/1000 [22:45<1:04:46,  5.25s/it][Succeeded / Failed / Skipped / Total] 28 / 231 / 1 / 260:  26%|██▌       | 260/1000 [22:45<1:04:46,  5.25s/it][Succeeded / Failed / Skipped / Total] 28 / 231 / 1 / 260:  26%|██▌       | 261/1000 [22:45<1:04:27,  5.23s/it][Succeeded / Failed / Skipped / Total] 28 / 232 / 1 / 261:  26%|██▌       | 261/1000 [22:45<1:04:27,  5.23s/it][Succeeded / Failed / Skipped / Total] 28 / 232 / 1 / 261:  26%|██▌       | 262/1000 [22:46<1:04:07,  5.21s/it][Succeeded / Failed / Skipped / Total] 28 / 233 / 1 / 262:  26%|██▌       | 262/1000 [22:46<1:04:07,  5.21s/it][Succeeded / Failed / Skipped / Total] 28 / 233 / 1 / 262:  26%|██▋       | 263/1000 [22:55<1:04:14,  5.23s/it]Sets the request headers . --> [[[FAILED]]]

[[[[Adv]]]]: public void setHeaders ( Map < ? , ? > headers ) { this . defaultRequestHeaders . clear ( ) ; if ( headers == null ) return ; for ( Object [[key]] : headers . keySet ( ) ) { Object val = headers . get ( [[key]] ) ; if ( val == null ) continue ; this . defaultRequestHeaders . put ( [[key]] . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void setHeaders ( Map < ? , ? > headers ) { this . defaultRequestHeaders . clear ( ) ; if ( headers == null ) return ; for ( Object [[adjustment]] : headers . keySet ( ) ) { Object val = headers . get ( [[adjustment]] ) ; if ( val == null ) continue ; this . defaultRequestHeaders . put ( [[adjustment]] . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 257 ---------------------------------------------
Sets the control name . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder controlName ( String controlName ) { Validate . notEmpty ( controlName , "Control name cannot be empty" ) ; this . controlName = controlName ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder controlName ( String controlName ) { Validate . notEmpty ( controlName , "Control name cannot be empty" ) ; this . controlName = controlName ; this . isControlNameExplicit = "True" == "True" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 258 ---------------------------------------------
Create a server web exchange matcher for the given paths . --> [[[FAILED]]]

[[[[Adv]]]]: public static ServerWebExchangeMatcher pathMatchers ( HttpMethod [[method]] , String ... [[patterns]] ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( [[patterns]] . length ) ; for ( String [[pattern]] : [[patterns]] ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( [[pattern]] , [[method]] ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher pathMatchers ( HttpMethod [[channel]] , String ... [[illustrations]] ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( [[illustrations]] . length ) ; for ( String [[decree]] : [[illustrations]] ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( [[decree]] , [[channel]] ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 259 ---------------------------------------------
Creates a new authentication scheme using the specified form username and password . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[form]] ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[scheme]] = new FormAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setConfig ( config ) ; return [[scheme]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme [[implication]] ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[projection]] = new FormAuthScheme ( ) ; [[projection]] . setUserName ( userName ) ; [[projection]] . setPassword ( password ) ; [[projection]] . setConfig ( config ) ; return [[projection]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 260 ---------------------------------------------
Adds a single header . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder header ( String [[name]] , String [[value]] ) { Validate . notEmpty ( [[name]] , "Header name cannot be empty" ) ; Validate . notEmpty ( [[value]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder header ( String [[denomination]] , String [[sum]] ) { Validate . notEmpty ( [[denomination]] , "Header name cannot be empty" ) ; Validate . notEmpty ( [[sum]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 261 ---------------------------------------------
Create a copy of the headers with the specified header . --> [[[FAILED]]]

[[[[Adv]]]]: public static Headers headers ( Header header , Header ... additionalHeaders ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( additionalHeaders != null ) { Collections . addAll ( headerList , additionalHeaders ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers headers ( Header header , Header ... additionalHeaders ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( additionalHeaders != null ) { Collections . addAll ( headerList , additionalHeaders ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 262 ---------------------------------------------
Reset the configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public static void reset ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void reset ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 263 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 29 / 233 / 1 / 263:  26%|██▋       | 263/1000 [22:55<1:04:14,  5.23s/it][Succeeded / Failed / Skipped / Total] 29 / 233 / 1 / 263:  26%|██▋       | 264/1000 [22:57<1:04:00,  5.22s/it][Succeeded / Failed / Skipped / Total] 29 / 234 / 1 / 264:  26%|██▋       | 264/1000 [22:57<1:04:00,  5.22s/it][Succeeded / Failed / Skipped / Total] 29 / 234 / 1 / 264:  26%|██▋       | 265/1000 [23:05<1:04:02,  5.23s/it][Succeeded / Failed / Skipped / Total] 29 / 235 / 1 / 265:  26%|██▋       | 265/1000 [23:05<1:04:02,  5.23s/it][Succeeded / Failed / Skipped / Total] 29 / 235 / 1 / 265:  27%|██▋       | 266/1000 [23:13<1:04:05,  5.24s/it][Succeeded / Failed / Skipped / Total] 29 / 236 / 1 / 266:  27%|██▋       | 266/1000 [23:13<1:04:05,  5.24s/it][Succeeded / Failed / Skipped / Total] 29 / 236 / 1 / 266:  27%|██▋       | 267/1000 [23:13<1:03:46,  5.22s/it][Succeeded / Failed / Skipped / Total] 29 / 237 / 1 / 267:  27%|██▋       | 267/1000 [23:13<1:03:46,  5.22s/it][Succeeded / Failed / Skipped / Total] 29 / 237 / 1 / 267:  27%|██▋       | 268/1000 [23:18<1:03:39,  5.22s/it][Succeeded / Failed / Skipped / Total] 29 / 238 / 1 / 268:  27%|██▋       | 268/1000 [23:18<1:03:39,  5.22s/it][Succeeded / Failed / Skipped / Total] 29 / 238 / 1 / 268:  27%|██▋       | 269/1000 [23:26<1:03:43,  5.23s/it][Succeeded / Failed / Skipped / Total] 29 / 239 / 1 / 269:  27%|██▋       | 269/1000 [23:26<1:03:43,  5.23s/it][Succeeded / Failed / Skipped / Total] 29 / 239 / 1 / 269:  27%|██▋       | 270/1000 [23:27<1:03:24,  5.21s/it][Succeeded / Failed / Skipped / Total] 29 / 240 / 1 / 270:  27%|██▋       | 270/1000 [23:27<1:03:24,  5.21s/it][Succeeded / Failed / Skipped / Total] 29 / 240 / 1 / 270:  27%|██▋       | 271/1000 [23:27<1:03:06,  5.19s/it][Succeeded / Failed / Skipped / Total] 29 / 241 / 1 / 271:  27%|██▋       | 271/1000 [23:27<1:03:06,  5.19s/it][Succeeded / Failed / Skipped / Total] 29 / 241 / 1 / 271:  27%|██▋       | 272/1000 [23:31<1:02:58,  5.19s/it]Sets the response header . --> Sets the value of the response . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder setHeader ( String name , String [[value]] ) { notNull ( name , "Header name" ) ; notNull ( [[value]] , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , [[value]] ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( [[value]] ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder setHeader ( String name , String [[estimation]] ) { notNull ( name , "Header name" ) ; notNull ( [[estimation]] , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , [[estimation]] ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( [[estimation]] ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 264 ---------------------------------------------
Builds the response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response [[build]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[construction]] ( ) { final int statusCode = restAssuredResponse . statusCode ( ) ; if ( statusCode < 100 || statusCode >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , statusCode ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 265 ---------------------------------------------
Matches a cookie by its value . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > valueMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , valueMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[critique]] ( Matcher < ? super String > valueMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , valueMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 266 ---------------------------------------------
Matches cookie in cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[comment]] ( Matcher < ? super String > commentMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , commentMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[remark]] ( Matcher < ? super String > commentMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , commentMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 267 ---------------------------------------------
Creates a cookie matcher that matches expiry date . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher expiryDate ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher expiryDate ( Matcher < ? super Date > expiryDateMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , expiryDateMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 268 ---------------------------------------------
Creates a cookie matcher that matches the specified domain . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > domainMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , domainMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[territory]] ( Matcher < ? super String > domainMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , domainMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
Matches cookie in cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[path]] ( Matcher < ? super String > pathMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , pathMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[channel]] ( Matcher < ? super String > pathMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , pathMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 270 ---------------------------------------------
Applies a secured cookie to the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher secured ( Matcher < ? super Boolean > securedMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , securedMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher secured ( Matcher < ? super Boolean > securedMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , securedMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
Matches HTTP cookie matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher httpOnly ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher httpOnly ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 272 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 30 / 241 / 1 / 272:  27%|██▋       | 272/1000 [23:31<1:02:58,  5.19s/it][Succeeded / Failed / Skipped / Total] 30 / 241 / 1 / 272:  27%|██▋       | 273/1000 [23:32<1:02:40,  5.17s/it][Succeeded / Failed / Skipped / Total] 30 / 242 / 1 / 273:  27%|██▋       | 273/1000 [23:32<1:02:40,  5.17s/it][Succeeded / Failed / Skipped / Total] 30 / 242 / 1 / 273:  27%|██▋       | 274/1000 [23:32<1:02:23,  5.16s/it][Succeeded / Failed / Skipped / Total] 30 / 243 / 1 / 274:  27%|██▋       | 274/1000 [23:32<1:02:23,  5.16s/it][Succeeded / Failed / Skipped / Total] 30 / 243 / 1 / 274:  28%|██▊       | 275/1000 [23:33<1:02:05,  5.14s/it][Succeeded / Failed / Skipped / Total] 30 / 244 / 1 / 275:  28%|██▊       | 275/1000 [23:33<1:02:05,  5.14s/it][Succeeded / Failed / Skipped / Total] 30 / 244 / 1 / 275:  28%|██▊       | 276/1000 [23:33<1:01:48,  5.12s/it][Succeeded / Failed / Skipped / Total] 30 / 245 / 1 / 276:  28%|██▊       | 276/1000 [23:33<1:01:48,  5.12s/it][Succeeded / Failed / Skipped / Total] 30 / 245 / 1 / 276:  28%|██▊       | 277/1000 [23:33<1:01:30,  5.10s/it][Succeeded / Failed / Skipped / Total] 30 / 246 / 1 / 277:  28%|██▊       | 277/1000 [23:33<1:01:30,  5.10s/it][Succeeded / Failed / Skipped / Total] 30 / 246 / 1 / 277:  28%|██▊       | 278/1000 [23:34<1:01:12,  5.09s/it][Succeeded / Failed / Skipped / Total] 30 / 247 / 1 / 278:  28%|██▊       | 278/1000 [23:34<1:01:12,  5.09s/it][Succeeded / Failed / Skipped / Total] 30 / 247 / 1 / 278:  28%|██▊       | 279/1000 [23:34<1:00:55,  5.07s/it][Succeeded / Failed / Skipped / Total] 30 / 248 / 1 / 279:  28%|██▊       | 279/1000 [23:34<1:00:55,  5.07s/it][Succeeded / Failed / Skipped / Total] 30 / 248 / 1 / 279:  28%|██▊       | 280/1000 [23:34<1:00:38,  5.05s/it][Succeeded / Failed / Skipped / Total] 30 / 249 / 1 / 280:  28%|██▊       | 280/1000 [23:34<1:00:38,  5.05s/it][Succeeded / Failed / Skipped / Total] 30 / 249 / 1 / 280:  28%|██▊       | 281/1000 [23:35<1:00:21,  5.04s/it][Succeeded / Failed / Skipped / Total] 30 / 250 / 1 / 281:  28%|██▊       | 281/1000 [23:35<1:00:21,  5.04s/it][Succeeded / Failed / Skipped / Total] 30 / 250 / 1 / 281:  28%|██▊       | 282/1000 [23:35<1:00:03,  5.02s/it]Sets basic authentication . --> Capital capitalized capital --> Socre: 1.0

[[[[Adv]]]]: public void [[basic]] ( String [[host]] , int port , String user , String [[pass]] ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[host]] , port ) , new UsernamePasswordCredentials ( user , [[pass]] ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[capital]] ( String [[entertainment]] , int port , String user , String [[ferry]] ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[entertainment]] , port ) , new UsernamePasswordCredentials ( user , [[ferry]] ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 273 ---------------------------------------------
Matches a cookie that matches the max age of the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher maxAge ( Matcher < ? super Integer > maxAgeMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , maxAgeMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher maxAge ( Matcher < ? super Integer > maxAgeMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , maxAgeMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
Expect a header that matches the expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String headerName , Matcher < String > expectedValueMatcher ) { spec . header ( headerName , expectedValueMatcher ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String headerName , Matcher < String > expectedValueMatcher ) { spec . header ( headerName , expectedValueMatcher ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 275 ---------------------------------------------
Expect a header with the expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String headerName , String expectedValue ) { spec . header ( headerName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder expectHeader ( String headerName , String expectedValue ) { spec . header ( headerName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 276 ---------------------------------------------
Expect a cookie with expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder expectCookie ( String cookieName , String expectedValue ) { spec . cookie ( cookieName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder expectCookie ( String cookieName , String expectedValue ) { spec . cookie ( cookieName , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 277 ---------------------------------------------
Applies a cookie to the cookieMatcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > versionMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , versionMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[corpus]] ( Matcher < ? super Integer > versionMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , versionMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 278 ---------------------------------------------
Default implementation of JsonPathConfig . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonPathConfig numberReturnType ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig numberReturnType ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 279 ---------------------------------------------
Default parser type . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonPathConfig defaultParserType ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig defaultParserType ( JsonParserType defaultParserType ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 280 ---------------------------------------------
Sets default logging for this request --> [[[FAILED]]]

[[[[Adv]]]]: public LogConfig defaultStream ( PrintStream printStream ) { return new LogConfig ( printStream , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig defaultStream ( PrintStream printStream ) { return new LogConfig ( printStream , "True" == "True" , logDetailIfValidationFails , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 281 ---------------------------------------------
Enable logging of request and response . --> [[[FAILED]]]

[[[[Adv]]]]: public LogConfig enableLoggingOfRequestAndResponseIfValidationFails ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig enableLoggingOfRequestAndResponseIfValidationFails ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "True" == "True" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 282 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 30 / 251 / 1 / 282:  28%|██▊       | 282/1000 [23:35<1:00:03,  5.02s/it][Succeeded / Failed / Skipped / Total] 30 / 251 / 1 / 282:  28%|██▊       | 283/1000 [23:35<59:46,  5.00s/it]  [Succeeded / Failed / Skipped / Total] 30 / 252 / 1 / 283:  28%|██▊       | 283/1000 [23:35<59:46,  5.00s/it][Succeeded / Failed / Skipped / Total] 30 / 252 / 1 / 283:  28%|██▊       | 284/1000 [23:36<59:30,  4.99s/it][Succeeded / Failed / Skipped / Total] 30 / 253 / 1 / 284:  28%|██▊       | 284/1000 [23:36<59:30,  4.99s/it][Succeeded / Failed / Skipped / Total] 30 / 253 / 1 / 284:  28%|██▊       | 285/1000 [23:36<59:13,  4.97s/it][Succeeded / Failed / Skipped / Total] 30 / 254 / 1 / 285:  28%|██▊       | 285/1000 [23:36<59:13,  4.97s/it][Succeeded / Failed / Skipped / Total] 30 / 254 / 1 / 285:  29%|██▊       | 286/1000 [23:36<58:56,  4.95s/it][Succeeded / Failed / Skipped / Total] 30 / 255 / 1 / 286:  29%|██▊       | 286/1000 [23:36<58:56,  4.95s/it][Succeeded / Failed / Skipped / Total] 30 / 255 / 1 / 286:  29%|██▊       | 287/1000 [23:37<58:40,  4.94s/it][Succeeded / Failed / Skipped / Total] 30 / 256 / 1 / 287:  29%|██▊       | 287/1000 [23:37<58:40,  4.94s/it][Succeeded / Failed / Skipped / Total] 30 / 256 / 1 / 287:  29%|██▉       | 288/1000 [23:37<58:24,  4.92s/it][Succeeded / Failed / Skipped / Total] 30 / 257 / 1 / 288:  29%|██▉       | 288/1000 [23:37<58:24,  4.92s/it][Succeeded / Failed / Skipped / Total] 30 / 257 / 1 / 288:  29%|██▉       | 289/1000 [23:37<58:08,  4.91s/it][Succeeded / Failed / Skipped / Total] 30 / 258 / 1 / 289:  29%|██▉       | 289/1000 [23:37<58:08,  4.91s/it][Succeeded / Failed / Skipped / Total] 30 / 258 / 1 / 289:  29%|██▉       | 290/1000 [23:38<57:52,  4.89s/it][Succeeded / Failed / Skipped / Total] 30 / 259 / 1 / 290:  29%|██▉       | 290/1000 [23:38<57:52,  4.89s/it][Succeeded / Failed / Skipped / Total] 30 / 259 / 1 / 290:  29%|██▉       | 291/1000 [23:38<57:36,  4.87s/it][Succeeded / Failed / Skipped / Total] 30 / 260 / 1 / 291:  29%|██▉       | 291/1000 [23:38<57:36,  4.87s/it][Succeeded / Failed / Skipped / Total] 30 / 260 / 1 / 291:  29%|██▉       | 292/1000 [23:38<57:20,  4.86s/it]Returns a proxy with the specified host name . --> [[[FAILED]]]

[[[[Adv]]]]: public ProxySpecification withHost ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification withHost ( String [[management]] ) { return new ProxySpecification ( [[management]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 283 ---------------------------------------------
Default configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartConfig defaultBoundary ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , defaultBoundary , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig defaultBoundary ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , defaultBoundary , defaultCharset , "True" == "True" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 284 ---------------------------------------------
Adds an attribute to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addAttribute ( String attributeName , Object attributeValue ) { spec . attribute ( attributeName , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addAttribute ( String attributeName , Object attributeValue ) { spec . attribute ( attributeName , attributeValue ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 285 ---------------------------------------------
Add a header to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addHeader ( String headerName , String headerValue ) { spec . header ( headerName , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addHeader ( String headerName , String headerValue ) { spec . header ( headerName , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 286 ---------------------------------------------
Adds a multi part . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addMultiPart ( String controlName , String contentBody , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addMultiPart ( String controlName , String contentBody , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 287 ---------------------------------------------
Add a result handler . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addResultHandlers ( ResultHandler resultHandler , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( resultHandler , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder addResultHandlers ( ResultHandler resultHandler , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( resultHandler , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 288 ---------------------------------------------
Sets a parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > HttpClientConfig setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > HttpClientConfig setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( httpClientParams ) ; newParams . put ( parameterName , parameterValue ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 289 ---------------------------------------------
Add additional http client parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig addParams ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig addParams ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > newParams = new HashMap < String , Object > ( this . httpClientParams ) ; newParams . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , newParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 290 ---------------------------------------------
Configures the HttpClientFactory . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig httpClientFactory ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig httpClientFactory ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "True" == "True" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 291 ---------------------------------------------
Configurable HTTP Multipart mode . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpClientConfig httpMultipartMode ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig httpMultipartMode ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , httpClient , "True" == "True" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 292 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 30 / 261 / 1 / 292:  29%|██▉       | 292/1000 [23:38<57:20,  4.86s/it][Succeeded / Failed / Skipped / Total] 30 / 261 / 1 / 292:  29%|██▉       | 293/1000 [23:45<57:18,  4.86s/it][Succeeded / Failed / Skipped / Total] 30 / 262 / 1 / 293:  29%|██▉       | 293/1000 [23:45<57:18,  4.86s/it][Succeeded / Failed / Skipped / Total] 30 / 262 / 1 / 293:  29%|██▉       | 294/1000 [23:47<57:08,  4.86s/it][Succeeded / Failed / Skipped / Total] 30 / 263 / 1 / 294:  29%|██▉       | 294/1000 [23:47<57:08,  4.86s/it][Succeeded / Failed / Skipped / Total] 30 / 263 / 1 / 294:  30%|██▉       | 295/1000 [23:53<57:06,  4.86s/it][Succeeded / Failed / Skipped / Total] 30 / 264 / 1 / 295:  30%|██▉       | 295/1000 [23:53<57:06,  4.86s/it][Succeeded / Failed / Skipped / Total] 30 / 264 / 1 / 295:  30%|██▉       | 296/1000 [23:57<56:59,  4.86s/it][Succeeded / Failed / Skipped / Total] 30 / 265 / 1 / 296:  30%|██▉       | 296/1000 [23:57<56:59,  4.86s/it][Succeeded / Failed / Skipped / Total] 30 / 265 / 1 / 296:  30%|██▉       | 297/1000 [24:05<57:01,  4.87s/it][Succeeded / Failed / Skipped / Total] 31 / 265 / 1 / 297:  30%|██▉       | 297/1000 [24:05<57:01,  4.87s/it][Succeeded / Failed / Skipped / Total] 31 / 265 / 1 / 297:  30%|██▉       | 298/1000 [24:17<57:13,  4.89s/it][Succeeded / Failed / Skipped / Total] 31 / 266 / 1 / 298:  30%|██▉       | 298/1000 [24:17<57:13,  4.89s/it][Succeeded / Failed / Skipped / Total] 31 / 266 / 1 / 298:  30%|██▉       | 299/1000 [24:46<58:04,  4.97s/it][Succeeded / Failed / Skipped / Total] 31 / 267 / 1 / 299:  30%|██▉       | 299/1000 [24:46<58:04,  4.97s/it][Succeeded / Failed / Skipped / Total] 31 / 267 / 1 / 299:  30%|███       | 300/1000 [24:55<58:08,  4.98s/it][Succeeded / Failed / Skipped / Total] 31 / 268 / 1 / 300:  30%|███       | 300/1000 [24:55<58:08,  4.98s/it][Succeeded / Failed / Skipped / Total] 31 / 268 / 1 / 300:  30%|███       | 301/1000 [24:58<58:00,  4.98s/it][Succeeded / Failed / Skipped / Total] 31 / 269 / 1 / 301:  30%|███       | 301/1000 [24:58<58:00,  4.98s/it][Succeeded / Failed / Skipped / Total] 31 / 269 / 1 / 301:  30%|███       | 302/1000 [25:01<57:51,  4.97s/it][Succeeded / Failed / Skipped / Total] 31 / 270 / 1 / 302:  30%|███       | 302/1000 [25:01<57:51,  4.97s/it][Succeeded / Failed / Skipped / Total] 31 / 270 / 1 / 302:  30%|███       | 303/1000 [25:04<57:39,  4.96s/it][Succeeded / Failed / Skipped / Total] 31 / 271 / 1 / 303:  30%|███       | 303/1000 [25:04<57:39,  4.96s/it][Succeeded / Failed / Skipped / Total] 31 / 271 / 1 / 303:  30%|███       | 304/1000 [25:04<57:24,  4.95s/it][Succeeded / Failed / Skipped / Total] 31 / 272 / 1 / 304:  30%|███       | 304/1000 [25:04<57:24,  4.95s/it][Succeeded / Failed / Skipped / Total] 31 / 272 / 1 / 304:  30%|███       | 305/1000 [25:04<57:08,  4.93s/it]Gets a value . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > T get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( T ) jsonAssertion . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < T > T get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( T ) jsonAssertion . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 293 ---------------------------------------------
Gets int value . --> [[[FAILED]]]

[[[[Adv]]]]: public int getInt ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int getInt ( String [[trajectory]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 294 ---------------------------------------------
Set the proxy to use . --> [[[FAILED]]]

[[[[Adv]]]]: public void setProxy ( String [[host]] , int [[port]] , String [[scheme]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( [[host]] , [[port]] , [[scheme]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void setProxy ( String [[government]] , int [[harbour]] , String [[mastermind]] ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( [[government]] , [[harbour]] , [[mastermind]] ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 295 ---------------------------------------------
Get short . --> [[[FAILED]]]

[[[[Adv]]]]: public short getShort ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short getShort ( String [[way]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 296 ---------------------------------------------
Gets byte . --> [[[FAILED]]]

[[[[Adv]]]]: public byte getByte ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte getByte ( String [[access]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 297 ---------------------------------------------
Creates an HttpRequestBase based on the given URI and HTTP method . --> Creates a HttpRequestBase --> Socre: 1.0

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean hasBody ) { String [[method]] = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > [[type]] = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( [[method]] ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean hasBody ) { String [[art]] = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > [[division]] = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( [[art]] ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 298 ---------------------------------------------
Gets long . --> [[[FAILED]]]

[[[[Adv]]]]: public long getLong ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long getLong ( String [[access]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 299 ---------------------------------------------
Get a float value . --> [[[FAILED]]]

[[[[Adv]]]]: public float getFloat ( String path ) { final Object [[value]] = get ( path ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float getFloat ( String path ) { final Object [[toll]] = get ( path ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 300 ---------------------------------------------
Get a double . --> [[[FAILED]]]

[[[[Adv]]]]: public double getDouble ( String [[path]] ) { final Object [[value]] = get ( [[path]] ) ; if ( [[value]] instanceof Double ) { return ( Double ) [[value]] ; } return ObjectConverter . convertObjectTo ( [[value]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double getDouble ( String [[track]] ) { final Object [[heed]] = get ( [[track]] ) ; if ( [[heed]] instanceof Double ) { return ( Double ) [[heed]] ; } return ObjectConverter . convertObjectTo ( [[heed]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 301 ---------------------------------------------
Gets a map element . --> [[[FAILED]]]

[[[[Adv]]]]: public < K , V > Map < K , V > getMap ( String [[path]] ) { return get ( [[path]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < K , V > Map < K , V > getMap ( String [[chute]] ) { return get ( [[chute]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 302 ---------------------------------------------
Gets the value of the given path as a object . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > T getObject ( String path , Class < T > objectType ) { Object [[object]] = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( [[object]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < T > T getObject ( String path , Class < T > objectType ) { Object [[grail]] = getFromPath ( path , "False" != "False" ) ; return getObjectAsType ( [[grail]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 303 ---------------------------------------------
Sets the body of the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object [[object]] , ObjectMapper mapper ) { spec . body ( [[object]] , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder setBody ( Object [[body]] , ObjectMapper mapper ) { spec . body ( [[body]] , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 304 ---------------------------------------------
Add a parameter to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder addParam ( String parameterName , Object ... parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder addParam ( String parameterName , Object ... parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 305 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 31 / 273 / 1 / 305:  30%|███       | 305/1000 [25:04<57:08,  4.93s/it][Succeeded / Failed / Skipped / Total] 31 / 273 / 1 / 305:  31%|███       | 306/1000 [25:05<56:53,  4.92s/it][Succeeded / Failed / Skipped / Total] 31 / 274 / 1 / 306:  31%|███       | 306/1000 [25:05<56:53,  4.92s/it][Succeeded / Failed / Skipped / Total] 31 / 274 / 1 / 306:  31%|███       | 307/1000 [25:07<56:43,  4.91s/it][Succeeded / Failed / Skipped / Total] 32 / 274 / 1 / 307:  31%|███       | 307/1000 [25:07<56:43,  4.91s/it][Succeeded / Failed / Skipped / Total] 32 / 274 / 1 / 307:  31%|███       | 308/1000 [25:10<56:33,  4.90s/it][Succeeded / Failed / Skipped / Total] 32 / 275 / 1 / 308:  31%|███       | 308/1000 [25:10<56:33,  4.90s/it][Succeeded / Failed / Skipped / Total] 32 / 275 / 1 / 308:  31%|███       | 309/1000 [25:20<56:40,  4.92s/it][Succeeded / Failed / Skipped / Total] 33 / 275 / 1 / 309:  31%|███       | 309/1000 [25:20<56:40,  4.92s/it][Succeeded / Failed / Skipped / Total] 33 / 275 / 1 / 309:  31%|███       | 310/1000 [25:31<56:48,  4.94s/it][Succeeded / Failed / Skipped / Total] 34 / 275 / 1 / 310:  31%|███       | 310/1000 [25:31<56:48,  4.94s/it][Succeeded / Failed / Skipped / Total] 34 / 275 / 1 / 310:  31%|███       | 311/1000 [25:37<56:46,  4.94s/it][Succeeded / Failed / Skipped / Total] 34 / 276 / 1 / 311:  31%|███       | 311/1000 [25:37<56:46,  4.94s/it][Succeeded / Failed / Skipped / Total] 34 / 276 / 1 / 311:  31%|███       | 312/1000 [26:30<58:27,  5.10s/it][Succeeded / Failed / Skipped / Total] 34 / 277 / 1 / 312:  31%|███       | 312/1000 [26:30<58:27,  5.10s/it][Succeeded / Failed / Skipped / Total] 34 / 277 / 1 / 312:  31%|███▏      | 313/1000 [26:38<58:28,  5.11s/it][Succeeded / Failed / Skipped / Total] 34 / 278 / 1 / 313:  31%|███▏      | 313/1000 [26:38<58:28,  5.11s/it][Succeeded / Failed / Skipped / Total] 34 / 278 / 1 / 313:  31%|███▏      | 314/1000 [26:40<58:16,  5.10s/it]Adds a parameter to the request specification . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder addParam ( String parameterName , Collection < ? > parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder addParam ( String parameterName , Collection < ? > parameterValues ) { spec . param ( parameterName , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 306 ---------------------------------------------
Create a custom update strategy . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcParamConfig formParamsUpdateStrategy ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig formParamsUpdateStrategy ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "True" == "True" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 307 ---------------------------------------------
Log response to the output stream . --> log to output --> Socre: 1.0

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream [[stream]] , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( [[stream]] , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream [[culvert]] , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( [[culvert]] , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 308 ---------------------------------------------
Get the path as a List . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > List < T > getList ( String [[path]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > [[original]] = get ( [[path]] ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( [[original]] != null ) { for ( T t : [[original]] ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > getList ( String [[key]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > [[dead]] = get ( [[key]] ) ; final List < T > newList = new LinkedList < T > ( ) ; if ( [[dead]] != null ) { for ( T t : [[dead]] ) { T e ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 309 ---------------------------------------------
Clean up data from the backing map . --> Clean up for data retrieval --> Socre: 1.0

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > [[set]] = backingMap . get ( keyAndSource . key ) ; if ( [[set]] != null ) { [[set]] . remove ( keyAndSource . source ) ; if ( [[set]] . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource keyAndSource : keysAndSources ) { Multiset < Object > [[fixation]] = backingMap . get ( keyAndSource . key ) ; if ( [[fixation]] != null ) { [[fixation]] . remove ( keyAndSource . source ) ; if ( [[fixation]] . isEmpty ( ) ) { backingMap . remove ( keyAndSource . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 310 ---------------------------------------------
Adds additional cookies to the request . --> Convenience method for convenience --> Socre: 1.0

[[[[Adv]]]]: public static Cookies cookies ( Cookie [[cookie]] , Cookie ... additionalCookies ) { AssertParameter . notNull ( [[cookie]] , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( [[cookie]] ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies cookies ( Cookie [[caramel]] , Cookie ... additionalCookies ) { AssertParameter . notNull ( [[caramel]] , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( [[caramel]] ) ; Collections . addAll ( cookieList , additionalCookies ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 311 ---------------------------------------------
Indexes the bindings of this context . --> [[[FAILED]]]

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[grade]] ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 312 ---------------------------------------------
Utility method to convert constant strings into constants . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > BindingImpl < T > convertConstantStringBinding ( Key < T > [[key]] , Errors [[errors]] ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > convertConstantStringBinding ( Key < T > [[pith]] , Errors [[mistakes]] ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 313 ---------------------------------------------
Removes a failed binding . --> [[[FAILED]]]

[[[[Adv]]]]: private void removeFailedJitBinding ( Binding < ? > [[binding]] , InjectionPoint ip ) { failedJitBindings . add ( [[binding]] . getKey ( ) ) ; jitBindings . remove ( [[binding]] . getKey ( ) ) ; membersInjectorStore . remove ( [[binding]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[binding]] ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void removeFailedJitBinding ( Binding < ? > [[bond]] , InjectionPoint ip ) { failedJitBindings . add ( [[bond]] . getKey ( ) ) ; jitBindings . remove ( [[bond]] . getKey ( ) ) ; membersInjectorStore . remove ( [[bond]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[bond]] ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 314 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 34 / 279 / 1 / 314:  31%|███▏      | 314/1000 [26:40<58:16,  5.10s/it][Succeeded / Failed / Skipped / Total] 34 / 279 / 1 / 314:  32%|███▏      | 315/1000 [26:40<58:00,  5.08s/it][Succeeded / Failed / Skipped / Total] 34 / 280 / 1 / 315:  32%|███▏      | 315/1000 [26:40<58:00,  5.08s/it][Succeeded / Failed / Skipped / Total] 34 / 280 / 1 / 315:  32%|███▏      | 316/1000 [26:47<57:58,  5.09s/it][Succeeded / Failed / Skipped / Total] 34 / 281 / 1 / 316:  32%|███▏      | 316/1000 [26:47<57:58,  5.09s/it][Succeeded / Failed / Skipped / Total] 34 / 281 / 1 / 316:  32%|███▏      | 317/1000 [26:53<57:57,  5.09s/it][Succeeded / Failed / Skipped / Total] 34 / 282 / 1 / 317:  32%|███▏      | 317/1000 [26:53<57:57,  5.09s/it][Succeeded / Failed / Skipped / Total] 34 / 282 / 1 / 317:  32%|███▏      | 318/1000 [27:04<58:04,  5.11s/it][Succeeded / Failed / Skipped / Total] 34 / 283 / 1 / 318:  32%|███▏      | 318/1000 [27:04<58:04,  5.11s/it][Succeeded / Failed / Skipped / Total] 34 / 283 / 1 / 318:  32%|███▏      | 319/1000 [27:08<57:57,  5.11s/it][Succeeded / Failed / Skipped / Total] 34 / 284 / 1 / 319:  32%|███▏      | 319/1000 [27:08<57:57,  5.11s/it][Succeeded / Failed / Skipped / Total] 34 / 284 / 1 / 319:  32%|███▏      | 320/1000 [27:09<57:42,  5.09s/it][Succeeded / Failed / Skipped / Total] 34 / 285 / 1 / 320:  32%|███▏      | 320/1000 [27:09<57:42,  5.09s/it][Succeeded / Failed / Skipped / Total] 34 / 285 / 1 / 320:  32%|███▏      | 321/1000 [27:09<57:27,  5.08s/it][Succeeded / Failed / Skipped / Total] 34 / 286 / 1 / 321:  32%|███▏      | 321/1000 [27:09<57:27,  5.08s/it][Succeeded / Failed / Skipped / Total] 34 / 286 / 1 / 321:  32%|███▏      | 322/1000 [27:09<57:11,  5.06s/it]Sets the NTLM credentials . --> [[[FAILED]]]

[[[[Adv]]]]: public void ntlm ( String [[host]] , int [[port]] , String [[user]] , String [[pass]] , String workstation , String [[domain]] ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[host]] , [[port]] ) , new NTCredentials ( [[user]] , [[pass]] , workstation , [[domain]] ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void ntlm ( String [[entertainment]] , int [[pier]] , String [[subscriber]] , String [[adoption]] , String workstation , String [[passage]] ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( [[entertainment]] , [[pier]] ) , new NTCredentials ( [[subscriber]] , [[adoption]] , workstation , [[passage]] ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 315 ---------------------------------------------
Creates an uninitialized binding . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 316 ---------------------------------------------
Returns the internal dependencies of the given binding . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > getInternalDependencies ( BindingImpl < ? > [[binding]] ) { if ( [[binding]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[binding]] ) . getInternalDependencies ( ) ; } else if ( [[binding]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[binding]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > getInternalDependencies ( BindingImpl < ? > [[bandage]] ) { if ( [[bandage]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[bandage]] ) . getInternalDependencies ( ) ; } else if ( [[bandage]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[bandage]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 317 ---------------------------------------------
Gets all parameters . --> [[[FAILED]]]

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext [[context]] , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int [[size]] = parameterInjectors . length ; Object [ ] parameters = new Object [ [[size]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext [[circumstance]] , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int [[dimension]] = parameterInjectors . length ; Object [ ] parameters = new Object [ [[dimension]] ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 318 ---------------------------------------------
Helper method to bind an injector . --> [[[FAILED]]]

[[[[Adv]]]]: private static void bindInjector ( InjectorImpl injector ) { Key < Injector > [[key]] = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( [[key]] , new ProviderInstanceBindingImpl < Injector > ( injector , [[key]] , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void bindInjector ( InjectorImpl injector ) { Key < Injector > [[centre]] = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( injector ) ; injector . state . putBinding ( [[centre]] , new ProviderInstanceBindingImpl < Injector > ( injector , [[centre]] , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 319 ---------------------------------------------
Binds the logger . --> [[[FAILED]]]

[[[[Adv]]]]: private static void bindLogger ( InjectorImpl injector ) { Key < Logger > [[key]] = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( [[key]] , new ProviderInstanceBindingImpl < Logger > ( injector , [[key]] , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void bindLogger ( InjectorImpl injector ) { Key < Logger > [[clavier]] = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( [[clavier]] , new ProviderInstanceBindingImpl < Logger > ( injector , [[clavier]] , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 320 ---------------------------------------------
Returns true if the overrides are overridden . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean overrides ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean overrides ( Method a , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 321 ---------------------------------------------
Initializes the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void initializeDelegate ( MembersInjector < T > delegate ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void initializeDelegate ( MembersInjector < T > delegate ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 322 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 34 / 287 / 1 / 322:  32%|███▏      | 322/1000 [27:09<57:11,  5.06s/it][Succeeded / Failed / Skipped / Total] 34 / 287 / 1 / 322:  32%|███▏      | 323/1000 [27:10<56:58,  5.05s/it][Succeeded / Failed / Skipped / Total] 34 / 288 / 1 / 323:  32%|███▏      | 323/1000 [27:10<56:58,  5.05s/it][Succeeded / Failed / Skipped / Total] 34 / 288 / 1 / 323:  32%|███▏      | 324/1000 [27:13<56:49,  5.04s/it][Succeeded / Failed / Skipped / Total] 34 / 289 / 1 / 324:  32%|███▏      | 324/1000 [27:13<56:49,  5.04s/it][Succeeded / Failed / Skipped / Total] 34 / 289 / 1 / 324:  32%|███▎      | 325/1000 [27:14<56:34,  5.03s/it][Succeeded / Failed / Skipped / Total] 34 / 290 / 1 / 325:  32%|███▎      | 325/1000 [27:14<56:34,  5.03s/it][Succeeded / Failed / Skipped / Total] 34 / 290 / 1 / 325:  33%|███▎      | 326/1000 [27:14<56:19,  5.01s/it][Succeeded / Failed / Skipped / Total] 34 / 291 / 1 / 326:  33%|███▎      | 326/1000 [27:14<56:19,  5.01s/it][Succeeded / Failed / Skipped / Total] 34 / 291 / 1 / 326:  33%|███▎      | 327/1000 [27:15<56:05,  5.00s/it][Succeeded / Failed / Skipped / Total] 34 / 292 / 1 / 327:  33%|███▎      | 327/1000 [27:15<56:05,  5.00s/it][Succeeded / Failed / Skipped / Total] 34 / 292 / 1 / 327:  33%|███▎      | 328/1000 [27:15<55:50,  4.99s/it][Succeeded / Failed / Skipped / Total] 35 / 292 / 1 / 328:  33%|███▎      | 328/1000 [27:15<55:50,  4.99s/it][Succeeded / Failed / Skipped / Total] 35 / 292 / 1 / 328:  33%|███▎      | 329/1000 [27:23<55:51,  5.00s/it][Succeeded / Failed / Skipped / Total] 35 / 293 / 1 / 329:  33%|███▎      | 329/1000 [27:23<55:51,  5.00s/it][Succeeded / Failed / Skipped / Total] 35 / 293 / 1 / 329:  33%|███▎      | 330/1000 [27:23<55:37,  4.98s/it][Succeeded / Failed / Skipped / Total] 35 / 294 / 1 / 330:  33%|███▎      | 330/1000 [27:23<55:37,  4.98s/it][Succeeded / Failed / Skipped / Total] 35 / 294 / 1 / 330:  33%|███▎      | 331/1000 [27:28<55:31,  4.98s/it]Returns the type of provider . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > providerType ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > providerType ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 323 ---------------------------------------------
Checks to see if there are duplicate binding annotations . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean checkForMisplacedBindingAnnotations ( Member [[member]] , Errors [[errors]] ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( [[errors]] , [[member]] , ( ( AnnotatedElement ) [[member]] ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean checkForMisplacedBindingAnnotations ( Member [[commissioner]] , Errors [[bloopers]] ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( [[bloopers]] , [[commissioner]] , ( ( AnnotatedElement ) [[commissioner]] ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 324 ---------------------------------------------
Adds a cookie to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder addCookie ( String [[key]] , Object [[value]] , Object ... cookieNameValuePairs ) { spec . cookie ( [[key]] , [[value]] , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder addCookie ( String [[string]] , Object [[assessment]] , Object ... cookieNameValuePairs ) { spec . cookie ( [[string]] , [[assessment]] , cookieNameValuePairs ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 325 ---------------------------------------------
Prepare built - in converters . --> [[[FAILED]]]

[[[[Adv]]]]: static void prepareBuiltInConverters ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void prepareBuiltInConverters ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 326 ---------------------------------------------
Converts the given class loader to the given class loader . --> [[[FAILED]]]

[[[[Adv]]]]: private static ClassLoader canonicalize ( ClassLoader classLoader ) { return classLoader != null ? classLoader : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader canonicalize ( ClassLoader classLoader ) { return classLoader != null ? classLoader : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 327 ---------------------------------------------
Tells whether the class has the same version of the same version --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean hasSameVersionOfCglib ( ClassLoader classLoader ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean hasSameVersionOfCglib ( ClassLoader classLoader ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 328 ---------------------------------------------
Resolve all types in the given array of types . --> Resolve all type literals --> Socre: 1.0

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] [[types]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[types]] . length ] ; for ( int t = 0 ; t < [[types]] . length ; t ++ ) { result [ t ] = resolve ( [[types]] [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] [[items]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[items]] . length ] ; for ( int t = 0 ; t < [[items]] . length ; t ++ ) { result [ t ] = resolve ( [[items]] [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 329 ---------------------------------------------
Convert a TypeLiteral into a TypeLiteral . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > typeLiteral ) { Type [[type]] = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( [[type]] ) ) { Errors [[errors]] = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( [[errors]] . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) [[type]] ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > typeLiteral ) { Type [[assortment]] = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( [[assortment]] ) ) { Errors [[miscues]] = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( [[miscues]] . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) [[assortment]] ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 330 ---------------------------------------------
Request an initializable object for injection point . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > provisionCallback = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
[Succeeded / Failed / Skipped / Total] 36 / 294 / 1 / 331:  33%|███▎      | 331/1000 [27:28<55:31,  4.98s/it][Succeeded / Failed / Skipped / Total] 36 / 294 / 1 / 331:  33%|███▎      | 332/1000 [27:28<55:16,  4.97s/it][Succeeded / Failed / Skipped / Total] 36 / 295 / 1 / 332:  33%|███▎      | 332/1000 [27:28<55:17,  4.97s/it][Succeeded / Failed / Skipped / Total] 36 / 295 / 1 / 332:  33%|███▎      | 333/1000 [27:28<55:02,  4.95s/it][Succeeded / Failed / Skipped / Total] 36 / 296 / 1 / 333:  33%|███▎      | 333/1000 [27:28<55:02,  4.95s/it][Succeeded / Failed / Skipped / Total] 36 / 296 / 1 / 333:  33%|███▎      | 334/1000 [27:50<55:30,  5.00s/it][Succeeded / Failed / Skipped / Total] 37 / 296 / 1 / 334:  33%|███▎      | 334/1000 [27:50<55:30,  5.00s/it][Succeeded / Failed / Skipped / Total] 37 / 296 / 1 / 334:  34%|███▎      | 335/1000 [27:52<55:20,  4.99s/it][Succeeded / Failed / Skipped / Total] 37 / 297 / 1 / 335:  34%|███▎      | 335/1000 [27:52<55:20,  4.99s/it][Succeeded / Failed / Skipped / Total] 37 / 297 / 1 / 335:  34%|███▎      | 336/1000 [28:10<55:39,  5.03s/it][Succeeded / Failed / Skipped / Total] 38 / 297 / 1 / 336:  34%|███▎      | 336/1000 [28:10<55:39,  5.03s/it][Succeeded / Failed / Skipped / Total] 38 / 297 / 1 / 336:  34%|███▎      | 337/1000 [28:10<55:25,  5.02s/it][Succeeded / Failed / Skipped / Total] 38 / 298 / 1 / 337:  34%|███▎      | 337/1000 [28:10<55:25,  5.02s/it][Succeeded / Failed / Skipped / Total] 38 / 298 / 1 / 337:  34%|███▍      | 338/1000 [28:13<55:17,  5.01s/it][Succeeded / Failed / Skipped / Total] 38 / 299 / 1 / 338:  34%|███▍      | 338/1000 [28:13<55:17,  5.01s/it][Succeeded / Failed / Skipped / Total] 38 / 299 / 1 / 338:  34%|███▍      | 339/1000 [28:17<55:09,  5.01s/it]--------------------------------------------- Result 331 ---------------------------------------------
Fix annotations . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > [[key]] ) { return [[key]] . getAnnotation ( ) == null ? [[key]] : Key . get ( [[key]] . getTypeLiteral ( ) , [[key]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > [[cream]] ) { return [[cream]] . getAnnotation ( ) == null ? [[cream]] : Key . get ( [[cream]] . getTypeLiteral ( ) , [[cream]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 332 ---------------------------------------------
Creates a new instance of the given arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public T newInstance ( Object [ ] args ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T newInstance ( Object [ ] args ) throws Throwable { constructor . setAccessible ( "True" == "True" ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 333 ---------------------------------------------
Override to customize the ServletRequest . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest withDispatcher ( ServletRequest servletRequest , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest withDispatcher ( ServletRequest servletRequest , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 334 ---------------------------------------------
Creates a scope from the given scope . --> region ScopeFactory --> Socre: 1.0

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > [[key]] , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > [[essence]] , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return creator ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 335 ---------------------------------------------
Validates the initial injectables . --> [[[FAILED]]]

[[[[Adv]]]]: void validateOustandingInjections ( Errors [[errors]] ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > [[reference]] : pendingInjections ) { try { [[reference]] . validate ( [[errors]] ) ; } catch ( ErrorsException e ) { [[errors]] . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void validateOustandingInjections ( Errors [[bloopers]] ) { validationStarted = "True" == "True" ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > [[browse]] : pendingInjections ) { try { [[browse]] . validate ( [[bloopers]] ) ; } catch ( ErrorsException e ) { [[bloopers]] . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 336 ---------------------------------------------
Normalize a path . --> Normalize the route --> Socre: 1.0

[[[[Adv]]]]: static String normalizePath ( String [[path]] ) { StringBuilder sb = new StringBuilder ( [[path]] . length ( ) ) ; int queryStart = [[path]] . indexOf ( ' ' ) ; String [[query]] = null ; if ( queryStart != - 1 ) { [[query]] = [[path]] . substring ( queryStart ) ; [[path]] = [[path]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String normalizePath ( String [[route]] ) { StringBuilder sb = new StringBuilder ( [[route]] . length ( ) ) ; int queryStart = [[route]] . indexOf ( ' ' ) ; String [[inquiry]] = null ; if ( queryStart != - 1 ) { [[inquiry]] = [[route]] . substring ( queryStart ) ; [[route]] = [[route]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 337 ---------------------------------------------
Returns the annotation for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T extends Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T extends Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 338 ---------------------------------------------
Returns true if the specified annotation is retained at runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean isRetainedAtRuntime ( Class < ? extends Annotation > annotationType ) { Retention [[retention]] = annotationType . getAnnotation ( Retention . class ) ; return [[retention]] != null && [[retention]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean isRetainedAtRuntime ( Class < ? extends Annotation > annotationType ) { Retention [[bondage]] = annotationType . getAnnotation ( Retention . class ) ; return [[bondage]] != null && [[bondage]] . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 339 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 38 / 300 / 1 / 339:  34%|███▍      | 339/1000 [28:17<55:09,  5.01s/it][Succeeded / Failed / Skipped / Total] 38 / 300 / 1 / 339:  34%|███▍      | 340/1000 [28:46<55:52,  5.08s/it][Succeeded / Failed / Skipped / Total] 38 / 301 / 1 / 340:  34%|███▍      | 340/1000 [28:46<55:52,  5.08s/it][Succeeded / Failed / Skipped / Total] 38 / 301 / 1 / 340:  34%|███▍      | 341/1000 [29:00<56:03,  5.10s/it][Succeeded / Failed / Skipped / Total] 38 / 302 / 1 / 341:  34%|███▍      | 341/1000 [29:00<56:03,  5.10s/it][Succeeded / Failed / Skipped / Total] 38 / 302 / 1 / 341:  34%|███▍      | 342/1000 [29:00<55:49,  5.09s/it][Succeeded / Failed / Skipped / Total] 38 / 303 / 1 / 342:  34%|███▍      | 342/1000 [29:00<55:49,  5.09s/it][Succeeded / Failed / Skipped / Total] 38 / 303 / 1 / 342:  34%|███▍      | 343/1000 [29:01<55:35,  5.08s/it][Succeeded / Failed / Skipped / Total] 38 / 304 / 1 / 343:  34%|███▍      | 343/1000 [29:01<55:35,  5.08s/it][Succeeded / Failed / Skipped / Total] 38 / 304 / 1 / 343:  34%|███▍      | 344/1000 [29:09<55:36,  5.09s/it][Succeeded / Failed / Skipped / Total] 38 / 305 / 1 / 344:  34%|███▍      | 344/1000 [29:09<55:36,  5.09s/it][Succeeded / Failed / Skipped / Total] 38 / 305 / 1 / 344:  34%|███▍      | 345/1000 [29:09<55:22,  5.07s/it][Succeeded / Failed / Skipped / Total] 38 / 306 / 1 / 345:  34%|███▍      | 345/1000 [29:09<55:22,  5.07s/it][Succeeded / Failed / Skipped / Total] 38 / 306 / 1 / 345:  35%|███▍      | 346/1000 [29:13<55:13,  5.07s/it]Find scope annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static Class < ? extends Annotation > findScopeAnnotation ( Errors [[errors]] , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { [[errors]] . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > findScopeAnnotation ( Errors [[bloopers]] , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { [[bloopers]] . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 340 ---------------------------------------------
Make an injectable . --> [[[FAILED]]]

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping scoping , InjectorImpl injector , Errors [[errors]] ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding [[scope]] = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( [[scope]] != null ) { return forInstance ( [[scope]] . getScope ( ) ) ; } [[errors]] . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping scoping , InjectorImpl injector , Errors [[flubs]] ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding [[extent]] = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( [[extent]] != null ) { return forInstance ( [[extent]] . getScope ( ) ) ; } [[flubs]] . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 341 ---------------------------------------------
Returns the name of the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public static String nameOf ( Key < ? > [[key]] ) { Annotation annotation = [[key]] . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = [[key]] . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return [[key]] . getAnnotation ( ) . toString ( ) ; } else if ( [[key]] . getAnnotationType ( ) != null ) { return "@" + [[key]] . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String nameOf ( Key < ? > [[clavier]] ) { Annotation annotation = [[clavier]] . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = [[clavier]] . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return [[clavier]] . getAnnotation ( ) . toString ( ) ; } else if ( [[clavier]] . getAnnotationType ( ) != null ) { return "@" + [[clavier]] . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 342 ---------------------------------------------
Initializes the delegate provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void initializeDelegate ( Provider < T > delegate ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void initializeDelegate ( Provider < T > delegate ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( delegate , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 343 ---------------------------------------------
Adds the binding to the direct binding . --> [[[FAILED]]]

[[[[Adv]]]]: private void addDirectTypeBinding ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void addDirectTypeBinding ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 344 ---------------------------------------------
Retrieve a constructor from the cache . --> [[[FAILED]]]

[[[[Adv]]]]: public ConstructorInjector < ? > get ( InjectionPoint constructorInjector , Errors [[errors]] ) throws ErrorsException { return cache . get ( constructorInjector , [[errors]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > get ( InjectionPoint constructorInjector , Errors [[faults]] ) throws ErrorsException { return cache . get ( constructorInjector , [[faults]] ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 345 ---------------------------------------------
Check if interceptor has scope annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean hasScope ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation annotation : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean hasScope ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation annotation : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 346 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 38 / 307 / 1 / 346:  35%|███▍      | 346/1000 [29:13<55:13,  5.07s/it][Succeeded / Failed / Skipped / Total] 38 / 307 / 1 / 346:  35%|███▍      | 347/1000 [29:13<54:59,  5.05s/it][Succeeded / Failed / Skipped / Total] 38 / 308 / 1 / 347:  35%|███▍      | 347/1000 [29:13<54:59,  5.05s/it][Succeeded / Failed / Skipped / Total] 38 / 308 / 1 / 347:  35%|███▍      | 348/1000 [29:15<54:49,  5.04s/it][Succeeded / Failed / Skipped / Total] 38 / 309 / 1 / 348:  35%|███▍      | 348/1000 [29:15<54:49,  5.04s/it][Succeeded / Failed / Skipped / Total] 38 / 309 / 1 / 348:  35%|███▍      | 349/1000 [29:15<54:35,  5.03s/it][Succeeded / Failed / Skipped / Total] 38 / 310 / 1 / 349:  35%|███▍      | 349/1000 [29:15<54:35,  5.03s/it][Succeeded / Failed / Skipped / Total] 38 / 310 / 1 / 349:  35%|███▌      | 350/1000 [29:19<54:26,  5.03s/it][Succeeded / Failed / Skipped / Total] 39 / 310 / 1 / 350:  35%|███▌      | 350/1000 [29:19<54:26,  5.03s/it][Succeeded / Failed / Skipped / Total] 39 / 310 / 1 / 350:  35%|███▌      | 351/1000 [29:19<54:13,  5.01s/it][Succeeded / Failed / Skipped / Total] 39 / 311 / 1 / 351:  35%|███▌      | 351/1000 [29:19<54:13,  5.01s/it][Succeeded / Failed / Skipped / Total] 39 / 311 / 1 / 351:  35%|███▌      | 352/1000 [29:20<54:01,  5.00s/it][Succeeded / Failed / Skipped / Total] 39 / 312 / 1 / 352:  35%|███▌      | 352/1000 [29:20<54:01,  5.00s/it][Succeeded / Failed / Skipped / Total] 39 / 312 / 1 / 352:  35%|███▌      | 353/1000 [29:23<53:52,  5.00s/it]Creates a real map binder for the given key and value type . --> [[[FAILED]]]

[[[[Adv]]]]: static < [[K]] , V > RealMapBinder < [[K]] , V > newRealMapBinder ( Binder binder , TypeLiteral < [[K]] > keyType , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( binder , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < [[W]] , V > RealMapBinder < [[W]] , V > newRealMapBinder ( Binder binder , TypeLiteral < [[W]] > keyType , Key < V > valueTypeAndAnnotation ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( binder , keyType , valueType , valueTypeAndAnnotation . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 347 ---------------------------------------------
Gets the key for a new value . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > valueKey = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , valueKey ) ) ; return valueKey ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > entrySetBinder = bindingSelection . getEntrySetBinder ( ) ; Key < V > valueKey = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( entrySetBinder . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; entrySetBinder . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , valueKey ) ) ; return valueKey ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 348 ---------------------------------------------
Creates a new instance of the given construction context . --> [[[FAILED]]]

[[[[Adv]]]]: private T provision ( InternalContext [[context]] , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( [[context]] , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T provision ( InternalContext [[circumstance]] , ConstructionContext < T > constructionContext ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( [[circumstance]] , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; constructionContext . setProxyDelegates ( t ) ; } finally { constructionContext . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 349 ---------------------------------------------
Write the source code . --> [[[FAILED]]]

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object writeReplace ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int i = 0 ; i < sourcesAsStrings . length ; i ++ ) { sourcesAsStrings [ i ] = Errors . convert ( sourcesAsStrings [ i ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 350 ---------------------------------------------
Cleans the internal state of the given binding . --> looks for slough --> Socre: 1.0

[[[[Adv]]]]: private boolean [[cleanup]] ( BindingImpl < ? > [[binding]] , Set < Key > [[encountered]] ) { boolean bindingFailed = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( [[binding]] ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( [[encountered]] . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean [[slough]] ( BindingImpl < ? > [[bind]] , Set < Key > [[confrontation]] ) { boolean bindingFailed = "False" != "False" ; Set < Dependency < ? > > deps = getInternalDependencies ( [[bind]] ) ; for ( Dependency dep : deps ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( [[confrontation]] . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 351 ---------------------------------------------
Returns all registered methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > getAssistedMethods ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > getAssistedMethods ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 352 ---------------------------------------------
Returns a module for the given module . --> [[[FAILED]]]

[[[[Adv]]]]: static Module forModule ( Module [[module]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module forModule ( Module [[pad]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 353 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 39 / 313 / 1 / 353:  35%|███▌      | 353/1000 [29:23<53:52,  5.00s/it][Succeeded / Failed / Skipped / Total] 39 / 313 / 1 / 353:  35%|███▌      | 354/1000 [29:27<53:45,  4.99s/it][Succeeded / Failed / Skipped / Total] 39 / 314 / 1 / 354:  35%|███▌      | 354/1000 [29:27<53:45,  4.99s/it][Succeeded / Failed / Skipped / Total] 39 / 314 / 1 / 354:  36%|███▌      | 355/1000 [29:28<53:32,  4.98s/it][Succeeded / Failed / Skipped / Total] 39 / 315 / 1 / 355:  36%|███▌      | 355/1000 [29:28<53:32,  4.98s/it][Succeeded / Failed / Skipped / Total] 39 / 315 / 1 / 355:  36%|███▌      | 356/1000 [29:30<53:22,  4.97s/it][Succeeded / Failed / Skipped / Total] 40 / 315 / 1 / 356:  36%|███▌      | 356/1000 [29:30<53:22,  4.97s/it][Succeeded / Failed / Skipped / Total] 40 / 315 / 1 / 356:  36%|███▌      | 357/1000 [29:32<53:11,  4.96s/it][Succeeded / Failed / Skipped / Total] 40 / 316 / 1 / 357:  36%|███▌      | 357/1000 [29:32<53:11,  4.96s/it][Succeeded / Failed / Skipped / Total] 40 / 316 / 1 / 357:  36%|███▌      | 358/1000 [29:34<53:01,  4.96s/it]Checks whether a type is not defined . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean isTypeNotSpecified ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > [[messages]] = ce . getErrorMessages ( ) ; if ( [[messages]] . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( [[messages]] ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean isTypeNotSpecified ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > [[definitions]] = ce . getErrorMessages ( ) ; if ( [[definitions]] . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( [[definitions]] ) . getMessage ( ) ) ; } else { return "False" != "False" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 354 ---------------------------------------------
Returns the dependencies for the specified class . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > getDependencies ( InjectionPoint ctorPoint , TypeLiteral < ? > [[implementation]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! [[implementation]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( [[implementation]] ) ) { builder . addAll ( ip . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > getDependencies ( InjectionPoint ctorPoint , TypeLiteral < ? > [[fulfilment]] ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; builder . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! [[fulfilment]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( [[fulfilment]] ) ) { builder . addAll ( ip . getDependencies ( ) ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 355 ---------------------------------------------
Removes unisted dependencies from the given dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : deps ) { Class < ? > annotationType = dep . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { [[builder]] . add ( dep ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > removeAssistedDeps ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > [[constructor]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : deps ) { Class < ? > annotationType = dep . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { [[constructor]] . add ( dep ) ; } } return [[constructor]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 356 ---------------------------------------------
Checks whether the given member is public or not . --> Is public callable accessible? --> Socre: 1.0

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member [[member]] ) { if ( ! Modifier . isPublic ( [[member]] . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( [[member]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[member]] ) . getParameterTypes ( ) ; } else { Method [[method]] = ( Method ) [[member]] ; if ( ! Modifier . isPublic ( [[method]] . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = [[method]] . getParameterTypes ( ) ; } for ( Class < ? > [[type]] : parameterTypes ) { if ( ! Modifier . isPublic ( [[type]] . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member [[commissioner]] ) { if ( ! Modifier . isPublic ( [[commissioner]] . getModifiers ( ) ) ) { return "False" != "False" ; } Class < ? > [ ] parameterTypes ; if ( [[commissioner]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[commissioner]] ) . getParameterTypes ( ) ; } else { Method [[hack]] = ( Method ) [[commissioner]] ; if ( ! Modifier . isPublic ( [[hack]] . getReturnType ( ) . getModifiers ( ) ) ) { return "False" != "False" ; } parameterTypes = [[hack]] . getParameterTypes ( ) ; } for ( Class < ? > [[assortment]] : parameterTypes ) { if ( ! Modifier . isPublic ( [[assortment]] . getModifiers ( ) ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 357 ---------------------------------------------
Checks if the given injected injector is valid for an optimization . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean isValidForOptimizedAssistedInject ( Set < Dependency < ? > > dependencies , Class < ? > [[implementation]] , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > badDeps = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean isValidForOptimizedAssistedInject ( Set < Dependency < ? > > dependencies , Class < ? > [[pursuit]] , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > badDeps = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 358 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 40 / 317 / 1 / 358:  36%|███▌      | 358/1000 [29:34<53:01,  4.96s/it][Succeeded / Failed / Skipped / Total] 40 / 317 / 1 / 358:  36%|███▌      | 359/1000 [29:34<52:48,  4.94s/it][Succeeded / Failed / Skipped / Total] 40 / 318 / 1 / 359:  36%|███▌      | 359/1000 [29:34<52:48,  4.94s/it][Succeeded / Failed / Skipped / Total] 40 / 318 / 1 / 359:  36%|███▌      | 360/1000 [29:35<52:36,  4.93s/it][Succeeded / Failed / Skipped / Total] 40 / 319 / 1 / 360:  36%|███▌      | 360/1000 [29:35<52:36,  4.93s/it][Succeeded / Failed / Skipped / Total] 40 / 319 / 1 / 360:  36%|███▌      | 361/1000 [29:47<52:43,  4.95s/it][Succeeded / Failed / Skipped / Total] 41 / 319 / 1 / 361:  36%|███▌      | 361/1000 [29:47<52:43,  4.95s/it][Succeeded / Failed / Skipped / Total] 41 / 319 / 1 / 361:  36%|███▌      | 362/1000 [29:47<52:30,  4.94s/it][Succeeded / Failed / Skipped / Total] 41 / 320 / 1 / 362:  36%|███▌      | 362/1000 [29:47<52:30,  4.94s/it][Succeeded / Failed / Skipped / Total] 41 / 320 / 1 / 362:  36%|███▋      | 363/1000 [29:47<52:17,  4.93s/it][Succeeded / Failed / Skipped / Total] 41 / 321 / 1 / 363:  36%|███▋      | 363/1000 [29:47<52:17,  4.93s/it][Succeeded / Failed / Skipped / Total] 41 / 321 / 1 / 363:  36%|███▋      | 364/1000 [29:48<52:05,  4.91s/it][Succeeded / Failed / Skipped / Total] 41 / 322 / 1 / 364:  36%|███▋      | 364/1000 [29:48<52:05,  4.91s/it][Succeeded / Failed / Skipped / Total] 41 / 322 / 1 / 364:  36%|███▋      | 365/1000 [29:53<51:59,  4.91s/it][Succeeded / Failed / Skipped / Total] 41 / 323 / 1 / 365:  36%|███▋      | 365/1000 [29:53<51:59,  4.91s/it][Succeeded / Failed / Skipped / Total] 41 / 323 / 1 / 365:  37%|███▋      | 366/1000 [29:56<51:51,  4.91s/it][Succeeded / Failed / Skipped / Total] 41 / 324 / 1 / 366:  37%|███▋      | 366/1000 [29:56<51:51,  4.91s/it][Succeeded / Failed / Skipped / Total] 41 / 324 / 1 / 366:  37%|███▋      | 367/1000 [29:56<51:39,  4.90s/it]Returns the binding for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static Key < ? > getKey ( TypeLiteral < ? > [[type]] , Member [[member]] , Annotation [ ] annotations , Errors [[errors]] ) throws ErrorsException { int numErrorsBefore = [[errors]] . size ( ) ; Annotation found = findBindingAnnotation ( [[errors]] , [[member]] , annotations ) ; [[errors]] . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( [[type]] ) : Key . get ( [[type]] , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > getKey ( TypeLiteral < ? > [[copier]] , Member [[element]] , Annotation [ ] annotations , Errors [[bloopers]] ) throws ErrorsException { int numErrorsBefore = [[bloopers]] . size ( ) ; Annotation found = findBindingAnnotation ( [[bloopers]] , [[element]] , annotations ) ; [[bloopers]] . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( [[copier]] ) : Key . get ( [[copier]] , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 359 ---------------------------------------------
Generates a missing implementation for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 360 ---------------------------------------------
Gets the binding from the given injector . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > getBindingFromNewInjector ( final Method [[method]] , final Object [ ] args , final AssistData [[data]] ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = [[data]] . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > getBindingFromNewInjector ( final Method [[access]] , final Object [ ] args , final AssistData [[materials]] ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = [[materials]] . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 361 ---------------------------------------------
Invokes a method on the proxy . --> Called by unit tests --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object invoke ( Object [[proxy]] , final Method [[method]] , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object invoke ( Object [[deputy]] , final Method [[measure]] , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 362 ---------------------------------------------
Checks if is annotated with annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean hasAtInject ( Constructor cxtor ) { return cxtor . isAnnotationPresent ( Inject . class ) || cxtor . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean hasAtInject ( Constructor cxtor ) { return cxtor . isAnnotationPresent ( Inject . class ) || cxtor . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 363 ---------------------------------------------
Gets the internal constructor . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint getInternalConstructor ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint getInternalConstructor ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 364 ---------------------------------------------
Gets the internal dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > getInternalDependencies ( ) { ImmutableSet . Builder < InjectionPoint > [[builder]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[builder]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > getInternalDependencies ( ) { ImmutableSet . Builder < InjectionPoint > [[constructor]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[constructor]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 365 ---------------------------------------------
Returns the next filter matching the given request . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter findNextFilter ( HttpServletRequest [[request]] ) { while ( ++ index < filterDefinitions . length ) { Filter [[filter]] = filterDefinitions [ index ] . getFilterIfMatching ( [[request]] ) ; if ( [[filter]] != null ) { return [[filter]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter findNextFilter ( HttpServletRequest [[necessity]] ) { while ( ++ index < filterDefinitions . length ) { Filter [[strain]] = filterDefinitions [ index ] . getFilterIfMatching ( [[necessity]] ) ; if ( [[strain]] != null ) { return [[strain]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 366 ---------------------------------------------
Returns a module for the given module . --> [[[FAILED]]]

[[[[Adv]]]]: public static Module forModule ( Object [[module]] , ModuleAnnotatedMethodScanner scanner ) { return forObject ( [[module]] , "False" != "False" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module forModule ( Object [[ball]] , ModuleAnnotatedMethodScanner scanner ) { return forObject ( [[ball]] , "False" != "False" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 367 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 41 / 325 / 1 / 367:  37%|███▋      | 367/1000 [29:56<51:39,  4.90s/it][Succeeded / Failed / Skipped / Total] 41 / 325 / 1 / 367:  37%|███▋      | 368/1000 [29:57<51:27,  4.88s/it][Succeeded / Failed / Skipped / Total] 41 / 326 / 1 / 368:  37%|███▋      | 368/1000 [29:57<51:27,  4.88s/it][Succeeded / Failed / Skipped / Total] 41 / 326 / 1 / 368:  37%|███▋      | 369/1000 [29:58<51:14,  4.87s/it][Succeeded / Failed / Skipped / Total] 41 / 327 / 1 / 369:  37%|███▋      | 369/1000 [29:58<51:14,  4.87s/it][Succeeded / Failed / Skipped / Total] 41 / 327 / 1 / 369:  37%|███▋      | 370/1000 [29:58<51:02,  4.86s/it][Succeeded / Failed / Skipped / Total] 41 / 328 / 1 / 370:  37%|███▋      | 370/1000 [29:58<51:02,  4.86s/it][Succeeded / Failed / Skipped / Total] 41 / 328 / 1 / 370:  37%|███▋      | 371/1000 [30:03<50:57,  4.86s/it][Succeeded / Failed / Skipped / Total] 41 / 329 / 1 / 371:  37%|███▋      | 371/1000 [30:03<50:57,  4.86s/it][Succeeded / Failed / Skipped / Total] 41 / 329 / 1 / 371:  37%|███▋      | 372/1000 [30:03<50:44,  4.85s/it][Succeeded / Failed / Skipped / Total] 41 / 330 / 1 / 372:  37%|███▋      | 372/1000 [30:03<50:44,  4.85s/it][Succeeded / Failed / Skipped / Total] 41 / 330 / 1 / 372:  37%|███▋      | 373/1000 [30:03<50:32,  4.84s/it][Succeeded / Failed / Skipped / Total] 41 / 331 / 1 / 373:  37%|███▋      | 373/1000 [30:03<50:32,  4.84s/it][Succeeded / Failed / Skipped / Total] 41 / 331 / 1 / 373:  37%|███▋      | 374/1000 [30:07<50:25,  4.83s/it]Returns the line number for the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer getLineNumber ( Member [[member]] ) { Preconditions . checkArgument ( type == [[member]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[member]] , [[member]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[member]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer getLineNumber ( Member [[agent]] ) { Preconditions . checkArgument ( type == [[agent]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[agent]] , [[agent]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[agent]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 368 ---------------------------------------------
Finds an annotation on the specified method . --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method [[method]] ) { if ( [[method]] . isBridge ( ) || [[method]] . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = [[method]] . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , [[method]] ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method [[trick]] ) { if ( [[trick]] . isBridge ( ) || [[trick]] . isSynthetic ( ) ) { return null ; } Annotation annotation = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = [[trick]] . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( annotation != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , [[trick]] ) ; return null ; } annotation = foundAnnotation ; } } return annotation ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 369 ---------------------------------------------
Wraps the callable in a callable using the provided seed map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > continueRequest ( Callable < T > callable , Map < Key < ? > , Object > seedMap ) { return wrap ( callable , continueRequest ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > continueRequest ( Callable < T > callable , Map < Key < ? > , Object > seedMap ) { return wrap ( callable , continueRequest ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 370 ---------------------------------------------
Transforms a callable into a Callable --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > transferRequest ( Callable < T > callable ) { return wrap ( callable , transferRequest ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > transferRequest ( Callable < T > callable ) { return wrap ( callable , transferRequest ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 371 ---------------------------------------------
Initializes the lookup . --> [[[FAILED]]]

[[[[Adv]]]]: void initialize ( Errors [[errors]] ) { injector . lookups = injector ; new LookupProcessor ( [[errors]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void initialize ( Errors [[deviations]] ) { injector . lookups = injector ; new LookupProcessor ( [[deviations]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 372 ---------------------------------------------
Instantiates a real Multibinder using the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > RealMultibinder < T > newRealSetBinder ( Binder binder , Key < T > [[key]] ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[result]] = new RealMultibinder <> ( binder , [[key]] ) ; binder . install ( [[result]] ) ; return [[result]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > newRealSetBinder ( Binder binder , Key < T > [[matter]] ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[end]] = new RealMultibinder <> ( binder , [[matter]] ) ; binder . install ( [[end]] ) ; return [[end]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 373 ---------------------------------------------
Gets the injectors for a given injection point . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors errorsForMember = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector injector = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , injectionPoint , errorsForMember ) : new SingleMethodInjector ( this . injector , injectionPoint , errorsForMember ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > injectors = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors errorsForMember = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector injector = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . injector , injectionPoint , errorsForMember ) : new SingleMethodInjector ( this . injector , injectionPoint , errorsForMember ) ; injectors . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 374 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 41 / 332 / 1 / 374:  37%|███▋      | 374/1000 [30:07<50:25,  4.83s/it][Succeeded / Failed / Skipped / Total] 41 / 332 / 1 / 374:  38%|███▊      | 375/1000 [30:08<50:13,  4.82s/it][Succeeded / Failed / Skipped / Total] 41 / 333 / 1 / 375:  38%|███▊      | 375/1000 [30:08<50:13,  4.82s/it][Succeeded / Failed / Skipped / Total] 41 / 333 / 1 / 375:  38%|███▊      | 376/1000 [30:08<50:01,  4.81s/it][Succeeded / Failed / Skipped / Total] 41 / 334 / 1 / 376:  38%|███▊      | 376/1000 [30:08<50:01,  4.81s/it][Succeeded / Failed / Skipped / Total] 41 / 334 / 1 / 376:  38%|███▊      | 377/1000 [30:40<50:41,  4.88s/it][Succeeded / Failed / Skipped / Total] 41 / 335 / 1 / 377:  38%|███▊      | 377/1000 [30:40<50:41,  4.88s/it][Succeeded / Failed / Skipped / Total] 41 / 335 / 1 / 377:  38%|███▊      | 378/1000 [30:40<50:29,  4.87s/it][Succeeded / Failed / Skipped / Total] 41 / 336 / 1 / 378:  38%|███▊      | 378/1000 [30:40<50:29,  4.87s/it][Succeeded / Failed / Skipped / Total] 41 / 336 / 1 / 378:  38%|███▊      | 379/1000 [31:15<51:12,  4.95s/it][Succeeded / Failed / Skipped / Total] 42 / 336 / 1 / 379:  38%|███▊      | 379/1000 [31:15<51:12,  4.95s/it][Succeeded / Failed / Skipped / Total] 42 / 336 / 1 / 379:  38%|███▊      | 380/1000 [31:19<51:06,  4.95s/it]Returns a new instance of the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > get ( Class < T > [[type]] , AnnotationStrategy annotationStrategy ) { return new Key < T > ( [[type]] , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > get ( Class < T > [[sort]] , AnnotationStrategy annotationStrategy ) { return new Key < T > ( [[sort]] , annotationStrategy ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 375 ---------------------------------------------
Returns an annotation strategy for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Annotation annotation ) { checkNotNull ( annotation , "annotation" ) ; Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , annotation ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( annotation ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Annotation annotation ) { checkNotNull ( annotation , "annotation" ) ; Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , annotation ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( annotation ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 376 ---------------------------------------------
Returns an annotation strategy for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Class < ? extends Annotation > annotationType ) { annotationType = Annotations . canonicalizeIfNamed ( annotationType ) ; if ( isAllDefaultMethods ( annotationType ) ) { return strategyFor ( generateAnnotation ( annotationType ) ) ; } checkNotNull ( annotationType , "annotation type" ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; return new AnnotationTypeStrategy ( annotationType , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy strategyFor ( Class < ? extends Annotation > annotationType ) { annotationType = Annotations . canonicalizeIfNamed ( annotationType ) ; if ( isAllDefaultMethods ( annotationType ) ) { return strategyFor ( generateAnnotation ( annotationType ) ) ; } checkNotNull ( annotationType , "annotation type" ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; return new AnnotationTypeStrategy ( annotationType , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 377 ---------------------------------------------
Removes stack trace from stack trace --> [[[FAILED]]]

[[[[Adv]]]]: private void pruneStacktrace ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] stackTrace = t . getStackTrace ( ) ; List < StackTraceElement > [[pruned]] = Lists . newArrayList ( ) ; for ( StackTraceElement [[element]] : stackTrace ) { String className = [[element]] . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { [[pruned]] . add ( [[element]] ) ; } } t . setStackTrace ( [[pruned]] . toArray ( new StackTraceElement [ [[pruned]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void pruneStacktrace ( Throwable throwable ) { for ( Throwable t = throwable ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] stackTrace = t . getStackTrace ( ) ; List < StackTraceElement > [[demolition]] = Lists . newArrayList ( ) ; for ( StackTraceElement [[molecule]] : stackTrace ) { String className = [[molecule]] . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { [[demolition]] . add ( [[molecule]] ) ; } } t . setStackTrace ( [[demolition]] . toArray ( new StackTraceElement [ [[demolition]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 378 ---------------------------------------------
Returns the binding source . --> [[[FAILED]]]

[[[[Adv]]]]: public String getBindingSource ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String getBindingSource ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 379 ---------------------------------------------
Check if a constructor has parameters matching parameters . --> Check whether the constructor has parameters --> Socre: 1.0

[[[[Adv]]]]: private boolean constructorHasMatchingParams ( TypeLiteral < ? > [[type]] , Constructor < ? > [[constructor]] , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = [[type]] . getParameterTypes ( [[constructor]] ) ; Annotation [ ] [ ] paramAnnotations = [[constructor]] . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , [[constructor]] , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean constructorHasMatchingParams ( TypeLiteral < ? > [[tick]] , Constructor < ? > [[builder]] , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = [[tick]] . getParameterTypes ( [[builder]] ) ; Annotation [ ] [ ] paramAnnotations = [[builder]] . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , [[builder]] , paramAnnotations [ p ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 380 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 42 / 337 / 1 / 380:  38%|███▊      | 380/1000 [31:19<51:06,  4.95s/it][Succeeded / Failed / Skipped / Total] 42 / 337 / 1 / 380:  38%|███▊      | 381/1000 [32:20<52:32,  5.09s/it][Succeeded / Failed / Skipped / Total] 42 / 338 / 1 / 381:  38%|███▊      | 381/1000 [32:20<52:32,  5.09s/it][Succeeded / Failed / Skipped / Total] 42 / 338 / 1 / 381:  38%|███▊      | 382/1000 [33:20<53:56,  5.24s/it][Succeeded / Failed / Skipped / Total] 43 / 338 / 1 / 382:  38%|███▊      | 382/1000 [33:20<53:56,  5.24s/it][Succeeded / Failed / Skipped / Total] 43 / 338 / 1 / 382:  38%|███▊      | 383/1000 [33:25<53:50,  5.24s/it][Succeeded / Failed / Skipped / Total] 43 / 339 / 1 / 383:  38%|███▊      | 383/1000 [33:25<53:50,  5.24s/it][Succeeded / Failed / Skipped / Total] 43 / 339 / 1 / 383:  38%|███▊      | 384/1000 [33:25<53:37,  5.22s/it][Succeeded / Failed / Skipped / Total] 43 / 340 / 1 / 384:  38%|███▊      | 384/1000 [33:25<53:37,  5.22s/it][Succeeded / Failed / Skipped / Total] 43 / 340 / 1 / 384:  38%|███▊      | 385/1000 [33:26<53:24,  5.21s/it][Succeeded / Failed / Skipped / Total] 43 / 341 / 1 / 385:  38%|███▊      | 385/1000 [33:26<53:24,  5.21s/it][Succeeded / Failed / Skipped / Total] 43 / 341 / 1 / 385:  39%|███▊      | 386/1000 [34:05<54:13,  5.30s/it]Creates a message with the specified message format and arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message create ( String messageFormat , Object ... [[arguments]] ) { return create ( null , messageFormat , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message create ( String messageFormat , Object ... [[logics]] ) { return create ( null , messageFormat , [[logics]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 381 ---------------------------------------------
Creates a message with the specified message and stack trace . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message create ( Throwable [[cause]] , String messageFormat , Object ... [[arguments]] ) { return create ( [[cause]] , ImmutableList . of ( ) , messageFormat , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message create ( Throwable [[business]] , String messageFormat , Object ... [[logics]] ) { return create ( [[business]] , ImmutableList . of ( ) , messageFormat , [[logics]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 382 ---------------------------------------------
Format a collection of error messages . --> Format a collection of errors --> Socre: 1.0

[[[[Adv]]]]: public static String formatMessages ( String heading , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int [[index]] = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = [[index]] ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object [[source]] = dependencies . get ( i ) ; formatSource ( fmt , [[source]] ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String formatMessages ( String heading , Collection < Message > errorMessages ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int [[catalogue]] = 1 ; boolean displayCauses = getOnlyCause ( errorMessages ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : errorMessages ) { int thisIdx = [[catalogue]] ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object [[parent]] = dependencies . get ( i ) ; formatSource ( fmt , [[parent]] ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( errorMessages . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , errorMessages . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 383 ---------------------------------------------
Convert the given object to the declaring element . --> [[[FAILED]]]

[[[[Adv]]]]: static Object convert ( Object o ) { ElementSource [[source]] = null ; if ( o instanceof ElementSource ) { [[source]] = ( ElementSource ) o ; o = [[source]] . getDeclaringSource ( ) ; } return convert ( o , [[source]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object convert ( Object o ) { ElementSource [[basis]] = null ; if ( o instanceof ElementSource ) { [[basis]] = ( ElementSource ) o ; o = [[basis]] . getDeclaringSource ( ) ; } return convert ( o , [[basis]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 384 ---------------------------------------------
Checks if a class should be skipped . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean shouldBeSkipped ( String className ) { return ( parent != null && parent . shouldBeSkipped ( className ) ) || classNamesToSkip . contains ( className ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean shouldBeSkipped ( String className ) { return ( parent != null && parent . shouldBeSkipped ( className ) ) || classNamesToSkip . contains ( className ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 385 ---------------------------------------------
Gets the object from module names . --> [[[FAILED]]]

[[[[Adv]]]]: public Object getFromClassNames ( List < String > moduleClassNames ) { Preconditions . checkNotNull ( moduleClassNames , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : moduleClassNames ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object getFromClassNames ( List < String > moduleClassNames ) { Preconditions . checkNotNull ( moduleClassNames , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : moduleClassNames ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 386 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 44 / 341 / 1 / 386:  39%|███▊      | 386/1000 [34:05<54:13,  5.30s/it][Succeeded / Failed / Skipped / Total] 44 / 341 / 1 / 386:  39%|███▊      | 387/1000 [34:48<55:08,  5.40s/it][Succeeded / Failed / Skipped / Total] 44 / 342 / 1 / 387:  39%|███▊      | 387/1000 [34:48<55:08,  5.40s/it][Succeeded / Failed / Skipped / Total] 44 / 342 / 1 / 387:  39%|███▉      | 388/1000 [35:04<55:20,  5.42s/it][Succeeded / Failed / Skipped / Total] 45 / 342 / 1 / 388:  39%|███▉      | 388/1000 [35:04<55:20,  5.42s/it][Succeeded / Failed / Skipped / Total] 45 / 342 / 1 / 388:  39%|███▉      | 389/1000 [35:08<55:11,  5.42s/it][Succeeded / Failed / Skipped / Total] 45 / 343 / 1 / 389:  39%|███▉      | 389/1000 [35:08<55:11,  5.42s/it][Succeeded / Failed / Skipped / Total] 45 / 343 / 1 / 389:  39%|███▉      | 390/1000 [35:10<55:00,  5.41s/it][Succeeded / Failed / Skipped / Total] 46 / 343 / 1 / 390:  39%|███▉      | 390/1000 [35:10<55:00,  5.41s/it][Succeeded / Failed / Skipped / Total] 47 / 343 / 1 / 391:  39%|███▉      | 391/1000 [35:10<54:47,  5.40s/it][Succeeded / Failed / Skipped / Total] 47 / 343 / 1 / 391:  39%|███▉      | 392/1000 [35:13<54:38,  5.39s/it][Succeeded / Failed / Skipped / Total] 48 / 343 / 1 / 392:  39%|███▉      | 392/1000 [35:13<54:38,  5.39s/it][Succeeded / Failed / Skipped / Total] 48 / 344 / 1 / 393:  39%|███▉      | 393/1000 [35:13<54:24,  5.38s/it][Succeeded / Failed / Skipped / Total] 48 / 344 / 1 / 393:  39%|███▉      | 394/1000 [35:14<54:11,  5.37s/it]Main entry point . --> Low - level management --> Socre: 1.0

[[[[Adv]]]]: public static void [[main]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module [[module]] = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( [[module]] ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void [[ceiling]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module [[ball]] = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector injector = Guice . createInjector ( [[ball]] ) ; manage ( args [ 0 ] , injector ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 387 ---------------------------------------------
Validates that the given value is compatible with the given key . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object validateAndCanonicalizeValue ( Key < ? > [[key]] , Object [[object]] ) { if ( [[object]] == null || [[object]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[key]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[object]] ) ) { throw new IllegalArgumentException ( "Value[" + [[object]] + "] of type[" + [[object]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[key]] + "]" ) ; } return [[object]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object validateAndCanonicalizeValue ( Key < ? > [[sampling]] , Object [[aim]] ) { if ( [[aim]] == null || [[aim]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[sampling]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[aim]] ) ) { throw new IllegalArgumentException ( "Value[" + [[aim]] + "] of type[" + [[aim]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[sampling]] + "]" ) ; } return [[aim]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 388 ---------------------------------------------
Sends the push state . --> For internal use only --> Socre: 1.0

[[[[Adv]]]]: void pushState ( com . google . inject . Key < ? > [[key]] , Object source ) { doPushState ( [[key]] , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void pushState ( com . google . inject . Key < ? > [[crux]] , Object source ) { doPushState ( [[crux]] , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 389 ---------------------------------------------
Returns an instance of the given instance . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Initializable < T > of ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > of ( final T [[standard]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[standard]] ; } @ Override public String toString ( ) { return String . valueOf ( [[standard]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 390 ---------------------------------------------
Convenience method to create a message with the given message format . --> Convenience factory method --> Socre: 1.0

[[[[Adv]]]]: public static Message create ( Throwable [[cause]] , List < Object > sources , String messageFormat , Object ... [[arguments]] ) { String [[message]] = format ( messageFormat , [[arguments]] ) ; return new Message ( sources , [[message]] , [[cause]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message create ( Throwable [[account]] , List < Object > sources , String messageFormat , Object ... [[reasons]] ) { String [[cable]] = format ( messageFormat , [[reasons]] ) ; return new Message ( sources , [[cable]] , [[account]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 391 ---------------------------------------------
Adds the given dependency to the current dependency . --> Puts a successor of this jurisdiction --> Socre: 1.0

[[[[Adv]]]]: Dependency < ? > pushDependency ( Dependency < ? > [[dependency]] , Object [[source]] ) { Dependency < ? > previous = this . [[dependency]] ; this . [[dependency]] = [[dependency]] ; doPushState ( [[dependency]] , [[source]] ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > pushDependency ( Dependency < ? > [[dominion]] , Object [[basement]] ) { Dependency < ? > previous = this . [[dominion]] ; this . [[dominion]] = [[dominion]] ; doPushState ( [[dominion]] , [[basement]] ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 392 ---------------------------------------------
Called when a connection event is received . --> Process a connection event --> Socre: 1.0

[[[[Adv]]]]: public void onEvent ( ConnectionEventType [[type]] , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[type]] ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void onEvent ( ConnectionEventType [[document]] , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[document]] ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 393 ---------------------------------------------
Adds a connection event processor for the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: public void addConnectionEventProcessor ( ConnectionEventType [[type]] , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[type]] ) ; if ( processorList == null ) { this . processors . putIfAbsent ( [[type]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( [[type]] ) ; } processorList . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void addConnectionEventProcessor ( ConnectionEventType [[document]] , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[document]] ) ; if ( processorList == null ) { this . processors . putIfAbsent ( [[document]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( [[document]] ) ; } processorList . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 394 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 48 / 345 / 1 / 394:  39%|███▉      | 394/1000 [35:14<54:11,  5.37s/it][Succeeded / Failed / Skipped / Total] 48 / 346 / 1 / 395:  40%|███▉      | 395/1000 [35:14<53:58,  5.35s/it][Succeeded / Failed / Skipped / Total] 48 / 346 / 1 / 395:  40%|███▉      | 396/1000 [35:14<53:45,  5.34s/it][Succeeded / Failed / Skipped / Total] 48 / 347 / 1 / 396:  40%|███▉      | 396/1000 [35:14<53:45,  5.34s/it][Succeeded / Failed / Skipped / Total] 48 / 348 / 1 / 397:  40%|███▉      | 397/1000 [35:14<53:31,  5.33s/it][Succeeded / Failed / Skipped / Total] 48 / 348 / 1 / 397:  40%|███▉      | 398/1000 [35:14<53:18,  5.31s/it][Succeeded / Failed / Skipped / Total] 48 / 349 / 1 / 398:  40%|███▉      | 398/1000 [35:14<53:18,  5.31s/it][Succeeded / Failed / Skipped / Total] 48 / 350 / 1 / 399:  40%|███▉      | 399/1000 [35:14<53:05,  5.30s/it][Succeeded / Failed / Skipped / Total] 48 / 350 / 1 / 399:  40%|████      | 400/1000 [35:18<52:58,  5.30s/it][Succeeded / Failed / Skipped / Total] 49 / 350 / 1 / 400:  40%|████      | 400/1000 [35:18<52:58,  5.30s/it][Succeeded / Failed / Skipped / Total] 49 / 350 / 2 / 401:  40%|████      | 401/1000 [35:18<52:45,  5.28s/it][Succeeded / Failed / Skipped / Total] 49 / 350 / 2 / 401:  40%|████      | 402/1000 [35:19<52:32,  5.27s/it][Succeeded / Failed / Skipped / Total] 49 / 351 / 2 / 402:  40%|████      | 402/1000 [35:19<52:32,  5.27s/it]Gets the result task result . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > T getFutureTaskResult ( RunStateRecordedFutureTask < T > task , Logger logger ) { T t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < T > T getFutureTaskResult ( RunStateRecordedFutureTask < T > task , Logger logger ) { T t = null ; if ( null != task ) { try { t = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return t ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 395 ---------------------------------------------
Suppress a throwable . --> [[[FAILED]]]

[[[[Adv]]]]: public static void launderThrowable ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable

[[[[Adv]]]]: public static void launderThrowable ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 396 ---------------------------------------------
Register a remoting processor . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerProcessor ( CommandCode cmdCode , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void registerProcessor ( CommandCode cmdCode , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 397 ---------------------------------------------
Register default processor --> [[[FAILED]]]

[[[[Adv]]]]: public void registerDefaultProcessor ( RemotingProcessor < ? > processor ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void registerDefaultProcessor ( RemotingProcessor < ? > processor ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 398 ---------------------------------------------
Returns the remotingProcessor for the given command code . --> [[[FAILED]]]

[[[[Adv]]]]: public RemotingProcessor < ? > getProcessor ( CommandCode cmdCode ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( cmdCode ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > getProcessor ( CommandCode cmdCode ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( cmdCode ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 399 ---------------------------------------------
Tries to get the given URL . --> [[[FAILED]]]

[[[[Adv]]]]: private Url tryGet ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache

[[[[Adv]]]]: private Url tryGet ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 400 ---------------------------------------------
Decodes Protocol Code . --> Decodes ProtocolCode --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode decodeProtocolCode ( ByteBuf [[in]] ) { if ( [[in]] . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; [[in]] . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode decodeProtocolCode ( ByteBuf [[right]] ) { if ( [[right]] . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; [[right]] . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 401 ---------------------------------------------
Scans the pool for connections that have expired . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public void scan ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 402 ---------------------------------------------
Get or create a new connection --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Connection getAndCreateIfAbsent ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection getAndCreateIfAbsent ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 403 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 49 / 352 / 2 / 403:  40%|████      | 403/1000 [35:19<52:19,  5.26s/it][Succeeded / Failed / Skipped / Total] 49 / 352 / 2 / 403:  40%|████      | 404/1000 [35:20<52:08,  5.25s/it][Succeeded / Failed / Skipped / Total] 49 / 353 / 2 / 404:  40%|████      | 404/1000 [35:20<52:08,  5.25s/it][Succeeded / Failed / Skipped / Total] 50 / 353 / 2 / 405:  40%|████      | 405/1000 [35:34<52:15,  5.27s/it][Succeeded / Failed / Skipped / Total] 50 / 353 / 2 / 405:  41%|████      | 406/1000 [35:36<52:06,  5.26s/it][Succeeded / Failed / Skipped / Total] 50 / 354 / 2 / 406:  41%|████      | 406/1000 [35:36<52:06,  5.26s/it][Succeeded / Failed / Skipped / Total] 50 / 354 / 2 / 406:  41%|████      | 407/1000 [35:37<51:53,  5.25s/it][Succeeded / Failed / Skipped / Total] 50 / 355 / 2 / 407:  41%|████      | 407/1000 [35:37<51:53,  5.25s/it][Succeeded / Failed / Skipped / Total] 50 / 355 / 2 / 407:  41%|████      | 408/1000 [35:48<51:57,  5.27s/it][Succeeded / Failed / Skipped / Total] 51 / 355 / 2 / 408:  41%|████      | 408/1000 [35:48<51:57,  5.27s/it][Succeeded / Failed / Skipped / Total] 51 / 355 / 2 / 408:  41%|████      | 409/1000 [35:59<52:00,  5.28s/it]Create a new connection to the remote server . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void createConnectionAndHealIfNeed ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void createConnectionAndHealIfNeed ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 404 ---------------------------------------------
Provides a new instance of the type . --> [[[FAILED]]]

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > [[provider]] , Dependency < ? > [[dependency]] , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = [[provider]] . get ( ) ; if ( t == null && ! [[dependency]] . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , [[dependency]] ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > [[operator]] , Dependency < ? > [[kingdom]] , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = [[operator]] . get ( ) ; if ( t == null && ! [[kingdom]] . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , [[kingdom]] ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 405 ---------------------------------------------
Gets a map of connection pools . --> region > getAllConnectionPool --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > getAll ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > [[entry]] = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( [[entry]] . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( [[entry]] . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > getAll ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > [[chapter]] = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( [[chapter]] . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( [[chapter]] . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 406 ---------------------------------------------
Tries to repair if needed . --> [[[FAILED]]]

[[[[Adv]]]]: private void healIfNeed ( ConnectionPool [[pool]] , Url url ) throws RemotingException , InterruptedException { String poolKey = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void healIfNeed ( ConnectionPool [[collective]] , Url url ) throws RemotingException , InterruptedException { String poolKey = url . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 407 ---------------------------------------------
Closes a connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void closeConnection ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void closeConnection ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 408 ---------------------------------------------
Create connection . --> Handles connection creation --> Socre: 1.0

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool [[pool]] , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = [[pool]] . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; [[pool]] . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool [[aerobics]] , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = [[aerobics]] . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; [[aerobics]] . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 409 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 51 / 356 / 2 / 409:  41%|████      | 409/1000 [35:59<52:00,  5.28s/it][Succeeded / Failed / Skipped / Total] 51 / 356 / 2 / 409:  41%|████      | 410/1000 [36:04<51:55,  5.28s/it][Succeeded / Failed / Skipped / Total] 51 / 357 / 2 / 410:  41%|████      | 410/1000 [36:04<51:55,  5.28s/it][Succeeded / Failed / Skipped / Total] 51 / 357 / 2 / 410:  41%|████      | 411/1000 [36:05<51:42,  5.27s/it][Succeeded / Failed / Skipped / Total] 51 / 358 / 2 / 411:  41%|████      | 411/1000 [36:05<51:42,  5.27s/it][Succeeded / Failed / Skipped / Total] 51 / 358 / 2 / 411:  41%|████      | 412/1000 [36:09<51:35,  5.26s/it][Succeeded / Failed / Skipped / Total] 51 / 359 / 2 / 412:  41%|████      | 412/1000 [36:09<51:35,  5.26s/it][Succeeded / Failed / Skipped / Total] 51 / 360 / 2 / 413:  41%|████▏     | 413/1000 [36:09<51:22,  5.25s/it][Succeeded / Failed / Skipped / Total] 51 / 360 / 2 / 413:  41%|████▏     | 414/1000 [36:09<51:10,  5.24s/it]Closes the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[close]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[future]] ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , [[future]] . isSuccess ( ) , [[future]] . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void [[shutdown]] ( ) { if ( closed . compareAndSet ( "False" != "False" , "True" == "True" ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture [[direction]] ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[specific]] . getChannel ( ) ) , [[direction]] . isSuccess ( ) , [[direction]] . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[specific]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 410 ---------------------------------------------
Remove task from pool . --> [[[FAILED]]]

[[[[Adv]]]]: private void removeTask ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > [[task]] = this . connTasks . remove ( poolKey ) ; if ( null != [[task]] ) { ConnectionPool [[pool]] = FutureTaskUtil . getFutureTaskResult ( [[task]] , logger ) ; if ( null != [[pool]] ) { [[pool]] . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void removeTask ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > [[mission]] = this . connTasks . remove ( poolKey ) ; if ( null != [[mission]] ) { ConnectionPool [[slalom]] = FutureTaskUtil . getFutureTaskResult ( [[mission]] , logger ) ; if ( null != [[slalom]] ) { [[slalom]] . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 411 ---------------------------------------------
Register user processor --> [[[FAILED]]]

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void registerUserProcessor ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { registerUserProcessor ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 412 ---------------------------------------------
Called when the connection is closed . --> [[[FAILED]]]

[[[[Adv]]]]: public void onClose ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > [[entry]] = iter . next ( ) ; iter . remove ( ) ; InvokeFuture [[future]] = [[entry]] . getValue ( ) ; if ( [[future]] != null ) { [[future]] . putResponse ( [[future]] . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; [[future]] . cancelTimeout ( ) ; [[future]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void onClose ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > [[admission]] = iter . next ( ) ; iter . remove ( ) ; InvokeFuture [[direction]] = [[admission]] . getValue ( ) ; if ( [[direction]] != null ) { [[direction]] . putResponse ( [[direction]] . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; [[direction]] . cancelTimeout ( ) ; [[direction]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 413 ---------------------------------------------
Register a user - processor --> [[[FAILED]]]

[[[[Adv]]]]: private static void registerUserProcessor ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String [[interest]] : processor . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( [[interest]] , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + [[interest]] + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void registerUserProcessor ( MultiInterestUserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor . multiInterest ( ) || processor . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String [[surplus]] : processor . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( [[surplus]] , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + [[surplus]] + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 414 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 51 / 360 / 3 / 414:  41%|████▏     | 414/1000 [36:09<51:10,  5.24s/it][Succeeded / Failed / Skipped / Total] 51 / 361 / 3 / 415:  42%|████▏     | 415/1000 [36:09<50:58,  5.23s/it][Succeeded / Failed / Skipped / Total] 51 / 361 / 3 / 415:  42%|████▏     | 416/1000 [36:17<50:56,  5.23s/it][Succeeded / Failed / Skipped / Total] 51 / 362 / 3 / 416:  42%|████▏     | 416/1000 [36:17<50:56,  5.23s/it][Succeeded / Failed / Skipped / Total] 51 / 363 / 3 / 417:  42%|████▏     | 417/1000 [36:17<50:44,  5.22s/it][Succeeded / Failed / Skipped / Total] 51 / 363 / 3 / 417:  42%|████▏     | 418/1000 [36:19<50:33,  5.21s/it][Succeeded / Failed / Skipped / Total] 52 / 363 / 3 / 418:  42%|████▏     | 418/1000 [36:19<50:34,  5.21s/it]Send RpcRequestCommandCommand --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean deserializeRequestCommand ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = "True" == "True" ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = "False" != "False" ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = "False" != "False" ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 415 ---------------------------------------------
Preprocess the remoting context . --> [[[FAILED]]]

[[[[Adv]]]]: private void preProcessRemotingContext ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void preProcessRemotingContext ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { ctx . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; ctx . setTimeout ( cmd . getTimeout ( ) ) ; ctx . setRpcCommandType ( cmd . getType ( ) ) ; ctx . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 416 ---------------------------------------------
Log timeout log . --> [[[FAILED]]]

[[[[Adv]]]]: private void timeoutLog ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel [[channel]] = channelCtx . channel ( ) ; if ( null != [[channel]] ) { remoteAddr = RemotingUtil . parseRemoteAddress ( [[channel]] ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void timeoutLog ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String remoteAddr = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel [[kyle]] = channelCtx . channel ( ) ; if ( null != [[kyle]] ) { remoteAddr = RemotingUtil . parseRemoteAddress ( [[kyle]] ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , remoteAddr , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 417 ---------------------------------------------
Debug log message . --> [[[FAILED]]]

[[[[Adv]]]]: private void debugLog ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void debugLog ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 418 ---------------------------------------------
Dispatch request to user processor . --> Dispatches the RpcRequestCommandCommand . --> Socre: 1.0

[[[[Adv]]]]: private void dispatchToUserProcessor ( RemotingContext ctx , RpcRequestCommand cmd ) { final int [[id]] = cmd . getId ( ) ; final byte [[type]] = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void dispatchToUserProcessor ( RemotingContext ctx , RpcRequestCommand cmd ) { final int [[identifier]] = cmd . getId ( ) ; final byte [[kind]] = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 419 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 53 / 363 / 3 / 419:  42%|████▏     | 419/1000 [36:22<50:26,  5.21s/it][Succeeded / Failed / Skipped / Total] 53 / 363 / 3 / 419:  42%|████▏     | 420/1000 [36:23<50:15,  5.20s/it][Succeeded / Failed / Skipped / Total] 54 / 363 / 3 / 420:  42%|████▏     | 420/1000 [36:23<50:15,  5.20s/it][Succeeded / Failed / Skipped / Total] 54 / 364 / 3 / 421:  42%|████▏     | 421/1000 [36:29<50:10,  5.20s/it][Succeeded / Failed / Skipped / Total] 54 / 364 / 3 / 421:  42%|████▏     | 422/1000 [36:29<49:58,  5.19s/it][Succeeded / Failed / Skipped / Total] 54 / 364 / 4 / 422:  42%|████▏     | 422/1000 [36:29<49:58,  5.19s/it]Performs an invocation on a remote request . --> Helper method for invoking the InvokeCallback --> Socre: 1.0

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture [[future]] = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( [[future]] ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture [[future]] = conn . removeInvokeFuture ( requestId ) ; if ( [[future]] != null ) { [[future]] . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; [[future]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; [[future]] . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture [[trend]] = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( [[trend]] ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture [[trend]] = conn . removeInvokeFuture ( requestId ) ; if ( [[trend]] != null ) { [[trend]] . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; [[trend]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; [[trend]] . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 420 ---------------------------------------------
Process a message --> Properly execute procedure --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[process]] ( RemotingContext ctx , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask task = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { defaultExecutor . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void [[procedure]] ( RemotingContext ctx , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask task = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { defaultExecutor . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 421 ---------------------------------------------
Send a request to the client . --> [[[FAILED]]]

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand [[request]] ) { try { conn . getChannel ( ) . writeAndFlush ( [[request]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void oneway ( final Connection conn , final RemotingCommand [[necessity]] ) { try { conn . getChannel ( ) . writeAndFlush ( [[necessity]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == conn ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 422 ---------------------------------------------
Converts an integer into a BitSet . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static BitSet toBitSet ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 423 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 54 / 365 / 4 / 423:  42%|████▏     | 423/1000 [36:30<49:47,  5.18s/it][Succeeded / Failed / Skipped / Total] 54 / 365 / 4 / 423:  42%|████▏     | 424/1000 [36:30<49:35,  5.17s/it][Succeeded / Failed / Skipped / Total] 54 / 366 / 4 / 424:  42%|████▏     | 424/1000 [36:30<49:35,  5.17s/it][Succeeded / Failed / Skipped / Total] 55 / 366 / 4 / 425:  42%|████▎     | 425/1000 [36:40<49:37,  5.18s/it][Succeeded / Failed / Skipped / Total] 55 / 366 / 4 / 425:  43%|████▎     | 426/1000 [36:44<49:30,  5.17s/it][Succeeded / Failed / Skipped / Total] 56 / 366 / 4 / 426:  43%|████▎     | 426/1000 [36:44<49:30,  5.17s/it][Succeeded / Failed / Skipped / Total] 56 / 366 / 4 / 426:  43%|████▎     | 427/1000 [36:50<49:26,  5.18s/it][Succeeded / Failed / Skipped / Total] 57 / 366 / 4 / 427:  43%|████▎     | 427/1000 [36:50<49:26,  5.18s/it][Succeeded / Failed / Skipped / Total] 57 / 366 / 4 / 427:  43%|████▎     | 428/1000 [36:50<49:14,  5.17s/it][Succeeded / Failed / Skipped / Total] 57 / 367 / 4 / 428:  43%|████▎     | 428/1000 [36:50<49:14,  5.17s/it][Succeeded / Failed / Skipped / Total] 57 / 367 / 4 / 428:  43%|████▎     | 429/1000 [37:02<49:18,  5.18s/it][Succeeded / Failed / Skipped / Total] 58 / 367 / 4 / 429:  43%|████▎     | 429/1000 [37:02<49:18,  5.18s/it][Succeeded / Failed / Skipped / Total] 58 / 367 / 4 / 429:  43%|████▎     | 430/1000 [37:03<49:07,  5.17s/it]Convert a bit set to a byte value . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte toByte ( BitSet bs ) { int [[value]] = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { [[value]] += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + [[value]] + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) [[value]] ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte toByte ( BitSet bs ) { int [[appreciation]] = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { [[appreciation]] += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + [[appreciation]] + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) [[appreciation]] ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 424 ---------------------------------------------
Add a reconnect task . --> [[[FAILED]]]

[[[[Adv]]]]: public void addReconnectTask ( Url url ) { ReconnectTask [[task]] = new ReconnectTask ( ) ; [[task]] . url = url ; tasks . add ( [[task]] ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void addReconnectTask ( Url url ) { ReconnectTask [[mission]] = new ReconnectTask ( ) ; [[mission]] . url = url ; tasks . add ( [[mission]] ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 425 ---------------------------------------------
Stop the process . --> Stops the daemon . --> Socre: 1.0

[[[[Adv]]]]: public void stop ( ) { if ( ! this . [[started]] ) { return ; } this . [[started]] = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread

[[[[Adv]]]]: public void stop ( ) { if ( ! this . [[alpha]] ) { return ; } this . [[alpha]] = "False" != "False" ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 426 ---------------------------------------------
Converts a request to a remoting command --> Create a remotingCommand --> Socre: 1.0

[[[[Adv]]]]: protected RemotingCommand toRemotingCommand ( Object [[request]] , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand [[command]] = this . getCommandFactory ( ) . createRequestCommand ( [[request]] ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand toRemotingCommand ( Object [[necessity]] , Connection conn , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand [[mandate]] = this . getCommandFactory ( ) . createRequestCommand ( [[necessity]] ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 427 ---------------------------------------------
Filters the list of connections based on service status --> Filters associations from associations . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > [[connections]] ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : [[connections]] ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > [[associations]] ) { List < Connection > serviceOnConnections = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : [[associations]] ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { serviceOnConnections . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , serviceOnConnections ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 428 ---------------------------------------------
Close fresh connect connections . --> [[[FAILED]]]

[[[[Adv]]]]: private void closeFreshSelectConnections ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void closeFreshSelectConnections ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 429 ---------------------------------------------
Sets an attribute to the given value . --> setter for major mentions --> Socre: 1.0

[[[[Adv]]]]: public Object setAttributeIfAbsent ( String [[key]] , Object [[value]] ) { return attributes . putIfAbsent ( [[key]] , [[value]] ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object setAttributeIfAbsent ( String [[major]] , Object [[criticism]] ) { return attributes . putIfAbsent ( [[major]] , [[criticism]] ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 430 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 59 / 367 / 4 / 430:  43%|████▎     | 430/1000 [37:03<49:07,  5.17s/it][Succeeded / Failed / Skipped / Total] 59 / 367 / 4 / 430:  43%|████▎     | 431/1000 [37:05<48:58,  5.16s/it][Succeeded / Failed / Skipped / Total] 59 / 368 / 4 / 431:  43%|████▎     | 431/1000 [37:05<48:58,  5.16s/it][Succeeded / Failed / Skipped / Total] 59 / 368 / 4 / 431:  43%|████▎     | 432/1000 [37:06<48:46,  5.15s/it][Succeeded / Failed / Skipped / Total] 59 / 369 / 4 / 432:  43%|████▎     | 432/1000 [37:06<48:46,  5.15s/it][Succeeded / Failed / Skipped / Total] 59 / 369 / 4 / 432:  43%|████▎     | 433/1000 [37:06<48:35,  5.14s/it][Succeeded / Failed / Skipped / Total] 60 / 369 / 4 / 433:  43%|████▎     | 433/1000 [37:06<48:35,  5.14s/it][Succeeded / Failed / Skipped / Total] 60 / 369 / 4 / 433:  43%|████▎     | 434/1000 [37:06<48:24,  5.13s/it][Succeeded / Failed / Skipped / Total] 60 / 369 / 5 / 434:  43%|████▎     | 434/1000 [37:06<48:24,  5.13s/it][Succeeded / Failed / Skipped / Total] 60 / 369 / 5 / 434:  44%|████▎     | 435/1000 [37:09<48:15,  5.12s/it][Succeeded / Failed / Skipped / Total] 61 / 369 / 5 / 435:  44%|████▎     | 435/1000 [37:09<48:15,  5.12s/it][Succeeded / Failed / Skipped / Total] 61 / 369 / 5 / 435:  44%|████▎     | 436/1000 [37:09<48:04,  5.11s/it]Logs a info message . --> Logs information about a structure . --> Socre: 1.0

[[[[Adv]]]]: private void infoLog ( String [[format]] , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( [[format]] , addr ) ; } else { logger . info ( [[format]] , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void infoLog ( String [[structure]] , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( [[structure]] , addr ) ; } else { logger . info ( [[structure]] , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 431 ---------------------------------------------
Returns true if the request is a request timeout . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean isRequestTimeout ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean isRequestTimeout ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return "True" == "True" ; } return "False" != "False" ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 432 ---------------------------------------------
Get user processor by class name . --> [[[FAILED]]]

[[[[Adv]]]]: public UserProcessor < ? > getUserProcessor ( String className ) { return StringUtils . isBlank ( className ) ? null : this . userProcessors . get ( className ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > getUserProcessor ( String className ) { return StringUtils . isBlank ( className ) ? null : this . userProcessors . get ( className ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 433 ---------------------------------------------
Monitor connections . --> This method monitors the connection pools . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > [[connections]] = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( [[connections]] ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > [[involvements]] = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( [[involvements]] ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 434 ---------------------------------------------
Gets the value for the given key . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . context . get ( key ) != null ? ( T ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 435 ---------------------------------------------
Gets a boolean property . --> Retrieves a boolean from a component . --> Socre: 1.0

[[[[Adv]]]]: public static boolean getBool ( String [[key]] , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( [[key]] , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property

[[[[Adv]]]]: public static boolean getBool ( String [[component]] , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( [[component]] , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 436 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 61 / 370 / 5 / 436:  44%|████▎     | 436/1000 [37:09<48:04,  5.11s/it][Succeeded / Failed / Skipped / Total] 61 / 370 / 5 / 436:  44%|████▎     | 437/1000 [37:11<47:54,  5.11s/it][Succeeded / Failed / Skipped / Total] 61 / 371 / 5 / 437:  44%|████▎     | 437/1000 [37:11<47:54,  5.11s/it][Succeeded / Failed / Skipped / Total] 61 / 371 / 5 / 437:  44%|████▍     | 438/1000 [37:12<47:44,  5.10s/it][Succeeded / Failed / Skipped / Total] 61 / 372 / 5 / 438:  44%|████▍     | 438/1000 [37:12<47:44,  5.10s/it][Succeeded / Failed / Skipped / Total] 61 / 372 / 5 / 438:  44%|████▍     | 439/1000 [37:13<47:33,  5.09s/it][Succeeded / Failed / Skipped / Total] 61 / 373 / 5 / 439:  44%|████▍     | 439/1000 [37:13<47:33,  5.09s/it][Succeeded / Failed / Skipped / Total] 61 / 373 / 5 / 439:  44%|████▍     | 440/1000 [37:13<47:22,  5.08s/it][Succeeded / Failed / Skipped / Total] 61 / 374 / 5 / 440:  44%|████▍     | 440/1000 [37:13<47:22,  5.08s/it][Succeeded / Failed / Skipped / Total] 61 / 374 / 5 / 440:  44%|████▍     | 441/1000 [37:13<47:11,  5.07s/it][Succeeded / Failed / Skipped / Total] 61 / 375 / 5 / 441:  44%|████▍     | 441/1000 [37:13<47:11,  5.07s/it][Succeeded / Failed / Skipped / Total] 61 / 375 / 5 / 441:  44%|████▍     | 442/1000 [37:14<47:00,  5.05s/it]Resolve a response object to a remote object . --> [[[FAILED]]]

[[[[Adv]]]]: public static Object resolveResponseObject ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object resolveResponseObject ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 437 ---------------------------------------------
Deserialize response object . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object toResponseObject ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand [[response]] = ( RpcResponseCommand ) responseCommand ; [[response]] . deserialize ( ) ; return [[response]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object toResponseObject ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand [[action]] = ( RpcResponseCommand ) responseCommand ; [[action]] . deserialize ( ) ; return [[action]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 438 ---------------------------------------------
Converts a response command to a throwable . --> [[[FAILED]]]

[[[[Adv]]]]: private static Throwable toThrowable ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object [[ex]] = resp . getResponseObject ( ) ; if ( [[ex]] != null && [[ex]] instanceof Throwable ) { return ( Throwable ) [[ex]] ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable toThrowable ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; resp . deserialize ( ) ; Object [[outrageousness]] = resp . getResponseObject ( ) ; if ( [[outrageousness]] != null && [[outrageousness]] instanceof Throwable ) { return ( Throwable ) [[outrageousness]] ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 439 ---------------------------------------------
Detail error message . --> [[[FAILED]]]

[[[[Adv]]]]: private static String detailErrMsg ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String detailErrMsg ( String clientErrMsg , ResponseCommand responseCommand ) { RpcResponseCommand resp = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 440 ---------------------------------------------
Create a RpcServerException from an exception --> [[[FAILED]]]

[[[[Adv]]]]: private RpcServerException createServerException ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException createServerException ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException e = new RpcServerException ( formattedErrMsg ) ; e . setStackTrace ( t . getStackTrace ( ) ) ; return e ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 441 ---------------------------------------------
Print the connection trace log . --> [[[FAILED]]]

[[[[Adv]]]]: public static void printConnectionTraceLog ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void printConnectionTraceLog ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 442 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 61 / 376 / 5 / 442:  44%|████▍     | 442/1000 [37:14<47:00,  5.05s/it][Succeeded / Failed / Skipped / Total] 61 / 376 / 5 / 442:  44%|████▍     | 443/1000 [37:20<46:56,  5.06s/it][Succeeded / Failed / Skipped / Total] 62 / 376 / 5 / 443:  44%|████▍     | 443/1000 [37:20<46:56,  5.06s/it][Succeeded / Failed / Skipped / Total] 62 / 376 / 5 / 443:  44%|████▍     | 444/1000 [37:32<47:01,  5.07s/it][Succeeded / Failed / Skipped / Total] 62 / 377 / 5 / 444:  44%|████▍     | 444/1000 [37:32<47:01,  5.07s/it][Succeeded / Failed / Skipped / Total] 62 / 377 / 5 / 444:  44%|████▍     | 445/1000 [37:47<47:08,  5.10s/it][Succeeded / Failed / Skipped / Total] 62 / 378 / 5 / 445:  44%|████▍     | 445/1000 [37:47<47:08,  5.10s/it][Succeeded / Failed / Skipped / Total] 62 / 378 / 5 / 445:  45%|████▍     | 446/1000 [38:07<47:21,  5.13s/it][Succeeded / Failed / Skipped / Total] 62 / 379 / 5 / 446:  45%|████▍     | 446/1000 [38:07<47:21,  5.13s/it][Succeeded / Failed / Skipped / Total] 62 / 379 / 5 / 446:  45%|████▍     | 447/1000 [38:11<47:14,  5.13s/it][Succeeded / Failed / Skipped / Total] 62 / 380 / 5 / 447:  45%|████▍     | 447/1000 [38:11<47:14,  5.13s/it][Succeeded / Failed / Skipped / Total] 62 / 380 / 5 / 447:  45%|████▍     | 448/1000 [38:19<47:13,  5.13s/it][Succeeded / Failed / Skipped / Total] 62 / 381 / 5 / 448:  45%|████▍     | 448/1000 [38:19<47:13,  5.13s/it][Succeeded / Failed / Skipped / Total] 62 / 381 / 5 / 448:  45%|████▍     | 449/1000 [38:33<47:19,  5.15s/it][Succeeded / Failed / Skipped / Total] 62 / 382 / 5 / 449:  45%|████▍     | 449/1000 [38:33<47:19,  5.15s/it][Succeeded / Failed / Skipped / Total] 62 / 382 / 5 / 449:  45%|████▌     | 450/1000 [38:34<47:08,  5.14s/it][Succeeded / Failed / Skipped / Total] 62 / 383 / 5 / 450:  45%|████▌     | 450/1000 [38:34<47:08,  5.14s/it][Succeeded / Failed / Skipped / Total] 62 / 383 / 5 / 450:  45%|████▌     | 451/1000 [38:37<47:00,  5.14s/it]Creates a new EventLoopGroup . --> [[[FAILED]]]

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int nThreads , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , threadFactory ) : new NioEventLoopGroup ( nThreads , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup newEventLoopGroup ( int nThreads , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , threadFactory ) : new NioEventLoopGroup ( nThreads , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 443 ---------------------------------------------
Get a property by its key . --> Gets the capital . --> Socre: 1.0

[[[[Adv]]]]: public String getProperty ( String [[key]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[key]] ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String getProperty ( String [[capital]] ) { if ( properties == null ) { return null ; } return properties . getProperty ( [[capital]] ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 444 ---------------------------------------------
Returns the local address of the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseLocalAddress ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[channel]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String parseLocalAddress ( final Channel [[hack]] ) { if ( null == [[hack]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[hack]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 445 ---------------------------------------------
Gets the remote IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseRemoteIP ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String parseRemoteIP ( final Channel [[steel]] ) { if ( null == [[steel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[eternity]] = ( InetSocketAddress ) [[steel]] . remoteAddress ( ) ; if ( [[eternity]] != null ) { return [[eternity]] . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 446 ---------------------------------------------
Gets the hostname of the remote host . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseRemoteHostName ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String parseRemoteHostName ( final Channel [[hack]] ) { if ( null == [[hack]] ) { return StringUtils . EMPTY ; } final InetSocketAddress [[remoteness]] = ( InetSocketAddress ) [[hack]] . remoteAddress ( ) ; if ( [[remoteness]] != null ) { return [[remoteness]] . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 447 ---------------------------------------------
Parse the remote address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseRemoteAddress ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress [[remote]] = [[channel]] . remoteAddress ( ) ; return doParse ( [[remote]] != null ? [[remote]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String parseRemoteAddress ( final Channel [[triangle]] ) { if ( null == [[triangle]] ) { return StringUtils . EMPTY ; } final SocketAddress [[marathon]] = [[triangle]] . remoteAddress ( ) ; return doParse ( [[marathon]] != null ? [[marathon]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 448 ---------------------------------------------
Gets the local IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseLocalIP ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String parseLocalIP ( final Channel [[culvert]] ) { if ( null == [[culvert]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[culvert]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 449 ---------------------------------------------
Returns the port of the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static int parseLocalPort ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int parseLocalPort ( final Channel [[approach]] ) { if ( null == [[approach]] ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) [[approach]] . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 450 ---------------------------------------------
Convert socket address to IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String parseSocketAddressToHostIp ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress addr = addrs . getAddress ( ) ; if ( null != addr ) { return addr . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String parseSocketAddressToHostIp ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress addr = addrs . getAddress ( ) ; if ( null != addr ) { return addr . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 451 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 63 / 383 / 5 / 451:  45%|████▌     | 451/1000 [38:37<47:00,  5.14s/it][Succeeded / Failed / Skipped / Total] 63 / 383 / 5 / 451:  45%|████▌     | 452/1000 [38:43<46:56,  5.14s/it][Succeeded / Failed / Skipped / Total] 64 / 383 / 5 / 452:  45%|████▌     | 452/1000 [38:43<46:56,  5.14s/it][Succeeded / Failed / Skipped / Total] 64 / 383 / 5 / 452:  45%|████▌     | 453/1000 [38:57<47:02,  5.16s/it][Succeeded / Failed / Skipped / Total] 64 / 384 / 5 / 453:  45%|████▌     | 453/1000 [38:57<47:02,  5.16s/it][Succeeded / Failed / Skipped / Total] 64 / 384 / 5 / 453:  45%|████▌     | 454/1000 [38:57<46:51,  5.15s/it][Succeeded / Failed / Skipped / Total] 64 / 385 / 5 / 454:  45%|████▌     | 454/1000 [38:57<46:51,  5.15s/it][Succeeded / Failed / Skipped / Total] 64 / 385 / 5 / 454:  46%|████▌     | 455/1000 [38:58<46:40,  5.14s/it][Succeeded / Failed / Skipped / Total] 64 / 386 / 5 / 455:  46%|████▌     | 455/1000 [38:58<46:40,  5.14s/it][Succeeded / Failed / Skipped / Total] 64 / 386 / 5 / 455:  46%|████▌     | 456/1000 [38:59<46:31,  5.13s/it][Succeeded / Failed / Skipped / Total] 64 / 387 / 5 / 456:  46%|████▌     | 456/1000 [38:59<46:31,  5.13s/it][Succeeded / Failed / Skipped / Total] 64 / 387 / 5 / 456:  46%|████▌     | 457/1000 [39:01<46:22,  5.12s/it][Succeeded / Failed / Skipped / Total] 64 / 388 / 5 / 457:  46%|████▌     | 457/1000 [39:01<46:22,  5.12s/it][Succeeded / Failed / Skipped / Total] 64 / 388 / 5 / 457:  46%|████▌     | 458/1000 [39:06<46:17,  5.12s/it][Succeeded / Failed / Skipped / Total] 65 / 388 / 5 / 458:  46%|████▌     | 458/1000 [39:06<46:17,  5.12s/it][Succeeded / Failed / Skipped / Total] 65 / 388 / 5 / 458:  46%|████▌     | 459/1000 [39:07<46:06,  5.11s/it][Succeeded / Failed / Skipped / Total] 65 / 389 / 5 / 459:  46%|████▌     | 459/1000 [39:07<46:06,  5.11s/it][Succeeded / Failed / Skipped / Total] 65 / 389 / 5 / 459:  46%|████▌     | 460/1000 [39:07<45:56,  5.10s/it]Adds a new connection . --> Adds an interaction . --> Socre: 1.0

[[[[Adv]]]]: public void add ( Connection [[connection]] ) { markAccess ( ) ; if ( null == [[connection]] ) { return ; } boolean res = this . conns . addIfAbsent ( [[connection]] ) ; if ( res ) { [[connection]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void add ( Connection [[intercourse]] ) { markAccess ( ) ; if ( null == [[intercourse]] ) { return ; } boolean res = this . conns . addIfAbsent ( [[intercourse]] ) ; if ( res ) { [[intercourse]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 452 ---------------------------------------------
Remove a connection and close it . --> Closes the given association . --> Socre: 1.0

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[connection]] ) { if ( null == [[connection]] ) { return ; } boolean res = this . conns . remove ( [[connection]] ) ; if ( res ) { [[connection]] . decreaseRef ( ) ; } if ( [[connection]] . noRef ( ) ) { [[connection]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[association]] ) { if ( null == [[association]] ) { return ; } boolean res = this . conns . remove ( [[association]] ) ; if ( res ) { [[association]] . decreaseRef ( ) ; } if ( [[association]] . noRef ( ) ) { [[association]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 453 ---------------------------------------------
Gets the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public Connection get ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > [[snapshot]] = new ArrayList < Connection > ( this . conns ) ; if ( [[snapshot]] . size ( ) > 0 ) { return this . [[strategy]] . select ( [[snapshot]] ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection get ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > [[stereo]] = new ArrayList < Connection > ( this . conns ) ; if ( [[stereo]] . size ( ) > 0 ) { return this . [[expedient]] . select ( [[stereo]] ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 454 ---------------------------------------------
Register a custom serializer for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public static void registerCustomSerializer ( String className , CustomSerializer serializer ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( className , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + className + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void registerCustomSerializer ( String className , CustomSerializer serializer ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( className , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + className + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 455 ---------------------------------------------
Get custom serializer by class name --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer getCustomSerializer ( String className ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( className ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer getCustomSerializer ( String className ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( className ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 456 ---------------------------------------------
Register custom serializer for command code . --> [[[FAILED]]]

[[[[Adv]]]]: public static void registerCustomSerializer ( CommandCode [[code]] , CustomSerializer serializer ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( [[code]] , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[code]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void registerCustomSerializer ( CommandCode [[bill]] , CustomSerializer serializer ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( [[bill]] , serializer ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + [[bill]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 457 ---------------------------------------------
Returns custom serializer for command code --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer getCustomSerializer ( CommandCode [[code]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[code]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer getCustomSerializer ( CommandCode [[bill]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[bill]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 458 ---------------------------------------------
Start connection monitor . --> Delete connection monitor . --> Socre: 1.0

[[[[Adv]]]]: public void [[start]] ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task

[[[[Adv]]]]: public void [[departure]] ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . executor = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , "True" == "True" ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . executor . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 459 ---------------------------------------------
Check if the remote address is connected . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean isConnected ( String remoteAddr ) { Url url = this . rpcRemoting . addressParser . parse ( remoteAddr ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean isConnected ( String remoteAddr ) { Url url = this . rpcRemoting . addressParser . parse ( remoteAddr ) ; return this . isConnected ( url ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 460 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 65 / 390 / 5 / 460:  46%|████▌     | 460/1000 [39:07<45:56,  5.10s/it][Succeeded / Failed / Skipped / Total] 65 / 390 / 5 / 460:  46%|████▌     | 461/1000 [39:08<45:45,  5.09s/it][Succeeded / Failed / Skipped / Total] 65 / 391 / 5 / 461:  46%|████▌     | 461/1000 [39:08<45:45,  5.09s/it][Succeeded / Failed / Skipped / Total] 65 / 391 / 5 / 461:  46%|████▌     | 462/1000 [39:08<45:34,  5.08s/it][Succeeded / Failed / Skipped / Total] 65 / 391 / 6 / 462:  46%|████▌     | 462/1000 [39:08<45:34,  5.08s/it][Succeeded / Failed / Skipped / Total] 65 / 391 / 6 / 462:  46%|████▋     | 463/1000 [39:08<45:24,  5.07s/it][Succeeded / Failed / Skipped / Total] 65 / 392 / 6 / 463:  46%|████▋     | 463/1000 [39:08<45:24,  5.07s/it][Succeeded / Failed / Skipped / Total] 65 / 392 / 6 / 463:  46%|████▋     | 464/1000 [39:13<45:18,  5.07s/it][Succeeded / Failed / Skipped / Total] 66 / 392 / 6 / 464:  46%|████▋     | 464/1000 [39:13<45:18,  5.07s/it][Succeeded / Failed / Skipped / Total] 66 / 392 / 6 / 464:  46%|████▋     | 465/1000 [39:15<45:09,  5.07s/it][Succeeded / Failed / Skipped / Total] 66 / 393 / 6 / 465:  46%|████▋     | 465/1000 [39:15<45:09,  5.07s/it][Succeeded / Failed / Skipped / Total] 66 / 393 / 6 / 465:  47%|████▋     | 466/1000 [39:15<44:59,  5.06s/it][Succeeded / Failed / Skipped / Total] 66 / 394 / 6 / 466:  47%|████▋     | 466/1000 [39:15<44:59,  5.06s/it][Succeeded / Failed / Skipped / Total] 66 / 394 / 6 / 466:  47%|████▋     | 467/1000 [39:16<44:50,  5.05s/it][Succeeded / Failed / Skipped / Total] 66 / 395 / 6 / 467:  47%|████▋     | 467/1000 [39:16<44:50,  5.05s/it][Succeeded / Failed / Skipped / Total] 66 / 395 / 6 / 467:  47%|████▋     | 468/1000 [39:17<44:39,  5.04s/it]Initialize write buffer water mark . --> [[[FAILED]]]

[[[[Adv]]]]: private void initWriteBufferWaterMark ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void initWriteBufferWaterMark ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 461 ---------------------------------------------
Create a new frame for the given opcode . --> [[[FAILED]]]

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode opcode ) { if ( opcode == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( opcode ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 get ( Opcode opcode ) { if ( opcode == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( opcode ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 462 ---------------------------------------------
Helper method for batching . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return "False" != "False" ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 463 ---------------------------------------------
Get a random connection . --> [[[FAILED]]]

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int [[size]] = conns . size ( ) ; int [[tries]] = 0 ; Connection [[result]] = null ; while ( ( [[result]] == null || ! [[result]] . isFine ( ) ) && [[tries]] ++ < MAX_TIMES ) { [[result]] = conns . get ( this . random . nextInt ( [[size]] ) ) ; } if ( [[result]] != null && ! [[result]] . isFine ( ) ) { [[result]] = null ; } return [[result]] ; }
[[[[Nl]]]]: get one connection randomly

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int [[range]] = conns . size ( ) ; int [[ideals]] = 0 ; Connection [[end]] = null ; while ( ( [[end]] == null || ! [[end]] . isFine ( ) ) && [[ideals]] ++ < MAX_TIMES ) { [[end]] = conns . get ( this . random . nextInt ( [[range]] ) ) ; } if ( [[end]] != null && ! [[end]] . isFine ( ) ) { [[end]] = null ; } return [[end]] ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 464 ---------------------------------------------
Sets the code . --> Sets symbol . --> Socre: 1.0

[[[[Adv]]]]: public void setCode ( int [[code]] ) { this . [[code]] = [[code]] ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void setCode ( int [[morse]] ) { this . [[capital]] = [[morse]] ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 465 ---------------------------------------------
Update the payload . --> [[[FAILED]]]

[[[[Adv]]]]: private void updatePayload ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer [[pay]] = ByteBuffer . allocate ( 2 + by . length ) ; [[pay]] . put ( buf ) ; [[pay]] . put ( by ) ; [[pay]] . rewind ( ) ; super . setPayload ( [[pay]] ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void updatePayload ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer [[bid]] = ByteBuffer . allocate ( 2 + by . length ) ; [[bid]] . put ( buf ) ; [[bid]] . put ( by ) ; [[bid]] . rewind ( ) ; super . setPayload ( [[bid]] ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 466 ---------------------------------------------
Check if the requested protocol contains the requested protocol . --> [[[FAILED]]]

[[[[Adv]]]]: private HandshakeState containsRequestedProtocol ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState containsRequestedProtocol ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 467 ---------------------------------------------
Validates the payload --> [[[FAILED]]]

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer payload , int [[mark]] ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( [[mark]] ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer payload , int [[arrow]] ) throws InvalidDataException { try { payload . position ( payload . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( payload ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { payload . position ( [[arrow]] ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
[Succeeded / Failed / Skipped / Total] 66 / 396 / 6 / 468:  47%|████▋     | 468/1000 [39:17<44:39,  5.04s/it][Succeeded / Failed / Skipped / Total] 66 / 396 / 6 / 468:  47%|████▋     | 469/1000 [39:21<44:33,  5.03s/it][Succeeded / Failed / Skipped / Total] 66 / 397 / 6 / 469:  47%|████▋     | 469/1000 [39:21<44:33,  5.03s/it][Succeeded / Failed / Skipped / Total] 66 / 397 / 6 / 469:  47%|████▋     | 470/1000 [39:22<44:24,  5.03s/it][Succeeded / Failed / Skipped / Total] 66 / 398 / 6 / 470:  47%|████▋     | 470/1000 [39:22<44:24,  5.03s/it][Succeeded / Failed / Skipped / Total] 66 / 398 / 6 / 470:  47%|████▋     | 471/1000 [39:25<44:16,  5.02s/it][Succeeded / Failed / Skipped / Total] 67 / 398 / 6 / 471:  47%|████▋     | 471/1000 [39:25<44:16,  5.02s/it][Succeeded / Failed / Skipped / Total] 67 / 398 / 6 / 471:  47%|████▋     | 472/1000 [39:25<44:06,  5.01s/it][Succeeded / Failed / Skipped / Total] 67 / 399 / 6 / 472:  47%|████▋     | 472/1000 [39:25<44:06,  5.01s/it][Succeeded / Failed / Skipped / Total] 67 / 399 / 6 / 472:  47%|████▋     | 473/1000 [39:27<43:57,  5.01s/it][Succeeded / Failed / Skipped / Total] 67 / 400 / 6 / 473:  47%|████▋     | 473/1000 [39:27<43:57,  5.01s/it][Succeeded / Failed / Skipped / Total] 67 / 400 / 6 / 473:  47%|████▋     | 474/1000 [39:28<43:47,  5.00s/it][Succeeded / Failed / Skipped / Total] 67 / 401 / 6 / 474:  47%|████▋     | 474/1000 [39:28<43:47,  5.00s/it][Succeeded / Failed / Skipped / Total] 67 / 401 / 6 / 474:  48%|████▊     | 475/1000 [39:29<43:39,  4.99s/it]--------------------------------------------- Result 468 ---------------------------------------------
Translate a single frame size checker . --> [[[FAILED]]]

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int maxpacketsize , int realpacketsize ) throws IncompleteException { if ( maxpacketsize < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int maxpacketsize , int realpacketsize ) throws IncompleteException { if ( maxpacketsize < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 469 ---------------------------------------------
Generate final key . --> [[[FAILED]]]

[[[[Adv]]]]: private String generateFinalKey ( String [[in]] ) { String seckey = [[in]] . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String generateFinalKey ( String [[down]] ) { String seckey = [[down]] . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 470 ---------------------------------------------
Translate single frame length limit . --> [[[FAILED]]]

[[[[Adv]]]]: private void translateSingleFrameCheckLengthLimit ( long [[length]] ) throws LimitExceededException { if ( [[length]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[length]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[length]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[length]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void translateSingleFrameCheckLengthLimit ( long [[duration]] ) throws LimitExceededException { if ( [[duration]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[duration]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[duration]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[duration]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 471 ---------------------------------------------
Processes a frame --> Processes frames that have been started . --> Socre: 1.0

[[[[Adv]]]]: private void processFrameContinuousAndNonFin ( WebSocketImpl webSocketImpl , Framedata [[frame]] , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( [[frame]] ) ; } else if ( [[frame]] . isFin ( ) ) { processFrameIsFin ( webSocketImpl , [[frame]] ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void processFrameContinuousAndNonFin ( WebSocketImpl webSocketImpl , Framedata [[rafter]] , Opcode curop ) throws InvalidDataException { if ( curop != Opcode . CONTINUOUS ) { processFrameIsNotFin ( [[rafter]] ) ; } else if ( [[rafter]] . isFin ( ) ) { processFrameIsFin ( webSocketImpl , [[rafter]] ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 472 ---------------------------------------------
Logs a runtime exception . --> [[[FAILED]]]

[[[[Adv]]]]: private void logRuntimeException ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void logRuntimeException ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 473 ---------------------------------------------
Process a frame --> [[[FAILED]]]

[[[[Adv]]]]: private void processFrameBinary ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , [[frame]] . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void processFrameBinary ( WebSocketImpl webSocketImpl , Framedata [[servo]] ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , [[servo]] . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 474 ---------------------------------------------
Get remote port . --> [[[FAILED]]]

[[[[Adv]]]]: public static int parseRemotePort ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int parseRemotePort ( final Channel [[avenue]] ) { if ( null == [[avenue]] ) { return - 1 ; } final InetSocketAddress [[eternity]] = ( InetSocketAddress ) [[avenue]] . remoteAddress ( ) ; if ( [[eternity]] != null ) { return [[eternity]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 475 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 67 / 402 / 6 / 475:  48%|████▊     | 475/1000 [39:29<43:39,  4.99s/it][Succeeded / Failed / Skipped / Total] 67 / 402 / 6 / 475:  48%|████▊     | 476/1000 [39:31<43:30,  4.98s/it][Succeeded / Failed / Skipped / Total] 67 / 403 / 6 / 476:  48%|████▊     | 476/1000 [39:31<43:30,  4.98s/it][Succeeded / Failed / Skipped / Total] 67 / 403 / 6 / 476:  48%|████▊     | 477/1000 [39:32<43:20,  4.97s/it][Succeeded / Failed / Skipped / Total] 67 / 404 / 6 / 477:  48%|████▊     | 477/1000 [39:32<43:20,  4.97s/it][Succeeded / Failed / Skipped / Total] 67 / 404 / 6 / 477:  48%|████▊     | 478/1000 [39:33<43:12,  4.97s/it][Succeeded / Failed / Skipped / Total] 67 / 405 / 6 / 478:  48%|████▊     | 478/1000 [39:33<43:12,  4.97s/it][Succeeded / Failed / Skipped / Total] 67 / 405 / 6 / 478:  48%|████▊     | 479/1000 [39:35<43:03,  4.96s/it][Succeeded / Failed / Skipped / Total] 67 / 406 / 6 / 479:  48%|████▊     | 479/1000 [39:35<43:03,  4.96s/it][Succeeded / Failed / Skipped / Total] 67 / 406 / 6 / 479:  48%|████▊     | 480/1000 [39:44<43:03,  4.97s/it]Processes a text message . --> [[[FAILED]]]

[[[[Adv]]]]: private void processFrameText ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( [[frame]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void processFrameText ( WebSocketImpl webSocketImpl , Framedata [[profile]] ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( [[profile]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 476 ---------------------------------------------
Process the current frame --> [[[FAILED]]]

[[[[Adv]]]]: private void processFrameIsFin ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( [[frame]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void processFrameIsFin ( WebSocketImpl webSocketImpl , Framedata [[circle]] ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( [[circle]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 477 ---------------------------------------------
Checks if the limit is exceeded . --> [[[FAILED]]]

[[[[Adv]]]]: private void checkBufferLimit ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void checkBufferLimit ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 478 ---------------------------------------------
Gets the payload from the buffer list . --> [[[FAILED]]]

[[[[Adv]]]]: private ByteBuffer getPayloadFromByteBufferList ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer [[buffer]] : byteBufferList ) { totalSize += [[buffer]] . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer [[buffer]] : byteBufferList ) { resultingByteBuffer . put ( [[buffer]] ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer getPayloadFromByteBufferList ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer resultingByteBuffer ; synchronized ( byteBufferList ) { for ( ByteBuffer [[bumper]] : byteBufferList ) { totalSize += [[bumper]] . limit ( ) ; } checkBufferLimit ( ) ; resultingByteBuffer = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer [[bumper]] : byteBufferList ) { resultingByteBuffer . put ( [[bumper]] ) ; } } resultingByteBuffer . flip ( ) ; return resultingByteBuffer ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 479 ---------------------------------------------
Returns the total byte buffer size in bytes . --> [[[FAILED]]]

[[[[Adv]]]]: private long getByteBufferListSize ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer [[buffer]] : byteBufferList ) { totalSize += [[buffer]] . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long getByteBufferListSize ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer [[reduction]] : byteBufferList ) { totalSize += [[reduction]] . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 480 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 67 / 407 / 6 / 480:  48%|████▊     | 480/1000 [39:44<43:03,  4.97s/it][Succeeded / Failed / Skipped / Total] 67 / 407 / 6 / 480:  48%|████▊     | 481/1000 [39:47<42:55,  4.96s/it][Succeeded / Failed / Skipped / Total] 67 / 408 / 6 / 481:  48%|████▊     | 481/1000 [39:47<42:55,  4.96s/it][Succeeded / Failed / Skipped / Total] 67 / 408 / 6 / 481:  48%|████▊     | 482/1000 [39:47<42:45,  4.95s/it][Succeeded / Failed / Skipped / Total] 67 / 409 / 6 / 482:  48%|████▊     | 482/1000 [39:47<42:45,  4.95s/it][Succeeded / Failed / Skipped / Total] 67 / 409 / 6 / 482:  48%|████▊     | 483/1000 [39:47<42:35,  4.94s/it][Succeeded / Failed / Skipped / Total] 67 / 410 / 6 / 483:  48%|████▊     | 483/1000 [39:47<42:35,  4.94s/it][Succeeded / Failed / Skipped / Total] 67 / 410 / 6 / 483:  48%|████▊     | 484/1000 [39:48<42:26,  4.93s/it][Succeeded / Failed / Skipped / Total] 67 / 411 / 6 / 484:  48%|████▊     | 484/1000 [39:48<42:26,  4.93s/it][Succeeded / Failed / Skipped / Total] 67 / 411 / 6 / 484:  48%|████▊     | 485/1000 [39:48<42:16,  4.92s/it][Succeeded / Failed / Skipped / Total] 67 / 412 / 6 / 485:  48%|████▊     | 485/1000 [39:48<42:16,  4.92s/it][Succeeded / Failed / Skipped / Total] 67 / 412 / 6 / 485:  49%|████▊     | 486/1000 [39:51<42:08,  4.92s/it][Succeeded / Failed / Skipped / Total] 67 / 413 / 6 / 486:  49%|████▊     | 486/1000 [39:51<42:08,  4.92s/it][Succeeded / Failed / Skipped / Total] 67 / 413 / 6 / 486:  49%|████▊     | 487/1000 [39:51<41:58,  4.91s/it]Processes the next frame . --> [[[FAILED]]]

[[[[Adv]]]]: private void processFrameIsNotFin ( Framedata [[frame]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[frame]] ; addToBufferList ( [[frame]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void processFrameIsNotFin ( Framedata [[stake]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[stake]] ; addToBufferList ( [[stake]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 481 ---------------------------------------------
Translate handshake response . --> [[[FAILED]]]

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpServer ( String [ ] firstLineTokens , String [[line]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpServer ( String [ ] firstLineTokens , String [[alley]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 482 ---------------------------------------------
Decodes the handshake . --> [[[FAILED]]]

[[[[Adv]]]]: public void decode ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void decode ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 483 ---------------------------------------------
Close the connection . --> [[[FAILED]]]

[[[[Adv]]]]: private void closeConnectionDueToWrongHandshake ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void closeConnectionDueToWrongHandshake ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 484 ---------------------------------------------
Send a connection to the server . --> [[[FAILED]]]

[[[[Adv]]]]: private void closeConnectionDueToInternalServerError ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void closeConnectionDueToInternalServerError ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "False" != "False" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 485 ---------------------------------------------
Generates the HTTP response due to an error . --> [[[FAILED]]]

[[[[Adv]]]]: private ByteBuffer generateHttpResponseDueToError ( int errorCode ) { String errorCodeDescription ; switch ( errorCode ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer generateHttpResponseDueToError ( int errorCode ) { String errorCodeDescription ; switch ( errorCode ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 486 ---------------------------------------------
Send a message to the WebSocket . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void send ( String [[text]] ) { if ( [[text]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; send ( draft . createFrames ( [[text]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void send ( String [[fable]] ) { if ( [[fable]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; send ( draft . createFrames ( [[fable]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 487 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 67 / 413 / 7 / 487:  49%|████▊     | 487/1000 [39:51<41:58,  4.91s/it][Succeeded / Failed / Skipped / Total] 67 / 413 / 7 / 487:  49%|████▉     | 488/1000 [39:51<41:49,  4.90s/it][Succeeded / Failed / Skipped / Total] 67 / 414 / 7 / 488:  49%|████▉     | 488/1000 [39:51<41:49,  4.90s/it][Succeeded / Failed / Skipped / Total] 67 / 414 / 7 / 488:  49%|████▉     | 489/1000 [39:56<41:44,  4.90s/it][Succeeded / Failed / Skipped / Total] 67 / 415 / 7 / 489:  49%|████▉     | 489/1000 [39:56<41:44,  4.90s/it][Succeeded / Failed / Skipped / Total] 67 / 415 / 7 / 489:  49%|████▉     | 490/1000 [40:04<41:42,  4.91s/it][Succeeded / Failed / Skipped / Total] 67 / 416 / 7 / 490:  49%|████▉     | 490/1000 [40:04<41:42,  4.91s/it][Succeeded / Failed / Skipped / Total] 67 / 416 / 7 / 490:  49%|████▉     | 491/1000 [40:05<41:33,  4.90s/it][Succeeded / Failed / Skipped / Total] 67 / 417 / 7 / 491:  49%|████▉     | 491/1000 [40:05<41:33,  4.90s/it][Succeeded / Failed / Skipped / Total] 67 / 417 / 7 / 491:  49%|████▉     | 492/1000 [40:05<41:23,  4.89s/it][Succeeded / Failed / Skipped / Total] 67 / 418 / 7 / 492:  49%|████▉     | 492/1000 [40:05<41:23,  4.89s/it][Succeeded / Failed / Skipped / Total] 67 / 418 / 7 / 492:  49%|████▉     | 493/1000 [40:05<41:14,  4.88s/it][Succeeded / Failed / Skipped / Total] 67 / 419 / 7 / 493:  49%|████▉     | 493/1000 [40:05<41:14,  4.88s/it][Succeeded / Failed / Skipped / Total] 67 / 419 / 7 / 493:  49%|████▉     | 494/1000 [40:06<41:04,  4.87s/it]Resets the connection . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 488 ---------------------------------------------
Start the connect thread . --> [[[FAILED]]]

[[[[Adv]]]]: public void connect ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void connect ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 489 ---------------------------------------------
Translate handshake . --> [[[FAILED]]]

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpClient ( String [ ] firstLineTokens , String [[line]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder translateHandshakeHttpClient ( String [ ] firstLineTokens , String [[street]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 490 ---------------------------------------------
Returns the port . --> [[[FAILED]]]

[[[[Adv]]]]: private int getPort ( ) { int [[port]] = uri . getPort ( ) ; if ( [[port]] == - 1 ) { String [[scheme]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[scheme]] ) ; } } return [[port]] ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int getPort ( ) { int [[dock]] = uri . getPort ( ) ; if ( [[dock]] == - 1 ) { String [[projection]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[projection]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[projection]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[projection]] ) ; } } return [[dock]] ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 491 ---------------------------------------------
Sets the connection lost timeout . --> [[[FAILED]]]

[[[[Adv]]]]: public void setConnectionLostTimeout ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void setConnectionLostTimeout ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 492 ---------------------------------------------
Stop connection lost timer . --> [[[FAILED]]]

[[[[Adv]]]]: protected void stopConnectionLostTimer ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void stopConnectionLostTimer ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "False" != "False" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 493 ---------------------------------------------
Starts connection lost timer . --> [[[FAILED]]]

[[[[Adv]]]]: protected void startConnectionLostTimer ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void startConnectionLostTimer ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = "True" == "True" ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 494 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 67 / 420 / 7 / 494:  49%|████▉     | 494/1000 [40:06<41:04,  4.87s/it][Succeeded / Failed / Skipped / Total] 67 / 420 / 7 / 494:  50%|████▉     | 495/1000 [40:06<40:55,  4.86s/it][Succeeded / Failed / Skipped / Total] 67 / 421 / 7 / 495:  50%|████▉     | 495/1000 [40:06<40:55,  4.86s/it][Succeeded / Failed / Skipped / Total] 67 / 421 / 7 / 495:  50%|████▉     | 496/1000 [40:06<40:45,  4.85s/it][Succeeded / Failed / Skipped / Total] 67 / 422 / 7 / 496:  50%|████▉     | 496/1000 [40:06<40:45,  4.85s/it][Succeeded / Failed / Skipped / Total] 67 / 422 / 7 / 496:  50%|████▉     | 497/1000 [40:48<41:18,  4.93s/it][Succeeded / Failed / Skipped / Total] 68 / 422 / 7 / 497:  50%|████▉     | 497/1000 [40:48<41:18,  4.93s/it][Succeeded / Failed / Skipped / Total] 68 / 422 / 7 / 497:  50%|████▉     | 498/1000 [40:49<41:08,  4.92s/it][Succeeded / Failed / Skipped / Total] 68 / 423 / 7 / 498:  50%|████▉     | 498/1000 [40:49<41:08,  4.92s/it][Succeeded / Failed / Skipped / Total] 68 / 423 / 7 / 498:  50%|████▉     | 499/1000 [40:57<41:07,  4.92s/it][Succeeded / Failed / Skipped / Total] 69 / 423 / 7 / 499:  50%|████▉     | 499/1000 [40:57<41:07,  4.92s/it][Succeeded / Failed / Skipped / Total] 69 / 423 / 7 / 499:  50%|█████     | 500/1000 [40:58<40:58,  4.92s/it][Succeeded / Failed / Skipped / Total] 69 / 424 / 7 / 500:  50%|█████     | 500/1000 [40:58<40:58,  4.92s/it][Succeeded / Failed / Skipped / Total] 69 / 424 / 7 / 500:  50%|█████     | 501/1000 [40:58<40:48,  4.91s/it]Restart the connection lost timeout . --> [[[FAILED]]]

[[[[Adv]]]]: private void restartConnectionLostTimer ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void restartConnectionLostTimer ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 495 ---------------------------------------------
Execute a connection lost ping . --> [[[FAILED]]]

[[[[Adv]]]]: private void executeConnectionLostDetection ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void executeConnectionLostDetection ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) webSocket ; if ( webSocketImpl . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 496 ---------------------------------------------
Cancel connection lost listener --> [[[FAILED]]]

[[[[Adv]]]]: private void cancelConnectionLostTimer ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void cancelConnectionLostTimer ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "False" != "False" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
--------------------------------------------- Result 497 ---------------------------------------------
Initiate handshake . --> from interface WebSocket handshake --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer ( WebSocket conn , Draft [[draft]] , ClientHandshake [[request]] ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer ( WebSocket conn , Draft [[tick]] , ClientHandshake [[appeal]] ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 498 ---------------------------------------------
Sends a ping frame . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void onWebsocketPing ( WebSocket conn , Framedata f ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void onWebsocketPing ( WebSocket conn , Framedata f ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 499 ---------------------------------------------
Stops the queue . --> deprecated --> Socre: 1.0

[[[[Adv]]]]: public void [[stop]] ( int timeout ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void [[depot]] ( int timeout ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "False" != "False" , "True" == "True" ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 500 ---------------------------------------------
Returns the port . --> [[[FAILED]]]

[[[[Adv]]]]: public int getPort ( ) { int [[port]] = getAddress ( ) . getPort ( ) ; if ( [[port]] == 0 && server != null ) { [[port]] = server . socket ( ) . getLocalPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int getPort ( ) { int [[wharf]] = getAddress ( ) . getPort ( ) ; if ( [[wharf]] == 0 && server != null ) { [[wharf]] = server . socket ( ) . getLocalPort ( ) ; } return [[wharf]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 501 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 69 / 425 / 7 / 501:  50%|█████     | 501/1000 [40:58<40:48,  4.91s/it][Succeeded / Failed / Skipped / Total] 69 / 425 / 7 / 501:  50%|█████     | 502/1000 [41:05<40:46,  4.91s/it][Succeeded / Failed / Skipped / Total] 70 / 425 / 7 / 502:  50%|█████     | 502/1000 [41:05<40:46,  4.91s/it][Succeeded / Failed / Skipped / Total] 70 / 425 / 7 / 502:  50%|█████     | 503/1000 [41:22<40:53,  4.94s/it][Succeeded / Failed / Skipped / Total] 71 / 425 / 7 / 503:  50%|█████     | 503/1000 [41:22<40:53,  4.94s/it][Succeeded / Failed / Skipped / Total] 71 / 425 / 7 / 503:  50%|█████     | 504/1000 [41:23<40:44,  4.93s/it][Succeeded / Failed / Skipped / Total] 72 / 425 / 7 / 504:  50%|█████     | 504/1000 [41:23<40:44,  4.93s/it][Succeeded / Failed / Skipped / Total] 72 / 425 / 7 / 504:  50%|█████     | 505/1000 [41:25<40:36,  4.92s/it]Perform additional read . --> [[[FAILED]]]

[[[[Adv]]]]: private void doAdditionalRead ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read

[[[[Adv]]]]: private void doAdditionalRead ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 502 ---------------------------------------------
Process a frame . --> Processes CloseFrame --> Socre: 1.0

[[[[Adv]]]]: private void processFrameClosing ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) { int [[code]] = CloseFrame . NOCODE ; String [[reason]] = "" ; if ( [[frame]] instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) [[frame]] ; [[code]] = cf . getCloseCode ( ) ; [[reason]] = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void processFrameClosing ( WebSocketImpl webSocketImpl , Framedata [[silhouette]] ) { int [[alphabet]] = CloseFrame . NOCODE ; String [[illustration]] = "" ; if ( [[silhouette]] instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) [[silhouette]] ; [[alphabet]] = cf . getCloseCode ( ) ; [[illustration]] = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 503 ---------------------------------------------
Accepts a single connection . --> Accepts an incoming connection . --> Socre: 1.0

[[[[Adv]]]]: private void doAccept ( SelectionKey [[key]] , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( [[key]] ) ) { [[key]] . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation

[[[[Adv]]]]: private void doAccept ( SelectionKey [[answer]] , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( [[answer]] ) ) { [[answer]] . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( "False" != "False" ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "True" == "True" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 504 ---------------------------------------------
Perform a read . --> Reads the data from the input . --> Socre: 1.0

[[[[Adv]]]]: private boolean doRead ( SelectionKey [[key]] , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) [[key]] . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { [[key]] . cancel ( ) ; handleIOException ( [[key]] , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean doRead ( SelectionKey [[ball]] , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) [[ball]] . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { [[ball]] . cancel ( ) ; handleIOException ( [[ball]] , conn , new IOException ( ) ) ; return "False" != "False" ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return "True" == "True" ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 505 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 72 / 426 / 7 / 505:  50%|█████     | 505/1000 [41:25<40:36,  4.92s/it][Succeeded / Failed / Skipped / Total] 72 / 426 / 7 / 505:  51%|█████     | 506/1000 [41:26<40:27,  4.91s/it][Succeeded / Failed / Skipped / Total] 72 / 426 / 8 / 506:  51%|█████     | 506/1000 [41:26<40:27,  4.91s/it][Succeeded / Failed / Skipped / Total] 72 / 426 / 8 / 506:  51%|█████     | 507/1000 [41:26<40:17,  4.90s/it][Succeeded / Failed / Skipped / Total] 72 / 427 / 8 / 507:  51%|█████     | 507/1000 [41:26<40:17,  4.90s/it][Succeeded / Failed / Skipped / Total] 72 / 427 / 8 / 507:  51%|█████     | 508/1000 [41:26<40:08,  4.89s/it][Succeeded / Failed / Skipped / Total] 72 / 428 / 8 / 508:  51%|█████     | 508/1000 [41:26<40:08,  4.89s/it][Succeeded / Failed / Skipped / Total] 72 / 428 / 8 / 508:  51%|█████     | 509/1000 [41:29<40:01,  4.89s/it][Succeeded / Failed / Skipped / Total] 73 / 428 / 8 / 509:  51%|█████     | 509/1000 [41:29<40:01,  4.89s/it][Succeeded / Failed / Skipped / Total] 73 / 428 / 8 / 509:  51%|█████     | 510/1000 [41:35<39:57,  4.89s/it][Succeeded / Failed / Skipped / Total] 74 / 428 / 8 / 510:  51%|█████     | 510/1000 [41:35<39:57,  4.89s/it][Succeeded / Failed / Skipped / Total] 74 / 428 / 8 / 510:  51%|█████     | 511/1000 [41:38<39:50,  4.89s/it][Succeeded / Failed / Skipped / Total] 74 / 429 / 8 / 511:  51%|█████     | 511/1000 [41:38<39:50,  4.89s/it][Succeeded / Failed / Skipped / Total] 74 / 429 / 8 / 511:  51%|█████     | 512/1000 [41:41<39:44,  4.89s/it]Sends the handshake . --> [[[FAILED]]]

[[[[Adv]]]]: private void sendHandshake ( ) throws InvalidHandshakeException { String [[path]] ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) [[path]] = "/" ; else [[path]] = part1 ; if ( part2 != null ) [[path]] += ' ' + part2 ; int [[port]] = getPort ( ) ; String [[host]] = uri . getHost ( ) + ( ( [[port]] != WebSocketImpl . DEFAULT_PORT && [[port]] != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + [[port]] : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( [[path]] ) ; handshake . put ( "Host" , [[host]] ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void sendHandshake ( ) throws InvalidHandshakeException { String [[ave]] ; String part1 = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( part1 == null || part1 . length ( ) == 0 ) [[ave]] = "/" ; else [[ave]] = part1 ; if ( part2 != null ) [[ave]] += ' ' + part2 ; int [[harbour]] = getPort ( ) ; String [[mandate]] = uri . getHost ( ) + ( ( [[harbour]] != WebSocketImpl . DEFAULT_PORT && [[harbour]] != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + [[harbour]] : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( [[ave]] ) ; handshake . put ( "Host" , [[mandate]] ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 506 ---------------------------------------------
Ensure that a single thread is single thread . --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 507 ---------------------------------------------
Performs shutdown . --> [[[FAILED]]]

[[[[Adv]]]]: private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown

[[[[Adv]]]]: private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 508 ---------------------------------------------
Get the socket associated with the specified connection . --> [[[FAILED]]]

[[[[Adv]]]]: private Socket getSocket ( WebSocket conn ) { WebSocketImpl impl = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket getSocket ( WebSocket conn ) { WebSocketImpl impl = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 509 ---------------------------------------------
Broadcast data to all clients . --> This method will informations about the specified data . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[broadcast]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void [[circulation]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[circulation]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 510 ---------------------------------------------
Handles a single write . --> Writes to socket . --> Socre: 1.0

[[[[Adv]]]]: private void doWrite ( SelectionKey [[key]] ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) [[key]] . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( [[key]] . isValid ( ) ) { [[key]] . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation

[[[[Adv]]]]: private void doWrite ( SelectionKey [[arch]] ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) [[arch]] . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( [[arch]] . isValid ( ) ) { [[arch]] . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 511 ---------------------------------------------
Setup selector and server thread . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean doSetupSelectorAndServerThread ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket [[socket]] = server . socket ( ) ; [[socket]] . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; [[socket]] . setReuseAddress ( isReuseAddr ( ) ) ; [[socket]] . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker [[ex]] : decoders ) { [[ex]] . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , [[ex]] ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean doSetupSelectorAndServerThread ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( "False" != "False" ) ; ServerSocket [[jack]] = server . socket ( ) ; [[jack]] . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; [[jack]] . setReuseAddress ( isReuseAddr ( ) ) ; [[jack]] . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker [[extra]] : decoders ) { [[extra]] . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , [[extra]] ) ; return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 512 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 75 / 429 / 8 / 512:  51%|█████     | 512/1000 [41:41<39:44,  4.89s/it][Succeeded / Failed / Skipped / Total] 75 / 429 / 8 / 512:  51%|█████▏    | 513/1000 [41:45<39:38,  4.88s/it][Succeeded / Failed / Skipped / Total] 76 / 429 / 8 / 513:  51%|█████▏    | 513/1000 [41:45<39:38,  4.88s/it][Succeeded / Failed / Skipped / Total] 76 / 429 / 8 / 513:  51%|█████▏    | 514/1000 [41:47<39:30,  4.88s/it][Succeeded / Failed / Skipped / Total] 77 / 429 / 8 / 514:  51%|█████▏    | 514/1000 [41:47<39:30,  4.88s/it][Succeeded / Failed / Skipped / Total] 77 / 429 / 8 / 514:  52%|█████▏    | 515/1000 [41:50<39:23,  4.87s/it][Succeeded / Failed / Skipped / Total] 77 / 430 / 8 / 515:  52%|█████▏    | 515/1000 [41:50<39:23,  4.87s/it][Succeeded / Failed / Skipped / Total] 77 / 430 / 8 / 515:  52%|█████▏    | 516/1000 [41:52<39:16,  4.87s/it][Succeeded / Failed / Skipped / Total] 78 / 430 / 8 / 516:  52%|█████▏    | 516/1000 [41:52<39:16,  4.87s/it][Succeeded / Failed / Skipped / Total] 78 / 430 / 8 / 516:  52%|█████▏    | 517/1000 [41:52<39:07,  4.86s/it][Succeeded / Failed / Skipped / Total] 78 / 431 / 8 / 517:  52%|█████▏    | 517/1000 [41:52<39:07,  4.86s/it][Succeeded / Failed / Skipped / Total] 78 / 431 / 8 / 517:  52%|█████▏    | 518/1000 [41:52<38:58,  4.85s/it][Succeeded / Failed / Skipped / Total] 78 / 432 / 8 / 518:  52%|█████▏    | 518/1000 [41:52<38:58,  4.85s/it][Succeeded / Failed / Skipped / Total] 78 / 432 / 8 / 518:  52%|█████▏    | 519/1000 [41:54<38:50,  4.84s/it][Succeeded / Failed / Skipped / Total] 79 / 432 / 8 / 519:  52%|█████▏    | 519/1000 [41:54<38:50,  4.84s/it][Succeeded / Failed / Skipped / Total] 79 / 432 / 8 / 519:  52%|█████▏    | 520/1000 [42:05<38:51,  4.86s/it]Broadcast data to clients . --> Broadcast data --> Socre: 1.0

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > [[clients]] ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : [[clients]] ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > [[customers]] ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : [[customers]] ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , draftFrames , sData , bData ) ; try { client . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 513 ---------------------------------------------
Transfers source to destination . --> Transfers source into destination . --> Socre: 1.0

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int [[limit]] = Math . min ( fremain , toremain ) ; source . limit ( [[limit]] ) ; dest . put ( source ) ; return [[limit]] ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int [[end]] = Math . min ( fremain , toremain ) ; source . limit ( [[end]] ) ; dest . put ( source ) ; return [[end]] ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 514 ---------------------------------------------
Fill the frames map . --> Fill frames from a draft --> Socre: 1.0

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > [[frames]] = null ; if ( sData != null ) { [[frames]] = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { [[frames]] = draft . createFrames ( bData , "False" != "False" ) ; } if ( [[frames]] != null ) { draftFrames . put ( draft , [[frames]] ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > [[columns]] = null ; if ( sData != null ) { [[columns]] = draft . createFrames ( sData , "False" != "False" ) ; } if ( bData != null ) { [[columns]] = draft . createFrames ( bData , "False" != "False" ) ; } if ( [[columns]] != null ) { draftFrames . put ( draft , [[columns]] ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 515 ---------------------------------------------
Returns the entity manager for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager em ( String [[name]] ) { EntityManagerFactory emf = emfs . get ( [[name]] ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager em ( String [[address]] ) { EntityManagerFactory emf = emfs . get ( [[address]] ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 516 ---------------------------------------------
Start the manager . --> Group all persistence units --> Socre: 1.0

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[group]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 517 ---------------------------------------------
Converts the given arguments to Scala buffer . --> [[[FAILED]]]

[[[[Adv]]]]: private static Seq < Object > convertArgsToScalaBuffer ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > convertArgsToScalaBuffer ( final Object ... args ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( args ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 518 ---------------------------------------------
Wraps the given arguments if necessary . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > wrapArgsToListIfNeeded ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > wrapArgsToListIfNeeded ( final T ... args ) { List < T > out ; if ( args != null && args . length == 1 && args [ 0 ] instanceof List ) { out = ( List < T > ) args [ 0 ] ; } else { out = Arrays . asList ( args ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 519 ---------------------------------------------
Broadcast a text to all clients . --> Shows the findings . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( String [[text]] , Collection < WebSocket > [[clients]] ) { if ( [[text]] == null || [[clients]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[text]] , [[clients]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void [[sow]] ( String [[folklore]] , Collection < WebSocket > [[patrons]] ) { if ( [[folklore]] == null || [[patrons]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[folklore]] , [[patrons]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
[Succeeded / Failed / Skipped / Total] 79 / 433 / 8 / 520:  52%|█████▏    | 520/1000 [42:05<38:51,  4.86s/it][Succeeded / Failed / Skipped / Total] 79 / 434 / 8 / 521:  52%|█████▏    | 521/1000 [42:05<38:42,  4.85s/it][Succeeded / Failed / Skipped / Total] 79 / 434 / 8 / 521:  52%|█████▏    | 522/1000 [42:07<38:34,  4.84s/it][Succeeded / Failed / Skipped / Total] 79 / 435 / 8 / 522:  52%|█████▏    | 522/1000 [42:07<38:34,  4.84s/it][Succeeded / Failed / Skipped / Total] 79 / 436 / 8 / 523:  52%|█████▏    | 523/1000 [42:07<38:25,  4.83s/it][Succeeded / Failed / Skipped / Total] 79 / 436 / 8 / 523:  52%|█████▏    | 524/1000 [42:08<38:17,  4.83s/it][Succeeded / Failed / Skipped / Total] 79 / 437 / 8 / 524:  52%|█████▏    | 524/1000 [42:08<38:17,  4.83s/it][Succeeded / Failed / Skipped / Total] 79 / 438 / 8 / 525:  52%|█████▎    | 525/1000 [42:09<38:08,  4.82s/it][Succeeded / Failed / Skipped / Total] 79 / 438 / 8 / 525:  53%|█████▎    | 526/1000 [42:09<37:59,  4.81s/it][Succeeded / Failed / Skipped / Total] 79 / 439 / 8 / 526:  53%|█████▎    | 526/1000 [42:09<37:59,  4.81s/it][Succeeded / Failed / Skipped / Total] 79 / 440 / 8 / 527:  53%|█████▎    | 527/1000 [42:09<37:50,  4.80s/it][Succeeded / Failed / Skipped / Total] 79 / 440 / 8 / 527:  53%|█████▎    | 528/1000 [42:10<37:42,  4.79s/it][Succeeded / Failed / Skipped / Total] 79 / 441 / 8 / 528:  53%|█████▎    | 528/1000 [42:10<37:42,  4.79s/it][Succeeded / Failed / Skipped / Total] 79 / 442 / 8 / 529:  53%|█████▎    | 529/1000 [42:10<37:33,  4.78s/it][Succeeded / Failed / Skipped / Total] 79 / 442 / 8 / 529:  53%|█████▎    | 530/1000 [42:11<37:24,  4.78s/it][Succeeded / Failed / Skipped / Total] 79 / 443 / 8 / 530:  53%|█████▎    | 530/1000 [42:11<37:24,  4.78s/it][Succeeded / Failed / Skipped / Total] 79 / 444 / 8 / 531:  53%|█████▎    | 531/1000 [42:11<37:15,  4.77s/it][Succeeded / Failed / Skipped / Total] 79 / 444 / 8 / 531:  53%|█████▎    | 532/1000 [42:11<37:07,  4.76s/it]--------------------------------------------- Result 520 ---------------------------------------------
Enters a transaction with the given transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public void withTransaction ( Consumer < EntityManager > [[block]] ) { withTransaction ( em -> { [[block]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void withTransaction ( Consumer < EntityManager > [[ball]] ) { withTransaction ( em -> { [[ball]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 521 ---------------------------------------------
Gets localized message . --> [[[FAILED]]]

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > [[keys]] , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( [[keys]] ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , List < String > [[packs]] , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( [[packs]] ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 522 ---------------------------------------------
Returns the preferred messages for this language . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages preferred ( Collection < Lang > [[candidates]] ) { Seq < Lang > cs = Scala . asScala ( [[candidates]] ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages preferred ( Collection < Lang > [[nominees]] ) { Seq < Lang > cs = Scala . asScala ( [[nominees]] ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 523 ---------------------------------------------
Gets localized message . --> [[[FAILED]]]

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , String [[key]] , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[key]] , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String get ( play . api . i18n . Lang lang , String [[panel]] , Object ... args ) { Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[panel]] , scalaArgs , lang ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 524 ---------------------------------------------
Display the preferred message for this request . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages preferred ( Http . RequestHeader [[request]] ) { play . api . i18n . Messages msgs = messages . preferred ( [[request]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages preferred ( Http . RequestHeader [[requirement]] ) { play . api . i18n . Messages msgs = messages . preferred ( [[requirement]] ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 525 ---------------------------------------------
Adds bindings for the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self bindings ( GuiceableModule ... modules ) { return newBuilder ( delegate . bindings ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self bindings ( GuiceableModule ... modules ) { return newBuilder ( delegate . bindings ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 526 ---------------------------------------------
Add bindings for the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... modules ) { return bindings ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self bindings ( play . api . inject . Module ... modules ) { return bindings ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 527 ---------------------------------------------
Define a set of REPLACE bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self REPLACEME0 ( play . api . inject . Binding < ? > ... REPLACEME0 ) { return REPLACEME0 ( Guiceable . bindings ( REPLACEME0 ) ) ; }
[[[[Nl]]]]: Add Play bindings .

[[[[Adv]]]]: public final Self REPLACEME0 ( play . api . inject . Binding < ? > ... REPLACEME0 ) { return REPLACEME0 ( Guiceable . bindings ( REPLACEME0 ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 528 ---------------------------------------------
Overrides the delegate set of given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self overrides ( GuiceableModule ... modules ) { return newBuilder ( delegate . overrides ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self overrides ( GuiceableModule ... modules ) { return newBuilder ( delegate . overrides ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 529 ---------------------------------------------
Set the overrides for the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Module ... modules ) { return overrides ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Module ... modules ) { return overrides ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 530 ---------------------------------------------
Set the bindings for the given bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Binding < ? > ... bindings ) { return overrides ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Binding < ? > ... bindings ) { return overrides ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 531 ---------------------------------------------
Disables the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self disable ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self disable ( Class < ? > ... moduleClasses ) { return newBuilder ( delegate . disable ( Scala . toSeq ( moduleClasses ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 532 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 79 / 445 / 8 / 532:  53%|█████▎    | 532/1000 [42:11<37:07,  4.76s/it][Succeeded / Failed / Skipped / Total] 79 / 446 / 8 / 533:  53%|█████▎    | 533/1000 [42:12<36:58,  4.75s/it][Succeeded / Failed / Skipped / Total] 79 / 446 / 8 / 533:  53%|█████▎    | 534/1000 [42:12<36:49,  4.74s/it][Succeeded / Failed / Skipped / Total] 79 / 447 / 8 / 534:  53%|█████▎    | 534/1000 [42:12<36:49,  4.74s/it][Succeeded / Failed / Skipped / Total] 79 / 447 / 9 / 535:  54%|█████▎    | 535/1000 [42:12<36:41,  4.73s/it][Succeeded / Failed / Skipped / Total] 79 / 447 / 9 / 535:  54%|█████▎    | 536/1000 [42:13<36:32,  4.73s/it][Succeeded / Failed / Skipped / Total] 79 / 448 / 9 / 536:  54%|█████▎    | 536/1000 [42:13<36:32,  4.73s/it][Succeeded / Failed / Skipped / Total] 79 / 449 / 9 / 537:  54%|█████▎    | 537/1000 [42:13<36:24,  4.72s/it][Succeeded / Failed / Skipped / Total] 79 / 449 / 9 / 537:  54%|█████▍    | 538/1000 [42:14<36:16,  4.71s/it][Succeeded / Failed / Skipped / Total] 80 / 449 / 9 / 538:  54%|█████▍    | 538/1000 [42:14<36:16,  4.71s/it][Succeeded / Failed / Skipped / Total] 80 / 450 / 9 / 539:  54%|█████▍    | 539/1000 [42:15<36:08,  4.70s/it][Succeeded / Failed / Skipped / Total] 80 / 450 / 9 / 539:  54%|█████▍    | 540/1000 [42:16<36:00,  4.70s/it][Succeeded / Failed / Skipped / Total] 80 / 451 / 9 / 540:  54%|█████▍    | 540/1000 [42:16<36:00,  4.70s/it][Succeeded / Failed / Skipped / Total] 80 / 452 / 9 / 541:  54%|█████▍    | 541/1000 [42:26<36:00,  4.71s/it][Succeeded / Failed / Skipped / Total] 80 / 452 / 9 / 541:  54%|█████▍    | 542/1000 [42:27<35:52,  4.70s/it][Succeeded / Failed / Skipped / Total] 80 / 453 / 9 / 542:  54%|█████▍    | 542/1000 [42:27<35:52,  4.70s/it][Succeeded / Failed / Skipped / Total] 80 / 453 / 9 / 542:  54%|█████▍    | 543/1000 [42:27<35:43,  4.69s/it][Succeeded / Failed / Skipped / Total] 80 / 454 / 9 / 543:  54%|█████▍    | 543/1000 [42:27<35:43,  4.69s/it][Succeeded / Failed / Skipped / Total] 80 / 454 / 9 / 543:  54%|█████▍    | 544/1000 [42:27<35:35,  4.68s/it]Sets the language . --> [[[FAILED]]]

[[[[Adv]]]]: public Result setLang ( Result [[result]] , Lang lang ) { return messages . setLang ( [[result]] . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result setLang ( Result [[outcome]] , Lang lang ) { return messages . setLang ( [[outcome]] . asScala ( ) , lang ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 533 ---------------------------------------------
Gets an existing file or directory . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > getExistingFile ( String relativePath ) { return OptionConverters . toJava ( env . getExistingFile ( relativePath ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > getExistingFile ( String relativePath ) { return OptionConverters . toJava ( env . getExistingFile ( relativePath ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 534 ---------------------------------------------
Gets the binding of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A extends Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 535 ---------------------------------------------
Static factory method . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static < A , B > Tuple < A , B > Tuple ( A a , B b ) { return new Tuple < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 536 ---------------------------------------------
Static factory method for creating a tuple . --> [[[FAILED]]]

[[[[Adv]]]]: public static < A , B , C , D , E > Tuple5 < A , B , C , D , E > Tuple5 ( A a , B b , C c , D d , E e ) { return new Tuple5 < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , B , C , D , E > Tuple5 < A , B , C , D , E > Tuple5 ( A a , B b , C c , D d , E e ) { return new Tuple5 < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 537 ---------------------------------------------
Convert an execution context to an executor . --> [[[FAILED]]]

[[[[Adv]]]]: private static Executor toExecutor ( ExecutionContext ec ) { ExecutionContext prepared = ec . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor toExecutor ( ExecutionContext ec ) { ExecutionContext prepared = ec . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
--------------------------------------------- Result 538 ---------------------------------------------
Call the given request . --> Adaptor to a CompletionStage --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < Result > [[call]] ( Request req ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > [[appeal]] ( Request req ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 539 ---------------------------------------------
Creates a default JAConfig . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig of ( String n1 , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig of ( String n1 , String u1 , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , u1 ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 540 ---------------------------------------------
Returns a new JAConfig configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig of ( String [[name]] , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[name]] , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig of ( String [[title]] , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( [[title]] , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 541 ---------------------------------------------
Checks if the specified key is defined at the specified key . --> [[[FAILED]]]

[[[[Adv]]]]: public Boolean isDefinedAt ( play . api . i18n . Lang lang , String [[key]] ) { return messages . isDefinedAt ( [[key]] , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean isDefinedAt ( play . api . i18n . Lang lang , String [[cardinal]] ) { return messages . isDefinedAt ( [[cardinal]] , lang ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 542 ---------------------------------------------
Creates a new JsonNode . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > json ( String callbackName ) { return Flow . of ( JsonNode . class ) . map ( json -> { return ByteString . fromString ( Json . stringify ( json ) ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > json ( String callbackName ) { return Flow . of ( JsonNode . class ) . map ( json -> { return ByteString . fromString ( Json . stringify ( json ) ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 543 ---------------------------------------------
Adds a mapped constraint for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public < T extends ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T extends ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 544 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 80 / 455 / 9 / 544:  54%|█████▍    | 544/1000 [42:27<35:35,  4.68s/it][Succeeded / Failed / Skipped / Total] 80 / 455 / 9 / 544:  55%|█████▍    | 545/1000 [42:31<35:30,  4.68s/it][Succeeded / Failed / Skipped / Total] 80 / 456 / 9 / 545:  55%|█████▍    | 545/1000 [42:31<35:30,  4.68s/it][Succeeded / Failed / Skipped / Total] 80 / 456 / 9 / 545:  55%|█████▍    | 546/1000 [42:32<35:22,  4.67s/it][Succeeded / Failed / Skipped / Total] 80 / 457 / 9 / 546:  55%|█████▍    | 546/1000 [42:32<35:22,  4.67s/it][Succeeded / Failed / Skipped / Total] 80 / 457 / 9 / 546:  55%|█████▍    | 547/1000 [42:48<35:27,  4.70s/it][Succeeded / Failed / Skipped / Total] 80 / 458 / 9 / 547:  55%|█████▍    | 547/1000 [42:48<35:27,  4.70s/it][Succeeded / Failed / Skipped / Total] 80 / 458 / 9 / 547:  55%|█████▍    | 548/1000 [42:54<35:23,  4.70s/it][Succeeded / Failed / Skipped / Total] 80 / 459 / 9 / 548:  55%|█████▍    | 548/1000 [42:54<35:23,  4.70s/it][Succeeded / Failed / Skipped / Total] 80 / 459 / 9 / 548:  55%|█████▍    | 549/1000 [42:57<35:17,  4.70s/it][Succeeded / Failed / Skipped / Total] 81 / 459 / 9 / 549:  55%|█████▍    | 549/1000 [42:58<35:17,  4.70s/it][Succeeded / Failed / Skipped / Total] 81 / 459 / 9 / 549:  55%|█████▌    | 550/1000 [42:59<35:10,  4.69s/it]Returns a new instance of the given key . --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < T extends ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 545 ---------------------------------------------
Returns a flow of bytes . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[string]] ( String callbackName ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[clarinet]] ( String callbackName ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 546 ---------------------------------------------
Returns the matching method matching the given name and parameter types . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method getMatchingAccessibleMethod ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method [[method]] = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( [[method]] ) ; return [[method]] ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method getMatchingAccessibleMethod ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method [[approach]] = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( [[approach]] ) ; return [[approach]] ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 547 ---------------------------------------------
Handler for bad request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onBadRequest ( RequestHeader [[request]] , String [[message]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[request]] . method ( ) , [[request]] . uri ( ) , [[message]] , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > onBadRequest ( RequestHeader [[essential]] , String [[trace]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[essential]] . method ( ) , [[essential]] . uri ( ) , [[trace]] , [[essential]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 548 ---------------------------------------------
Creates a new instance from a map of persistence units . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig from ( Map < String , String > [[map]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > [[entry]] : [[map]] . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig from ( Map < String , String > [[dot]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > [[admission]] : [[dot]] . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( [[admission]] . getKey ( ) , [[admission]] . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 549 ---------------------------------------------
Invokes the onClientError with the given status code and message . --> Invokes onClientError --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > onClientError ( RequestHeader [[request]] , int statusCode , String [[message]] ) { if ( statusCode == 400 ) { return onBadRequest ( [[request]] , [[message]] ) ; } else if ( statusCode == 403 ) { return onForbidden ( [[request]] , [[message]] ) ; } else if ( statusCode == 404 ) { return onNotFound ( [[request]] , [[message]] ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( [[request]] , statusCode , [[message]] ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + [[message]] ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > onClientError ( RequestHeader [[term]] , int statusCode , String [[word]] ) { if ( statusCode == 400 ) { return onBadRequest ( [[term]] , [[word]] ) ; } else if ( statusCode == 403 ) { return onForbidden ( [[term]] , [[word]] ) ; } else if ( statusCode == 404 ) { return onNotFound ( [[term]] , [[word]] ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( [[term]] , statusCode , [[word]] ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + [[word]] ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 550 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 81 / 460 / 9 / 550:  55%|█████▌    | 550/1000 [42:59<35:10,  4.69s/it][Succeeded / Failed / Skipped / Total] 81 / 460 / 9 / 550:  55%|█████▌    | 551/1000 [43:00<35:03,  4.68s/it][Succeeded / Failed / Skipped / Total] 82 / 460 / 9 / 551:  55%|█████▌    | 551/1000 [43:00<35:03,  4.68s/it][Succeeded / Failed / Skipped / Total] 82 / 460 / 9 / 551:  55%|█████▌    | 552/1000 [43:01<34:54,  4.68s/it][Succeeded / Failed / Skipped / Total] 82 / 461 / 9 / 552:  55%|█████▌    | 552/1000 [43:01<34:54,  4.68s/it][Succeeded / Failed / Skipped / Total] 82 / 461 / 9 / 552:  55%|█████▌    | 553/1000 [43:01<34:46,  4.67s/it][Succeeded / Failed / Skipped / Total] 82 / 462 / 9 / 553:  55%|█████▌    | 553/1000 [43:01<34:46,  4.67s/it][Succeeded / Failed / Skipped / Total] 82 / 462 / 9 / 553:  55%|█████▌    | 554/1000 [43:05<34:41,  4.67s/it][Succeeded / Failed / Skipped / Total] 82 / 463 / 9 / 554:  55%|█████▌    | 554/1000 [43:05<34:41,  4.67s/it][Succeeded / Failed / Skipped / Total] 82 / 463 / 9 / 554:  56%|█████▌    | 555/1000 [43:05<34:33,  4.66s/it][Succeeded / Failed / Skipped / Total] 82 / 464 / 9 / 555:  56%|█████▌    | 555/1000 [43:05<34:33,  4.66s/it][Succeeded / Failed / Skipped / Total] 82 / 464 / 9 / 555:  56%|█████▌    | 556/1000 [43:06<34:25,  4.65s/it][Succeeded / Failed / Skipped / Total] 82 / 465 / 9 / 556:  56%|█████▌    | 556/1000 [43:06<34:25,  4.65s/it][Succeeded / Failed / Skipped / Total] 82 / 465 / 9 / 556:  56%|█████▌    | 557/1000 [43:30<34:36,  4.69s/it][Succeeded / Failed / Skipped / Total] 82 / 466 / 9 / 557:  56%|█████▌    | 557/1000 [43:30<34:36,  4.69s/it][Succeeded / Failed / Skipped / Total] 82 / 466 / 9 / 557:  56%|█████▌    | 558/1000 [43:41<34:36,  4.70s/it]Handles server error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > onServerError ( RequestHeader [[request]] , Throwable exception ) { try { UsefulException usefulException = throwableToUsefulException ( exception ) ; logServerError ( [[request]] , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[request]] , usefulException ) ; default : return onDevServerError ( [[request]] , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > onServerError ( RequestHeader [[necessary]] , Throwable exception ) { try { UsefulException usefulException = throwableToUsefulException ( exception ) ; logServerError ( [[necessary]] , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[necessary]] , usefulException ) ; default : return onDevServerError ( [[necessary]] , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 551 ---------------------------------------------
Logs internal error . --> Log internal error --> Socre: 1.0

[[[[Adv]]]]: protected void logServerError ( RequestHeader [[request]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[request]] . method ( ) , [[request]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void logServerError ( RequestHeader [[appeal]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[appeal]] . method ( ) , [[appeal]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 552 ---------------------------------------------
Converts a throwable to a useful exception --> [[[FAILED]]]

[[[[Adv]]]]: protected final UsefulException throwableToUsefulException ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException throwableToUsefulException ( final Throwable throwable ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , throwable ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 553 ---------------------------------------------
Handle not found error . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onNotFound ( RequestHeader request , String [[message]] ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > onNotFound ( RequestHeader request , String [[bulletin]] ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 554 ---------------------------------------------
Handle error rendering . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onDevServerError ( RequestHeader [[request]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > onDevServerError ( RequestHeader [[appeal]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , [[appeal]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
--------------------------------------------- Result 555 ---------------------------------------------
Handle error . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onProdServerError ( RequestHeader [[request]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > onProdServerError ( RequestHeader [[necessary]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( exception , [[necessary]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 556 ---------------------------------------------
Creates a new documentation handler from the given directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromDirectory ( File [[directory]] ) { FileRepository repo = new FilesystemRepository ( [[directory]] ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler fromDirectory ( File [[table]] ) { FileRepository repo = new FilesystemRepository ( [[table]] ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 557 ---------------------------------------------
Display a forbidden page . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onForbidden ( RequestHeader [[request]] , String [[message]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > onForbidden ( RequestHeader [[requisite]] , String [[significance]] ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[requisite]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 558 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 82 / 467 / 9 / 558:  56%|█████▌    | 558/1000 [43:41<34:36,  4.70s/it][Succeeded / Failed / Skipped / Total] 82 / 467 / 9 / 558:  56%|█████▌    | 559/1000 [43:48<34:33,  4.70s/it][Succeeded / Failed / Skipped / Total] 82 / 468 / 9 / 559:  56%|█████▌    | 559/1000 [43:48<34:33,  4.70s/it][Succeeded / Failed / Skipped / Total] 82 / 468 / 9 / 559:  56%|█████▌    | 560/1000 [43:50<34:26,  4.70s/it][Succeeded / Failed / Skipped / Total] 82 / 469 / 9 / 560:  56%|█████▌    | 560/1000 [43:50<34:26,  4.70s/it][Succeeded / Failed / Skipped / Total] 82 / 469 / 9 / 560:  56%|█████▌    | 561/1000 [44:04<34:29,  4.71s/it][Succeeded / Failed / Skipped / Total] 82 / 470 / 9 / 561:  56%|█████▌    | 561/1000 [44:04<34:29,  4.71s/it][Succeeded / Failed / Skipped / Total] 82 / 470 / 9 / 561:  56%|█████▌    | 562/1000 [44:05<34:21,  4.71s/it][Succeeded / Failed / Skipped / Total] 82 / 471 / 9 / 562:  56%|█████▌    | 562/1000 [44:05<34:21,  4.71s/it][Succeeded / Failed / Skipped / Total] 82 / 471 / 9 / 562:  56%|█████▋    | 563/1000 [44:06<34:13,  4.70s/it][Succeeded / Failed / Skipped / Total] 82 / 472 / 9 / 563:  56%|█████▋    | 563/1000 [44:06<34:13,  4.70s/it][Succeeded / Failed / Skipped / Total] 82 / 472 / 9 / 563:  56%|█████▋    | 564/1000 [44:12<34:10,  4.70s/it][Succeeded / Failed / Skipped / Total] 82 / 473 / 9 / 564:  56%|█████▋    | 564/1000 [44:12<34:10,  4.70s/it][Succeeded / Failed / Skipped / Total] 82 / 473 / 9 / 564:  56%|█████▋    | 565/1000 [44:22<34:10,  4.71s/it][Succeeded / Failed / Skipped / Total] 82 / 474 / 9 / 565:  56%|█████▋    | 565/1000 [44:22<34:10,  4.71s/it][Succeeded / Failed / Skipped / Total] 82 / 474 / 9 / 565:  57%|█████▋    | 566/1000 [44:29<34:06,  4.72s/it]Creates a build doc handler for a directory and a given directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromDirectoryAndJar ( File directory , JarFile jarFile , String [[base]] ) { return fromDirectoryAndJar ( directory , jarFile , [[base]] , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler fromDirectoryAndJar ( File directory , JarFile jarFile , String [[groundwork]] ) { return fromDirectoryAndJar ( directory , jarFile , [[groundwork]] , "False" != "False" ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 559 ---------------------------------------------
Create a documentation handler from a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromJar ( JarFile jarFile , String [[base]] ) { FileRepository repo = new JarRepository ( jarFile , Option . apply ( [[base]] ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler fromJar ( JarFile jarFile , String [[archive]] ) { FileRepository repo = new JarRepository ( jarFile , Option . apply ( [[archive]] ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 560 ---------------------------------------------
Consumes all data . --> [[[FAILED]]]

[[[[Adv]]]]: public CompletionStage < ByteString > consumeData ( Materializer [[mat]] ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , [[mat]] ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > consumeData ( Materializer [[rug]] ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , [[rug]] ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 561 ---------------------------------------------
Creates a documentation handler from a directory and a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromDirectoryAndJar ( File [[directory]] , JarFile jarFile , String [[base]] , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( [[directory]] ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( [[base]] ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler fromDirectoryAndJar ( File [[list]] , JarFile jarFile , String [[warehouse]] , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( [[list]] ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( [[warehouse]] ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 562 ---------------------------------------------
Creates an instance from a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity fromString ( String [[content]] , String charset ) { return new Strict ( ByteString . fromString ( [[content]] , charset ) , Optional . of ( "text/plain; charset=" + charset ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity fromString ( String [[contentment]] , String charset ) { return new Strict ( ByteString . fromString ( [[contentment]] , charset ) , Optional . of ( "text/plain; charset=" + charset ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 563 ---------------------------------------------
Creates a chunked entity from the specified source . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity chunked ( Source < ByteString , ? > [[data]] , Optional < String > contentType ) { return new Chunked ( [[data]] . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity chunked ( Source < ByteString , ? > [[materials]] , Optional < String > contentType ) { return new Chunked ( [[materials]] . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 564 ---------------------------------------------
Create an HttpEntity from content . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity fromContent ( Content [[content]] , String charset ) { String [[body]] ; if ( [[content]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity fromContent ( Content [[gratification]] , String charset ) { String [[ass]] ; if ( [[gratification]] instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 565 ---------------------------------------------
Create a BuildDocHandler from a list of files . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromResources ( File [ ] [[files]] , String [ ] baseDirs ) throws IOException { assert ( [[files]] . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ [[files]] . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < [[files]] . length ; i ++ ) { File [[file]] = [[files]] [ i ] ; String baseDir = baseDirs [ i ] ; if ( [[file]] . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( [[file]] ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler fromResources ( File [ ] [[flats]] , String [ ] baseDirs ) throws IOException { assert ( [[flats]] . length == baseDirs . length ) ; FileRepository [ ] repositories = new FileRepository [ [[flats]] . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < [[flats]] . length ; i ++ ) { File [[copy]] = [[flats]] [ i ] ; String baseDir = baseDirs [ i ] ; if ( [[copy]] . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( [[copy]] ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 566 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 83 / 474 / 9 / 566:  57%|█████▋    | 566/1000 [44:29<34:06,  4.72s/it][Succeeded / Failed / Skipped / Total] 83 / 474 / 9 / 566:  57%|█████▋    | 567/1000 [44:36<34:03,  4.72s/it][Succeeded / Failed / Skipped / Total] 84 / 474 / 9 / 567:  57%|█████▋    | 567/1000 [44:36<34:03,  4.72s/it][Succeeded / Failed / Skipped / Total] 84 / 474 / 9 / 567:  57%|█████▋    | 568/1000 [44:40<33:58,  4.72s/it][Succeeded / Failed / Skipped / Total] 85 / 474 / 9 / 568:  57%|█████▋    | 568/1000 [44:40<33:58,  4.72s/it][Succeeded / Failed / Skipped / Total] 85 / 474 / 9 / 568:  57%|█████▋    | 569/1000 [44:41<33:50,  4.71s/it][Succeeded / Failed / Skipped / Total] 85 / 474 / 10 / 569:  57%|█████▋    | 569/1000 [44:41<33:50,  4.71s/it][Succeeded / Failed / Skipped / Total] 85 / 474 / 10 / 569:  57%|█████▋    | 570/1000 [44:42<33:43,  4.71s/it][Succeeded / Failed / Skipped / Total] 85 / 475 / 10 / 570:  57%|█████▋    | 570/1000 [44:42<33:43,  4.71s/it][Succeeded / Failed / Skipped / Total] 85 / 475 / 10 / 570:  57%|█████▋    | 571/1000 [44:42<33:35,  4.70s/it][Succeeded / Failed / Skipped / Total] 85 / 476 / 10 / 571:  57%|█████▋    | 571/1000 [44:42<33:35,  4.70s/it][Succeeded / Failed / Skipped / Total] 85 / 476 / 10 / 571:  57%|█████▋    | 572/1000 [44:49<33:32,  4.70s/it][Succeeded / Failed / Skipped / Total] 85 / 477 / 10 / 572:  57%|█████▋    | 572/1000 [44:49<33:32,  4.70s/it][Succeeded / Failed / Skipped / Total] 85 / 477 / 10 / 572:  57%|█████▋    | 573/1000 [44:50<33:24,  4.70s/it][Succeeded / Failed / Skipped / Total] 85 / 478 / 10 / 573:  57%|█████▋    | 573/1000 [44:50<33:24,  4.70s/it][Succeeded / Failed / Skipped / Total] 85 / 478 / 10 / 573:  57%|█████▋    | 574/1000 [44:50<33:17,  4.69s/it][Succeeded / Failed / Skipped / Total] 85 / 479 / 10 / 574:  57%|█████▋    | 574/1000 [44:50<33:17,  4.69s/it][Succeeded / Failed / Skipped / Total] 85 / 479 / 10 / 574:  57%|█████▊    | 575/1000 [44:52<33:09,  4.68s/it][Succeeded / Failed / Skipped / Total] 85 / 480 / 10 / 575:  57%|█████▊    | 575/1000 [44:52<33:09,  4.68s/it][Succeeded / Failed / Skipped / Total] 85 / 480 / 10 / 575:  58%|█████▊    | 576/1000 [44:52<33:02,  4.67s/it]Creates a HTTP response with the given content . --> void --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , byte [ ] [[content]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[status]] , new HttpEntity . Strict ( ByteString . fromArray ( [[content]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result [[caste]] ( int status , byte [ ] [[gratification]] ) { if ( [[gratification]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[caste]] , new HttpEntity . Strict ( ByteString . fromArray ( [[gratification]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 567 ---------------------------------------------
Creates a JSON response with the given content . --> Perform an aspect ratio --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , JsonNode content ) { return [[status]] ( [[status]] , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result [[aspect]] ( int [[caste]] , JsonNode content ) { return [[aspect]] ( [[aspect]] , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 568 ---------------------------------------------
Sends a content response to a JSON response . --> This method is used to send assistance --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , JsonNode [[content]] , JsonEncoding encoding ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[status]] ( [[status]] ) . sendJson ( [[content]] , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result [[caste]] ( int status , JsonNode [[gratification]] , JsonEncoding encoding ) { if ( [[gratification]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[caste]] ( [[caste]] ) . sendJson ( [[gratification]] , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 569 ---------------------------------------------
Finds a user by id --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 570 ---------------------------------------------
Selects the preferred language . --> [[[FAILED]]]

[[[[Adv]]]]: public Lang preferred ( Collection < Lang > [[candidates]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[candidates]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang preferred ( Collection < Lang > [[nominees]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[nominees]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 571 ---------------------------------------------
Returns a duplicate of this call . --> [[[FAILED]]]

[[[[Adv]]]]: public Call unique ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call unique ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 572 ---------------------------------------------
Returns a new call with the specified fragment . --> [[[FAILED]]]

[[[[Adv]]]]: public Call withFragment ( String [[fragment]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fragment]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call withFragment ( String [[valve]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[valve]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 573 ---------------------------------------------
Creates a Status response with the given content . --> [[[FAILED]]]

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , File [[content]] ) { return [[status]] ( [[status]] , [[content]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[position]] ( int [[realm]] , File [[substance]] ) { return [[position]] ( [[position]] , [[substance]] , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 574 ---------------------------------------------
Returns the absolute URL of the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public String absoluteURL ( Http . Request [[request]] ) { return absoluteURL ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String absoluteURL ( Http . Request [[requirement]] ) { return absoluteURL ( [[requirement]] . secure ( ) , [[requirement]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 575 ---------------------------------------------
Returns the web socket URL of the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public String webSocketURL ( Http . Request [[request]] ) { return webSocketURL ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String webSocketURL ( Http . Request [[appeal]] ) { return webSocketURL ( [[appeal]] . secure ( ) , [[appeal]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 576 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 85 / 481 / 10 / 576:  58%|█████▊    | 576/1000 [44:52<33:02,  4.67s/it][Succeeded / Failed / Skipped / Total] 85 / 481 / 10 / 576:  58%|█████▊    | 577/1000 [44:56<32:57,  4.67s/it][Succeeded / Failed / Skipped / Total] 86 / 481 / 10 / 577:  58%|█████▊    | 577/1000 [44:56<32:57,  4.67s/it][Succeeded / Failed / Skipped / Total] 86 / 481 / 10 / 577:  58%|█████▊    | 578/1000 [44:57<32:49,  4.67s/it][Succeeded / Failed / Skipped / Total] 86 / 482 / 10 / 578:  58%|█████▊    | 578/1000 [44:57<32:49,  4.67s/it][Succeeded / Failed / Skipped / Total] 86 / 482 / 10 / 578:  58%|█████▊    | 579/1000 [44:58<32:41,  4.66s/it][Succeeded / Failed / Skipped / Total] 86 / 483 / 10 / 579:  58%|█████▊    | 579/1000 [44:58<32:41,  4.66s/it][Succeeded / Failed / Skipped / Total] 86 / 483 / 10 / 579:  58%|█████▊    | 580/1000 [44:58<32:34,  4.65s/it][Succeeded / Failed / Skipped / Total] 86 / 484 / 10 / 580:  58%|█████▊    | 580/1000 [44:58<32:34,  4.65s/it][Succeeded / Failed / Skipped / Total] 86 / 484 / 10 / 580:  58%|█████▊    | 581/1000 [44:58<32:26,  4.65s/it][Succeeded / Failed / Skipped / Total] 86 / 485 / 10 / 581:  58%|█████▊    | 581/1000 [44:58<32:26,  4.65s/it][Succeeded / Failed / Skipped / Total] 86 / 485 / 10 / 581:  58%|█████▊    | 582/1000 [44:59<32:18,  4.64s/it][Succeeded / Failed / Skipped / Total] 86 / 486 / 10 / 582:  58%|█████▊    | 582/1000 [44:59<32:18,  4.64s/it][Succeeded / Failed / Skipped / Total] 86 / 486 / 10 / 582:  58%|█████▊    | 583/1000 [45:00<32:11,  4.63s/it]Creates an instance of the members injector . --> [[[FAILED]]]

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > createWithListeners ( TypeLiteral < T > [[type]] , Errors [[errors]] ) throws ErrorsException { int numErrorsBefore = [[errors]] . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( [[type]] ) ; } catch ( ConfigurationException e ) { [[errors]] . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , [[errors]] ) ; [[errors]] . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > [[encounter]] = new EncounterImpl <> ( [[errors]] , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding [[binding]] : typeListenerBindings ) { TypeListener typeListener = [[binding]] . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && [[binding]] . getTypeMatcher ( ) . matches ( [[type]] ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( [[type]] , [[encounter]] ) ; } catch ( RuntimeException e ) { [[errors]] . errorNotifyingTypeListener ( [[binding]] , [[type]] , e ) ; } } } [[encounter]] . invalidate ( ) ; [[errors]] . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , [[type]] , [[encounter]] , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > createWithListeners ( TypeLiteral < T > [[copier]] , Errors [[miscues]] ) throws ErrorsException { int numErrorsBefore = [[miscues]] . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( [[copier]] ) ; } catch ( ConfigurationException e ) { [[miscues]] . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( injectionPoints , [[miscues]] ) ; [[miscues]] . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > [[grapple]] = new EncounterImpl <> ( [[miscues]] , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding [[bind]] : typeListenerBindings ) { TypeListener typeListener = [[bind]] . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && [[bind]] . getTypeMatcher ( ) . matches ( [[copier]] ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( [[copier]] , [[grapple]] ) ; } catch ( RuntimeException e ) { [[miscues]] . errorNotifyingTypeListener ( [[bind]] , [[copier]] , e ) ; } } } [[grapple]] . invalidate ( ) ; [[miscues]] . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , [[copier]] , [[grapple]] , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 577 ---------------------------------------------
Sends a status message . --> send success message --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int [[status]] , InputStream [[content]] , long contentLength ) { return status ( status ) . sendInputStream ( [[content]] , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result status ( int [[caste]] , InputStream [[gratification]] , long contentLength ) { return status ( status ) . sendInputStream ( [[gratification]] , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 578 ---------------------------------------------
To json node . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode toJson ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode toJson ( final Object [[materials]] ) { try { return mapper ( ) . valueToTree ( [[materials]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 579 ---------------------------------------------
Deserializes a JsonNode to an object . --> [[[FAILED]]]

[[[[Adv]]]]: public static < A > A fromJson ( JsonNode json , Class < A > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < A > A fromJson ( JsonNode json , Class < A > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 580 ---------------------------------------------
Parses the given string into a JsonNode . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode parse ( String src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode parse ( String src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 581 ---------------------------------------------
Parse a JSON document from an input stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode parse ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode parse ( java . io . InputStream src ) { try { return mapper ( ) . readTree ( src ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 582 ---------------------------------------------
Relative path relative to startPath --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[relative]] ( String startPath , String targetPath ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[correspondent]] ( String startPath , String targetPath ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 583 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 86 / 487 / 10 / 583:  58%|█████▊    | 583/1000 [45:00<32:11,  4.63s/it][Succeeded / Failed / Skipped / Total] 86 / 487 / 10 / 583:  58%|█████▊    | 584/1000 [45:02<32:04,  4.63s/it][Succeeded / Failed / Skipped / Total] 86 / 488 / 10 / 584:  58%|█████▊    | 584/1000 [45:02<32:04,  4.63s/it][Succeeded / Failed / Skipped / Total] 86 / 488 / 10 / 584:  58%|█████▊    | 585/1000 [45:05<31:59,  4.62s/it][Succeeded / Failed / Skipped / Total] 86 / 489 / 10 / 585:  58%|█████▊    | 585/1000 [45:05<31:59,  4.62s/it][Succeeded / Failed / Skipped / Total] 86 / 489 / 10 / 585:  59%|█████▊    | 586/1000 [46:25<32:47,  4.75s/it][Succeeded / Failed / Skipped / Total] 87 / 489 / 10 / 586:  59%|█████▊    | 586/1000 [46:25<32:47,  4.75s/it][Succeeded / Failed / Skipped / Total] 87 / 489 / 10 / 586:  59%|█████▊    | 587/1000 [46:26<32:40,  4.75s/it][Succeeded / Failed / Skipped / Total] 87 / 490 / 10 / 587:  59%|█████▊    | 587/1000 [46:26<32:40,  4.75s/it][Succeeded / Failed / Skipped / Total] 87 / 490 / 10 / 587:  59%|█████▉    | 588/1000 [46:26<32:32,  4.74s/it][Succeeded / Failed / Skipped / Total] 87 / 491 / 10 / 588:  59%|█████▉    | 588/1000 [46:26<32:32,  4.74s/it][Succeeded / Failed / Skipped / Total] 87 / 491 / 10 / 588:  59%|█████▉    | 589/1000 [46:43<32:36,  4.76s/it]Returns canonical form of the given URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static String canonical ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > canonical = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! canonical . empty ( ) && canonical . peek ( ) . equals ( PARENT_DIR ) ) ) canonical . push ( comp ) ; else canonical . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + canonical . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String canonical ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > canonical = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! canonical . empty ( ) && canonical . peek ( ) . equals ( PARENT_DIR ) ) ) canonical . push ( comp ) ; else canonical . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + canonical . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 584 ---------------------------------------------
Given a set of constraints return a list of constraints . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > displayableConstraint ( Set < ConstraintDescriptor < ? > > [[constraints]] ) { return [[constraints]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> displayableConstraint ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > displayableConstraint ( Set < ConstraintDescriptor < ? > > [[conditions]] ) { return [[conditions]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> displayableConstraint ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 585 ---------------------------------------------
Displays a displayable constraint . --> [[[FAILED]]]

[[[[Adv]]]]: public static Tuple < String , List < Object > > displayableConstraint ( ConstraintDescriptor < ? > [[constraint]] ) { final Display displayAnnotation = [[constraint]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[constraint]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > displayableConstraint ( ConstraintDescriptor < ? > [[silence]] ) { final Display displayAnnotation = [[silence]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[silence]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 586 ---------------------------------------------
Returns a connection function that wraps the connection function . --> Shortcut implementation --> Socre: 1.0

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[block]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection connection ) { try { return [[block]] . call ( connection ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > [[avoidance]] ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection connection ) { try { return [[avoidance]] . call ( connection ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 587 ---------------------------------------------
Checks if the given classes are assignable to the given class array . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean isAssignable ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( isAssignable ( classArray [ i ] , toClassArray [ i ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean isAssignable ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return "False" != "False" ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( isAssignable ( classArray [ i ] , toClassArray [ i ] , autoboxing ) == "False" != "False" ) { return "False" != "False" ; } } return "True" == "True" ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 588 ---------------------------------------------
Parse cron expression --> [[[FAILED]]]

[[[[Adv]]]]: public static Date parseCRONExpression ( String cron ) { try { return new CronExpression ( cron ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date parseCRONExpression ( String cron ) { try { return new CronExpression ( cron ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 589 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 87 / 492 / 10 / 589:  59%|█████▉    | 589/1000 [46:43<32:36,  4.76s/it][Succeeded / Failed / Skipped / Total] 87 / 492 / 10 / 589:  59%|█████▉    | 590/1000 [46:44<32:28,  4.75s/it][Succeeded / Failed / Skipped / Total] 87 / 493 / 10 / 590:  59%|█████▉    | 590/1000 [46:44<32:28,  4.75s/it][Succeeded / Failed / Skipped / Total] 87 / 493 / 10 / 590:  59%|█████▉    | 591/1000 [46:47<32:22,  4.75s/it][Succeeded / Failed / Skipped / Total] 87 / 494 / 10 / 591:  59%|█████▉    | 591/1000 [46:47<32:22,  4.75s/it][Succeeded / Failed / Skipped / Total] 87 / 494 / 10 / 591:  59%|█████▉    | 592/1000 [46:49<32:16,  4.75s/it][Succeeded / Failed / Skipped / Total] 88 / 494 / 10 / 592:  59%|█████▉    | 592/1000 [46:49<32:16,  4.75s/it][Succeeded / Failed / Skipped / Total] 88 / 494 / 10 / 592:  59%|█████▉    | 593/1000 [46:59<32:15,  4.75s/it][Succeeded / Failed / Skipped / Total] 88 / 495 / 10 / 593:  59%|█████▉    | 593/1000 [46:59<32:15,  4.75s/it][Succeeded / Failed / Skipped / Total] 88 / 495 / 10 / 593:  59%|█████▉    | 594/1000 [47:25<32:24,  4.79s/it][Succeeded / Failed / Skipped / Total] 89 / 495 / 10 / 594:  59%|█████▉    | 594/1000 [47:25<32:24,  4.79s/it][Succeeded / Failed / Skipped / Total] 89 / 495 / 10 / 594:  60%|█████▉    | 595/1000 [47:25<32:16,  4.78s/it][Succeeded / Failed / Skipped / Total] 89 / 496 / 10 / 595:  60%|█████▉    | 595/1000 [47:25<32:16,  4.78s/it][Succeeded / Failed / Skipped / Total] 89 / 496 / 10 / 595:  60%|█████▉    | 596/1000 [47:25<32:09,  4.77s/it][Succeeded / Failed / Skipped / Total] 89 / 497 / 10 / 596:  60%|█████▉    | 596/1000 [47:25<32:09,  4.77s/it][Succeeded / Failed / Skipped / Total] 89 / 497 / 10 / 596:  60%|█████▉    | 597/1000 [47:28<32:03,  4.77s/it][Succeeded / Failed / Skipped / Total] 89 / 498 / 10 / 597:  60%|█████▉    | 597/1000 [47:28<32:03,  4.77s/it][Succeeded / Failed / Skipped / Total] 89 / 498 / 10 / 597:  60%|█████▉    | 598/1000 [47:29<31:55,  4.76s/it][Succeeded / Failed / Skipped / Total] 89 / 499 / 10 / 598:  60%|█████▉    | 598/1000 [47:29<31:55,  4.76s/it][Succeeded / Failed / Skipped / Total] 89 / 499 / 10 / 598:  60%|█████▉    | 599/1000 [47:29<31:47,  4.76s/it][Succeeded / Failed / Skipped / Total] 89 / 500 / 10 / 599:  60%|█████▉    | 599/1000 [47:29<31:47,  4.76s/it][Succeeded / Failed / Skipped / Total] 89 / 500 / 10 / 599:  60%|██████    | 600/1000 [47:43<31:48,  4.77s/it]Get the next interval --> [[[FAILED]]]

[[[[Adv]]]]: public static long cronInterval ( String cron , Date [[date]] ) { try { return new CronExpression ( cron ) . getNextInterval ( [[date]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long cronInterval ( String cron , Date [[avocado]] ) { try { return new CronExpression ( cron ) . getNextInterval ( [[avocado]] ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 590 ---------------------------------------------
Creates a function that returns a connection to the given connection . --> [[[FAILED]]]

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > connectionFunction ( final ConnectionRunnable [[block]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection [[connection]] ) { try { [[block]] . run ( [[connection]] ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > connectionFunction ( final ConnectionRunnable [[gadget]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection [[relevance]] ) { try { [[gadget]] . run ( [[relevance]] ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 591 ---------------------------------------------
Returns a new Guice application initialized with the given context . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[constructor]] ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 592 ---------------------------------------------
Displays the request . --> This method is intended to be called by TDO --> Socre: 1.0

[[[[Adv]]]]: public static Result TODO ( Request [[request]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[request]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result TODO ( Request [[necessity]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[necessity]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 593 ---------------------------------------------
Create a new ahc client . --> [[[FAILED]]]

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig config , AhcHttpCache [[cache]] , Materializer materializer ) { final StandaloneAhcWSClient [[client]] = StandaloneAhcWSClient . create ( config , [[cache]] , materializer ) ; return new AhcWSClient ( [[client]] , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient create ( AhcWSClientConfig config , AhcHttpCache [[memory]] , Materializer materializer ) { final StandaloneAhcWSClient [[patron]] = StandaloneAhcWSClient . create ( config , [[memory]] , materializer ) ; return new AhcWSClient ( [[patron]] , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 594 ---------------------------------------------
Sets the value for the flash application . --> Support for unit testing --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[flash]] ( String key , String value ) { [[flash]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void [[quartet]] ( String key , String value ) { [[quartet]] ( ) . put ( key , value ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 595 ---------------------------------------------
Returns a binding key . --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A extends Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 596 ---------------------------------------------
Returns the binding key with the specified annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A extends Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 597 ---------------------------------------------
Converts this binding to a Java binding . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > to ( final Class < ? extends T > [[implementation]] ) { return underlying . to ( [[implementation]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > to ( final Class < ? extends T > [[achievement]] ) { return underlying . to ( [[achievement]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
--------------------------------------------- Result 598 ---------------------------------------------
Converts the binding to a Java binding . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > to ( final Provider < ? extends T > [[provider]] ) { return underlying . to ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > to ( final Provider < ? extends T > [[operator]] ) { return underlying . to ( [[operator]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 599 ---------------------------------------------
Converts this binding into a Java binding . --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A extends T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
[Succeeded / Failed / Skipped / Total] 89 / 501 / 10 / 600:  60%|██████    | 600/1000 [47:43<31:48,  4.77s/it][Succeeded / Failed / Skipped / Total] 89 / 501 / 10 / 600:  60%|██████    | 601/1000 [47:44<31:41,  4.77s/it][Succeeded / Failed / Skipped / Total] 89 / 502 / 10 / 601:  60%|██████    | 601/1000 [47:44<31:41,  4.77s/it][Succeeded / Failed / Skipped / Total] 89 / 502 / 10 / 601:  60%|██████    | 602/1000 [47:45<31:34,  4.76s/it][Succeeded / Failed / Skipped / Total] 89 / 503 / 10 / 602:  60%|██████    | 602/1000 [47:45<31:34,  4.76s/it][Succeeded / Failed / Skipped / Total] 89 / 503 / 10 / 602:  60%|██████    | 603/1000 [47:59<31:35,  4.77s/it][Succeeded / Failed / Skipped / Total] 89 / 504 / 10 / 603:  60%|██████    | 603/1000 [47:59<31:35,  4.77s/it][Succeeded / Failed / Skipped / Total] 89 / 504 / 10 / 603:  60%|██████    | 604/1000 [47:59<31:27,  4.77s/it][Succeeded / Failed / Skipped / Total] 89 / 505 / 10 / 604:  60%|██████    | 604/1000 [47:59<31:27,  4.77s/it][Succeeded / Failed / Skipped / Total] 89 / 505 / 10 / 604:  60%|██████    | 605/1000 [48:00<31:20,  4.76s/it][Succeeded / Failed / Skipped / Total] 89 / 506 / 10 / 605:  60%|██████    | 605/1000 [48:00<31:20,  4.76s/it][Succeeded / Failed / Skipped / Total] 89 / 506 / 10 / 605:  61%|██████    | 606/1000 [48:01<31:13,  4.75s/it][Succeeded / Failed / Skipped / Total] 89 / 507 / 10 / 606:  61%|██████    | 606/1000 [48:01<31:13,  4.75s/it][Succeeded / Failed / Skipped / Total] 89 / 507 / 10 / 606:  61%|██████    | 607/1000 [48:04<31:07,  4.75s/it][Succeeded / Failed / Skipped / Total] 89 / 508 / 10 / 607:  61%|██████    | 607/1000 [48:04<31:07,  4.75s/it][Succeeded / Failed / Skipped / Total] 89 / 508 / 10 / 607:  61%|██████    | 608/1000 [48:06<31:01,  4.75s/it]--------------------------------------------- Result 600 ---------------------------------------------
Converts this binding to a Java binding . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > to ( final BindingKey < ? extends T > [[key]] ) { return underlying . to ( [[key]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > to ( final BindingKey < ? extends T > [[hack]] ) { return underlying . to ( [[hack]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 601 ---------------------------------------------
Converts the underlying provider to a Java provider . --> [[[FAILED]]]

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > toProvider ( final Class < P > provider ) { return underlying . toProvider ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > toProvider ( final Class < P > provider ) { return underlying . toProvider ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 602 ---------------------------------------------
Returns the available languages available for the application . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Lang > availables ( Application [[app]] ) { play . api . i18n . Langs langs = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > availables ( Application [[software]] ) { play . api . i18n . Langs langs = [[software]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 603 ---------------------------------------------
Returns the preferred . --> [[[FAILED]]]

[[[[Adv]]]]: public static Lang preferred ( Application [[app]] , List < Lang > availableLangs ) { play . api . i18n . Langs langs = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > [[stream]] = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = [[stream]] . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang preferred ( Application [[api]] , List < Lang > availableLangs ) { play . api . i18n . Langs langs = [[api]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > [[river]] = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = [[river]] . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 604 ---------------------------------------------
Parse evolutions from a map . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader fromMap ( Map < String , List < Evolution > > evolutions ) { return new SimpleEvolutionsReader ( evolutions ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader fromMap ( Map < String , List < Evolution > > evolutions ) { return new SimpleEvolutionsReader ( evolutions ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 605 ---------------------------------------------
Creates a reader for the default evolutions . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader forDefault ( Evolution ... evolutions ) { Map < String , List < Evolution > > [[map]] = new HashMap < String , List < Evolution > > ( ) ; [[map]] . put ( "default" , Arrays . asList ( evolutions ) ) ; return fromMap ( [[map]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader forDefault ( Evolution ... evolutions ) { Map < String , List < Evolution > > [[trace]] = new HashMap < String , List < Evolution > > ( ) ; [[trace]] . put ( "default" , Arrays . asList ( evolutions ) ) ; return fromMap ( [[trace]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 606 ---------------------------------------------
Deletes all EVL executions . --> [[[FAILED]]]

[[[[Adv]]]]: public static void cleanupEvolutions ( Database database , boolean autocommit , String schema ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( database . asScala ( ) , schema ) ; evolutions . evolve ( evolutions . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void cleanupEvolutions ( Database database , boolean autocommit , String schema ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( database . asScala ( ) , schema ) ; evolutions . evolve ( evolutions . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 607 ---------------------------------------------
Load configuration from the current environment . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder withConfigLoader ( Function < Environment , Config > [[load]] ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( [[load]] . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder withConfigLoader ( Function < Environment , Config > [[obligation]] ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( [[obligation]] . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 608 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 89 / 509 / 10 / 608:  61%|██████    | 608/1000 [48:06<31:01,  4.75s/it][Succeeded / Failed / Skipped / Total] 89 / 509 / 10 / 608:  61%|██████    | 609/1000 [48:09<30:55,  4.74s/it][Succeeded / Failed / Skipped / Total] 89 / 510 / 10 / 609:  61%|██████    | 609/1000 [48:09<30:55,  4.74s/it][Succeeded / Failed / Skipped / Total] 89 / 510 / 10 / 609:  61%|██████    | 610/1000 [48:09<30:47,  4.74s/it][Succeeded / Failed / Skipped / Total] 90 / 510 / 10 / 610:  61%|██████    | 610/1000 [48:09<30:47,  4.74s/it][Succeeded / Failed / Skipped / Total] 90 / 510 / 10 / 610:  61%|██████    | 611/1000 [48:11<30:41,  4.73s/it][Succeeded / Failed / Skipped / Total] 90 / 511 / 10 / 611:  61%|██████    | 611/1000 [48:11<30:41,  4.73s/it][Succeeded / Failed / Skipped / Total] 90 / 511 / 10 / 611:  61%|██████    | 612/1000 [48:12<30:33,  4.73s/it][Succeeded / Failed / Skipped / Total] 90 / 512 / 10 / 612:  61%|██████    | 612/1000 [48:12<30:33,  4.73s/it][Succeeded / Failed / Skipped / Total] 90 / 512 / 10 / 612:  61%|██████▏   | 613/1000 [48:12<30:26,  4.72s/it][Succeeded / Failed / Skipped / Total] 90 / 513 / 10 / 613:  61%|██████▏   | 613/1000 [48:12<30:26,  4.72s/it][Succeeded / Failed / Skipped / Total] 90 / 513 / 10 / 613:  61%|██████▏   | 614/1000 [48:14<30:19,  4.71s/it][Succeeded / Failed / Skipped / Total] 90 / 514 / 10 / 614:  61%|██████▏   | 614/1000 [48:14<30:19,  4.71s/it][Succeeded / Failed / Skipped / Total] 90 / 514 / 10 / 614:  62%|██████▏   | 615/1000 [48:15<30:12,  4.71s/it][Succeeded / Failed / Skipped / Total] 90 / 515 / 10 / 615:  62%|██████▏   | 615/1000 [48:15<30:12,  4.71s/it][Succeeded / Failed / Skipped / Total] 90 / 515 / 10 / 615:  62%|██████▏   | 616/1000 [48:15<30:04,  4.70s/it][Succeeded / Failed / Skipped / Total] 90 / 516 / 10 / 616:  62%|██████▏   | 616/1000 [48:15<30:04,  4.70s/it][Succeeded / Failed / Skipped / Total] 90 / 516 / 10 / 616:  62%|██████▏   | 617/1000 [48:16<29:57,  4.69s/it]Adds a loader function to the application . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder withModuleLoader ( BiFunction < Environment , Config , List < GuiceableModule > > [[loader]] ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( [[loader]] . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder withModuleLoader ( BiFunction < Environment , Config , List < GuiceableModule > > [[mover]] ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment env , play . api . Configuration conf ) -> Scala . toSeq ( [[mover]] . apply ( new Environment ( env ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 609 ---------------------------------------------
Loads the given modules from the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[responsibility]] ( GuiceableModule ... modules ) { return newBuilder ( delegate . load ( Scala . varargs ( modules ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 610 ---------------------------------------------
Map a key to the session --> Internally used to assist in development --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void session ( String key , String [[value]] ) { session ( ) . put ( key , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void session ( String key , String [[appreciation]] ) { session ( ) . put ( key , [[appreciation]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 611 ---------------------------------------------
Loads the application with the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( com . google . inject . Module ... modules ) { return [[load]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[lading]] ( com . google . inject . Module ... modules ) { return [[lading]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 612 ---------------------------------------------
Loads the application with the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Module ... modules ) { return [[load]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[liability]] ( play . api . inject . Module ... modules ) { return [[liability]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 613 ---------------------------------------------
Returns a builder for the given GuiceApplicationBuilder . --> [[[FAILED]]]

[[[[Adv]]]]: protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder [[builder]] ) { return new GuiceApplicationBuilder ( [[builder]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder [[constructor]] ) { return new GuiceApplicationBuilder ( [[constructor]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 614 ---------------------------------------------
Loads the application with the given bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Binding < ? > ... bindings ) { return [[load]] ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder [[shipment]] ( play . api . inject . Binding < ? > ... bindings ) { return [[shipment]] ( Guiceable . bindings ( bindings ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 615 ---------------------------------------------
Gets the entity manager . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager em ( ) { Deque < EntityManager > ems = this . emStack ( "True" == "True" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager em ( ) { Deque < EntityManager > ems = this . emStack ( "True" == "True" ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 616 ---------------------------------------------
Returns the entity manager s stack . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > emStack ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > emStack ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 617 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 90 / 517 / 10 / 617:  62%|██████▏   | 617/1000 [48:16<29:57,  4.69s/it][Succeeded / Failed / Skipped / Total] 90 / 517 / 10 / 617:  62%|██████▏   | 618/1000 [48:22<29:53,  4.70s/it][Succeeded / Failed / Skipped / Total] 91 / 517 / 10 / 618:  62%|██████▏   | 618/1000 [48:22<29:53,  4.70s/it][Succeeded / Failed / Skipped / Total] 91 / 517 / 10 / 618:  62%|██████▏   | 619/1000 [48:24<29:47,  4.69s/it][Succeeded / Failed / Skipped / Total] 91 / 518 / 10 / 619:  62%|██████▏   | 619/1000 [48:24<29:47,  4.69s/it][Succeeded / Failed / Skipped / Total] 91 / 518 / 10 / 619:  62%|██████▏   | 620/1000 [48:26<29:41,  4.69s/it][Succeeded / Failed / Skipped / Total] 91 / 519 / 10 / 620:  62%|██████▏   | 620/1000 [48:26<29:41,  4.69s/it][Succeeded / Failed / Skipped / Total] 91 / 519 / 10 / 620:  62%|██████▏   | 621/1000 [48:29<29:35,  4.68s/it][Succeeded / Failed / Skipped / Total] 91 / 520 / 10 / 621:  62%|██████▏   | 621/1000 [48:29<29:35,  4.68s/it][Succeeded / Failed / Skipped / Total] 91 / 520 / 10 / 621:  62%|██████▏   | 622/1000 [48:36<29:32,  4.69s/it][Succeeded / Failed / Skipped / Total] 91 / 521 / 10 / 622:  62%|██████▏   | 622/1000 [48:36<29:32,  4.69s/it][Succeeded / Failed / Skipped / Total] 91 / 521 / 10 / 622:  62%|██████▏   | 623/1000 [48:36<29:25,  4.68s/it][Succeeded / Failed / Skipped / Total] 91 / 522 / 10 / 623:  62%|██████▏   | 623/1000 [48:36<29:25,  4.68s/it][Succeeded / Failed / Skipped / Total] 91 / 522 / 10 / 623:  62%|██████▏   | 624/1000 [48:50<29:25,  4.70s/it]Pushes the given entity onto the stack . --> [[[FAILED]]]

[[[[Adv]]]]: void pushOrPopEm ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void pushOrPopEm ( EntityManager em , boolean threadLocalFallback ) { Deque < EntityManager > ems = this . emStack ( threadLocalFallback ) ; if ( em != null ) { ems . push ( em ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 618 ---------------------------------------------
Performs a timeout after the given amount of time . --> Wait for an arena to complete --> Socre: 1.0

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[timeout]] ( final CompletionStage < A > [[stage]] , final long amount , final TimeUnit [[unit]] ) { requireNonNull ( [[stage]] , "Null stage" ) ; requireNonNull ( [[unit]] , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , [[unit]] ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> [[stage]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[overtime]] ( final CompletionStage < A > [[arena]] , final long amount , final TimeUnit [[corps]] ) { requireNonNull ( [[arena]] , "Null stage" ) ; requireNonNull ( [[corps]] , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , [[corps]] ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> [[arena]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 619 ---------------------------------------------
Proceed a flow with a single flow . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[In]] , FlowIn , Out > Flow < [[In]] , Out , ? > bypassWith ( Function < [[In]] , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > flow ) { return bypassWith ( Flow . < [[In]] > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < [[Ah]] , FlowIn , Out > Flow < [[Ah]] , Out , ? > bypassWith ( Function < [[Ah]] , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > flow ) { return bypassWith ( Flow . < [[Ah]] > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , flow ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 620 ---------------------------------------------
Encode a cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; encode ( buf , [[cookie]] ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie [[bagel]] ) { if ( [[bagel]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder buf = new StringBuilder ( ) ; encode ( buf , [[bagel]] ) ; return stripTrailingSeparator ( buf ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 621 ---------------------------------------------
Convert error arguments . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Object > convertErrorArguments ( Object [ ] [[arguments]] ) { if ( [[arguments]] == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( [[arguments]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > convertErrorArguments ( Object [ ] [[reasons]] ) { if ( [[reasons]] == null ) { return Collections . emptyList ( ) ; } List < Object > converted = Arrays . stream ( [[reasons]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( converted ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 622 ---------------------------------------------
Creates a form filled with the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: public Form < T > fill ( T [[value]] ) { if ( [[value]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[value]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > fill ( T [[amount]] ) { if ( [[amount]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[amount]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 623 ---------------------------------------------
Returns the global validation errors . --> [[[FAILED]]]

[[[[Adv]]]]: public List < ValidationError > globalErrors ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > globalErrors ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 624 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 91 / 523 / 10 / 624:  62%|██████▏   | 624/1000 [48:50<29:25,  4.70s/it][Succeeded / Failed / Skipped / Total] 91 / 523 / 10 / 624:  62%|██████▎   | 625/1000 [48:53<29:20,  4.69s/it][Succeeded / Failed / Skipped / Total] 91 / 524 / 10 / 625:  62%|██████▎   | 625/1000 [48:53<29:20,  4.69s/it][Succeeded / Failed / Skipped / Total] 91 / 524 / 10 / 625:  63%|██████▎   | 626/1000 [49:12<29:23,  4.72s/it][Succeeded / Failed / Skipped / Total] 92 / 524 / 10 / 626:  63%|██████▎   | 626/1000 [49:12<29:23,  4.72s/it][Succeeded / Failed / Skipped / Total] 92 / 524 / 10 / 626:  63%|██████▎   | 627/1000 [49:12<29:16,  4.71s/it][Succeeded / Failed / Skipped / Total] 92 / 525 / 10 / 627:  63%|██████▎   | 627/1000 [49:12<29:16,  4.71s/it][Succeeded / Failed / Skipped / Total] 92 / 525 / 10 / 627:  63%|██████▎   | 628/1000 [49:13<29:09,  4.70s/it][Succeeded / Failed / Skipped / Total] 92 / 526 / 10 / 628:  63%|██████▎   | 628/1000 [49:13<29:09,  4.70s/it][Succeeded / Failed / Skipped / Total] 92 / 526 / 10 / 628:  63%|██████▎   | 629/1000 [49:26<29:09,  4.72s/it][Succeeded / Failed / Skipped / Total] 93 / 526 / 10 / 629:  63%|██████▎   | 629/1000 [49:26<29:09,  4.72s/it][Succeeded / Failed / Skipped / Total] 93 / 526 / 10 / 629:  63%|██████▎   | 630/1000 [49:42<29:11,  4.73s/it][Succeeded / Failed / Skipped / Total] 94 / 526 / 10 / 630:  63%|██████▎   | 630/1000 [49:42<29:11,  4.73s/it][Succeeded / Failed / Skipped / Total] 94 / 526 / 10 / 630:  63%|██████▎   | 631/1000 [49:59<29:14,  4.75s/it][Succeeded / Failed / Skipped / Total] 95 / 526 / 10 / 631:  63%|██████▎   | 631/1000 [49:59<29:14,  4.75s/it][Succeeded / Failed / Skipped / Total] 95 / 526 / 10 / 631:  63%|██████▎   | 632/1000 [50:01<29:07,  4.75s/it][Succeeded / Failed / Skipped / Total] 95 / 527 / 10 / 632:  63%|██████▎   | 632/1000 [50:01<29:07,  4.75s/it][Succeeded / Failed / Skipped / Total] 95 / 527 / 10 / 632:  63%|██████▎   | 633/1000 [50:09<29:04,  4.75s/it]Converts errors to JSON . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonNode errorsAsJson ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > [[messages]] = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; [[messages]] . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { [[messages]] . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , [[messages]] ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode errorsAsJson ( Lang lang ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > [[cables]] = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; [[cables]] . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { [[cables]] . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , [[cables]] ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 625 ---------------------------------------------
Creates a flow using the given splitter and a splitter . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[In]] , FlowIn , Out > Flow < [[In]] , Out , ? > bypassWith ( Flow < [[In]] , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > [[flow]] ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < [[Must]] , FlowIn , Out > Flow < [[Must]] , Out , ? > bypassWith ( Flow < [[Must]] , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > [[discharge]] ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 626 ---------------------------------------------
Gets the value associated with a key . --> Convenience method . --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > value ( String [[key]] ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( [[key]] ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > value ( String [[pulley]] ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( [[pulley]] ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 627 ---------------------------------------------
Converts a string to an object of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > T parse ( String text , Class < T > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < T > T parse ( String text , Class < T > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 628 ---------------------------------------------
Converts a text value to a type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T parse ( Field field , String text ) { return ( T ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T parse ( Field field , String text ) { return ( T ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 629 ---------------------------------------------
Prints the given object as a string . --> Prints an object --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[Accordion]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[Accordion]] . class ) ) { return conversion . convert ( t , [[Accordion]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 630 ---------------------------------------------
Prints a type descriptor . --> Prints an object of type T --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[Armful]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 631 ---------------------------------------------
Prints the given type . --> Prints an instrument --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[Instrument]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[Instrument]] . class ) ) ) { return ( [[Instrument]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[Instrument]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[Instrument]] . class ) ) { return conversion . convert ( t , [[Instrument]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 632 ---------------------------------------------
Register custom converter . --> [[[FAILED]]]

[[[[Adv]]]]: private Formatters registerOptional ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object [[source]] , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String

[[[[Adv]]]]: private Formatters registerOptional ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object [[background]] , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
[Succeeded / Failed / Skipped / Total] 95 / 528 / 10 / 633:  63%|██████▎   | 633/1000 [50:09<29:04,  4.75s/it][Succeeded / Failed / Skipped / Total] 95 / 528 / 10 / 633:  63%|██████▎   | 634/1000 [50:42<29:16,  4.80s/it][Succeeded / Failed / Skipped / Total] 95 / 529 / 10 / 634:  63%|██████▎   | 634/1000 [50:42<29:16,  4.80s/it][Succeeded / Failed / Skipped / Total] 95 / 529 / 10 / 634:  64%|██████▎   | 635/1000 [52:38<30:15,  4.97s/it][Succeeded / Failed / Skipped / Total] 95 / 530 / 10 / 635:  64%|██████▎   | 635/1000 [52:38<30:15,  4.97s/it][Succeeded / Failed / Skipped / Total] 95 / 530 / 10 / 635:  64%|██████▎   | 636/1000 [52:43<30:10,  4.97s/it][Succeeded / Failed / Skipped / Total] 96 / 530 / 10 / 636:  64%|██████▎   | 636/1000 [52:43<30:10,  4.97s/it][Succeeded / Failed / Skipped / Total] 96 / 530 / 10 / 636:  64%|██████▎   | 637/1000 [52:45<30:03,  4.97s/it][Succeeded / Failed / Skipped / Total] 96 / 531 / 10 / 637:  64%|██████▎   | 637/1000 [52:45<30:03,  4.97s/it][Succeeded / Failed / Skipped / Total] 96 / 531 / 10 / 637:  64%|██████▍   | 638/1000 [52:46<29:56,  4.96s/it][Succeeded / Failed / Skipped / Total] 96 / 532 / 10 / 638:  64%|██████▍   | 638/1000 [52:46<29:56,  4.96s/it][Succeeded / Failed / Skipped / Total] 96 / 532 / 10 / 638:  64%|██████▍   | 639/1000 [52:48<29:49,  4.96s/it][Succeeded / Failed / Skipped / Total] 96 / 533 / 10 / 639:  64%|██████▍   | 639/1000 [52:48<29:49,  4.96s/it][Succeeded / Failed / Skipped / Total] 96 / 533 / 10 / 639:  64%|██████▍   | 640/1000 [52:49<29:42,  4.95s/it][Succeeded / Failed / Skipped / Total] 96 / 534 / 10 / 640:  64%|██████▍   | 640/1000 [52:49<29:42,  4.95s/it][Succeeded / Failed / Skipped / Total] 96 / 534 / 10 / 640:  64%|██████▍   | 641/1000 [52:53<29:37,  4.95s/it]--------------------------------------------- Result 633 ---------------------------------------------
Fills the form . --> [[[FAILED]]]

[[[[Adv]]]]: public DynamicForm fill ( Map < String , Object > [[value]] ) { Form < Dynamic > [[form]] = super . fill ( new Dynamic ( [[value]] ) ) ; return new DynamicForm ( [[form]] . rawData ( ) , [[form]] . files ( ) , [[form]] . errors ( ) , [[form]] . [[value]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm fill ( Map < String , Object > [[valuation]] ) { Form < Dynamic > [[floatation]] = super . fill ( new Dynamic ( [[valuation]] ) ) ; return new DynamicForm ( [[floatation]] . rawData ( ) , [[floatation]] . files ( ) , [[floatation]] . errors ( ) , [[floatation]] . [[valuation]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 634 ---------------------------------------------
Registers a formatter for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String [[text]] , Locale [[locale]] ) throws java . [[text]] . ParseException { return formatter . parse ( [[text]] , [[locale]] ) ; } public String print ( T t , Locale [[locale]] ) { return formatter . print ( t , [[locale]] ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > Formatters register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String [[article]] , Locale [[brink]] ) throws java . [[article]] . ParseException { return formatter . parse ( [[article]] , [[brink]] ) ; } public String print ( T t , Locale [[brink]] ) { return formatter . print ( t , [[brink]] ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 635 ---------------------------------------------
Create a Flow from actorRef . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[In]] , Out > Flow < [[In]] , Out , ? > actorRef ( Function < ActorRef , Props > [[props]] , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory [[factory]] , Materializer [[mat]] ) { return play . api . libs . streams . ActorFlow . < [[In]] , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return [[props]] . apply ( v1 ) ; } } , bufferSize , overflowStrategy , [[factory]] , [[mat]] ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < [[Mile]] , Out > Flow < [[Mile]] , Out , ? > actorRef ( Function < ActorRef , Props > [[advocates]] , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory [[manufacturer]] , Materializer [[rug]] ) { return play . api . libs . streams . ActorFlow . < [[Mile]] , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef v1 ) { return [[advocates]] . apply ( v1 ) ; } } , bufferSize , overflowStrategy , [[manufacturer]] , [[rug]] ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 636 ---------------------------------------------
Register converter . --> Register converter for given class --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[types]] = new HashSet <> ( ) ; [[types]] . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return [[types]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object [[source]] , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale [[locale]] = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) [[source]] , [[locale]] ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , [[source]] , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[types]] = new HashSet <> ( ) ; [[types]] . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return [[types]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object [[source]] , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale [[locale]] = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) [[source]] , [[locale]] ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , [[source]] , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > Formatters register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[spells]] = new HashSet <> ( ) ; [[spells]] . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return [[spells]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object [[background]] , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale [[clearance]] = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) [[background]] , [[clearance]] ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , [[background]] , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > [[spells]] = new HashSet <> ( ) ; [[spells]] . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return [[spells]] ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object [[background]] , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale [[clearance]] = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) [[background]] , [[clearance]] ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , [[background]] , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
--------------------------------------------- Result 637 ---------------------------------------------
Convert a Java List to a sequence . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > toSeq ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > toSeq ( java . util . List < T > [[caption]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[caption]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 638 ---------------------------------------------
Selects all nodes matching the specified path . --> [[[FAILED]]]

[[[[Adv]]]]: public static NodeList selectNodes ( String [[path]] , Object node ) { return selectNodes ( [[path]] , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList selectNodes ( String [[tunnel]] , Object node ) { return selectNodes ( [[tunnel]] , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 639 ---------------------------------------------
Converts an array into a sequence . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > toSeq ( T [ ] [[array]] ) { return toSeq ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > toSeq ( T [ ] [[procedure]] ) { return toSeq ( java . util . Arrays . asList ( [[procedure]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 640 ---------------------------------------------
Creates a sequence from the given array . --> [[[FAILED]]]

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > varargs ( T ... [[array]] ) { return toSeq ( [[array]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > varargs ( T ... [[line]] ) { return toSeq ( [[line]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
--------------------------------------------- Result 641 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 97 / 534 / 10 / 641:  64%|██████▍   | 641/1000 [52:53<29:37,  4.95s/it][Succeeded / Failed / Skipped / Total] 97 / 534 / 10 / 641:  64%|██████▍   | 642/1000 [52:59<29:32,  4.95s/it][Succeeded / Failed / Skipped / Total] 97 / 535 / 10 / 642:  64%|██████▍   | 642/1000 [52:59<29:32,  4.95s/it][Succeeded / Failed / Skipped / Total] 97 / 535 / 10 / 642:  64%|██████▍   | 643/1000 [52:59<29:25,  4.94s/it][Succeeded / Failed / Skipped / Total] 98 / 535 / 10 / 643:  64%|██████▍   | 643/1000 [52:59<29:25,  4.94s/it][Succeeded / Failed / Skipped / Total] 98 / 535 / 10 / 643:  64%|██████▍   | 644/1000 [52:59<29:17,  4.94s/it][Succeeded / Failed / Skipped / Total] 98 / 536 / 10 / 644:  64%|██████▍   | 644/1000 [52:59<29:17,  4.94s/it][Succeeded / Failed / Skipped / Total] 98 / 536 / 10 / 644:  64%|██████▍   | 645/1000 [53:00<29:10,  4.93s/it][Succeeded / Failed / Skipped / Total] 98 / 537 / 10 / 645:  64%|██████▍   | 645/1000 [53:00<29:10,  4.93s/it][Succeeded / Failed / Skipped / Total] 98 / 537 / 10 / 645:  65%|██████▍   | 646/1000 [53:16<29:11,  4.95s/it][Succeeded / Failed / Skipped / Total] 98 / 538 / 10 / 646:  65%|██████▍   | 646/1000 [53:16<29:11,  4.95s/it][Succeeded / Failed / Skipped / Total] 98 / 538 / 10 / 646:  65%|██████▍   | 647/1000 [53:28<29:10,  4.96s/it]Accepts and returns a stream of results . --> Accepts a new Orka stream --> Socre: 1.0

[[[[Adv]]]]: private static < In , Out > WebSocket acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new WebSocket ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader [[request]] ) { return f . apply ( [[request]] ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[flow]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[flow]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > WebSocket acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new WebSocket ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader [[application]] ) { return f . apply ( [[application]] ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[current]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[current]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 642 ---------------------------------------------
Enables accessibility . --> [[[FAILED]]]

[[[[Adv]]]]: static boolean setAccessibleWorkaround ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member [[m]] = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( [[m]] . getModifiers ( ) ) && isPackageAccess ( [[m]] . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean setAccessibleWorkaround ( final AccessibleObject o ) { if ( o == null || o . isAccessible ( ) ) { return "False" != "False" ; } final Member [[e]] = ( Member ) o ; if ( ! o . isAccessible ( ) && Modifier . isPublic ( [[e]] . getModifiers ( ) ) && isPackageAccess ( [[e]] . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { o . setAccessible ( "True" == "True" ) ; return "True" == "True" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 643 ---------------------------------------------
Creates a Mapped WebSocket Acceptor --> Creates a MappedWebSocketAcceptor --> Socre: 1.0

[[[[Adv]]]]: public static < [[In]] , Out > MappedWebSocketAcceptor < [[In]] , Out > json ( Class < [[In]] > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .

[[[[Adv]]]]: public static < [[Ah]] , Out > MappedWebSocketAcceptor < [[Ah]] , Out > json ( Class < [[Ah]] > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 644 ---------------------------------------------
Get the total transformation cost . --> [[[FAILED]]]

[[[[Adv]]]]: private static float getTotalTransformationCost ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float getTotalTransformationCost ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 645 ---------------------------------------------
Returns the promotion cost for the primitive class . --> [[[FAILED]]]

[[[[Adv]]]]: private static float getPrimitivePromotionCost ( final Class < ? > srcClass , final Class < ? > destClass ) { float [[cost]] = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float getPrimitivePromotionCost ( final Class < ? > srcClass , final Class < ? > destClass ) { float [[toll]] = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 646 ---------------------------------------------
Gets the message at the specified key . --> [[[FAILED]]]

[[[[Adv]]]]: public String at ( String [[key]] , Object ... args ) { return messagesApi . get ( lang , [[key]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String at ( String [[caterpillar]] , Object ... args ) { return messagesApi . get ( lang , [[caterpillar]] , args ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 647 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 99 / 538 / 10 / 647:  65%|██████▍   | 647/1000 [53:28<29:10,  4.96s/it][Succeeded / Failed / Skipped / Total] 99 / 538 / 10 / 647:  65%|██████▍   | 648/1000 [53:29<29:03,  4.95s/it][Succeeded / Failed / Skipped / Total] 99 / 539 / 10 / 648:  65%|██████▍   | 648/1000 [53:29<29:03,  4.95s/it][Succeeded / Failed / Skipped / Total] 99 / 539 / 10 / 648:  65%|██████▍   | 649/1000 [53:30<28:56,  4.95s/it][Succeeded / Failed / Skipped / Total] 99 / 540 / 10 / 649:  65%|██████▍   | 649/1000 [53:30<28:56,  4.95s/it][Succeeded / Failed / Skipped / Total] 99 / 540 / 10 / 649:  65%|██████▌   | 650/1000 [53:33<28:50,  4.94s/it][Succeeded / Failed / Skipped / Total] 100 / 540 / 10 / 650:  65%|██████▌   | 650/1000 [53:33<28:50,  4.94s/it][Succeeded / Failed / Skipped / Total] 100 / 540 / 10 / 650:  65%|██████▌   | 651/1000 [53:47<28:50,  4.96s/it][Succeeded / Failed / Skipped / Total] 100 / 541 / 10 / 651:  65%|██████▌   | 651/1000 [53:47<28:50,  4.96s/it][Succeeded / Failed / Skipped / Total] 100 / 541 / 10 / 651:  65%|██████▌   | 652/1000 [53:47<28:42,  4.95s/it][Succeeded / Failed / Skipped / Total] 100 / 542 / 10 / 652:  65%|██████▌   | 652/1000 [53:47<28:42,  4.95s/it][Succeeded / Failed / Skipped / Total] 100 / 542 / 10 / 652:  65%|██████▌   | 653/1000 [53:47<28:35,  4.94s/it][Succeeded / Failed / Skipped / Total] 100 / 543 / 10 / 653:  65%|██████▌   | 653/1000 [53:47<28:35,  4.94s/it][Succeeded / Failed / Skipped / Total] 100 / 543 / 10 / 653:  65%|██████▌   | 654/1000 [53:50<28:29,  4.94s/it][Succeeded / Failed / Skipped / Total] 100 / 544 / 10 / 654:  65%|██████▌   | 654/1000 [53:50<28:29,  4.94s/it][Succeeded / Failed / Skipped / Total] 100 / 544 / 10 / 654:  66%|██████▌   | 655/1000 [53:50<28:21,  4.93s/it]Gets the message by key . --> Getter for messages --> Socre: 1.0

[[[[Adv]]]]: public String at ( List < String > [[keys]] , Object ... args ) { return messagesApi . get ( lang , [[keys]] , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String at ( List < String > [[gadgets]] , Object ... args ) { return messagesApi . get ( lang , [[gadgets]] , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 648 ---------------------------------------------
Creates a database from the given parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public static Database createFrom ( String [[driver]] , String url , Map < String , ? extends Object > config ) { return createFrom ( "default" , [[driver]] , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database createFrom ( String [[motorist]] , String url , Map < String , ? extends Object > config ) { return createFrom ( "default" , [[motorist]] , url , config ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 649 ---------------------------------------------
Create a new parallel Sorter . --> [[[FAILED]]]

[[[[Adv]]]]: public static ParallelSorter create ( Object [ ] arrays ) { Generator gen = new Generator ( ) ; gen . setArrays ( arrays ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter create ( Object [ ] arrays ) { Generator gen = new Generator ( ) ; gen . setArrays ( arrays ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 650 ---------------------------------------------
Quick sort method . --> Simple sorting method --> Socre: 1.0

[[[[Adv]]]]: public void quickSort ( int [[index]] , int lo , int [[hi]] , Comparator cmp ) { chooseComparer ( [[index]] , cmp ) ; super . quickSort ( lo , [[hi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void quickSort ( int [[indicator]] , int lo , int [[hey]] , Comparator cmp ) { chooseComparer ( [[indicator]] , cmp ) ; super . quickSort ( lo , [[hey]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 651 ---------------------------------------------
Merge sort sort . --> [[[FAILED]]]

[[[[Adv]]]]: public void mergeSort ( int [[index]] , int lo , int [[hi]] , Comparator cmp ) { chooseComparer ( [[index]] , cmp ) ; super . mergeSort ( lo , [[hi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void mergeSort ( int [[grade]] , int lo , int [[hey]] , Comparator cmp ) { chooseComparer ( [[grade]] , cmp ) ; super . mergeSort ( lo , [[hey]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 652 ---------------------------------------------
Invoke the protected method --> [[[FAILED]]]

[[[[Adv]]]]: public Object invoke ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object invoke ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo fci = fastClassInfo ; return fci . f1 . invoke ( fci . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 653 ---------------------------------------------
Cast a numeric value to the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: public void cast_numeric ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void cast_numeric ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 654 ---------------------------------------------
Load an argument . --> [[[FAILED]]]

[[[[Adv]]]]: public void load_arg ( int [[index]] ) { load_local ( state . argumentTypes [ [[index]] ] , state . localOffset + skipArgs ( [[index]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void load_arg ( int [[assortment]] ) { load_local ( state . argumentTypes [ [[assortment]] ] , state . localOffset + skipArgs ( [[assortment]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 655 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 100 / 544 / 11 / 655:  66%|██████▌   | 655/1000 [53:50<28:21,  4.93s/it][Succeeded / Failed / Skipped / Total] 100 / 544 / 11 / 655:  66%|██████▌   | 656/1000 [53:53<28:15,  4.93s/it][Succeeded / Failed / Skipped / Total] 101 / 544 / 11 / 656:  66%|██████▌   | 656/1000 [53:53<28:15,  4.93s/it][Succeeded / Failed / Skipped / Total] 101 / 544 / 11 / 656:  66%|██████▌   | 657/1000 [54:20<28:22,  4.96s/it][Succeeded / Failed / Skipped / Total] 102 / 544 / 11 / 657:  66%|██████▌   | 657/1000 [54:20<28:22,  4.96s/it][Succeeded / Failed / Skipped / Total] 102 / 544 / 11 / 657:  66%|██████▌   | 658/1000 [54:30<28:19,  4.97s/it][Succeeded / Failed / Skipped / Total] 102 / 545 / 11 / 658:  66%|██████▌   | 658/1000 [54:30<28:19,  4.97s/it][Succeeded / Failed / Skipped / Total] 102 / 545 / 11 / 658:  66%|██████▌   | 659/1000 [54:38<28:16,  4.97s/it][Succeeded / Failed / Skipped / Total] 102 / 546 / 11 / 659:  66%|██████▌   | 659/1000 [54:38<28:16,  4.97s/it][Succeeded / Failed / Skipped / Total] 102 / 546 / 11 / 659:  66%|██████▌   | 660/1000 [54:38<28:08,  4.97s/it]Emit a field instruction . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 656 ---------------------------------------------
push a zero or null value --> begin 2 --> Socre: 1.0

[[[[Adv]]]]: public void zero_or_null ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { switch ( [[type]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void zero_or_null ( Type [[spell]] ) { if ( TypeUtils . isPrimitive ( [[spell]] ) ) { switch ( [[spell]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 657 ---------------------------------------------
Assigns the specified type to zero or zero . --> Unbox a stereotype --> Socre: 1.0

[[[[Adv]]]]: public void unbox_or_zero ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { if ( [[type]] != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label [[end]] = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( [[type]] ) ; goTo ( [[end]] ) ; mark ( nonNull ) ; unbox ( [[type]] ) ; mark ( [[end]] ) ; } } else { checkcast ( [[type]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void unbox_or_zero ( Type [[stereotype]] ) { if ( TypeUtils . isPrimitive ( [[stereotype]] ) ) { if ( [[stereotype]] != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label [[behind]] = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( [[stereotype]] ) ; goTo ( [[behind]] ) ; mark ( nonNull ) ; unbox ( [[stereotype]] ) ; mark ( [[behind]] ) ; } } else { checkcast ( [[stereotype]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 658 ---------------------------------------------
Process an array . --> [[[FAILED]]]

[[[[Adv]]]]: public static void process_array ( CodeEmitter e , Type [[type]] , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( [[type]] ) ; Local [[array]] = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( [[array]] ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( [[array]] ) ; e . load_local ( loopvar ) ; e . array_load ( componentType ) ; callback . processElement ( componentType ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( [[array]] ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void process_array ( CodeEmitter e , Type [[variety]] , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( [[variety]] ) ; Local [[arrangement]] = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( [[arrangement]] ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( [[arrangement]] ) ; e . load_local ( loopvar ) ; e . array_load ( componentType ) ; callback . processElement ( componentType ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( [[arrangement]] ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 659 ---------------------------------------------
Encodes a cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String [[name]] = [[cookie]] . name ( ) ; final String [[value]] = [[cookie]] . value ( ) != null ? [[cookie]] . value ( ) : "" ; validateCookie ( [[name]] , [[value]] ) ; StringBuilder buf = new StringBuilder ( ) ; if ( [[cookie]] . wrap ( ) ) { addQuoted ( buf , [[name]] , [[value]] ) ; } else { add ( buf , [[name]] , [[value]] ) ; } if ( [[cookie]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , [[cookie]] . maxAge ( ) ) ; Date expires = [[cookie]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie [[wafer]] ) { if ( [[wafer]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String [[henry]] = [[wafer]] . name ( ) ; final String [[appraisal]] = [[wafer]] . value ( ) != null ? [[wafer]] . value ( ) : "" ; validateCookie ( [[henry]] , [[appraisal]] ) ; StringBuilder buf = new StringBuilder ( ) ; if ( [[wafer]] . wrap ( ) ) { addQuoted ( buf , [[henry]] , [[appraisal]] ) ; } else { add ( buf , [[henry]] , [[appraisal]] ) ; } if ( [[wafer]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , [[wafer]] . maxAge ( ) ) ; Date expires = [[wafer]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 660 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 102 / 547 / 11 / 660:  66%|██████▌   | 660/1000 [54:38<28:08,  4.97s/it][Succeeded / Failed / Skipped / Total] 102 / 547 / 11 / 660:  66%|██████▌   | 661/1000 [54:40<28:02,  4.96s/it][Succeeded / Failed / Skipped / Total] 103 / 547 / 11 / 661:  66%|██████▌   | 661/1000 [54:40<28:02,  4.96s/it][Succeeded / Failed / Skipped / Total] 103 / 547 / 11 / 661:  66%|██████▌   | 662/1000 [54:41<27:55,  4.96s/it][Succeeded / Failed / Skipped / Total] 103 / 548 / 11 / 662:  66%|██████▌   | 662/1000 [54:41<27:55,  4.96s/it][Succeeded / Failed / Skipped / Total] 103 / 548 / 11 / 662:  66%|██████▋   | 663/1000 [54:41<27:48,  4.95s/it][Succeeded / Failed / Skipped / Total] 103 / 549 / 11 / 663:  66%|██████▋   | 663/1000 [54:41<27:48,  4.95s/it][Succeeded / Failed / Skipped / Total] 103 / 549 / 11 / 663:  66%|██████▋   | 664/1000 [54:41<27:40,  4.94s/it][Succeeded / Failed / Skipped / Total] 103 / 549 / 12 / 664:  66%|██████▋   | 664/1000 [54:41<27:40,  4.94s/it][Succeeded / Failed / Skipped / Total] 103 / 549 / 12 / 664:  66%|██████▋   | 665/1000 [54:42<27:33,  4.94s/it][Succeeded / Failed / Skipped / Total] 103 / 550 / 12 / 665:  66%|██████▋   | 665/1000 [54:42<27:33,  4.94s/it][Succeeded / Failed / Skipped / Total] 103 / 550 / 12 / 665:  67%|██████▋   | 666/1000 [54:42<27:26,  4.93s/it][Succeeded / Failed / Skipped / Total] 103 / 550 / 13 / 666:  67%|██████▋   | 666/1000 [54:42<27:26,  4.93s/it][Succeeded / Failed / Skipped / Total] 103 / 550 / 13 / 666:  67%|██████▋   | 667/1000 [54:43<27:19,  4.92s/it]Determine the cost of a class from sourceClass and destinationClass . --> [[[FAILED]]]

[[[[Adv]]]]: private static float getObjectTransformationCost ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float [[cost]] = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination [[class]] is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { [[cost]] += 1.5f ; } return [[cost]] ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float getObjectTransformationCost ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float [[expense]] = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination [[kind]] is null, we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { [[expense]] += 1.5f ; } return [[expense]] ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 661 ---------------------------------------------
implements the null operator --> implement NullPointer --> Socre: 1.0

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label [[end]] = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( [[end]] ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( [[end]] ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label [[cessation]] = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( [[cessation]] ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( [[cessation]] ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 662 ---------------------------------------------
Filter the given constructors . --> [[[FAILED]]]

[[[[Adv]]]]: protected void filterConstructors ( Class sc , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( sc , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void filterConstructors ( Class sc , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( sc , "True" == "True" ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 663 ---------------------------------------------
Sets the super class . --> [[[FAILED]]]

[[[[Adv]]]]: public void setSuperclass ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . superclass = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void setSuperclass ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . superclass = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 664 ---------------------------------------------
Gets the field with the given names . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 665 ---------------------------------------------
Finds all methods in the super class and interfaces . --> [[[FAILED]]]

[[[[Adv]]]]: public static void getMethods ( Class superclass , Class [ ] interfaces , List [[methods]] ) { getMethods ( superclass , interfaces , [[methods]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void getMethods ( Class superclass , Class [ ] interfaces , List [[arts]] ) { getMethods ( superclass , interfaces , [[arts]] , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 666 ---------------------------------------------
Calculates the cardinality of the value --> [[[SKIPPED]]]

[[[[Adv]]]]: public int cardinality ( ) { int w = value ; int c = 0 ; while ( w != 0 ) { c += T [ w & 255 ] ; w >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 667 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 103 / 551 / 13 / 667:  67%|██████▋   | 667/1000 [54:43<27:19,  4.92s/it][Succeeded / Failed / Skipped / Total] 103 / 551 / 13 / 667:  67%|██████▋   | 668/1000 [54:43<27:11,  4.92s/it][Succeeded / Failed / Skipped / Total] 103 / 551 / 14 / 668:  67%|██████▋   | 668/1000 [54:43<27:11,  4.92s/it][Succeeded / Failed / Skipped / Total] 103 / 551 / 14 / 668:  67%|██████▋   | 669/1000 [54:45<27:05,  4.91s/it][Succeeded / Failed / Skipped / Total] 103 / 552 / 14 / 669:  67%|██████▋   | 669/1000 [54:45<27:05,  4.91s/it][Succeeded / Failed / Skipped / Total] 103 / 552 / 14 / 669:  67%|██████▋   | 670/1000 [54:52<27:01,  4.91s/it][Succeeded / Failed / Skipped / Total] 104 / 552 / 14 / 670:  67%|██████▋   | 670/1000 [54:52<27:01,  4.91s/it][Succeeded / Failed / Skipped / Total] 104 / 552 / 14 / 670:  67%|██████▋   | 671/1000 [55:14<27:05,  4.94s/it][Succeeded / Failed / Skipped / Total] 104 / 553 / 14 / 671:  67%|██████▋   | 671/1000 [55:14<27:05,  4.94s/it][Succeeded / Failed / Skipped / Total] 104 / 553 / 14 / 671:  67%|██████▋   | 672/1000 [55:18<26:59,  4.94s/it][Succeeded / Failed / Skipped / Total] 105 / 553 / 14 / 672:  67%|██████▋   | 672/1000 [55:18<26:59,  4.94s/it][Succeeded / Failed / Skipped / Total] 105 / 553 / 14 / 672:  67%|██████▋   | 673/1000 [55:18<26:52,  4.93s/it][Succeeded / Failed / Skipped / Total] 105 / 554 / 14 / 673:  67%|██████▋   | 673/1000 [55:18<26:52,  4.93s/it][Succeeded / Failed / Skipped / Total] 105 / 554 / 14 / 673:  67%|██████▋   | 674/1000 [55:18<26:45,  4.92s/it][Succeeded / Failed / Skipped / Total] 105 / 555 / 14 / 674:  67%|██████▋   | 674/1000 [55:18<26:45,  4.92s/it][Succeeded / Failed / Skipped / Total] 105 / 555 / 14 / 674:  68%|██████▊   | 675/1000 [55:22<26:39,  4.92s/it][Succeeded / Failed / Skipped / Total] 105 / 556 / 14 / 675:  68%|██████▊   | 675/1000 [55:22<26:39,  4.92s/it][Succeeded / Failed / Skipped / Total] 105 / 556 / 14 / 675:  68%|██████▊   | 676/1000 [55:22<26:32,  4.91s/it][Succeeded / Failed / Skipped / Total] 105 / 557 / 14 / 676:  68%|██████▊   | 676/1000 [55:22<26:32,  4.91s/it][Succeeded / Failed / Skipped / Total] 105 / 557 / 14 / 676:  68%|██████▊   | 677/1000 [55:28<26:27,  4.92s/it][Succeeded / Failed / Skipped / Total] 105 / 558 / 14 / 677:  68%|██████▊   | 677/1000 [55:28<26:27,  4.92s/it][Succeeded / Failed / Skipped / Total] 105 / 558 / 14 / 677:  68%|██████▊   | 678/1000 [55:28<26:20,  4.91s/it][Succeeded / Failed / Skipped / Total] 105 / 559 / 14 / 678:  68%|██████▊   | 678/1000 [55:28<26:20,  4.91s/it][Succeeded / Failed / Skipped / Total] 105 / 559 / 14 / 678:  68%|██████▊   | 679/1000 [55:31<26:14,  4.91s/it]Sets the naming policy --> [[[FAILED]]]

[[[[Adv]]]]: public void setNamingPolicy ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void setNamingPolicy ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . namingPolicy = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 668 ---------------------------------------------
Finds an array of methods in the given array . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 669 ---------------------------------------------
Add a method to the registry . --> [[[FAILED]]]

[[[[Adv]]]]: public void add ( Method [[method]] ) { add ( ReflectUtils . getSignature ( [[method]] ) , ReflectUtils . getExceptionTypes ( [[method]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void add ( Method [[hack]] ) { add ( ReflectUtils . getSignature ( [[hack]] ) , ReflectUtils . getExceptionTypes ( [[hack]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 670 ---------------------------------------------
Reads a string from the given path . --> Read a passage of a passage --> Socre: 1.0

[[[[Adv]]]]: public static String readString ( final Path [[path]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[path]] , StandardCharsets . UTF_8 ) ) { StringWriter [[writer]] = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String readString ( final Path [[passage]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[passage]] , StandardCharsets . UTF_8 ) ) { StringWriter [[columnist]] = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 671 ---------------------------------------------
Creates a server instance with the given parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public static Server forRouter ( Mode [[mode]] , int [[port]] , Function < BuiltInComponents , Router > [[block]] ) { return new Builder ( ) . [[mode]] ( [[mode]] ) . http ( [[port]] ) . build ( [[block]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server forRouter ( Mode [[sum]] , int [[pier]] , Function < BuiltInComponents , Router > [[cylinder]] ) { return new Builder ( ) . [[sum]] ( [[sum]] ) . http ( [[pier]] ) . build ( [[cylinder]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 672 ---------------------------------------------
Create a HttpRequest with the given method and destination . --> Create HttpRequest with given device and destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest create ( final String [[method]] , final String destination ) { return new HttpRequest ( ) . [[method]] ( [[method]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest create ( final String [[device]] , final String destination ) { return new HttpRequest ( ) . [[device]] ( [[device]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 673 ---------------------------------------------
Start connect to given destination --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest connect ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest connect ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 674 ---------------------------------------------
Start HTTP GET request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest get ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest get ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 675 ---------------------------------------------
Create a POST request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[mainstay]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 676 ---------------------------------------------
Create a HTTP PUT request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest put ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest put ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 677 ---------------------------------------------
Create a PATCH request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[splinter]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 678 ---------------------------------------------
Create a DELETE request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest delete ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest delete ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 679 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 105 / 560 / 14 / 679:  68%|██████▊   | 679/1000 [55:31<26:14,  4.91s/it][Succeeded / Failed / Skipped / Total] 105 / 560 / 14 / 679:  68%|██████▊   | 680/1000 [55:38<26:11,  4.91s/it][Succeeded / Failed / Skipped / Total] 106 / 560 / 14 / 680:  68%|██████▊   | 680/1000 [55:38<26:11,  4.91s/it][Succeeded / Failed / Skipped / Total] 106 / 560 / 14 / 680:  68%|██████▊   | 681/1000 [55:39<26:04,  4.90s/it][Succeeded / Failed / Skipped / Total] 106 / 561 / 14 / 681:  68%|██████▊   | 681/1000 [55:39<26:04,  4.90s/it][Succeeded / Failed / Skipped / Total] 106 / 561 / 14 / 681:  68%|██████▊   | 682/1000 [55:40<25:57,  4.90s/it][Succeeded / Failed / Skipped / Total] 106 / 562 / 14 / 682:  68%|██████▊   | 682/1000 [55:40<25:57,  4.90s/it][Succeeded / Failed / Skipped / Total] 106 / 562 / 14 / 682:  68%|██████▊   | 683/1000 [55:50<25:54,  4.91s/it][Succeeded / Failed / Skipped / Total] 107 / 562 / 14 / 683:  68%|██████▊   | 683/1000 [55:50<25:54,  4.91s/it][Succeeded / Failed / Skipped / Total] 107 / 562 / 14 / 683:  68%|██████▊   | 684/1000 [55:52<25:48,  4.90s/it][Succeeded / Failed / Skipped / Total] 108 / 562 / 14 / 684:  68%|██████▊   | 684/1000 [55:52<25:48,  4.90s/it][Succeeded / Failed / Skipped / Total] 108 / 562 / 14 / 684:  68%|██████▊   | 685/1000 [55:55<25:42,  4.90s/it][Succeeded / Failed / Skipped / Total] 108 / 563 / 14 / 685:  68%|██████▊   | 685/1000 [55:55<25:42,  4.90s/it][Succeeded / Failed / Skipped / Total] 108 / 563 / 14 / 685:  69%|██████▊   | 686/1000 [55:55<25:36,  4.89s/it][Succeeded / Failed / Skipped / Total] 108 / 564 / 14 / 686:  69%|██████▊   | 686/1000 [55:55<25:36,  4.89s/it][Succeeded / Failed / Skipped / Total] 108 / 564 / 14 / 686:  69%|██████▊   | 687/1000 [55:56<25:29,  4.89s/it][Succeeded / Failed / Skipped / Total] 108 / 565 / 14 / 687:  69%|██████▊   | 687/1000 [55:56<25:29,  4.89s/it][Succeeded / Failed / Skipped / Total] 108 / 565 / 14 / 687:  69%|██████▉   | 688/1000 [55:56<25:22,  4.88s/it][Succeeded / Failed / Skipped / Total] 108 / 566 / 14 / 688:  69%|██████▉   | 688/1000 [55:56<25:22,  4.88s/it][Succeeded / Failed / Skipped / Total] 108 / 566 / 14 / 688:  69%|██████▉   | 689/1000 [55:57<25:15,  4.87s/it]Create a HEAD request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[guidance]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 680 ---------------------------------------------
Resolve child path . --> move to archive --> Socre: 1.0

[[[[Adv]]]]: public static Path [[resolve]] ( final Path [[base]] , String [[child]] ) { if ( StringUtil . startsWithChar ( [[child]] , File . separatorChar ) ) { [[child]] = [[child]] . substring ( 1 ) ; } return [[base]] . resolve ( [[child]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path [[volition]] ( final Path [[archive]] , String [[lad]] ) { if ( StringUtil . startsWithChar ( [[lad]] , File . separatorChar ) ) { [[lad]] = [[lad]] . substring ( 1 ) ; } return [[archive]] . resolve ( [[lad]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 681 ---------------------------------------------
Start OPTIONS request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[options]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( destination ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest [[alternatives]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( destination ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 682 ---------------------------------------------
Start a TRACE request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[representation]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 683 ---------------------------------------------
Sets the Http request path . --> helper method --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[path]] ( String path ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[alley]] ( String path ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 684 ---------------------------------------------
Sets the Http request host . --> Set jurisdiction policy --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[host]] ( final String [[host]] ) { this . [[host]] = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[government]] ( final String [[rule]] ) { this . [[mandate]] = [[government]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[government]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 685 ---------------------------------------------
Sets the cookies in the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie [[cookie]] : REPLACEME0 ) { Integer maxAge = [[cookie]] . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { cookieString . append ( "; " ) ; } first = "False" != "False" ; cookieString . append ( [[cookie]] . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( [[cookie]] . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean first = "True" == "True" ; for ( Cookie [[flapjack]] : REPLACEME0 ) { Integer maxAge = [[flapjack]] . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! first ) { cookieString . append ( "; " ) ; } first = "False" != "False" ; cookieString . append ( [[flapjack]] . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( [[flapjack]] . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 686 ---------------------------------------------
Set the query parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest queryString ( final String queryString , final boolean decode ) { this . [[query]] = HttpUtil . parseQuery ( queryString , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest queryString ( final String queryString , final boolean decode ) { this . [[inquiry]] = HttpUtil . parseQuery ( queryString , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 687 ---------------------------------------------
Gets the query string . --> [[[FAILED]]]

[[[[Adv]]]]: public String queryString ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String queryString ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 688 ---------------------------------------------
Returns the host URL . --> [[[FAILED]]]

[[[[Adv]]]]: public String hostUrl ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String hostUrl ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 689 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 108 / 567 / 14 / 689:  69%|██████▉   | 689/1000 [55:57<25:15,  4.87s/it][Succeeded / Failed / Skipped / Total] 108 / 567 / 14 / 689:  69%|██████▉   | 690/1000 [55:59<25:09,  4.87s/it][Succeeded / Failed / Skipped / Total] 109 / 567 / 14 / 690:  69%|██████▉   | 690/1000 [55:59<25:09,  4.87s/it][Succeeded / Failed / Skipped / Total] 109 / 567 / 14 / 690:  69%|██████▉   | 691/1000 [56:00<25:02,  4.86s/it][Succeeded / Failed / Skipped / Total] 110 / 567 / 14 / 691:  69%|██████▉   | 691/1000 [56:00<25:02,  4.86s/it][Succeeded / Failed / Skipped / Total] 110 / 567 / 14 / 691:  69%|██████▉   | 692/1000 [56:00<24:55,  4.86s/it][Succeeded / Failed / Skipped / Total] 110 / 568 / 14 / 692:  69%|██████▉   | 692/1000 [56:00<24:55,  4.86s/it][Succeeded / Failed / Skipped / Total] 110 / 569 / 14 / 693:  69%|██████▉   | 693/1000 [56:00<24:48,  4.85s/it][Succeeded / Failed / Skipped / Total] 110 / 569 / 14 / 693:  69%|██████▉   | 694/1000 [56:06<24:44,  4.85s/it][Succeeded / Failed / Skipped / Total] 110 / 570 / 14 / 694:  69%|██████▉   | 694/1000 [56:06<24:44,  4.85s/it][Succeeded / Failed / Skipped / Total] 110 / 571 / 14 / 695:  70%|██████▉   | 695/1000 [56:06<24:37,  4.84s/it][Succeeded / Failed / Skipped / Total] 110 / 571 / 14 / 695:  70%|██████▉   | 696/1000 [56:06<24:30,  4.84s/it][Succeeded / Failed / Skipped / Total] 110 / 572 / 14 / 696:  70%|██████▉   | 696/1000 [56:06<24:30,  4.84s/it][Succeeded / Failed / Skipped / Total] 111 / 572 / 14 / 697:  70%|██████▉   | 697/1000 [56:06<24:23,  4.83s/it][Succeeded / Failed / Skipped / Total] 111 / 572 / 14 / 697:  70%|██████▉   | 698/1000 [56:06<24:16,  4.82s/it][Succeeded / Failed / Skipped / Total] 111 / 573 / 14 / 698:  70%|██████▉   | 698/1000 [56:06<24:16,  4.82s/it]Sets the basic authentication header . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest basicAuthentication ( final String username , final String password ) { if ( username != null && password != null ) { String [[data]] = username . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( [[data]] ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest basicAuthentication ( final String username , final String password ) { if ( username != null && password != null ) { String [[materials]] = username . concat ( StringPool . COLON ) . concat ( password ) ; String base64 = Base64 . encodeToString ( [[materials]] ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + base64 ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 690 ---------------------------------------------
Add query map . --> Add a query --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[query]] ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > [[entry]] : queryMap . entrySet ( ) ) { [[query]] . add ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest [[enquiry]] ( final Map < String , String > queryMap ) { for ( Map . Entry < String , String > [[entryway]] : queryMap . entrySet ( ) ) { [[enquiry]] . add ( [[entryway]] . getKey ( ) , [[entryway]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 691 ---------------------------------------------
Returns the buffer . --> Perform reduction --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Buffer [[buffer]] ( final boolean fullRequest ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer [[reduction]] ( final boolean fullRequest ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 692 ---------------------------------------------
Send and receive response . --> [[[FAILED]]]

[[[[Adv]]]]: public < R > R sendAndReceive ( final Function < HttpResponse , R > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < R > R sendAndReceive ( final Function < HttpResponse , R > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 693 ---------------------------------------------
Sets the host header . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest setHostHeader ( ) { String hostPort = this . [[host]] ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest setHostHeader ( ) { String hostPort = this . [[administration]] ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 694 ---------------------------------------------
Returns the length of the exception table . --> [[[FAILED]]]

[[[[Adv]]]]: static int getExceptionTableLength ( final Handler firstHandler ) { int [[length]] = 0 ; Handler handler = firstHandler ; while ( handler != null ) { [[length]] ++ ; handler = handler . nextHandler ; } return [[length]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int getExceptionTableLength ( final Handler firstHandler ) { int [[distance]] = 0 ; Handler handler = firstHandler ; while ( handler != null ) { [[distance]] ++ ; handler = handler . nextHandler ; } return [[distance]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 695 ---------------------------------------------
Collect all action interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected void collectActionInterceptors ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void collectActionInterceptors ( ) { final Collection < ? extends ActionInterceptor > interceptorValues = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( interceptorValues ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 696 ---------------------------------------------
Collects the action filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected void collectActionFilters ( ) { final Collection < ? extends ActionFilter > filterValues = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( filterValues ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void collectActionFilters ( ) { final Collection < ? extends ActionFilter > filterValues = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( filterValues ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 697 ---------------------------------------------
Add query parameter . --> Add an entailment --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[query]] ( final String name1 , final Object value1 , final Object ... parameters ) { [[query]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String [[name]] = parameters [ i ] . toString ( ) ; String [[value]] = parameters [ i + 1 ] . toString ( ) ; [[query]] . add ( [[name]] , [[value]] ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest [[enquiry]] ( final String name1 , final Object value1 , final Object ... parameters ) { [[enquiry]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String [[denomination]] = parameters [ i ] . toString ( ) ; String [[appreciation]] = parameters [ i + 1 ] . toString ( ) ; [[enquiry]] . add ( [[denomination]] , [[appreciation]] ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 698 ---------------------------------------------
Collect all action results . --> [[[FAILED]]]

[[[[Adv]]]]: protected void collectActionResults ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void collectActionResults ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
[Succeeded / Failed / Skipped / Total] 111 / 574 / 14 / 699:  70%|██████▉   | 699/1000 [56:07<24:09,  4.82s/it][Succeeded / Failed / Skipped / Total] 111 / 574 / 14 / 699:  70%|███████   | 700/1000 [56:07<24:03,  4.81s/it][Succeeded / Failed / Skipped / Total] 111 / 575 / 14 / 700:  70%|███████   | 700/1000 [56:07<24:03,  4.81s/it][Succeeded / Failed / Skipped / Total] 111 / 576 / 14 / 701:  70%|███████   | 701/1000 [56:07<23:56,  4.80s/it][Succeeded / Failed / Skipped / Total] 111 / 576 / 14 / 701:  70%|███████   | 702/1000 [56:08<23:49,  4.80s/it][Succeeded / Failed / Skipped / Total] 111 / 577 / 14 / 702:  70%|███████   | 702/1000 [56:08<23:49,  4.80s/it][Succeeded / Failed / Skipped / Total] 111 / 578 / 14 / 703:  70%|███████   | 703/1000 [56:12<23:44,  4.80s/it][Succeeded / Failed / Skipped / Total] 111 / 578 / 14 / 703:  70%|███████   | 704/1000 [56:16<23:39,  4.80s/it][Succeeded / Failed / Skipped / Total] 111 / 579 / 14 / 704:  70%|███████   | 704/1000 [56:16<23:39,  4.80s/it][Succeeded / Failed / Skipped / Total] 111 / 580 / 14 / 705:  70%|███████   | 705/1000 [56:22<23:35,  4.80s/it][Succeeded / Failed / Skipped / Total] 111 / 580 / 14 / 705:  71%|███████   | 706/1000 [56:22<23:28,  4.79s/it][Succeeded / Failed / Skipped / Total] 111 / 581 / 14 / 706:  71%|███████   | 706/1000 [56:22<23:28,  4.79s/it][Succeeded / Failed / Skipped / Total] 111 / 582 / 14 / 707:  71%|███████   | 707/1000 [56:25<23:23,  4.79s/it][Succeeded / Failed / Skipped / Total] 111 / 582 / 14 / 707:  71%|███████   | 708/1000 [56:25<23:16,  4.78s/it][Succeeded / Failed / Skipped / Total] 111 / 583 / 14 / 708:  71%|███████   | 708/1000 [56:25<23:16,  4.78s/it]--------------------------------------------- Result 699 ---------------------------------------------
Collect all action runs . --> [[[FAILED]]]

[[[[Adv]]]]: protected void collectActionRuntimes ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void collectActionRuntimes ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 700 ---------------------------------------------
Gets the index property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < T > T getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( T ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( T ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < T > T getProperty ( final Object bean , final String name ) { BeanProperty beanProperty = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( beanProperty ) ; return ( T ) getIndexProperty ( beanProperty ) ; } else { try { resolveNestedProperties ( beanProperty ) ; return ( T ) getIndexProperty ( beanProperty ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 701 ---------------------------------------------
Extract the property name from the property name --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String extractThisReference ( final String propertyName ) { int ndx = StringUtil . indexOfChars ( propertyName , INDEX_CHARS ) ; if ( ndx == - 1 ) { return propertyName ; } return propertyName . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String extractThisReference ( final String propertyName ) { int ndx = StringUtil . indexOfChars ( propertyName , INDEX_CHARS ) ; if ( ndx == - 1 ) { return propertyName ; } return propertyName . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 702 ---------------------------------------------
Returns the writer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public PrintWriter getWriter ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter getWriter ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 703 ---------------------------------------------
Sets a simple property . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void setSimpleProperty ( final BeanProperty bp , final Object [[value]] ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void setSimpleProperty ( final BeanProperty bp , final Object [[consideration]] ) { Setter setter = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 704 ---------------------------------------------
Get object reference by name . --> [[[FAILED]]]

[[[[Adv]]]]: public Object getObjectReference ( final String [[name]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[name]] ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object getObjectReference ( final String [[denomination]] ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( [[denomination]] ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 705 ---------------------------------------------
Lookup an object reference . --> [[[FAILED]]]

[[[[Adv]]]]: public Object lookupObject ( final String [[ref]] ) { Object [[value]] = getObjectReference ( [[ref]] ) ; if ( [[value]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[ref]] ) ; } return [[value]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object lookupObject ( final String [[referee]] ) { Object [[toll]] = getObjectReference ( [[referee]] ) ; if ( [[toll]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[referee]] ) ; } return [[toll]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 706 ---------------------------------------------
Returns the descriptor for a table reference . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor getTableDescriptor ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( tableRef ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor getTableDescriptor ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( tableRef ) ; return t == null ? null : t . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 707 ---------------------------------------------
Find table descriptor by column reference . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor findTableDescriptorByColumnRef ( final String columnRef ) { for ( Map . Entry < String , TableRefData > [[entry]] : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = [[entry]] . getValue ( ) . desc ; if ( ded . findByPropertyName ( columnRef ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor findTableDescriptorByColumnRef ( final String columnRef ) { for ( Map . Entry < String , TableRefData > [[entryway]] : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = [[entryway]] . getValue ( ) . desc ; if ( ded . findByPropertyName ( columnRef ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 708 ---------------------------------------------
Returns the alias for the given table . --> [[[FAILED]]]

[[[[Adv]]]]: public String getTableAlias ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( tableRef ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String getTableAlias ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData t = tableRefs . get ( tableRef ) ; return t == null ? null : t . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 709 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 111 / 584 / 14 / 709:  71%|███████   | 709/1000 [56:26<23:09,  4.78s/it][Succeeded / Failed / Skipped / Total] 111 / 584 / 14 / 709:  71%|███████   | 710/1000 [56:26<23:03,  4.77s/it][Succeeded / Failed / Skipped / Total] 111 / 585 / 14 / 710:  71%|███████   | 710/1000 [56:26<23:03,  4.77s/it][Succeeded / Failed / Skipped / Total] 111 / 586 / 14 / 711:  71%|███████   | 711/1000 [56:30<22:58,  4.77s/it][Succeeded / Failed / Skipped / Total] 111 / 586 / 14 / 711:  71%|███████   | 712/1000 [56:36<22:53,  4.77s/it][Succeeded / Failed / Skipped / Total] 112 / 586 / 14 / 712:  71%|███████   | 712/1000 [56:36<22:53,  4.77s/it][Succeeded / Failed / Skipped / Total] 112 / 587 / 14 / 713:  71%|███████▏  | 713/1000 [56:48<22:51,  4.78s/it][Succeeded / Failed / Skipped / Total] 112 / 587 / 14 / 713:  71%|███████▏  | 714/1000 [56:53<22:47,  4.78s/it][Succeeded / Failed / Skipped / Total] 112 / 588 / 14 / 714:  71%|███████▏  | 714/1000 [56:53<22:47,  4.78s/it][Succeeded / Failed / Skipped / Total] 112 / 588 / 14 / 714:  72%|███████▏  | 715/1000 [59:19<23:38,  4.98s/it][Succeeded / Failed / Skipped / Total] 112 / 589 / 14 / 715:  72%|███████▏  | 715/1000 [59:19<23:38,  4.98s/it][Succeeded / Failed / Skipped / Total] 112 / 589 / 14 / 715:  72%|███████▏  | 716/1000 [59:19<23:31,  4.97s/it]Register a table reference . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerTableReference ( final String tableReference , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( tableReference , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void registerTableReference ( final String tableReference , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( tableReference , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 710 ---------------------------------------------
Looks up a table reference . --> [[[FAILED]]]

[[[[Adv]]]]: protected DbEntityDescriptor lookupTableRef ( final String tableRef ) { DbEntityDescriptor ded = getTableDescriptor ( tableRef ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + tableRef ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor lookupTableRef ( final String tableRef ) { DbEntityDescriptor ded = getTableDescriptor ( tableRef ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + tableRef ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 711 ---------------------------------------------
Registers a hint . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerHint ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void registerHint ( final String [[innuendo]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[innuendo]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 712 ---------------------------------------------
Serialize a single value . --> Serialize a number --> Socre: 1.0

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext jsonContext , final T [[value]] ) { if ( jsonContext . pushValue ( [[value]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext jsonContext , final T [[number]] ) { if ( jsonContext . pushValue ( [[number]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 713 ---------------------------------------------
Inject attribute values . --> [[[FAILED]]]

[[[[Adv]]]]: protected void injectAttributes ( final HttpServletRequest servletRequest , final Targets [[targets]] ) { final Enumeration < String > attributeNames = servletRequest . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; [[targets]] . forEachTargetAndIn ( this , ( target , in ) -> { final String [[name]] = in . matchedName ( attrName ) ; if ( [[name]] != null ) { final Object attrValue = servletRequest . getAttribute ( attrName ) ; target . writeValue ( [[name]] , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void injectAttributes ( final HttpServletRequest servletRequest , final Targets [[things]] ) { final Enumeration < String > attributeNames = servletRequest . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; [[things]] . forEachTargetAndIn ( this , ( target , in ) -> { final String [[jack]] = in . matchedName ( attrName ) ; if ( [[jack]] != null ) { final Object attrValue = servletRequest . getAttribute ( attrName ) ; target . writeValue ( [[jack]] , attrValue , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 714 ---------------------------------------------
Sets an object reference . --> [[[FAILED]]]

[[[[Adv]]]]: public void setObjectReference ( final String [[name]] , final Object [[object]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[name]] , [[object]] ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void setObjectReference ( final String [[brand]] , final Object [[objective]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[brand]] , [[objective]] ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 715 ---------------------------------------------
Inject uploaded files . --> [[[FAILED]]]

[[[[Adv]]]]: protected void injectUploadedFiles ( final HttpServletRequest servletRequest , final Targets [[targets]] ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } [[targets]] . forEachTargetAndIn ( this , ( target , in ) -> { final String [[name]] = in . matchedName ( paramName ) ; if ( [[name]] != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object [[value]] = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( [[name]] , [[value]] , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void injectUploadedFiles ( final HttpServletRequest servletRequest , final Targets [[things]] ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } [[things]] . forEachTargetAndIn ( this , ( target , in ) -> { final String [[title]] = in . matchedName ( paramName ) ; if ( [[title]] != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object [[negative]] = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( [[title]] , [[negative]] , "True" == "True" ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 716 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 112 / 590 / 14 / 716:  72%|███████▏  | 716/1000 [59:19<23:31,  4.97s/it][Succeeded / Failed / Skipped / Total] 112 / 590 / 14 / 716:  72%|███████▏  | 717/1000 [59:19<23:25,  4.96s/it][Succeeded / Failed / Skipped / Total] 112 / 591 / 14 / 717:  72%|███████▏  | 717/1000 [59:19<23:25,  4.96s/it][Succeeded / Failed / Skipped / Total] 112 / 591 / 14 / 717:  72%|███████▏  | 718/1000 [59:20<23:18,  4.96s/it][Succeeded / Failed / Skipped / Total] 112 / 592 / 14 / 718:  72%|███████▏  | 718/1000 [59:20<23:18,  4.96s/it][Succeeded / Failed / Skipped / Total] 112 / 592 / 14 / 718:  72%|███████▏  | 719/1000 [59:39<23:18,  4.98s/it][Succeeded / Failed / Skipped / Total] 112 / 593 / 14 / 719:  72%|███████▏  | 719/1000 [59:39<23:18,  4.98s/it][Succeeded / Failed / Skipped / Total] 112 / 593 / 14 / 719:  72%|███████▏  | 720/1000 [59:39<23:12,  4.97s/it][Succeeded / Failed / Skipped / Total] 112 / 594 / 14 / 720:  72%|███████▏  | 720/1000 [59:39<23:12,  4.97s/it][Succeeded / Failed / Skipped / Total] 112 / 594 / 14 / 720:  72%|███████▏  | 721/1000 [59:49<23:09,  4.98s/it][Succeeded / Failed / Skipped / Total] 112 / 595 / 14 / 721:  72%|███████▏  | 721/1000 [59:49<23:09,  4.98s/it][Succeeded / Failed / Skipped / Total] 112 / 595 / 14 / 721:  72%|███████▏  | 722/1000 [1:00:14<23:11,  5.01s/it][Succeeded / Failed / Skipped / Total] 112 / 596 / 14 / 722:  72%|███████▏  | 722/1000 [1:00:14<23:11,  5.01s/it][Succeeded / Failed / Skipped / Total] 112 / 596 / 14 / 722:  72%|███████▏  | 723/1000 [1:00:14<23:04,  5.00s/it][Succeeded / Failed / Skipped / Total] 112 / 597 / 14 / 723:  72%|███████▏  | 723/1000 [1:00:14<23:04,  5.00s/it][Succeeded / Failed / Skipped / Total] 112 / 597 / 14 / 723:  72%|███████▏  | 724/1000 [1:00:21<23:00,  5.00s/it]Converts a property name to a column name . --> [[[FAILED]]]

[[[[Adv]]]]: public String convertPropertyNameToColumnName ( final String propertyName ) { StringBuilder tableName = new StringBuilder ( propertyName . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( propertyName , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( propertyName ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String convertPropertyNameToColumnName ( final String propertyName ) { StringBuilder tableName = new StringBuilder ( propertyName . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( propertyName , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( propertyName ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 717 ---------------------------------------------
Convert a column name to a property name --> [[[FAILED]]]

[[[[Adv]]]]: public String convertColumnNameToPropertyName ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < len ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String convertColumnNameToPropertyName ( final String columnName ) { StringBuilder propertyName = new StringBuilder ( columnName . length ( ) ) ; int len = columnName . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "False" != "False" ; for ( int i = 0 ; i < len ; i ++ ) { char c = columnName . charAt ( i ) ; if ( c == separatorChar ) { toUpper = "True" == "True" ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "False" != "False" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return columnName ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 718 ---------------------------------------------
Apply the given name to the column name --> [[[FAILED]]]

[[[[Adv]]]]: public String applyToColumnName ( final String columnName ) { String propertyName = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String applyToColumnName ( final String columnName ) { String propertyName = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 719 ---------------------------------------------
Remove range . --> [[[FAILED]]]

[[[[Adv]]]]: static Handler removeRange ( final Handler firstHandler , final Label [[start]] , final Label [[end]] ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = removeRange ( firstHandler . nextHandler , [[start]] , [[end]] ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = [[start]] . bytecodeOffset ; int rangeEnd = [[end]] == null ? Integer . MAX_VALUE : [[end]] . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler removeRange ( final Handler firstHandler , final Label [[startup]] , final Label [[back]] ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = removeRange ( firstHandler . nextHandler , [[startup]] , [[back]] ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = [[startup]] . bytecodeOffset ; int rangeEnd = [[back]] == null ? Integer . MAX_VALUE : [[back]] . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 720 ---------------------------------------------
Prepare the value of the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < E > E prepareGetValue ( final T t , final Class < E > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( E ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < E > E prepareGetValue ( final T t , final Class < E > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( E ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 721 ---------------------------------------------
Replies the set of wrappers . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > getAll ( ) { final Set < T > [[set]] = new HashSet <> ( wrappers . size ( ) ) ; [[set]] . addAll ( wrappers . values ( ) ) ; return [[set]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > getAll ( ) { final Set < T > [[modulation]] = new HashSet <> ( wrappers . size ( ) ) ; [[modulation]] . addAll ( wrappers . values ( ) ) ; return [[modulation]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 722 ---------------------------------------------
Stores a value in the table . --> [[[FAILED]]]

[[[[Adv]]]]: public void storeValue ( final PreparedStatement st , final int [[index]] , final Object [[value]] , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( [[value]] , sqlType ) ; set ( st , [[index]] , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void storeValue ( final PreparedStatement st , final int [[grade]] , final Object [[bulk]] , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( [[bulk]] , sqlType ) ; set ( st , [[grade]] , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 723 ---------------------------------------------
Creates a new wrapper instance . --> [[[FAILED]]]

[[[[Adv]]]]: protected < R extends T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R extends T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
[Succeeded / Failed / Skipped / Total] 112 / 598 / 14 / 724:  72%|███████▏  | 724/1000 [1:00:21<23:00,  5.00s/it][Succeeded / Failed / Skipped / Total] 112 / 598 / 14 / 724:  72%|███████▎  | 725/1000 [1:00:25<22:55,  5.00s/it][Succeeded / Failed / Skipped / Total] 112 / 599 / 14 / 725:  72%|███████▎  | 725/1000 [1:00:25<22:55,  5.00s/it][Succeeded / Failed / Skipped / Total] 112 / 599 / 14 / 725:  73%|███████▎  | 726/1000 [1:00:26<22:48,  5.00s/it][Succeeded / Failed / Skipped / Total] 112 / 600 / 14 / 726:  73%|███████▎  | 726/1000 [1:00:26<22:48,  5.00s/it][Succeeded / Failed / Skipped / Total] 112 / 600 / 14 / 726:  73%|███████▎  | 727/1000 [1:00:27<22:42,  4.99s/it][Succeeded / Failed / Skipped / Total] 112 / 601 / 14 / 727:  73%|███████▎  | 727/1000 [1:00:27<22:42,  4.99s/it][Succeeded / Failed / Skipped / Total] 112 / 601 / 14 / 727:  73%|███████▎  | 728/1000 [1:00:27<22:35,  4.98s/it][Succeeded / Failed / Skipped / Total] 112 / 602 / 14 / 728:  73%|███████▎  | 728/1000 [1:00:27<22:35,  4.98s/it][Succeeded / Failed / Skipped / Total] 112 / 602 / 14 / 728:  73%|███████▎  | 729/1000 [1:00:27<22:28,  4.98s/it][Succeeded / Failed / Skipped / Total] 112 / 603 / 14 / 729:  73%|███████▎  | 729/1000 [1:00:27<22:28,  4.98s/it][Succeeded / Failed / Skipped / Total] 112 / 603 / 14 / 729:  73%|███████▎  | 730/1000 [1:00:32<22:23,  4.98s/it][Succeeded / Failed / Skipped / Total] 113 / 603 / 14 / 730:  73%|███████▎  | 730/1000 [1:00:32<22:23,  4.98s/it][Succeeded / Failed / Skipped / Total] 113 / 603 / 14 / 730:  73%|███████▎  | 731/1000 [1:00:32<22:16,  4.97s/it][Succeeded / Failed / Skipped / Total] 113 / 604 / 14 / 731:  73%|███████▎  | 731/1000 [1:00:32<22:16,  4.97s/it][Succeeded / Failed / Skipped / Total] 113 / 604 / 14 / 731:  73%|███████▎  | 732/1000 [1:00:32<22:10,  4.96s/it]--------------------------------------------- Result 724 ---------------------------------------------
Converts the given path to system separators . --> [[[FAILED]]]

[[[[Adv]]]]: public static String separatorsToSystem ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String separatorsToSystem ( final String [[locus]] ) { if ( [[locus]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[locus]] ) ; } else { return separatorsToUnix ( [[locus]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 725 ---------------------------------------------
Get path . --> [[[FAILED]]]

[[[[Adv]]]]: private static String doGetPath ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int [[index]] = indexOfLastSeparator ( filename ) ; int endIndex = [[index]] + separatorAdd ; if ( prefix >= filename . length ( ) || [[index]] < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String doGetPath ( final String filename , final int separatorAdd ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int [[classification]] = indexOfLastSeparator ( filename ) ; int endIndex = [[classification]] + separatorAdd ; if ( prefix >= filename . length ( ) || [[classification]] < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 726 ---------------------------------------------
Resolves the wrapper for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[resolve]] ( final Class < ? extends T > wrapperClass ) { String wrapperClassName = wrapperClass . getName ( ) ; T [[wrapper]] = lookup ( wrapperClassName ) ; if ( [[wrapper]] == null ) { [[wrapper]] = createWrapper ( wrapperClass ) ; initializeWrapper ( [[wrapper]] ) ; wrappers . put ( wrapperClassName , [[wrapper]] ) ; } return [[wrapper]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T [[dissection]] ( final Class < ? extends T > wrapperClass ) { String wrapperClassName = wrapperClass . getName ( ) ; T [[bag]] = lookup ( wrapperClassName ) ; if ( [[bag]] == null ) { [[bag]] = createWrapper ( wrapperClass ) ; initializeWrapper ( [[bag]] ) ; wrappers . put ( wrapperClassName , [[bag]] ) ; } return [[bag]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 727 ---------------------------------------------
Relative path . --> [[[FAILED]]]

[[[[Adv]]]]: public static String relativePath ( final String targetPath , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String relativePath ( final String targetPath , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 728 ---------------------------------------------
Register a madvoc component . --> [[[FAILED]]]

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > madvocComponent ) { Objects . requireNonNull ( madvocComponent ) ; madvocComponents . add ( ClassConsumer . of ( madvocComponent ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > madvocComponent ) { Objects . requireNonNull ( madvocComponent ) ; madvocComponents . add ( ClassConsumer . of ( madvocComponent ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 729 ---------------------------------------------
Sets the action config for the given action type . --> [[[FAILED]]]

[[[[Adv]]]]: public < A extends ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A extends ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 730 ---------------------------------------------
Start the web app . --> todo do not call this --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[floatation]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 731 ---------------------------------------------
Configure the default defaults for all actions . --> [[[FAILED]]]

[[[[Adv]]]]: protected void configureDefaults ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void configureDefaults ( ) { final ActionConfigManager actionConfigManager = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; actionConfigManager . registerAnnotation ( Action . class ) ; actionConfigManager . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 732 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 113 / 605 / 14 / 732:  73%|███████▎  | 732/1000 [1:00:32<22:10,  4.96s/it][Succeeded / Failed / Skipped / Total] 113 / 605 / 14 / 732:  73%|███████▎  | 733/1000 [1:00:33<22:03,  4.96s/it][Succeeded / Failed / Skipped / Total] 113 / 606 / 14 / 733:  73%|███████▎  | 733/1000 [1:00:33<22:03,  4.96s/it][Succeeded / Failed / Skipped / Total] 113 / 606 / 14 / 733:  73%|███████▎  | 734/1000 [1:00:33<21:56,  4.95s/it][Succeeded / Failed / Skipped / Total] 113 / 607 / 14 / 734:  73%|███████▎  | 734/1000 [1:00:33<21:56,  4.95s/it][Succeeded / Failed / Skipped / Total] 113 / 607 / 14 / 734:  74%|███████▎  | 735/1000 [1:00:33<21:50,  4.94s/it][Succeeded / Failed / Skipped / Total] 113 / 608 / 14 / 735:  74%|███████▎  | 735/1000 [1:00:33<21:50,  4.94s/it][Succeeded / Failed / Skipped / Total] 113 / 608 / 14 / 735:  74%|███████▎  | 736/1000 [1:00:34<21:43,  4.94s/it][Succeeded / Failed / Skipped / Total] 113 / 609 / 14 / 736:  74%|███████▎  | 736/1000 [1:00:34<21:43,  4.94s/it][Succeeded / Failed / Skipped / Total] 113 / 609 / 14 / 736:  74%|███████▎  | 737/1000 [1:00:46<21:41,  4.95s/it][Succeeded / Failed / Skipped / Total] 113 / 610 / 14 / 737:  74%|███████▎  | 737/1000 [1:00:46<21:41,  4.95s/it][Succeeded / Failed / Skipped / Total] 113 / 610 / 14 / 737:  74%|███████▍  | 738/1000 [1:00:49<21:35,  4.94s/it]Registers the madvoc components . --> [[[FAILED]]]

[[[[Adv]]]]: protected void registerMadvocComponents ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void registerMadvocComponents ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 733 ---------------------------------------------
Exclude jars from the classpath . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner excludeJars ( final String ... excludedJars ) { for ( final String excludedJar : excludedJars ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner excludeJars ( final String ... excludedJars ) { for ( final String excludedJar : excludedJars ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 734 ---------------------------------------------
Includes specified jars . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner includeJars ( final String ... includedJars ) { for ( final String includedJar : includedJars ) { rulesJars . include ( includedJar ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner includeJars ( final String ... includedJars ) { for ( final String includedJar : includedJars ) { rulesJars . include ( includedJar ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 735 ---------------------------------------------
Includes specified entries . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... includedEntries ) { for ( final String includedEntry : includedEntries ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... includedEntries ) { for ( final String includedEntry : includedEntries ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 736 ---------------------------------------------
Excludes the given entries . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner excludeEntries ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 737 ---------------------------------------------
Resolves all bridge bridges . --> [[[FAILED]]]

[[[[Adv]]]]: public Map resolveAll ( ) { Map [[resolved]] = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry [[entry]] = ( Map . Entry ) entryIter . next ( ) ; Class [[owner]] = ( Class ) [[entry]] . getKey ( ) ; Set [[bridges]] = ( Set ) [[entry]] . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( [[owner]] . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return [[resolved]] ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[bridges]] , [[resolved]] ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return [[resolved]] ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map resolveAll ( ) { Map [[alienation]] = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry [[inlet]] = ( Map . Entry ) entryIter . next ( ) ; Class [[master]] = ( Class ) [[inlet]] . getKey ( ) ; Set [[mouthpieces]] = ( Set ) [[inlet]] . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( [[master]] . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return [[alienation]] ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[mouthpieces]] , [[alienation]] ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return [[alienation]] ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 738 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 114 / 610 / 14 / 738:  74%|███████▍  | 738/1000 [1:00:49<21:35,  4.94s/it][Succeeded / Failed / Skipped / Total] 114 / 610 / 14 / 738:  74%|███████▍  | 739/1000 [1:00:52<21:30,  4.94s/it][Succeeded / Failed / Skipped / Total] 114 / 611 / 14 / 739:  74%|███████▍  | 739/1000 [1:00:52<21:30,  4.94s/it][Succeeded / Failed / Skipped / Total] 114 / 611 / 14 / 739:  74%|███████▍  | 740/1000 [1:01:11<21:30,  4.96s/it]Splits the given filename into an array of strings . --> Convenience method to get the base name --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[split]] ( final String filename ) { String prefix = getPrefix ( filename ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int lastExtensionIndex = indexOfExtension ( filename ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = filename . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } else { path = filename . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = filename . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] [[crevice]] ( final String filename ) { String prefix = getPrefix ( filename ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( filename ) ; int lastExtensionIndex = indexOfExtension ( filename ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = filename . substring ( prefix . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } else { path = filename . substring ( prefix . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = filename . substring ( prefix . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = filename . substring ( prefix . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = filename . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { prefix , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 739 ---------------------------------------------
Scans a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: protected void scanJarFile ( final File [[file]] ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( [[file]] ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + [[file]] . getName ( ) , ioex ) ; } return ; } final Enumeration [[entries]] = zipFile . entries ( ) ; while ( [[entries]] . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) [[entries]] . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void scanJarFile ( final File [[collection]] ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( [[collection]] ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + [[collection]] . getName ( ) , ioex ) ; } return ; } final Enumeration [[doors]] = zipFile . entries ( ) ; while ( [[doors]] . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) [[doors]] . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , "True" == "True" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , "False" != "False" ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 740 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 114 / 612 / 14 / 740:  74%|███████▍  | 740/1000 [1:01:11<21:30,  4.96s/it][Succeeded / Failed / Skipped / Total] 114 / 612 / 14 / 740:  74%|███████▍  | 741/1000 [1:01:30<21:29,  4.98s/it][Succeeded / Failed / Skipped / Total] 114 / 613 / 14 / 741:  74%|███████▍  | 741/1000 [1:01:30<21:29,  4.98s/it][Succeeded / Failed / Skipped / Total] 114 / 613 / 14 / 741:  74%|███████▍  | 742/1000 [1:01:34<21:24,  4.98s/it][Succeeded / Failed / Skipped / Total] 114 / 614 / 14 / 742:  74%|███████▍  | 742/1000 [1:01:34<21:24,  4.98s/it][Succeeded / Failed / Skipped / Total] 114 / 614 / 14 / 742:  74%|███████▍  | 743/1000 [1:01:35<21:18,  4.97s/it][Succeeded / Failed / Skipped / Total] 114 / 615 / 14 / 743:  74%|███████▍  | 743/1000 [1:01:35<21:18,  4.97s/it][Succeeded / Failed / Skipped / Total] 114 / 615 / 14 / 743:  74%|███████▍  | 744/1000 [1:01:35<21:11,  4.97s/it][Succeeded / Failed / Skipped / Total] 114 / 616 / 14 / 744:  74%|███████▍  | 744/1000 [1:01:35<21:11,  4.97s/it][Succeeded / Failed / Skipped / Total] 114 / 616 / 14 / 744:  74%|███████▍  | 745/1000 [1:01:37<21:05,  4.96s/it][Succeeded / Failed / Skipped / Total] 114 / 617 / 14 / 745:  74%|███████▍  | 745/1000 [1:01:37<21:05,  4.96s/it][Succeeded / Failed / Skipped / Total] 114 / 617 / 14 / 745:  75%|███████▍  | 746/1000 [1:01:42<21:00,  4.96s/it][Succeeded / Failed / Skipped / Total] 114 / 618 / 14 / 746:  75%|███████▍  | 746/1000 [1:01:42<21:00,  4.96s/it][Succeeded / Failed / Skipped / Total] 114 / 618 / 14 / 746:  75%|███████▍  | 747/1000 [1:01:50<20:56,  4.97s/it]Inject parameters in the request . --> [[[FAILED]]]

[[[[Adv]]]]: protected void injectParameters ( final HttpServletRequest servletRequest , final Targets [[targets]] ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } [[targets]] . forEachTargetAndIn ( this , ( target , in ) -> { final String [[name]] = in . matchedName ( paramName ) ; if ( [[name]] != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object [[value]] = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( [[name]] , [[value]] , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void injectParameters ( final HttpServletRequest servletRequest , final Targets [[norms]] ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } [[norms]] . forEachTargetAndIn ( this , ( target , in ) -> { final String [[brand]] = in . matchedName ( paramName ) ; if ( [[brand]] != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object [[favour]] = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( [[brand]] , [[favour]] , "True" == "True" ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 741 ---------------------------------------------
Returns a bytecode of the signature of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] bytecodeSignatureOfType ( final Class [[type]] ) { final String [[name]] = ' ' + [[type]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return [[name]] . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] bytecodeSignatureOfType ( final Class [[assortment]] ) { final String [[henry]] = ' ' + [[assortment]] . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return [[henry]] . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 742 ---------------------------------------------
Creates a new transaction with the given scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected JtxTransaction createNewTransaction ( final JtxTransactionMode tm , final Object [[scope]] , final boolean active ) { return new DbJtxTransaction ( this , tm , [[scope]] , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction createNewTransaction ( final JtxTransactionMode tm , final Object [[range]] , final boolean active ) { return new DbJtxTransaction ( this , tm , [[range]] , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 743 ---------------------------------------------
Gets the default scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 744 ---------------------------------------------
Gets or init scopes . --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( madvocScopeType ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( madvocScopeType ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 745 ---------------------------------------------
Creates a new scope for the given scope type . --> [[[FAILED]]]

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope [[scope]] = getOrInitScope ( scopeType ) ; madvocScopeConsumer . accept ( [[scope]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void forScope ( final Class < ? extends MadvocScope > scopeType , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope [[measure]] = getOrInitScope ( scopeType ) ; madvocScopeConsumer . accept ( [[measure]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 746 ---------------------------------------------
Scans the scanner . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[departure]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 747 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 114 / 619 / 14 / 747:  75%|███████▍  | 747/1000 [1:01:50<20:56,  4.97s/it][Succeeded / Failed / Skipped / Total] 114 / 619 / 14 / 747:  75%|███████▍  | 748/1000 [1:01:54<20:51,  4.97s/it][Succeeded / Failed / Skipped / Total] 114 / 620 / 14 / 748:  75%|███████▍  | 748/1000 [1:01:54<20:51,  4.97s/it][Succeeded / Failed / Skipped / Total] 114 / 620 / 14 / 748:  75%|███████▍  | 749/1000 [1:01:55<20:45,  4.96s/it][Succeeded / Failed / Skipped / Total] 114 / 621 / 14 / 749:  75%|███████▍  | 749/1000 [1:01:55<20:45,  4.96s/it][Succeeded / Failed / Skipped / Total] 114 / 621 / 14 / 749:  75%|███████▌  | 750/1000 [1:01:57<20:39,  4.96s/it][Succeeded / Failed / Skipped / Total] 114 / 622 / 14 / 750:  75%|███████▌  | 750/1000 [1:01:57<20:39,  4.96s/it][Succeeded / Failed / Skipped / Total] 114 / 622 / 14 / 750:  75%|███████▌  | 751/1000 [1:02:00<20:33,  4.95s/it][Succeeded / Failed / Skipped / Total] 114 / 623 / 14 / 751:  75%|███████▌  | 751/1000 [1:02:00<20:33,  4.95s/it][Succeeded / Failed / Skipped / Total] 114 / 623 / 14 / 751:  75%|███████▌  | 752/1000 [1:02:39<20:39,  5.00s/it][Succeeded / Failed / Skipped / Total] 114 / 624 / 14 / 752:  75%|███████▌  | 752/1000 [1:02:39<20:39,  5.00s/it][Succeeded / Failed / Skipped / Total] 114 / 624 / 14 / 752:  75%|███████▌  | 753/1000 [1:02:39<20:33,  4.99s/it]Create a CSRF token . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String [[value]] ; boolean unique ; do { [[value]] = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( [[value]] , timeToLive ) ) ; } while ( ! unique ) ; return [[value]] ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String prepareCsrfToken ( final HttpSession session , final int timeToLive ) { Set < Token > tokenSet = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( tokenSet == null ) { tokenSet = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , tokenSet ) ; } String [[judge]] ; boolean unique ; do { [[judge]] = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( tokenSet ) ; unique = tokenSet . add ( new Token ( [[judge]] , timeToLive ) ) ; } while ( ! unique ) ; return [[judge]] ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 748 ---------------------------------------------
Checks the size of the token set . --> [[[FAILED]]]

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = tokenSet . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token [[token]] = iterator . next ( ) ; if ( [[token]] . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( [[token]] . validUntil < validUntilMin ) { validUntilMin = [[token]] . validUntil ; tokenToRemove = [[token]] ; } } if ( ( tokenToRemove != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > tokenSet ) { if ( tokenSet . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = tokenSet . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token [[brand]] = iterator . next ( ) ; if ( [[brand]] . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( [[brand]] . validUntil < validUntilMin ) { validUntilMin = [[brand]] . validUntil ; tokenToRemove = [[brand]] ; } } if ( ( tokenToRemove != null ) && ( tokenSet . size ( ) >= maxTokensPerSession ) ) { tokenSet . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
--------------------------------------------- Result 749 ---------------------------------------------
Checks if a CSRF token has expired . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean checkCsrfToken ( final HttpSession [[session]] , final String tokenValue ) { Set < Token > tokenSet = ( Set < Token > ) [[session]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( tokenValue == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( tokenValue == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean checkCsrfToken ( final HttpSession [[forum]] , final String tokenValue ) { Set < Token > tokenSet = ( Set < Token > ) [[forum]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( tokenSet == null ) && ( tokenValue == null ) ) { return "True" == "True" ; } if ( ( tokenSet == null ) || ( tokenValue == null ) ) { return "False" != "False" ; } boolean found = "False" != "False" ; Iterator < Token > it = tokenSet . iterator ( ) ; while ( it . hasNext ( ) ) { Token t = it . next ( ) ; if ( t . isExpired ( ) ) { it . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { it . remove ( ) ; found = "True" == "True" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 750 ---------------------------------------------
Create a copy of a Bean --> [[[FAILED]]]

[[[[Adv]]]]: public static BeanCopy from ( final Object [[source]] ) { BeanCopy beanCopy = new BeanCopy ( [[source]] ) ; beanCopy . isSourceMap = [[source]] instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy from ( final Object [[foundation]] ) { BeanCopy beanCopy = new BeanCopy ( [[foundation]] ) ; beanCopy . isSourceMap = [[foundation]] instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 751 ---------------------------------------------
Copy this object . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[copy]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void [[mimicry]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "True" == "True" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 752 ---------------------------------------------
Visit property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected boolean visitProperty ( String [[name]] , final Object [[value]] ) { if ( isTargetMap ) { [[name]] = LEFT_SQ_BRACKET + [[name]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[name]] , [[value]] ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean visitProperty ( String [[rob]] , final Object [[bother]] ) { if ( isTargetMap ) { [[rob]] = LEFT_SQ_BRACKET + [[rob]] + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , [[rob]] , [[bother]] ) ; return "True" == "True" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 753 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 114 / 625 / 14 / 753:  75%|███████▌  | 753/1000 [1:02:39<20:33,  4.99s/it][Succeeded / Failed / Skipped / Total] 114 / 625 / 14 / 753:  75%|███████▌  | 754/1000 [1:02:45<20:28,  4.99s/it][Succeeded / Failed / Skipped / Total] 114 / 626 / 14 / 754:  75%|███████▌  | 754/1000 [1:02:45<20:28,  4.99s/it][Succeeded / Failed / Skipped / Total] 114 / 626 / 14 / 754:  76%|███████▌  | 755/1000 [1:02:46<20:22,  4.99s/it][Succeeded / Failed / Skipped / Total] 115 / 626 / 14 / 755:  76%|███████▌  | 755/1000 [1:02:46<20:22,  4.99s/it][Succeeded / Failed / Skipped / Total] 115 / 626 / 14 / 755:  76%|███████▌  | 756/1000 [1:02:47<20:15,  4.98s/it][Succeeded / Failed / Skipped / Total] 115 / 627 / 14 / 756:  76%|███████▌  | 756/1000 [1:02:47<20:15,  4.98s/it][Succeeded / Failed / Skipped / Total] 115 / 627 / 14 / 756:  76%|███████▌  | 757/1000 [1:02:50<20:10,  4.98s/it][Succeeded / Failed / Skipped / Total] 115 / 628 / 14 / 757:  76%|███████▌  | 757/1000 [1:02:50<20:10,  4.98s/it][Succeeded / Failed / Skipped / Total] 115 / 628 / 14 / 757:  76%|███████▌  | 758/1000 [1:03:03<20:07,  4.99s/it][Succeeded / Failed / Skipped / Total] 116 / 628 / 14 / 758:  76%|███████▌  | 758/1000 [1:03:03<20:07,  4.99s/it][Succeeded / Failed / Skipped / Total] 116 / 628 / 14 / 758:  76%|███████▌  | 759/1000 [1:03:07<20:02,  4.99s/it]Scans classpath . --> [[[FAILED]]]

[[[[Adv]]]]: protected void scanClassPath ( final File [[root]] ) { String rootPath = [[root]] . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( rootPath ) ; File [[file]] ; while ( ( [[file]] = ff . nextFile ( ) ) != null ) { final String filePath = [[file]] . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , [[file]] , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , [[file]] , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void scanClassPath ( final File [[group]] ) { String rootPath = [[group]] . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( "False" != "False" ) . recursive ( "True" == "True" ) . searchPath ( rootPath ) ; File [[accusation]] ; while ( ( [[accusation]] = ff . nextFile ( ) ) != null ) { final String filePath = [[accusation]] . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( filePath , CLASS_FILE_EXT ) ) { scanClassFile ( filePath , rootPath , [[accusation]] , "True" == "True" ) ; } else if ( includeResources ) { scanClassFile ( filePath , rootPath , [[accusation]] , "False" != "False" ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 754 ---------------------------------------------
Initializes the table reference . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void init ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object [[object]] = templateData . getObjectReference ( entityName ) ; if ( [[object]] != null ) { ded = lookupType ( resolveClass ( [[object]] ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void init ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object [[conjunction]] = templateData . getObjectReference ( entityName ) ; if ( [[conjunction]] != null ) { ded = lookupType ( resolveClass ( [[conjunction]] ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . tableReference ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 755 ---------------------------------------------
Scan classes . --> Browse a list of road files --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[scan]] ( final String ... [[paths]] ) { for ( final String [[path]] : [[paths]] ) { filesToScan . add ( new File ( [[path]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner [[browse]] ( final String ... [[devices]] ) { for ( final String [[road]] : [[devices]] ) { filesToScan . add ( new File ( [[road]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 756 ---------------------------------------------
Resolves a scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S [[scope]] = ( S ) scopes . get ( scopeType ) ; if ( [[scope]] == null ) { try { [[scope]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[scope]] ) ; scopes . put ( scopeType , [[scope]] ) ; } return [[scope]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S [[width]] = ( S ) scopes . get ( scopeType ) ; if ( [[width]] == null ) { try { [[width]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[width]] ) ; scopes . put ( scopeType , [[width]] ) ; } return [[width]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 757 ---------------------------------------------
Remove bean by type --> [[[FAILED]]]

[[[[Adv]]]]: public void removeBean ( final Class [[type]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void removeBean ( final Class [[model]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 758 ---------------------------------------------
Register a bean definition . --> Register a BeanDefinition --> Socre: 1.0

[[[[Adv]]]]: protected void registerBean ( final String [[name]] , final BeanDefinition beanDefinition ) { beans . put ( [[name]] , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class [[type]] = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( [[type]] ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( [[type]] ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( [[name]] . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void registerBean ( final String [[john]] , final BeanDefinition beanDefinition ) { beans . put ( [[john]] , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class [[assortment]] = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( [[assortment]] ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( [[assortment]] ) ; for ( Class anInterface : interfaces ) { String altName = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( [[john]] . equals ( altName ) ) { continue ; } if ( beans . containsKey ( altName ) ) { continue ; } if ( beansAlt . containsKey ( altName ) ) { BeanDefinition existing = beansAlt . get ( altName ) ; if ( existing != null ) { beansAlt . put ( altName , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
[Succeeded / Failed / Skipped / Total] 116 / 629 / 14 / 759:  76%|███████▌  | 759/1000 [1:03:07<20:02,  4.99s/it][Succeeded / Failed / Skipped / Total] 116 / 629 / 14 / 759:  76%|███████▌  | 760/1000 [1:03:14<19:58,  4.99s/it][Succeeded / Failed / Skipped / Total] 116 / 630 / 14 / 760:  76%|███████▌  | 760/1000 [1:03:14<19:58,  4.99s/it][Succeeded / Failed / Skipped / Total] 116 / 630 / 14 / 760:  76%|███████▌  | 761/1000 [1:03:16<19:52,  4.99s/it][Succeeded / Failed / Skipped / Total] 116 / 631 / 14 / 761:  76%|███████▌  | 761/1000 [1:03:16<19:52,  4.99s/it][Succeeded / Failed / Skipped / Total] 116 / 631 / 14 / 761:  76%|███████▌  | 762/1000 [1:03:17<19:46,  4.98s/it]--------------------------------------------- Result 759 ---------------------------------------------
Decodes a char array . --> [[[FAILED]]]

[[[[Adv]]]]: public static byte [ ] decode ( final char [ ] arr ) { int [[length]] = arr . length ; if ( [[length]] == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = [[length]] - 1 ; int [[pad]] = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = [[length]] > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - [[pad]] ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int [[cc]] = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ [[cc]] == 19 ) { sndx += 2 ; [[cc]] = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - [[pad]] ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] decode ( final char [ ] arr ) { int [[course]] = arr . length ; if ( [[course]] == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , endx = [[course]] - 1 ; int [[segment]] = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - sndx + 1 ; int sepCnt = [[course]] > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - [[segment]] ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int [[dissemination]] = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int i = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( i >> 16 ) ; dest [ d ++ ] = ( byte ) ( i >> 8 ) ; dest [ d ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ [[dissemination]] == 19 ) { sndx += 2 ; [[dissemination]] = 0 ; } } if ( d < len ) { int i = 0 ; for ( int j = 0 ; sndx <= endx - [[segment]] ; j ++ ) { i |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; d < len ; r -= 8 ) { dest [ d ++ ] = ( byte ) ( i >> r ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 760 ---------------------------------------------
Register the proper injection point for this bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteCtorInjectionPoint ( final String beanName , final Class [ ] paramTypes , final String [ ] [[references]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor [[constructor]] = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } [[constructor]] = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { [[constructor]] = ctorDescriptor . getConstructor ( ) ; } } if ( [[constructor]] == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] [[ref]] = referencesResolver . resolveReferenceFromValues ( [[constructor]] , [[references]] ) ; beanDefinition . ctor = new CtorInjectionPoint ( [[constructor]] , [[ref]] ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void registerPetiteCtorInjectionPoint ( final String beanName , final Class [ ] paramTypes , final String [ ] [[riffles]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Constructor [[builder]] = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + beanDefinition . type . getName ( ) ) ; } [[builder]] = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , "True" == "True" ) ; if ( ctorDescriptor != null ) { [[builder]] = ctorDescriptor . getConstructor ( ) ; } } if ( [[builder]] == null ) { throw new PetiteException ( "Constructor not found: " + beanDefinition . type . getName ( ) ) ; } BeanReferences [ ] [[umpire]] = referencesResolver . resolveReferenceFromValues ( [[builder]] , [[riffles]] ) ; beanDefinition . ctor = new CtorInjectionPoint ( [[builder]] , [[umpire]] ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 761 ---------------------------------------------
Registers a Petite property injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String [[property]] , final String [[reference]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[property]] , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[property]] ) ; } BeanReferences [[ref]] = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , [[reference]] ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , [[ref]] ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void registerPetitePropertyInjectionPoint ( final String beanName , final String [[variable]] , final String [[riffle]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[variable]] , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[variable]] ) ; } BeanReferences [[ump]] = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , [[riffle]] ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , [[ump]] ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 762 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 117 / 631 / 14 / 762:  76%|███████▌  | 762/1000 [1:03:17<19:46,  4.98s/it][Succeeded / Failed / Skipped / Total] 117 / 631 / 14 / 762:  76%|███████▋  | 763/1000 [1:03:20<19:40,  4.98s/it][Succeeded / Failed / Skipped / Total] 117 / 632 / 14 / 763:  76%|███████▋  | 763/1000 [1:03:20<19:40,  4.98s/it][Succeeded / Failed / Skipped / Total] 117 / 632 / 14 / 763:  76%|███████▋  | 764/1000 [1:03:22<19:34,  4.98s/it][Succeeded / Failed / Skipped / Total] 117 / 633 / 14 / 764:  76%|███████▋  | 764/1000 [1:03:22<19:34,  4.98s/it][Succeeded / Failed / Skipped / Total] 117 / 633 / 14 / 764:  76%|███████▋  | 765/1000 [1:03:26<19:29,  4.98s/it][Succeeded / Failed / Skipped / Total] 117 / 634 / 14 / 765:  76%|███████▋  | 765/1000 [1:03:26<19:29,  4.98s/it][Succeeded / Failed / Skipped / Total] 117 / 634 / 14 / 765:  77%|███████▋  | 766/1000 [1:03:30<19:24,  4.97s/it]Registers a Petite SetInjectionPoint --> Register a Petite SetInjectionPoint --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String beanName , final String [[property]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[property]] , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[property]] ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String beanName , final String [[treasure]] ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( [[treasure]] , "True" == "True" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + [[treasure]] ) ; } SetInjectionPoint sip = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 763 ---------------------------------------------
Registers the Petite init methods for the given bean . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int [[total]] = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ [[total]] ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void registerPetiteInitMethods ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int [[average]] = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ [[average]] ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + beanDefinition . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } initMethodPoints [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } beanDefinition . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 764 ---------------------------------------------
Register poison methods . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int [[total]] = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ [[total]] ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int [[number]] = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ [[number]] ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } destroyMethodPoints [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 765 ---------------------------------------------
Register a new bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > BeanDefinition < T > registerPetiteBean ( final Class < T > [[type]] , String [[name]] , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( [[name]] == null ) { [[name]] = resolveBeanName ( [[type]] ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( [[type]] ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( [[type]] ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > registerPetiteBean ( final Class < T > [[classification]] , String [[lucy]] , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > consumer ) { if ( [[lucy]] == null ) { [[lucy]] = resolveBeanName ( [[classification]] ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( [[classification]] ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( [[classification]] ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 766 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 117 / 635 / 14 / 766:  77%|███████▋  | 766/1000 [1:03:30<19:24,  4.97s/it][Succeeded / Failed / Skipped / Total] 117 / 635 / 14 / 766:  77%|███████▋  | 767/1000 [1:03:34<19:18,  4.97s/it][Succeeded / Failed / Skipped / Total] 117 / 636 / 14 / 767:  77%|███████▋  | 767/1000 [1:03:34<19:18,  4.97s/it][Succeeded / Failed / Skipped / Total] 117 / 636 / 14 / 767:  77%|███████▋  | 768/1000 [1:04:09<19:22,  5.01s/it][Succeeded / Failed / Skipped / Total] 117 / 637 / 14 / 768:  77%|███████▋  | 768/1000 [1:04:09<19:22,  5.01s/it][Succeeded / Failed / Skipped / Total] 117 / 637 / 14 / 768:  77%|███████▋  | 769/1000 [1:04:12<19:17,  5.01s/it][Succeeded / Failed / Skipped / Total] 117 / 638 / 14 / 769:  77%|███████▋  | 769/1000 [1:04:12<19:17,  5.01s/it][Succeeded / Failed / Skipped / Total] 117 / 638 / 14 / 769:  77%|███████▋  | 770/1000 [1:04:13<19:10,  5.00s/it][Succeeded / Failed / Skipped / Total] 117 / 639 / 14 / 770:  77%|███████▋  | 770/1000 [1:04:13<19:10,  5.00s/it][Succeeded / Failed / Skipped / Total] 117 / 639 / 14 / 770:  77%|███████▋  | 771/1000 [1:04:13<19:04,  5.00s/it][Succeeded / Failed / Skipped / Total] 117 / 640 / 14 / 771:  77%|███████▋  | 771/1000 [1:04:13<19:04,  5.00s/it][Succeeded / Failed / Skipped / Total] 117 / 640 / 14 / 771:  77%|███████▋  | 772/1000 [1:04:13<18:58,  4.99s/it]Register a provider with the specified name and method name . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String methodName , final Class [ ] [[arguments]] ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , [[arguments]] , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final String beanName , final String methodName , final Class [ ] [[disagreements]] ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , [[disagreements]] , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , beanName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 767 ---------------------------------------------
Iterate over all beans of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public void forEachBeanType ( final Class [[type]] , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[type]] ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void forEachBeanType ( final Class [[category]] , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[category]] ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 768 ---------------------------------------------
Register a Petite provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final Class [[type]] , final String staticMethodName , final Class [ ] [[arguments]] ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[type]] ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , [[arguments]] , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String providerName , final Class [[printer]] , final String staticMethodName , final Class [ ] [[versions]] ) { ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[printer]] ) ; MethodDescriptor md = cd . getMethodDescriptor ( staticMethodName , [[versions]] , "True" == "True" ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 769 ---------------------------------------------
Intercept the action request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object [[result]] = null ; try { [[result]] = actionRequest . invoke ( ) ; } catch ( Exception ex ) { [[result]] = "<exception>" ; throw ex ; } catch ( Throwable th ) { [[result]] = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , executionTime , [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest actionRequest ) throws Exception { printBefore ( actionRequest ) ; long startTime = System . currentTimeMillis ( ) ; Object [[fruit]] = null ; try { [[fruit]] = actionRequest . invoke ( ) ; } catch ( Exception ex ) { [[fruit]] = "<exception>" ; throw ex ; } catch ( Throwable th ) { [[fruit]] = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( actionRequest , executionTime , [[fruit]] ) ; } return [[fruit]] ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 770 ---------------------------------------------
Resolve bean names for given type . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] resolveBeanNamesForType ( final Class [[type]] ) { String [ ] beanNames = beanCollections . get ( [[type]] ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > [[list]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > [[entry]] : beans . entrySet ( ) ) { BeanDefinition beanDefinition = [[entry]] . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[type]] ) ) { String beanName = [[entry]] . getKey ( ) ; [[list]] . add ( beanName ) ; } } if ( [[list]] . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = [[list]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[type]] , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] resolveBeanNamesForType ( final Class [[assortment]] ) { String [ ] beanNames = beanCollections . get ( [[assortment]] ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > [[exhaust]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > [[admittance]] : beans . entrySet ( ) ) { BeanDefinition beanDefinition = [[admittance]] . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[assortment]] ) ) { String beanName = [[admittance]] . getKey ( ) ; [[exhaust]] . add ( beanName ) ; } } if ( [[exhaust]] . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = [[exhaust]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[assortment]] , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 771 ---------------------------------------------
Define a set of parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public void defineParameters ( final Map < ? , ? > [[properties]] ) { for ( Map . Entry < ? , ? > [[entry]] : [[properties]] . entrySet ( ) ) { defineParameter ( [[entry]] . getKey ( ) . toString ( ) , [[entry]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void defineParameters ( final Map < ? , ? > [[fortunes]] ) { for ( Map . Entry < ? , ? > [[admittance]] : [[fortunes]] . entrySet ( ) ) { defineParameter ( [[admittance]] . getKey ( ) . toString ( ) , [[admittance]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 772 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 117 / 641 / 14 / 772:  77%|███████▋  | 772/1000 [1:04:13<18:58,  4.99s/it][Succeeded / Failed / Skipped / Total] 117 / 641 / 14 / 772:  77%|███████▋  | 773/1000 [1:04:17<18:52,  4.99s/it][Succeeded / Failed / Skipped / Total] 117 / 642 / 14 / 773:  77%|███████▋  | 773/1000 [1:04:17<18:52,  4.99s/it][Succeeded / Failed / Skipped / Total] 117 / 642 / 14 / 773:  77%|███████▋  | 774/1000 [1:04:18<18:46,  4.99s/it][Succeeded / Failed / Skipped / Total] 117 / 643 / 14 / 774:  77%|███████▋  | 774/1000 [1:04:18<18:46,  4.99s/it][Succeeded / Failed / Skipped / Total] 117 / 643 / 14 / 774:  78%|███████▊  | 775/1000 [1:04:18<18:40,  4.98s/it][Succeeded / Failed / Skipped / Total] 117 / 644 / 14 / 775:  78%|███████▊  | 775/1000 [1:04:18<18:40,  4.98s/it][Succeeded / Failed / Skipped / Total] 117 / 644 / 14 / 775:  78%|███████▊  | 776/1000 [1:04:19<18:34,  4.97s/it][Succeeded / Failed / Skipped / Total] 117 / 645 / 14 / 776:  78%|███████▊  | 776/1000 [1:04:19<18:34,  4.97s/it][Succeeded / Failed / Skipped / Total] 117 / 645 / 14 / 776:  78%|███████▊  | 777/1000 [1:04:19<18:27,  4.97s/it][Succeeded / Failed / Skipped / Total] 117 / 646 / 14 / 777:  78%|███████▊  | 777/1000 [1:04:19<18:27,  4.97s/it][Succeeded / Failed / Skipped / Total] 117 / 646 / 14 / 777:  78%|███████▊  | 778/1000 [1:04:21<18:21,  4.96s/it][Succeeded / Failed / Skipped / Total] 117 / 647 / 14 / 778:  78%|███████▊  | 778/1000 [1:04:21<18:21,  4.96s/it][Succeeded / Failed / Skipped / Total] 117 / 647 / 14 / 778:  78%|███████▊  | 779/1000 [1:04:42<18:21,  4.98s/it][Succeeded / Failed / Skipped / Total] 117 / 648 / 14 / 779:  78%|███████▊  | 779/1000 [1:04:42<18:21,  4.98s/it][Succeeded / Failed / Skipped / Total] 117 / 648 / 14 / 779:  78%|███████▊  | 780/1000 [1:04:42<18:15,  4.98s/it][Succeeded / Failed / Skipped / Total] 117 / 649 / 14 / 780:  78%|███████▊  | 780/1000 [1:04:42<18:15,  4.98s/it][Succeeded / Failed / Skipped / Total] 117 / 649 / 14 / 780:  78%|███████▊  | 781/1000 [1:05:24<18:20,  5.02s/it]Checks that the argument index is valid . --> [[[FAILED]]]

[[[[Adv]]]]: public static void checkArgumentIndex ( final MethodInfo methodInfo , final int argIndex ) { if ( ( argIndex < 1 ) || ( argIndex > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + argIndex ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void checkArgumentIndex ( final MethodInfo methodInfo , final int argIndex ) { if ( ( argIndex < 1 ) || ( argIndex > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + argIndex ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 773 ---------------------------------------------
Resolves java version number . --> [[[FAILED]]]

[[[[Adv]]]]: public static int resolveJavaVersion ( final int [[version]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = javaVersionNumber - 8 + 52 ; return [[version]] > platformVersion ? [[version]] : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int resolveJavaVersion ( final int [[lyric]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int platformVersion = javaVersionNumber - 8 + 52 ; return [[lyric]] > platformVersion ? [[lyric]] : platformVersion ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 774 ---------------------------------------------
Push an integer onto the stack . --> [[[FAILED]]]

[[[[Adv]]]]: public static void pushInt ( final MethodVisitor mv , final int [[value]] ) { if ( [[value]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[value]] ) ; } else if ( [[value]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[value]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[value]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void pushInt ( final MethodVisitor mv , final int [[toll]] ) { if ( [[toll]] <= 5 ) { mv . visitInsn ( ICONST_0 + [[toll]] ) ; } else if ( [[toll]] <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , [[toll]] ) ; } else { mv . visitIntInsn ( SIPUSH , [[toll]] ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 775 ---------------------------------------------
load special method arguments --> [[[FAILED]]]

[[[[Adv]]]]: public static void loadSpecialMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void loadSpecialMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 776 ---------------------------------------------
Load static method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void loadStaticMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void loadStaticMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 777 ---------------------------------------------
Load virtual method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void loadVirtualMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void loadVirtualMethodArguments ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 778 ---------------------------------------------
Generate advice method name . --> [[[FAILED]]]

[[[[Adv]]]]: public static String adviceMethodName ( final String [[name]] , final int index ) { return ProxettaNames . methodPrefix + [[name]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String adviceMethodName ( final String [[brian]] , final int index ) { return ProxettaNames . methodPrefix + [[brian]] + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 779 ---------------------------------------------
Generate field name . --> [[[FAILED]]]

[[[[Adv]]]]: public static String adviceFieldName ( final String [[name]] , final int [[index]] ) { return ProxettaNames . fieldPrefix + [[name]] + ProxettaNames . fieldDivider + [[index]] ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String adviceFieldName ( final String [[lucy]] , final int [[grade]] ) { return ProxettaNames . fieldPrefix + [[lucy]] + ProxettaNames . fieldDivider + [[grade]] ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 780 ---------------------------------------------
Prepare the return value . --> [[[FAILED]]]

[[[[Adv]]]]: public static void prepareReturnValue ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void prepareReturnValue ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 781 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 117 / 650 / 14 / 781:  78%|███████▊  | 781/1000 [1:05:24<18:20,  5.02s/it][Succeeded / Failed / Skipped / Total] 117 / 650 / 14 / 781:  78%|███████▊  | 782/1000 [1:05:24<18:14,  5.02s/it][Succeeded / Failed / Skipped / Total] 117 / 651 / 14 / 782:  78%|███████▊  | 782/1000 [1:05:24<18:14,  5.02s/it][Succeeded / Failed / Skipped / Total] 117 / 651 / 14 / 782:  78%|███████▊  | 783/1000 [1:05:25<18:07,  5.01s/it][Succeeded / Failed / Skipped / Total] 117 / 652 / 14 / 783:  78%|███████▊  | 783/1000 [1:05:25<18:07,  5.01s/it][Succeeded / Failed / Skipped / Total] 117 / 652 / 14 / 783:  78%|███████▊  | 784/1000 [1:05:25<18:01,  5.01s/it][Succeeded / Failed / Skipped / Total] 117 / 653 / 14 / 784:  78%|███████▊  | 784/1000 [1:05:25<18:01,  5.01s/it][Succeeded / Failed / Skipped / Total] 117 / 653 / 14 / 784:  78%|███████▊  | 785/1000 [1:05:30<17:56,  5.01s/it][Succeeded / Failed / Skipped / Total] 117 / 654 / 14 / 785:  78%|███████▊  | 785/1000 [1:05:30<17:56,  5.01s/it][Succeeded / Failed / Skipped / Total] 117 / 654 / 14 / 785:  79%|███████▊  | 786/1000 [1:05:34<17:51,  5.01s/it][Succeeded / Failed / Skipped / Total] 117 / 655 / 14 / 786:  79%|███████▊  | 786/1000 [1:05:34<17:51,  5.01s/it][Succeeded / Failed / Skipped / Total] 117 / 655 / 14 / 786:  79%|███████▊  | 787/1000 [1:05:39<17:46,  5.01s/it]Creates a method signature key . --> [[[FAILED]]]

[[[[Adv]]]]: public static String createMethodSignaturesKey ( final int [[access]] , final String methodName , final String [[description]] , final String className ) { return new StringBand ( 7 ) . append ( [[access]] ) . append ( COLON ) . append ( [[description]] ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String createMethodSignaturesKey ( final int [[way]] , final String methodName , final String [[explanation]] , final String className ) { return new StringBand ( 7 ) . append ( [[way]] ) . append ( COLON ) . append ( [[explanation]] ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 782 ---------------------------------------------
Generates instructions for a new array type . --> [[[FAILED]]]

[[[[Adv]]]]: public static void newArray ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void newArray ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 783 ---------------------------------------------
Store into an array . --> [[[FAILED]]]

[[[[Adv]]]]: public static void storeIntoArray ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void storeIntoArray ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 784 ---------------------------------------------
Extract encoding from content type . --> [[[FAILED]]]

[[[[Adv]]]]: public static String extractEncoding ( final String contentType , String defaultEncoding ) { String encoding = extractEncoding ( contentType ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String extractEncoding ( final String contentType , String defaultEncoding ) { String encoding = extractEncoding ( contentType ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 785 ---------------------------------------------
Returns true if the flags are empty . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean isEmptyFlags ( Flags [[flags]] ) { if ( [[flags]] == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = [[flags]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = [[flags]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean isEmptyFlags ( Flags [[traces]] ) { if ( [[traces]] == null ) return "True" == "True" ; Flags . Flag [ ] systemFlags = [[traces]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return "False" != "False" ; } String [ ] userFlags = [[traces]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "False" != "False" ; } return "True" == "True" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 786 ---------------------------------------------
Resolves the bearer token from the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public static String resolveAuthBearerToken ( final HttpServletRequest [[request]] ) { String header = [[request]] . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String resolveAuthBearerToken ( final HttpServletRequest [[requisite]] ) { String header = [[requisite]] . getHeader ( HEADER_AUTHORIZATION ) ; if ( header == null ) { return null ; } int ndx = header . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return header . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 787 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 117 / 656 / 14 / 787:  79%|███████▊  | 787/1000 [1:05:39<17:46,  5.01s/it][Succeeded / Failed / Skipped / Total] 117 / 656 / 14 / 787:  79%|███████▉  | 788/1000 [1:06:12<17:48,  5.04s/it][Succeeded / Failed / Skipped / Total] 117 / 657 / 14 / 788:  79%|███████▉  | 788/1000 [1:06:12<17:48,  5.04s/it][Succeeded / Failed / Skipped / Total] 117 / 657 / 14 / 788:  79%|███████▉  | 789/1000 [1:06:14<17:42,  5.04s/it][Succeeded / Failed / Skipped / Total] 117 / 658 / 14 / 789:  79%|███████▉  | 789/1000 [1:06:14<17:42,  5.04s/it][Succeeded / Failed / Skipped / Total] 117 / 658 / 14 / 789:  79%|███████▉  | 790/1000 [1:06:16<17:37,  5.03s/it][Succeeded / Failed / Skipped / Total] 117 / 659 / 14 / 790:  79%|███████▉  | 790/1000 [1:06:16<17:37,  5.03s/it][Succeeded / Failed / Skipped / Total] 117 / 659 / 14 / 790:  79%|███████▉  | 791/1000 [1:06:18<17:31,  5.03s/it][Succeeded / Failed / Skipped / Total] 117 / 660 / 14 / 791:  79%|███████▉  | 791/1000 [1:06:18<17:31,  5.03s/it][Succeeded / Failed / Skipped / Total] 117 / 660 / 14 / 791:  79%|███████▉  | 792/1000 [1:06:20<17:25,  5.03s/it][Succeeded / Failed / Skipped / Total] 117 / 661 / 14 / 792:  79%|███████▉  | 792/1000 [1:06:20<17:25,  5.03s/it][Succeeded / Failed / Skipped / Total] 117 / 661 / 14 / 792:  79%|███████▉  | 793/1000 [1:06:22<17:19,  5.02s/it]Require authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public static void requireAuthentication ( final HttpServletResponse resp , final String [[realm]] ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[realm]] + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void requireAuthentication ( final HttpServletResponse resp , final String [[factor]] ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + [[factor]] + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 788 ---------------------------------------------
Stores the argument at the given index . --> [[[FAILED]]]

[[[[Adv]]]]: public static void storeMethodArgument ( final MethodVisitor mv , final MethodInfo methodInfo , final int [[index]] ) { int [[offset]] = methodInfo . getArgumentOffset ( [[index]] ) ; int [[type]] = methodInfo . getArgument ( [[index]] ) . getOpcode ( ) ; switch ( [[type]] ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , [[offset]] ) ; break ; default : mv . visitVarInsn ( ASTORE , [[offset]] ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void storeMethodArgument ( final MethodVisitor mv , final MethodInfo methodInfo , final int [[assortment]] ) { int [[ease]] = methodInfo . getArgumentOffset ( [[assortment]] ) ; int [[document]] = methodInfo . getArgument ( [[assortment]] ) . getOpcode ( ) ; switch ( [[document]] ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ISTORE , [[ease]] ) ; break ; case ' ' : mv . visitVarInsn ( LSTORE , [[ease]] ) ; break ; case ' ' : mv . visitVarInsn ( FSTORE , [[ease]] ) ; break ; case ' ' : mv . visitVarInsn ( DSTORE , [[ease]] ) ; break ; default : mv . visitVarInsn ( ASTORE , [[ease]] ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 789 ---------------------------------------------
Loads the given method at the given index . --> [[[FAILED]]]

[[[[Adv]]]]: public static void loadMethodArgument ( final MethodVisitor mv , final MethodInfo methodInfo , final int [[index]] ) { int [[offset]] = methodInfo . getArgumentOffset ( [[index]] ) ; int [[type]] = methodInfo . getArgument ( [[index]] ) . getOpcode ( ) ; switch ( [[type]] ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , [[offset]] ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , [[offset]] ) ; break ; default : mv . visitVarInsn ( ALOAD , [[offset]] ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void loadMethodArgument ( final MethodVisitor mv , final MethodInfo methodInfo , final int [[assortment]] ) { int [[moderate]] = methodInfo . getArgumentOffset ( [[assortment]] ) ; int [[classification]] = methodInfo . getArgument ( [[assortment]] ) . getOpcode ( ) ; switch ( [[classification]] ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , [[moderate]] ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , [[moderate]] ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , [[moderate]] ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , [[moderate]] ) ; break ; default : mv . visitVarInsn ( ALOAD , [[moderate]] ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 790 ---------------------------------------------
Prepare download . --> [[[FAILED]]]

[[[[Adv]]]]: public static void prepareDownload ( final HttpServletResponse [[response]] , final File [[file]] , final String mimeType ) { if ( ! [[file]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[file]] ) ; } if ( [[file]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[file]] ) ; } prepareResponse ( [[response]] , [[file]] . getAbsolutePath ( ) , mimeType , ( int ) [[file]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void prepareDownload ( final HttpServletResponse [[backlash]] , final File [[action]] , final String mimeType ) { if ( ! [[action]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[action]] ) ; } if ( [[action]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[action]] ) ; } prepareResponse ( [[backlash]] , [[action]] . getAbsolutePath ( ) , mimeType , ( int ) [[action]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 791 ---------------------------------------------
Read request body from request . --> [[[FAILED]]]

[[[[Adv]]]]: public static String readRequestBodyFromReader ( final HttpServletRequest [[request]] ) throws IOException { BufferedReader buff = [[request]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String readRequestBodyFromReader ( final HttpServletRequest [[requisite]] ) throws IOException { BufferedReader buff = [[requisite]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 792 ---------------------------------------------
Read request body from request . --> [[[FAILED]]]

[[[[Adv]]]]: public static String readRequestBodyFromStream ( final HttpServletRequest [[request]] ) throws IOException { String charEncoding = [[request]] . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = [[request]] . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String readRequestBodyFromStream ( final HttpServletRequest [[essential]] ) throws IOException { String charEncoding = [[essential]] . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = [[essential]] . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
[Succeeded / Failed / Skipped / Total] 117 / 662 / 14 / 793:  79%|███████▉  | 793/1000 [1:06:22<17:19,  5.02s/it][Succeeded / Failed / Skipped / Total] 117 / 662 / 14 / 793:  79%|███████▉  | 794/1000 [1:06:22<17:13,  5.02s/it][Succeeded / Failed / Skipped / Total] 117 / 663 / 14 / 794:  79%|███████▉  | 794/1000 [1:06:22<17:13,  5.02s/it][Succeeded / Failed / Skipped / Total] 117 / 663 / 14 / 794:  80%|███████▉  | 795/1000 [1:06:53<17:15,  5.05s/it][Succeeded / Failed / Skipped / Total] 117 / 664 / 14 / 795:  80%|███████▉  | 795/1000 [1:06:53<17:15,  5.05s/it][Succeeded / Failed / Skipped / Total] 117 / 664 / 14 / 795:  80%|███████▉  | 796/1000 [1:06:56<17:09,  5.05s/it][Succeeded / Failed / Skipped / Total] 117 / 665 / 14 / 796:  80%|███████▉  | 796/1000 [1:06:56<17:09,  5.05s/it][Succeeded / Failed / Skipped / Total] 117 / 665 / 14 / 796:  80%|███████▉  | 797/1000 [1:06:56<17:03,  5.04s/it][Succeeded / Failed / Skipped / Total] 117 / 666 / 14 / 797:  80%|███████▉  | 797/1000 [1:06:56<17:03,  5.04s/it][Succeeded / Failed / Skipped / Total] 117 / 666 / 14 / 797:  80%|███████▉  | 798/1000 [1:07:02<16:58,  5.04s/it][Succeeded / Failed / Skipped / Total] 117 / 667 / 14 / 798:  80%|███████▉  | 798/1000 [1:07:02<16:58,  5.04s/it][Succeeded / Failed / Skipped / Total] 117 / 667 / 14 / 798:  80%|███████▉  | 799/1000 [1:07:18<16:55,  5.05s/it]--------------------------------------------- Result 793 ---------------------------------------------
Stores the current context path in the request context . --> [[[FAILED]]]

[[[[Adv]]]]: public static void storeContextPath ( final PageContext pageContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest [[request]] = ( HttpServletRequest ) pageContext . getRequest ( ) ; [[request]] . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void storeContextPath ( final PageContext pageContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest [[requirement]] = ( HttpServletRequest ) pageContext . getRequest ( ) ; [[requirement]] . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 794 ---------------------------------------------
Stores the context path in the servlet context . --> [[[FAILED]]]

[[[[Adv]]]]: public static void storeContextPath ( final ServletContext servletContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( servletContext ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void storeContextPath ( final ServletContext servletContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( servletContext ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 795 ---------------------------------------------
Prepares response . --> [[[FAILED]]]

[[[[Adv]]]]: public static void prepareResponse ( final HttpServletResponse [[response]] , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String [[extension]] = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( [[extension]] ) ; } if ( mimeType != null ) { [[response]] . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { [[response]] . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void prepareResponse ( final HttpServletResponse [[backlash]] , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String [[hint]] = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( [[hint]] ) ; } if ( mimeType != null ) { [[backlash]] . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { [[backlash]] . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 796 ---------------------------------------------
Prepare an array of parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [ ] prepareParameters ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int [[total]] = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == [[total]] ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] prepareParameters ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int [[composite]] = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == [[composite]] ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 797 ---------------------------------------------
Copies all parameters from the given servlet request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void copyParamsToAttributes ( final HttpServletRequest servletRequest , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String paramName = ( String ) paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( paramName , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void copyParamsToAttributes ( final HttpServletRequest servletRequest , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String paramName = ( String ) paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues == null ) { continue ; } servletRequest . setAttribute ( paramName , paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 798 ---------------------------------------------
Invokes a tag . --> [[[FAILED]]]

[[[[Adv]]]]: public static void invokeBody ( final JspFragment [[body]] ) throws JspException { if ( [[body]] == null ) { return ; } try { [[body]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void invokeBody ( final JspFragment [[object]] ) throws JspException { if ( [[object]] == null ) { return ; } try { [[object]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 799 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 117 / 668 / 14 / 799:  80%|███████▉  | 799/1000 [1:07:18<16:55,  5.05s/it][Succeeded / Failed / Skipped / Total] 117 / 668 / 14 / 799:  80%|████████  | 800/1000 [1:07:34<16:53,  5.07s/it][Succeeded / Failed / Skipped / Total] 117 / 669 / 14 / 800:  80%|████████  | 800/1000 [1:07:34<16:53,  5.07s/it][Succeeded / Failed / Skipped / Total] 117 / 669 / 14 / 800:  80%|████████  | 801/1000 [1:07:34<16:47,  5.06s/it][Succeeded / Failed / Skipped / Total] 117 / 670 / 14 / 801:  80%|████████  | 801/1000 [1:07:34<16:47,  5.06s/it][Succeeded / Failed / Skipped / Total] 117 / 670 / 14 / 801:  80%|████████  | 802/1000 [1:07:35<16:41,  5.06s/it][Succeeded / Failed / Skipped / Total] 117 / 671 / 14 / 802:  80%|████████  | 802/1000 [1:07:35<16:41,  5.06s/it][Succeeded / Failed / Skipped / Total] 117 / 671 / 14 / 802:  80%|████████  | 803/1000 [1:07:35<16:34,  5.05s/it][Succeeded / Failed / Skipped / Total] 117 / 672 / 14 / 803:  80%|████████  | 803/1000 [1:07:35<16:34,  5.05s/it][Succeeded / Failed / Skipped / Total] 117 / 672 / 14 / 803:  80%|████████  | 804/1000 [1:07:35<16:28,  5.04s/it][Succeeded / Failed / Skipped / Total] 117 / 673 / 14 / 804:  80%|████████  | 804/1000 [1:07:35<16:28,  5.04s/it][Succeeded / Failed / Skipped / Total] 117 / 673 / 14 / 804:  80%|████████  | 805/1000 [1:07:35<16:22,  5.04s/it][Succeeded / Failed / Skipped / Total] 117 / 674 / 14 / 805:  80%|████████  | 805/1000 [1:07:35<16:22,  5.04s/it][Succeeded / Failed / Skipped / Total] 117 / 674 / 14 / 805:  81%|████████  | 806/1000 [1:07:48<16:19,  5.05s/it][Succeeded / Failed / Skipped / Total] 117 / 675 / 14 / 806:  81%|████████  | 806/1000 [1:07:48<16:19,  5.05s/it][Succeeded / Failed / Skipped / Total] 117 / 675 / 14 / 806:  81%|████████  | 807/1000 [1:08:35<16:24,  5.10s/it][Succeeded / Failed / Skipped / Total] 117 / 676 / 14 / 807:  81%|████████  | 807/1000 [1:08:35<16:24,  5.10s/it][Succeeded / Failed / Skipped / Total] 117 / 676 / 14 / 807:  81%|████████  | 808/1000 [1:09:19<16:28,  5.15s/it]Check if a parameter is a GET request parameter --> [[[FAILED]]]

[[[[Adv]]]]: public boolean isGetParameter ( final HttpServletRequest [[request]] , String [[name]] ) { [[name]] = URLCoder . encodeQueryParam ( [[name]] ) + ' ' ; String [[query]] = [[request]] . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( [[query]] , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( [[name]] ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean isGetParameter ( final HttpServletRequest [[necessary]] , String [[address]] ) { [[address]] = URLCoder . encodeQueryParam ( [[address]] ) + ' ' ; String [[enquiry]] = [[necessary]] . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( [[enquiry]] , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( [[address]] ) ) { return "True" == "True" ; } } return "False" != "False" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 800 ---------------------------------------------
Renders the given fragment . --> [[[FAILED]]]

[[[[Adv]]]]: public static char [ ] renderBody ( final JspFragment [[body]] ) throws JspException { FastCharArrayWriter [[writer]] = new FastCharArrayWriter ( ) ; invokeBody ( [[body]] , [[writer]] ) ; return [[writer]] . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] renderBody ( final JspFragment [[bosom]] ) throws JspException { FastCharArrayWriter [[author]] = new FastCharArrayWriter ( ) ; invokeBody ( [[bosom]] , [[author]] ) ; return [[author]] . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 801 ---------------------------------------------
Invoke init methods on the bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: public void invokeInitMethods ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void invokeInitMethods ( final InitMethodInvocationStrategy invocationStrategy ) { for ( final InitMethodPoint initMethod : beanDefinition . initMethodPoints ( ) ) { if ( invocationStrategy != initMethod . invocationStrategy ) { continue ; } try { initMethod . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + initMethod , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 802 ---------------------------------------------
Call destroy methods . --> [[[FAILED]]]

[[[[Adv]]]]: public void callDestroyMethods ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void callDestroyMethods ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 803 ---------------------------------------------
Creates a new bean instance . --> [[[FAILED]]]

[[[[Adv]]]]: public Object newBeanInstance ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object newBeanInstance ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int paramNo = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ paramNo ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 804 ---------------------------------------------
Inject parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public void injectParams ( final ParamManager paramManager , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void injectParams ( final ParamManager paramManager , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 805 ---------------------------------------------
Rewrite the path . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest servletRequest , final String actionPath , final String httpMethod ) { return actionPath ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest servletRequest , final String actionPath , final String httpMethod ) { return actionPath ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 806 ---------------------------------------------
Renders the given fragment . --> [[[FAILED]]]

[[[[Adv]]]]: public static String renderBodyToString ( final JspFragment [[body]] ) throws JspException { char [ ] [[result]] = renderBody ( [[body]] ) ; return new String ( [[result]] ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String renderBodyToString ( final JspFragment [[behind]] ) throws JspException { char [ ] [[fruit]] = renderBody ( [[behind]] ) ; return new String ( [[fruit]] ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 807 ---------------------------------------------
Adds the header . --> [[[FAILED]]]

[[[[Adv]]]]: public void addHeader ( final String [[name]] , final String [[value]] ) { List < String > valuesList = super . getAll ( [[name]] ) ; if ( valuesList . isEmpty ( ) ) { super . add ( [[name]] , [[value]] ) ; return ; } super . remove ( [[name]] ) ; valuesList . add ( [[value]] ) ; super . addAll ( [[name]] , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void addHeader ( final String [[john]] , final String [[bulk]] ) { List < String > valuesList = super . getAll ( [[john]] ) ; if ( valuesList . isEmpty ( ) ) { super . add ( [[john]] , [[bulk]] ) ; return ; } super . remove ( [[john]] ) ; valuesList . add ( [[bulk]] ) ; super . addAll ( [[john]] , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 808 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 118 / 676 / 14 / 808:  81%|████████  | 808/1000 [1:09:19<16:28,  5.15s/it][Succeeded / Failed / Skipped / Total] 118 / 676 / 14 / 808:  81%|████████  | 809/1000 [1:09:49<16:29,  5.18s/it][Succeeded / Failed / Skipped / Total] 119 / 676 / 14 / 809:  81%|████████  | 809/1000 [1:09:49<16:29,  5.18s/it][Succeeded / Failed / Skipped / Total] 119 / 676 / 14 / 809:  81%|████████  | 810/1000 [1:11:50<16:51,  5.32s/it][Succeeded / Failed / Skipped / Total] 119 / 677 / 14 / 810:  81%|████████  | 810/1000 [1:11:50<16:51,  5.32s/it][Succeeded / Failed / Skipped / Total] 119 / 677 / 14 / 810:  81%|████████  | 811/1000 [1:11:58<16:46,  5.32s/it][Succeeded / Failed / Skipped / Total] 120 / 677 / 14 / 811:  81%|████████  | 811/1000 [1:11:58<16:46,  5.32s/it][Succeeded / Failed / Skipped / Total] 120 / 677 / 14 / 811:  81%|████████  | 812/1000 [1:11:59<16:40,  5.32s/it][Succeeded / Failed / Skipped / Total] 120 / 678 / 14 / 812:  81%|████████  | 812/1000 [1:11:59<16:40,  5.32s/it][Succeeded / Failed / Skipped / Total] 120 / 678 / 14 / 812:  81%|████████▏ | 813/1000 [1:12:05<16:34,  5.32s/it][Succeeded / Failed / Skipped / Total] 121 / 678 / 14 / 813:  81%|████████▏ | 813/1000 [1:12:05<16:34,  5.32s/it][Succeeded / Failed / Skipped / Total] 121 / 678 / 14 / 813:  81%|████████▏ | 814/1000 [1:12:12<16:29,  5.32s/it][Succeeded / Failed / Skipped / Total] 122 / 678 / 14 / 814:  81%|████████▏ | 814/1000 [1:12:12<16:29,  5.32s/it][Succeeded / Failed / Skipped / Total] 122 / 678 / 14 / 814:  82%|████████▏ | 815/1000 [1:12:13<16:23,  5.32s/it]Add a base property to the base properties . --> Puts baseProperties into the properties --> Socre: 1.0

[[[[Adv]]]]: public void putBaseProperty ( final String [[key]] , final String [[value]] , final boolean append ) { put ( null , baseProperties , [[key]] , [[value]] , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void putBaseProperty ( final String [[crux]] , final String [[critique]] , final boolean append ) { put ( null , baseProperties , [[crux]] , [[critique]] , append ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 809 ---------------------------------------------
Puts a value into the properties map . --> Convenience method to put a pump . --> Socre: 1.0

[[[[Adv]]]]: protected void put ( final String [[profile]] , final Map < String , PropsEntry > [[map]] , final String [[key]] , final String [[value]] , final boolean append ) { String realValue = [[value]] ; if ( append || appendDuplicateProps ) { PropsEntry pv = [[map]] . get ( [[key]] ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( [[key]] , realValue , [[profile]] , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void put ( final String [[repute]] , final Map < String , PropsEntry > [[draw]] , final String [[valve]] , final String [[amount]] , final boolean append ) { String realValue = [[amount]] ; if ( append || appendDuplicateProps ) { PropsEntry pv = [[draw]] . get ( [[valve]] ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( [[valve]] , realValue , [[repute]] , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 810 ---------------------------------------------
Get a profile property --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntry getProfileProperty ( final String [[profile]] , final String [[key]] ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( [[profile]] ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( [[key]] ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry getProfileProperty ( final String [[framework]] , final String [[major]] ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( [[framework]] ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( [[major]] ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 811 ---------------------------------------------
Resolves the given string using the given profiles . --> Resolve the given String to a String --> Socre: 1.0

[[[[Adv]]]]: public String resolveMacros ( String value , final String ... [[profiles]] ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String resolveMacros ( String value , final String ... [[fabrics]] ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 812 ---------------------------------------------
Register a method injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteMethodInjectionPoint ( final String beanName , final String methodName , final Class [ ] [[arguments]] , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method [[method]] = null ; if ( [[arguments]] == null ) { MethodDescriptor [ ] [[methods]] = cd . getAllMethodDescriptors ( methodName ) ; if ( [[methods]] != null && [[methods]] . length > 0 ) { if ( [[methods]] . length > 1 ) { throw new PetiteException ( [[methods]] . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } [[method]] = [[methods]] [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , [[arguments]] , "True" == "True" ) ; if ( md != null ) { [[method]] = md . getMethod ( ) ; } } if ( [[method]] == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] [[ref]] = referencesResolver . resolveReferenceFromValues ( [[method]] , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( [[method]] , [[ref]] ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void registerPetiteMethodInjectionPoint ( final String beanName , final String methodName , final Class [ ] [[squabbles]] , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method [[path]] = null ; if ( [[squabbles]] == null ) { MethodDescriptor [ ] [[arts]] = cd . getAllMethodDescriptors ( methodName ) ; if ( [[arts]] != null && [[arts]] . length > 0 ) { if ( [[arts]] . length > 1 ) { throw new PetiteException ( [[arts]] . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } [[path]] = [[arts]] [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , [[squabbles]] , "True" == "True" ) ; if ( md != null ) { [[path]] = md . getMethod ( ) ; } } if ( [[path]] == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] [[umpire]] = referencesResolver . resolveReferenceFromValues ( [[path]] , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( [[path]] , [[umpire]] ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 813 ---------------------------------------------
Read a stream of four bytes --> Read stream toword --> Socre: 1.0

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] offp ) { int i ; int [[word]] = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { [[word]] = ( [[word]] << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return [[word]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] offp ) { int i ; int [[connotation]] = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { [[connotation]] = ( [[connotation]] << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return [[connotation]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 814 ---------------------------------------------
Extracts a map of profiles from the specified profiles . --> Extract the ration from a set of profiles --> Socre: 1.0

[[[[Adv]]]]: public Map extract ( Map [[target]] , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( [[target]] == null ) { [[target]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map extract ( Map [[ration]] , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( [[ration]] == null ) { [[ration]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 815 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 122 / 679 / 14 / 815:  82%|████████▏ | 815/1000 [1:12:13<16:23,  5.32s/it][Succeeded / Failed / Skipped / Total] 122 / 679 / 14 / 815:  82%|████████▏ | 816/1000 [1:12:16<16:17,  5.31s/it][Succeeded / Failed / Skipped / Total] 122 / 680 / 14 / 816:  82%|████████▏ | 816/1000 [1:12:16<16:17,  5.31s/it][Succeeded / Failed / Skipped / Total] 122 / 680 / 14 / 816:  82%|████████▏ | 817/1000 [1:12:19<16:11,  5.31s/it][Succeeded / Failed / Skipped / Total] 122 / 681 / 14 / 817:  82%|████████▏ | 817/1000 [1:12:19<16:11,  5.31s/it][Succeeded / Failed / Skipped / Total] 122 / 681 / 14 / 817:  82%|████████▏ | 818/1000 [1:12:19<16:05,  5.31s/it][Succeeded / Failed / Skipped / Total] 122 / 682 / 14 / 818:  82%|████████▏ | 818/1000 [1:12:19<16:05,  5.31s/it][Succeeded / Failed / Skipped / Total] 122 / 682 / 14 / 818:  82%|████████▏ | 819/1000 [1:12:19<15:59,  5.30s/it][Succeeded / Failed / Skipped / Total] 122 / 683 / 14 / 819:  82%|████████▏ | 819/1000 [1:12:19<15:59,  5.30s/it][Succeeded / Failed / Skipped / Total] 122 / 683 / 14 / 819:  82%|████████▏ | 820/1000 [1:12:21<15:52,  5.29s/it][Succeeded / Failed / Skipped / Total] 122 / 684 / 14 / 820:  82%|████████▏ | 820/1000 [1:12:21<15:52,  5.29s/it][Succeeded / Failed / Skipped / Total] 122 / 684 / 14 / 820:  82%|████████▏ | 821/1000 [1:12:22<15:46,  5.29s/it][Succeeded / Failed / Skipped / Total] 122 / 685 / 14 / 821:  82%|████████▏ | 821/1000 [1:12:22<15:46,  5.29s/it][Succeeded / Failed / Skipped / Total] 122 / 685 / 14 / 821:  82%|████████▏ | 822/1000 [1:12:23<15:40,  5.28s/it]Checks to see if the given plaintext matches the password . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean checkpw ( String plaintext , String [[hashed]] ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( plaintext , [[hashed]] ) ; hashed_bytes = [[hashed]] . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean checkpw ( String plaintext , String [[opium]] ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( plaintext , [[opium]] ) ; hashed_bytes = [[opium]] . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return "False" != "False" ; } if ( hashed_bytes . length != try_bytes . length ) { return "False" != "False" ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 816 ---------------------------------------------
Copies all boundary characters from the stream to the given output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int copyAll ( final OutputStream out ) throws IOException { int [[count]] = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; [[count]] ++ ; } return [[count]] ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int copyAll ( final OutputStream out ) throws IOException { int [[concealment]] = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; [[concealment]] ++ ; } return [[concealment]] ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 817 ---------------------------------------------
Copies the max bytes from the stream to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int copyMax ( final OutputStream out , final int maxBytes ) throws IOException { int [[count]] = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; [[count]] ++ ; if ( [[count]] == maxBytes ) { return [[count]] ; } } return [[count]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int copyMax ( final OutputStream out , final int maxBytes ) throws IOException { int [[computing]] = 0 ; while ( "True" == "True" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; [[computing]] ++ ; if ( [[computing]] == maxBytes ) { return [[computing]] ; } } return [[computing]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 818 ---------------------------------------------
Parse action configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime parse ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 819 ---------------------------------------------
Resolves the action config . --> [[[FAILED]]]

[[[[Adv]]]]: protected ActionConfig resolveActionConfig ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > annotationType ; if ( annotationValues == null ) { annotationType = Action . class ; } else { annotationType = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig resolveActionConfig ( final ActionAnnotationValues annotationValues ) { final Class < ? extends Annotation > annotationType ; if ( annotationValues == null ) { annotationType = Action . class ; } else { annotationType = annotationValues . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 820 ---------------------------------------------
Detect and register aliases . --> [[[FAILED]]]

[[[[Adv]]]]: protected void detectAndRegisterAlias ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String [[alias]] = parseMethodAlias ( annotationValues ) ; if ( [[alias]] != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( [[alias]] , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void detectAndRegisterAlias ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String [[aliases]] = parseMethodAlias ( annotationValues ) ; if ( [[aliases]] != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( [[aliases]] , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
--------------------------------------------- Result 821 ---------------------------------------------
Reads the interceptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] readActionInterceptors ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] [[result]] = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { [[result]] = interceptedBy . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] readActionInterceptors ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionInterceptor > [ ] [[end]] = null ; InterceptedBy interceptedBy = actionClassOrMethod . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { [[end]] = interceptedBy . value ( ) ; if ( [[end]] . length == 0 ) { [[end]] = null ; } } return [[end]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 822 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 122 / 686 / 14 / 822:  82%|████████▏ | 822/1000 [1:12:23<15:40,  5.28s/it][Succeeded / Failed / Skipped / Total] 122 / 686 / 14 / 822:  82%|████████▏ | 823/1000 [1:12:23<15:34,  5.28s/it][Succeeded / Failed / Skipped / Total] 122 / 687 / 14 / 823:  82%|████████▏ | 823/1000 [1:12:23<15:34,  5.28s/it][Succeeded / Failed / Skipped / Total] 122 / 687 / 14 / 823:  82%|████████▏ | 824/1000 [1:12:24<15:27,  5.27s/it][Succeeded / Failed / Skipped / Total] 122 / 688 / 14 / 824:  82%|████████▏ | 824/1000 [1:12:24<15:27,  5.27s/it][Succeeded / Failed / Skipped / Total] 122 / 688 / 14 / 824:  82%|████████▎ | 825/1000 [1:12:24<15:21,  5.27s/it][Succeeded / Failed / Skipped / Total] 122 / 689 / 14 / 825:  82%|████████▎ | 825/1000 [1:12:24<15:21,  5.27s/it][Succeeded / Failed / Skipped / Total] 122 / 689 / 14 / 825:  83%|████████▎ | 826/1000 [1:12:34<15:17,  5.27s/it][Succeeded / Failed / Skipped / Total] 122 / 690 / 14 / 826:  83%|████████▎ | 826/1000 [1:12:34<15:17,  5.27s/it][Succeeded / Failed / Skipped / Total] 122 / 690 / 14 / 826:  83%|████████▎ | 827/1000 [1:12:35<15:11,  5.27s/it][Succeeded / Failed / Skipped / Total] 122 / 691 / 14 / 827:  83%|████████▎ | 827/1000 [1:12:35<15:11,  5.27s/it][Succeeded / Failed / Skipped / Total] 122 / 691 / 14 / 827:  83%|████████▎ | 828/1000 [1:12:35<15:04,  5.26s/it][Succeeded / Failed / Skipped / Total] 122 / 692 / 14 / 828:  83%|████████▎ | 828/1000 [1:12:35<15:04,  5.26s/it][Succeeded / Failed / Skipped / Total] 122 / 692 / 14 / 828:  83%|████████▎ | 829/1000 [1:14:28<15:21,  5.39s/it][Succeeded / Failed / Skipped / Total] 122 / 693 / 14 / 829:  83%|████████▎ | 829/1000 [1:14:28<15:21,  5.39s/it][Succeeded / Failed / Skipped / Total] 122 / 693 / 14 / 829:  83%|████████▎ | 830/1000 [1:14:28<15:15,  5.38s/it]Reads the filtered filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] readActionFilters ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] [[result]] = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { [[result]] = filteredBy . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] readActionFilters ( final AnnotatedElement actionClassOrMethod ) { Class < ? extends ActionFilter > [ ] [[offspring]] = null ; FilteredBy filteredBy = actionClassOrMethod . getAnnotation ( FilteredBy . class ) ; if ( filteredBy != null ) { [[offspring]] = filteredBy . value ( ) ; if ( [[offspring]] . length == 0 ) { [[offspring]] = null ; } } return [[offspring]] ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 823 ---------------------------------------------
Read package action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] readPackageActionPath ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] readPackageActionPath ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 824 ---------------------------------------------
Reads the action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] readMethodActionPath ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] readMethodActionPath ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 825 ---------------------------------------------
Parses the alias value . --> [[[FAILED]]]

[[[[Adv]]]]: protected String parseMethodAlias ( final ActionAnnotationValues annotationValues ) { String [[alias]] = null ; if ( annotationValues != null ) { [[alias]] = annotationValues . alias ( ) ; } return [[alias]] ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String parseMethodAlias ( final ActionAnnotationValues annotationValues ) { String [[nicknames]] = null ; if ( annotationValues != null ) { [[nicknames]] = annotationValues . alias ( ) ; } return [[nicknames]] ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 826 ---------------------------------------------
Create an action runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime createActionRuntime ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] [[filters]] , final ActionInterceptor [ ] [[interceptors]] , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , [[filters]] , [[interceptors]] , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime createActionRuntime ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] [[screens]] , final ActionInterceptor [ ] [[bombers]] , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , [[screens]] , [[bombers]] , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 827 ---------------------------------------------
Sets the response to the response . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 828 ---------------------------------------------
Apply advice to target class . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > T applyAdvice ( final Class < T > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < T > T applyAdvice ( final Class < T > targetClass ) { Class adviceClass = cache . get ( targetClass ) ; if ( adviceClass == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 829 ---------------------------------------------
Inject target into proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public static void injectTargetIntoProxy ( final Object [[proxy]] , final Object [[target]] ) { Class proxyClass = [[proxy]] . getClass ( ) ; try { Field [[field]] = proxyClass . getField ( "$___target$0" ) ; [[field]] . set ( [[proxy]] , [[target]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void injectTargetIntoProxy ( final Object [[deputy]] , final Object [[clout]] ) { Class proxyClass = [[deputy]] . getClass ( ) ; try { Field [[region]] = proxyClass . getField ( "$___target$0" ) ; [[region]] . set ( [[deputy]] , [[clout]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 830 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 122 / 694 / 14 / 830:  83%|████████▎ | 830/1000 [1:14:28<15:15,  5.38s/it][Succeeded / Failed / Skipped / Total] 122 / 694 / 14 / 830:  83%|████████▎ | 831/1000 [1:14:28<15:08,  5.38s/it][Succeeded / Failed / Skipped / Total] 122 / 695 / 14 / 831:  83%|████████▎ | 831/1000 [1:14:28<15:08,  5.38s/it][Succeeded / Failed / Skipped / Total] 122 / 695 / 14 / 831:  83%|████████▎ | 832/1000 [1:14:29<15:02,  5.37s/it][Succeeded / Failed / Skipped / Total] 122 / 696 / 14 / 832:  83%|████████▎ | 832/1000 [1:14:29<15:02,  5.37s/it][Succeeded / Failed / Skipped / Total] 122 / 696 / 14 / 832:  83%|████████▎ | 833/1000 [1:14:32<14:56,  5.37s/it][Succeeded / Failed / Skipped / Total] 122 / 697 / 14 / 833:  83%|████████▎ | 833/1000 [1:14:32<14:56,  5.37s/it][Succeeded / Failed / Skipped / Total] 122 / 697 / 14 / 833:  83%|████████▎ | 834/1000 [1:14:36<14:51,  5.37s/it][Succeeded / Failed / Skipped / Total] 122 / 698 / 14 / 834:  83%|████████▎ | 834/1000 [1:14:36<14:51,  5.37s/it][Succeeded / Failed / Skipped / Total] 122 / 698 / 14 / 834:  84%|████████▎ | 835/1000 [1:14:42<14:45,  5.37s/it][Succeeded / Failed / Skipped / Total] 122 / 699 / 14 / 835:  84%|████████▎ | 835/1000 [1:14:42<14:45,  5.37s/it][Succeeded / Failed / Skipped / Total] 122 / 699 / 14 / 835:  84%|████████▎ | 836/1000 [1:14:53<14:41,  5.38s/it][Succeeded / Failed / Skipped / Total] 122 / 700 / 14 / 836:  84%|████████▎ | 836/1000 [1:14:53<14:41,  5.38s/it][Succeeded / Failed / Skipped / Total] 122 / 700 / 14 / 836:  84%|████████▎ | 837/1000 [1:14:58<14:35,  5.37s/it][Succeeded / Failed / Skipped / Total] 122 / 701 / 14 / 837:  84%|████████▎ | 837/1000 [1:14:58<14:35,  5.37s/it][Succeeded / Failed / Skipped / Total] 122 / 701 / 14 / 837:  84%|████████▍ | 838/1000 [1:14:58<14:29,  5.37s/it][Succeeded / Failed / Skipped / Total] 122 / 702 / 14 / 838:  84%|████████▍ | 838/1000 [1:14:58<14:29,  5.37s/it][Succeeded / Failed / Skipped / Total] 122 / 702 / 14 / 838:  84%|████████▍ | 839/1000 [1:14:58<14:23,  5.36s/it][Succeeded / Failed / Skipped / Total] 122 / 703 / 14 / 839:  84%|████████▍ | 839/1000 [1:14:58<14:23,  5.36s/it][Succeeded / Failed / Skipped / Total] 122 / 703 / 14 / 839:  84%|████████▍ | 840/1000 [1:14:59<14:16,  5.36s/it]Visits an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public AnnotationVisitor visitAnnotation ( final String descriptor , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( descriptor , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor visitAnnotation ( final String descriptor , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( descriptor , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 831 ---------------------------------------------
Resolve real name . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveRealName ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( jsonIndex == - 1 ) { return jsonName ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String resolveRealName ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( jsonIndex == - 1 ) { return jsonName ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 832 ---------------------------------------------
Resolves real name . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveJsonName ( final String realName ) { if ( realNames == null ) { return realName ; } int realIndex = ArraysUtil . indexOf ( realNames , realName ) ; if ( realIndex == - 1 ) { return realName ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String resolveJsonName ( final String realName ) { if ( realNames == null ) { return realName ; } int realIndex = ArraysUtil . indexOf ( realNames , realName ) ; if ( realIndex == - 1 ) { return realName ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 833 ---------------------------------------------
Looks up type data for a given type . --> [[[FAILED]]]

[[[[Adv]]]]: public TypeData lookupTypeData ( final Class [[type]] ) { TypeData typeData = typeDataMap . get ( [[type]] ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( [[type]] ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData lookupTypeData ( final Class [[typewriter]] ) { TypeData typeData = typeDataMap . get ( [[typewriter]] ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( [[typewriter]] ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( [[typewriter]] ) ; typeDataMap . put ( [[typewriter]] , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 834 ---------------------------------------------
Looks up the type data for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData _lookupTypeData ( final Class [[type]] ) { TypeData typeData = typeDataMap . get ( [[type]] ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData _lookupTypeData ( final Class [[typewriter]] ) { TypeData typeData = typeDataMap . get ( [[typewriter]] ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( [[typewriter]] ) ; typeDataMap . put ( [[typewriter]] , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 835 ---------------------------------------------
Find type data . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData findSubclassTypeData ( final Class [[type]] ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( [[type]] . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData findSubclassTypeData ( final Class [[block]] ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( [[block]] . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 836 ---------------------------------------------
Resolves a Json name . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveJsonName ( final Class [[type]] , final String [[name]] ) { TypeData typeData = lookupTypeData ( [[type]] ) ; return typeData . resolveJsonName ( [[name]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String resolveJsonName ( final Class [[sort]] , final String [[james]] ) { TypeData typeData = lookupTypeData ( [[sort]] ) ; return typeData . resolveJsonName ( [[james]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 837 ---------------------------------------------
Resolves the real name for the given JSON name . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveRealName ( final Class [[type]] , final String jsonName ) { TypeData typeData = lookupTypeData ( [[type]] ) ; return typeData . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String resolveRealName ( final Class [[plate]] , final String jsonName ) { TypeData typeData = lookupTypeData ( [[plate]] ) ; return typeData . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 838 ---------------------------------------------
Get the file content --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] getFileContent ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] getFileContent ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 839 ---------------------------------------------
Copy the bootstrap methods . --> [[[FAILED]]]

[[[[Adv]]]]: private void copyBootstrapMethods ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void copyBootstrapMethods ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 840 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 122 / 704 / 14 / 840:  84%|████████▍ | 840/1000 [1:14:59<14:16,  5.36s/it][Succeeded / Failed / Skipped / Total] 122 / 704 / 14 / 840:  84%|████████▍ | 841/1000 [1:15:00<14:10,  5.35s/it][Succeeded / Failed / Skipped / Total] 122 / 705 / 14 / 841:  84%|████████▍ | 841/1000 [1:15:00<14:10,  5.35s/it][Succeeded / Failed / Skipped / Total] 122 / 705 / 14 / 841:  84%|████████▍ | 842/1000 [1:15:02<14:04,  5.35s/it][Succeeded / Failed / Skipped / Total] 122 / 706 / 14 / 842:  84%|████████▍ | 842/1000 [1:15:02<14:04,  5.35s/it][Succeeded / Failed / Skipped / Total] 122 / 706 / 14 / 842:  84%|████████▍ | 843/1000 [1:15:16<14:01,  5.36s/it][Succeeded / Failed / Skipped / Total] 122 / 707 / 14 / 843:  84%|████████▍ | 843/1000 [1:15:16<14:01,  5.36s/it][Succeeded / Failed / Skipped / Total] 122 / 707 / 14 / 843:  84%|████████▍ | 844/1000 [1:16:28<14:08,  5.44s/it][Succeeded / Failed / Skipped / Total] 122 / 708 / 14 / 844:  84%|████████▍ | 844/1000 [1:16:28<14:08,  5.44s/it][Succeeded / Failed / Skipped / Total] 122 / 708 / 14 / 844:  84%|████████▍ | 845/1000 [1:18:08<14:20,  5.55s/it][Succeeded / Failed / Skipped / Total] 122 / 709 / 14 / 845:  84%|████████▍ | 845/1000 [1:18:08<14:20,  5.55s/it][Succeeded / Failed / Skipped / Total] 122 / 709 / 14 / 845:  85%|████████▍ | 846/1000 [1:18:44<14:20,  5.58s/it][Succeeded / Failed / Skipped / Total] 122 / 710 / 14 / 846:  85%|████████▍ | 846/1000 [1:18:44<14:20,  5.58s/it][Succeeded / Failed / Skipped / Total] 122 / 710 / 14 / 846:  85%|████████▍ | 847/1000 [1:20:48<14:35,  5.72s/it]Sets the major version and class . --> [[[FAILED]]]

[[[[Adv]]]]: int setMajorVersionAndClassName ( final int majorVersion , final String className ) { this . majorVersion = majorVersion ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int setMajorVersionAndClassName ( final int majorVersion , final String className ) { this . majorVersion = majorVersion ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 841 ---------------------------------------------
Puts a constant pool entry into the given byte vector . --> [[[FAILED]]]

[[[[Adv]]]]: void putConstantPool ( final ByteVector [[output]] ) { [[output]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void putConstantPool ( final ByteVector [[input]] ) { [[input]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 842 ---------------------------------------------
Puts the bootstrap methods . --> [[[FAILED]]]

[[[[Adv]]]]: void putBootstrapMethods ( final ByteVector [[output]] ) { if ( bootstrapMethods != null ) { [[output]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void putBootstrapMethods ( final ByteVector [[input]] ) { if ( bootstrapMethods != null ) { [[input]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 843 ---------------------------------------------
Adds a constant fieldref with the given name and descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantFieldref ( final String [[owner]] , final String [[name]] , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , [[owner]] , [[name]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantFieldref ( final String [[thrall]] , final String [[brand]] , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , [[thrall]] , [[brand]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 844 ---------------------------------------------
Gets all cookies with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookie [ ] getAllCookies ( final HttpServletRequest [[request]] , final String cookieName ) { Cookie [ ] [[cookies]] = [[request]] . getCookies ( ) ; if ( [[cookies]] == null ) { return null ; } ArrayList < Cookie > [[list]] = new ArrayList <> ( [[cookies]] . length ) ; for ( Cookie [[cookie]] : [[cookies]] ) { if ( [[cookie]] . getName ( ) . equals ( cookieName ) ) { [[list]] . add ( [[cookie]] ) ; } } if ( [[list]] . isEmpty ( ) ) { return null ; } return [[list]] . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] getAllCookies ( final HttpServletRequest [[appeal]] , final String cookieName ) { Cookie [ ] [[hotcakes]] = [[appeal]] . getCookies ( ) ; if ( [[hotcakes]] == null ) { return null ; } ArrayList < Cookie > [[catalogue]] = new ArrayList <> ( [[hotcakes]] . length ) ; for ( Cookie [[tofu]] : [[hotcakes]] ) { if ( [[tofu]] . getName ( ) . equals ( cookieName ) ) { [[catalogue]] . add ( [[tofu]] ) ; } } if ( [[catalogue]] . isEmpty ( ) ) { return null ; } return [[catalogue]] . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 845 ---------------------------------------------
Adds a constant ref to this symbol . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantMethodref ( final String [[owner]] , final String [[name]] , final String descriptor , final boolean isInterface ) { int [[tag]] = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( [[tag]] , [[owner]] , [[name]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantMethodref ( final String [[holder]] , final String [[john]] , final String descriptor , final boolean isInterface ) { int [[totem]] = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( [[totem]] , [[holder]] , [[john]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 846 ---------------------------------------------
Puts a profile property into the profile . --> [[[FAILED]]]

[[[[Adv]]]]: public void putProfileProperty ( final String [[key]] , final String [[value]] , final String [[profile]] , final boolean append ) { Map < String , PropsEntry > [[map]] = profileProperties . computeIfAbsent ( [[profile]] , k -> new HashMap <> ( ) ) ; put ( [[profile]] , [[map]] , [[key]] , [[value]] , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void putProfileProperty ( final String [[gadget]] , final String [[dollop]] , final String [[skeleton]] , final boolean append ) { Map < String , PropsEntry > [[outline]] = profileProperties . computeIfAbsent ( [[skeleton]] , k -> new HashMap <> ( ) ) ; put ( [[skeleton]] , [[outline]] , [[gadget]] , [[dollop]] , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 847 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 122 / 711 / 14 / 847:  85%|████████▍ | 847/1000 [1:20:48<14:35,  5.72s/it][Succeeded / Failed / Skipped / Total] 122 / 711 / 14 / 847:  85%|████████▍ | 848/1000 [1:22:00<14:42,  5.80s/it][Succeeded / Failed / Skipped / Total] 122 / 712 / 14 / 848:  85%|████████▍ | 848/1000 [1:22:00<14:42,  5.80s/it][Succeeded / Failed / Skipped / Total] 122 / 712 / 14 / 848:  85%|████████▍ | 849/1000 [1:22:38<14:41,  5.84s/it][Succeeded / Failed / Skipped / Total] 122 / 713 / 14 / 849:  85%|████████▍ | 849/1000 [1:22:38<14:41,  5.84s/it][Succeeded / Failed / Skipped / Total] 122 / 713 / 14 / 849:  85%|████████▌ | 850/1000 [1:24:16<14:52,  5.95s/it][Succeeded / Failed / Skipped / Total] 122 / 714 / 14 / 850:  85%|████████▌ | 850/1000 [1:24:16<14:52,  5.95s/it][Succeeded / Failed / Skipped / Total] 122 / 714 / 14 / 850:  85%|████████▌ | 851/1000 [1:26:28<15:08,  6.10s/it][Succeeded / Failed / Skipped / Total] 122 / 715 / 14 / 851:  85%|████████▌ | 851/1000 [1:26:28<15:08,  6.10s/it][Succeeded / Failed / Skipped / Total] 122 / 715 / 14 / 851:  85%|████████▌ | 852/1000 [1:26:52<15:05,  6.12s/it][Succeeded / Failed / Skipped / Total] 122 / 716 / 14 / 852:  85%|████████▌ | 852/1000 [1:26:52<15:05,  6.12s/it][Succeeded / Failed / Skipped / Total] 122 / 716 / 14 / 852:  85%|████████▌ | 853/1000 [1:27:38<15:06,  6.16s/it]Calculates the hash for a password . --> [[[FAILED]]]

[[[[Adv]]]]: public static String hashpw ( String password , String [[salt]] ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , [[hashed]] ; char [[minor]] = ( char ) 0 ; int [[rounds]] , off ; StringBuffer rs = new StringBuffer ( ) ; if ( [[salt]] . charAt ( 0 ) != ' ' || [[salt]] . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( [[salt]] . charAt ( 2 ) == ' ' ) { off = 3 ; } else { [[minor]] = [[salt]] . charAt ( 2 ) ; if ( [[minor]] != ' ' || [[salt]] . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String hashpw ( String password , String [[fry]] ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , [[cannabis]] ; char [[rondo]] = ( char ) 0 ; int [[brands]] , off ; StringBuffer rs = new StringBuffer ( ) ; if ( [[fry]] . charAt ( 0 ) != ' ' || [[fry]] . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( [[fry]] . charAt ( 2 ) == ' ' ) { off = 3 ; } else { [[rondo]] = [[fry]] . charAt ( 2 ) ; if ( [[rondo]] != ' ' || [[fry]] . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 848 ---------------------------------------------
Adds a constant reference . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry addConstantMemberReference ( final int [[tag]] , final String [[owner]] , final String [[name]] , final String descriptor ) { int hashCode = hash ( [[tag]] , [[owner]] , [[name]] , descriptor ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == [[tag]] && [[entry]] . hashCode == hashCode && [[entry]] . owner . equals ( [[owner]] ) && [[entry]] . name . equals ( [[name]] ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( [[tag]] , addConstantClass ( [[owner]] ) . index , addConstantNameAndType ( [[name]] , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , [[owner]] , [[name]] , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry addConstantMemberReference ( final int [[mark]] , final String [[master]] , final String [[address]] , final String descriptor ) { int hashCode = hash ( [[mark]] , [[master]] , [[address]] , descriptor ) ; Entry [[gateway]] = get ( hashCode ) ; while ( [[gateway]] != null ) { if ( [[gateway]] . tag == [[mark]] && [[gateway]] . hashCode == hashCode && [[gateway]] . owner . equals ( [[master]] ) && [[gateway]] . name . equals ( [[address]] ) && [[gateway]] . value . equals ( descriptor ) ) { return [[gateway]] ; } [[gateway]] = [[gateway]] . next ; } constantPool . put122 ( [[mark]] , addConstantClass ( [[master]] ) . index , addConstantNameAndType ( [[address]] , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[mark]] , [[master]] , [[address]] , descriptor , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 849 ---------------------------------------------
Adds a constant or float constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantIntegerOrFloat ( final int [[tag]] , final int [[value]] ) { int hashCode = hash ( [[tag]] , [[value]] ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == [[tag]] && [[entry]] . hashCode == hashCode && [[entry]] . data == [[value]] ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . putByte ( [[tag]] ) . putInt ( [[value]] ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantIntegerOrFloat ( final int [[conveyance]] , final int [[amount]] ) { int hashCode = hash ( [[conveyance]] , [[amount]] ) ; Entry [[penetration]] = get ( hashCode ) ; while ( [[penetration]] != null ) { if ( [[penetration]] . tag == [[conveyance]] && [[penetration]] . hashCode == hashCode && [[penetration]] . data == [[amount]] ) { return [[penetration]] ; } [[penetration]] = [[penetration]] . next ; } constantPool . putByte ( [[conveyance]] ) . putInt ( [[amount]] ) ; return put ( new Entry ( constantPoolCount ++ , [[conveyance]] , [[amount]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 850 ---------------------------------------------
Adds a constant or float or float constant . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantIntegerOrFloat ( final int [[index]] , final int [[tag]] , final int [[value]] ) { add ( new Entry ( [[index]] , [[tag]] , [[value]] , hash ( [[tag]] , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantIntegerOrFloat ( final int [[classification]] , final int [[insignia]] , final int [[capacity]] ) { add ( new Entry ( [[classification]] , [[insignia]] , [[capacity]] , hash ( [[insignia]] , [[capacity]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 851 ---------------------------------------------
Adds a constant member reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantMemberReference ( final int [[index]] , final int [[tag]] , final String owner , final String [[name]] , final String descriptor ) { add ( new Entry ( [[index]] , [[tag]] , owner , [[name]] , descriptor , 0 , hash ( [[tag]] , owner , [[name]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantMemberReference ( final int [[calendar]] , final int [[insignia]] , final String owner , final String [[title]] , final String descriptor ) { add ( new Entry ( [[calendar]] , [[insignia]] , owner , [[title]] , descriptor , 0 , hash ( [[insignia]] , owner , [[title]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 852 ---------------------------------------------
Add constant long or double . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantLongOrDouble ( final int [[index]] , final int [[tag]] , final long [[value]] ) { add ( new Entry ( [[index]] , [[tag]] , [[value]] , hash ( [[tag]] , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantLongOrDouble ( final int [[calendar]] , final int [[plate]] , final long [[amount]] ) { add ( new Entry ( [[calendar]] , [[plate]] , [[amount]] , hash ( [[plate]] , [[amount]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 853 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 122 / 717 / 14 / 853:  85%|████████▌ | 853/1000 [1:27:38<15:06,  6.16s/it][Succeeded / Failed / Skipped / Total] 122 / 717 / 14 / 853:  85%|████████▌ | 854/1000 [1:28:27<15:07,  6.22s/it][Succeeded / Failed / Skipped / Total] 122 / 718 / 14 / 854:  85%|████████▌ | 854/1000 [1:28:27<15:07,  6.22s/it][Succeeded / Failed / Skipped / Total] 122 / 718 / 14 / 854:  86%|████████▌ | 855/1000 [1:32:53<15:45,  6.52s/it][Succeeded / Failed / Skipped / Total] 122 / 719 / 14 / 855:  86%|████████▌ | 855/1000 [1:32:53<15:45,  6.52s/it][Succeeded / Failed / Skipped / Total] 122 / 719 / 14 / 855:  86%|████████▌ | 856/1000 [1:35:19<16:02,  6.68s/it][Succeeded / Failed / Skipped / Total] 122 / 720 / 14 / 856:  86%|████████▌ | 856/1000 [1:35:19<16:02,  6.68s/it][Succeeded / Failed / Skipped / Total] 122 / 720 / 14 / 856:  86%|████████▌ | 857/1000 [1:35:22<15:54,  6.68s/it][Succeeded / Failed / Skipped / Total] 122 / 721 / 14 / 857:  86%|████████▌ | 857/1000 [1:35:22<15:54,  6.68s/it][Succeeded / Failed / Skipped / Total] 122 / 721 / 14 / 857:  86%|████████▌ | 858/1000 [1:35:26<15:47,  6.67s/it]Adds a UTF - 8 string constant . --> [[[FAILED]]]

[[[[Adv]]]]: int addConstantUtf8 ( final String [[value]] ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , [[value]] ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == Symbol . CONSTANT_UTF8_TAG && [[entry]] . hashCode == hashCode && [[entry]] . value . equals ( [[value]] ) ) { return [[entry]] . index ; } [[entry]] = [[entry]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( [[value]] ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , [[value]] , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int addConstantUtf8 ( final String [[amount]] ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , [[amount]] ) ; Entry [[article]] = get ( hashCode ) ; while ( [[article]] != null ) { if ( [[article]] . tag == Symbol . CONSTANT_UTF8_TAG && [[article]] . hashCode == hashCode && [[article]] . value . equals ( [[amount]] ) ) { return [[article]] . index ; } [[article]] = [[article]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( [[amount]] ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , [[amount]] , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 854 ---------------------------------------------
Adds a UTF - 8 encoded constant . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantUtf8 ( final int [[index]] , final String [[value]] ) { add ( new Entry ( [[index]] , Symbol . CONSTANT_UTF8_TAG , [[value]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantUtf8 ( final int [[continuum]] , final String [[bother]] ) { add ( new Entry ( [[continuum]] , Symbol . CONSTANT_UTF8_TAG , [[bother]] , hash ( Symbol . CONSTANT_UTF8_TAG , [[bother]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 855 ---------------------------------------------
Adds a constant name and type and descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: int addConstantNameAndType ( final String [[name]] , final String descriptor ) { final int [[tag]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( [[tag]] , [[name]] , descriptor ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == [[tag]] && [[entry]] . hashCode == hashCode && [[entry]] . name . equals ( [[name]] ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] . index ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( [[tag]] , addConstantUtf8 ( [[name]] ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , [[name]] , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int addConstantNameAndType ( final String [[edward]] , final String descriptor ) { final int [[insignia]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int hashCode = hash ( [[insignia]] , [[edward]] , descriptor ) ; Entry [[admission]] = get ( hashCode ) ; while ( [[admission]] != null ) { if ( [[admission]] . tag == [[insignia]] && [[admission]] . hashCode == hashCode && [[admission]] . name . equals ( [[edward]] ) && [[admission]] . value . equals ( descriptor ) ) { return [[admission]] . index ; } [[admission]] = [[admission]] . next ; } constantPool . put122 ( [[insignia]] , addConstantUtf8 ( [[edward]] ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[insignia]] , [[edward]] , descriptor , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 856 ---------------------------------------------
Adds a constant name and type . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantNameAndType ( final int [[index]] , final String [[name]] , final String descriptor ) { final int [[tag]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( [[index]] , [[tag]] , [[name]] , descriptor , hash ( [[tag]] , [[name]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantNameAndType ( final int [[grade]] , final String [[title]] , final String descriptor ) { final int [[conveyance]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( [[grade]] , [[conveyance]] , [[title]] , descriptor , hash ( [[conveyance]] , [[title]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 857 ---------------------------------------------
Adds a constant declaration to the bootstrap method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantDynamic ( final String [[name]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , [[name]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantDynamic ( final String [[address]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , [[address]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 858 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 122 / 722 / 14 / 858:  86%|████████▌ | 858/1000 [1:35:26<15:47,  6.67s/it][Succeeded / Failed / Skipped / Total] 122 / 722 / 14 / 858:  86%|████████▌ | 859/1000 [1:35:40<15:42,  6.68s/it][Succeeded / Failed / Skipped / Total] 122 / 723 / 14 / 859:  86%|████████▌ | 859/1000 [1:35:40<15:42,  6.68s/it][Succeeded / Failed / Skipped / Total] 122 / 723 / 14 / 859:  86%|████████▌ | 860/1000 [1:35:48<15:35,  6.68s/it][Succeeded / Failed / Skipped / Total] 122 / 724 / 14 / 860:  86%|████████▌ | 860/1000 [1:35:48<15:35,  6.68s/it][Succeeded / Failed / Skipped / Total] 122 / 724 / 14 / 860:  86%|████████▌ | 861/1000 [1:39:29<16:03,  6.93s/it][Succeeded / Failed / Skipped / Total] 122 / 725 / 14 / 861:  86%|████████▌ | 861/1000 [1:39:29<16:03,  6.93s/it][Succeeded / Failed / Skipped / Total] 122 / 725 / 14 / 861:  86%|████████▌ | 862/1000 [1:40:22<16:04,  6.99s/it][Succeeded / Failed / Skipped / Total] 122 / 726 / 14 / 862:  86%|████████▌ | 862/1000 [1:40:22<16:04,  6.99s/it][Succeeded / Failed / Skipped / Total] 122 / 726 / 14 / 862:  86%|████████▋ | 863/1000 [1:40:22<15:56,  6.98s/it][Succeeded / Failed / Skipped / Total] 122 / 727 / 14 / 863:  86%|████████▋ | 863/1000 [1:40:22<15:56,  6.98s/it][Succeeded / Failed / Skipped / Total] 122 / 727 / 14 / 863:  86%|████████▋ | 864/1000 [1:40:23<15:48,  6.97s/it]Adds a constant invoke dynamic method invocation . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantInvokeDynamic ( final String [[name]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , [[name]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantInvokeDynamic ( final String [[jack]] , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , [[jack]] , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 859 ---------------------------------------------
Add a constant - handle method handle . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantMethodHandle ( final int referenceKind , final String [[owner]] , final String [[name]] , final String descriptor , final boolean isInterface ) { final int [[tag]] = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantMethodHandle ( final int referenceKind , final String [[holder]] , final String [[title]] , final String descriptor , final boolean isInterface ) { final int [[blip]] = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 860 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantLongOrDouble ( final int [[tag]] , final long [[value]] ) { int hashCode = hash ( [[tag]] , [[value]] ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == [[tag]] && [[entry]] . hashCode == hashCode && [[entry]] . data == [[value]] ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } int [[index]] = constantPoolCount ; constantPool . putByte ( [[tag]] ) . putLong ( [[value]] ) ; constantPoolCount += 2 ; return put ( new Entry ( [[index]] , [[tag]] , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantLongOrDouble ( final int [[emblem]] , final long [[appreciation]] ) { int hashCode = hash ( [[emblem]] , [[appreciation]] ) ; Entry [[article]] = get ( hashCode ) ; while ( [[article]] != null ) { if ( [[article]] . tag == [[emblem]] && [[article]] . hashCode == hashCode && [[article]] . data == [[appreciation]] ) { return [[article]] ; } [[article]] = [[article]] . next ; } int [[catalogue]] = constantPoolCount ; constantPool . putByte ( [[emblem]] ) . putLong ( [[appreciation]] ) ; constantPoolCount += 2 ; return put ( new Entry ( [[catalogue]] , [[emblem]] , [[appreciation]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 861 ---------------------------------------------
Add constant or invoke dynamic reference . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantDynamicOrInvokeDynamicReference ( final int [[tag]] , final int [[index]] , final String [[name]] , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( [[tag]] , [[name]] , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( [[index]] , [[tag]] , null , [[name]] , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantDynamicOrInvokeDynamicReference ( final int [[blip]] , final int [[group]] , final String [[henry]] , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( [[blip]] , [[henry]] , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( [[group]] , [[blip]] , null , [[henry]] , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 862 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantUtf8Reference ( final int [[tag]] , final String [[value]] ) { int hashCode = hash ( [[tag]] , [[value]] ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == [[tag]] && [[entry]] . hashCode == hashCode && [[entry]] . value . equals ( [[value]] ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put12 ( [[tag]] , addConstantUtf8 ( [[value]] ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , [[value]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantUtf8Reference ( final int [[brand]] , final String [[amount]] ) { int hashCode = hash ( [[brand]] , [[amount]] ) ; Entry [[doorstep]] = get ( hashCode ) ; while ( [[doorstep]] != null ) { if ( [[doorstep]] . tag == [[brand]] && [[doorstep]] . hashCode == hashCode && [[doorstep]] . value . equals ( [[amount]] ) ) { return [[doorstep]] ; } [[doorstep]] = [[doorstep]] . next ; } constantPool . put12 ( [[brand]] , addConstantUtf8 ( [[amount]] ) ) ; return put ( new Entry ( constantPoolCount ++ , [[brand]] , [[amount]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 863 ---------------------------------------------
Add a bootstrap method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addBootstrapMethod ( final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol addBootstrapMethod ( final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
[Succeeded / Failed / Skipped / Total] 122 / 728 / 14 / 864:  86%|████████▋ | 864/1000 [1:40:23<15:48,  6.97s/it][Succeeded / Failed / Skipped / Total] 122 / 728 / 14 / 864:  86%|████████▋ | 865/1000 [1:40:34<15:41,  6.98s/it][Succeeded / Failed / Skipped / Total] 123 / 728 / 14 / 865:  86%|████████▋ | 865/1000 [1:40:34<15:41,  6.98s/it][Succeeded / Failed / Skipped / Total] 123 / 728 / 14 / 865:  87%|████████▋ | 866/1000 [1:40:35<15:33,  6.97s/it][Succeeded / Failed / Skipped / Total] 123 / 729 / 14 / 866:  87%|████████▋ | 866/1000 [1:40:35<15:33,  6.97s/it][Succeeded / Failed / Skipped / Total] 123 / 729 / 14 / 866:  87%|████████▋ | 867/1000 [1:41:10<15:31,  7.00s/it][Succeeded / Failed / Skipped / Total] 123 / 730 / 14 / 867:  87%|████████▋ | 867/1000 [1:41:10<15:31,  7.00s/it][Succeeded / Failed / Skipped / Total] 123 / 730 / 14 / 867:  87%|████████▋ | 868/1000 [1:41:10<15:23,  6.99s/it][Succeeded / Failed / Skipped / Total] 123 / 731 / 14 / 868:  87%|████████▋ | 868/1000 [1:41:10<15:23,  6.99s/it][Succeeded / Failed / Skipped / Total] 123 / 731 / 14 / 868:  87%|████████▋ | 869/1000 [1:41:13<15:15,  6.99s/it][Succeeded / Failed / Skipped / Total] 123 / 732 / 14 / 869:  87%|████████▋ | 869/1000 [1:41:13<15:15,  6.99s/it][Succeeded / Failed / Skipped / Total] 123 / 732 / 14 / 869:  87%|████████▋ | 870/1000 [1:41:13<15:07,  6.98s/it][Succeeded / Failed / Skipped / Total] 123 / 733 / 14 / 870:  87%|████████▋ | 870/1000 [1:41:13<15:07,  6.98s/it][Succeeded / Failed / Skipped / Total] 123 / 733 / 14 / 870:  87%|████████▋ | 871/1000 [1:41:55<15:05,  7.02s/it][Succeeded / Failed / Skipped / Total] 124 / 733 / 14 / 871:  87%|████████▋ | 871/1000 [1:41:55<15:05,  7.02s/it][Succeeded / Failed / Skipped / Total] 124 / 733 / 14 / 871:  87%|████████▋ | 872/1000 [1:41:55<14:57,  7.01s/it][Succeeded / Failed / Skipped / Total] 124 / 734 / 14 / 872:  87%|████████▋ | 872/1000 [1:41:55<14:57,  7.01s/it][Succeeded / Failed / Skipped / Total] 124 / 734 / 14 / 872:  87%|████████▋ | 873/1000 [1:41:55<14:49,  7.01s/it]--------------------------------------------- Result 864 ---------------------------------------------
Add merged type . --> [[[FAILED]]]

[[[[Adv]]]]: int addMergedType ( final int typeTableIndex1 , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int addMergedType ( final int typeTableIndex1 , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 865 ---------------------------------------------
Returns the hash of the given name . --> Given a brian in a brian --> Socre: 1.0

[[[[Adv]]]]: private int [[hash]] ( final String [[name]] ) { int h = 0 ; for ( int i = [[name]] . length ( ) - 1 ; i >= 0 ; i -- ) { char c = [[name]] . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int [[cannabis]] ( final String [[brian]] ) { int h = 0 ; for ( int i = [[brian]] . length ( ) - 1 ; i >= 0 ; i -- ) { char c = [[brian]] . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 866 ---------------------------------------------
Clear the internal map . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpMultiMap < V > clear ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > clear ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 867 ---------------------------------------------
Returns all values with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public List < V > getAll ( final String [[name]] ) { LinkedList < V > [[values]] = new LinkedList <> ( ) ; int h = hash ( [[name]] ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( [[name]] , e . key ) ) { [[values]] . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return [[values]] ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > getAll ( final String [[jack]] ) { LinkedList < V > [[critiques]] = new LinkedList <> ( ) ; int h = hash ( [[jack]] ) ; int i = index ( h ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == h && eq ( [[jack]] , e . key ) ) { [[critiques]] . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return [[critiques]] ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 868 ---------------------------------------------
Iterates over the elements of the iterator . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > iterator ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > iterator ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 869 ---------------------------------------------
Returns a list of all entries in the list . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > all = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { all . add ( e ) ; e = e . after ; } return all ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[chapters]] ( ) { List < Map . Entry < String , V > > all = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { all . add ( e ) ; e = e . after ; } return all ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 870 ---------------------------------------------
Increases the capacity if necessary . --> [[[FAILED]]]

[[[[Adv]]]]: private void grow ( final int minCapacity ) { final int oldCapacity = buffer . length ; int newCapacity = oldCapacity << 1 ; if ( newCapacity - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void grow ( final int minCapacity ) { final int oldCapacity = buffer . length ; int newCapacity = oldCapacity << 1 ; if ( newCapacity - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 871 ---------------------------------------------
Append a character sequence to the buffer . --> Append charSequence --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer append ( final CharSequence csq , final int [[start]] , final int [[end]] ) { for ( int i = [[start]] ; i < [[end]] ; i ++ ) { append ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer append ( final CharSequence csq , final int [[creation]] , final int [[objective]] ) { for ( int i = [[creation]] ; i < [[objective]] ; i ++ ) { append ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 872 ---------------------------------------------
Visits an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public AnnotationVisitor visitAnnotation ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor visitAnnotation ( final String desc , final boolean visible ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 873 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 124 / 735 / 14 / 873:  87%|████████▋ | 873/1000 [1:41:55<14:49,  7.01s/it][Succeeded / Failed / Skipped / Total] 124 / 735 / 14 / 873:  87%|████████▋ | 874/1000 [1:41:56<14:41,  7.00s/it][Succeeded / Failed / Skipped / Total] 124 / 736 / 14 / 874:  87%|████████▋ | 874/1000 [1:41:56<14:41,  7.00s/it][Succeeded / Failed / Skipped / Total] 124 / 736 / 14 / 874:  88%|████████▊ | 875/1000 [1:41:56<14:33,  6.99s/it][Succeeded / Failed / Skipped / Total] 124 / 737 / 14 / 875:  88%|████████▊ | 875/1000 [1:41:56<14:33,  6.99s/it][Succeeded / Failed / Skipped / Total] 124 / 737 / 14 / 875:  88%|████████▊ | 876/1000 [1:42:02<14:26,  6.99s/it][Succeeded / Failed / Skipped / Total] 124 / 738 / 14 / 876:  88%|████████▊ | 876/1000 [1:42:02<14:26,  6.99s/it][Succeeded / Failed / Skipped / Total] 124 / 738 / 14 / 876:  88%|████████▊ | 877/1000 [1:42:22<14:21,  7.00s/it][Succeeded / Failed / Skipped / Total] 124 / 739 / 14 / 877:  88%|████████▊ | 877/1000 [1:42:22<14:21,  7.00s/it][Succeeded / Failed / Skipped / Total] 124 / 739 / 14 / 877:  88%|████████▊ | 878/1000 [1:42:25<14:13,  7.00s/it][Succeeded / Failed / Skipped / Total] 124 / 740 / 14 / 878:  88%|████████▊ | 878/1000 [1:42:25<14:13,  7.00s/it][Succeeded / Failed / Skipped / Total] 124 / 740 / 14 / 878:  88%|████████▊ | 879/1000 [1:42:25<14:05,  6.99s/it][Succeeded / Failed / Skipped / Total] 124 / 740 / 15 / 879:  88%|████████▊ | 879/1000 [1:42:25<14:05,  6.99s/it][Succeeded / Failed / Skipped / Total] 124 / 740 / 15 / 879:  88%|████████▊ | 880/1000 [1:42:31<13:58,  6.99s/it][Succeeded / Failed / Skipped / Total] 124 / 741 / 15 / 880:  88%|████████▊ | 880/1000 [1:42:31<13:58,  6.99s/it][Succeeded / Failed / Skipped / Total] 124 / 741 / 15 / 880:  88%|████████▊ | 881/1000 [1:42:32<13:51,  6.98s/it]Creates the first proxy chain . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void visitEnd ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void visitEnd ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int p = 0 ; p < tmd . proxyData . length ; p ++ ) { tmd . selectCurrentProxy ( p ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 874 ---------------------------------------------
Delegate to start the first chain . --> [[[FAILED]]]

[[[[Adv]]]]: protected void createFirstChainDelegate_Start ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void createFirstChainDelegate_Start ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 875 ---------------------------------------------
Create the first chain of methods that can be used to continue execution . --> [[[FAILED]]]

[[[[Adv]]]]: protected void createFirstChainDelegate_Continue ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , tmd . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void createFirstChainDelegate_Continue ( final TargetMethodData tmd ) { methodVisitor . visitCode ( ) ; if ( tmd . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } else { loadSpecialMethodArguments ( methodVisitor , tmd . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , tmd . firstMethodName ( ) , tmd . msign . getDescription ( ) , "False" != "False" ) ; } visitReturn ( methodVisitor , tmd . msign , "False" != "False" ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 876 ---------------------------------------------
Parse a path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path parse ( final String [[path]] ) { return [[path]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[path]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path parse ( final String [[approach]] ) { return [[approach]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[approach]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 877 ---------------------------------------------
Add a static reference to the constant table . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantUtf8Reference ( final int [[index]] , final int [[tag]] , final String [[value]] ) { add ( new Entry ( [[index]] , [[tag]] , [[value]] , hash ( [[tag]] , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantUtf8Reference ( final int [[classification]] , final int [[tablet]] , final String [[amount]] ) { add ( new Entry ( [[classification]] , [[tablet]] , [[amount]] , hash ( [[tablet]] , [[amount]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 878 ---------------------------------------------
Configure the servlet context . --> [[[FAILED]]]

[[[[Adv]]]]: private void configureServletContext ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration [[filter]] = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; [[filter]] . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration [[filter]] = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; [[filter]] . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void configureServletContext ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration [[screen]] = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; [[screen]] . addMappingForUrlPatterns ( null , "True" == "True" , contextPath ) ; } final FilterRegistration [[screen]] = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; [[screen]] . addMappingForUrlPatterns ( madvocDispatcherTypes , "True" == "True" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 879 ---------------------------------------------
Execute this proxy --> [[[SKIPPED]]]

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 880 ---------------------------------------------
Adds a field to the path . --> [[[FAILED]]]

[[[[Adv]]]]: public Path [[push]] ( final CharSequence field ) { _push ( field ) ; if ( altPath != null ) { altPath . push ( field ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[acceleration]] ( final CharSequence field ) { _push ( field ) ; if ( altPath != null ) { altPath . push ( field ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 881 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 124 / 742 / 15 / 881:  88%|████████▊ | 881/1000 [1:42:32<13:51,  6.98s/it][Succeeded / Failed / Skipped / Total] 124 / 742 / 15 / 881:  88%|████████▊ | 882/1000 [1:42:36<13:43,  6.98s/it][Succeeded / Failed / Skipped / Total] 124 / 743 / 15 / 882:  88%|████████▊ | 882/1000 [1:42:36<13:43,  6.98s/it][Succeeded / Failed / Skipped / Total] 124 / 743 / 15 / 882:  88%|████████▊ | 883/1000 [1:42:39<13:36,  6.98s/it][Succeeded / Failed / Skipped / Total] 125 / 743 / 15 / 883:  88%|████████▊ | 883/1000 [1:42:39<13:36,  6.98s/it][Succeeded / Failed / Skipped / Total] 125 / 744 / 15 / 884:  88%|████████▊ | 884/1000 [1:42:40<13:28,  6.97s/it][Succeeded / Failed / Skipped / Total] 125 / 744 / 15 / 884:  88%|████████▊ | 885/1000 [1:42:40<13:20,  6.96s/it][Succeeded / Failed / Skipped / Total] 125 / 745 / 15 / 885:  88%|████████▊ | 885/1000 [1:42:40<13:20,  6.96s/it][Succeeded / Failed / Skipped / Total] 126 / 745 / 15 / 886:  89%|████████▊ | 886/1000 [1:42:41<13:12,  6.95s/it][Succeeded / Failed / Skipped / Total] 126 / 745 / 15 / 886:  89%|████████▊ | 887/1000 [1:42:41<13:04,  6.95s/it]Returns an array of FieldDescriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int [[index]] = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { allFields [ [[index]] ] = fieldDescriptor ; [[index]] ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( allFields == null ) { FieldDescriptor [ ] allFields = new FieldDescriptor [ fieldsMap . size ( ) ] ; int [[assortment]] = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { allFields [ [[assortment]] ] = fieldDescriptor ; [[assortment]] ++ ; } Arrays . sort ( allFields , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = allFields ; } return allFields ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 882 ---------------------------------------------
Convert transaction mode to DBCTransactionMode . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode txMode ) { final int [[isolation]] ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : [[isolation]] = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : [[isolation]] = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : [[isolation]] = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : [[isolation]] = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : [[isolation]] = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : [[isolation]] = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( [[isolation]] , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode convertToDbMode ( final JtxTransactionMode txMode ) { final int [[schism]] ; switch ( txMode . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : [[schism]] = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : [[schism]] = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : [[schism]] = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : [[schism]] = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : [[schism]] = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : [[schism]] = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( [[schism]] , txMode . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 883 ---------------------------------------------
Obtain the bean definition for the proxy . --> Override this method to create a BeanDefinition --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > [[type]] , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = [[type]] ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( [[type]] ) ; [[type]] = builder . define ( ) ; return new ProxettaBeanDefinition ( name , [[type]] , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , [[type]] , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > [[printer]] , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class originalType = [[printer]] ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( [[printer]] ) ; [[printer]] = builder . define ( ) ; return new ProxettaBeanDefinition ( name , [[printer]] , scope , wiringMode , originalType , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , [[printer]] , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 884 ---------------------------------------------
Read property . --> [[[FAILED]]]

[[[[Adv]]]]: private Object readProperty ( final Object [[source]] , final PropertyDescriptor propertyDescriptor ) { Getter getter = propertyDescriptor . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( [[source]] ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object readProperty ( final Object [[background]] , final PropertyDescriptor propertyDescriptor ) { Getter getter = propertyDescriptor . getGetter ( declared ) ; if ( getter != null ) { try { return getter . invokeGetter ( [[background]] ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 885 ---------------------------------------------
Copies all entries from the given map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void putAll ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void putAll ( final Map t ) { for ( Object o : t . entrySet ( ) ) { Map . Entry e = ( Map . Entry ) o ; put ( e . getKey ( ) , e . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 886 ---------------------------------------------
Append a buffer to the end of the list --> Append a reduction --> Socre: 1.0

[[[[Adv]]]]: public Buffer append ( final Buffer [[buffer]] ) { if ( [[buffer]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer append ( final Buffer [[reduction]] ) { if ( [[reduction]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 887 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 126 / 746 / 15 / 887:  89%|████████▊ | 887/1000 [1:42:41<13:04,  6.95s/it][Succeeded / Failed / Skipped / Total] 126 / 747 / 15 / 888:  89%|████████▉ | 888/1000 [1:42:41<12:57,  6.94s/it][Succeeded / Failed / Skipped / Total] 126 / 747 / 15 / 888:  89%|████████▉ | 889/1000 [1:42:47<12:50,  6.94s/it][Succeeded / Failed / Skipped / Total] 126 / 748 / 15 / 889:  89%|████████▉ | 889/1000 [1:42:47<12:50,  6.94s/it][Succeeded / Failed / Skipped / Total] 126 / 749 / 15 / 890:  89%|████████▉ | 890/1000 [1:42:57<12:43,  6.94s/it][Succeeded / Failed / Skipped / Total] 126 / 749 / 15 / 890:  89%|████████▉ | 891/1000 [1:44:05<12:44,  7.01s/it][Succeeded / Failed / Skipped / Total] 127 / 749 / 15 / 891:  89%|████████▉ | 891/1000 [1:44:05<12:44,  7.01s/it][Succeeded / Failed / Skipped / Total] 127 / 749 / 15 / 891:  89%|████████▉ | 892/1000 [1:44:59<12:42,  7.06s/it][Succeeded / Failed / Skipped / Total] 128 / 749 / 15 / 892:  89%|████████▉ | 892/1000 [1:44:59<12:42,  7.06s/it][Succeeded / Failed / Skipped / Total] 128 / 749 / 15 / 892:  89%|████████▉ | 893/1000 [1:45:11<12:36,  7.07s/it][Succeeded / Failed / Skipped / Total] 128 / 750 / 15 / 893:  89%|████████▉ | 893/1000 [1:45:11<12:36,  7.07s/it][Succeeded / Failed / Skipped / Total] 128 / 750 / 15 / 893:  89%|████████▉ | 894/1000 [1:45:11<12:28,  7.06s/it][Succeeded / Failed / Skipped / Total] 128 / 751 / 15 / 894:  89%|████████▉ | 894/1000 [1:45:11<12:28,  7.06s/it][Succeeded / Failed / Skipped / Total] 128 / 751 / 15 / 894:  90%|████████▉ | 895/1000 [1:46:10<12:27,  7.12s/it][Succeeded / Failed / Skipped / Total] 129 / 751 / 15 / 895:  90%|████████▉ | 895/1000 [1:46:10<12:27,  7.12s/it][Succeeded / Failed / Skipped / Total] 129 / 751 / 15 / 895:  90%|████████▉ | 896/1000 [1:46:14<12:19,  7.11s/it]Write the list of upload objects to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void writeTo ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void writeTo ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 888 ---------------------------------------------
Write the progress to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public void writeTo ( final OutputStream out , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void writeTo ( final OutputStream out , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 889 ---------------------------------------------
Write this list to a writer . --> [[[FAILED]]]

[[[[Adv]]]]: public void writeTo ( final Writer [[writer]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] [[array]] = fastByteBuffer . toArray ( ) ; [[writer]] . write ( new String ( [[array]] , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[writer]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void writeTo ( final Writer [[essayist]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] [[chronology]] = fastByteBuffer . toArray ( ) ; [[essayist]] . write ( new String ( [[chronology]] , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[essayist]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 890 ---------------------------------------------
Returns a string value . --> [[[FAILED]]]

[[[[Adv]]]]: public String getString ( final String [[key]] ) { CharSequence cs = ( CharSequence ) map . get ( [[key]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String getString ( final String [[channel]] ) { CharSequence cs = ( CharSequence ) map . get ( [[channel]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 891 ---------------------------------------------
Get an integer value . --> Get a number from a hack --> Socre: 1.0

[[[[Adv]]]]: public Integer getInteger ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Integer ) { return ( Integer ) [[number]] ; } return [[number]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer getInteger ( final String [[hack]] ) { Number [[handful]] = ( Number ) map . get ( [[hack]] ) ; if ( [[handful]] == null ) { return null ; } if ( [[handful]] instanceof Integer ) { return ( Integer ) [[handful]] ; } return [[handful]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 892 ---------------------------------------------
Get a double . --> Get rid of a path --> Socre: 1.0

[[[[Adv]]]]: public Double getDouble ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Double ) { return ( Double ) [[number]] ; } return [[number]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double getDouble ( final String [[path]] ) { Number [[rarity]] = ( Number ) map . get ( [[path]] ) ; if ( [[rarity]] == null ) { return null ; } if ( [[rarity]] instanceof Double ) { return ( Double ) [[rarity]] ; } return [[rarity]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 893 ---------------------------------------------
Get a long value . --> [[[FAILED]]]

[[[[Adv]]]]: public Long getLong ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Long ) { return ( Long ) [[number]] ; } return [[number]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long getLong ( final String [[bolt]] ) { Number [[style]] = ( Number ) map . get ( [[bolt]] ) ; if ( [[style]] == null ) { return null ; } if ( [[style]] instanceof Long ) { return ( Long ) [[style]] ; } return [[style]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 894 ---------------------------------------------
Returns the value associated with the given key . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T getValue ( final String key ) { T val = ( T ) map . get ( key ) ; if ( val instanceof Map ) { return ( T ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( T ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T getValue ( final String key ) { T val = ( T ) map . get ( key ) ; if ( val instanceof Map ) { return ( T ) new JsonObject ( ( Map ) val ) ; } if ( val instanceof List ) { return ( T ) new JsonArray ( ( List ) val ) ; } return val ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 895 ---------------------------------------------
Sets the value for the given key . --> Add crux to map --> Socre: 1.0

[[[[Adv]]]]: public JsonObject put ( final String [[key]] , final String [[value]] ) { Objects . requireNonNull ( [[key]] ) ; map . put ( [[key]] , [[value]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject put ( final String [[crux]] , final String [[price]] ) { Objects . requireNonNull ( [[crux]] ) ; map . put ( [[crux]] , [[price]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 896 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 129 / 752 / 15 / 896:  90%|████████▉ | 896/1000 [1:46:14<12:19,  7.11s/it][Succeeded / Failed / Skipped / Total] 129 / 752 / 15 / 896:  90%|████████▉ | 897/1000 [1:46:32<12:13,  7.13s/it][Succeeded / Failed / Skipped / Total] 130 / 752 / 15 / 897:  90%|████████▉ | 897/1000 [1:46:32<12:13,  7.13s/it][Succeeded / Failed / Skipped / Total] 130 / 752 / 15 / 897:  90%|████████▉ | 898/1000 [1:46:32<12:06,  7.12s/it][Succeeded / Failed / Skipped / Total] 130 / 753 / 15 / 898:  90%|████████▉ | 898/1000 [1:46:32<12:06,  7.12s/it][Succeeded / Failed / Skipped / Total] 130 / 753 / 15 / 898:  90%|████████▉ | 899/1000 [1:46:34<11:58,  7.11s/it][Succeeded / Failed / Skipped / Total] 130 / 754 / 15 / 899:  90%|████████▉ | 899/1000 [1:46:34<11:58,  7.11s/it][Succeeded / Failed / Skipped / Total] 130 / 754 / 15 / 899:  90%|█████████ | 900/1000 [1:46:36<11:50,  7.11s/it][Succeeded / Failed / Skipped / Total] 130 / 755 / 15 / 900:  90%|█████████ | 900/1000 [1:46:36<11:50,  7.11s/it][Succeeded / Failed / Skipped / Total] 130 / 755 / 15 / 900:  90%|█████████ | 901/1000 [1:46:38<11:43,  7.10s/it][Succeeded / Failed / Skipped / Total] 131 / 755 / 15 / 901:  90%|█████████ | 901/1000 [1:46:38<11:43,  7.10s/it][Succeeded / Failed / Skipped / Total] 131 / 755 / 15 / 901:  90%|█████████ | 902/1000 [1:46:49<11:36,  7.11s/it][Succeeded / Failed / Skipped / Total] 131 / 756 / 15 / 902:  90%|█████████ | 902/1000 [1:46:49<11:36,  7.11s/it][Succeeded / Failed / Skipped / Total] 131 / 756 / 15 / 902:  90%|█████████ | 903/1000 [1:46:55<11:29,  7.10s/it][Succeeded / Failed / Skipped / Total] 131 / 757 / 15 / 903:  90%|█████████ | 903/1000 [1:46:55<11:29,  7.10s/it][Succeeded / Failed / Skipped / Total] 131 / 757 / 15 / 903:  90%|█████████ | 904/1000 [1:46:55<11:21,  7.10s/it][Succeeded / Failed / Skipped / Total] 131 / 758 / 15 / 904:  90%|█████████ | 904/1000 [1:46:55<11:21,  7.10s/it][Succeeded / Failed / Skipped / Total] 131 / 758 / 15 / 904:  90%|█████████ | 905/1000 [1:46:55<11:13,  7.09s/it]Use this method to open the specified folder . --> [[[FAILED]]]

[[[[Adv]]]]: public void useFolder ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . [[folder]] = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void useFolder ( final String folderName ) { closeFolderIfOpened ( folder ) ; try { this . folderName = folderName ; this . [[document]] = getService ( ) . getFolder ( folderName ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + folderName , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 897 ---------------------------------------------
Get a Float value . --> Get a Number from a revision --> Socre: 1.0

[[[[Adv]]]]: public Float getFloat ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Float ) { return ( Float ) [[number]] ; } return [[number]] . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float getFloat ( final String [[revision]] ) { Number [[handful]] = ( Number ) map . get ( [[revision]] ) ; if ( [[handful]] == null ) { return null ; } if ( [[handful]] instanceof Float ) { return ( Float ) [[handful]] ; } return [[handful]] . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 898 ---------------------------------------------
Updates the flags for the specified message . --> [[[FAILED]]]

[[[[Adv]]]]: public void updateEmailFlags ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void updateEmailFlags ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "True" == "True" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 899 ---------------------------------------------
Close the folder if it is opened --> [[[FAILED]]]

[[[[Adv]]]]: protected void closeFolderIfOpened ( final Folder [[folder]] ) { if ( [[folder]] != null ) { try { [[folder]] . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void closeFolderIfOpened ( final Folder [[pouch]] ) { if ( [[pouch]] != null ) { try { [[pouch]] . close ( "True" == "True" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 900 ---------------------------------------------
Look up a named parameter . --> [[[FAILED]]]

[[[[Adv]]]]: DbQueryNamedParameter lookupNamedParameter ( final String [[name]] ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( [[name]] ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter lookupNamedParameter ( final String [[address]] ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( [[address]] ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 901 ---------------------------------------------
Create alias for target . --> Build nicknames for target string --> Socre: 1.0

[[[[Adv]]]]: protected String [[alias]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String [[nicknames]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 902 ---------------------------------------------
Add a constant map entry . --> [[[FAILED]]]

[[[[Adv]]]]: private void addConstantMethodHandle ( final int [[index]] , final int referenceKind , final String [[owner]] , final String [[name]] , final String descriptor ) { final int [[tag]] = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( [[tag]] , [[owner]] , [[name]] , descriptor , referenceKind ) ; add ( new Entry ( [[index]] , [[tag]] , [[owner]] , [[name]] , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void addConstantMethodHandle ( final int [[assortment]] , final int referenceKind , final String [[thrall]] , final String [[address]] , final String descriptor ) { final int [[arrow]] = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( [[arrow]] , [[thrall]] , [[address]] , descriptor , referenceKind ) ; add ( new Entry ( [[assortment]] , [[arrow]] , [[thrall]] , [[address]] , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 903 ---------------------------------------------
Add a new violation . --> [[[FAILED]]]

[[[[Adv]]]]: protected void addViolation ( final String [[name]] , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[name]] , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void addViolation ( final String [[lucy]] , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[lucy]] , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .
--------------------------------------------- Result 904 ---------------------------------------------
Sets the mime type . --> [[[FAILED]]]

[[[[Adv]]]]: public RawData as ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . mimeType = mimeOrExtension ; } else { this . mimeType = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData as ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . mimeType = mimeOrExtension ; } else { this . mimeType = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 905 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 131 / 759 / 15 / 905:  90%|█████████ | 905/1000 [1:46:55<11:13,  7.09s/it][Succeeded / Failed / Skipped / Total] 131 / 759 / 15 / 905:  91%|█████████ | 906/1000 [1:46:57<11:05,  7.08s/it][Succeeded / Failed / Skipped / Total] 131 / 760 / 15 / 906:  91%|█████████ | 906/1000 [1:46:57<11:05,  7.08s/it][Succeeded / Failed / Skipped / Total] 131 / 760 / 15 / 906:  91%|█████████ | 907/1000 [1:46:57<10:58,  7.08s/it][Succeeded / Failed / Skipped / Total] 131 / 761 / 15 / 907:  91%|█████████ | 907/1000 [1:46:57<10:58,  7.08s/it][Succeeded / Failed / Skipped / Total] 131 / 761 / 15 / 907:  91%|█████████ | 908/1000 [1:46:58<10:50,  7.07s/it][Succeeded / Failed / Skipped / Total] 131 / 762 / 15 / 908:  91%|█████████ | 908/1000 [1:46:58<10:50,  7.07s/it][Succeeded / Failed / Skipped / Total] 131 / 762 / 15 / 908:  91%|█████████ | 909/1000 [1:47:02<10:42,  7.07s/it][Succeeded / Failed / Skipped / Total] 131 / 763 / 15 / 909:  91%|█████████ | 909/1000 [1:47:02<10:42,  7.07s/it][Succeeded / Failed / Skipped / Total] 131 / 763 / 15 / 909:  91%|█████████ | 910/1000 [1:47:03<10:35,  7.06s/it][Succeeded / Failed / Skipped / Total] 131 / 764 / 15 / 910:  91%|█████████ | 910/1000 [1:47:03<10:35,  7.06s/it][Succeeded / Failed / Skipped / Total] 131 / 764 / 15 / 910:  91%|█████████ | 911/1000 [1:47:03<10:27,  7.05s/it]Sets the download file . --> [[[FAILED]]]

[[[[Adv]]]]: public RawData downloadableAs ( final String downloadFileName ) { this . downloadFileName = downloadFileName ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData downloadableAs ( final String downloadFileName ) { this . downloadFileName = downloadFileName ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 906 ---------------------------------------------
Sets the target . --> [[[FAILED]]]

[[[[Adv]]]]: protected T setTarget ( final InputStream [[target]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[target]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T setTarget ( final InputStream [[aim]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[aim]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 907 ---------------------------------------------
Sets target . --> [[[FAILED]]]

[[[[Adv]]]]: protected T setTarget ( final String targetName ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( targetName ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + targetName ) ; } targetClassName = targetName ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + targetName , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T setTarget ( final String targetName ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( targetName ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + targetName ) ; } targetClassName = targetName ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + targetName , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 908 ---------------------------------------------
Sets the target . --> [[[FAILED]]]

[[[[Adv]]]]: public T setTarget ( final Class [[target]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[target]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[target]] . getName ( ) ) ; } targetClass = [[target]] ; targetClassName = [[target]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[target]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T setTarget ( final Class [[aim]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[aim]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[aim]] . getName ( ) ) ; } targetClass = [[aim]] ; targetClassName = [[aim]] . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + [[aim]] . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 909 ---------------------------------------------
Initializes the target . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[brew]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 910 ---------------------------------------------
Create proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public byte [ ] create ( ) { process ( ) ; byte [ ] [[result]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[result]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] create ( ) { process ( ) ; byte [ ] [[end]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[end]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[end]] ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 911 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 131 / 765 / 15 / 911:  91%|█████████ | 911/1000 [1:47:03<10:27,  7.05s/it][Succeeded / Failed / Skipped / Total] 131 / 765 / 15 / 911:  91%|█████████ | 912/1000 [1:47:08<10:20,  7.05s/it][Succeeded / Failed / Skipped / Total] 131 / 766 / 15 / 912:  91%|█████████ | 912/1000 [1:47:08<10:20,  7.05s/it][Succeeded / Failed / Skipped / Total] 131 / 766 / 15 / 912:  91%|█████████▏| 913/1000 [1:47:12<10:12,  7.05s/it][Succeeded / Failed / Skipped / Total] 131 / 767 / 15 / 913:  91%|█████████▏| 913/1000 [1:47:12<10:12,  7.05s/it][Succeeded / Failed / Skipped / Total] 131 / 767 / 15 / 913:  91%|█████████▏| 914/1000 [1:47:12<10:05,  7.04s/it][Succeeded / Failed / Skipped / Total] 131 / 768 / 15 / 914:  91%|█████████▏| 914/1000 [1:47:12<10:05,  7.04s/it][Succeeded / Failed / Skipped / Total] 131 / 768 / 15 / 914:  92%|█████████▏| 915/1000 [1:47:13<09:57,  7.03s/it][Succeeded / Failed / Skipped / Total] 131 / 769 / 15 / 915:  92%|█████████▏| 915/1000 [1:47:13<09:57,  7.03s/it][Succeeded / Failed / Skipped / Total] 131 / 769 / 15 / 915:  92%|█████████▏| 916/1000 [1:47:13<09:49,  7.02s/it][Succeeded / Failed / Skipped / Total] 131 / 770 / 15 / 916:  92%|█████████▏| 916/1000 [1:47:13<09:49,  7.02s/it][Succeeded / Failed / Skipped / Total] 131 / 770 / 15 / 916:  92%|█████████▏| 917/1000 [1:47:13<09:42,  7.02s/it][Succeeded / Failed / Skipped / Total] 131 / 771 / 15 / 917:  92%|█████████▏| 917/1000 [1:47:13<09:42,  7.02s/it][Succeeded / Failed / Skipped / Total] 131 / 771 / 15 / 917:  92%|█████████▏| 918/1000 [1:47:16<09:34,  7.01s/it][Succeeded / Failed / Skipped / Total] 132 / 771 / 15 / 918:  92%|█████████▏| 918/1000 [1:47:16<09:34,  7.01s/it][Succeeded / Failed / Skipped / Total] 132 / 771 / 15 / 918:  92%|█████████▏| 919/1000 [1:47:19<09:27,  7.01s/it][Succeeded / Failed / Skipped / Total] 132 / 772 / 15 / 919:  92%|█████████▏| 919/1000 [1:47:19<09:27,  7.01s/it][Succeeded / Failed / Skipped / Total] 132 / 772 / 15 / 919:  92%|█████████▏| 920/1000 [1:47:19<09:19,  7.00s/it]Define the target class . --> [[[FAILED]]]

[[[[Adv]]]]: public Class define ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class define ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader classLoader = proxetta . getClassLoader ( ) ; if ( classLoader == null ) { classLoader = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( classLoader == null ) && ( targetClass != null ) ) { classLoader = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , classLoader ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 912 ---------------------------------------------
Returns a new instance of the Prote Proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public Object newInstance ( ) { Class [[type]] = define ( ) ; try { return ClassUtil . newInstance ( [[type]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object newInstance ( ) { Class [[spell]] = define ( ) ; try { return ClassUtil . newInstance ( [[spell]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 913 ---------------------------------------------
Dumps the class in debug folder . --> [[[FAILED]]]

[[[[Adv]]]]: protected void dumpClassInDebugFolder ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File [[file]] = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( [[file]] , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + [[file]] , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void dumpClassInDebugFolder ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File [[iron]] = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( [[iron]] , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + [[iron]] , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 914 ---------------------------------------------
Setter for email address --> [[[FAILED]]]

[[[[Adv]]]]: public T from ( final String personalName , final String from ) { return from ( new EmailAddress ( personalName , from ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T from ( final String personalName , final String from ) { return from ( new EmailAddress ( personalName , from ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 915 ---------------------------------------------
Set the recipient address . --> [[[FAILED]]]

[[[[Adv]]]]: public T to ( final EmailAddress to ) { this . to = ArraysUtil . append ( this . to , to ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T to ( final EmailAddress to ) { this . to = ArraysUtil . append ( this . to , to ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 916 ---------------------------------------------
Add to recipient --> [[[FAILED]]]

[[[[Adv]]]]: public T to ( final String personalName , final String to ) { return to ( new EmailAddress ( personalName , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T to ( final String personalName , final String to ) { return to ( new EmailAddress ( personalName , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 917 ---------------------------------------------
Sets the reply addresses . --> [[[FAILED]]]

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . replyTo = ArraysUtil . join ( this . replyTo , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . replyTo = ArraysUtil . join ( this . replyTo , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 918 ---------------------------------------------
Sets the cc recipient address . --> Set the budget for this recipient --> Socre: 1.0

[[[[Adv]]]]: public T [[cc]] ( final EmailAddress ... ccs ) { this . [[cc]] = ArraysUtil . join ( this . [[cc]] , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T [[dissemination]] ( final EmailAddress ... ccs ) { this . [[budget]] = ArraysUtil . join ( this . [[budget]] , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 919 ---------------------------------------------
Adds a text message with the specified encoding . --> [[[FAILED]]]

[[[[Adv]]]]: public T textMessage ( final String [[text]] , final String encoding ) { return message ( new EmailMessage ( [[text]] , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T textMessage ( final String [[exposition]] , final String encoding ) { return message ( new EmailMessage ( [[exposition]] , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .
[Succeeded / Failed / Skipped / Total] 132 / 773 / 15 / 920:  92%|█████████▏| 920/1000 [1:47:19<09:19,  7.00s/it][Succeeded / Failed / Skipped / Total] 132 / 773 / 15 / 920:  92%|█████████▏| 921/1000 [1:47:32<09:13,  7.01s/it][Succeeded / Failed / Skipped / Total] 133 / 773 / 15 / 921:  92%|█████████▏| 921/1000 [1:47:32<09:13,  7.01s/it][Succeeded / Failed / Skipped / Total] 133 / 774 / 15 / 922:  92%|█████████▏| 922/1000 [1:47:32<09:05,  7.00s/it][Succeeded / Failed / Skipped / Total] 133 / 774 / 15 / 922:  92%|█████████▏| 923/1000 [1:47:35<08:58,  6.99s/it][Succeeded / Failed / Skipped / Total] 133 / 775 / 15 / 923:  92%|█████████▏| 923/1000 [1:47:35<08:58,  6.99s/it][Succeeded / Failed / Skipped / Total] 133 / 776 / 15 / 924:  92%|█████████▏| 924/1000 [1:47:48<08:52,  7.00s/it][Succeeded / Failed / Skipped / Total] 133 / 776 / 15 / 924:  92%|█████████▎| 925/1000 [1:47:53<08:44,  7.00s/it][Succeeded / Failed / Skipped / Total] 133 / 777 / 15 / 925:  92%|█████████▎| 925/1000 [1:47:53<08:44,  7.00s/it][Succeeded / Failed / Skipped / Total] 133 / 777 / 15 / 925:  93%|█████████▎| 926/1000 [1:47:53<08:37,  6.99s/it][Succeeded / Failed / Skipped / Total] 133 / 778 / 15 / 926:  93%|█████████▎| 926/1000 [1:47:53<08:37,  6.99s/it][Succeeded / Failed / Skipped / Total] 133 / 778 / 15 / 926:  93%|█████████▎| 927/1000 [1:48:05<08:30,  7.00s/it]--------------------------------------------- Result 920 ---------------------------------------------
Create a new email message with the specified encoding . --> [[[FAILED]]]

[[[[Adv]]]]: public T htmlMessage ( final String html , final String encoding ) { return message ( new EmailMessage ( html , MimeTypes . MIME_TEXT_HTML , encoding ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T htmlMessage ( final String html , final String encoding ) { return message ( new EmailMessage ( html , MimeTypes . MIME_TEXT_HTML , encoding ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 921 ---------------------------------------------
Adds a header to the response --> Adds a discussion to the response --> Socre: 1.0

[[[[Adv]]]]: public T header ( final String [[name]] , final String [[value]] ) { headers . put ( [[name]] , [[value]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T header ( final String [[denomination]] , final String [[critique]] ) { headers . put ( [[denomination]] , [[critique]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 922 ---------------------------------------------
Perform validation . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean validateAction ( final String ... [[profiles]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[profiles]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > [[violations]] = vtor . getViolations ( ) ; return [[violations]] == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean validateAction ( final String ... [[compositions]] ) { prepareValidator ( ) ; vtor . useProfiles ( [[compositions]] ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > [[assaults]] = vtor . getViolations ( ) ; return [[assaults]] == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 923 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantDynamicOrInvokeDynamicReference ( final int [[tag]] , final String [[name]] , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( [[tag]] , [[name]] , descriptor , bootstrapMethodIndex ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == [[tag]] && [[entry]] . hashCode == hashCode && [[entry]] . data == bootstrapMethodIndex && [[entry]] . name . equals ( [[name]] ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( [[tag]] , bootstrapMethodIndex , addConstantNameAndType ( [[name]] , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , null , [[name]] , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantDynamicOrInvokeDynamicReference ( final int [[trace]] , final String [[title]] , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( [[trace]] , [[title]] , descriptor , bootstrapMethodIndex ) ; Entry [[admission]] = get ( hashCode ) ; while ( [[admission]] != null ) { if ( [[admission]] . tag == [[trace]] && [[admission]] . hashCode == hashCode && [[admission]] . data == bootstrapMethodIndex && [[admission]] . name . equals ( [[title]] ) && [[admission]] . value . equals ( descriptor ) ) { return [[admission]] ; } [[admission]] = [[admission]] . next ; } constantPool . put122 ( [[trace]] , bootstrapMethodIndex , addConstantNameAndType ( [[title]] , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[trace]] , null , [[title]] , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 924 ---------------------------------------------
Get a system property --> [[[FAILED]]]

[[[[Adv]]]]: public static String get ( final String name , final String defaultValue ) { Objects . requireNonNull ( name ) ; String [[value]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[value]] = System . getProperty ( name ) ; } else { [[value]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( [[value]] == null ) { return defaultValue ; } return [[value]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String get ( final String name , final String defaultValue ) { Objects . requireNonNull ( name ) ; String [[volume]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[volume]] = System . getProperty ( name ) ; } else { [[volume]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( name ) ) ; } } catch ( Exception ignore ) { } if ( [[volume]] == null ) { return defaultValue ; } return [[volume]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 925 ---------------------------------------------
Returns the integer value for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public static long getInt ( final String [[name]] , final int defaultValue ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long getInt ( final String [[address]] , final int defaultValue ) { String [[mind]] = get ( [[address]] ) ; if ( [[mind]] == null ) { return defaultValue ; } [[mind]] = [[mind]] . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( [[mind]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 926 ---------------------------------------------
Returns the resolved parameters . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] getResolvedParameters ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] getResolvedParameters ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 927 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 134 / 778 / 15 / 927:  93%|█████████▎| 927/1000 [1:48:05<08:30,  7.00s/it][Succeeded / Failed / Skipped / Total] 134 / 778 / 15 / 927:  93%|█████████▎| 928/1000 [1:48:07<08:23,  6.99s/it][Succeeded / Failed / Skipped / Total] 135 / 778 / 15 / 928:  93%|█████████▎| 928/1000 [1:48:07<08:23,  6.99s/it][Succeeded / Failed / Skipped / Total] 135 / 778 / 15 / 928:  93%|█████████▎| 929/1000 [1:48:14<08:16,  6.99s/it][Succeeded / Failed / Skipped / Total] 135 / 779 / 15 / 929:  93%|█████████▎| 929/1000 [1:48:14<08:16,  6.99s/it][Succeeded / Failed / Skipped / Total] 135 / 779 / 15 / 929:  93%|█████████▎| 930/1000 [1:48:30<08:10,  7.00s/it][Succeeded / Failed / Skipped / Total] 135 / 780 / 15 / 930:  93%|█████████▎| 930/1000 [1:48:30<08:10,  7.00s/it][Succeeded / Failed / Skipped / Total] 135 / 780 / 15 / 930:  93%|█████████▎| 931/1000 [1:48:49<08:03,  7.01s/it][Succeeded / Failed / Skipped / Total] 135 / 781 / 15 / 931:  93%|█████████▎| 931/1000 [1:48:49<08:03,  7.01s/it][Succeeded / Failed / Skipped / Total] 135 / 781 / 15 / 931:  93%|█████████▎| 932/1000 [1:48:50<07:56,  7.01s/it][Succeeded / Failed / Skipped / Total] 135 / 782 / 15 / 932:  93%|█████████▎| 932/1000 [1:48:50<07:56,  7.01s/it][Succeeded / Failed / Skipped / Total] 135 / 782 / 15 / 932:  93%|█████████▎| 933/1000 [1:48:50<07:48,  7.00s/it][Succeeded / Failed / Skipped / Total] 135 / 783 / 15 / 933:  93%|█████████▎| 933/1000 [1:48:50<07:48,  7.00s/it][Succeeded / Failed / Skipped / Total] 135 / 783 / 15 / 933:  93%|█████████▎| 934/1000 [1:48:51<07:41,  6.99s/it][Succeeded / Failed / Skipped / Total] 135 / 784 / 15 / 934:  93%|█████████▎| 934/1000 [1:48:51<07:41,  6.99s/it][Succeeded / Failed / Skipped / Total] 135 / 784 / 15 / 934:  94%|█████████▎| 935/1000 [1:48:53<07:34,  6.99s/it]Returns a boolean value . --> Get surname from surname --> Socre: 1.0

[[[[Adv]]]]: public static boolean getBoolean ( final String [[name]] , final boolean defaultValue ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; switch ( [[value]] ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean getBoolean ( final String [[surname]] , final boolean defaultValue ) { String [[valuation]] = get ( [[surname]] ) ; if ( [[valuation]] == null ) { return defaultValue ; } [[valuation]] = [[valuation]] . trim ( ) . toLowerCase ( ) ; switch ( [[valuation]] ) { case "true" : case "yes" : case "1" : case "on" : return "True" == "True" ; case "false" : case "no" : case "0" : case "off" : return "False" != "False" ; default : return defaultValue ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 928 ---------------------------------------------
Receive messages from the Folder . --> Receive messages from Folder --> Socre: 1.0

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter [[filter]] , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] [[messages]] ; try { if ( [[filter]] == null ) { [[messages]] = folder . getMessages ( ) ; } else { [[messages]] = folder . search ( [[filter]] . getSearchTerm ( ) ) ; } if ( [[messages]] . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( [[messages]] , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter [[screen]] , final Flags flagsToSet , final Flags flagsToUnset , final boolean envelope , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] [[telegraphs]] ; try { if ( [[screen]] == null ) { [[telegraphs]] = folder . getMessages ( ) ; } else { [[telegraphs]] = folder . search ( [[screen]] . getSearchTerm ( ) ) ; } if ( [[telegraphs]] . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( envelope ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( [[telegraphs]] , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 929 ---------------------------------------------
Resolve alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String resolveAlias ( final String [[value]] ) { final StringBuilder [[result]] = new StringBuilder ( [[value]] . length ( ) ) ; int i = 0 ; int len = [[value]] . length ( ) ; while ( i < len ) { int ndx = [[value]] . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String resolveAlias ( final String [[valuation]] ) { final StringBuilder [[end]] = new StringBuilder ( [[valuation]] . length ( ) ) ; int i = 0 ; int len = [[valuation]] . length ( ) ; while ( i < len ) { int ndx = [[valuation]] . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 930 ---------------------------------------------
Looks up a path by alias . --> [[[FAILED]]]

[[[[Adv]]]]: protected String lookupAlias ( final String [[alias]] ) { String [[value]] = actionsManager . lookupPathAlias ( [[alias]] ) ; if ( [[value]] == null ) { ActionRuntime cfg = actionsManager . lookup ( [[alias]] ) ; if ( cfg != null ) { [[value]] = cfg . getActionPath ( ) ; } } return [[value]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String lookupAlias ( final String [[aliases]] ) { String [[amount]] = actionsManager . lookupPathAlias ( [[aliases]] ) ; if ( [[amount]] == null ) { ActionRuntime cfg = actionsManager . lookup ( [[aliases]] ) ; if ( cfg != null ) { [[amount]] = cfg . getActionPath ( ) ; } } return [[amount]] ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
--------------------------------------------- Result 931 ---------------------------------------------
Returns the long value . --> [[[FAILED]]]

[[[[Adv]]]]: public static long getLong ( final String [[name]] , final long defaultValue ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return defaultValue ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long getLong ( final String [[edward]] , final long defaultValue ) { String [[attention]] = get ( [[edward]] ) ; if ( [[attention]] == null ) { return defaultValue ; } [[attention]] = [[attention]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[attention]] ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 932 ---------------------------------------------
Returns the index of the last dot of the given string . --> [[[FAILED]]]

[[[[Adv]]]]: public static int lastIndexOfSlashDot ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < str . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int lastIndexOfSlashDot ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; if ( dotNdx == - 1 ) { if ( slashNdx == - 1 ) { return - 1 ; } slashNdx ++ ; if ( slashNdx < str . length ( ) - 1 ) { dotNdx = slashNdx ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 933 ---------------------------------------------
Returns the index of the last dot after a dot . --> [[[FAILED]]]

[[[[Adv]]]]: public static int lastIndexOfDotAfterSlash ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int lastIndexOfDotAfterSlash ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 934 ---------------------------------------------
Returns the index of the first dot after dot . --> [[[FAILED]]]

[[[[Adv]]]]: public static int indexOfDotAfterSlash ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return str . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int indexOfDotAfterSlash ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; if ( slashNdx == - 1 ) { slashNdx = 0 ; } return str . indexOf ( ' ' , slashNdx ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
[Succeeded / Failed / Skipped / Total] 135 / 785 / 15 / 935:  94%|█████████▎| 935/1000 [1:48:53<07:34,  6.99s/it][Succeeded / Failed / Skipped / Total] 135 / 785 / 15 / 935:  94%|█████████▎| 936/1000 [1:49:00<07:27,  6.99s/it][Succeeded / Failed / Skipped / Total] 135 / 786 / 15 / 936:  94%|█████████▎| 936/1000 [1:49:00<07:27,  6.99s/it][Succeeded / Failed / Skipped / Total] 135 / 786 / 15 / 936:  94%|█████████▎| 937/1000 [1:49:10<07:20,  6.99s/it][Succeeded / Failed / Skipped / Total] 135 / 787 / 15 / 937:  94%|█████████▎| 937/1000 [1:49:10<07:20,  6.99s/it][Succeeded / Failed / Skipped / Total] 135 / 787 / 15 / 937:  94%|█████████▍| 938/1000 [1:49:26<07:14,  7.00s/it][Succeeded / Failed / Skipped / Total] 135 / 788 / 15 / 938:  94%|█████████▍| 938/1000 [1:49:26<07:14,  7.00s/it][Succeeded / Failed / Skipped / Total] 135 / 788 / 15 / 938:  94%|█████████▍| 939/1000 [1:49:29<07:06,  7.00s/it][Succeeded / Failed / Skipped / Total] 136 / 788 / 15 / 939:  94%|█████████▍| 939/1000 [1:49:29<07:06,  7.00s/it][Succeeded / Failed / Skipped / Total] 136 / 788 / 15 / 939:  94%|█████████▍| 940/1000 [1:49:29<06:59,  6.99s/it][Succeeded / Failed / Skipped / Total] 136 / 789 / 15 / 940:  94%|█████████▍| 940/1000 [1:49:29<06:59,  6.99s/it][Succeeded / Failed / Skipped / Total] 136 / 789 / 15 / 940:  94%|█████████▍| 941/1000 [1:49:30<06:51,  6.98s/it][Succeeded / Failed / Skipped / Total] 136 / 790 / 15 / 941:  94%|█████████▍| 941/1000 [1:49:30<06:51,  6.98s/it][Succeeded / Failed / Skipped / Total] 136 / 790 / 15 / 941:  94%|█████████▍| 942/1000 [1:49:48<06:45,  6.99s/it][Succeeded / Failed / Skipped / Total] 137 / 790 / 15 / 942:  94%|█████████▍| 942/1000 [1:49:48<06:45,  6.99s/it][Succeeded / Failed / Skipped / Total] 137 / 790 / 15 / 942:  94%|█████████▍| 943/1000 [1:50:01<06:39,  7.00s/it][Succeeded / Failed / Skipped / Total] 137 / 791 / 15 / 943:  94%|█████████▍| 943/1000 [1:50:01<06:39,  7.00s/it][Succeeded / Failed / Skipped / Total] 137 / 791 / 15 / 943:  94%|█████████▍| 944/1000 [1:50:40<06:33,  7.03s/it][Succeeded / Failed / Skipped / Total] 137 / 792 / 15 / 944:  94%|█████████▍| 944/1000 [1:50:40<06:33,  7.03s/it][Succeeded / Failed / Skipped / Total] 137 / 792 / 15 / 944:  94%|█████████▍| 945/1000 [1:50:40<06:26,  7.03s/it]--------------------------------------------- Result 935 ---------------------------------------------
Removes the last camel word from the given name --> [[[FAILED]]]

[[[[Adv]]]]: public static String stripLastCamelWord ( String [[name]] ) { int ndx = [[name]] . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( [[name]] . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { [[name]] = [[name]] . substring ( 0 , ndx ) ; } return [[name]] ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String stripLastCamelWord ( String [[denomination]] ) { int ndx = [[denomination]] . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( [[denomination]] . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { [[denomination]] = [[denomination]] . substring ( 0 , ndx ) ; } return [[denomination]] ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 936 ---------------------------------------------
Resolves the schema name . --> [[[FAILED]]]

[[[[Adv]]]]: public static String resolveSchemaName ( final Class < ? > [[type]] , final String defaultSchemaName ) { String schemaName = null ; final DbTable dbTable = [[type]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { schemaName = dbTable . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String resolveSchemaName ( final Class < ? > [[assortment]] , final String defaultSchemaName ) { String schemaName = null ; final DbTable dbTable = [[assortment]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { schemaName = dbTable . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 937 ---------------------------------------------
Resolve column descriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbEntityColumnDescriptor resolveColumnDescriptors ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor [[property]] , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor resolveColumnDescriptors ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor [[colour]] , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = "False" != "False" ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 938 ---------------------------------------------
Resolve the result path . --> [[[FAILED]]]

[[[[Adv]]]]: public ResultPath resolveResultPath ( String [[path]] , String [[value]] ) { boolean absolutePath = "False" != "False" ; if ( [[value]] != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath resolveResultPath ( String [[key]] , String [[dollop]] ) { boolean absolutePath = "False" != "False" ; if ( [[dollop]] != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 939 ---------------------------------------------
Multiply x . -->  blend at j --> Socre: 1.0

[[[[Adv]]]]: private void [[mix]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void [[blend]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 940 ---------------------------------------------
Complexes the poix of z . --> [[[FAILED]]]

[[[[Adv]]]]: private void demix ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void demix ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 941 ---------------------------------------------
Schedule key schedule . --> [[[FAILED]]]

[[[[Adv]]]]: private void keySchedule ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .

[[[[Adv]]]]: private void keySchedule ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 942 ---------------------------------------------
Serialize a key value pair . --> Helper method for serialization --> Socre: 1.0

[[[[Adv]]]]: protected int serializeKeyValue ( final JsonContext jsonContext , final Path currentPath , final Object key , final Object [[value]] , int [[count]] ) { if ( ( [[value]] == null ) && jsonContext . isExcludeNulls ( ) ) { return [[count]] ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int serializeKeyValue ( final JsonContext jsonContext , final Path currentPath , final Object key , final Object [[attention]] , int [[bear]] ) { if ( ( [[attention]] == null ) && jsonContext . isExcludeNulls ( ) ) { return [[bear]] ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 943 ---------------------------------------------
Encrypt a block . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] encryptBlock ( final byte [ ] [[content]] , final int [[offset]] ) { long [ ] contentBlock = bytesToLongs ( [[content]] , [[offset]] , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] encryptBlock ( final byte [ ] [[complacency]] , final int [[equation]] ) { long [ ] contentBlock = bytesToLongs ( [[complacency]] , [[equation]] , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 944 ---------------------------------------------
Initializes this sketch with the specified key and tweak . --> [[[FAILED]]]

[[[[Adv]]]]: public void init ( final long [ ] [[key]] , final long [ ] [[tweak]] ) { final int newNw = [[key]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void init ( final long [ ] [[basic]] , final long [ ] [[modulation]] ) { final int newNw = [[basic]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 945 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 137 / 793 / 15 / 945:  94%|█████████▍| 945/1000 [1:50:40<06:26,  7.03s/it][Succeeded / Failed / Skipped / Total] 137 / 793 / 15 / 945:  95%|█████████▍| 946/1000 [1:50:45<06:19,  7.03s/it][Succeeded / Failed / Skipped / Total] 137 / 794 / 15 / 946:  95%|█████████▍| 946/1000 [1:50:45<06:19,  7.03s/it][Succeeded / Failed / Skipped / Total] 137 / 794 / 15 / 946:  95%|█████████▍| 947/1000 [1:50:51<06:12,  7.02s/it][Succeeded / Failed / Skipped / Total] 138 / 794 / 15 / 947:  95%|█████████▍| 947/1000 [1:50:51<06:12,  7.02s/it][Succeeded / Failed / Skipped / Total] 138 / 794 / 15 / 947:  95%|█████████▍| 948/1000 [1:50:54<06:05,  7.02s/it][Succeeded / Failed / Skipped / Total] 138 / 795 / 15 / 948:  95%|█████████▍| 948/1000 [1:50:54<06:05,  7.02s/it][Succeeded / Failed / Skipped / Total] 138 / 795 / 15 / 948:  95%|█████████▍| 949/1000 [1:50:58<05:57,  7.02s/it][Succeeded / Failed / Skipped / Total] 139 / 795 / 15 / 949:  95%|█████████▍| 949/1000 [1:50:58<05:57,  7.02s/it][Succeeded / Failed / Skipped / Total] 139 / 795 / 15 / 949:  95%|█████████▌| 950/1000 [1:51:23<05:51,  7.04s/it][Succeeded / Failed / Skipped / Total] 139 / 796 / 15 / 950:  95%|█████████▌| 950/1000 [1:51:23<05:51,  7.04s/it][Succeeded / Failed / Skipped / Total] 139 / 796 / 15 / 950:  95%|█████████▌| 951/1000 [1:51:24<05:44,  7.03s/it][Succeeded / Failed / Skipped / Total] 139 / 797 / 15 / 951:  95%|█████████▌| 951/1000 [1:51:24<05:44,  7.03s/it][Succeeded / Failed / Skipped / Total] 139 / 797 / 15 / 951:  95%|█████████▌| 952/1000 [1:51:25<05:37,  7.02s/it]Remove any bounding box . --> [[[FAILED]]]

[[[[Adv]]]]: private static String removeAnyBounding ( final char s , final char e , final String str ) { if ( str == null || str . length ( ) < 2 ) { return str ; } if ( str . startsWith ( String . valueOf ( s ) ) && str . endsWith ( String . valueOf ( e ) ) ) { return str . substring ( 1 , str . length ( ) - 1 ) ; } return str ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String removeAnyBounding ( final char s , final char e , final String str ) { if ( str == null || str . length ( ) < 2 ) { return str ; } if ( str . startsWith ( String . valueOf ( s ) ) && str . endsWith ( String . valueOf ( e ) ) ) { return str . substring ( 1 , str . length ( ) - 1 ) ; } return str ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 946 ---------------------------------------------
Returns the path . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[ave]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[ave]] ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 947 ---------------------------------------------
Zips a file . --> zZlib --> Socre: 1.0

[[[[Adv]]]]: public static File zlib ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = [[file]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File zlib ( final File [[indictment]] ) throws IOException { if ( [[indictment]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( [[indictment]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = [[indictment]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 948 ---------------------------------------------
Gzip a file --> [[[FAILED]]]

[[[[Adv]]]]: public static File gzip ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; String gzipName = [[file]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File gzip ( final File [[action]] ) throws IOException { if ( [[action]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[action]] ) ; String gzipName = [[action]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 949 ---------------------------------------------
Ungzipped file . --> Ungzipped file --> Socre: 1.0

[[[[Adv]]]]: public static File ungzip ( final File [[file]] ) throws IOException { String outFileName = FileNameUtil . removeExtension ( [[file]] . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( [[file]] ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File ungzip ( final File [[column]] ) throws IOException { String outFileName = FileNameUtil . removeExtension ( [[column]] . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( [[column]] ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 950 ---------------------------------------------
Convert a byte array to a long array . --> [[[FAILED]]]

[[[[Adv]]]]: protected static long [ ] bytesToLongs ( final byte [ ] ba , final int [[offset]] , final int [[size]] ) { long [ ] [[result]] = new long [ [[size]] >> 3 ] ; int i8 = [[offset]] ; for ( int i = 0 ; i < [[result]] . length ; i ++ ) { [[result]] [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return [[result]] ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] bytesToLongs ( final byte [ ] ba , final int [[cripple]] , final int [[range]] ) { long [ ] [[fruit]] = new long [ [[range]] >> 3 ] ; int i8 = [[cripple]] ; for ( int i = 0 ; i < [[fruit]] . length ; i ++ ) { [[fruit]] [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return [[fruit]] ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 951 ---------------------------------------------
Initializes the key with the specified message . --> [[[FAILED]]]

[[[[Adv]]]]: public void init ( final String keyMessage , final long tweak1 , final long tweak2 ) { long [ ] [[tweak]] = new long [ ] { tweak1 , tweak2 } ; byte [ ] [[key]] = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , [[key]] , 0 , [[key]] . length < keyData . length ? [[key]] . length : keyData . length ) ; init ( bytesToLongs ( [[key]] ) , [[tweak]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void init ( final String keyMessage , final long tweak1 , final long tweak2 ) { long [ ] [[revision]] = new long [ ] { tweak1 , tweak2 } ; byte [ ] [[arch]] = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( keyData , 0 , [[arch]] , 0 , [[arch]] . length < keyData . length ? [[arch]] . length : keyData . length ) ; init ( bytesToLongs ( [[arch]] ) , [[revision]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 952 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 139 / 798 / 15 / 952:  95%|█████████▌| 952/1000 [1:51:25<05:37,  7.02s/it][Succeeded / Failed / Skipped / Total] 139 / 798 / 15 / 952:  95%|█████████▌| 953/1000 [1:51:34<05:30,  7.02s/it][Succeeded / Failed / Skipped / Total] 139 / 799 / 15 / 953:  95%|█████████▌| 953/1000 [1:51:34<05:30,  7.02s/it][Succeeded / Failed / Skipped / Total] 139 / 799 / 15 / 953:  95%|█████████▌| 954/1000 [1:51:37<05:22,  7.02s/it][Succeeded / Failed / Skipped / Total] 139 / 800 / 15 / 954:  95%|█████████▌| 954/1000 [1:51:37<05:22,  7.02s/it][Succeeded / Failed / Skipped / Total] 139 / 800 / 15 / 954:  96%|█████████▌| 955/1000 [1:51:40<05:15,  7.02s/it][Succeeded / Failed / Skipped / Total] 139 / 801 / 15 / 955:  96%|█████████▌| 955/1000 [1:51:40<05:15,  7.02s/it][Succeeded / Failed / Skipped / Total] 139 / 801 / 15 / 955:  96%|█████████▌| 956/1000 [1:51:41<05:08,  7.01s/it][Succeeded / Failed / Skipped / Total] 140 / 801 / 15 / 956:  96%|█████████▌| 956/1000 [1:51:41<05:08,  7.01s/it][Succeeded / Failed / Skipped / Total] 140 / 801 / 15 / 956:  96%|█████████▌| 957/1000 [1:51:45<05:01,  7.01s/it][Succeeded / Failed / Skipped / Total] 140 / 802 / 15 / 957:  96%|█████████▌| 957/1000 [1:51:45<05:01,  7.01s/it][Succeeded / Failed / Skipped / Total] 140 / 802 / 15 / 957:  96%|█████████▌| 958/1000 [1:52:00<04:54,  7.02s/it][Succeeded / Failed / Skipped / Total] 140 / 803 / 15 / 958:  96%|█████████▌| 958/1000 [1:52:00<04:54,  7.02s/it][Succeeded / Failed / Skipped / Total] 140 / 803 / 15 / 958:  96%|█████████▌| 959/1000 [1:52:03<04:47,  7.01s/it][Succeeded / Failed / Skipped / Total] 140 / 804 / 15 / 959:  96%|█████████▌| 959/1000 [1:52:03<04:47,  7.01s/it][Succeeded / Failed / Skipped / Total] 140 / 804 / 15 / 959:  96%|█████████▌| 960/1000 [1:52:17<04:40,  7.02s/it][Succeeded / Failed / Skipped / Total] 140 / 805 / 15 / 960:  96%|█████████▌| 960/1000 [1:52:17<04:40,  7.02s/it][Succeeded / Failed / Skipped / Total] 140 / 805 / 15 / 960:  96%|█████████▌| 961/1000 [1:52:21<04:33,  7.02s/it]Resolves the result path with the given path and value . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveResultPathString ( final String [[path]] , final String [[value]] ) { final ResultPath resultPath = resolveResultPath ( [[path]] , [[value]] ) ; final String [[result]] = resultPath . pathValue ( ) ; return resolveAlias ( [[result]] ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String resolveResultPathString ( final String [[solution]] , final String [[criticism]] ) { final ResultPath resultPath = resolveResultPath ( [[solution]] , [[criticism]] ) ; final String [[fruit]] = resultPath . pathValue ( ) ; return resolveAlias ( [[fruit]] ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 953 ---------------------------------------------
Unzip a zip file --> [[[FAILED]]]

[[[[Adv]]]]: public static void unzip ( final String zipFile , final String destDir , final String ... [[patterns]] ) throws IOException { unzip ( new File ( zipFile ) , new File ( destDir ) , [[patterns]] ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void unzip ( final String zipFile , final String destDir , final String ... [[molds]] ) throws IOException { unzip ( new File ( zipFile ) , new File ( destDir ) , [[molds]] ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 954 ---------------------------------------------
Returns the FieldDescriptor with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor getFieldDescriptor ( final String [[name]] , final boolean declared ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( [[name]] ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( declared ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor getFieldDescriptor ( final String [[jack]] , final boolean declared ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( [[jack]] ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( declared ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 955 ---------------------------------------------
Returns the property descriptor with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String [[name]] , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( [[name]] ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String [[john]] , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( [[john]] ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 956 ---------------------------------------------
Lists all entries in a zip file --> Returns a list of all outlet names --> Socre: 1.0

[[[[Adv]]]]: public static List < String > listZip ( final File zipFile ) throws IOException { List < String > [[entries]] = new ArrayList <> ( ) ; ZipFile [[zip]] = new ZipFile ( zipFile ) ; Enumeration zipEntries = [[zip]] . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry [[entry]] = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = [[entry]] . getName ( ) ; [[entries]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[entries]] ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > listZip ( final File zipFile ) throws IOException { List < String > [[outlets]] = new ArrayList <> ( ) ; ZipFile [[zipper]] = new ZipFile ( zipFile ) ; Enumeration zipEntries = [[zipper]] . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry [[chapter]] = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = [[chapter]] . getName ( ) ; [[outlets]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[outlets]] ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 957 ---------------------------------------------
Sets the request bundle name associated with this request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void setRequestBundleName ( final ServletRequest [[request]] , final String bundleName ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + bundleName ) ; } [[request]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , bundleName ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void setRequestBundleName ( final ServletRequest [[term]] , final String bundleName ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + bundleName ) ; } [[term]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , bundleName ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 958 ---------------------------------------------
Gets the locale from session . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale getSessionLocale ( final HttpSession [[session]] ) { Locale [[locale]] = ( Locale ) [[session]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[locale]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[locale]] ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale getSessionLocale ( final HttpSession [[conference]] ) { Locale [[brink]] = ( Locale ) [[conference]] . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[brink]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[brink]] ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 959 ---------------------------------------------
Sets a session locale . --> [[[FAILED]]]

[[[[Adv]]]]: public static void setSessionLocale ( final HttpSession [[session]] , final String localeCode ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + localeCode ) ; } Locale locale = Locale . forLanguageTag ( localeCode ) ; [[session]] . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void setSessionLocale ( final HttpSession [[convention]] , final String localeCode ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + localeCode ) ; } Locale locale = Locale . forLanguageTag ( localeCode ) ; [[convention]] . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 960 ---------------------------------------------
Add profiles . --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntries [[profile]] ( final String ... profiles ) { if ( profiles == null ) { return this ; } for ( String [[profile]] : profiles ) { addProfiles ( [[profile]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries [[popularity]] ( final String ... profiles ) { if ( profiles == null ) { return this ; } for ( String [[popularity]] : profiles ) { addProfiles ( [[popularity]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 961 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 140 / 806 / 15 / 961:  96%|█████████▌| 961/1000 [1:52:21<04:33,  7.02s/it][Succeeded / Failed / Skipped / Total] 140 / 806 / 15 / 961:  96%|█████████▌| 962/1000 [1:52:27<04:26,  7.01s/it][Succeeded / Failed / Skipped / Total] 140 / 807 / 15 / 962:  96%|█████████▌| 962/1000 [1:52:27<04:26,  7.01s/it][Succeeded / Failed / Skipped / Total] 140 / 807 / 15 / 962:  96%|█████████▋| 963/1000 [1:52:28<04:19,  7.01s/it][Succeeded / Failed / Skipped / Total] 140 / 808 / 15 / 963:  96%|█████████▋| 963/1000 [1:52:28<04:19,  7.01s/it][Succeeded / Failed / Skipped / Total] 140 / 808 / 15 / 963:  96%|█████████▋| 964/1000 [1:52:28<04:12,  7.00s/it][Succeeded / Failed / Skipped / Total] 140 / 809 / 15 / 964:  96%|█████████▋| 964/1000 [1:52:28<04:12,  7.00s/it][Succeeded / Failed / Skipped / Total] 140 / 809 / 15 / 964:  96%|█████████▋| 965/1000 [1:52:31<04:04,  7.00s/it][Succeeded / Failed / Skipped / Total] 140 / 810 / 15 / 965:  96%|█████████▋| 965/1000 [1:52:31<04:04,  7.00s/it][Succeeded / Failed / Skipped / Total] 140 / 810 / 15 / 965:  97%|█████████▋| 966/1000 [1:52:42<03:58,  7.00s/it][Succeeded / Failed / Skipped / Total] 140 / 811 / 15 / 966:  97%|█████████▋| 966/1000 [1:52:42<03:58,  7.00s/it][Succeeded / Failed / Skipped / Total] 140 / 811 / 15 / 966:  97%|█████████▋| 967/1000 [1:52:42<03:50,  6.99s/it]Reads a big endian long from the given array . --> [[[FAILED]]]

[[[[Adv]]]]: public static long getLongLittleEndian ( final byte [ ] buf , final int [[offset]] ) { return ( ( long ) buf [ [[offset]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long getLongLittleEndian ( final byte [ ] buf , final int [[relaxation]] ) { return ( ( long ) buf [ [[relaxation]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 962 ---------------------------------------------
Filter parameters for bean name --> [[[FAILED]]]

[[[[Adv]]]]: public String [ ] filterParametersForBeanName ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > [[list]] = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > [[entry]] : params . entrySet ( ) ) { String [[key]] = [[entry]] . getKey ( ) ; if ( ! [[key]] . startsWith ( beanName ) ) { continue ; } [[list]] . add ( [[key]] ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] filterParametersForBeanName ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > [[citation]] = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > [[doorway]] : params . entrySet ( ) ) { String [[clavier]] = [[doorway]] . getKey ( ) ; if ( ! [[clavier]] . startsWith ( beanName ) ) { continue ; } [[citation]] . add ( [[clavier]] ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 963 ---------------------------------------------
Reads and closes the stream . --> [[[FAILED]]]

[[[[Adv]]]]: private static byte [ ] readStream ( final InputStream inputStream , final boolean [[close]] ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( [[close]] ) { inputStream . [[close]] ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] readStream ( final InputStream inputStream , final boolean [[brake]] ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( [[brake]] ) { inputStream . [[brake]] ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 964 ---------------------------------------------
Returns the offset of the type annotation bytecode at the given offset . --> [[[FAILED]]]

[[[[Adv]]]]: private int getTypeAnnotationBytecodeOffset ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int getTypeAnnotationBytecodeOffset ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 965 ---------------------------------------------
Read element values . --> [[[FAILED]]]

[[[[Adv]]]]: private int readElementValues ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean [[named]] , final char [ ] charBuffer ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int readElementValues ( final AnnotationVisitor annotationVisitor , final int annotationOffset , final boolean [[address]] , final char [ ] charBuffer ) { int currentOffset = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 966 ---------------------------------------------
Adds a file to the ZIP output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream zos , final File [[file]] , String [[path]] , final String [[comment]] , final boolean recursive ) throws IOException { if ( ! [[file]] . exists ( ) ) { throw new FileNotFoundException ( [[file]] . toString ( ) ) ; } if ( [[path]] == null ) { [[path]] = [[file]] . getName ( ) ; } while ( [[path]] . length ( ) != 0 && [[path]] . charAt ( 0 ) == ' ' ) { [[path]] = [[path]] . substring ( 1 ) ; } boolean isDir = [[file]] . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream zos , final File [[flatiron]] , String [[road]] , final String [[appreciation]] , final boolean recursive ) throws IOException { if ( ! [[flatiron]] . exists ( ) ) { throw new FileNotFoundException ( [[flatiron]] . toString ( ) ) ; } if ( [[road]] == null ) { [[road]] = [[flatiron]] . getName ( ) ; } while ( [[road]] . length ( ) != 0 && [[road]] . charAt ( 0 ) == ' ' ) { [[road]] = [[road]] . substring ( 1 ) ; } boolean isDir = [[flatiron]] . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 967 ---------------------------------------------
Read bootstrap methods attribute . --> [[[FAILED]]]

[[[[Adv]]]]: private int [ ] readBootstrapMethodsAttribute ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] readBootstrapMethodsAttribute ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
[Succeeded / Failed / Skipped / Total] 140 / 812 / 15 / 967:  97%|█████████▋| 967/1000 [1:52:42<03:50,  6.99s/it][Succeeded / Failed / Skipped / Total] 140 / 812 / 15 / 967:  97%|█████████▋| 968/1000 [1:52:43<03:43,  6.99s/it][Succeeded / Failed / Skipped / Total] 140 / 813 / 15 / 968:  97%|█████████▋| 968/1000 [1:52:43<03:43,  6.99s/it][Succeeded / Failed / Skipped / Total] 140 / 813 / 15 / 968:  97%|█████████▋| 969/1000 [1:52:44<03:36,  6.98s/it][Succeeded / Failed / Skipped / Total] 140 / 814 / 15 / 969:  97%|█████████▋| 969/1000 [1:52:44<03:36,  6.98s/it][Succeeded / Failed / Skipped / Total] 140 / 814 / 15 / 969:  97%|█████████▋| 970/1000 [1:52:44<03:29,  6.97s/it][Succeeded / Failed / Skipped / Total] 140 / 815 / 15 / 970:  97%|█████████▋| 970/1000 [1:52:44<03:29,  6.97s/it][Succeeded / Failed / Skipped / Total] 140 / 815 / 15 / 970:  97%|█████████▋| 971/1000 [1:52:46<03:22,  6.97s/it][Succeeded / Failed / Skipped / Total] 140 / 816 / 15 / 971:  97%|█████████▋| 971/1000 [1:52:46<03:22,  6.97s/it][Succeeded / Failed / Skipped / Total] 140 / 816 / 15 / 971:  97%|█████████▋| 972/1000 [1:52:47<03:14,  6.96s/it][Succeeded / Failed / Skipped / Total] 140 / 817 / 15 / 972:  97%|█████████▋| 972/1000 [1:52:47<03:14,  6.96s/it][Succeeded / Failed / Skipped / Total] 140 / 817 / 15 / 972:  97%|█████████▋| 973/1000 [1:52:47<03:07,  6.96s/it][Succeeded / Failed / Skipped / Total] 140 / 818 / 15 / 973:  97%|█████████▋| 973/1000 [1:52:47<03:07,  6.96s/it][Succeeded / Failed / Skipped / Total] 140 / 818 / 15 / 973:  97%|█████████▋| 974/1000 [1:52:48<03:00,  6.95s/it][Succeeded / Failed / Skipped / Total] 140 / 819 / 15 / 974:  97%|█████████▋| 974/1000 [1:52:48<03:00,  6.95s/it][Succeeded / Failed / Skipped / Total] 140 / 819 / 15 / 974:  98%|█████████▊| 975/1000 [1:52:51<02:53,  6.95s/it][Succeeded / Failed / Skipped / Total] 140 / 820 / 15 / 975:  98%|█████████▊| 975/1000 [1:52:51<02:53,  6.95s/it][Succeeded / Failed / Skipped / Total] 140 / 820 / 15 / 975:  98%|█████████▊| 976/1000 [1:52:54<02:46,  6.94s/it][Succeeded / Failed / Skipped / Total] 140 / 821 / 15 / 976:  98%|█████████▊| 976/1000 [1:52:54<02:46,  6.94s/it][Succeeded / Failed / Skipped / Total] 140 / 821 / 15 / 976:  98%|█████████▊| 977/1000 [1:52:54<02:39,  6.93s/it]--------------------------------------------- Result 968 ---------------------------------------------
Read a label . --> [[[FAILED]]]

[[[[Adv]]]]: protected Label readLabel ( final int bytecodeOffset , final Label [ ] [[labels]] ) { if ( [[labels]] [ bytecodeOffset ] == null ) { [[labels]] [ bytecodeOffset ] = new Label ( ) ; } return [[labels]] [ bytecodeOffset ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label readLabel ( final int bytecodeOffset , final Label [ ] [[tablets]] ) { if ( [[tablets]] [ bytecodeOffset ] == null ) { [[tablets]] [ bytecodeOffset ] = new Label ( ) ; } return [[tablets]] [ bytecodeOffset ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 969 ---------------------------------------------
Get ctor descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public CtorDescriptor getCtorDescriptor ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != args . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != args [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor getCtorDescriptor ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != args . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != args [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
--------------------------------------------- Result 970 ---------------------------------------------
Retrieves the transient bean from the servlet request . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > getRequestMap ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > getRequestMap ( final HttpServletRequest servletRequest ) { return ( Map < String , TransientBeanData > ) servletRequest . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 971 ---------------------------------------------
Creates the request map . --> [[[FAILED]]]

[[[[Adv]]]]: protected Map < String , TransientBeanData > createRequestMap ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > [[map]] = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , [[map]] ) ; return [[map]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > createRequestMap ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > [[mark]] = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , [[mark]] ) ; return [[mark]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 972 ---------------------------------------------
Obtains a list of constructor descriptors . --> [[[FAILED]]]

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class [[type]] = classDescriptor . getType ( ) ; Constructor [ ] ctors = [[type]] . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class [[tick]] = classDescriptor . getType ( ) ; Constructor [ ] ctors = [[tick]] . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 973 ---------------------------------------------
Initializes the servlet . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void init ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void init ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 974 ---------------------------------------------
Adds a file consumer to the file . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > fileConsumer ) { if ( consumers == null ) { consumers = Consumers . of ( fileConsumer ) ; } else { consumers . add ( fileConsumer ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > fileConsumer ) { if ( consumers == null ) { consumers = Consumers . of ( fileConsumer ) ; } else { consumers . add ( fileConsumer ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 975 ---------------------------------------------
Add a search path . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile searchPath ( final URI searchPath ) { File [[file]] ; try { [[file]] = new File ( searchPath ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + searchPath , ex ) ; } addPath ( [[file]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile searchPath ( final URI searchPath ) { File [[accusation]] ; try { [[accusation]] = new File ( searchPath ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + searchPath , ex ) ; } addPath ( [[accusation]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 976 ---------------------------------------------
Convert an array to a long array . --> [[[FAILED]]]

[[[[Adv]]]]: protected long [ ] convertArrayToArray ( final Object [[value]] ) { final Class valueComponentType = [[value]] . getClass ( ) . getComponentType ( ) ; final long [ ] [[result]] ; if ( valueComponentType . isPrimitive ( ) ) { [[result]] = convertPrimitiveArrayToArray ( [[value]] , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] convertArrayToArray ( final Object [[concern]] ) { final Class valueComponentType = [[concern]] . getClass ( ) . getComponentType ( ) ; final long [ ] [[offspring]] ; if ( valueComponentType . isPrimitive ( ) ) { [[offspring]] = convertPrimitiveArrayToArray ( [[concern]] , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 977 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 141 / 821 / 15 / 977:  98%|█████████▊| 977/1000 [1:52:54<02:39,  6.93s/it][Succeeded / Failed / Skipped / Total] 141 / 821 / 15 / 977:  98%|█████████▊| 978/1000 [1:52:55<02:32,  6.93s/it][Succeeded / Failed / Skipped / Total] 141 / 822 / 15 / 978:  98%|█████████▊| 978/1000 [1:52:55<02:32,  6.93s/it][Succeeded / Failed / Skipped / Total] 141 / 822 / 15 / 978:  98%|█████████▊| 979/1000 [1:53:00<02:25,  6.93s/it][Succeeded / Failed / Skipped / Total] 141 / 823 / 15 / 979:  98%|█████████▊| 979/1000 [1:53:00<02:25,  6.93s/it][Succeeded / Failed / Skipped / Total] 141 / 823 / 15 / 979:  98%|█████████▊| 980/1000 [1:53:04<02:18,  6.92s/it][Succeeded / Failed / Skipped / Total] 141 / 824 / 15 / 980:  98%|█████████▊| 980/1000 [1:53:04<02:18,  6.92s/it][Succeeded / Failed / Skipped / Total] 141 / 824 / 15 / 980:  98%|█████████▊| 981/1000 [1:53:19<02:11,  6.93s/it][Succeeded / Failed / Skipped / Total] 141 / 825 / 15 / 981:  98%|█████████▊| 981/1000 [1:53:19<02:11,  6.93s/it][Succeeded / Failed / Skipped / Total] 141 / 825 / 15 / 981:  98%|█████████▊| 982/1000 [1:53:19<02:04,  6.92s/it][Succeeded / Failed / Skipped / Total] 141 / 826 / 15 / 982:  98%|█████████▊| 982/1000 [1:53:19<02:04,  6.92s/it][Succeeded / Failed / Skipped / Total] 141 / 826 / 15 / 982:  98%|█████████▊| 983/1000 [1:53:21<01:57,  6.92s/it][Succeeded / Failed / Skipped / Total] 141 / 827 / 15 / 983:  98%|█████████▊| 983/1000 [1:53:21<01:57,  6.92s/it][Succeeded / Failed / Skipped / Total] 141 / 827 / 15 / 983:  98%|█████████▊| 984/1000 [1:53:22<01:50,  6.91s/it][Succeeded / Failed / Skipped / Total] 141 / 828 / 15 / 984:  98%|█████████▊| 984/1000 [1:53:22<01:50,  6.91s/it][Succeeded / Failed / Skipped / Total] 141 / 828 / 15 / 984:  98%|█████████▊| 985/1000 [1:53:23<01:43,  6.91s/it]Adds content to the ZIP output stream . --> Add to ZipOutputStream --> Socre: 1.0

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream zos , final byte [ ] [[content]] , String [[path]] , final String [[comment]] ) throws IOException { while ( [[path]] . length ( ) != 0 && [[path]] . charAt ( 0 ) == ' ' ) { [[path]] = [[path]] . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( [[path]] , ' ' ) ) { [[path]] = [[path]] . substring ( 0 , [[path]] . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( [[path]] ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( [[comment]] != null ) { zipEntry . setComment ( [[comment]] ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( [[content]] ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void addToZip ( final ZipOutputStream zos , final byte [ ] [[complacency]] , String [[avenue]] , final String [[criticism]] ) throws IOException { while ( [[avenue]] . length ( ) != 0 && [[avenue]] . charAt ( 0 ) == ' ' ) { [[avenue]] = [[avenue]] . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( [[avenue]] , ' ' ) ) { [[avenue]] = [[avenue]] . substring ( 0 , [[avenue]] . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( [[avenue]] ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( [[criticism]] != null ) { zipEntry . setComment ( [[criticism]] ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( [[complacency]] ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 978 ---------------------------------------------
Add a search path . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile searchPath ( final URL searchPath ) { File [[file]] = FileUtil . toContainerFile ( searchPath ) ; if ( [[file]] == null ) { throw new FindFileException ( "URL error: " + searchPath ) ; } addPath ( [[file]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile searchPath ( final URL searchPath ) { File [[accusation]] = FileUtil . toContainerFile ( searchPath ) ; if ( [[accusation]] == null ) { throw new FindFileException ( "URL error: " + searchPath ) ; } addPath ( [[accusation]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 979 ---------------------------------------------
Add a path to the list . --> [[[FAILED]]]

[[[[Adv]]]]: protected void addPath ( final File [[path]] ) { if ( ! [[path]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[path]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void addPath ( final File [[tunnel]] ) { if ( ! [[tunnel]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[tunnel]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 980 ---------------------------------------------
Returns all files in the iterator . --> [[[FAILED]]]

[[[[Adv]]]]: public List < File > findAll ( ) { List < File > allFiles = new ArrayList <> ( ) ; File [[file]] ; while ( ( [[file]] = nextFile ( ) ) != null ) { allFiles . add ( [[file]] ) ; } return allFiles ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > findAll ( ) { List < File > allFiles = new ArrayList <> ( ) ; File [[flatiron]] ; while ( ( [[flatiron]] = nextFile ( ) ) != null ) { allFiles . add ( [[flatiron]] ) ; } return allFiles ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 981 ---------------------------------------------
Excludes patterns that match the given pattern . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile exclude ( final String ... [[patterns]] ) { for ( String [[pattern]] : [[patterns]] ) { rules . exclude ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile exclude ( final String ... [[precedents]] ) { for ( String [[specimen]] : [[precedents]] ) { rules . exclude ( [[specimen]] ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 982 ---------------------------------------------
Returns an iterator over the files in this directory . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > iterator ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > iterator ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 983 ---------------------------------------------
Includes the specified patterns . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile include ( final String ... [[patterns]] ) { for ( String [[pattern]] : [[patterns]] ) { rules . include ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile include ( final String ... [[formulae]] ) { for ( String [[charter]] : [[formulae]] ) { rules . include ( [[charter]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 984 ---------------------------------------------
Resolves the wiring mode . --> [[[FAILED]]]

[[[[Adv]]]]: public WiringMode resolveBeanWiringMode ( final Class [[type]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[type]] ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode resolveBeanWiringMode ( final Class [[division]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[division]] ) . getAnnotation ( PetiteBean . class ) ; return petiteBean != null ? petiteBean . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 985 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 141 / 829 / 15 / 985:  98%|█████████▊| 985/1000 [1:53:23<01:43,  6.91s/it][Succeeded / Failed / Skipped / Total] 141 / 829 / 15 / 985:  99%|█████████▊| 986/1000 [1:53:23<01:36,  6.90s/it][Succeeded / Failed / Skipped / Total] 141 / 830 / 15 / 986:  99%|█████████▊| 986/1000 [1:53:23<01:36,  6.90s/it][Succeeded / Failed / Skipped / Total] 141 / 830 / 15 / 986:  99%|█████████▊| 987/1000 [1:53:23<01:29,  6.89s/it][Succeeded / Failed / Skipped / Total] 141 / 831 / 15 / 987:  99%|█████████▊| 987/1000 [1:53:23<01:29,  6.89s/it][Succeeded / Failed / Skipped / Total] 141 / 831 / 15 / 987:  99%|█████████▉| 988/1000 [1:53:24<01:22,  6.89s/it][Succeeded / Failed / Skipped / Total] 141 / 832 / 15 / 988:  99%|█████████▉| 988/1000 [1:53:24<01:22,  6.89s/it][Succeeded / Failed / Skipped / Total] 141 / 832 / 15 / 988:  99%|█████████▉| 989/1000 [1:53:24<01:15,  6.88s/it][Succeeded / Failed / Skipped / Total] 141 / 833 / 15 / 989:  99%|█████████▉| 989/1000 [1:53:24<01:15,  6.88s/it][Succeeded / Failed / Skipped / Total] 141 / 833 / 15 / 989:  99%|█████████▉| 990/1000 [1:53:27<01:08,  6.88s/it][Succeeded / Failed / Skipped / Total] 141 / 834 / 15 / 990:  99%|█████████▉| 990/1000 [1:53:27<01:08,  6.88s/it][Succeeded / Failed / Skipped / Total] 141 / 834 / 15 / 990:  99%|█████████▉| 991/1000 [1:53:28<01:01,  6.87s/it][Succeeded / Failed / Skipped / Total] 141 / 835 / 15 / 991:  99%|█████████▉| 991/1000 [1:53:28<01:01,  6.87s/it][Succeeded / Failed / Skipped / Total] 141 / 835 / 15 / 991:  99%|█████████▉| 992/1000 [1:53:28<00:54,  6.86s/it]Returns the buffered writer . --> [[[FAILED]]]

[[[[Adv]]]]: public PrintWriter getWriter ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter getWriter ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 986 ---------------------------------------------
Returns the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public ServletOutputStream getOutputStream ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream getOutputStream ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 987 ---------------------------------------------
Returns the class name . --> [[[FAILED]]]

[[[[Adv]]]]: public String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String getClassName ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 988 ---------------------------------------------
Gets the descriptor of a constructor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String getConstructorDescriptor ( final Constructor < ? > [[constructor]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[constructor]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String getConstructorDescriptor ( final Constructor < ? > [[builder]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[builder]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 989 ---------------------------------------------
Gets method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String getMethodDescriptor ( final Type returnType , final Type ... argumentTypes ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; returnType . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String getMethodDescriptor ( final Type returnType , final Type ... argumentTypes ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; returnType . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 990 ---------------------------------------------
Gets a method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String getMethodDescriptor ( final Method [[method]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[method]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( [[method]] . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String getMethodDescriptor ( final Method [[access]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[access]] . getParameterTypes ( ) ; for ( Class < ? > parameter : parameters ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( [[access]] . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 991 ---------------------------------------------
Append the descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: private void appendDescriptor ( final StringBuilder stringBuilder ) { if ( sort == OBJECT ) { stringBuilder . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { stringBuilder . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { stringBuilder . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void appendDescriptor ( final StringBuilder stringBuilder ) { if ( sort == OBJECT ) { stringBuilder . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { stringBuilder . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { stringBuilder . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
[Succeeded / Failed / Skipped / Total] 141 / 836 / 15 / 992:  99%|█████████▉| 992/1000 [1:53:28<00:54,  6.86s/it][Succeeded / Failed / Skipped / Total] 141 / 836 / 15 / 992:  99%|█████████▉| 993/1000 [1:53:28<00:47,  6.86s/it][Succeeded / Failed / Skipped / Total] 141 / 837 / 15 / 993:  99%|█████████▉| 993/1000 [1:53:28<00:47,  6.86s/it][Succeeded / Failed / Skipped / Total] 141 / 837 / 15 / 993:  99%|█████████▉| 994/1000 [1:53:29<00:41,  6.85s/it][Succeeded / Failed / Skipped / Total] 141 / 838 / 15 / 994:  99%|█████████▉| 994/1000 [1:53:29<00:41,  6.85s/it][Succeeded / Failed / Skipped / Total] 141 / 838 / 15 / 994: 100%|█████████▉| 995/1000 [1:53:29<00:34,  6.84s/it][Succeeded / Failed / Skipped / Total] 141 / 839 / 15 / 995: 100%|█████████▉| 995/1000 [1:53:29<00:34,  6.84s/it][Succeeded / Failed / Skipped / Total] 141 / 839 / 15 / 995: 100%|█████████▉| 996/1000 [1:53:30<00:27,  6.84s/it][Succeeded / Failed / Skipped / Total] 141 / 840 / 15 / 996: 100%|█████████▉| 996/1000 [1:53:30<00:27,  6.84s/it][Succeeded / Failed / Skipped / Total] 141 / 840 / 15 / 996: 100%|█████████▉| 997/1000 [1:53:31<00:20,  6.83s/it][Succeeded / Failed / Skipped / Total] 141 / 841 / 15 / 997: 100%|█████████▉| 997/1000 [1:53:31<00:20,  6.83s/it][Succeeded / Failed / Skipped / Total] 141 / 841 / 15 / 997: 100%|█████████▉| 998/1000 [1:53:33<00:13,  6.83s/it]--------------------------------------------- Result 992 ---------------------------------------------
Get the size of this object . --> [[[FAILED]]]

[[[[Adv]]]]: public int getSize ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int getSize ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 993 ---------------------------------------------
Gets the arguments and returns the sizes of the method . --> [[[FAILED]]]

[[[[Adv]]]]: public static int getArgumentsAndReturnSizes ( final String methodDescriptor ) { int argumentsSize = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int getArgumentsAndReturnSizes ( final String methodDescriptor ) { int argumentsSize = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 994 ---------------------------------------------
Mark the transaction as rollback only . --> [[[FAILED]]]

[[[[Adv]]]]: public void setRollbackOnly ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void setRollbackOnly ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 995 ---------------------------------------------
Commit or rollback resources . --> [[[FAILED]]]

[[[[Adv]]]]: protected void commitOrRollback ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void commitOrRollback ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "False" != "False" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "False" != "False" ; forcedRollback = "True" == "True" ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .
--------------------------------------------- Result 996 ---------------------------------------------
Resolves the bean name . --> [[[FAILED]]]

[[[[Adv]]]]: public String resolveBeanName ( final Class [[type]] , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) [[type]] ) . getAnnotation ( PetiteBean . class ) ; String [[name]] = null ; if ( petiteBean != null ) { [[name]] = petiteBean . value ( ) . trim ( ) ; } if ( ( [[name]] == null ) || ( [[name]] . length ( ) == 0 ) ) { if ( useLongTypeName ) { [[name]] = [[type]] . getName ( ) ; } else { [[name]] = StringUtil . uncapitalize ( [[type]] . getSimpleName ( ) ) ; } } return [[name]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String resolveBeanName ( final Class [[assortment]] , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) [[assortment]] ) . getAnnotation ( PetiteBean . class ) ; String [[henry]] = null ; if ( petiteBean != null ) { [[henry]] = petiteBean . value ( ) . trim ( ) ; } if ( ( [[henry]] == null ) || ( [[henry]] . length ( ) == 0 ) ) { if ( useLongTypeName ) { [[henry]] = [[assortment]] . getName ( ) ; } else { [[henry]] = StringUtil . uncapitalize ( [[assortment]] . getSimpleName ( ) ) ; } } return [[henry]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 997 ---------------------------------------------
Rolls back all resources . --> [[[FAILED]]]

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource [[resource]] = it . next ( ) ; try { [[resource]] . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource [[clinker]] = it . next ( ) ; try { [[clinker]] . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .
--------------------------------------------- Result 998 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 141 / 842 / 15 / 998: 100%|█████████▉| 998/1000 [1:53:33<00:13,  6.83s/it][Succeeded / Failed / Skipped / Total] 141 / 842 / 15 / 998: 100%|█████████▉| 999/1000 [1:54:06<00:06,  6.85s/it][Succeeded / Failed / Skipped / Total] 142 / 842 / 15 / 999: 100%|█████████▉| 999/1000 [1:54:06<00:06,  6.85s/it][Succeeded / Failed / Skipped / Total] 142 / 842 / 15 / 999: 100%|██████████| 1000/1000 [1:57:46<00:00,  7.07s/it][Succeeded / Failed / Skipped / Total] 142 / 843 / 15 / 1000: 100%|██████████| 1000/1000 [1:57:46<00:00,  7.07s/it]Attack(
  (search_method): ParticleSwarmOptimization(
    (pop_size):  60
    (max_iters):  20
    (post_turn_check):  True
    (max_turn_retries):  20
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapHowNet(
    (max_candidates):  -1
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 142 / 843 / 15 / 1000: 100%|██████████| 1000/1000 [1:57:49<00:00,  7.07s/it]Request resource from transaction manager . --> [[[FAILED]]]

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E [[resource]] = lookupResource ( resourceType ) ; if ( [[resource]] == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; [[resource]] = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , [[resource]] ) ) ; } return [[resource]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < E > E requestResource ( final Class < E > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; E [[lint]] = lookupResource ( resourceType ) ; if ( [[lint]] == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < E > resourceManager = txManager . lookupResourceManager ( resourceType ) ; [[lint]] = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , [[lint]] ) ) ; } return [[lint]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .
--------------------------------------------- Result 999 ---------------------------------------------
Initialize rules . --> Initialize the rules --> Socre: 1.0

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] [[files]] = new String [ pathList . size ( ) ] ; int [[index]] = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File [[file]] = iterator . next ( ) ; if ( [[file]] . isFile ( ) ) { [[files]] [ [[index]] ++ ] = [[file]] . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( [[index]] != 0 ) { FilesIterator filesIterator = new FilesIterator ( [[files]] ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void init ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] [[allegations]] = new String [ pathList . size ( ) ] ; int [[assortment]] = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File [[indictment]] = iterator . next ( ) ; if ( [[indictment]] . isFile ( ) ) { [[allegations]] [ [[assortment]] ++ ] = [[indictment]] . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( [[assortment]] != 0 ) { FilesIterator filesIterator = new FilesIterator ( [[allegations]] ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 1000 ---------------------------------------------
Read verification type information . --> [[[FAILED]]]

[[[[Adv]]]]: private int readVerificationTypeInfo ( final int verificationTypeInfoOffset , final Object [ ] [[frame]] , final int [[index]] , final char [ ] charBuffer , final Label [ ] [[labels]] ) { int currentOffset = verificationTypeInfoOffset ; int [[tag]] = b [ currentOffset ++ ] & 0xFF ; switch ( [[tag]] ) { case Frame . ITEM_TOP : [[frame]] [ [[index]] ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : [[frame]] [ [[index]] ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : [[frame]] [ [[index]] ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : [[frame]] [ [[index]] ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : [[frame]] [ [[index]] ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : [[frame]] [ [[index]] ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : [[frame]] [ [[index]] ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : [[frame]] [ [[index]] ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : [[frame]] [ [[index]] ] = createLabel ( readUnsignedShort ( currentOffset ) , [[labels]] ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int readVerificationTypeInfo ( final int verificationTypeInfoOffset , final Object [ ] [[contour]] , final int [[assortment]] , final char [ ] charBuffer , final Label [ ] [[blips]] ) { int currentOffset = verificationTypeInfoOffset ; int [[flag]] = b [ currentOffset ++ ] & 0xFF ; switch ( [[flag]] ) { case Frame . ITEM_TOP : [[contour]] [ [[assortment]] ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : [[contour]] [ [[assortment]] ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : [[contour]] [ [[assortment]] ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : [[contour]] [ [[assortment]] ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : [[contour]] [ [[assortment]] ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : [[contour]] [ [[assortment]] ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : [[contour]] [ [[assortment]] ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : [[contour]] [ [[assortment]] ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : [[contour]] [ [[assortment]] ] = createLabel ( readUnsignedShort ( currentOffset ) , [[blips]] ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

+-------------------------------+---------+
| Attack Results                |         |
+-------------------------------+---------+
| Number of successful attacks: | 142     |
| Number of failed attacks:     | 843     |
| Number of skipped attacks:    | 15      |
| Original accuracy:            | 98.5%   |
| Accuracy under attack:        | 84.3%   |
| Attack success rate:          | 14.42%  |
| Average perturbed word %:     | 39.76%  |
| Average num. words per input: | 3.91    |
| Avg num queries:              | 2019.36 |
| Original BLEU-4:              | 17.78   |
| Perturbed BLEU-4:             | 11.54   |
+-------------------------------+---------+


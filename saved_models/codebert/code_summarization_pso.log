Attempting to acquire lock 140482727752992 on /data/zzr/.cache/textattack/transformations/hownet/word_candidates_sense.pkl.lock
Lock 140482727752992 acquired on /data/zzr/.cache/textattack/transformations/hownet/word_candidates_sense.pkl.lock
Attempting to release lock 140482727752992 on /data/zzr/.cache/textattack/transformations/hownet/word_candidates_sense.pkl.lock
Lock 140482727752992 released on /data/zzr/.cache/textattack/transformations/hownet/word_candidates_sense.pkl.lock
textattack: Running 4 worker(s) on 4 GPU(s).
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 0 / 1 / 0 / 1:   0%|          | 1/1000 [00:00<00:00, 1577.99it/s][Succeeded / Failed / Skipped / Total] 0 / 2 / 0 / 2:   0%|          | 2/1000 [00:00<00:00, 1918.71it/s][Succeeded / Failed / Skipped / Total] 0 / 3 / 0 / 3:   0%|          | 3/1000 [00:00<00:00, 2175.47it/s][Succeeded / Failed / Skipped / Total] 0 / 4 / 0 / 4:   0%|          | 4/1000 [00:00<00:00, 2396.06it/s][Succeeded / Failed / Skipped / Total] 0 / 5 / 0 / 5:   0%|          | 5/1000 [00:00<00:00, 2541.08it/s][Succeeded / Failed / Skipped / Total] 0 / 5 / 0 / 5:   1%|          | 6/1000 [00:01<04:44,  3.50it/s]  [Succeeded / Failed / Skipped / Total] 0 / 6 / 0 / 6:   1%|          | 6/1000 [00:01<04:44,  3.50it/s][Succeeded / Failed / Skipped / Total] 0 / 7 / 0 / 7:   1%|          | 7/1000 [00:04<10:04,  1.64it/s][Succeeded / Failed / Skipped / Total] 0 / 8 / 0 / 8:   1%|          | 8/1000 [00:04<09:26,  1.75it/s]--------------------------------------------- Result 1 ---------------------------------------------
Wrap the given Observable into an Observable . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > wrap ( ObservableSource < T > [[source]] ) { ObjectHelper . requireNonNull ( [[source]] , "source is null" ) ; if ( [[source]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[source]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[source]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > wrap ( ObservableSource < T > [[genesis]] ) { ObjectHelper . requireNonNull ( [[genesis]] , "source is null" ) ; if ( [[genesis]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[genesis]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[genesis]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 2 ---------------------------------------------
Returns an observable sorted by the specified comparator . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[group]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 3 ---------------------------------------------
Adapts a ConnectableObserver to a Connectable Observable . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 4 ---------------------------------------------
Create a new instance of this processor . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 5 ---------------------------------------------
Create a new instance of this processor . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > create ( int capacityHint , Runnable onCancelled ) { ObjectHelper . requireNonNull ( onCancelled , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , onCancelled ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 6 ---------------------------------------------
Convert a scalar value to a Streamable --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Flowable < U > scalarXMap ( final T [[value]] , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[value]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > scalarXMap ( final T [[judge]] , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[judge]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 7 ---------------------------------------------
Construct a Maybe from a Completable --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromCompletable ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromCompletable ( CompletableSource completableSource ) { ObjectHelper . requireNonNull ( completableSource , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( completableSource ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 8 ---------------------------------------------
Construct a Maybe from a single source . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromSingle ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > fromSingle ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 9 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 9 / 0 / 9:   1%|          | 9/1000 [00:08<15:29,  1.07it/s][Succeeded / Failed / Skipped / Total] 0 / 10 / 0 / 10:   1%|          | 10/1000 [00:08<14:32,  1.14it/s][Succeeded / Failed / Skipped / Total] 0 / 11 / 0 / 11:   1%|          | 11/1000 [00:08<13:25,  1.23it/s][Succeeded / Failed / Skipped / Total] 0 / 11 / 0 / 11:   1%|          | 12/1000 [00:09<13:30,  1.22it/s][Succeeded / Failed / Skipped / Total] 0 / 12 / 0 / 12:   1%|          | 12/1000 [00:09<13:30,  1.22it/s][Succeeded / Failed / Skipped / Total] 0 / 13 / 0 / 13:   1%|▏         | 13/1000 [00:10<12:50,  1.28it/s][Succeeded / Failed / Skipped / Total] 0 / 14 / 0 / 14:   1%|▏         | 14/1000 [00:11<13:42,  1.20it/s][Succeeded / Failed / Skipped / Total] 0 / 15 / 0 / 15:   2%|▏         | 15/1000 [00:15<16:40,  1.02s/it]Retries the given number of times after the given predicate . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[times]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[times]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[ages]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[ages]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 10 ---------------------------------------------
Checks that the specified object is not null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > T requireNonNull ( T object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < T > T requireNonNull ( T object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 11 ---------------------------------------------
Tries to apply scalar function to the provided subscriber . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( Publisher < T > [[source]] , Subscriber < ? super R > [[subscriber]] , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( [[source]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[source]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return True ; } if ( t == null ) { EmptySubscription . complete ( [[subscriber]] ) ; return True ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return True ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return True ; } if ( u == null ) { EmptySubscription . complete ( [[subscriber]] ) ; return True ; } [[subscriber]] . onSubscribe ( new ScalarSubscription < R > ( [[subscriber]] , u ) ) ; } else { r . subscribe ( [[subscriber]] ) ; } return True ; } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( Publisher < T > [[basis]] , Subscriber < ? super R > [[user]] , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( [[basis]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[basis]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[user]] ) ; return True ; } if ( t == null ) { EmptySubscription . complete ( [[user]] ) ; return True ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[user]] ) ; return True ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[user]] ) ; return True ; } if ( u == null ) { EmptySubscription . complete ( [[user]] ) ; return True ; } [[user]] . onSubscribe ( new ScalarSubscription < R > ( [[user]] , u ) ) ; } else { r . subscribe ( [[user]] ) ; } return True ; } return "[["False" != "False"]]" != "[["False" != "False"]]" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 12 ---------------------------------------------
Returns an identity function . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > [[identity]] ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T > Function < T , T > [[caste]] ( ) { return ( Function < T , T > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 13 ---------------------------------------------
Fast implementation for fast - path elements . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void fastPathOrderedEmit ( U [[value]] , boolean delayError , Disposable disposable ) { final Observer < ? super V > [[observer]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[observer]] , [[value]] ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( [[value]] ) ; } } else { q . offer ( [[value]] ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[observer]] , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void fastPathOrderedEmit ( U [[comment]] , boolean delayError , Disposable disposable ) { final Observer < ? super V > [[appraiser]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[appraiser]] , [[comment]] ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( [[comment]] ) ; } } else { q . offer ( [[comment]] ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[appraiser]] , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 14 ---------------------------------------------
Cast function . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Function < T , U > castFunction ( Class < U > [[target]] ) { return new CastToClass < T , U > ( [[target]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < T , U > Function < T , U > castFunction ( Class < U > [[clout]] ) { return new CastToClass < T , U > ( [[clout]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 15 ---------------------------------------------
Wraps the given value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > justCallable ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > justCallable ( T [[bother]] ) { return new JustValue < Object , T > ( [[bother]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 16 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 0 / 16 / 0 / 16:   2%|▏         | 16/1000 [00:16<16:26,  1.00s/it]Returns a function that wraps a value . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Function < T , U > justFunction ( U [[value]] ) { return new JustValue < T , U > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < T , U > Function < T , U > justFunction ( U [[review]] ) { return new JustValue < T , U > ( [[review]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 17 ---------------------------------------------
Create a new instance of the specified capacity . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint , Runnable onTerminate ) { return new UnicastSubject < T > ( capacityHint , onTerminate , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint , Runnable onTerminate ) { return new UnicastSubject < T > ( capacityHint , onTerminate , "[["""""""""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""""" == """"""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""""" == """""""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""""" == """"""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""""""" == """"""""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""""" == """"""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""""" == """""""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""""" == """"""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""""""" == """""""""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""""" == """"""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""""" == """""""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""""" == """"""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""""""" == """"""""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""""" == """"""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""""" == """""""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""""" == """"""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""""""""]]" == "[["""""""""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""""" == """"""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""""" == """""""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""""" == """"""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""""""" == """"""""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""""" == """"""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""""" == """""""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""""" == """"""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""""""" == """""""""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""""" == """"""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""""" == """""""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""""" == """"""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""""""" == """"""""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""""" == """"""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""""" == """""""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""""" == """"""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""" == """""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""""""""]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .[Succeeded / Failed / Skipped / Total] 0 / 17 / 0 / 17:   2%|▏         | 17/1000 [00:37<35:50,  2.19s/it][Succeeded / Failed / Skipped / Total] 0 / 17 / 0 / 17:   2%|▏         | 18/1000 [00:37<34:06,  2.08s/it][Succeeded / Failed / Skipped / Total] 0 / 18 / 0 / 18:   2%|▏         | 18/1000 [00:37<34:06,  2.08s/it][Succeeded / Failed / Skipped / Total] 0 / 18 / 0 / 18:   2%|▏         | 19/1000 [00:37<32:33,  1.99s/it][Succeeded / Failed / Skipped / Total] 0 / 19 / 0 / 19:   2%|▏         | 19/1000 [00:37<32:34,  1.99s/it][Succeeded / Failed / Skipped / Total] 0 / 19 / 0 / 19:   2%|▏         | 20/1000 [00:45<37:29,  2.29s/it][Succeeded / Failed / Skipped / Total] 0 / 20 / 0 / 20:   2%|▏         | 20/1000 [00:45<37:29,  2.29s/it][Succeeded / Failed / Skipped / Total] 0 / 20 / 0 / 20:   2%|▏         | 21/1000 [01:06<52:02,  3.19s/it][Succeeded / Failed / Skipped / Total] 1 / 20 / 0 / 21:   2%|▏         | 21/1000 [01:06<52:02,  3.19s/it][Succeeded / Failed / Skipped / Total] 1 / 20 / 0 / 21:   2%|▏         | 22/1000 [01:12<53:44,  3.30s/it][Succeeded / Failed / Skipped / Total] 1 / 21 / 0 / 22:   2%|▏         | 22/1000 [01:12<53:44,  3.30s/it][Succeeded / Failed / Skipped / Total] 1 / 21 / 0 / 22:   2%|▏         | 23/1000 [01:14<52:29,  3.22s/it][Succeeded / Failed / Skipped / Total] 2 / 21 / 0 / 23:   2%|▏         | 23/1000 [01:14<52:29,  3.22s/it][Succeeded / Failed / Skipped / Total] 2 / 21 / 0 / 23:   2%|▏         | 24/1000 [01:38<1:06:51,  4.11s/it]
--------------------------------------------- Result 18 ---------------------------------------------
Create a new unicast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean delayError ) { return new UnicastSubject < T > ( bufferSize ( ) , delayError ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( boolean delayError ) { return new UnicastSubject < T > ( bufferSize ( ) , delayError ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 19 ---------------------------------------------
Wait for the task . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable blockingGetError ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable blockingGetError ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 20 ---------------------------------------------
Get an error from the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable blockingGetError ( long timeout , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[unit]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , [[unit]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable blockingGetError ( long timeout , TimeUnit [[army]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[army]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , [[army]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 21 ---------------------------------------------
Wait for the task . --> Blocks waiting for an error --> Socre: 1.0

[[[[Adv]]]]: public boolean blockingAwait ( long [[timeout]] , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , [[unit]] ) ) { dispose ( ) ; return "[[False]]" != "[[False]]" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( [[ex]] ) ; } } Throwable [[ex]] = error ; if ( [[ex]] != null ) { throw ExceptionHelper . wrapOrThrow ( [[ex]] ) ; } return True ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean blockingAwait ( long [[overtime]] , TimeUnit [[corps]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[overtime]] , [[corps]] ) ) { dispose ( ) ; return "[["False" != "False"]]" != "[["False" != "False"]]" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( [[outrageousness]] ) ; } } Throwable [[outrageousness]] = error ; if ( [[outrageousness]] != null ) { throw ExceptionHelper . wrapOrThrow ( [[outrageousness]] ) ; } return True ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 22 ---------------------------------------------
Removes the maximum number of items from queue . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int [[missed]] = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } [[missed]] = qd . leave ( - [[missed]] ) ; if ( [[missed]] == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int [[contempt]] = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = qd . requested ( ) ; if ( r != 0L ) { if ( qd . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } [[contempt]] = qd . leave ( - [[contempt]] ) ; if ( [[contempt]] == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 23 ---------------------------------------------
Sends a request to the given subscription . --> supports a subscription --> Socre: 1.0

[[[[Adv]]]]: public static void [[request]] ( Subscription s , int prefetch ) { s . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void [[appeal]] ( Subscription s , int prefetch ) { s . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 24 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 3 / 21 / 0 / 24:   2%|▏         | 24/1000 [01:38<1:06:52,  4.11s/it][Succeeded / Failed / Skipped / Total] 3 / 21 / 0 / 24:   2%|▎         | 25/1000 [01:39<1:04:23,  3.96s/it][Succeeded / Failed / Skipped / Total] 3 / 22 / 0 / 25:   2%|▎         | 25/1000 [01:39<1:04:23,  3.96s/it][Succeeded / Failed / Skipped / Total] 3 / 22 / 0 / 25:   3%|▎         | 26/1000 [01:39<1:02:02,  3.82s/it][Succeeded / Failed / Skipped / Total] 3 / 23 / 0 / 26:   3%|▎         | 26/1000 [01:39<1:02:02,  3.82s/it][Succeeded / Failed / Skipped / Total] 3 / 23 / 0 / 26:   3%|▎         | 27/1000 [01:39<59:51,  3.69s/it]  [Succeeded / Failed / Skipped / Total] 3 / 24 / 0 / 27:   3%|▎         | 27/1000 [01:39<59:51,  3.69s/it][Succeeded / Failed / Skipped / Total] 3 / 24 / 0 / 27:   3%|▎         | 28/1000 [01:45<1:01:04,  3.77s/it][Succeeded / Failed / Skipped / Total] 4 / 24 / 0 / 28:   3%|▎         | 28/1000 [01:45<1:01:04,  3.77s/it][Succeeded / Failed / Skipped / Total] 4 / 24 / 0 / 28:   3%|▎         | 29/1000 [01:53<1:03:04,  3.90s/it][Succeeded / Failed / Skipped / Total] 4 / 25 / 0 / 29:   3%|▎         | 29/1000 [01:53<1:03:04,  3.90s/it][Succeeded / Failed / Skipped / Total] 4 / 25 / 0 / 29:   3%|▎         | 30/1000 [01:57<1:03:28,  3.93s/it]Post complete completion . --> A convenience method for postComplete --> Socre: 1.0

[[[[Adv]]]]: public static < T > void postComplete ( Subscriber < ? super T > actual , Queue < T > [[queue]] , AtomicLong [[state]] , BooleanSupplier isCancelled ) { if ( [[queue]] . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[state]] . get ( ) , actual , [[queue]] , [[state]] , isCancelled ) ) { return ; } for ( ; ; ) { long r = [[state]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void postComplete ( Subscriber < ? super T > actual , Queue < T > [[column]] , AtomicLong [[nation]] , BooleanSupplier isCancelled ) { if ( [[column]] . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[nation]] . get ( ) , actual , [[column]] , [[nation]] , isCancelled ) ) { return ; } for ( ; ; ) { long r = [[nation]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 25 ---------------------------------------------
Completes the next value . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 26 ---------------------------------------------
Returns the value of the notification . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T getValue ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T getValue ( ) { Object o = value ; if ( o != null && ! NotificationLite . isError ( o ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 27 ---------------------------------------------
Gets the error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable getError ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable getError ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 28 ---------------------------------------------
Validates that two streams are not disposed . --> Compares two DisposableDisposable objects --> Socre: 1.0

[[[[Adv]]]]: public static boolean validate ( Disposable upstream , Disposable next , Class < ? > [[observer]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[observer]] ) ; } return "[[False]]" != "[[False]]" ; } return True ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Disposable upstream , Disposable next , Class < ? > [[critic]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[critic]] ) ; } return "[["False" != "False"]]" != "[["False" != "False"]]" ; } return True ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 29 ---------------------------------------------
Atomically updates the AtomicReference with the given AtomicReference . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > upstream , Disposable next , Class < ? > [[observer]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( upstream . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[observer]] ) ; } return False ; } return True ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > upstream , Disposable next , Class < ? > [[appraiser]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( upstream . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( [[appraiser]] ) ; } return False ; } return True ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 30 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 4 / 26 / 0 / 30:   3%|▎         | 30/1000 [01:57<1:03:28,  3.93s/it][Succeeded / Failed / Skipped / Total] 4 / 26 / 0 / 30:   3%|▎         | 31/1000 [02:09<1:07:14,  4.16s/it][Succeeded / Failed / Skipped / Total] 4 / 27 / 0 / 31:   3%|▎         | 31/1000 [02:09<1:07:14,  4.16s/it][Succeeded / Failed / Skipped / Total] 4 / 27 / 0 / 31:   3%|▎         | 32/1000 [02:09<1:05:13,  4.04s/it][Succeeded / Failed / Skipped / Total] 4 / 28 / 0 / 32:   3%|▎         | 32/1000 [02:09<1:05:13,  4.04s/it][Succeeded / Failed / Skipped / Total] 4 / 28 / 0 / 32:   3%|▎         | 33/1000 [02:09<1:03:20,  3.93s/it][Succeeded / Failed / Skipped / Total] 4 / 29 / 0 / 33:   3%|▎         | 33/1000 [02:09<1:03:20,  3.93s/it][Succeeded / Failed / Skipped / Total] 4 / 29 / 0 / 33:   3%|▎         | 34/1000 [02:16<1:04:31,  4.01s/it][Succeeded / Failed / Skipped / Total] 4 / 30 / 0 / 34:   3%|▎         | 34/1000 [02:16<1:04:31,  4.01s/it][Succeeded / Failed / Skipped / Total] 4 / 30 / 0 / 34:   4%|▎         | 35/1000 [02:18<1:03:35,  3.95s/it][Succeeded / Failed / Skipped / Total] 4 / 31 / 0 / 35:   4%|▎         | 35/1000 [02:18<1:03:35,  3.95s/it][Succeeded / Failed / Skipped / Total] 4 / 31 / 0 / 35:   4%|▎         | 36/1000 [02:18<1:01:53,  3.85s/it][Succeeded / Failed / Skipped / Total] 4 / 32 / 0 / 36:   4%|▎         | 36/1000 [02:18<1:01:53,  3.85s/it][Succeeded / Failed / Skipped / Total] 4 / 32 / 0 / 36:   4%|▎         | 37/1000 [02:19<1:00:42,  3.78s/it][Succeeded / Failed / Skipped / Total] 4 / 33 / 0 / 37:   4%|▎         | 37/1000 [02:19<1:00:42,  3.78s/it][Succeeded / Failed / Skipped / Total] 4 / 33 / 0 / 37:   4%|▍         | 38/1000 [02:21<59:39,  3.72s/it]  Checks whether the upstream two Subscription objects are valid . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean validate ( Subscription upstream , Subscription next , Class < ? > [[subscriber]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( [[subscriber]] ) ; } return "[[False]]" != "[[False]]" ; } return True ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Subscription upstream , Subscription next , Class < ? > [[user]] ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . cancel ( ) ; if ( upstream != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( [[user]] ) ; } return "[["False" != "False"]]" != "[["False" != "False"]]" ; } return True ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 31 ---------------------------------------------
Reset all variables . --> [[[FAILED]]]

[[[[Adv]]]]: public static void reset ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( False ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void reset ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( False ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 32 ---------------------------------------------
Adds a cap . --> [[[FAILED]]]

[[[[Adv]]]]: public static long addCap ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long addCap ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 33 ---------------------------------------------
Multiplies a capacity . --> [[[FAILED]]]

[[[[Adv]]]]: public static long multiplyCap ( long a , long b ) { long u = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( u / a != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long multiplyCap ( long a , long b ) { long u = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( u / a != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 34 ---------------------------------------------
Add n . --> [[[FAILED]]]

[[[[Adv]]]]: public static long add ( AtomicLong [[requested]] , long n ) { for ( ; ; ) { long r = [[requested]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( [[requested]] . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long add ( AtomicLong [[requisite]] , long n ) { for ( ; ; ) { long r = [[requisite]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( [[requisite]] . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 35 ---------------------------------------------
Converts an exception into a NullPointerException --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException toNpe ( Throwable [[ex]] ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( [[ex]] ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException toNpe ( Throwable [[ultra]] ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( [[ultra]] ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 36 ---------------------------------------------
Add an object to the list --> [[[FAILED]]]

[[[[Adv]]]]: public void add ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void add ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 37 ---------------------------------------------
Shuts down the background thread . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[conclusion]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 38 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 4 / 34 / 0 / 38:   4%|▍         | 38/1000 [02:21<59:39,  3.72s/it][Succeeded / Failed / Skipped / Total] 4 / 34 / 0 / 38:   4%|▍         | 39/1000 [02:21<58:17,  3.64s/it][Succeeded / Failed / Skipped / Total] 4 / 35 / 0 / 39:   4%|▍         | 39/1000 [02:21<58:17,  3.64s/it][Succeeded / Failed / Skipped / Total] 4 / 35 / 0 / 39:   4%|▍         | 40/1000 [03:15<1:18:05,  4.88s/it][Succeeded / Failed / Skipped / Total] 4 / 36 / 0 / 40:   4%|▍         | 40/1000 [03:15<1:18:05,  4.88s/it][Succeeded / Failed / Skipped / Total] 4 / 36 / 0 / 40:   4%|▍         | 41/1000 [03:19<1:17:47,  4.87s/it][Succeeded / Failed / Skipped / Total] 4 / 37 / 0 / 41:   4%|▍         | 41/1000 [03:19<1:17:47,  4.87s/it][Succeeded / Failed / Skipped / Total] 4 / 37 / 0 / 41:   4%|▍         | 42/1000 [03:27<1:18:58,  4.95s/it][Succeeded / Failed / Skipped / Total] 4 / 38 / 0 / 42:   4%|▍         | 42/1000 [03:27<1:18:58,  4.95s/it][Succeeded / Failed / Skipped / Total] 4 / 38 / 0 / 42:   4%|▍         | 43/1000 [03:28<1:17:12,  4.84s/it][Succeeded / Failed / Skipped / Total] 4 / 39 / 0 / 43:   4%|▍         | 43/1000 [03:28<1:17:12,  4.84s/it][Succeeded / Failed / Skipped / Total] 4 / 39 / 0 / 43:   4%|▍         | 44/1000 [03:36<1:18:30,  4.93s/it]Creates a ScheduledExecutorService . --> [[[FAILED]]]

[[[[Adv]]]]: public static ScheduledExecutorService create ( ThreadFactory [[factory]] ) { final ScheduledExecutorService exec = Executors . newScheduledThreadPool ( 1 , [[factory]] ) ; tryPutIntoPool ( PURGE_ENABLED , exec ) ; return exec ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService create ( ThreadFactory [[maker]] ) { final ScheduledExecutorService exec = Executors . newScheduledThreadPool ( 1 , [[maker]] ) ; tryPutIntoPool ( PURGE_ENABLED , exec ) ; return exec ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 39 ---------------------------------------------
Sets a new subscription . --> [[[FAILED]]]

[[[[Adv]]]]: public final void setSubscription ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( s ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void setSubscription ( Subscription s ) { if ( cancelled ) { s . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( s , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = s ; long r = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( r != 0L ) { s . request ( r ) ; } return ; } Subscription a = missedSubscription . getAndSet ( s ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 40 ---------------------------------------------
Create a new unicast subject with the specified capacity . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint ) { return new UnicastSubject < T > ( capacityHint , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > create ( int capacityHint ) { return new UnicastSubject < T > ( capacityHint , "[[""""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""]]" == "[[""""""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""""" == """"""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""" == """""True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True"""" == """"True" == "True"" == ""True" == "True""" == """True" == "True"" == ""True" == "True""""""]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 41 ---------------------------------------------
Wraps a RuntimeException into a RuntimeException . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException wrapOrThrow ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException wrapOrThrow ( Throwable [[fault]] ) { if ( [[fault]] instanceof Error ) { throw ( Error ) [[fault]] ; } if ( [[fault]] instanceof RuntimeException ) { return ( RuntimeException ) [[fault]] ; } return new RuntimeException ( [[fault]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 42 ---------------------------------------------
Flatten the given exception into a flat list . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable t ) { List < Throwable > [[list]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { [[list]] . add ( e ) ; } } return [[list]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > flatten ( Throwable t ) { List < Throwable > [[exhaust]] = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { [[exhaust]] . add ( e ) ; } } return [[exhaust]] ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 43 ---------------------------------------------
Wraps the given exception if it is an exception . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < E extends Throwable > Exception throwIfThrowable ( Throwable e ) throws E { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( E ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < E extends Throwable > Exception throwIfThrowable ( Throwable e ) throws E { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( E ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 44 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 5 / 39 / 0 / 44:   4%|▍         | 44/1000 [03:36<1:18:30,  4.93s/it][Succeeded / Failed / Skipped / Total] 5 / 39 / 0 / 44:   4%|▍         | 45/1000 [04:00<1:24:55,  5.34s/it][Succeeded / Failed / Skipped / Total] 5 / 40 / 0 / 45:   4%|▍         | 45/1000 [04:00<1:24:55,  5.34s/it][Succeeded / Failed / Skipped / Total] 5 / 40 / 0 / 45:   5%|▍         | 46/1000 [04:22<1:30:53,  5.72s/it][Succeeded / Failed / Skipped / Total] 6 / 40 / 0 / 46:   5%|▍         | 46/1000 [04:22<1:30:53,  5.72s/it][Succeeded / Failed / Skipped / Total] 6 / 40 / 0 / 46:   5%|▍         | 47/1000 [04:32<1:32:13,  5.81s/it][Succeeded / Failed / Skipped / Total] 6 / 41 / 0 / 47:   5%|▍         | 47/1000 [04:32<1:32:13,  5.81s/it][Succeeded / Failed / Skipped / Total] 6 / 41 / 0 / 47:   5%|▍         | 48/1000 [04:44<1:34:11,  5.94s/it][Succeeded / Failed / Skipped / Total] 6 / 42 / 0 / 48:   5%|▍         | 48/1000 [04:44<1:34:11,  5.94s/it][Succeeded / Failed / Skipped / Total] 6 / 42 / 0 / 48:   5%|▍         | 49/1000 [04:50<1:33:50,  5.92s/it][Succeeded / Failed / Skipped / Total] 6 / 43 / 0 / 49:   5%|▍         | 49/1000 [04:50<1:33:50,  5.92s/it][Succeeded / Failed / Skipped / Total] 6 / 43 / 0 / 49:   5%|▌         | 50/1000 [04:54<1:33:11,  5.89s/it]Removes all resources . --> Dispose resources --> Socre: 1.0

[[[[Adv]]]]: public void clear ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[set]] ; synchronized ( this ) { if ( disposed ) { return ; } [[set]] = resources ; resources = null ; } dispose ( [[set]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void clear ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > [[coil]] ; synchronized ( this ) { if ( disposed ) { return ; } [[coil]] = resources ; resources = null ; } dispose ( [[coil]] ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 45 ---------------------------------------------
Returns the number of available resources . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > set = resources ; return set != null ? set . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[measurement]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > set = resources ; return set != null ? set . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 46 ---------------------------------------------
Tries to perform a scalar operation on the given source . --> Utility method for testing --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > [[source]] , Observer < ? super R > [[observer]] , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( [[source]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[source]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[observer]] ) ; return "[[True]]" == "[[True]]" ; } if ( t == null ) { EmptyDisposable . complete ( [[observer]] ) ; return "[[True]]" == "[[True]]" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[observer]] ) ; return "[[True]]" == "[[True]]" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[observer]] ) ; return "[[True]]" == "[[True]]" ; } if ( u == null ) { EmptyDisposable . complete ( [[observer]] ) ; return "[[True]]" == "[[True]]" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( [[observer]] , u ) ; [[observer]] . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( [[observer]] ) ; } return "[[True]]" == "[[True]]" ; } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > [[genesis]] , Observer < ? super R > [[appraiser]] , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( [[genesis]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[genesis]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[appraiser]] ) ; return "[["True" == "True"]]" == "[["True" == "True"]]" ; } if ( t == null ) { EmptyDisposable . complete ( [[appraiser]] ) ; return "[["True" == "True"]]" == "[["True" == "True"]]" ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[appraiser]] ) ; return "[["True" == "True"]]" == "[["True" == "True"]]" ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[appraiser]] ) ; return "[["True" == "True"]]" == "[["True" == "True"]]" ; } if ( u == null ) { EmptyDisposable . complete ( [[appraiser]] ) ; return "[["True" == "True"]]" == "[["True" == "True"]]" ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( [[appraiser]] , u ) ; [[appraiser]] . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( [[appraiser]] ) ; } return "[["True" == "True"]]" == "[["True" == "True"]]" ; } return "[["False" != "False"]]" != "[["False" != "False"]]" ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 47 ---------------------------------------------
Performs a scalar operation on an Observable object . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > Observable < U > scalarXMap ( T [[value]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[value]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > scalarXMap ( T [[criticism]] , Function < ? super T , ? extends ObservableSource < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[criticism]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 48 ---------------------------------------------
Accept a subscriber . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > [[subscriber]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[subscriber]] ) ) { return True ; } } a = ( Object [ ] ) a [ c ] ; } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > [[user]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[user]] ) ) { return True ; } } a = ( Object [ ] ) a [ c ] ; } return "[["False" != "False"]]" != "[["False" != "False"]]" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 49 ---------------------------------------------
Accepts an object from the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > [[observer]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[observer]] ) ) { return True ; } } a = ( Object [ ] ) a [ c ] ; } return False ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > [[commentator]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[commentator]] ) ) { return True ; } } a = ( Object [ ] ) a [ c ] ; } return False ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
[Succeeded / Failed / Skipped / Total] 7 / 43 / 0 / 50:   5%|▌         | 50/1000 [04:54<1:33:11,  5.89s/it][Succeeded / Failed / Skipped / Total] 7 / 43 / 0 / 50:   5%|▌         | 51/1000 [04:54<1:31:21,  5.78s/it][Succeeded / Failed / Skipped / Total] 7 / 44 / 0 / 51:   5%|▌         | 51/1000 [04:54<1:31:21,  5.78s/it][Succeeded / Failed / Skipped / Total] 7 / 44 / 0 / 51:   5%|▌         | 52/1000 [05:04<1:32:25,  5.85s/it][Succeeded / Failed / Skipped / Total] 7 / 45 / 0 / 52:   5%|▌         | 52/1000 [05:04<1:32:25,  5.85s/it][Succeeded / Failed / Skipped / Total] 7 / 45 / 0 / 52:   5%|▌         | 53/1000 [05:04<1:30:40,  5.74s/it][Succeeded / Failed / Skipped / Total] 7 / 46 / 0 / 53:   5%|▌         | 53/1000 [05:04<1:30:40,  5.74s/it]
  0%|          | 0/1000 [00:00<?, ?it/s]  0%|          | 1/1000 [00:23<6:35:29, 23.75s/it][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 1/1000 [00:23<6:35:29, 23.75s/it][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 2/1000 [00:43<5:59:44, 21.63s/it][Succeeded / Failed / Skipped / Total] 1 / 1 / 0 / 2:   0%|          | 2/1000 [00:43<5:59:45, 21.63s/it][Succeeded / Failed / Skipped / Total] 1 / 1 / 0 / 2:   0%|          | 3/1000 [01:01<5:41:34, 20.56s/it][Succeeded / Failed / Skipped / Total] 2 / 1 / 0 / 3:   0%|          | 3/1000 [01:01<5:41:34, 20.56s/it][Succeeded / Failed / Skipped / Total] 2 / 1 / 0 / 3:   0%|          | 4/1000 [01:12<5:01:27, 18.16s/it][Succeeded / Failed / Skipped / Total] 3 / 1 / 0 / 4:   0%|          | 4/1000 [01:12<5:01:28, 18.16s/it][Succeeded / Failed / Skipped / Total] 3 / 1 / 0 / 4:   0%|          | 5/1000 [01:21<4:29:50, 16.27s/it][Succeeded / Failed / Skipped / Total] 4 / 1 / 0 / 5:   0%|          | 5/1000 [01:21<4:29:50, 16.27s/it][Succeeded / Failed / Skipped / Total] 4 / 1 / 0 / 5:   1%|          | 6/1000 [01:44<4:48:46, 17.43s/it][Succeeded / Failed / Skipped / Total] 5 / 1 / 0 / 6:   1%|          | 6/1000 [01:44<4:48:46, 17.43s/it][Succeeded / Failed / Skipped / Total] 5 / 1 / 0 / 6:   1%|          | 7/1000 [02:14<5:17:15, 19.17s/it]Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  delete
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapEmbedding(
    (max_candidates):  50
    (embedding):  WordEmbedding
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

--------------------------------------------- Result 1 ---------------------------------------------
Fast implementation for fast - path elements . --> Enqueue a value --> Socre: 1.0

[[[[Adv]]]]: protected final void [[fastPathOrderedEmit]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > [[q]] = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( [[q]] . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { [[q]] . offer ( value ) ; } } else { [[q]] . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( [[q]] , observer , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void [[helm]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > observer = downstream ; final SimplePlainQueue < U > [[please]] = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( [[please]] . isEmpty ( ) ) { accept ( observer , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { [[please]] . offer ( value ) ; } } else { [[please]] . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( [[please]] , observer , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .


--------------------------------------------- Result 2 ---------------------------------------------
Wrap an ObservableSource . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > [[source]] ) { ObjectHelper . requireNonNull ( [[source]] , "source is null" ) ; if ( [[source]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[source]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[source]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[shawl]] ( ObservableSource < T > [[causes]] ) { ObjectHelper . requireNonNull ( [[causes]] , "source is null" ) ; if ( [[causes]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[causes]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[causes]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .


--------------------------------------------- Result 3 ---------------------------------------------
Returns a sorted observable sorted by the specified comparator . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[classed]] ( Comparator < ? super T > [[guys]] ) { ObjectHelper . requireNonNull ( [[guys]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[guys]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .


--------------------------------------------- Result 4 ---------------------------------------------
Adapts a CompletableObservableObservableObservable using the supplied scheduler . --> Adapts a ConnectableObserver to a ConnectableObserver --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[observeOn]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > [[anointed]] ( final ConnectableObservable < T > co , final Scheduler scheduler ) { final Observable < T > observable = co . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .


--------------------------------------------- Result 5 ---------------------------------------------
Create a new instance of this processor . --> Build a new instance of this processor --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[build]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .


--------------------------------------------- Result 6 ---------------------------------------------
Create a new instance of this processor . --> Create new processor --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int [[capacityHint]] , Runnable [[onCancelled]] ) { ObjectHelper . requireNonNull ( [[onCancelled]] , "onTerminate" ) ; return new UnicastProcessor < T > ( [[capacityHint]] , [[onCancelled]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[construct]] ( int [[raza]] , Runnable [[avoiding]] ) { ObjectHelper . requireNonNull ( [[avoiding]] , "onTerminate" ) ; return new UnicastProcessor < T > ( [[raza]] , [[avoiding]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .


--------------------------------------------- Result 7 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 6 / 1 / 0 / 7:   1%|          | 7/1000 [02:14<5:17:15, 19.17s/it][Succeeded / Failed / Skipped / Total] 6 / 1 / 0 / 7:   1%|          | 8/1000 [02:31<5:12:15, 18.89s/it][Succeeded / Failed / Skipped / Total] 7 / 1 / 0 / 8:   1%|          | 8/1000 [02:31<5:12:15, 18.89s/it][Succeeded / Failed / Skipped / Total] 7 / 1 / 0 / 8:   1%|          | 9/1000 [02:43<4:59:10, 18.11s/it][Succeeded / Failed / Skipped / Total] 7 / 2 / 0 / 9:   1%|          | 9/1000 [02:43<4:59:10, 18.11s/it][Succeeded / Failed / Skipped / Total] 7 / 2 / 0 / 9:   1%|          | 10/1000 [02:58<4:54:38, 17.86s/it][Succeeded / Failed / Skipped / Total] 7 / 3 / 0 / 10:   1%|          | 10/1000 [02:58<4:54:38, 17.86s/it][Succeeded / Failed / Skipped / Total] 7 / 3 / 0 / 10:   1%|          | 11/1000 [03:06<4:38:43, 16.91s/it][Succeeded / Failed / Skipped / Total] 8 / 3 / 0 / 11:   1%|          | 11/1000 [03:06<4:38:43, 16.91s/it][Succeeded / Failed / Skipped / Total] 8 / 3 / 0 / 11:   1%|          | 12/1000 [03:34<4:54:04, 17.86s/it]Tries to apply a scalar function to a subscriber . --> Dummy method for testing --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return True ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return True ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return True ; } if ( r instanceof Callable ) { R [[u]] ; try { [[u]] = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return True ; } if ( [[u]] == null ) { EmptySubscription . complete ( subscriber ) ; return True ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , [[u]] ) ) ; } else { r . subscribe ( subscriber ) ; } return True ; } return False ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[dingle]] ( Publisher < T > source , Subscriber < ? super R > subscriber , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return True ; } if ( t == null ) { EmptySubscription . complete ( subscriber ) ; return True ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return True ; } if ( r instanceof Callable ) { R [[nor]] ; try { [[nor]] = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , subscriber ) ; return True ; } if ( [[nor]] == null ) { EmptySubscription . complete ( subscriber ) ; return True ; } subscriber . onSubscribe ( new ScalarSubscription < R > ( subscriber , [[nor]] ) ) ; } else { r . subscribe ( subscriber ) ; } return True ; } return False ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .


--------------------------------------------- Result 8 ---------------------------------------------
Exports a scalar value into a Streamable --> Zone operation --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Flowable < U > [[scalarXMap]] ( final T [[value]] , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[value]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > [[zhan]] ( final T [[amount]] , final Function < ? super T , ? extends Publisher < ? extends U > > mapper ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[amount]] , mapper ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .


--------------------------------------------- Result 9 ---------------------------------------------
Reset all settings . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[reset]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[[False]]" != "[[False]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void [[boots]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( "[["Imposter" != "Imposter"]]" != "[["Imposter" != "Imposter"]]" ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .


--------------------------------------------- Result 10 ---------------------------------------------
Construct a Maybe from a Completable --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource [[completableSource]] ) { ObjectHelper . requireNonNull ( [[completableSource]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[completableSource]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[silverstone]] ( CompletableSource [[stormtrooper]] ) { ObjectHelper . requireNonNull ( [[stormtrooper]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[stormtrooper]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .


--------------------------------------------- Result 11 ---------------------------------------------
Construct a Maybe from a single element . --> From single source --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[hillard]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .


--------------------------------------------- Result 12 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 8 / 4 / 0 / 12:   1%|          | 12/1000 [03:34<4:54:04, 17.86s/it][Succeeded / Failed / Skipped / Total] 8 / 4 / 0 / 12:   1%|▏         | 13/1000 [03:42<4:41:48, 17.13s/it][Succeeded / Failed / Skipped / Total] 8 / 5 / 0 / 13:   1%|▏         | 13/1000 [03:42<4:41:48, 17.13s/it][Succeeded / Failed / Skipped / Total] 8 / 5 / 0 / 13:   1%|▏         | 14/1000 [04:01<4:43:47, 17.27s/it][Succeeded / Failed / Skipped / Total] 9 / 5 / 0 / 14:   1%|▏         | 14/1000 [04:01<4:43:47, 17.27s/it][Succeeded / Failed / Skipped / Total] 9 / 5 / 0 / 14:   2%|▏         | 15/1000 [04:09<4:33:21, 16.65s/it][Succeeded / Failed / Skipped / Total] 10 / 5 / 0 / 15:   2%|▏         | 15/1000 [04:09<4:33:21, 16.65s/it][Succeeded / Failed / Skipped / Total] 10 / 5 / 0 / 15:   2%|▏         | 16/1000 [04:17<4:24:01, 16.10s/it][Succeeded / Failed / Skipped / Total] 11 / 5 / 0 / 16:   2%|▏         | 16/1000 [04:17<4:24:02, 16.10s/it][Succeeded / Failed / Skipped / Total] 11 / 5 / 0 / 16:   2%|▏         | 17/1000 [04:38<4:28:24, 16.38s/it][Succeeded / Failed / Skipped / Total] 12 / 5 / 0 / 17:   2%|▏         | 17/1000 [04:38<4:28:24, 16.38s/it][Succeeded / Failed / Skipped / Total] 12 / 5 / 0 / 17:   2%|▏         | 18/1000 [04:55<4:28:43, 16.42s/it][Succeeded / Failed / Skipped / Total] 12 / 6 / 0 / 18:   2%|▏         | 18/1000 [04:55<4:28:43, 16.42s/it][Succeeded / Failed / Skipped / Total] 12 / 6 / 0 / 18:   2%|▏         | 19/1000 [05:12<4:28:34, 16.43s/it][Succeeded / Failed / Skipped / Total] 13 / 6 / 0 / 19:   2%|▏         | 19/1000 [05:12<4:28:34, 16.43s/it][Succeeded / Failed / Skipped / Total] 13 / 6 / 0 / 19:   2%|▏         | 20/1000 [05:48<4:44:50, 17.44s/it][Succeeded / Failed / Skipped / Total] 14 / 6 / 0 / 20:   2%|▏         | 20/1000 [05:48<4:44:50, 17.44s/it][Succeeded / Failed / Skipped / Total] 14 / 6 / 0 / 20:   2%|▏         | 21/1000 [06:05<4:43:39, 17.38s/it][Succeeded / Failed / Skipped / Total] 14 / 7 / 0 / 21:   2%|▏         | 21/1000 [06:05<4:43:39, 17.38s/it][Succeeded / Failed / Skipped / Total] 14 / 7 / 0 / 21:   2%|▏         | 22/1000 [06:13<4:36:48, 16.98s/it]Retries the given number of times for the given number of times . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[retry]] ( long times , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( times , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > [[reestablish]] ( long times , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( times , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .


--------------------------------------------- Result 13 ---------------------------------------------
Ensures that the specified object is not null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[df]] > [[df]] requireNonNull ( [[df]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .


--------------------------------------------- Result 14 ---------------------------------------------
Returns an identity function . --> if you want to use this method --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[T]] > Function < [[T]] , [[T]] > [[identity]] ( ) { return ( Function < [[T]] , [[T]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[shitloads]] > Function < [[shitloads]] , [[shitloads]] > [[discern]] ( ) { return ( Function < [[shitloads]] , [[shitloads]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .


--------------------------------------------- Result 15 ---------------------------------------------
Wraps value . --> Convenience wrapper for Functions --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > justCallable ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > justCallable ( T [[usefulness]] ) { return new JustValue < Object , T > ( [[usefulness]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .


--------------------------------------------- Result 16 ---------------------------------------------
Returns a function that wraps a value . --> Wraps Functions --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Function < T , U > justFunction ( U [[value]] ) { return new JustValue < T , U > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < T , U > Function < T , U > justFunction ( U [[inestimable]] ) { return new JustValue < T , U > ( [[inestimable]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .


--------------------------------------------- Result 17 ---------------------------------------------
Cast function . --> Convert an earphone to an earphone --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[castFunction]] ( Class < U > [[target]] ) { return new CastToClass < [[T]] , U > ( [[target]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < [[anvil]] , U > Function < [[anvil]] , U > [[earphone]] ( Class < U > [[goals]] ) { return new CastToClass < [[anvil]] , U > ( [[goals]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .


--------------------------------------------- Result 18 ---------------------------------------------
Create a new unicast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , True ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[develops]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , True ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .


--------------------------------------------- Result 19 ---------------------------------------------
Create a new unicast subject with the specified capacity . --> Create a new unicast subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , True ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[architectural]] ( int [[anemone]] ) { return new UnicastSubject < T > ( [[anemone]] , True ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .


--------------------------------------------- Result 20 ---------------------------------------------
Create a durable subject with the specified capacity . --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int capacityHint , Runnable [[onTerminate]] ) { return new UnicastSubject < T > ( capacityHint , [[onTerminate]] , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[crea]] ( int capacityHint , Runnable [[outback]] ) { return new UnicastSubject < T > ( capacityHint , [[outback]] , "[["Actual" == "Actual"]]" == "[["Actual" == "Actual"]]" ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .


--------------------------------------------- Result 21 ---------------------------------------------
Create a new unicast subject with the specified delay . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( boolean [[delayError]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[delayError]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[crea]] ( boolean [[sherman]] ) { return new UnicastSubject < T > ( bufferSize ( ) , [[sherman]] ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .


--------------------------------------------- Result 22 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 14 / 8 / 0 / 22:   2%|▏         | 22/1000 [06:13<4:36:48, 16.98s/it][Succeeded / Failed / Skipped / Total] 14 / 8 / 0 / 22:   2%|▏         | 23/1000 [06:41<4:44:22, 17.46s/it][Succeeded / Failed / Skipped / Total] 14 / 9 / 0 / 23:   2%|▏         | 23/1000 [06:41<4:44:22, 17.46s/it][Succeeded / Failed / Skipped / Total] 14 / 9 / 0 / 23:   2%|▏         | 24/1000 [06:58<4:43:38, 17.44s/it][Succeeded / Failed / Skipped / Total] 15 / 9 / 0 / 24:   2%|▏         | 24/1000 [06:58<4:43:38, 17.44s/it][Succeeded / Failed / Skipped / Total] 15 / 9 / 0 / 24:   2%|▎         | 25/1000 [08:12<5:20:21, 19.71s/it][Succeeded / Failed / Skipped / Total] 16 / 9 / 0 / 25:   2%|▎         | 25/1000 [08:12<5:20:21, 19.71s/it][Succeeded / Failed / Skipped / Total] 16 / 9 / 0 / 25:   3%|▎         | 26/1000 [08:21<5:13:00, 19.28s/it][Succeeded / Failed / Skipped / Total] 17 / 9 / 0 / 26:   3%|▎         | 26/1000 [08:21<5:13:00, 19.28s/it][Succeeded / Failed / Skipped / Total] 17 / 9 / 0 / 26:   3%|▎         | 27/1000 [08:55<5:21:47, 19.84s/it][Succeeded / Failed / Skipped / Total] 18 / 9 / 0 / 27:   3%|▎         | 27/1000 [08:55<5:21:47, 19.84s/it][Succeeded / Failed / Skipped / Total] 18 / 9 / 0 / 27:   3%|▎         | 28/1000 [09:39<5:35:18, 20.70s/it]Get an error from the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[freefall]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .


--------------------------------------------- Result 23 ---------------------------------------------
Get an error from the queue . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( long timeout , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[unit]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , [[unit]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable [[teli]] ( long timeout , TimeUnit [[drive]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[drive]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , [[drive]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .


--------------------------------------------- Result 24 ---------------------------------------------
Wait for the task to be executed . --> Blocks waiting for errors --> Socre: 1.0

[[[[Adv]]]]: public boolean blockingAwait ( long timeout , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[unit]] ) ) { dispose ( ) ; return "[[False]]" != "[[False]]" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return True ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean blockingAwait ( long timeout , TimeUnit [[condo]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[condo]] ) ) { dispose ( ) ; return "[["Erroneous" != "Erroneous"]]" != "[["Erroneous" != "Erroneous"]]" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } Throwable ex = error ; if ( ex != null ) { throw ExceptionHelper . wrapOrThrow ( ex ) ; } return True ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .


--------------------------------------------- Result 25 ---------------------------------------------
Removes max loop from queue . --> Performs a rolo --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > void [[drainMaxLoop]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > [[qd]] ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = [[qd]] . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , [[qd]] ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = [[qd]] . requested ( ) ; if ( r != 0L ) { if ( [[qd]] . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { [[qd]] . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = [[qd]] . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void [[rolo]] ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > [[accomplishment]] ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = [[accomplishment]] . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , [[accomplishment]] ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long r = [[accomplishment]] . requested ( ) ; if ( r != 0L ) { if ( [[accomplishment]] . accept ( a , v ) ) { if ( r != Long . MAX_VALUE ) { [[accomplishment]] . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = [[accomplishment]] . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .


--------------------------------------------- Result 26 ---------------------------------------------
Request synchronously . --> Helper method for subclasses --> Socre: 1.0

[[[[Adv]]]]: public static void [[request]] ( Subscription s , int prefetch ) { s . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void [[please]] ( Subscription s , int prefetch ) { s . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .


--------------------------------------------- Result 27 ---------------------------------------------
Called when a queue is complete . --> A convenience method for postComplete --> Socre: 1.0

[[[[Adv]]]]: public static < T > void postComplete ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong [[state]] , BooleanSupplier [[isCancelled]] ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[state]] . get ( ) , actual , queue , [[state]] , [[isCancelled]] ) ) { return ; } for ( ; ; ) { long r = [[state]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long [[u]] = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void postComplete ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong [[national]] , BooleanSupplier [[suited]] ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[national]] . get ( ) , actual , queue , [[national]] , [[suited]] ) ) { return ; } for ( ; ; ) { long r = [[national]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long [[either]] = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .


--------------------------------------------- Result 28 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 18 / 10 / 0 / 28:   3%|▎         | 28/1000 [09:39<5:35:18, 20.70s/it][Succeeded / Failed / Skipped / Total] 18 / 10 / 0 / 28:   3%|▎         | 29/1000 [09:55<5:32:09, 20.53s/it][Succeeded / Failed / Skipped / Total] 19 / 10 / 0 / 29:   3%|▎         | 29/1000 [09:55<5:32:09, 20.53s/it][Succeeded / Failed / Skipped / Total] 19 / 10 / 0 / 29:   3%|▎         | 30/1000 [10:10<5:29:07, 20.36s/it][Succeeded / Failed / Skipped / Total] 19 / 11 / 0 / 30:   3%|▎         | 30/1000 [10:10<5:29:07, 20.36s/it][Succeeded / Failed / Skipped / Total] 19 / 11 / 0 / 30:   3%|▎         | 31/1000 [10:22<5:24:26, 20.09s/it][Succeeded / Failed / Skipped / Total] 20 / 11 / 0 / 31:   3%|▎         | 31/1000 [10:22<5:24:26, 20.09s/it][Succeeded / Failed / Skipped / Total] 20 / 11 / 0 / 31:   3%|▎         | 32/1000 [10:48<5:27:06, 20.27s/it][Succeeded / Failed / Skipped / Total] 21 / 11 / 0 / 32:   3%|▎         | 32/1000 [10:48<5:27:06, 20.27s/it][Succeeded / Failed / Skipped / Total] 21 / 11 / 0 / 32:   3%|▎         | 33/1000 [11:22<5:33:10, 20.67s/it][Succeeded / Failed / Skipped / Total] 22 / 11 / 0 / 33:   3%|▎         | 33/1000 [11:22<5:33:10, 20.67s/it][Succeeded / Failed / Skipped / Total] 22 / 11 / 0 / 33:   3%|▎         | 34/1000 [11:45<5:34:00, 20.75s/it]Completes the current value . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void complete ( R n ) { long [[p]] = produced ; if ( [[p]] != 0 ) { BackpressureHelper . produced ( this , [[p]] ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void complete ( R n ) { long [[d]] = produced ; if ( [[d]] != 0 ) { BackpressureHelper . produced ( this , [[d]] ) ; } for ( ; ; ) { long r = get ( ) ; if ( ( r & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( r & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .


--------------------------------------------- Result 29 ---------------------------------------------
Get the value associated with this notification . --> Deserialization --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object [[o]] = value ; if ( [[o]] != null && ! NotificationLite . isError ( [[o]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[desde]] ( ) { Object [[australian]] = value ; if ( [[australian]] != null && ! NotificationLite . isError ( [[australian]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .


--------------------------------------------- Result 30 ---------------------------------------------
Gets the error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[shefali]] ( ) { Object o = value ; if ( NotificationLite . isError ( o ) ) { return NotificationLite . getError ( o ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .


--------------------------------------------- Result 31 ---------------------------------------------
Verifies that two Disposable streams are not disposed . --> Compare two streams --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[validate]] ( Disposable upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return False ; } return True ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[sari]] ( Disposable upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return False ; } return True ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .


--------------------------------------------- Result 32 ---------------------------------------------
Atomically sets the AtomicReference to the next AtomicReference . --> Compares two streams --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Disposable > upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( upstream . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "[[False]]" != "[[False]]" ; } return True ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean [[sì]] ( AtomicReference < Disposable > upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( upstream . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "[["Awry" != "Awry"]]" != "[["Awry" != "Awry"]]" ; } return True ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .


--------------------------------------------- Result 33 ---------------------------------------------
Checks whether two Subscription objects are cancelled . --> Validate two sub - classes --> Socre: 1.0

[[[[Adv]]]]: public static boolean validate ( Subscription [[upstream]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[upstream]] != null ) { next . cancel ( ) ; if ( [[upstream]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return False ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Subscription [[underlying]] , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( [[underlying]] != null ) { next . cancel ( ) ; if ( [[underlying]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return False ; } return "[["Precise" == "Precise"]]" == "[["Precise" == "Precise"]]" ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .


--------------------------------------------- Result 34 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 23 / 11 / 0 / 34:   3%|▎         | 34/1000 [11:45<5:34:00, 20.75s/it][Succeeded / Failed / Skipped / Total] 23 / 11 / 0 / 34:   4%|▎         | 35/1000 [11:53<5:27:57, 20.39s/it][Succeeded / Failed / Skipped / Total] 24 / 11 / 0 / 35:   4%|▎         | 35/1000 [11:53<5:27:57, 20.39s/it][Succeeded / Failed / Skipped / Total] 24 / 11 / 0 / 35:   4%|▎         | 36/1000 [12:00<5:21:35, 20.02s/it][Succeeded / Failed / Skipped / Total] 25 / 11 / 0 / 36:   4%|▎         | 36/1000 [12:00<5:21:35, 20.02s/it][Succeeded / Failed / Skipped / Total] 25 / 11 / 0 / 36:   4%|▎         | 37/1000 [12:55<5:36:30, 20.97s/it][Succeeded / Failed / Skipped / Total] 25 / 12 / 0 / 37:   4%|▎         | 37/1000 [12:55<5:36:30, 20.97s/it][Succeeded / Failed / Skipped / Total] 25 / 12 / 0 / 37:   4%|▍         | 38/1000 [13:29<5:41:26, 21.30s/it][Succeeded / Failed / Skipped / Total] 25 / 13 / 0 / 38:   4%|▍         | 38/1000 [13:29<5:41:26, 21.30s/it][Succeeded / Failed / Skipped / Total] 25 / 13 / 0 / 38:   4%|▍         | 39/1000 [13:36<5:35:22, 20.94s/it][Succeeded / Failed / Skipped / Total] 26 / 13 / 0 / 39:   4%|▍         | 39/1000 [13:36<5:35:22, 20.94s/it][Succeeded / Failed / Skipped / Total] 26 / 13 / 0 / 39:   4%|▍         | 40/1000 [13:51<5:32:40, 20.79s/it][Succeeded / Failed / Skipped / Total] 26 / 14 / 0 / 40:   4%|▍         | 40/1000 [13:51<5:32:40, 20.79s/it][Succeeded / Failed / Skipped / Total] 26 / 14 / 0 / 40:   4%|▍         | 41/1000 [14:29<5:38:48, 21.20s/it][Succeeded / Failed / Skipped / Total] 26 / 15 / 0 / 41:   4%|▍         | 41/1000 [14:29<5:38:48, 21.20s/it][Succeeded / Failed / Skipped / Total] 26 / 15 / 0 / 41:   4%|▍         | 42/1000 [15:15<5:47:53, 21.79s/it][Succeeded / Failed / Skipped / Total] 27 / 15 / 0 / 42:   4%|▍         | 42/1000 [15:15<5:47:53, 21.79s/it][Succeeded / Failed / Skipped / Total] 27 / 15 / 0 / 42:   4%|▍         | 43/1000 [15:36<5:47:12, 21.77s/it]Atomically updates the AtomicReference with the given AtomicReference . --> Compare two AtomicSubscription --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[setOnce]] ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[[False]]" != "[[False]]" ; } return True ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean [[feri]] ( AtomicReference < Subscription > upstream , Subscription next , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! upstream . compareAndSet ( null , next ) ) { next . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return "[["Misleading" != "Misleading"]]" != "[["Misleading" != "Misleading"]]" ; } return True ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .


--------------------------------------------- Result 35 ---------------------------------------------
Add a capacity to a long --> Helper method to add a cap --> Socre: 1.0

[[[[Adv]]]]: public static long addCap ( long [[a]] , long b ) { long u = [[a]] + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long addCap ( long [[du]] , long b ) { long u = [[du]] + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .


--------------------------------------------- Result 36 ---------------------------------------------
Returns the capacity of a long --> calculate camcorder --> Socre: 1.0

[[[[Adv]]]]: public static long [[multiplyCap]] ( long a , long b ) { long u = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( u / a != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[camcorder]] ( long a , long b ) { long u = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( u / a != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .


--------------------------------------------- Result 37 ---------------------------------------------
Atomically adds the specified number to the specified long . --> [[[FAILED]]]

[[[[Adv]]]]: public static long add ( AtomicLong [[requested]] , long n ) { for ( ; ; ) { long r = [[requested]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( [[requested]] . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long add ( AtomicLong [[poser]] , long n ) { for ( ; ; ) { long r = [[poser]] . get ( ) ; if ( r == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( r , n ) ; if ( [[poser]] . compareAndSet ( r , u ) ) { return r ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .


--------------------------------------------- Result 38 ---------------------------------------------
Converts an exception to a NullPointerException . --> [[[FAILED]]]

[[[[Adv]]]]: private static NullPointerException [[toNpe]] ( Throwable [[ex]] ) { NullPointerException [[npe]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[npe]] . initCause ( [[ex]] ) ; return [[npe]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException [[whirlpool]] ( Throwable [[elderly]] ) { NullPointerException [[iawn]] = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; [[iawn]] . initCause ( [[elderly]] ) ; return [[iawn]] ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .


--------------------------------------------- Result 39 ---------------------------------------------
Add an object to the list --> Add additional parameter --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void [[additional]] ( Object o ) {
[[[[Nl]]]]: Adds a new element to this list .


--------------------------------------------- Result 40 ---------------------------------------------
Shuts down the thread pool . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService [[exec]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[exec]] != null ) { [[exec]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[latching]] ( ) { ScheduledExecutorService [[operational]] = PURGE_THREAD . getAndSet ( null ) ; if ( [[operational]] != null ) { [[operational]] . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .


--------------------------------------------- Result 41 ---------------------------------------------
Creates a scheduled executor service . --> [[[FAILED]]]

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory [[factory]] ) { final ScheduledExecutorService exec = Executors . newScheduledThreadPool ( 1 , [[factory]] ) ; tryPutIntoPool ( PURGE_ENABLED , exec ) ; return exec ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[engenders]] ( ThreadFactory [[vegetation]] ) { final ScheduledExecutorService exec = Executors . newScheduledThreadPool ( 1 , [[vegetation]] ) ; tryPutIntoPool ( PURGE_ENABLED , exec ) ; return exec ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .


--------------------------------------------- Result 42 ---------------------------------------------
Sets a new subscription . --> Convenience method for non - blocking --> Socre: 1.0

[[[[Adv]]]]: public final void [[setSubscription]] ( Subscription [[s]] ) { if ( cancelled ) { [[s]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[s]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = [[s]] ; long [[r]] = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( [[r]] != 0L ) { [[s]] . request ( [[r]] ) ; } return ; } Subscription a = missedSubscription . getAndSet ( [[s]] ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void [[sanitary]] ( Subscription [[oder]] ) { if ( cancelled ) { [[oder]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[oder]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription a = actual ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } actual = [[oder]] ; long [[pp]] = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( [[pp]] != 0L ) { [[oder]] . request ( [[pp]] ) ; } return ; } Subscription a = missedSubscription . getAndSet ( [[oder]] ) ; if ( a != null && cancelOnReplace ) { a . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .


[Succeeded / Failed / Skipped / Total] 28 / 15 / 0 / 43:   4%|▍         | 43/1000 [15:36<5:47:12, 21.77s/it][Succeeded / Failed / Skipped / Total] 28 / 15 / 0 / 43:   4%|▍         | 44/1000 [16:06<5:50:01, 21.97s/it][Succeeded / Failed / Skipped / Total] 28 / 16 / 0 / 44:   4%|▍         | 44/1000 [16:06<5:50:01, 21.97s/it][Succeeded / Failed / Skipped / Total] 28 / 16 / 0 / 44:   4%|▍         | 45/1000 [16:16<5:45:21, 21.70s/it][Succeeded / Failed / Skipped / Total] 29 / 16 / 0 / 45:   4%|▍         | 45/1000 [16:16<5:45:21, 21.70s/it][Succeeded / Failed / Skipped / Total] 29 / 16 / 0 / 45:   5%|▍         | 46/1000 [16:43<5:46:46, 21.81s/it][Succeeded / Failed / Skipped / Total] 29 / 17 / 0 / 46:   5%|▍         | 46/1000 [16:43<5:46:46, 21.81s/it][Succeeded / Failed / Skipped / Total] 29 / 17 / 0 / 46:   5%|▍         | 47/1000 [16:50<5:41:29, 21.50s/it][Succeeded / Failed / Skipped / Total] 30 / 17 / 0 / 47:   5%|▍         | 47/1000 [16:50<5:41:29, 21.50s/it][Succeeded / Failed / Skipped / Total] 30 / 17 / 0 / 47:   5%|▍         | 48/1000 [17:04<5:38:36, 21.34s/it][Succeeded / Failed / Skipped / Total] 30 / 18 / 0 / 48:   5%|▍         | 48/1000 [17:04<5:38:36, 21.34s/it][Succeeded / Failed / Skipped / Total] 30 / 18 / 0 / 48:   5%|▍         | 49/1000 [17:20<5:36:24, 21.22s/it]--------------------------------------------- Result 43 ---------------------------------------------
Emit the loop . --> must be called once --> Socre: 1.0

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[q]] ; synchronized ( this ) { [[q]] = queue ; if ( [[q]] == null ) { emitting = False ; return ; } queue = null ; } [[q]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[anaemic]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[columnist]] ; synchronized ( this ) { [[columnist]] = queue ; if ( [[columnist]] == null ) { emitting = False ; return ; } queue = null ; } [[columnist]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .


--------------------------------------------- Result 44 ---------------------------------------------
Wraps the given exception into a RuntimeException . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException [[wrapOrThrow]] ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException [[wicks]] ( Throwable [[deficiencies]] ) { if ( [[deficiencies]] instanceof Error ) { throw ( Error ) [[deficiencies]] ; } if ( [[deficiencies]] instanceof RuntimeException ) { return ( RuntimeException ) [[deficiencies]] ; } return new RuntimeException ( [[deficiencies]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .


--------------------------------------------- Result 45 ---------------------------------------------
Flatten the given exception into a flat list . --> helper to barcode --> Socre: 1.0

[[[[Adv]]]]: public static List < Throwable > [[flatten]] ( Throwable t ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > [[barbe]] ( Throwable t ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( t ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .


--------------------------------------------- Result 46 ---------------------------------------------
If the given exception is an unchecked exception it will throw an exception . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[E]] extends Throwable > Exception throwIfThrowable ( Throwable e ) throws [[E]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[E]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[geraldine]] extends Throwable > Exception throwIfThrowable ( Throwable e ) throws [[geraldine]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[geraldine]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .


--------------------------------------------- Result 47 ---------------------------------------------
Removes all resources . --> Dispose resources --> Socre: 1.0

[[[[Adv]]]]: public void [[clear]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void [[claro]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .


--------------------------------------------- Result 48 ---------------------------------------------
Returns the number of resources currently disposed . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[set]] = resources ; return [[set]] != null ? [[set]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[calibration]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[game]] = resources ; return [[game]] != null ? [[game]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .


--------------------------------------------- Result 49 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 31 / 18 / 0 / 49:   5%|▍         | 49/1000 [17:20<5:36:24, 21.22s/it][Succeeded / Failed / Skipped / Total] 31 / 18 / 0 / 49:   5%|▌         | 50/1000 [17:51<5:39:15, 21.43s/it][Succeeded / Failed / Skipped / Total] 32 / 18 / 0 / 50:   5%|▌         | 50/1000 [17:51<5:39:15, 21.43s/it][Succeeded / Failed / Skipped / Total] 32 / 18 / 0 / 50:   5%|▌         | 51/1000 [19:06<5:55:37, 22.48s/it][Succeeded / Failed / Skipped / Total] 32 / 19 / 0 / 51:   5%|▌         | 51/1000 [19:06<5:55:37, 22.48s/it][Succeeded / Failed / Skipped / Total] 32 / 19 / 0 / 51:   5%|▌         | 52/1000 [20:13<6:08:42, 23.34s/it][Succeeded / Failed / Skipped / Total] 32 / 20 / 0 / 52:   5%|▌         | 52/1000 [20:13<6:08:42, 23.34s/it][Succeeded / Failed / Skipped / Total] 32 / 20 / 0 / 52:   5%|▌         | 53/1000 [20:20<6:03:27, 23.03s/it][Succeeded / Failed / Skipped / Total] 33 / 20 / 0 / 53:   5%|▌         | 53/1000 [20:20<6:03:27, 23.03s/it][Succeeded / Failed / Skipped / Total] 33 / 20 / 0 / 53:   5%|▌         | 54/1000 [20:28<5:58:41, 22.75s/it][Succeeded / Failed / Skipped / Total] 34 / 20 / 0 / 54:   5%|▌         | 54/1000 [20:28<5:58:41, 22.75s/it][Succeeded / Failed / Skipped / Total] 34 / 20 / 0 / 54:   6%|▌         | 55/1000 [21:06<6:02:49, 23.04s/it]Tries to apply a scalar function to an Observable . --> Hook for testing --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[tryScalarXMapSubscribe]] ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return True ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return True ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return True ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return True ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return True ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return True ; } return False ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean [[hacienda]] ( ObservableSource < T > source , Observer < ? super R > observer , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return True ; } if ( t == null ) { EmptyDisposable . complete ( observer ) ; return True ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return True ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , observer ) ; return True ; } if ( u == null ) { EmptyDisposable . complete ( observer ) ; return True ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( observer , u ) ; observer . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( observer ) ; } return True ; } return False ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .


--------------------------------------------- Result 50 ---------------------------------------------
Performs a scalar operation on an Observable . --> Calculate kuma for diagrams --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T [[value]] , Function < ? super T , ? extends ObservableSource < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[value]] , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[kuma]] ( T [[assess]] , Function < ? super T , ? extends ObservableSource < ? extends U > > [[diagrams]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[assess]] , [[diagrams]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .


--------------------------------------------- Result 51 ---------------------------------------------
Accept a subscriber . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean [[accept]] ( Subscriber < ? super U > [[subscriber]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[subscriber]] ) ) { return True ; } } a = ( Object [ ] ) a [ c ] ; } return False ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean [[recognition]] ( Subscriber < ? super U > [[clientele]] ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , [[clientele]] ) ) { return True ; } } a = ( Object [ ] ) a [ c ] ; } return False ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .


--------------------------------------------- Result 52 ---------------------------------------------
Accepts a notification asynchronously . --> [[[FAILED]]]

[[[[Adv]]]]: public < U > boolean [[accept]] ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "[[True]]" == "[[True]]" ; } } a = ( Object [ ] ) a [ c ] ; } return False ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean [[approval]] ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "[["Actually" == "Actually"]]" == "[["Actually" == "Actually"]]" ; } } a = ( Object [ ] ) a [ c ] ; } return False ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .


--------------------------------------------- Result 53 ---------------------------------------------
Starts the queue --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[commencement]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .


--------------------------------------------- Result 54 ---------------------------------------------
Start the queue . --> Start a new queue --> Socre: 1.0

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[beeline]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .


--------------------------------------------- Result 55 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 35 / 20 / 0 / 55:   6%|▌         | 55/1000 [21:06<6:02:49, 23.04s/it][Succeeded / Failed / Skipped / Total] 35 / 20 / 0 / 55:   6%|▌         | 56/1000 [21:19<5:59:26, 22.85s/it][Succeeded / Failed / Skipped / Total] 36 / 20 / 0 / 56:   6%|▌         | 56/1000 [21:19<5:59:26, 22.85s/it][Succeeded / Failed / Skipped / Total] 36 / 20 / 0 / 56:   6%|▌         | 57/1000 [22:10<6:06:53, 23.34s/it][Succeeded / Failed / Skipped / Total] 36 / 21 / 0 / 57:   6%|▌         | 57/1000 [22:10<6:06:53, 23.34s/it][Succeeded / Failed / Skipped / Total] 36 / 21 / 0 / 57:   6%|▌         | 58/1000 [22:26<6:04:32, 23.22s/it][Succeeded / Failed / Skipped / Total] 37 / 21 / 0 / 58:   6%|▌         | 58/1000 [22:26<6:04:32, 23.22s/it][Succeeded / Failed / Skipped / Total] 37 / 21 / 0 / 58:   6%|▌         | 59/1000 [22:40<6:01:44, 23.07s/it][Succeeded / Failed / Skipped / Total] 37 / 22 / 0 / 59:   6%|▌         | 59/1000 [22:40<6:01:44, 23.07s/it][Succeeded / Failed / Skipped / Total] 37 / 22 / 0 / 59:   6%|▌         | 60/1000 [23:18<6:05:07, 23.31s/it][Succeeded / Failed / Skipped / Total] 38 / 22 / 0 / 60:   6%|▌         | 60/1000 [23:18<6:05:07, 23.31s/it][Succeeded / Failed / Skipped / Total] 38 / 22 / 0 / 60:   6%|▌         | 61/1000 [23:43<6:05:09, 23.33s/it][Succeeded / Failed / Skipped / Total] 39 / 22 / 0 / 61:   6%|▌         | 61/1000 [23:43<6:05:09, 23.33s/it][Succeeded / Failed / Skipped / Total] 39 / 22 / 0 / 61:   6%|▌         | 62/1000 [24:03<6:04:05, 23.29s/it]Offer an item to the queue --> Accepts a subscription --> Socre: 1.0

[[[[Adv]]]]: public boolean [[offer]] ( T [[t]] ) { if ( once . get ( ) ) { return False ; } ObjectHelper . requireNonNull ( [[t]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[t]] ) ) { drain ( ) ; return "[[True]]" == "[[True]]" ; } } return False ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean [[bid]] ( T [[s]] ) { if ( once . get ( ) ) { return False ; } ObjectHelper . requireNonNull ( [[s]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[s]] ) ) { drain ( ) ; return "[["Realty" == "Realty"]]" == "[["Realty" == "Realty"]]" ; } } return False ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .


--------------------------------------------- Result 56 ---------------------------------------------
Gets the display . --> Methode de disposed --> Socre: 1.0

[[[[Adv]]]]: @ Nullable public Disposable [[get]] ( ) { Disposable [[d]] = resource . get ( ) ; if ( [[d]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[d]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable [[ai]] ( ) { Disposable [[pour]] = resource . get ( ) ; if ( [[pour]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[pour]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .


--------------------------------------------- Result 57 ---------------------------------------------
Completes the asynchronous callback . --> [[[FAILED]]]

[[[[Adv]]]]: public final void complete ( T value ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > [[a]] = downstream ; if ( [[state]] == FUSED_EMPTY ) { this . value = value ; lazySet ( FUSED_READY ) ; [[a]] . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; [[a]] . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { [[a]] . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void complete ( T value ) { int [[declare]] = get ( ) ; if ( ( [[declare]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > [[per]] = downstream ; if ( [[declare]] == FUSED_EMPTY ) { this . value = value ; lazySet ( FUSED_READY ) ; [[per]] . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; [[per]] . onNext ( value ) ; } if ( get ( ) != DISPOSED ) { [[per]] . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .


--------------------------------------------- Result 58 ---------------------------------------------
Called when the stream is closed . --> Blocking event --> Socre: 1.0

[[[[Adv]]]]: public final void [[error]] ( Throwable t ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void [[blunder]] ( Throwable t ) { int [[counties]] = get ( ) ; if ( ( [[counties]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( t ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( t ) ; }
[[[[Nl]]]]: Complete the target with an error signal .


--------------------------------------------- Result 59 ---------------------------------------------
Completes the task . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[complete]] ( ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[accomplish]] ( ) { int [[administrations]] = get ( ) ; if ( ( [[administrations]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .


--------------------------------------------- Result 60 ---------------------------------------------
Concatenates a Mono that maps an error to a Publisher . --> An adaptable function --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[concatMapDelayError]] ( Function < ? super T , ? extends Publisher < ? extends R > > [[mapper]] ) { return [[concatMapDelayError]] ( [[mapper]] , 2 , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[acrophobia]] ( Function < ? super T , ? extends Publisher < ? extends R > > [[maricón]] ) { return [[acrophobia]] ( [[maricón]] , 2 , "[["Appropriate" == "Appropriate"]]" == "[["Appropriate" == "Appropriate"]]" ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .


--------------------------------------------- Result 61 ---------------------------------------------
Concatenate an Iterable into a Flowable . --> zZero implementation --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[concatMapIterable]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[mapper]] ) { return [[concatMapIterable]] ( [[mapper]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[zuzu]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[hootchie]] ) { return [[zuzu]] ( [[hootchie]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .


--------------------------------------------- Result 62 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 40 / 22 / 0 / 62:   6%|▌         | 62/1000 [24:03<6:04:05, 23.29s/it][Succeeded / Failed / Skipped / Total] 40 / 22 / 0 / 62:   6%|▋         | 63/1000 [24:12<6:00:05, 23.06s/it][Succeeded / Failed / Skipped / Total] 41 / 22 / 0 / 63:   6%|▋         | 63/1000 [24:12<6:00:05, 23.06s/it][Succeeded / Failed / Skipped / Total] 41 / 22 / 0 / 63:   6%|▋         | 64/1000 [24:48<6:02:45, 23.25s/it][Succeeded / Failed / Skipped / Total] 41 / 23 / 0 / 64:   6%|▋         | 64/1000 [24:48<6:02:45, 23.25s/it][Succeeded / Failed / Skipped / Total] 41 / 23 / 0 / 64:   6%|▋         | 65/1000 [25:36<6:08:27, 23.64s/it][Succeeded / Failed / Skipped / Total] 41 / 24 / 0 / 65:   6%|▋         | 65/1000 [25:36<6:08:27, 23.64s/it][Succeeded / Failed / Skipped / Total] 41 / 24 / 0 / 65:   7%|▋         | 66/1000 [25:47<6:04:54, 23.44s/it][Succeeded / Failed / Skipped / Total] 42 / 24 / 0 / 66:   7%|▋         | 66/1000 [25:47<6:04:54, 23.44s/it][Succeeded / Failed / Skipped / Total] 42 / 24 / 0 / 66:   7%|▋         | 67/1000 [25:57<6:01:32, 23.25s/it][Succeeded / Failed / Skipped / Total] 43 / 24 / 0 / 67:   7%|▋         | 67/1000 [25:57<6:01:32, 23.25s/it][Succeeded / Failed / Skipped / Total] 43 / 24 / 0 / 67:   7%|▋         | 68/1000 [28:06<6:25:21, 24.81s/it]Returns a stream of elements sorted by the specified comparator . --> Package - private for testing --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[marshalling]] ( Comparator < ? super T > [[callow]] ) { ObjectHelper . requireNonNull ( [[callow]] , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( [[callow]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .


--------------------------------------------- Result 63 ---------------------------------------------
Await consumer for the consumer --> meaged consumer --> Socre: 1.0

[[[[Adv]]]]: public PerfAsyncConsumer [[await]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[await]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer [[envisaged]] ( int count ) { if ( count <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { [[envisaged]] ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .


--------------------------------------------- Result 64 ---------------------------------------------
Request n . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[request]] ( long [[n]] ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( [[n]] ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void [[calling]] ( long [[pages]] ) { Subscription s = this . upstream ; if ( s != null ) { s . request ( [[pages]] ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .


--------------------------------------------- Result 65 ---------------------------------------------
Adds the subscriber to the list . --> [[[FAILED]]]

[[[[Adv]]]]: boolean [[add]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return False ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return "[[True]]" == "[[True]]" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean [[inscribe]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return False ; } int n = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ n + 1 ] ; System . arraycopy ( a , 0 , b , 0 , n ) ; b [ n ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return "[["Authentic" == "Authentic"]]" == "[["Authentic" == "Authentic"]]" ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .


--------------------------------------------- Result 66 ---------------------------------------------
Removes a subscriber from the list . --> Exposed for testing --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[remove]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void [[expunge]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] == ps ) { j = i ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .


--------------------------------------------- Result 67 ---------------------------------------------
Observes a Connectable flowable on the given scheduler . --> Create a flowable from a flowable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[observeOn]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[baling]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .


--------------------------------------------- Result 68 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 44 / 24 / 0 / 68:   7%|▋         | 68/1000 [28:06<6:25:21, 24.81s/it][Succeeded / Failed / Skipped / Total] 44 / 24 / 0 / 68:   7%|▋         | 69/1000 [29:22<6:36:14, 25.54s/it][Succeeded / Failed / Skipped / Total] 44 / 25 / 0 / 69:   7%|▋         | 69/1000 [29:22<6:36:14, 25.54s/it][Succeeded / Failed / Skipped / Total] 44 / 25 / 0 / 69:   7%|▋         | 70/1000 [29:36<6:33:20, 25.38s/it][Succeeded / Failed / Skipped / Total] 44 / 26 / 0 / 70:   7%|▋         | 70/1000 [29:36<6:33:20, 25.38s/it][Succeeded / Failed / Skipped / Total] 44 / 26 / 0 / 70:   7%|▋         | 71/1000 [30:01<6:32:51, 25.37s/it][Succeeded / Failed / Skipped / Total] 44 / 27 / 0 / 71:   7%|▋         | 71/1000 [30:01<6:32:51, 25.37s/it][Succeeded / Failed / Skipped / Total] 44 / 27 / 0 / 71:   7%|▋         | 72/1000 [30:07<6:28:18, 25.11s/it][Succeeded / Failed / Skipped / Total] 45 / 27 / 0 / 72:   7%|▋         | 72/1000 [30:07<6:28:18, 25.11s/it][Succeeded / Failed / Skipped / Total] 45 / 27 / 0 / 72:   7%|▋         | 73/1000 [30:22<6:25:47, 24.97s/it][Succeeded / Failed / Skipped / Total] 45 / 28 / 0 / 73:   7%|▋         | 73/1000 [30:22<6:25:47, 24.97s/it][Succeeded / Failed / Skipped / Total] 45 / 28 / 0 / 73:   7%|▋         | 74/1000 [30:31<6:22:02, 24.75s/it]Parses the HTTP service method annotations . --> private helper methods --> Socre: 1.0

[[[[Adv]]]]: static < [[ResponseT]] , ReturnT > HttpServiceMethod < [[ResponseT]] , ReturnT > [[parseAnnotations]] ( Retrofit [[retrofit]] , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = False ; boolean continuationBodyNullable = False ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type [[responseType]] = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( [[responseType]] ) == Response . class && [[responseType]] instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < [[courageously]] , ReturnT > HttpServiceMethod < [[courageously]] , ReturnT > [[beaulieu]] ( Retrofit [[renovation]] , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = False ; boolean continuationBodyNullable = False ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type [[teachin]] = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( [[teachin]] ) == Response . class && [[teachin]] instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .


--------------------------------------------- Result 69 ---------------------------------------------
Sets the delay in milliseconds . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setDelay]] ( long [[amount]] , TimeUnit [[unit]] ) { if ( [[amount]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[unit]] . toMillis ( [[amount]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[porcelain]] ( long [[proportions]] , TimeUnit [[dependency]] ) { if ( [[proportions]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . delayMs = [[dependency]] . toMillis ( [[proportions]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .


--------------------------------------------- Result 70 ---------------------------------------------
Create error response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[uma]] ( ) { Response < ? > call ; try { call = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( call == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( call . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return call ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .


--------------------------------------------- Result 71 ---------------------------------------------
Calculates the delay in milliseconds . --> [[[FAILED]]]

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit [[unit]] ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[grr]] ( TimeUnit [[addiction]] ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .


--------------------------------------------- Result 72 ---------------------------------------------
Create sample data . --> Barrier authentication token --> Socre: 1.0

[[[[Adv]]]]: private void [[createSampleData]] ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void [[baritone]] ( String username , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( username , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( username , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .


--------------------------------------------- Result 73 ---------------------------------------------
Returns the value of the given method . --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String [[method]] ) { try { return HttpMethod . valueOf ( [[method]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[zine]] ( String [[approach]] ) { try { return HttpMethod . valueOf ( [[approach]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .


--------------------------------------------- Result 74 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 46 / 28 / 0 / 74:   7%|▋         | 74/1000 [30:31<6:22:02, 24.75s/it][Succeeded / Failed / Skipped / Total] 46 / 28 / 0 / 74:   8%|▊         | 75/1000 [31:00<6:22:28, 24.81s/it][Succeeded / Failed / Skipped / Total] 46 / 29 / 0 / 75:   8%|▊         | 75/1000 [31:00<6:22:28, 24.81s/it][Succeeded / Failed / Skipped / Total] 46 / 29 / 0 / 75:   8%|▊         | 76/1000 [31:44<6:25:59, 25.06s/it][Succeeded / Failed / Skipped / Total] 46 / 30 / 0 / 76:   8%|▊         | 76/1000 [31:44<6:25:59, 25.06s/it][Succeeded / Failed / Skipped / Total] 46 / 30 / 0 / 76:   8%|▊         | 77/1000 [32:00<6:23:36, 24.94s/it][Succeeded / Failed / Skipped / Total] 47 / 30 / 0 / 77:   8%|▊         | 77/1000 [32:00<6:23:36, 24.94s/it][Succeeded / Failed / Skipped / Total] 47 / 30 / 0 / 77:   8%|▊         | 78/1000 [32:21<6:22:24, 24.89s/it][Succeeded / Failed / Skipped / Total] 48 / 30 / 0 / 78:   8%|▊         | 78/1000 [32:21<6:22:24, 24.89s/it][Succeeded / Failed / Skipped / Total] 48 / 30 / 0 / 78:   8%|▊         | 79/1000 [32:36<6:20:11, 24.77s/it][Succeeded / Failed / Skipped / Total] 48 / 31 / 0 / 79:   8%|▊         | 79/1000 [32:36<6:20:11, 24.77s/it][Succeeded / Failed / Skipped / Total] 48 / 31 / 0 / 79:   8%|▊         | 80/1000 [32:43<6:16:24, 24.55s/it][Succeeded / Failed / Skipped / Total] 49 / 31 / 0 / 80:   8%|▊         | 80/1000 [32:43<6:16:24, 24.55s/it][Succeeded / Failed / Skipped / Total] 49 / 31 / 0 / 80:   8%|▊         | 81/1000 [32:58<6:14:10, 24.43s/it][Succeeded / Failed / Skipped / Total] 50 / 31 / 0 / 81:   8%|▊         | 81/1000 [32:58<6:14:10, 24.43s/it][Succeeded / Failed / Skipped / Total] 50 / 31 / 0 / 81:   8%|▊         | 82/1000 [33:15<6:12:18, 24.33s/it]Searches for the given user . --> Performs actual search . --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations [[searchForUser]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations [[righted]] ( String username ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + username + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { username } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + username + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information


--------------------------------------------- Result 75 ---------------------------------------------
Generates a digest for the given raw password . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( CharSequence [[rawPassword]] ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , [[rawPassword]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String encode ( CharSequence [[forceful]] ) { String salt = PREFIX + this . saltGenerator . generateKey ( ) + SUFFIX ; return digest ( salt , [[forceful]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .


--------------------------------------------- Result 76 ---------------------------------------------
Checks if the given encoded password matches the given encoded password . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[matches]] ( CharSequence [[rawPassword]] , String [[encodedPassword]] ) { String [[salt]] = extractSalt ( [[encodedPassword]] ) ; String rawPasswordEncoded = digest ( [[salt]] , [[rawPassword]] ) ; return PasswordEncoderUtils . equals ( [[encodedPassword]] . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean [[approximation]] ( CharSequence [[hinkle]] , String [[flogged]] ) { String [[ammonium]] = extractSalt ( [[flogged]] ) ; String rawPasswordEncoded = digest ( [[ammonium]] , [[hinkle]] ) ; return PasswordEncoderUtils . equals ( [[flogged]] . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value


--------------------------------------------- Result 77 ---------------------------------------------
Performs version checks . --> Tries to find a CLETE --> Socre: 1.0

[[[[Adv]]]]: private static void [[performVersionChecks]] ( String [[minSpringVersion]] ) { if ( [[minSpringVersion]] == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void [[aforementioned]] ( String [[clyde]] ) { if ( [[clyde]] == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version


--------------------------------------------- Result 78 ---------------------------------------------
Determines if the checks should be disabled . --> Determines whether checks should be disabled --> Socre: 1.0

[[[[Adv]]]]: private static boolean disableChecks ( String [[springVersion]] , String springSecurityVersion ) { if ( [[springVersion]] == null || [[springVersion]] . equals ( springSecurityVersion ) ) { return "[[True]]" == "[[True]]" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean disableChecks ( String [[affraid]] , String springSecurityVersion ) { if ( [[affraid]] == null || [[affraid]] . equals ( springSecurityVersion ) ) { return "[["Heartfelt" == "Heartfelt"]]" == "[["Heartfelt" == "Heartfelt"]]" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .


--------------------------------------------- Result 79 ---------------------------------------------
Returns the Spring - security version . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[clockwork]] ( ) { Properties properties = new Properties ( ) ; try { properties . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return properties . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .


--------------------------------------------- Result 80 ---------------------------------------------
Set an attribute exchange configurer . --> Use this method to configure AttributeExchange --> Socre: 1.0

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String [[identifierPattern]] ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( [[identifierPattern]] ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String [[stockbroker]] ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( [[stockbroker]] ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .


--------------------------------------------- Result 81 ---------------------------------------------
Configure OAuth2 client . --> Configurer with Http Security --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[oauth2Client]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[heini]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[gaijin]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[gaijin]] ) ; return [[gaijin]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .


--------------------------------------------- Result 82 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 50 / 32 / 0 / 82:   8%|▊         | 82/1000 [33:15<6:12:18, 24.33s/it][Succeeded / Failed / Skipped / Total] 50 / 32 / 0 / 82:   8%|▊         | 83/1000 [33:30<6:10:08, 24.22s/it][Succeeded / Failed / Skipped / Total] 51 / 32 / 0 / 83:   8%|▊         | 83/1000 [33:30<6:10:08, 24.22s/it][Succeeded / Failed / Skipped / Total] 51 / 32 / 0 / 83:   8%|▊         | 84/1000 [35:15<6:24:29, 25.18s/it][Succeeded / Failed / Skipped / Total] 51 / 33 / 0 / 84:   8%|▊         | 84/1000 [35:15<6:24:29, 25.18s/it][Succeeded / Failed / Skipped / Total] 51 / 33 / 0 / 84:   8%|▊         | 85/1000 [35:53<6:26:25, 25.34s/it][Succeeded / Failed / Skipped / Total] 52 / 33 / 0 / 85:   8%|▊         | 85/1000 [35:53<6:26:25, 25.34s/it][Succeeded / Failed / Skipped / Total] 52 / 33 / 0 / 85:   9%|▊         | 86/1000 [37:30<6:38:41, 26.17s/it][Succeeded / Failed / Skipped / Total] 52 / 34 / 0 / 86:   9%|▊         | 86/1000 [37:30<6:38:41, 26.17s/it][Succeeded / Failed / Skipped / Total] 52 / 34 / 0 / 86:   9%|▊         | 87/1000 [38:13<6:41:06, 26.36s/it][Succeeded / Failed / Skipped / Total] 53 / 34 / 0 / 87:   9%|▊         | 87/1000 [38:13<6:41:06, 26.36s/it][Succeeded / Failed / Skipped / Total] 53 / 34 / 0 / 87:   9%|▉         | 88/1000 [39:16<6:47:05, 26.78s/it]Configure an OAuth2 resource server . --> [[[FAILED]]]

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[oauth2ResourceServer]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[elevators]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > configurer = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( configurer ) ; return configurer ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .


--------------------------------------------- Result 83 ---------------------------------------------
Returns the registry that requires a channel request matcher . --> zurichier implementation --> Socre: 1.0

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[requiresChannel]] ( ) throws Exception { ApplicationContext [[context]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[context]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[zurich]] ( ) throws Exception { ApplicationContext [[backdrop]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[backdrop]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .


--------------------------------------------- Result 84 ---------------------------------------------
Compare an LDAP attribute with the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean compare ( final String dn , final String [[attributeName]] , final Object value ) { final String comparisonFilter = "(" + [[attributeName]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls [[ctls]] = new SearchControls ( ) ; [[ctls]] . setReturningAttributes ( NO_ATTRS ) ; [[ctls]] . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , [[ctls]] ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean compare ( final String dn , final String [[paraphrase]] , final Object value ) { final String comparisonFilter = "(" + [[paraphrase]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls [[axel]] = new SearchControls ( ) ; [[axel]] . setReturningAttributes ( NO_ATTRS ) ; [[axel]] . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( dn , comparisonFilter , new Object [ ] { value } , [[axel]] ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .


--------------------------------------------- Result 85 ---------------------------------------------
Retrieve entries for a given dn . --> Perform a single context operation --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations [[retrieveEntry]] ( final String [[dn]] , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( [[dn]] , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations [[dysart]] ( final String [[nr]] , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( [[nr]] , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .


--------------------------------------------- Result 86 ---------------------------------------------
Searches for a single attribute and returns all values found in the attribute list . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < String > searchForSingleAttributeValues ( final String [[base]] , final String filter , final Object [ ] params , final String attributeName ) { String [ ] attributeNames = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( [[base]] , filter , params , attributeNames ) ; Set < String > [[result]] = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { [[result]] . addAll ( values ) ; } } return [[result]] ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > searchForSingleAttributeValues ( final String [[kei]] , final String filter , final Object [ ] params , final String attributeName ) { String [ ] attributeNames = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( [[kei]] , filter , params , attributeNames ) ; Set < String > [[implication]] = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { [[implication]] . addAll ( values ) ; } } return [[implication]] ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .


--------------------------------------------- Result 87 ---------------------------------------------
Searches for multiple attribute values . --> Perform madre query --> Socre: 1.0

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String [[base]] , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[madre]] ( final String [[qaeda]] , final String filter , final Object [ ] params , final String [ ] attributeNames ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .


[Succeeded / Failed / Skipped / Total] 54 / 34 / 0 / 88:   9%|▉         | 88/1000 [39:16<6:47:05, 26.78s/it][Succeeded / Failed / Skipped / Total] 54 / 34 / 0 / 88:   9%|▉         | 89/1000 [39:26<6:43:45, 26.59s/it][Succeeded / Failed / Skipped / Total] 55 / 34 / 0 / 89:   9%|▉         | 89/1000 [39:26<6:43:45, 26.59s/it][Succeeded / Failed / Skipped / Total] 55 / 34 / 0 / 89:   9%|▉         | 90/1000 [39:36<6:40:30, 26.41s/it][Succeeded / Failed / Skipped / Total] 56 / 34 / 0 / 90:   9%|▉         | 90/1000 [39:36<6:40:30, 26.41s/it][Succeeded / Failed / Skipped / Total] 56 / 34 / 0 / 90:   9%|▉         | 91/1000 [40:21<6:43:06, 26.61s/it][Succeeded / Failed / Skipped / Total] 57 / 34 / 0 / 91:   9%|▉         | 91/1000 [40:21<6:43:06, 26.61s/it][Succeeded / Failed / Skipped / Total] 57 / 34 / 0 / 91:   9%|▉         | 92/1000 [40:30<6:39:45, 26.42s/it]--------------------------------------------- Result 88 ---------------------------------------------
Search for a single entry in the context . --> Determine the context operations that match the given parameters --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations [[searchForSingleEntryInternal]] ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] [[params]] ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > [[resultsEnum]] = ctx . search ( searchBaseDn , filter , [[params]] , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( [[resultsEnum]] . hasMore ( ) ) { SearchResult searchResult = [[resultsEnum]] . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( [[resultsEnum]] ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations [[differ]] ( DirContext ctx , SearchControls searchControls , String base , String filter , Object [ ] [[phenomenal]] ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( ctx . getNameInNamespace ( ) ) ; final DistinguishedName searchBaseDn = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > [[baccala]] = ctx . search ( searchBaseDn , filter , [[phenomenal]] , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + searchBaseDn + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( [[baccala]] . hasMore ( ) ) { SearchResult searchResult = [[baccala]] . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( [[baccala]] ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .


--------------------------------------------- Result 89 ---------------------------------------------
Builds a SearchControls based on the supplied parameters . --> Define a new SearchControls --> Socre: 1.0

[[[[Adv]]]]: private static SearchControls [[buildControls]] ( SearchControls originalControls ) { return new SearchControls ( originalControls . getSearchScope ( ) , originalControls . getCountLimit ( ) , originalControls . getTimeLimit ( ) , originalControls . getReturningAttributes ( ) , RETURN_OBJECT , originalControls . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls [[defector]] ( SearchControls originalControls ) { return new SearchControls ( originalControls . getSearchScope ( ) , originalControls . getCountLimit ( ) , originalControls . getTimeLimit ( ) , originalControls . getReturningAttributes ( ) , RETURN_OBJECT , originalControls . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .


--------------------------------------------- Result 90 ---------------------------------------------
Given a list of primary keys find the primary keys . --> Hook for acl --> Socre: 1.0

[[[[Adv]]]]: private void [[lookupPrimaryKeys]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void [[hoochie]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .


--------------------------------------------- Result 91 ---------------------------------------------
Builds the web authentication details . --> Wrap a set of J2EE roles --> Socre: 1.0

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[buildDetails]] ( HttpServletRequest context ) { Collection < String > [[j2eeUserRoles]] = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > [[userGas]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[j2eeUserRoles]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[j2eeUserRoles]] + "] mapped to Granted Authorities: [" + [[userGas]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , [[userGas]] ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[merrymaking]] ( HttpServletRequest context ) { Collection < String > [[reams]] = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > [[bask]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[reams]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[reams]] + "] mapped to Granted Authorities: [" + [[bask]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails result = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , [[bask]] ) ; return result ; }
[[[[Nl]]]]: Builds the authentication details object .


--------------------------------------------- Result 92 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 58 / 34 / 0 / 92:   9%|▉         | 92/1000 [40:30<6:39:45, 26.42s/it][Succeeded / Failed / Skipped / Total] 58 / 34 / 0 / 92:   9%|▉         | 93/1000 [40:39<6:36:27, 26.23s/it][Succeeded / Failed / Skipped / Total] 59 / 34 / 0 / 93:   9%|▉         | 93/1000 [40:39<6:36:27, 26.23s/it][Succeeded / Failed / Skipped / Total] 59 / 34 / 0 / 93:   9%|▉         | 94/1000 [40:48<6:33:19, 26.05s/it][Succeeded / Failed / Skipped / Total] 60 / 34 / 0 / 94:   9%|▉         | 94/1000 [40:48<6:33:19, 26.05s/it][Succeeded / Failed / Skipped / Total] 60 / 34 / 0 / 94:  10%|▉         | 95/1000 [40:57<6:30:06, 25.86s/it][Succeeded / Failed / Skipped / Total] 61 / 34 / 0 / 95:  10%|▉         | 95/1000 [40:57<6:30:06, 25.86s/it][Succeeded / Failed / Skipped / Total] 61 / 34 / 0 / 95:  10%|▉         | 96/1000 [41:06<6:27:07, 25.69s/it]Create an embedded server definition . --> Builds the root bean definition --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition [[createEmbeddedServer]] ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition [[buy]] ( Element element , ParserContext parserContext ) { Object source = parserContext . extractSource ( element ) ; String suffix = element . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = element . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition apacheContainer = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; apacheContainer . setSource ( source ) ; apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = element . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } apacheContainer . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; apacheContainer . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , element ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , apacheContainer ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .


--------------------------------------------- Result 93 ---------------------------------------------
Create servlet filter --> Register authentication manager . --> Socre: 1.0

[[[[Adv]]]]: private void [[createServletApiFilter]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void [[attract]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required


--------------------------------------------- Result 94 ---------------------------------------------
Create jaas filter --> helper method --> Socre: 1.0

[[[[Adv]]]]: private void [[createJaasApiFilter]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void [[barstow]] ( ) { final String ATT_JAAS_API_PROVISION = "jaas-api-provision" ; final String DEF_JAAS_API_PROVISION = "false" ; String provideJaasApi = httpElt . getAttribute ( ATT_JAAS_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = DEF_JAAS_API_PROVISION ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required


--------------------------------------------- Result 95 ---------------------------------------------
Whitelist default types . --> protected for testing --> Socre: 1.0

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[createWhitelistedDefaultTyping]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > result = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; result = result . init ( JsonTypeInfo . Id . CLASS , null ) ; result = result . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return result ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[defenceless]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > result = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; result = result . init ( JsonTypeInfo . Id . CLASS , null ) ; result = result . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return result ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .


[Succeeded / Failed / Skipped / Total] 62 / 34 / 0 / 96:  10%|▉         | 96/1000 [41:06<6:27:07, 25.69s/it][Succeeded / Failed / Skipped / Total] 62 / 34 / 0 / 96:  10%|▉         | 97/1000 [41:25<6:25:37, 25.62s/it][Succeeded / Failed / Skipped / Total] 63 / 34 / 0 / 97:  10%|▉         | 97/1000 [41:25<6:25:37, 25.62s/it][Succeeded / Failed / Skipped / Total] 63 / 34 / 0 / 97:  10%|▉         | 98/1000 [42:04<6:27:14, 25.76s/it][Succeeded / Failed / Skipped / Total] 63 / 35 / 0 / 98:  10%|▉         | 98/1000 [42:04<6:27:14, 25.76s/it][Succeeded / Failed / Skipped / Total] 63 / 35 / 0 / 98:  10%|▉         | 99/1000 [42:21<6:25:28, 25.67s/it][Succeeded / Failed / Skipped / Total] 63 / 36 / 0 / 99:  10%|▉         | 99/1000 [42:21<6:25:28, 25.67s/it][Succeeded / Failed / Skipped / Total] 63 / 36 / 0 / 99:  10%|█         | 100/1000 [42:32<6:22:52, 25.53s/it][Succeeded / Failed / Skipped / Total] 63 / 37 / 0 / 100:  10%|█         | 100/1000 [42:32<6:22:52, 25.53s/it][Succeeded / Failed / Skipped / Total] 63 / 37 / 0 / 100:  10%|█         | 101/1000 [43:11<6:24:29, 25.66s/it][Succeeded / Failed / Skipped / Total] 63 / 38 / 0 / 101:  10%|█         | 101/1000 [43:11<6:24:29, 25.66s/it][Succeeded / Failed / Skipped / Total] 63 / 38 / 0 / 101:  10%|█         | 102/1000 [44:26<6:31:12, 26.14s/it]--------------------------------------------- Result 96 ---------------------------------------------
Registers the spring security filter chain . --> Register a web application filter --> Socre: 1.0

[[[[Adv]]]]: private void [[insertSpringSecurityFilterChain]] ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , True , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void [[banyon]] ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , True , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain


--------------------------------------------- Result 97 ---------------------------------------------
Returns the token for the given series ID . --> Get a remember me by seriesId --> Socre: 1.0

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet [[rs]] , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( [[rs]] . getString ( 1 ) , [[rs]] . getString ( 2 ) , [[rs]] . getString ( 3 ) , [[rs]] . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[swa]] ( String seriesId ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet [[sa]] , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( [[sa]] . getString ( 1 ) , [[sa]] . getString ( 2 ) , [[sa]] . getString ( 3 ) , [[sa]] . getTimestamp ( 4 ) ) ; } } , seriesId ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + seriesId + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + seriesId + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + seriesId , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .


--------------------------------------------- Result 98 ---------------------------------------------
Gets the roles associated with the given attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > attributes ) { List < GrantedAuthority > result = new ArrayList <> ( attributes . size ( ) ) ; for ( String attribute : attributes ) { result . add ( getGrantedAuthority ( attribute ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[stepbrother]] ( Collection < String > attributes ) { List < GrantedAuthority > result = new ArrayList <> ( attributes . size ( ) ) ; for ( String attribute : attributes ) { result . add ( getGrantedAuthority ( attribute ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .


--------------------------------------------- Result 99 ---------------------------------------------
Returns a new cipher instance . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String [[algorithm]] ) { try { return Cipher . getInstance ( [[algorithm]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[scheherazade]] ( String [[mathematical]] ) { try { return Cipher . getInstance ( [[mathematical]] ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .


--------------------------------------------- Result 100 ---------------------------------------------
Invoked after properties have been set . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[azeem]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .


--------------------------------------------- Result 101 ---------------------------------------------
Check the security context . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[doFilter]] ( ServletRequest request , ServletResponse [[response]] , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) [[response]] ) ; } chain . doFilter ( request , [[response]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void [[abduction]] ( ServletRequest request , ServletResponse [[address]] , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) request ) ) { doAuthenticate ( ( HttpServletRequest ) request , ( HttpServletResponse ) [[address]] ) ; } chain . doFilter ( request , [[address]] ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .


--------------------------------------------- Result 102 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 63 / 39 / 0 / 102:  10%|█         | 102/1000 [44:26<6:31:12, 26.14s/it][Succeeded / Failed / Skipped / Total] 63 / 39 / 0 / 102:  10%|█         | 103/1000 [45:24<6:35:25, 26.45s/it][Succeeded / Failed / Skipped / Total] 64 / 39 / 0 / 103:  10%|█         | 103/1000 [45:24<6:35:25, 26.45s/it][Succeeded / Failed / Skipped / Total] 64 / 39 / 0 / 103:  10%|█         | 104/1000 [46:12<6:38:03, 26.66s/it][Succeeded / Failed / Skipped / Total] 65 / 39 / 0 / 104:  10%|█         | 104/1000 [46:12<6:38:03, 26.66s/it][Succeeded / Failed / Skipped / Total] 65 / 39 / 0 / 104:  10%|█         | 105/1000 [46:57<6:40:18, 26.84s/it][Succeeded / Failed / Skipped / Total] 65 / 40 / 0 / 105:  10%|█         | 105/1000 [46:57<6:40:18, 26.84s/it][Succeeded / Failed / Skipped / Total] 65 / 40 / 0 / 105:  11%|█         | 106/1000 [47:08<6:37:32, 26.68s/it][Succeeded / Failed / Skipped / Total] 66 / 40 / 0 / 106:  11%|█         | 106/1000 [47:08<6:37:32, 26.68s/it][Succeeded / Failed / Skipped / Total] 66 / 40 / 0 / 106:  11%|█         | 107/1000 [47:15<6:34:21, 26.50s/it]Check if the principal has changed . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[principalChanged]] ( HttpServletRequest request , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return False ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return False ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return True ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean [[pollutes]] ( HttpServletRequest request , Authentication currentAuthentication ) { Object principal = getPreAuthenticatedPrincipal ( request ) ; if ( ( principal instanceof String ) && currentAuthentication . getName ( ) . equals ( principal ) ) { return False ; } if ( principal != null && principal . equals ( currentAuthentication . getPrincipal ( ) ) ) { return False ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return True ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries


--------------------------------------------- Result 103 ---------------------------------------------
Perform authentication . --> Perform slovakia --> Socre: 1.0

[[[[Adv]]]]: private void [[doAuthenticate]] ( HttpServletRequest request , HttpServletResponse [[response]] ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , [[response]] , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , [[response]] , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void [[slovakia]] ( HttpServletRequest request , HttpServletResponse [[riposte]] ) throws IOException , ServletException { Authentication authResult ; Object principal = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( principal == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + principal + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( principal , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , [[riposte]] , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , [[riposte]] , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .


--------------------------------------------- Result 104 ---------------------------------------------
Checks that the content length has been written . --> asynchronous mode --> Socre: 1.0

[[[[Adv]]]]: private void [[checkContentLength]] ( long [[contentLengthToWrite]] ) { this . contentWritten += [[contentLengthToWrite]] ; boolean [[isBodyFullyWritten]] = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( [[isBodyFullyWritten]] || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void [[asmodeus]] ( long [[betweens]] ) { this . contentWritten += [[betweens]] ; boolean [[bulgur]] = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean requiresFlush = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( [[bulgur]] || requiresFlush ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .


--------------------------------------------- Result 105 ---------------------------------------------
Map the authorities to a set of authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > [[mapAuthorities]] ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[mapped]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority [[authority]] : authorities ) { [[mapped]] . add ( mapAuthority ( [[authority]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[mapped]] . add ( defaultAuthority ) ; } return [[mapped]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > [[sleepless]] ( Collection < ? extends GrantedAuthority > authorities ) { HashSet < GrantedAuthority > [[vested]] = new HashSet <> ( authorities . size ( ) ) ; for ( GrantedAuthority [[governments]] : authorities ) { [[vested]] . add ( mapAuthority ( [[governments]] . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[vested]] . add ( defaultAuthority ) ; } return [[vested]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .


--------------------------------------------- Result 106 ---------------------------------------------
Sets the URL of the login process . --> Set admiral filter --> Socre: 1.0

[[[[Adv]]]]: public T [[loginProcessingUrl]] ( String loginProcessingUrl ) { this . loginProcessingUrl = [[loginProcessingUrl]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[loginProcessingUrl]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T [[admiral]] ( String loginProcessingUrl ) { this . loginProcessingUrl = [[admiral]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[admiral]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .


--------------------------------------------- Result 107 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 67 / 40 / 0 / 107:  11%|█         | 107/1000 [47:15<6:34:21, 26.50s/it][Succeeded / Failed / Skipped / Total] 67 / 40 / 0 / 107:  11%|█         | 108/1000 [47:24<6:31:31, 26.34s/it][Succeeded / Failed / Skipped / Total] 68 / 40 / 0 / 108:  11%|█         | 108/1000 [47:24<6:31:31, 26.34s/it][Succeeded / Failed / Skipped / Total] 68 / 40 / 0 / 108:  11%|█         | 109/1000 [47:30<6:28:24, 26.16s/it][Succeeded / Failed / Skipped / Total] 69 / 40 / 0 / 109:  11%|█         | 109/1000 [47:30<6:28:24, 26.16s/it][Succeeded / Failed / Skipped / Total] 69 / 40 / 0 / 109:  11%|█         | 110/1000 [48:11<6:29:54, 26.29s/it][Succeeded / Failed / Skipped / Total] 69 / 41 / 0 / 110:  11%|█         | 110/1000 [48:11<6:29:54, 26.29s/it][Succeeded / Failed / Skipped / Total] 69 / 41 / 0 / 110:  11%|█         | 111/1000 [48:20<6:27:08, 26.13s/it][Succeeded / Failed / Skipped / Total] 70 / 41 / 0 / 111:  11%|█         | 111/1000 [48:20<6:27:08, 26.13s/it][Succeeded / Failed / Skipped / Total] 70 / 41 / 0 / 111:  11%|█         | 112/1000 [48:38<6:25:36, 26.05s/it][Succeeded / Failed / Skipped / Total] 71 / 41 / 0 / 112:  11%|█         | 112/1000 [48:38<6:25:36, 26.05s/it][Succeeded / Failed / Skipped / Total] 71 / 41 / 0 / 112:  11%|█▏        | 113/1000 [49:40<6:29:54, 26.37s/it]Update the authentication defaults . --> helper method --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[devotedly]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .


--------------------------------------------- Result 108 ---------------------------------------------
Update access defaults . --> Aper method to permit all alpertents --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[alpert]] ( B http ) { if ( permitAll ) { PermitAllSupport . permitAll ( http , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .


--------------------------------------------- Result 109 ---------------------------------------------
Map password . --> mapPassword --> Socre: 1.0

[[[[Adv]]]]: protected String mapPassword ( Object [[passwordValue]] ) { if ( ! ( [[passwordValue]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String mapPassword ( Object [[doors]] ) { if ( ! ( [[doors]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .


--------------------------------------------- Result 110 ---------------------------------------------
Extract remember me cookie from request --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[extractRememberMeCookie]] ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String [[confused]] ( HttpServletRequest request ) { Cookie [ ] cookies = request . getCookies ( ) ; if ( ( cookies == null ) || ( cookies . length == 0 ) ) { return null ; } for ( Cookie cookie : cookies ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .


--------------------------------------------- Result 111 ---------------------------------------------
Encode cookie . --> helper method to convert cookie tokens --> Socre: 1.0

[[[[Adv]]]]: protected String [[encodeCookie]] ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String [[afer]] ( String [ ] cookieTokens ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < cookieTokens . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( cookieTokens [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < cookieTokens . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .


--------------------------------------------- Result 112 ---------------------------------------------
Sets the cookie . --> Creates a HttpServlet --> Socre: 1.0

[[[[Adv]]]]: protected void [[setCookie]] ( String [ ] [[tokens]] , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( [[tokens]] ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( True ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void [[redds]] ( String [ ] [[souvenir]] , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String cookieValue = encodeCookie ( [[souvenir]] ) ; Cookie cookie = new Cookie ( cookieName , cookieValue ) ; cookie . setMaxAge ( maxAge ) ; cookie . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { cookie . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { cookie . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { cookie . setSecure ( request . isSecure ( ) ) ; } else { cookie . setSecure ( useSecureCookie ) ; } cookie . setHttpOnly ( True ) ; response . addCookie ( cookie ) ; }
[[[[Nl]]]]: Sets the cookie on the response .


--------------------------------------------- Result 113 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 71 / 42 / 0 / 113:  11%|█▏        | 113/1000 [49:40<6:29:54, 26.37s/it][Succeeded / Failed / Skipped / Total] 71 / 42 / 0 / 113:  11%|█▏        | 114/1000 [50:30<6:32:31, 26.58s/it][Succeeded / Failed / Skipped / Total] 72 / 42 / 0 / 114:  11%|█▏        | 114/1000 [50:30<6:32:31, 26.58s/it][Succeeded / Failed / Skipped / Total] 72 / 42 / 0 / 114:  12%|█▏        | 115/1000 [51:02<6:32:47, 26.63s/it][Succeeded / Failed / Skipped / Total] 72 / 43 / 0 / 115:  12%|█▏        | 115/1000 [51:02<6:32:47, 26.63s/it][Succeeded / Failed / Skipped / Total] 72 / 43 / 0 / 115:  12%|█▏        | 116/1000 [51:41<6:33:54, 26.74s/it][Succeeded / Failed / Skipped / Total] 72 / 44 / 0 / 116:  12%|█▏        | 116/1000 [51:41<6:33:54, 26.74s/it][Succeeded / Failed / Skipped / Total] 72 / 44 / 0 / 116:  12%|█▏        | 117/1000 [53:23<6:42:56, 27.38s/it][Succeeded / Failed / Skipped / Total] 72 / 45 / 0 / 117:  12%|█▏        | 117/1000 [53:23<6:42:56, 27.38s/it][Succeeded / Failed / Skipped / Total] 72 / 45 / 0 / 117:  12%|█▏        | 118/1000 [53:33<6:40:22, 27.24s/it][Succeeded / Failed / Skipped / Total] 73 / 45 / 0 / 118:  12%|█▏        | 118/1000 [53:33<6:40:22, 27.24s/it][Succeeded / Failed / Skipped / Total] 73 / 45 / 0 / 118:  12%|█▏        | 119/1000 [54:43<6:45:06, 27.59s/it]Resolves the given parameter . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Mono < Object > [[resolveArgument]] ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > [[credulity]] ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > reactiveSecurityContext = ReactiveSecurityContextHolder . getContext ( ) ; if ( reactiveSecurityContext == null ) { return null ; } return reactiveSecurityContext . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .


--------------------------------------------- Result 114 ---------------------------------------------
Gets the query string . --> Convenience method to do a conover --> Socre: 1.0

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String [[query]] = request . getQueryString ( ) ; if ( [[query]] == null ) { return null ; } final String [[result]] = artifactPattern . matcher ( [[query]] ) . replaceFirst ( "" ) ; if ( [[result]] . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[conover]] ( final HttpServletRequest request , final Pattern artifactPattern ) { final String [[vista]] = request . getQueryString ( ) ; if ( [[vista]] == null ) { return null ; } final String [[accomplishment]] = artifactPattern . matcher ( [[vista]] ) . replaceFirst ( "" ) ; if ( [[accomplishment]] . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .


--------------------------------------------- Result 115 ---------------------------------------------
Gets the service port . --> [[[FAILED]]]

[[[[Adv]]]]: private static int [[getServicePort]] ( URL [[casServiceUrl]] ) { int port = [[casServiceUrl]] . getPort ( ) ; if ( port == - 1 ) { port = [[casServiceUrl]] . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int [[canberra]] ( URL [[flowed]] ) { int port = [[flowed]] . getPort ( ) ; if ( port == - 1 ) { port = [[flowed]] . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .


--------------------------------------------- Result 116 ---------------------------------------------
Gets the principal . --> [[[FAILED]]]

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[authentication]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object [[principal]] = [[authentication]] . getPrincipal ( ) ; if ( [[principal]] instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) [[principal]] ; return details . getDn ( ) ; } else if ( [[authentication]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication [[accreditation]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( [[accreditation]] == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object [[grande]] = [[accreditation]] . getPrincipal ( ) ; if ( [[grande]] instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) [[grande]] ; return details . getDn ( ) ; } else if ( [[accreditation]] instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .


--------------------------------------------- Result 117 ---------------------------------------------
Clears the session . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[logout]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession [[session]] = request . getSession ( "[[False]]" != "[[False]]" ) ; if ( [[session]] != null ) { logger . debug ( "Invalidating session: " + [[session]] . getId ( ) ) ; [[session]] . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext [[context]] = SecurityContextHolder . getContext ( ) ; [[context]] . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void [[meadowlark]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { Assert . notNull ( request , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession [[lecturing]] = request . getSession ( "[["Disingenuous" != "Disingenuous"]]" != "[["Disingenuous" != "Disingenuous"]]" ) ; if ( [[lecturing]] != null ) { logger . debug ( "Invalidating session: " + [[lecturing]] . getId ( ) ) ; [[lecturing]] . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext [[ambient]] = SecurityContextHolder . getContext ( ) ; [[ambient]] . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .


--------------------------------------------- Result 118 ---------------------------------------------
Authenticate the given authentication token . --> returns null if not found --> Socre: 1.0

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[auth]] ) throws AuthenticationException { if ( ! ( [[auth]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[auth]] ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[harmonia]] ) throws AuthenticationException { if ( ! ( [[harmonia]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[harmonia]] ; Set < GrantedAuthority > authorities ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential


[Succeeded / Failed / Skipped / Total] 73 / 46 / 0 / 119:  12%|█▏        | 119/1000 [54:43<6:45:06, 27.59s/it][Succeeded / Failed / Skipped / Total] 73 / 46 / 0 / 119:  12%|█▏        | 120/1000 [55:07<6:44:17, 27.57s/it][Succeeded / Failed / Skipped / Total] 74 / 46 / 0 / 120:  12%|█▏        | 120/1000 [55:07<6:44:17, 27.57s/it][Succeeded / Failed / Skipped / Total] 74 / 46 / 0 / 120:  12%|█▏        | 121/1000 [55:15<6:41:24, 27.40s/it][Succeeded / Failed / Skipped / Total] 74 / 47 / 0 / 121:  12%|█▏        | 121/1000 [55:15<6:41:24, 27.40s/it][Succeeded / Failed / Skipped / Total] 74 / 47 / 0 / 121:  12%|█▏        | 122/1000 [55:25<6:38:50, 27.26s/it][Succeeded / Failed / Skipped / Total] 74 / 48 / 0 / 122:  12%|█▏        | 122/1000 [55:25<6:38:50, 27.26s/it][Succeeded / Failed / Skipped / Total] 74 / 48 / 0 / 122:  12%|█▏        | 123/1000 [55:52<6:38:21, 27.25s/it][Succeeded / Failed / Skipped / Total] 74 / 49 / 0 / 123:  12%|█▏        | 123/1000 [55:52<6:38:21, 27.25s/it][Succeeded / Failed / Skipped / Total] 74 / 49 / 0 / 123:  12%|█▏        | 124/1000 [56:09<6:36:41, 27.17s/it][Succeeded / Failed / Skipped / Total] 74 / 50 / 0 / 124:  12%|█▏        | 124/1000 [56:09<6:36:41, 27.17s/it][Succeeded / Failed / Skipped / Total] 74 / 50 / 0 / 124:  12%|█▎        | 125/1000 [56:26<6:35:02, 27.09s/it]--------------------------------------------- Result 119 ---------------------------------------------
Build the provider URL from the given list of URLs . --> [[[FAILED]]]

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > [[urls]] , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( [[urls]] , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String [[serverUrl]] : [[urls]] ) { String trimmedUrl = [[serverUrl]] . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String buildProviderUrl ( List < String > [[alliance]] , String baseDn ) { Assert . notNull ( baseDn , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( [[alliance]] , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = baseDn . trim ( ) ; StringBuilder providerUrl = new StringBuilder ( ) ; for ( String [[benefactress]] : [[alliance]] ) { String trimmedUrl = [[benefactress]] . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } providerUrl . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { providerUrl . append ( "/" ) ; } providerUrl . append ( trimmedBaseDn ) ; providerUrl . append ( " " ) ; } return providerUrl . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .


--------------------------------------------- Result 120 ---------------------------------------------
Sets the environment environment properties . --> Set the backdrop --> Socre: 1.0

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > [[environment]] ) { Assert . notEmpty ( [[environment]] , "environment must not be empty" ) ; this . [[contextEnvironmentProperties]] = new Hashtable <> ( [[environment]] ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[linden]] ( Map < String , Object > [[backdrop]] ) { Assert . notEmpty ( [[backdrop]] , "environment must not be empty" ) ; this . [[airbrush]] = new Hashtable <> ( [[backdrop]] ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .


--------------------------------------------- Result 121 ---------------------------------------------
Returns the full URL of this request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[ether]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .


--------------------------------------------- Result 122 ---------------------------------------------
Render the end of the tag . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[squares]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .


--------------------------------------------- Result 123 ---------------------------------------------
Initializes the user details service . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected void [[initUserDetailsService]] ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void [[reggie]] ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails userDetails : this . users ) { getUserDetailsService ( ) . createUser ( userDetails ) ; } }
[[[[Nl]]]]: Populates the users that have been added .


--------------------------------------------- Result 124 ---------------------------------------------
Returns the UserDetailsService . --> [[[FAILED]]]

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > [[beans]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[beans]] . size ( ) == 0 ) { [[beans]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[beans]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[beans]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[beans]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > [[sorghum]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[sorghum]] . size ( ) == 0 ) { [[sorghum]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[sorghum]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[sorghum]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[sorghum]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .


--------------------------------------------- Result 125 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 75 / 50 / 0 / 125:  12%|█▎        | 125/1000 [56:26<6:35:02, 27.09s/it][Succeeded / Failed / Skipped / Total] 75 / 50 / 0 / 125:  13%|█▎        | 126/1000 [56:36<6:32:40, 26.96s/it][Succeeded / Failed / Skipped / Total] 76 / 50 / 0 / 126:  13%|█▎        | 126/1000 [56:36<6:32:40, 26.96s/it][Succeeded / Failed / Skipped / Total] 76 / 50 / 0 / 126:  13%|█▎        | 127/1000 [57:10<6:33:00, 27.01s/it][Succeeded / Failed / Skipped / Total] 77 / 50 / 0 / 127:  13%|█▎        | 127/1000 [57:10<6:33:00, 27.01s/it][Succeeded / Failed / Skipped / Total] 77 / 50 / 0 / 127:  13%|█▎        | 128/1000 [57:20<6:30:40, 26.88s/it][Succeeded / Failed / Skipped / Total] 78 / 50 / 0 / 128:  13%|█▎        | 128/1000 [57:20<6:30:40, 26.88s/it][Succeeded / Failed / Skipped / Total] 78 / 50 / 0 / 128:  13%|█▎        | 129/1000 [57:40<6:29:26, 26.83s/it][Succeeded / Failed / Skipped / Total] 78 / 51 / 0 / 129:  13%|█▎        | 129/1000 [57:40<6:29:26, 26.83s/it][Succeeded / Failed / Skipped / Total] 78 / 51 / 0 / 129:  13%|█▎        | 130/1000 [58:10<6:29:21, 26.85s/it][Succeeded / Failed / Skipped / Total] 79 / 51 / 0 / 130:  13%|█▎        | 130/1000 [58:10<6:29:21, 26.85s/it][Succeeded / Failed / Skipped / Total] 79 / 51 / 0 / 130:  13%|█▎        | 131/1000 [58:34<6:28:33, 26.83s/it]Adds the pkce parameters . --> Rethrowser --> Socre: 1.0

[[[[Adv]]]]: private void [[addPkceParameters]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String [[codeVerifier]] = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , [[codeVerifier]] ) ; try { String codeChallenge = createCodeChallenge ( [[codeVerifier]] ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , [[codeVerifier]] ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void [[blackmailer]] ( Map < String , Object > attributes , Map < String , Object > additionalParameters ) { String [[babbage]] = this . codeVerifierGenerator . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , [[babbage]] ) ; try { String codeChallenge = createCodeChallenge ( [[babbage]] ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { additionalParameters . put ( PkceParameterNames . CODE_CHALLENGE , [[babbage]] ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests


--------------------------------------------- Result 126 ---------------------------------------------
Determines if this request requires authentication . --> Does the request requires authentication? --> Socre: 1.0

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean [[serviceTicketRequest]] = [[serviceTicketRequest]] ( request , response ) ; final boolean result = [[serviceTicketRequest]] || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( [[serviceTicketRequest]] , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean requiresAuthentication ( final HttpServletRequest request , final HttpServletResponse response ) { final boolean [[travellers]] = [[travellers]] ( request , response ) ; final boolean result = [[travellers]] || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( [[travellers]] , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .


--------------------------------------------- Result 127 ---------------------------------------------
Handles request ticket request . --> merge achievement --> Socre: 1.0

[[[[Adv]]]]: private boolean [[serviceTicketRequest]] ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { boolean [[result]] = super . requiresAuthentication ( [[request]] , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean [[bangkok]] ( final HttpServletRequest [[appealed]] , final HttpServletResponse response ) { boolean [[achievements]] = super . requiresAuthentication ( [[appealed]] , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[achievements]] ) ; } return [[achievements]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .


--------------------------------------------- Result 128 ---------------------------------------------
Returns true if the ticket should be authenticated . --> Validate artifactTicket --> Socre: 1.0

[[[[Adv]]]]: private boolean [[proxyTicketRequest]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return False ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean [[valdez]] ( final boolean serviceTicketRequest , final HttpServletRequest request ) { if ( serviceTicketRequest ) { return False ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .


--------------------------------------------- Result 129 ---------------------------------------------
Determines if the current authentication is authenticated . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[authentication]] != null && [[authentication]] . isAuthenticated ( ) && ! ( [[authentication]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[clearances]] ( ) { Authentication [[certifiable]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[certifiable]] != null && [[certifiable]] . isAuthenticated ( ) && ! ( [[certifiable]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .


--------------------------------------------- Result 130 ---------------------------------------------
Determines if a proxy is configured . --> Implementation of proxyReceptor --> Socre: 1.0

[[[[Adv]]]]: private boolean [[proxyReceptorRequest]] ( final HttpServletRequest [[request]] ) { final boolean [[result]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[request]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean [[solly]] ( final HttpServletRequest [[requisitions]] ) { final boolean [[resulted]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[requisitions]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[resulted]] ) ; } return [[resulted]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .


--------------------------------------------- Result 131 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 80 / 51 / 0 / 131:  13%|█▎        | 131/1000 [58:34<6:28:33, 26.83s/it][Succeeded / Failed / Skipped / Total] 80 / 51 / 0 / 131:  13%|█▎        | 132/1000 [58:45<6:26:25, 26.71s/it][Succeeded / Failed / Skipped / Total] 81 / 51 / 0 / 132:  13%|█▎        | 132/1000 [58:45<6:26:25, 26.71s/it][Succeeded / Failed / Skipped / Total] 81 / 51 / 0 / 132:  13%|█▎        | 133/1000 [58:55<6:24:05, 26.58s/it][Succeeded / Failed / Skipped / Total] 82 / 51 / 0 / 133:  13%|█▎        | 133/1000 [58:55<6:24:05, 26.58s/it][Succeeded / Failed / Skipped / Total] 82 / 51 / 0 / 133:  13%|█▎        | 134/1000 [59:24<6:23:55, 26.60s/it][Succeeded / Failed / Skipped / Total] 82 / 52 / 0 / 134:  13%|█▎        | 134/1000 [59:24<6:23:55, 26.60s/it][Succeeded / Failed / Skipped / Total] 82 / 52 / 0 / 134:  14%|█▎        | 135/1000 [59:53<6:23:42, 26.62s/it][Succeeded / Failed / Skipped / Total] 82 / 53 / 0 / 135:  14%|█▎        | 135/1000 [59:53<6:23:42, 26.62s/it][Succeeded / Failed / Skipped / Total] 82 / 53 / 0 / 135:  14%|█▎        | 136/1000 [1:00:20<6:23:18, 26.62s/it][Succeeded / Failed / Skipped / Total] 82 / 54 / 0 / 136:  14%|█▎        | 136/1000 [1:00:20<6:23:18, 26.62s/it][Succeeded / Failed / Skipped / Total] 82 / 54 / 0 / 136:  14%|█▎        | 137/1000 [1:01:18<6:26:11, 26.85s/it][Succeeded / Failed / Skipped / Total] 83 / 54 / 0 / 137:  14%|█▎        | 137/1000 [1:01:18<6:26:11, 26.85s/it][Succeeded / Failed / Skipped / Total] 83 / 54 / 0 / 137:  14%|█▍        | 138/1000 [1:01:37<6:24:56, 26.79s/it]Create a new SecurityExpression root for this security context . --> Create a new MethodSecurityExpression --> Socre: 1.0

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[createSecurityExpressionRoot]] ( Authentication [[authentication]] , MethodInvocation invocation ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( [[authentication]] ) ; root . setThis ( invocation . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[comet]] ( Authentication [[testimonial]] , MethodInvocation invocation ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( [[testimonial]] ) ; root . setThis ( invocation . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .


--------------------------------------------- Result 132 ---------------------------------------------
Get JWK set --> Get accelerant acceleration --> Socre: 1.0

[[[[Adv]]]]: private Mono < JWKSet > [[getJWKSet]] ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > [[accelerant]] ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . cachedJWKSet . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .


--------------------------------------------- Result 133 ---------------------------------------------
Encodes the given string using UTF - 8 encoding . --> Encode property value . --> Socre: 1.0

[[[[Adv]]]]: private String [[utf8UrlEncode]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String [[bayard]] ( String value ) { try { return URLEncoder . encode ( value , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8


--------------------------------------------- Result 134 ---------------------------------------------
Get the collection of groups based on the authenticated user --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[getWebSphereGroupsBasedGrantedAuthorities]] ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[userGas]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + [[userGas]] ) ; } return [[userGas]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[yoruba]] ( ) { List < String > webSphereGroups = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > [[messer]] = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( webSphereGroups ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + webSphereGroups + " mapped to Granted Authorities: " + [[messer]] ) ; } return [[messer]] ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .


--------------------------------------------- Result 135 ---------------------------------------------
Load user by assertion . --> [[[FAILED]]]

[[[[Adv]]]]: protected UserDetails [[loadUserByAssertion]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails [[lapdog]] ( final Assertion assertion ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( assertion , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .


--------------------------------------------- Result 136 ---------------------------------------------
Gets the pre authenticated principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object principal = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object [[ooops]] ( HttpServletRequest httpRequest ) { Object principal = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + principal ) ; } return principal ; }
[[[[Nl]]]]: Return the WebSphere user name .


--------------------------------------------- Result 137 ---------------------------------------------
Concatenate two arrays . --> Create a new n -ini message with no nand --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[concatenate]] ( byte [ ] ... [[arrays]] ) { int [[length]] = 0 ; for ( byte [ ] [[array]] : [[arrays]] ) { [[length]] += [[array]] . length ; } byte [ ] newArray = new byte [ [[length]] ] ; int destPos = 0 ; for ( byte [ ] [[array]] : [[arrays]] ) { System . arraycopy ( [[array]] , 0 , newArray , destPos , [[array]] . length ) ; destPos += [[array]] . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] [[nandini]] ( byte [ ] ... [[booth]] ) { int [[deadline]] = 0 ; for ( byte [ ] [[newsstand]] : [[booth]] ) { [[deadline]] += [[newsstand]] . length ; } byte [ ] newArray = new byte [ [[deadline]] ] ; int destPos = 0 ; for ( byte [ ] [[newsstand]] : [[booth]] ) { System . arraycopy ( [[newsstand]] , 0 , newArray , destPos , [[newsstand]] . length ) ; destPos += [[newsstand]] . length ; } return newArray ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .


--------------------------------------------- Result 138 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 84 / 54 / 0 / 138:  14%|█▍        | 138/1000 [1:01:37<6:24:56, 26.79s/it][Succeeded / Failed / Skipped / Total] 84 / 54 / 0 / 138:  14%|█▍        | 139/1000 [1:02:26<6:26:46, 26.95s/it][Succeeded / Failed / Skipped / Total] 84 / 55 / 0 / 139:  14%|█▍        | 139/1000 [1:02:26<6:26:46, 26.95s/it][Succeeded / Failed / Skipped / Total] 84 / 55 / 0 / 139:  14%|█▍        | 140/1000 [1:02:50<6:25:59, 26.93s/it][Succeeded / Failed / Skipped / Total] 85 / 55 / 0 / 140:  14%|█▍        | 140/1000 [1:02:50<6:25:59, 26.93s/it][Succeeded / Failed / Skipped / Total] 85 / 55 / 0 / 140:  14%|█▍        | 141/1000 [1:03:16<6:25:30, 26.93s/it][Succeeded / Failed / Skipped / Total] 86 / 55 / 0 / 141:  14%|█▍        | 141/1000 [1:03:16<6:25:30, 26.93s/it][Succeeded / Failed / Skipped / Total] 86 / 55 / 0 / 141:  14%|█▍        | 142/1000 [1:03:46<6:25:20, 26.95s/it][Succeeded / Failed / Skipped / Total] 86 / 56 / 0 / 142:  14%|█▍        | 142/1000 [1:03:46<6:25:20, 26.95s/it][Succeeded / Failed / Skipped / Total] 86 / 56 / 0 / 142:  14%|█▍        | 143/1000 [1:04:18<6:25:24, 26.98s/it][Succeeded / Failed / Skipped / Total] 87 / 56 / 0 / 143:  14%|█▍        | 143/1000 [1:04:18<6:25:24, 26.98s/it][Succeeded / Failed / Skipped / Total] 87 / 56 / 0 / 143:  14%|█▍        | 144/1000 [1:04:36<6:24:04, 26.92s/it][Succeeded / Failed / Skipped / Total] 87 / 57 / 0 / 144:  14%|█▍        | 144/1000 [1:04:36<6:24:04, 26.92s/it][Succeeded / Failed / Skipped / Total] 87 / 57 / 0 / 144:  14%|█▍        | 145/1000 [1:05:11<6:24:21, 26.97s/it]Get a portion of a byte array . --> get oafs --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[subArray]] ( byte [ ] array , int [[beginIndex]] , int endIndex ) { int length = endIndex - [[beginIndex]] ; byte [ ] subarray = new byte [ length ] ; System . arraycopy ( array , [[beginIndex]] , subarray , 0 , length ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] [[oafs]] ( byte [ ] array , int [[avenida]] , int endIndex ) { int length = endIndex - [[avenida]] ; byte [ ] subarray = new byte [ length ] ; System . arraycopy ( array , [[avenida]] , subarray , 0 , length ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .


--------------------------------------------- Result 139 ---------------------------------------------
Gets the granted authorities for the given set of attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : attributes ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { gaList . addAll ( c ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[kagan]] ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String attribute : attributes ) { Collection < GrantedAuthority > c = attributes2grantedAuthoritiesMap . get ( attribute ) ; if ( c != null ) { gaList . addAll ( c ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .


--------------------------------------------- Result 140 ---------------------------------------------
Preprocess a map of attribute map . --> Returns a collection of granted authorities . --> Socre: 1.0

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[preProcessMap]] ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > [[courgettes]] ( Map < ? , ? > orgMap ) { Map < String , Collection < GrantedAuthority > > result = new HashMap < String , Collection < GrantedAuthority > > ( orgMap . size ( ) ) ; for ( Map . Entry < ? , ? > entry : orgMap . entrySet ( ) ) { Assert . isInstanceOf ( String . class , entry . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; result . put ( ( String ) entry . getKey ( ) , getGrantedAuthorityCollection ( entry . getValue ( ) ) ) ; } return result ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections


--------------------------------------------- Result 141 ---------------------------------------------
Gets the granted authority collection . --> Parsing authority --> Socre: 1.0

[[[[Adv]]]]: private Collection < GrantedAuthority > [[getGrantedAuthorityCollection]] ( Object value ) { Collection < GrantedAuthority > [[result]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[result]] , value ) ; return [[result]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > [[shoeing]] ( Object value ) { Collection < GrantedAuthority > [[fruit]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[fruit]] , value ) ; return [[fruit]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities


--------------------------------------------- Result 142 ---------------------------------------------
Adds a collection of granted authorities to the result . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > result , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( result , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( result , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { [[addGrantedAuthorityCollection]] ( result , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[admonished]] ( Collection < GrantedAuthority > result , Object value ) { if ( value == null ) { return ; } if ( value instanceof Collection < ? > ) { [[admonished]] ( result , ( Collection < ? > ) value ) ; } else if ( value instanceof Object [ ] ) { [[admonished]] ( result , ( Object [ ] ) value ) ; } else if ( value instanceof String ) { [[admonished]] ( result , ( String ) value ) ; } else if ( value instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) value ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + value . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .


--------------------------------------------- Result 143 ---------------------------------------------
Gets the pre - authenticated principal . --> Managed manger --> Socre: 1.0

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest [[httpRequest]] ) { Object [[principal]] = [[httpRequest]] . getUserPrincipal ( ) == null ? null : [[httpRequest]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object [[manliness]] ( HttpServletRequest [[consultancy]] ) { Object [[main]] = [[consultancy]] . getUserPrincipal ( ) == null ? null : [[consultancy]] . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[main]] ) ; } return [[main]] ; }
[[[[Nl]]]]: Return the J2EE user name .


--------------------------------------------- Result 144 ---------------------------------------------
Returns the shared object of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . [[sharedObjects]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[sects]] > [[sects]] getSharedObject ( Class < [[sects]] > sharedType ) { return ( [[sects]] ) this . [[careful]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .


--------------------------------------------- Result 145 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 88 / 57 / 0 / 145:  14%|█▍        | 145/1000 [1:05:11<6:24:21, 26.97s/it][Succeeded / Failed / Skipped / Total] 88 / 57 / 0 / 145:  15%|█▍        | 146/1000 [1:05:22<6:22:23, 26.87s/it][Succeeded / Failed / Skipped / Total] 89 / 57 / 0 / 146:  15%|█▍        | 146/1000 [1:05:22<6:22:23, 26.87s/it][Succeeded / Failed / Skipped / Total] 89 / 57 / 0 / 146:  15%|█▍        | 147/1000 [1:05:39<6:20:57, 26.80s/it][Succeeded / Failed / Skipped / Total] 90 / 57 / 0 / 147:  15%|█▍        | 147/1000 [1:05:39<6:20:57, 26.80s/it][Succeeded / Failed / Skipped / Total] 90 / 57 / 0 / 147:  15%|█▍        | 148/1000 [1:05:49<6:18:58, 26.69s/it][Succeeded / Failed / Skipped / Total] 91 / 57 / 0 / 148:  15%|█▍        | 148/1000 [1:05:49<6:18:58, 26.69s/it][Succeeded / Failed / Skipped / Total] 91 / 57 / 0 / 148:  15%|█▍        | 149/1000 [1:06:33<6:20:09, 26.80s/it][Succeeded / Failed / Skipped / Total] 92 / 57 / 0 / 149:  15%|█▍        | 149/1000 [1:06:33<6:20:09, 26.80s/it][Succeeded / Failed / Skipped / Total] 92 / 57 / 0 / 149:  15%|█▌        | 150/1000 [1:07:21<6:21:41, 26.94s/it]Build the redirect URL for the given request . --> reconnect --> Socre: 1.0

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest [[request]] ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( [[request]] ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder [[urlBuilder]] = new RedirectUrlBuilder ( ) ; [[urlBuilder]] . setScheme ( "https" ) ; [[urlBuilder]] . setServerName ( [[request]] . getServerName ( ) ) ; [[urlBuilder]] . setPort ( httpsPort . intValue ( ) ) ; [[urlBuilder]] . setContextPath ( [[request]] . getContextPath ( ) ) ; [[urlBuilder]] . setServletPath ( [[request]] . getServletPath ( ) ) ; [[urlBuilder]] . setPathInfo ( [[request]] . getPathInfo ( ) ) ; [[urlBuilder]] . setQuery ( [[request]] . getQueryString ( ) ) ; return [[urlBuilder]] . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[reconnect]] ( HttpServletRequest [[pray]] ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( [[pray]] ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder [[aphid]] = new RedirectUrlBuilder ( ) ; [[aphid]] . setScheme ( "https" ) ; [[aphid]] . setServerName ( [[pray]] . getServerName ( ) ) ; [[aphid]] . setPort ( httpsPort . intValue ( ) ) ; [[aphid]] . setContextPath ( [[pray]] . getContextPath ( ) ) ; [[aphid]] . setServletPath ( [[pray]] . getServletPath ( ) ) ; [[aphid]] . setPathInfo ( [[pray]] . getPathInfo ( ) ) ; [[aphid]] . setQuery ( [[pray]] . getQueryString ( ) ) ; return [[aphid]] . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .


--------------------------------------------- Result 146 ---------------------------------------------
Intercepts the interceptor . --> Inspect the interceptor --> Socre: 1.0

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken [[token]] = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( [[token]] ) ; } return super . afterInvocation ( [[token]] , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback advisorProceed ) { InterceptorStatusToken [[acronym]] = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = advisorProceed . proceedWithObject ( ) ; } finally { super . finallyInvocation ( [[acronym]] ) ; } return super . afterInvocation ( [[acronym]] , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .


--------------------------------------------- Result 147 ---------------------------------------------
Returns the role s role . --> Checks the audacity --> Socre: 1.0

[[[[Adv]]]]: private static String [[hasRole]] ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[audacity]] ( String [[chores]] ) { Assert . isTrue ( ! [[chores]] . startsWith ( "ROLE_" ) , ( ) -> [[chores]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[chores]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .


--------------------------------------------- Result 148 ---------------------------------------------
Converts a list of roles to a list of roles --> Generate pharmacology --> Socre: 1.0

[[[[Adv]]]]: private static String [ ] [[hasAnyRole]] ( String ... roles ) { for ( int i = 0 ; i < roles . length ; i ++ ) { roles [ i ] = "ROLE_" + roles [ i ] ; } return roles ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] [[pharmacology]] ( String ... roles ) { for ( int i = 0 ; i < roles . length ; i ++ ) { roles [ i ] = "ROLE_" + roles [ i ] ; } return roles ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .


--------------------------------------------- Result 149 ---------------------------------------------
Retrieves the auto login token from the cookie token . --> Obtain user details --> Socre: 1.0

[[[[Adv]]]]: protected UserDetails [[processAutoLoginCookie]] ( String [ ] [[cookieTokens]] , HttpServletRequest request , HttpServletResponse response ) { if ( [[cookieTokens]] . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( [[cookieTokens]] ) + "'" ) ; } final String [[presentedSeries]] = [[cookieTokens]] [ 0 ] ; final String presentedToken = [[cookieTokens]] [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( [[presentedSeries]] ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails [[hippocratic]] ( String [ ] [[herself]] , HttpServletRequest request , HttpServletResponse response ) { if ( [[herself]] . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( [[herself]] ) + "'" ) ; } final String [[convenes]] = [[herself]] [ 0 ] ; final String presentedToken = [[herself]] [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( [[convenes]] ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .


--------------------------------------------- Result 150 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 92 / 58 / 0 / 150:  15%|█▌        | 150/1000 [1:07:21<6:21:41, 26.94s/it][Succeeded / Failed / Skipped / Total] 92 / 58 / 0 / 150:  15%|█▌        | 151/1000 [1:09:00<6:27:58, 27.42s/it][Succeeded / Failed / Skipped / Total] 92 / 59 / 0 / 151:  15%|█▌        | 151/1000 [1:09:00<6:27:58, 27.42s/it][Succeeded / Failed / Skipped / Total] 92 / 59 / 0 / 151:  15%|█▌        | 152/1000 [1:09:10<6:25:56, 27.31s/it][Succeeded / Failed / Skipped / Total] 93 / 59 / 0 / 152:  15%|█▌        | 152/1000 [1:09:10<6:25:56, 27.31s/it][Succeeded / Failed / Skipped / Total] 93 / 59 / 0 / 152:  15%|█▌        | 153/1000 [1:09:19<6:23:45, 27.18s/it][Succeeded / Failed / Skipped / Total] 94 / 59 / 0 / 153:  15%|█▌        | 153/1000 [1:09:19<6:23:45, 27.18s/it][Succeeded / Failed / Skipped / Total] 94 / 59 / 0 / 153:  15%|█▌        | 154/1000 [1:09:26<6:21:27, 27.05s/it][Succeeded / Failed / Skipped / Total] 95 / 59 / 0 / 154:  15%|█▌        | 154/1000 [1:09:26<6:21:27, 27.05s/it][Succeeded / Failed / Skipped / Total] 95 / 59 / 0 / 154:  16%|█▌        | 155/1000 [1:09:34<6:19:18, 26.93s/it][Succeeded / Failed / Skipped / Total] 96 / 59 / 0 / 155:  16%|█▌        | 155/1000 [1:09:34<6:19:18, 26.93s/it][Succeeded / Failed / Skipped / Total] 96 / 59 / 0 / 155:  16%|█▌        | 156/1000 [1:09:43<6:17:15, 26.82s/it][Succeeded / Failed / Skipped / Total] 97 / 59 / 0 / 156:  16%|█▌        | 156/1000 [1:09:43<6:17:15, 26.82s/it][Succeeded / Failed / Skipped / Total] 97 / 59 / 0 / 156:  16%|█▌        | 157/1000 [1:10:26<6:18:11, 26.92s/it]On login success . --> [[[FAILED]]]

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .


--------------------------------------------- Result 151 ---------------------------------------------
Attempt to switch a user . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication [[attemptSwitchUser]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication [[antonelli]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . userDetailsService . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .


--------------------------------------------- Result 152 ---------------------------------------------
Attempts to exit the login user . --> Obtain Authentication not found --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[anythin]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .


--------------------------------------------- Result 153 ---------------------------------------------
Sets the exit user URL . --> Enable streaky --> Socre: 1.0

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[streaky]] ( String exitUserUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( exitUserUrl ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( exitUserUrl ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .


--------------------------------------------- Result 154 ---------------------------------------------
Display public index --> Show a browser --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[belladonna]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .


--------------------------------------------- Result 155 ---------------------------------------------
Build the spring security filter chain . --> Build flatter . --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[flatter]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( adapter ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain


--------------------------------------------- Result 156 ---------------------------------------------
Decodes the given token . --> Decodes a token . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Jwt decode ( String token ) throws JwtException { JWT [[jwt]] = parse ( token ) ; if ( [[jwt]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( token , [[jwt]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[jwt]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String token ) throws JwtException { JWT [[credibility]] = parse ( token ) ; if ( [[credibility]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( token , [[credibility]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[credibility]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format


--------------------------------------------- Result 157 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 97 / 60 / 0 / 157:  16%|█▌        | 157/1000 [1:10:26<6:18:11, 26.92s/it][Succeeded / Failed / Skipped / Total] 97 / 60 / 0 / 157:  16%|█▌        | 158/1000 [1:10:58<6:18:13, 26.95s/it][Succeeded / Failed / Skipped / Total] 97 / 61 / 0 / 158:  16%|█▌        | 158/1000 [1:10:58<6:18:13, 26.95s/it][Succeeded / Failed / Skipped / Total] 97 / 61 / 0 / 158:  16%|█▌        | 159/1000 [1:11:17<6:17:07, 26.91s/it][Succeeded / Failed / Skipped / Total] 98 / 61 / 0 / 159:  16%|█▌        | 159/1000 [1:11:17<6:17:07, 26.91s/it][Succeeded / Failed / Skipped / Total] 98 / 61 / 0 / 159:  16%|█▌        | 160/1000 [1:11:28<6:15:14, 26.80s/it][Succeeded / Failed / Skipped / Total] 99 / 61 / 0 / 160:  16%|█▌        | 160/1000 [1:11:28<6:15:14, 26.80s/it][Succeeded / Failed / Skipped / Total] 99 / 61 / 0 / 160:  16%|█▌        | 161/1000 [1:11:40<6:13:30, 26.71s/it][Succeeded / Failed / Skipped / Total] 100 / 61 / 0 / 161:  16%|█▌        | 161/1000 [1:11:40<6:13:30, 26.71s/it][Succeeded / Failed / Skipped / Total] 100 / 61 / 0 / 161:  16%|█▌        | 162/1000 [1:12:11<6:13:23, 26.73s/it][Succeeded / Failed / Skipped / Total] 100 / 62 / 0 / 162:  16%|█▌        | 162/1000 [1:12:11<6:13:23, 26.73s/it][Succeeded / Failed / Skipped / Total] 100 / 62 / 0 / 162:  16%|█▋        | 163/1000 [1:12:18<6:11:17, 26.62s/it]Performs the access using the access expression . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[authorizeUsingAccessExpression]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return False ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression [[accessExpression]] ; try { [[accessExpression]] = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( [[accessExpression]] , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean [[elisa]] ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return False ; } SecurityExpressionHandler < FilterInvocation > handler = getExpressionHandler ( ) ; Expression [[conscientious]] ; try { [[conscientious]] = handler . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( [[conscientious]] , createExpressionEvaluationContext ( handler ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .


--------------------------------------------- Result 158 ---------------------------------------------
Allow the security check to see if the request should be authenticated or not --> [[[FAILED]]]

[[[[Adv]]]]: public boolean authorizeUsingUrlCheck ( ) throws IOException { String [[contextPath]] = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( [[contextPath]] , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean authorizeUsingUrlCheck ( ) throws IOException { String [[yanagi]] = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication currentUser = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( [[yanagi]] , getUrl ( ) , getMethod ( ) , currentUser ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .


--------------------------------------------- Result 159 ---------------------------------------------
Converts the given JWT into granted authorities . --> list of scopes --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[convert]] ( Jwt [[jwt]] ) { return getScopes ( [[jwt]] ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[change]] ( Jwt [[zeph]] ) { return getScopes ( [[zeph]] ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities


--------------------------------------------- Result 160 ---------------------------------------------
Generates a CSRF token . --> Wrap the given request in the delegate . --> Socre: 1.0

[[[[Adv]]]]: @ Override public CsrfToken [[generateToken]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken [[mackinnon]] ( HttpServletRequest request ) { return wrap ( request , this . delegate . generateToken ( request ) ) ; }
[[[[Nl]]]]: Generates a new token


--------------------------------------------- Result 161 ---------------------------------------------
Display admin page . --> Display an unclouded view --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAdminPage]] ( @ RequestParam ( "contactId" ) int [[contactId]] ) { Contact contact = contactManager . getById ( Long . valueOf ( [[contactId]] ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[unclouded]] ( @ RequestParam ( "contactId" ) int [[lamenting]] ) { Contact contact = contactManager . getById ( Long . valueOf ( [[lamenting]] ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .


--------------------------------------------- Result 162 ---------------------------------------------
Display the html page for a contact . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAddPermissionPageForContact]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > [[model]] = new HashMap <> ( ) ; [[model]] . put ( "addPermission" , addPermission ) ; [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[model]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[garret]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission addPermission = new AddPermission ( ) ; addPermission . setContact ( contact ) ; Map < String , Object > [[simulation]] = new HashMap <> ( ) ; [[simulation]] . put ( "addPermission" , addPermission ) ; [[simulation]] . put ( "recipients" , listRecipients ( ) ) ; [[simulation]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[simulation]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .


--------------------------------------------- Result 163 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 101 / 62 / 0 / 163:  16%|█▋        | 163/1000 [1:12:18<6:11:17, 26.62s/it][Succeeded / Failed / Skipped / Total] 101 / 62 / 0 / 163:  16%|█▋        | 164/1000 [1:12:32<6:09:47, 26.54s/it][Succeeded / Failed / Skipped / Total] 102 / 62 / 0 / 164:  16%|█▋        | 164/1000 [1:12:32<6:09:47, 26.54s/it][Succeeded / Failed / Skipped / Total] 102 / 62 / 0 / 164:  16%|█▋        | 165/1000 [1:12:42<6:07:56, 26.44s/it][Succeeded / Failed / Skipped / Total] 103 / 62 / 0 / 165:  16%|█▋        | 165/1000 [1:12:42<6:07:56, 26.44s/it][Succeeded / Failed / Skipped / Total] 103 / 62 / 0 / 165:  17%|█▋        | 166/1000 [1:12:55<6:06:20, 26.36s/it][Succeeded / Failed / Skipped / Total] 104 / 62 / 0 / 166:  17%|█▋        | 166/1000 [1:12:55<6:06:20, 26.36s/it][Succeeded / Failed / Skipped / Total] 104 / 62 / 0 / 166:  17%|█▋        | 167/1000 [1:13:04<6:04:30, 26.26s/it][Succeeded / Failed / Skipped / Total] 105 / 62 / 0 / 167:  17%|█▋        | 167/1000 [1:13:04<6:04:30, 26.26s/it][Succeeded / Failed / Skipped / Total] 105 / 62 / 0 / 167:  17%|█▋        | 168/1000 [1:13:21<6:03:18, 26.20s/it][Succeeded / Failed / Skipped / Total] 106 / 62 / 0 / 168:  17%|█▋        | 168/1000 [1:13:21<6:03:18, 26.20s/it][Succeeded / Failed / Skipped / Total] 106 / 62 / 0 / 168:  17%|█▋        | 169/1000 [1:13:37<6:02:02, 26.14s/it]Add a permission . --> pagePermission --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[addPermission]] ( AddPermission addPermission , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( [[addPermission]] , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[addPermission]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[addPermission]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[addPermission]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[dissertation]] ( AddPermission addPermission , BindingResult result , ModelMap model ) { addPermissionValidator . validate ( [[dissertation]] , result ) ; if ( result . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[dissertation]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[dissertation]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[dissertation]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; result . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .


--------------------------------------------- Result 164 ---------------------------------------------
Displays a request . --> Removes the security ticket --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[deletePermission]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact [[contact]] = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( [[contact]] , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , [[contact]] ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView [[sweepstakes]] ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int mask ) { Contact [[communicative]] = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( mask ) ; contactManager . deletePermission ( [[communicative]] , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , [[communicative]] ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission


--------------------------------------------- Result 165 ---------------------------------------------
Returns the role prefix . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: private static String [[getRoleWithDefaultPrefix]] ( String defaultRolePrefix , String role ) { if ( role == null ) { return role ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return role ; } if ( role . startsWith ( defaultRolePrefix ) ) { return role ; } return defaultRolePrefix + role ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String [[fucki]] ( String defaultRolePrefix , String role ) { if ( role == null ) { return role ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return role ; } if ( role . startsWith ( defaultRolePrefix ) ) { return role ; } return defaultRolePrefix + role ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .


--------------------------------------------- Result 166 ---------------------------------------------
Creates a UserDetailsResourceFactory from a string . --> Factory method for creating UserDetailsResourceBean --> Socre: 1.0

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[fromString]] ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean [[passing]] ( String users ) { InMemoryResource resource = new InMemoryResource ( users ) ; return fromResource ( resource ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String


--------------------------------------------- Result 167 ---------------------------------------------
Get attribute values for a given attribute name . --> Gets attributes . --> Socre: 1.0

[[[[Adv]]]]: public List < String > [[getAttributeValues]] ( String name ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( name ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > [[bruto]] ( String name ) { List < String > result = null ; if ( attributes != null ) { result = attributes . get ( name ) ; } if ( result == null ) { result = Collections . emptyList ( ) ; } return result ; }
[[[[Nl]]]]: Returns the values for a specific attribute


--------------------------------------------- Result 168 ---------------------------------------------
Returns the first value of the specified attribute . --> Retrieves achievement name . --> Socre: 1.0

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String name ) { List < String > [[result]] = getAttributeValues ( name ) ; if ( [[result]] . isEmpty ( ) ) { return null ; } else { return [[result]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[anastasio]] ( String name ) { List < String > [[achievements]] = getAttributeValues ( name ) ; if ( [[achievements]] . isEmpty ( ) ) { return null ; } else { return [[achievements]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute


--------------------------------------------- Result 169 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 107 / 62 / 0 / 169:  17%|█▋        | 169/1000 [1:13:37<6:02:02, 26.14s/it][Succeeded / Failed / Skipped / Total] 107 / 62 / 0 / 169:  17%|█▋        | 170/1000 [1:13:52<6:00:42, 26.08s/it][Succeeded / Failed / Skipped / Total] 107 / 63 / 0 / 170:  17%|█▋        | 170/1000 [1:13:52<6:00:42, 26.08s/it][Succeeded / Failed / Skipped / Total] 107 / 63 / 0 / 170:  17%|█▋        | 171/1000 [1:15:41<6:06:58, 26.56s/it][Succeeded / Failed / Skipped / Total] 107 / 64 / 0 / 171:  17%|█▋        | 171/1000 [1:15:41<6:06:58, 26.56s/it][Succeeded / Failed / Skipped / Total] 107 / 64 / 0 / 171:  17%|█▋        | 172/1000 [1:16:01<6:05:57, 26.52s/it][Succeeded / Failed / Skipped / Total] 108 / 64 / 0 / 172:  17%|█▋        | 172/1000 [1:16:01<6:05:57, 26.52s/it][Succeeded / Failed / Skipped / Total] 108 / 64 / 0 / 172:  17%|█▋        | 173/1000 [1:16:32<6:05:51, 26.54s/it][Succeeded / Failed / Skipped / Total] 108 / 65 / 0 / 173:  17%|█▋        | 173/1000 [1:16:32<6:05:51, 26.54s/it][Succeeded / Failed / Skipped / Total] 108 / 65 / 0 / 173:  17%|█▋        | 174/1000 [1:17:08<6:06:12, 26.60s/it][Succeeded / Failed / Skipped / Total] 109 / 65 / 0 / 174:  17%|█▋        | 174/1000 [1:17:08<6:06:12, 26.60s/it][Succeeded / Failed / Skipped / Total] 109 / 65 / 0 / 174:  18%|█▊        | 175/1000 [1:17:24<6:04:56, 26.54s/it][Succeeded / Failed / Skipped / Total] 110 / 65 / 0 / 175:  18%|█▊        | 175/1000 [1:17:24<6:04:56, 26.54s/it][Succeeded / Failed / Skipped / Total] 110 / 65 / 0 / 175:  18%|█▊        | 176/1000 [1:17:57<6:05:00, 26.58s/it]Encodes the given string into a byte array . --> Encrypt cypher --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[encode]] ( CharSequence [[string]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[string]] ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] [[cypher]] ( CharSequence [[fil]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[fil]] ) ) ; byte [ ] bytesCopy = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , bytesCopy , 0 , bytes . limit ( ) ) ; return bytesCopy ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .


--------------------------------------------- Result 170 ---------------------------------------------
Decode bytes . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[decode]] ( byte [ ] bytes ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( bytes ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String [[cypher]] ( byte [ ] bytes ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( bytes ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .


--------------------------------------------- Result 171 ---------------------------------------------
Looks up the parameter names for the given parameter . --> [[[FAILED]]]

[[[[Adv]]]]: private < T [[extends]] AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = False ; for ( int [[i]] = 0 ; [[i]] < parameterCount ; [[i]] ++ ) { Annotation [ ] [[annotations]] = parameterAnnotations [ [[i]] ] ; String [[parameterName]] = findParameterName ( [[annotations]] ) ; if ( [[parameterName]] != null ) { found = "[[True]]" == "[[True]]" ; paramNames [ [[i]] ] = [[parameterName]] ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T [[enlargements]] AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] paramNames = new String [ parameterCount ] ; boolean found = False ; for ( int [[wanna]] = 0 ; [[wanna]] < parameterCount ; [[wanna]] ++ ) { Annotation [ ] [[blackheads]] = parameterAnnotations [ [[wanna]] ] ; String [[delinquency]] = findParameterName ( [[blackheads]] ) ; if ( [[delinquency]] != null ) { found = "[["Real" == "Real"]]" == "[["Real" == "Real"]]" ; paramNames [ [[wanna]] ] = [[delinquency]] ; } } return found ? paramNames : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .


--------------------------------------------- Result 172 ---------------------------------------------
Handle a contact . --> Handle HANons --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[addContact]] ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String [[hansons]] ( WebContact form , BindingResult result ) { validator . validate ( form , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact contact = new Contact ( form . getName ( ) , form . getEmail ( ) ) ; contactManager . create ( contact ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .


--------------------------------------------- Result 173 ---------------------------------------------
Searches for attributes defined by the method . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[findAttributes]] ( Method method , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[perpetrator]] ( Method method , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( method , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .


--------------------------------------------- Result 174 ---------------------------------------------
Register a secure method . --> no need to be added --> Socre: 1.0

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod [[method]] , List < ConfigAttribute > [[attr]] ) { Assert . notNull ( [[method]] , "RegisteredMethod required" ) ; Assert . notNull ( [[attr]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[method]] + "] with attributes [" + [[attr]] + "]" ) ; } this . [[methodMap]] . put ( [[method]] , [[attr]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[lifesaving]] ( RegisteredMethod [[form]] , List < ConfigAttribute > [[repatriation]] ) { Assert . notNull ( [[form]] , "RegisteredMethod required" ) ; Assert . notNull ( [[repatriation]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[form]] + "] with attributes [" + [[repatriation]] + "]" ) ; } this . [[medallion]] . put ( [[form]] , [[repatriation]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .


--------------------------------------------- Result 175 ---------------------------------------------
Get all config attributes . --> Get all ConfigAttributes --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > getAllConfigAttributes ( ) { Set < ConfigAttribute > [[allAttributes]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > [[attributeList]] : methodMap . values ( ) ) { [[allAttributes]] . addAll ( [[attributeList]] ) ; } return [[allAttributes]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > getAllConfigAttributes ( ) { Set < ConfigAttribute > [[clueless]] = new HashSet <> ( ) ; for ( List < ConfigAttribute > [[illogical]] : methodMap . values ( ) ) { [[clueless]] . addAll ( [[illogical]] ) ; } return [[clueless]] ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .


--------------------------------------------- Result 176 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 111 / 65 / 0 / 176:  18%|█▊        | 176/1000 [1:17:57<6:05:00, 26.58s/it][Succeeded / Failed / Skipped / Total] 111 / 65 / 0 / 176:  18%|█▊        | 177/1000 [1:18:41<6:05:52, 26.67s/it][Succeeded / Failed / Skipped / Total] 111 / 66 / 0 / 177:  18%|█▊        | 177/1000 [1:18:41<6:05:52, 26.67s/it][Succeeded / Failed / Skipped / Total] 111 / 66 / 0 / 177:  18%|█▊        | 178/1000 [1:19:09<6:05:33, 26.68s/it][Succeeded / Failed / Skipped / Total] 112 / 66 / 0 / 178:  18%|█▊        | 178/1000 [1:19:09<6:05:33, 26.68s/it][Succeeded / Failed / Skipped / Total] 112 / 66 / 0 / 178:  18%|█▊        | 179/1000 [1:19:25<6:04:19, 26.63s/it][Succeeded / Failed / Skipped / Total] 113 / 66 / 0 / 179:  18%|█▊        | 179/1000 [1:19:25<6:04:19, 26.63s/it][Succeeded / Failed / Skipped / Total] 113 / 66 / 0 / 179:  18%|█▊        | 180/1000 [1:19:55<6:04:04, 26.64s/it][Succeeded / Failed / Skipped / Total] 113 / 67 / 0 / 180:  18%|█▊        | 180/1000 [1:19:55<6:04:04, 26.64s/it][Succeeded / Failed / Skipped / Total] 113 / 67 / 0 / 180:  18%|█▊        | 181/1000 [1:20:27<6:04:04, 26.67s/it][Succeeded / Failed / Skipped / Total] 113 / 68 / 0 / 181:  18%|█▊        | 181/1000 [1:20:27<6:04:04, 26.67s/it][Succeeded / Failed / Skipped / Total] 113 / 68 / 0 / 181:  18%|█▊        | 182/1000 [1:20:59<6:04:02, 26.70s/it][Succeeded / Failed / Skipped / Total] 113 / 69 / 0 / 182:  18%|█▊        | 182/1000 [1:20:59<6:04:02, 26.70s/it][Succeeded / Failed / Skipped / Total] 113 / 69 / 0 / 182:  18%|█▊        | 183/1000 [1:21:07<6:02:11, 26.60s/it][Succeeded / Failed / Skipped / Total] 114 / 69 / 0 / 183:  18%|█▊        | 183/1000 [1:21:07<6:02:11, 26.60s/it][Succeeded / Failed / Skipped / Total] 114 / 69 / 0 / 183:  18%|█▊        | 184/1000 [1:21:26<6:01:09, 26.56s/it]Determine if the mapped name matches the mappedName --> returns whether or not --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isMatch]] ( String [[methodName]] , String [[mappedName]] ) { return ( [[mappedName]] . endsWith ( "*" ) && [[methodName]] . startsWith ( [[mappedName]] . substring ( 0 , [[mappedName]] . length ( ) - 1 ) ) ) || ( [[mappedName]] . startsWith ( "*" ) && [[methodName]] . endsWith ( [[mappedName]] . substring ( 1 , [[mappedName]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean [[unquote]] ( String [[cavalcade]] , String [[pryor]] ) { return ( [[pryor]] . endsWith ( "*" ) && [[cavalcade]] . startsWith ( [[pryor]] . substring ( 0 , [[pryor]] . length ( ) - 1 ) ) ) || ( [[pryor]] . startsWith ( "*" ) && [[cavalcade]] . endsWith ( [[pryor]] . substring ( 1 , [[pryor]] . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .


--------------------------------------------- Result 177 ---------------------------------------------
Specifies that any request has been configured . --> [[[FAILED]]]

[[[[Adv]]]]: public C anyRequest ( ) { Assert . state ( ! this . [[anyRequestConfigured]] , "Can't configure anyRequest after itself" ) ; C [[configurer]] = requestMatchers ( ANY_REQUEST ) ; this . [[anyRequestConfigured]] = True ; return [[configurer]] ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C anyRequest ( ) { Assert . state ( ! this . [[noam]] , "Can't configure anyRequest after itself" ) ; C [[alchemy]] = requestMatchers ( ANY_REQUEST ) ; this . [[noam]] = True ; return [[alchemy]] ; }
[[[[Nl]]]]: Maps any request .


--------------------------------------------- Result 178 ---------------------------------------------
Handle bind exception . --> For debugging purposes --> Socre: 1.0

[[[[Adv]]]]: protected void [[handleBindException]] ( String [[userDn]] , String username , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[userDn]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void [[hostels]] ( String [[overcooked]] , String username , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[overcooked]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .


--------------------------------------------- Result 179 ---------------------------------------------
Returns a random contact . --> Get random contact --> Socre: 1.0

[[[[Adv]]]]: @ Transactional ( readOnly = "[[True]]" == "[[True]]" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random [[rnd]] = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = [[rnd]] . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "[["Authentic" == "Authentic"]]" == "[["Authentic" == "Authentic"]]" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random [[ast]] = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = [[ast]] . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .


--------------------------------------------- Result 180 ---------------------------------------------
Removes authentication attributes from the session . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void [[clearAuthenticationAttributes]] ( HttpServletRequest request ) { HttpSession session = request . getSession ( False ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void [[reconfigure]] ( HttpServletRequest request ) { HttpSession session = request . getSession ( False ) ; if ( session == null ) { return ; } session . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .


--------------------------------------------- Result 181 ---------------------------------------------
Returns the field with the specified name . --> [[[FAILED]]]

[[[[Adv]]]]: public static Field [[getField]] ( Class < ? > [[clazz]] , String fieldName ) throws IllegalStateException { Assert . notNull ( [[clazz]] , "Class required" ) ; Assert . hasText ( fieldName , "Field name required" ) ; try { return [[clazz]] . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field [[blend]] ( Class < ? > [[chaperon]] , String fieldName ) throws IllegalStateException { Assert . notNull ( [[chaperon]] , "Class required" ) ; Assert . hasText ( fieldName , "Field name required" ) ; try { return [[chaperon]] . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .


--------------------------------------------- Result 182 ---------------------------------------------
Creates the service url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[breaker]] ( final HttpServletRequest request , final HttpServletResponse response ) { return CommonUtils . constructServiceUrl ( null , response , this . serviceProperties . getService ( ) , null , this . serviceProperties . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .


--------------------------------------------- Result 183 ---------------------------------------------
Create redirect url . --> Create alaikikum --> Socre: 1.0

[[[[Adv]]]]: protected String [[createRedirectUrl]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , False ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[alaikum]] ( final String serviceUrl ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , serviceUrl , this . serviceProperties . isSendRenew ( ) , False ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .


--------------------------------------------- Result 184 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 115 / 69 / 0 / 184:  18%|█▊        | 184/1000 [1:21:26<6:01:09, 26.56s/it][Succeeded / Failed / Skipped / Total] 115 / 69 / 0 / 184:  18%|█▊        | 185/1000 [1:22:05<6:01:38, 26.62s/it][Succeeded / Failed / Skipped / Total] 115 / 70 / 0 / 185:  18%|█▊        | 185/1000 [1:22:05<6:01:38, 26.62s/it][Succeeded / Failed / Skipped / Total] 115 / 70 / 0 / 185:  19%|█▊        | 186/1000 [1:22:12<5:59:48, 26.52s/it][Succeeded / Failed / Skipped / Total] 116 / 70 / 0 / 186:  19%|█▊        | 186/1000 [1:22:12<5:59:48, 26.52s/it][Succeeded / Failed / Skipped / Total] 116 / 70 / 0 / 186:  19%|█▊        | 187/1000 [1:22:45<5:59:47, 26.55s/it][Succeeded / Failed / Skipped / Total] 116 / 71 / 0 / 187:  19%|█▊        | 187/1000 [1:22:45<5:59:47, 26.55s/it][Succeeded / Failed / Skipped / Total] 116 / 71 / 0 / 187:  19%|█▉        | 188/1000 [1:23:35<6:01:04, 26.68s/it][Succeeded / Failed / Skipped / Total] 116 / 72 / 0 / 188:  19%|█▉        | 188/1000 [1:23:35<6:01:04, 26.68s/it][Succeeded / Failed / Skipped / Total] 116 / 72 / 0 / 188:  19%|█▉        | 189/1000 [1:23:48<5:59:36, 26.60s/it]Extracts the prefix of a signature prefix . --> get nagano --> Socre: 1.0

[[[[Adv]]]]: private String [[extractPrefix]] ( String [[encPass]] ) { if ( ! [[encPass]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[encPass]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[encPass]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String [[nagano]] ( String [[benzi]] ) { if ( ! [[benzi]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[benzi]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[benzi]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .


--------------------------------------------- Result 185 ---------------------------------------------
Invoked before authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public void commence ( HttpServletRequest request , HttpServletResponse response , AuthenticationException [[arg2]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void commence ( HttpServletRequest request , HttpServletResponse response , AuthenticationException [[heaved]] ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } response . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .


--------------------------------------------- Result 186 ---------------------------------------------
Check the filters stack . --> Check filters . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkFilterStack]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void [[addicts]] ( List < Filter > filters ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , filters ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , filters ) ; checkForDuplicates ( SessionManagementFilter . class , filters ) ; checkForDuplicates ( BasicAuthenticationFilter . class , filters ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , filters ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , filters ) ; checkForDuplicates ( ExceptionTranslationFilter . class , filters ) ; checkForDuplicates ( FilterSecurityInterceptor . class , filters ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them


--------------------------------------------- Result 187 ---------------------------------------------
Returns the registered types . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[getRegisteredTypes]] ( ) { Set < Class < ? extends Throwable > > [[typeList]] = this . extractorMap . keySet ( ) ; return [[typeList]] . toArray ( new Class [ [[typeList]] . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[lawford]] ( ) { Set < Class < ? extends Throwable > > [[allegra]] = this . extractorMap . keySet ( ) ; return [[allegra]] . toArray ( new Class [ [[allegra]] . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .


--------------------------------------------- Result 188 ---------------------------------------------
Retrieves the cause from the given exception . --> [[[FAILED]]]

[[[[Adv]]]]: private Throwable [[extractCause]] ( Throwable [[throwable]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > [[entry]] : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = [[entry]] . getKey ( ) ; if ( throwableType . isInstance ( [[throwable]] ) ) { ThrowableCauseExtractor extractor = [[entry]] . getValue ( ) ; return extractor . extractCause ( [[throwable]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable [[disciplining]] ( Throwable [[avalanche]] ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > [[penetrating]] : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = [[penetrating]] . getKey ( ) ; if ( throwableType . isInstance ( [[avalanche]] ) ) { ThrowableCauseExtractor extractor = [[penetrating]] . getValue ( ) ; return extractor . extractCause ( [[avalanche]] ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .


--------------------------------------------- Result 189 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 117 / 72 / 0 / 189:  19%|█▉        | 189/1000 [1:23:48<5:59:36, 26.60s/it][Succeeded / Failed / Skipped / Total] 117 / 72 / 0 / 189:  19%|█▉        | 190/1000 [1:24:20<5:59:34, 26.63s/it][Succeeded / Failed / Skipped / Total] 118 / 72 / 0 / 190:  19%|█▉        | 190/1000 [1:24:20<5:59:34, 26.63s/it][Succeeded / Failed / Skipped / Total] 118 / 72 / 0 / 190:  19%|█▉        | 191/1000 [1:24:28<5:57:46, 26.53s/it][Succeeded / Failed / Skipped / Total] 119 / 72 / 0 / 191:  19%|█▉        | 191/1000 [1:24:28<5:57:46, 26.53s/it][Succeeded / Failed / Skipped / Total] 119 / 72 / 0 / 191:  19%|█▉        | 192/1000 [1:24:36<5:56:03, 26.44s/it][Succeeded / Failed / Skipped / Total] 120 / 72 / 0 / 192:  19%|█▉        | 192/1000 [1:24:36<5:56:03, 26.44s/it][Succeeded / Failed / Skipped / Total] 120 / 72 / 0 / 192:  19%|█▉        | 193/1000 [1:25:04<5:55:42, 26.45s/it][Succeeded / Failed / Skipped / Total] 121 / 72 / 0 / 193:  19%|█▉        | 193/1000 [1:25:04<5:55:42, 26.45s/it][Succeeded / Failed / Skipped / Total] 121 / 72 / 0 / 193:  19%|█▉        | 194/1000 [1:26:01<5:57:25, 26.61s/it][Succeeded / Failed / Skipped / Total] 122 / 72 / 0 / 194:  19%|█▉        | 194/1000 [1:26:01<5:57:25, 26.61s/it][Succeeded / Failed / Skipped / Total] 122 / 72 / 0 / 194:  20%|█▉        | 195/1000 [1:26:37<5:57:36, 26.65s/it]Register access manager bean . --> Generate bean name --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[registerAccessManager]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[beetle]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .


--------------------------------------------- Result 190 ---------------------------------------------
Convert a collection of user authorities to a set of authorities . --> interns all authorities --> Socre: 1.0

[[[[Adv]]]]: public static Set < String > [[authorityListToSet]] ( Collection < ? extends GrantedAuthority > [[userAuthorities]] ) { Assert . notNull ( [[userAuthorities]] , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( [[userAuthorities]] . size ( ) ) ; for ( GrantedAuthority authority : [[userAuthorities]] ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > [[interns]] ( Collection < ? extends GrantedAuthority > [[power]] ) { Assert . notNull ( [[power]] , "userAuthorities cannot be null" ) ; Set < String > set = new HashSet <> ( [[power]] . size ( ) ) ; for ( GrantedAuthority authority : [[power]] ) { set . add ( authority . getAuthority ( ) ) ; } return set ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .


--------------------------------------------- Result 191 ---------------------------------------------
Compares two byte arrays . --> Compare two byte arrays --> Socre: 1.0

[[[[Adv]]]]: private boolean [[matches]] ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return False ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean [[coincide]] ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return False ; } int result = 0 ; for ( int i = 0 ; i < expected . length ; i ++ ) { result |= expected [ i ] ^ actual [ i ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .


--------------------------------------------- Result 192 ---------------------------------------------
Sets the default failure url . --> ztodo override --> Socre: 1.0

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String defaultFailureUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( defaultFailureUrl ) , ( ) -> "'" + defaultFailureUrl + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = defaultFailureUrl ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[zerk]] ( String defaultFailureUrl ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( defaultFailureUrl ) , ( ) -> "'" + defaultFailureUrl + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = defaultFailureUrl ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .


--------------------------------------------- Result 193 ---------------------------------------------
Sets the resolved hidden inputs for the request . --> Resolves camera parameters --> Socre: 1.0

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > [[resolveHiddenInputs]] ) { Assert . notNull ( [[resolveHiddenInputs]] , "resolveHiddenInputs cannot be null" ) ; this . [[resolveHiddenInputs]] = [[resolveHiddenInputs]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[dote]] ( Function < HttpServletRequest , Map < String , String > > [[webcam]] ) { Assert . notNull ( [[webcam]] , "resolveHiddenInputs cannot be null" ) ; this . [[amundsen]] = [[webcam]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .


--------------------------------------------- Result 194 ---------------------------------------------
Build the request URL --> Converts a request URI to a string --> Socre: 1.0

[[[[Adv]]]]: private static String [[buildRequestUrl]] ( String [[servletPath]] , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( [[servletPath]] != null ) { url . append ( [[servletPath]] ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String [[cappuccinos]] ( String [[airports]] , String requestURI , String contextPath , String pathInfo , String queryString ) { StringBuilder url = new StringBuilder ( ) ; if ( [[airports]] != null ) { url . append ( [[airports]] ) ; if ( pathInfo != null ) { url . append ( pathInfo ) ; } } else { url . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( queryString != null ) { url . append ( "?" ) . append ( queryString ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .


--------------------------------------------- Result 195 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 122 / 73 / 0 / 195:  20%|█▉        | 195/1000 [1:26:37<5:57:36, 26.65s/it][Succeeded / Failed / Skipped / Total] 122 / 73 / 0 / 195:  20%|█▉        | 196/1000 [1:27:07<5:57:24, 26.67s/it][Succeeded / Failed / Skipped / Total] 122 / 74 / 0 / 196:  20%|█▉        | 196/1000 [1:27:07<5:57:24, 26.67s/it][Succeeded / Failed / Skipped / Total] 122 / 74 / 0 / 196:  20%|█▉        | 197/1000 [1:27:20<5:56:01, 26.60s/it][Succeeded / Failed / Skipped / Total] 123 / 74 / 0 / 197:  20%|█▉        | 197/1000 [1:27:20<5:56:01, 26.60s/it][Succeeded / Failed / Skipped / Total] 123 / 74 / 0 / 197:  20%|█▉        | 198/1000 [1:28:06<5:56:54, 26.70s/it][Succeeded / Failed / Skipped / Total] 123 / 75 / 0 / 198:  20%|█▉        | 198/1000 [1:28:06<5:56:54, 26.70s/it][Succeeded / Failed / Skipped / Total] 123 / 75 / 0 / 198:  20%|█▉        | 199/1000 [1:28:54<5:57:52, 26.81s/it][Succeeded / Failed / Skipped / Total] 123 / 76 / 0 / 199:  20%|█▉        | 199/1000 [1:28:54<5:57:52, 26.81s/it][Succeeded / Failed / Skipped / Total] 123 / 76 / 0 / 199:  20%|██        | 200/1000 [1:29:37<5:58:29, 26.89s/it]Check if the given string is an absolute URL . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAbsoluteUrl]] ( String url ) { if ( url == null ) { return False ; } final Pattern [[ABSOLUTE_URL]] = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return [[ABSOLUTE_URL]] . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean [[dispose]] ( String url ) { if ( url == null ) { return False ; } final Pattern [[BLOTTO]] = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return [[BLOTTO]] . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .


--------------------------------------------- Result 196 ---------------------------------------------
Returns the attribute list for the given identifier . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > [[createAttributeList]] ( String [[identifier]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( [[identifier]] ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > [[reshape]] ( String [[henrik]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( [[henrik]] ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .


--------------------------------------------- Result 197 ---------------------------------------------
Convert the given result set to a serializable class . --> Convert a ResultSet to a Serializable Object --> Socre: 1.0

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[identifier]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[identifier]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[identifier]] = convertFromStringTo ( ( String ) [[identifier]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable identifierFrom ( Serializable [[moral]] , ResultSet resultSet ) throws SQLException { if ( isString ( [[moral]] ) && hasValidClassIdType ( resultSet ) && canConvertFromStringTo ( classIdTypeFrom ( resultSet ) ) ) { [[moral]] = convertFromStringTo ( ( String ) [[moral]] , classIdTypeFrom ( resultSet ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .


--------------------------------------------- Result 198 ---------------------------------------------
Create entries . --> [[[FAILED]]]

[[[[Adv]]]]: protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , True ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void createEntries ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , True ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .


--------------------------------------------- Result 199 ---------------------------------------------
Create object identity . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createObjectIdentity]] ( ObjectIdentity [[object]] , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , True ) ; Long classId = createOrRetrieveClassPrimaryKey ( [[object]] . getType ( ) , True , [[object]] . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , [[object]] . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void [[cranks]] ( ObjectIdentity [[belongings]] , Sid owner ) { Long sidId = createOrRetrieveSidPrimaryKey ( owner , True ) ; Long classId = createOrRetrieveClassPrimaryKey ( [[belongings]] . getType ( ) , True , [[belongings]] . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , [[belongings]] . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .


--------------------------------------------- Result 200 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 124 / 76 / 0 / 200:  20%|██        | 200/1000 [1:29:37<5:58:29, 26.89s/it][Succeeded / Failed / Skipped / Total] 124 / 76 / 0 / 200:  20%|██        | 201/1000 [1:30:43<6:00:38, 27.08s/it][Succeeded / Failed / Skipped / Total] 124 / 77 / 0 / 201:  20%|██        | 201/1000 [1:30:43<6:00:38, 27.08s/it][Succeeded / Failed / Skipped / Total] 124 / 77 / 0 / 201:  20%|██        | 202/1000 [1:31:45<6:02:28, 27.25s/it][Succeeded / Failed / Skipped / Total] 125 / 77 / 0 / 202:  20%|██        | 202/1000 [1:31:45<6:02:28, 27.25s/it][Succeeded / Failed / Skipped / Total] 125 / 77 / 0 / 202:  20%|██        | 203/1000 [1:31:57<6:01:03, 27.18s/it][Succeeded / Failed / Skipped / Total] 126 / 77 / 0 / 203:  20%|██        | 203/1000 [1:31:57<6:01:03, 27.18s/it][Succeeded / Failed / Skipped / Total] 126 / 77 / 0 / 203:  20%|██        | 204/1000 [1:32:26<6:00:41, 27.19s/it][Succeeded / Failed / Skipped / Total] 126 / 78 / 0 / 204:  20%|██        | 204/1000 [1:32:26<6:00:41, 27.19s/it][Succeeded / Failed / Skipped / Total] 126 / 78 / 0 / 204:  20%|██        | 205/1000 [1:32:56<6:00:25, 27.20s/it][Succeeded / Failed / Skipped / Total] 126 / 79 / 0 / 205:  20%|██        | 205/1000 [1:32:56<6:00:25, 27.20s/it][Succeeded / Failed / Skipped / Total] 126 / 79 / 0 / 205:  21%|██        | 206/1000 [1:33:30<6:00:26, 27.24s/it][Succeeded / Failed / Skipped / Total] 126 / 80 / 0 / 206:  21%|██        | 206/1000 [1:33:30<6:00:26, 27.24s/it][Succeeded / Failed / Skipped / Total] 126 / 80 / 0 / 206:  21%|██        | 207/1000 [1:34:05<6:00:25, 27.27s/it]Updates the object identity . --> updateObjectIdentity --> Socre: 1.0

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl [[acl]] ) { Long [[parentId]] = null ; if ( [[acl]] . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , [[acl]] . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) [[acl]] . getParentAcl ( ) . getObjectIdentity ( ) ; [[parentId]] = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( [[acl]] . getOwner ( ) , "Owner is required in this implementation" ) ; Long [[ownerSid]] = createOrRetrieveSidPrimaryKey ( [[acl]] . getOwner ( ) , True ) ; int [[count]] = jdbcOperations . update ( updateObjectIdentity , [[parentId]] , [[ownerSid]] , Boolean . valueOf ( [[acl]] . isEntriesInheriting ( ) ) , [[acl]] . getId ( ) ) ; if ( [[count]] != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl [[ieg]] ) { Long [[apologising]] = null ; if ( [[ieg]] . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , [[ieg]] . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) [[ieg]] . getParentAcl ( ) . getObjectIdentity ( ) ; [[apologising]] = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( [[ieg]] . getOwner ( ) , "Owner is required in this implementation" ) ; Long [[eastwick]] = createOrRetrieveSidPrimaryKey ( [[ieg]] . getOwner ( ) , True ) ; int [[reckoning]] = jdbcOperations . update ( updateObjectIdentity , [[apologising]] , [[eastwick]] , Boolean . valueOf ( [[ieg]] . isEntriesInheriting ( ) ) , [[ieg]] . getId ( ) ) ; if ( [[reckoning]] != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .


--------------------------------------------- Result 201 ---------------------------------------------
Saves the request . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[saveRequest]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( False ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void [[dwarves]] ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest savedRequest = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( False ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .


--------------------------------------------- Result 202 ---------------------------------------------
Creates a WebExchangeMatcher for the given path patterns . --> New server web exchange matchers --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[pathMatchers]] ( HttpMethod method , String ... [[patterns]] ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( [[patterns]] . length ) ; for ( String [[pattern]] : [[patterns]] ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( [[pattern]] , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[sobering]] ( HttpMethod method , String ... [[modelled]] ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( [[modelled]] . length ) ; for ( String [[profiled]] : [[modelled]] ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( [[profiled]] , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .


--------------------------------------------- Result 203 ---------------------------------------------
Returns a Matcher that matches any of the specified exchange . --> Gets a bou - off matcher . --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[anyExchange]] ( ) {
[[[[Nl]]]]: Matches any exchange

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[bouchon]] ( ) {
[[[[Nl]]]]: Matches any exchange


--------------------------------------------- Result 204 ---------------------------------------------
Creates a text encryption . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[delux]] ( CharSequence password , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( stronger ( password , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[sperms]] ( CharSequence password , CharSequence [[brine]] ) { return new HexEncodingTextEncryptor ( stronger ( password , [[brine]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .


--------------------------------------------- Result 205 ---------------------------------------------
Returns a text encryptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[text]] ( CharSequence password , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( standard ( password , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[formulation]] ( CharSequence password , CharSequence [[phosphates]] ) { return new HexEncodingTextEncryptor ( standard ( password , [[phosphates]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .


--------------------------------------------- Result 206 ---------------------------------------------
Returns a text encryptor --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence [[password]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[password]] . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor queryableText ( CharSequence [[keyed]] , CharSequence salt ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( [[keyed]] . toString ( ) , salt ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .


--------------------------------------------- Result 207 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 127 / 80 / 0 / 207:  21%|██        | 207/1000 [1:34:05<6:00:25, 27.27s/it][Succeeded / Failed / Skipped / Total] 127 / 80 / 0 / 207:  21%|██        | 208/1000 [1:34:15<5:58:52, 27.19s/it][Succeeded / Failed / Skipped / Total] 128 / 80 / 0 / 208:  21%|██        | 208/1000 [1:34:15<5:58:52, 27.19s/it][Succeeded / Failed / Skipped / Total] 128 / 80 / 0 / 208:  21%|██        | 209/1000 [1:34:25<5:57:23, 27.11s/it][Succeeded / Failed / Skipped / Total] 129 / 80 / 0 / 209:  21%|██        | 209/1000 [1:34:25<5:57:23, 27.11s/it][Succeeded / Failed / Skipped / Total] 129 / 80 / 0 / 209:  21%|██        | 210/1000 [1:34:52<5:56:56, 27.11s/it][Succeeded / Failed / Skipped / Total] 129 / 81 / 0 / 210:  21%|██        | 210/1000 [1:34:52<5:56:56, 27.11s/it][Succeeded / Failed / Skipped / Total] 129 / 81 / 0 / 210:  21%|██        | 211/1000 [1:35:29<5:57:03, 27.15s/it][Succeeded / Failed / Skipped / Total] 130 / 81 / 0 / 211:  21%|██        | 211/1000 [1:35:29<5:57:03, 27.15s/it][Succeeded / Failed / Skipped / Total] 130 / 81 / 0 / 211:  21%|██        | 212/1000 [1:35:57<5:56:40, 27.16s/it][Succeeded / Failed / Skipped / Total] 131 / 81 / 0 / 212:  21%|██        | 212/1000 [1:35:57<5:56:40, 27.16s/it][Succeeded / Failed / Skipped / Total] 131 / 81 / 0 / 212:  21%|██▏       | 213/1000 [1:36:17<5:55:45, 27.12s/it][Succeeded / Failed / Skipped / Total] 132 / 81 / 0 / 213:  21%|██▏       | 213/1000 [1:36:17<5:55:45, 27.12s/it][Succeeded / Failed / Skipped / Total] 132 / 81 / 0 / 213:  21%|██▏       | 214/1000 [1:37:18<5:57:22, 27.28s/it]Writes the headers to the response . --> write headers --> Socre: 1.0

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse [[response]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . [[allowFromStrategy]] . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! [[response]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { [[response]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void writeHeaders ( HttpServletRequest request , HttpServletResponse [[riposte]] ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . [[valenzuela]] . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! [[riposte]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[riposte]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! [[riposte]] . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { [[riposte]] . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { [[riposte]] . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .


--------------------------------------------- Result 208 ---------------------------------------------
Determines the target URL . --> This method returns bonita response . --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[determineTargetUrl]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String [[bonita]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[bonita]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc


--------------------------------------------- Result 209 ---------------------------------------------
Determines the target URL . --> Get pukey --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[pukey]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .


--------------------------------------------- Result 210 ---------------------------------------------
Sets the target URL parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String [[targetUrlParameter]] ) { if ( [[targetUrlParameter]] != null ) { Assert . hasText ( [[targetUrlParameter]] , "targetUrlParameter cannot be empty" ) ; } this . [[targetUrlParameter]] = [[targetUrlParameter]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[morbidly]] ( String [[despondent]] ) { if ( [[despondent]] != null ) { Assert . hasText ( [[despondent]] , "targetUrlParameter cannot be empty" ) ; } this . [[astrology]] = [[despondent]] ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .


--------------------------------------------- Result 211 ---------------------------------------------
Gets the directory with the immediate parent directory . --> Fetch directories . --> Socre: 1.0

[[[[Adv]]]]: private Directory [[getDirectoryWithImmediateParentPopulated]] ( final Long [[id]] ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { [[id]] } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long [[parentDirectoryId]] = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory [[parentDirectory]] = Directory . ROOT_DIRECTORY ; if ( [[parentDirectoryId]] != null && ! [[parentDirectoryId]] . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory [[fredrik]] ( final Long [[definitions]] ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { [[definitions]] } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long [[rel]] = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory [[curiously]] = Directory . ROOT_DIRECTORY ; if ( [[rel]] != null && ! [[rel]] . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects


--------------------------------------------- Result 212 ---------------------------------------------
Build the distinguished name . --> Build a DistinguishedName --> Socre: 1.0

[[[[Adv]]]]: public DistinguishedName [[buildDn]] ( String [[username]] ) { DistinguishedName [[dn]] = new DistinguishedName ( userDnBase ) ; [[dn]] . add ( usernameAttribute , [[username]] ) ; return [[dn]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName [[waterspout]] ( String [[subscribe]] ) { DistinguishedName [[cn]] = new DistinguishedName ( userDnBase ) ; [[cn]] . add ( usernameAttribute , [[subscribe]] ) ; return [[cn]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .


--------------------------------------------- Result 213 ---------------------------------------------
Creates a map of shared objects . --> A convenience method to prepare a singleton map --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > [[sharedObjects]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[sharedObjects]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[sharedObjects]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[sharedObjects]] . put ( ApplicationContext . class , context ) ; [[sharedObjects]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[sharedObjects]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[sharedObjects]] ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[acetone]] ( ) { Map < Class < ? extends Object > , Object > [[ishikawa]] = new HashMap < Class < ? extends Object > , Object > ( ) ; [[ishikawa]] . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; [[ishikawa]] . put ( UserDetailsService . class , userDetailsService ( ) ) ; [[ishikawa]] . put ( ApplicationContext . class , context ) ; [[ishikawa]] . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; [[ishikawa]] . put ( AuthenticationTrustResolver . class , trustResolver ) ; return [[ishikawa]] ; }
[[[[Nl]]]]: Creates the shared objects


[Succeeded / Failed / Skipped / Total] 132 / 82 / 0 / 214:  21%|██▏       | 214/1000 [1:37:18<5:57:22, 27.28s/it][Succeeded / Failed / Skipped / Total] 132 / 82 / 0 / 214:  22%|██▏       | 215/1000 [1:37:24<5:55:40, 27.19s/it][Succeeded / Failed / Skipped / Total] 133 / 82 / 0 / 215:  22%|██▏       | 215/1000 [1:37:24<5:55:40, 27.19s/it][Succeeded / Failed / Skipped / Total] 133 / 82 / 0 / 215:  22%|██▏       | 216/1000 [1:37:33<5:54:07, 27.10s/it][Succeeded / Failed / Skipped / Total] 134 / 82 / 0 / 216:  22%|██▏       | 216/1000 [1:37:33<5:54:07, 27.10s/it][Succeeded / Failed / Skipped / Total] 134 / 82 / 0 / 216:  22%|██▏       | 217/1000 [1:37:45<5:52:43, 27.03s/it][Succeeded / Failed / Skipped / Total] 135 / 82 / 0 / 217:  22%|██▏       | 217/1000 [1:37:45<5:52:43, 27.03s/it][Succeeded / Failed / Skipped / Total] 135 / 82 / 0 / 217:  22%|██▏       | 218/1000 [1:38:05<5:51:52, 27.00s/it][Succeeded / Failed / Skipped / Total] 135 / 83 / 0 / 218:  22%|██▏       | 218/1000 [1:38:05<5:51:52, 27.00s/it][Succeeded / Failed / Skipped / Total] 135 / 83 / 0 / 218:  22%|██▏       | 219/1000 [1:38:34<5:51:30, 27.00s/it][Succeeded / Failed / Skipped / Total] 135 / 84 / 0 / 219:  22%|██▏       | 219/1000 [1:38:34<5:51:30, 27.00s/it][Succeeded / Failed / Skipped / Total] 135 / 84 / 0 / 219:  22%|██▏       | 220/1000 [1:38:56<5:50:46, 26.98s/it][Succeeded / Failed / Skipped / Total] 136 / 84 / 0 / 220:  22%|██▏       | 220/1000 [1:38:56<5:50:46, 26.98s/it][Succeeded / Failed / Skipped / Total] 136 / 84 / 0 / 220:  22%|██▏       | 221/1000 [1:39:46<5:51:41, 27.09s/it]--------------------------------------------- Result 214 ---------------------------------------------
Sets the JAAS using the login configuration . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[configureJaasUsingLoop]] ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = False ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void [[tintin]] ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean alreadySet = False ; int n = 1 ; final String prefix = "login.config.url." ; String existing ; while ( ( existing = Security . getProperty ( prefix + n ) ) != null ) { alreadySet = existing . equals ( loginConfigUrl ) ; if ( alreadySet ) { break ; } n ++ ; } if ( ! alreadySet ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .


--------------------------------------------- Result 215 ---------------------------------------------
Get current date --> Returns rosen --> Socre: 1.0

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[rosen]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .


--------------------------------------------- Result 216 ---------------------------------------------
Internal parse method . --> Converts a String to a Long --> Socre: 1.0

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String value , DateFormat [ ] formats ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < formats . length ) ; i ++ ) { try { date = formats [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[boyish]] ( String value , DateFormat [ ] formats ) { Date date = null ; for ( int i = 0 ; ( date == null ) && ( i < formats . length ) ; i ++ ) { try { date = formats [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( date == null ) { return null ; } return new Long ( date . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .


--------------------------------------------- Result 217 ---------------------------------------------
Update cache . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[updateCache]] ( HashMap cache , Object key , Object value ) { if ( value == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void [[friedman]] ( HashMap cache , Object key , Object value ) { if ( value == null ) { return ; } if ( cache . size ( ) > 1000 ) { cache . clear ( ) ; } cache . put ( key , value ) ; }
[[[[Nl]]]]: Updates cache .


--------------------------------------------- Result 218 ---------------------------------------------
Sets authentication details . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken [[authRequest]] ) { [[authRequest]] . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[reconnect]] ( HttpServletRequest request , UsernamePasswordAuthenticationToken [[cherub]] ) { [[cherub]] . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .


--------------------------------------------- Result 219 ---------------------------------------------
Determines the security name for the subject . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject [[subject]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[subject]] ) ; } String [[userSecurityName]] = null ; if ( [[subject]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[veronika]] ( final Subject [[dossier]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + [[dossier]] ) ; } String [[closely]] = null ; if ( [[dossier]] != null ) {
[[[[Nl]]]]: Get the security name for the given subject .


--------------------------------------------- Result 220 ---------------------------------------------
Gets webSphere groups . --> Blazin string --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[getWebSphereGroups]] ( final String [[securityName]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[blazin]] ( final String [[lasagne]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .


--------------------------------------------- Result 221 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 136 / 85 / 0 / 221:  22%|██▏       | 221/1000 [1:39:46<5:51:41, 27.09s/it][Succeeded / Failed / Skipped / Total] 136 / 85 / 0 / 221:  22%|██▏       | 222/1000 [1:39:52<5:50:00, 26.99s/it][Succeeded / Failed / Skipped / Total] 137 / 85 / 0 / 222:  22%|██▏       | 222/1000 [1:39:52<5:50:00, 26.99s/it][Succeeded / Failed / Skipped / Total] 137 / 85 / 0 / 222:  22%|██▏       | 223/1000 [1:40:14<5:49:14, 26.97s/it][Succeeded / Failed / Skipped / Total] 138 / 85 / 0 / 223:  22%|██▏       | 223/1000 [1:40:14<5:49:14, 26.97s/it][Succeeded / Failed / Skipped / Total] 138 / 85 / 0 / 223:  22%|██▏       | 224/1000 [1:40:32<5:48:16, 26.93s/it][Succeeded / Failed / Skipped / Total] 139 / 85 / 0 / 224:  22%|██▏       | 224/1000 [1:40:32<5:48:16, 26.93s/it][Succeeded / Failed / Skipped / Total] 139 / 85 / 0 / 224:  22%|██▎       | 225/1000 [1:40:56<5:47:42, 26.92s/it][Succeeded / Failed / Skipped / Total] 139 / 86 / 0 / 225:  22%|██▎       | 225/1000 [1:40:56<5:47:42, 26.92s/it][Succeeded / Failed / Skipped / Total] 139 / 86 / 0 / 225:  23%|██▎       | 226/1000 [1:40:57<5:45:44, 26.80s/it][Succeeded / Failed / Skipped / Total] 139 / 86 / 1 / 226:  23%|██▎       | 226/1000 [1:40:57<5:45:44, 26.80s/it][Succeeded / Failed / Skipped / Total] 139 / 86 / 1 / 226:  23%|██▎       | 227/1000 [1:41:12<5:44:40, 26.75s/it][Succeeded / Failed / Skipped / Total] 140 / 86 / 1 / 227:  23%|██▎       | 227/1000 [1:41:12<5:44:40, 26.75s/it][Succeeded / Failed / Skipped / Total] 140 / 86 / 1 / 227:  23%|██▎       | 228/1000 [1:41:59<5:45:22, 26.84s/it]Changes the current user s password . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[changePassword]] ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName [[userDn]] = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( [[userDn]] , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( [[userDn]] , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void [[pastas]] ( final String oldPassword , final String newPassword ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName [[hannukah]] = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( [[hannukah]] , oldPassword , newPassword ) ; } else { changePasswordUsingAttributeModification ( [[hannukah]] , oldPassword , newPassword ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .


--------------------------------------------- Result 222 ---------------------------------------------
Build a distinguished name from the group --> Build the LDAP query --> Socre: 1.0

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String group ) { DistinguishedName [[dn]] = new DistinguishedName ( groupSearchBase ) ; [[dn]] . add ( groupRoleAttributeName , group . toLowerCase ( ) ) ; return [[dn]] ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName buildGroupDn ( String group ) { DistinguishedName [[dna]] = new DistinguishedName ( groupSearchBase ) ; [[dna]] . add ( groupRoleAttributeName , group . toLowerCase ( ) ) ; return [[dna]] ; }
[[[[Nl]]]]: Creates a DN from a group name .


--------------------------------------------- Result 223 ---------------------------------------------
Throws an exception if the limit is exceeded . --> Throws an exception if the given principal is exceeded --> Socre: 1.0

[[[[Adv]]]]: protected void [[allowableSessionsExceeded]] ( List < SessionInformation > [[sessions]] , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[sessions]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void [[arbitration]] ( List < SessionInformation > [[junket]] , int allowableSessions , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[junket]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( allowableSessions ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .


--------------------------------------------- Result 224 ---------------------------------------------
Copy authentication details from source to destination . --> deprecated --> Socre: 1.0

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken [[token]] = ( AbstractAuthenticationToken ) dest ; [[token]] . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[depend]] ( Authentication source , Authentication dest ) { if ( ( dest instanceof AbstractAuthenticationToken ) && ( dest . getDetails ( ) == null ) ) { AbstractAuthenticationToken [[creeps]] = ( AbstractAuthenticationToken ) dest ; [[creeps]] . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .


--------------------------------------------- Result 225 ---------------------------------------------
Gets the chain of filters matching the given request . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Filter > [[getFilters]] ( HttpServletRequest [[request]] ) { for ( SecurityFilterChain [[chain]] : filterChains ) { if ( [[chain]] . matches ( [[request]] ) ) { return [[chain]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > [[obnoxious]] ( HttpServletRequest [[petition]] ) { for ( SecurityFilterChain [[cables]] : filterChains ) { if ( [[cables]] . matches ( [[petition]] ) ) { return [[cables]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .


--------------------------------------------- Result 226 ---------------------------------------------
Returns all filters matching the specified URL --> [[[SKIPPED]]]

[[[[Adv]]]]: public List < Filter > getFilters ( String url ) { return getFilters ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .


--------------------------------------------- Result 227 ---------------------------------------------
Get the required web application context . --> Find the required WebApplicationContext --> Socre: 1.0

[[[[Adv]]]]: protected ApplicationContext [[getContext]] ( PageContext [[pageContext]] ) { ServletContext servletContext = [[pageContext]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext [[adore]] ( PageContext [[ahold]] ) { ServletContext servletContext = [[ahold]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( servletContext ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .


--------------------------------------------- Result 228 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 140 / 87 / 1 / 228:  23%|██▎       | 228/1000 [1:41:59<5:45:22, 26.84s/it][Succeeded / Failed / Skipped / Total] 140 / 87 / 1 / 228:  23%|██▎       | 229/1000 [1:42:15<5:44:16, 26.79s/it][Succeeded / Failed / Skipped / Total] 141 / 87 / 1 / 229:  23%|██▎       | 229/1000 [1:42:15<5:44:16, 26.79s/it][Succeeded / Failed / Skipped / Total] 141 / 87 / 1 / 229:  23%|██▎       | 230/1000 [1:42:50<5:44:18, 26.83s/it][Succeeded / Failed / Skipped / Total] 141 / 88 / 1 / 230:  23%|██▎       | 230/1000 [1:42:50<5:44:18, 26.83s/it][Succeeded / Failed / Skipped / Total] 141 / 88 / 1 / 230:  23%|██▎       | 231/1000 [1:43:07<5:43:18, 26.79s/it][Succeeded / Failed / Skipped / Total] 141 / 89 / 1 / 231:  23%|██▎       | 231/1000 [1:43:07<5:43:18, 26.79s/it][Succeeded / Failed / Skipped / Total] 141 / 89 / 1 / 231:  23%|██▎       | 232/1000 [1:43:43<5:43:20, 26.82s/it][Succeeded / Failed / Skipped / Total] 141 / 90 / 1 / 232:  23%|██▎       | 232/1000 [1:43:43<5:43:20, 26.82s/it][Succeeded / Failed / Skipped / Total] 141 / 90 / 1 / 232:  23%|██▎       | 233/1000 [1:44:20<5:43:28, 26.87s/it][Succeeded / Failed / Skipped / Total] 141 / 91 / 1 / 233:  23%|██▎       | 233/1000 [1:44:20<5:43:28, 26.87s/it][Succeeded / Failed / Skipped / Total] 141 / 91 / 1 / 233:  23%|██▎       | 234/1000 [1:45:16<5:44:37, 26.99s/it][Succeeded / Failed / Skipped / Total] 142 / 91 / 1 / 234:  23%|██▎       | 234/1000 [1:45:16<5:44:37, 26.99s/it][Succeeded / Failed / Skipped / Total] 142 / 91 / 1 / 234:  24%|██▎       | 235/1000 [1:46:04<5:45:18, 27.08s/it][Succeeded / Failed / Skipped / Total] 142 / 92 / 1 / 235:  24%|██▎       | 235/1000 [1:46:04<5:45:18, 27.08s/it][Succeeded / Failed / Skipped / Total] 142 / 92 / 1 / 235:  24%|██▎       | 236/1000 [1:46:13<5:43:54, 27.01s/it]Get the full DN of the given distinguished name . --> [[[FAILED]]]

[[[[Adv]]]]: public static DistinguishedName [[getFullDn]] ( DistinguishedName dn , Context [[baseCtx]] ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( [[baseCtx]] . getNameInNamespace ( ) ) ; if ( dn . contains ( baseDn ) ) { return dn ; } baseDn . append ( dn ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName [[bookmark]] ( DistinguishedName dn , Context [[splendour]] ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( [[splendour]] . getNameInNamespace ( ) ) ; if ( dn . contains ( baseDn ) ) { return dn ; } baseDn . append ( dn ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .


--------------------------------------------- Result 229 ---------------------------------------------
Sets session attributes . --> For testing only --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > [[sessionAttributes]] ) { notNull ( [[sessionAttributes]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sessionAttributes]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[federated]] ( Map < String , Object > [[sawmill]] ) { notNull ( [[sawmill]] , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , [[sawmill]] , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .


--------------------------------------------- Result 230 ---------------------------------------------
Creates a basic authentication scheme . --> [[[FAILED]]]

[[[[Adv]]]]: public AuthenticationScheme basic ( String [[userName]] , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( [[userName]] ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme basic ( String [[subscribers]] , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( [[subscribers]] ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .


--------------------------------------------- Result 231 ---------------------------------------------
Add a collection of filters . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( List < Filter > [[filters]] ) { Validate . notNull ( [[filters]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[filters]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void [[interrupts]] ( List < Filter > [[trapdoor]] ) { Validate . notNull ( [[interrupts]] , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( [[interrupts]] ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .


--------------------------------------------- Result 232 ---------------------------------------------
Adds additional filters for the given resource . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[filters]] ( Filter [[filter]] , Filter ... [[additionalFilters]] ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( [[additionalFilters]] != null ) { Collections . addAll ( RestAssured . filters , [[additionalFilters]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[trapping]] ( Filter [[purify]] , Filter ... [[fells]] ) { Validate . notNull ( [[purify]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[purify]] ) ; if ( [[fells]] != null ) { Collections . addAll ( RestAssured . filters , [[fells]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .


--------------------------------------------- Result 233 ---------------------------------------------
Creates a basic authentication scheme with the specified user name and password . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[basic]] ( String [[userName]] , String password ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( [[userName]] ) ; scheme . setPassword ( password ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[based]] ( String [[facebook]] , String password ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( [[facebook]] ) ; scheme . setPassword ( password ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .


--------------------------------------------- Result 234 ---------------------------------------------
Create an NTLM authentication scheme . --> Factory method for NTLMuthScheme --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String [[password]] , String [[workstation]] , String [[domain]] ) { final NTLMAuthScheme [[scheme]] = new NTLMAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( [[password]] ) ; [[scheme]] . setWorkstation ( [[workstation]] ) ; [[scheme]] . setDomain ( [[domain]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme ntlm ( String userName , String [[memorised]] , String [[supercomputer]] , String [[areas]] ) { final NTLMAuthScheme [[regimes]] = new NTLMAuthScheme ( ) ; [[regimes]] . setUserName ( userName ) ; [[regimes]] . setPassword ( [[memorised]] ) ; [[regimes]] . setWorkstation ( [[supercomputer]] ) ; [[regimes]] . setDomain ( [[areas]] ) ; return [[regimes]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .


--------------------------------------------- Result 235 ---------------------------------------------
Creates a new authentication scheme with the specified username and password . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[form]] ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[scheme]] = new FormAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setConfig ( config ) ; return [[scheme]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme [[formats]] ( String userName , String password , FormAuthConfig config ) { if ( userName == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme [[intentions]] = new FormAuthScheme ( ) ; [[intentions]] . setUserName ( userName ) ; [[intentions]] . setPassword ( password ) ; [[intentions]] . setConfig ( config ) ; return [[intentions]] ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .


[Succeeded / Failed / Skipped / Total] 143 / 92 / 1 / 236:  24%|██▎       | 236/1000 [1:46:13<5:43:54, 27.01s/it][Succeeded / Failed / Skipped / Total] 143 / 92 / 1 / 236:  24%|██▎       | 237/1000 [1:46:21<5:42:25, 26.93s/it][Succeeded / Failed / Skipped / Total] 144 / 92 / 1 / 237:  24%|██▎       | 237/1000 [1:46:21<5:42:25, 26.93s/it][Succeeded / Failed / Skipped / Total] 144 / 92 / 1 / 237:  24%|██▍       | 238/1000 [1:46:30<5:40:59, 26.85s/it][Succeeded / Failed / Skipped / Total] 145 / 92 / 1 / 238:  24%|██▍       | 238/1000 [1:46:30<5:40:59, 26.85s/it][Succeeded / Failed / Skipped / Total] 145 / 92 / 1 / 238:  24%|██▍       | 239/1000 [1:46:39<5:39:37, 26.78s/it][Succeeded / Failed / Skipped / Total] 146 / 92 / 1 / 239:  24%|██▍       | 239/1000 [1:46:39<5:39:37, 26.78s/it][Succeeded / Failed / Skipped / Total] 146 / 92 / 1 / 239:  24%|██▍       | 240/1000 [1:46:49<5:38:18, 26.71s/it][Succeeded / Failed / Skipped / Total] 147 / 92 / 1 / 240:  24%|██▍       | 240/1000 [1:46:49<5:38:18, 26.71s/it][Succeeded / Failed / Skipped / Total] 147 / 92 / 1 / 240:  24%|██▍       | 241/1000 [1:46:50<5:36:27, 26.60s/it][Succeeded / Failed / Skipped / Total] 147 / 92 / 2 / 241:  24%|██▍       | 241/1000 [1:46:50<5:36:27, 26.60s/it][Succeeded / Failed / Skipped / Total] 147 / 92 / 2 / 241:  24%|██▍       | 242/1000 [1:47:00<5:35:10, 26.53s/it]--------------------------------------------- Result 236 ---------------------------------------------
Proxy a proxy for the given URI . --> Performs all substitutions that are substituting --> Socre: 1.0

[[[[Adv]]]]: public static void [[proxy]] ( URI uri ) { if ( uri == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[proxy]] ( new ProxySpecification ( uri . getHost ( ) , uri . getPort ( ) , uri . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void [[substituting]] ( URI uri ) { if ( uri == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[substituting]] ( new ProxySpecification ( uri . getHost ( ) , uri . getPort ( ) , uri . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .


--------------------------------------------- Result 237 ---------------------------------------------
Prints the response options . --> Generate fingerprinting . --> Socre: 1.0

[[[[Adv]]]]: public static String [[print]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String [[fingerprinting]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream


--------------------------------------------- Result 238 ---------------------------------------------
Retrieves configuration based on given redirect configuration . --> Configures RestAssuredConfig with given redirectConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredConfig redirect ( RedirectConfig [[redirectConfig]] ) { notNull ( [[redirectConfig]] , "Redirect config" ) ; return new RestAssuredConfig ( [[redirectConfig]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig redirect ( RedirectConfig [[shutout]] ) { notNull ( [[shutout]] , "Redirect config" ) ; return new RestAssuredConfig ( [[shutout]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .


--------------------------------------------- Result 239 ---------------------------------------------
Sets the encoding charset . --> Retrieves an encoder configuration . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , True ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[aesop]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , True ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters


--------------------------------------------- Result 240 ---------------------------------------------
Sets the default object mapper type --> returns a Jackson ObjectMapperConfig --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[defaultObjectMapperType]] ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , [[defaultObjectMapperType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , True ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig [[ornot]] ( ObjectMapperType defaultObjectMapperType ) { return new ObjectMapperConfig ( defaultObjectMapper , [[ornot]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , True ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .


--------------------------------------------- Result 241 ---------------------------------------------
Default configuration for Jackson ObjectMapperFactory --> [[[SKIPPED]]]

[[[[Adv]]]]: public ObjectMapperConfig jaxbObjectMapperFactory ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , True ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .


--------------------------------------------- Result 242 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 148 / 92 / 2 / 242:  24%|██▍       | 242/1000 [1:47:00<5:35:10, 26.53s/it][Succeeded / Failed / Skipped / Total] 148 / 92 / 2 / 242:  24%|██▍       | 243/1000 [1:47:10<5:33:52, 26.46s/it][Succeeded / Failed / Skipped / Total] 149 / 92 / 2 / 243:  24%|██▍       | 243/1000 [1:47:10<5:33:52, 26.46s/it][Succeeded / Failed / Skipped / Total] 149 / 92 / 2 / 243:  24%|██▍       | 244/1000 [1:47:20<5:32:36, 26.40s/it][Succeeded / Failed / Skipped / Total] 150 / 92 / 2 / 244:  24%|██▍       | 244/1000 [1:47:20<5:32:36, 26.40s/it][Succeeded / Failed / Skipped / Total] 150 / 92 / 2 / 244:  24%|██▍       | 245/1000 [1:47:40<5:31:50, 26.37s/it][Succeeded / Failed / Skipped / Total] 150 / 93 / 2 / 245:  24%|██▍       | 245/1000 [1:47:40<5:31:50, 26.37s/it][Succeeded / Failed / Skipped / Total] 150 / 93 / 2 / 245:  25%|██▍       | 246/1000 [1:48:01<5:31:05, 26.35s/it][Succeeded / Failed / Skipped / Total] 151 / 93 / 2 / 246:  25%|██▍       | 246/1000 [1:48:01<5:31:05, 26.35s/it][Succeeded / Failed / Skipped / Total] 151 / 93 / 2 / 246:  25%|██▍       | 247/1000 [1:48:11<5:29:49, 26.28s/it][Succeeded / Failed / Skipped / Total] 152 / 93 / 2 / 247:  25%|██▍       | 247/1000 [1:48:11<5:29:49, 26.28s/it][Succeeded / Failed / Skipped / Total] 152 / 93 / 2 / 247:  25%|██▍       | 248/1000 [1:48:21<5:28:33, 26.22s/it][Succeeded / Failed / Skipped / Total] 153 / 93 / 2 / 248:  25%|██▍       | 248/1000 [1:48:21<5:28:33, 26.22s/it][Succeeded / Failed / Skipped / Total] 153 / 93 / 2 / 248:  25%|██▍       | 249/1000 [1:48:31<5:27:18, 26.15s/it][Succeeded / Failed / Skipped / Total] 154 / 93 / 2 / 249:  25%|██▍       | 249/1000 [1:48:31<5:27:18, 26.15s/it][Succeeded / Failed / Skipped / Total] 154 / 93 / 2 / 249:  25%|██▌       | 250/1000 [1:48:41<5:26:05, 26.09s/it]Sets the log config . --> Create a new RestAssuredMockConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[logConfig]] ( LogConfig logConfig ) { notNull ( [[logConfig]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[logConfig]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[condemns]] ( LogConfig logConfig ) { notNull ( [[condemns]] , "Log config" ) ; return new RestAssuredMockMvcConfig ( [[condemns]] , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .


--------------------------------------------- Result 243 ---------------------------------------------
Sets the RestAssuredMock configuration . --> Create a new instance of RestAssignedMockConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sessionConfig]] ( SessionConfig sessionConfig ) { notNull ( [[sessionConfig]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[sessionConfig]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[bassi]] ( SessionConfig sessionConfig ) { notNull ( [[bassi]] , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , [[bassi]] , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .


--------------------------------------------- Result 244 ---------------------------------------------
Sets the RestAssuredMapper config . -->  archetype --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[archetype]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[archetype]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[archetype]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .


--------------------------------------------- Result 245 ---------------------------------------------
Create a new RestAssuredMockConfig from the given JsonConfig . --> [[[FAILED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[jsonConfig]] ( JsonConfig jsonConfig ) { notNull ( [[jsonConfig]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[jsonConfig]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[sanitarium]] ( JsonConfig jsonConfig ) { notNull ( [[sanitarium]] , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , [[sanitarium]] , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .


--------------------------------------------- Result 246 ---------------------------------------------
Sets the restured configuration for the given XML configuration . --> Create a new ResturedMockConfig instance --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig [[xmlConfig]] ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[rustling]] ( XmlConfig [[abuse]] ) { notNull ( [[rustling]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[rustling]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .


--------------------------------------------- Result 247 ---------------------------------------------
Sets the restured config . --> Creates a mock service configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[encoderConfig]] ( EncoderConfig encoderConfig ) { notNull ( [[encoderConfig]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[encoderConfig]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[bleek]] ( EncoderConfig encoderConfig ) { notNull ( [[bleek]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[bleek]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config


--------------------------------------------- Result 248 ---------------------------------------------
Sets the HTTP header config . --> Create a new instance configured for RestAssuredMockConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[headerConfig]] ( HeaderConfig headerConfig ) { notNull ( [[headerConfig]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[headerConfig]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[anki]] ( HeaderConfig headerConfig ) { notNull ( [[anki]] , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , [[anki]] , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config


--------------------------------------------- Result 249 ---------------------------------------------
Sets the restured configuration . --> Create an instance configured for RestManagedMockConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[asyncConfig]] ( AsyncConfig asyncConfig ) { notNull ( [[asyncConfig]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[asyncConfig]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[aquaman]] ( AsyncConfig asyncConfig ) { notNull ( [[aquaman]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[aquaman]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config


[Succeeded / Failed / Skipped / Total] 155 / 93 / 2 / 250:  25%|██▌       | 250/1000 [1:48:41<5:26:05, 26.09s/it][Succeeded / Failed / Skipped / Total] 155 / 93 / 2 / 250:  25%|██▌       | 251/1000 [1:48:42<5:24:22, 25.98s/it][Succeeded / Failed / Skipped / Total] 155 / 93 / 3 / 251:  25%|██▌       | 251/1000 [1:48:42<5:24:22, 25.98s/it][Succeeded / Failed / Skipped / Total] 155 / 93 / 3 / 251:  25%|██▌       | 252/1000 [1:48:42<5:22:39, 25.88s/it][Succeeded / Failed / Skipped / Total] 155 / 93 / 4 / 252:  25%|██▌       | 252/1000 [1:48:42<5:22:39, 25.88s/it][Succeeded / Failed / Skipped / Total] 155 / 93 / 4 / 252:  25%|██▌       | 253/1000 [1:48:51<5:21:25, 25.82s/it][Succeeded / Failed / Skipped / Total] 156 / 93 / 4 / 253:  25%|██▌       | 253/1000 [1:48:51<5:21:25, 25.82s/it][Succeeded / Failed / Skipped / Total] 156 / 93 / 4 / 253:  25%|██▌       | 254/1000 [1:49:00<5:20:08, 25.75s/it][Succeeded / Failed / Skipped / Total] 156 / 94 / 4 / 254:  25%|██▌       | 254/1000 [1:49:00<5:20:08, 25.75s/it][Succeeded / Failed / Skipped / Total] 156 / 94 / 4 / 254:  26%|██▌       | 255/1000 [1:49:10<5:18:57, 25.69s/it][Succeeded / Failed / Skipped / Total] 157 / 94 / 4 / 255:  26%|██▌       | 255/1000 [1:49:10<5:18:57, 25.69s/it][Succeeded / Failed / Skipped / Total] 157 / 94 / 4 / 255:  26%|██▌       | 256/1000 [1:50:07<5:20:04, 25.81s/it][Succeeded / Failed / Skipped / Total] 157 / 95 / 4 / 256:  26%|██▌       | 256/1000 [1:50:07<5:20:04, 25.81s/it][Succeeded / Failed / Skipped / Total] 157 / 95 / 4 / 256:  26%|██▌       | 257/1000 [1:50:33<5:19:38, 25.81s/it][Succeeded / Failed / Skipped / Total] 158 / 95 / 4 / 257:  26%|██▌       | 257/1000 [1:50:33<5:19:38, 25.81s/it][Succeeded / Failed / Skipped / Total] 158 / 95 / 4 / 257:  26%|██▌       | 258/1000 [1:51:10<5:19:44, 25.85s/it]--------------------------------------------- Result 250 ---------------------------------------------
Creates a new RestAssuredMock from the given mock configuration . --> Create an instance of RestAssuredMockConfig . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[mockMvcConfig]] ( MockMvcConfig mockMvcConfig ) { notNull ( [[mockMvcConfig]] , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , [[mockMvcConfig]] , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[ammy]] ( MockMvcConfig mockMvcConfig ) { notNull ( [[ammy]] , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , [[ammy]] , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config


--------------------------------------------- Result 251 ---------------------------------------------
Sets a mock mapper configuration . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig multiPartConfig ( MultiPartConfig multiPartConfig ) { notNull ( multiPartConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config


--------------------------------------------- Result 252 ---------------------------------------------
Creates a new RestAssuredMock configuration object . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig paramConfig ( MockMvcParamConfig paramConfig ) { notNull ( paramConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config


--------------------------------------------- Result 253 ---------------------------------------------
Sets the restured matcher configuration . --> Provides a default mock mapper configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[matcherConfig]] ( MatcherConfig matcherConfig ) { notNull ( [[matcherConfig]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[matcherConfig]] ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[amazon]] ( MatcherConfig matcherConfig ) { notNull ( [[amazon]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[amazon]] ) ; }
[[[[Nl]]]]: Set the matcher config


--------------------------------------------- Result 254 ---------------------------------------------
Allow all host names . --> [[[FAILED]]]

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[whitelaw]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .


--------------------------------------------- Result 255 ---------------------------------------------
Declares an XMLPathConfig with the given namespaces . --> Create a new XMLPathConfig object --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[oddly]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .


--------------------------------------------- Result 256 ---------------------------------------------
Declares a namespace with the specified prefix . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig [[declaredNamespace]] ( String prefix , String [[namespaceURI]] ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[namespaceURI]] , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , [[namespaceURI]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , True , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig [[hatano]] ( String prefix , String [[wiggles]] ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( [[wiggles]] , "Namespace URI cannot be empty" ) ; Map < String , String > updatedNamespaces = new HashMap < String , String > ( declaredNamespaces ) ; updatedNamespaces . put ( prefix , [[wiggles]] ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , updatedNamespaces , properties , validating , True , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .


--------------------------------------------- Result 257 ---------------------------------------------
Issues HTTP request . --> Performs a invite --> Socre: 1.0

[[[[Adv]]]]: public Object [[request]] ( String method , boolean [[hasBody]] , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . [[defaultContentType]] , [[hasBody]] , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object [[invites]] ( String method , boolean [[accor]] , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . [[heineken]] , [[accor]] , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .


--------------------------------------------- Result 258 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 158 / 96 / 4 / 258:  26%|██▌       | 258/1000 [1:51:10<5:19:44, 25.85s/it][Succeeded / Failed / Skipped / Total] 158 / 96 / 4 / 258:  26%|██▌       | 259/1000 [1:51:39<5:19:26, 25.87s/it][Succeeded / Failed / Skipped / Total] 159 / 96 / 4 / 259:  26%|██▌       | 259/1000 [1:51:39<5:19:26, 25.87s/it][Succeeded / Failed / Skipped / Total] 159 / 96 / 4 / 259:  26%|██▌       | 260/1000 [1:52:19<5:19:40, 25.92s/it][Succeeded / Failed / Skipped / Total] 159 / 97 / 4 / 260:  26%|██▌       | 260/1000 [1:52:19<5:19:40, 25.92s/it][Succeeded / Failed / Skipped / Total] 159 / 97 / 4 / 260:  26%|██▌       | 261/1000 [1:52:45<5:19:14, 25.92s/it][Succeeded / Failed / Skipped / Total] 159 / 98 / 4 / 261:  26%|██▌       | 261/1000 [1:52:45<5:19:14, 25.92s/it][Succeeded / Failed / Skipped / Total] 159 / 98 / 4 / 261:  26%|██▌       | 262/1000 [1:53:16<5:19:05, 25.94s/it][Succeeded / Failed / Skipped / Total] 159 / 99 / 4 / 262:  26%|██▌       | 262/1000 [1:53:16<5:19:05, 25.94s/it][Succeeded / Failed / Skipped / Total] 159 / 99 / 4 / 262:  26%|██▋       | 263/1000 [1:53:31<5:18:06, 25.90s/it][Succeeded / Failed / Skipped / Total] 160 / 99 / 4 / 263:  26%|██▋       | 263/1000 [1:53:31<5:18:06, 25.90s/it][Succeeded / Failed / Skipped / Total] 160 / 99 / 4 / 263:  26%|██▋       | 264/1000 [1:54:03<5:17:58, 25.92s/it][Succeeded / Failed / Skipped / Total] 161 / 99 / 4 / 264:  26%|██▋       | 264/1000 [1:54:03<5:17:58, 25.92s/it][Succeeded / Failed / Skipped / Total] 161 / 99 / 4 / 264:  26%|██▋       | 265/1000 [1:54:09<5:16:38, 25.85s/it][Succeeded / Failed / Skipped / Total] 162 / 99 / 4 / 265:  26%|██▋       | 265/1000 [1:54:09<5:16:38, 25.85s/it][Succeeded / Failed / Skipped / Total] 162 / 99 / 4 / 265:  27%|██▋       | 266/1000 [1:54:18<5:15:24, 25.78s/it]Sets the request headers . --> [[[FAILED]]]

[[[[Adv]]]]: public void setHeaders ( Map < ? , ? > [[headers]] ) { this . defaultRequestHeaders . clear ( ) ; if ( [[headers]] == null ) return ; for ( Object key : [[headers]] . keySet ( ) ) { Object val = [[headers]] . get ( key ) ; if ( val == null ) continue ; this . defaultRequestHeaders . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void setHeaders ( Map < ? , ? > [[tagging]] ) { this . defaultRequestHeaders . clear ( ) ; if ( [[tagging]] == null ) return ; for ( Object key : [[tagging]] . keySet ( ) ) { Object val = [[tagging]] . get ( key ) ; if ( val == null ) continue ; this . defaultRequestHeaders . put ( key . toString ( ) , val . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .


--------------------------------------------- Result 259 ---------------------------------------------
Set the proxy to use . --> Antihistamine purpose --> Socre: 1.0

[[[[Adv]]]]: public void [[setProxy]] ( String [[host]] , int [[port]] , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( [[host]] , [[port]] , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[antihistamine]] ( String [[arrange]] , int [[harbor]] , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( [[arrange]] , [[harbor]] , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .


--------------------------------------------- Result 260 ---------------------------------------------
Sets the control name . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String controlName ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . controlName = [[controlName]] ; this . isControlNameExplicit = True ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[telekinesis]] ( String controlName ) { Validate . notEmpty ( [[telekinesis]] , "Control name cannot be empty" ) ; this . controlName = [[telekinesis]] ; this . isControlNameExplicit = True ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .


--------------------------------------------- Result 261 ---------------------------------------------
Sets a multi - part header . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String name , String [[value]] ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( [[value]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[tagging]] ( String name , String [[merit]] ) { Validate . notEmpty ( name , "Header name cannot be empty" ) ; Validate . notEmpty ( [[merit]] , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .


--------------------------------------------- Result 262 ---------------------------------------------
Sets the basic auth credentials . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[basic]] ( String host , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[main]] ( String host , int port , String user , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( user , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .


--------------------------------------------- Result 263 ---------------------------------------------
Sets the NTLM credentials . --> Magruder method --> Socre: 1.0

[[[[Adv]]]]: public void [[ntlm]] ( String host , int port , String [[user]] , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new NTCredentials ( [[user]] , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[magruder]] ( String host , int port , String [[beneficiaries]] , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new NTCredentials ( [[beneficiaries]] , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .


--------------------------------------------- Result 264 ---------------------------------------------
Create a copy of the headers for the given header . --> Static factory method --> Socre: 1.0

[[[[Adv]]]]: public static Headers [[headers]] ( Header [[header]] , Header ... [[additionalHeaders]] ) { notNull ( [[header]] , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( [[header]] ) ; if ( [[additionalHeaders]] != null ) { Collections . addAll ( headerList , [[additionalHeaders]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers [[epitaph]] ( Header [[cartel]] , Header ... [[shaped]] ) { notNull ( [[cartel]] , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( [[cartel]] ) ; if ( [[shaped]] != null ) { Collections . addAll ( headerList , [[shaped]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .


--------------------------------------------- Result 265 ---------------------------------------------
Reset resources . --> releases resources --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[reopen]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .


--------------------------------------------- Result 266 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 163 / 99 / 4 / 266:  27%|██▋       | 266/1000 [1:54:18<5:15:24, 25.78s/it][Succeeded / Failed / Skipped / Total] 163 / 99 / 4 / 266:  27%|██▋       | 267/1000 [1:54:31<5:14:23, 25.73s/it][Succeeded / Failed / Skipped / Total] 164 / 99 / 4 / 267:  27%|██▋       | 267/1000 [1:54:31<5:14:23, 25.73s/it][Succeeded / Failed / Skipped / Total] 164 / 99 / 4 / 267:  27%|██▋       | 268/1000 [1:54:54<5:13:50, 25.72s/it][Succeeded / Failed / Skipped / Total] 164 / 100 / 4 / 268:  27%|██▋       | 268/1000 [1:54:54<5:13:50, 25.72s/it][Succeeded / Failed / Skipped / Total] 164 / 100 / 4 / 268:  27%|██▋       | 269/1000 [1:55:18<5:13:21, 25.72s/it][Succeeded / Failed / Skipped / Total] 164 / 101 / 4 / 269:  27%|██▋       | 269/1000 [1:55:18<5:13:21, 25.72s/it][Succeeded / Failed / Skipped / Total] 164 / 101 / 4 / 269:  27%|██▋       | 270/1000 [1:55:40<5:12:44, 25.70s/it][Succeeded / Failed / Skipped / Total] 164 / 102 / 4 / 270:  27%|██▋       | 270/1000 [1:55:40<5:12:44, 25.70s/it][Succeeded / Failed / Skipped / Total] 164 / 102 / 4 / 270:  27%|██▋       | 271/1000 [1:56:02<5:12:09, 25.69s/it][Succeeded / Failed / Skipped / Total] 164 / 103 / 4 / 271:  27%|██▋       | 271/1000 [1:56:02<5:12:09, 25.69s/it][Succeeded / Failed / Skipped / Total] 164 / 103 / 4 / 271:  27%|██▋       | 272/1000 [1:56:22<5:11:28, 25.67s/it][Succeeded / Failed / Skipped / Total] 164 / 104 / 4 / 272:  27%|██▋       | 272/1000 [1:56:22<5:11:28, 25.67s/it][Succeeded / Failed / Skipped / Total] 164 / 104 / 4 / 272:  27%|██▋       | 273/1000 [1:56:42<5:10:48, 25.65s/it][Succeeded / Failed / Skipped / Total] 164 / 105 / 4 / 273:  27%|██▋       | 273/1000 [1:56:42<5:10:48, 25.65s/it][Succeeded / Failed / Skipped / Total] 164 / 105 / 4 / 273:  27%|██▋       | 274/1000 [1:57:05<5:10:15, 25.64s/it][Succeeded / Failed / Skipped / Total] 164 / 106 / 4 / 274:  27%|██▋       | 274/1000 [1:57:05<5:10:15, 25.64s/it][Succeeded / Failed / Skipped / Total] 164 / 106 / 4 / 274:  28%|██▊       | 275/1000 [1:57:26<5:09:37, 25.62s/it]Sets a header . --> Auto configured response . --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder [[setHeader]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder [[autocracy]] ( String name , String value ) { notNull ( name , "Header name" ) ; notNull ( value , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( name , value ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( name ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( value ) ; } return this ; }
[[[[Nl]]]]: Set a specific header


--------------------------------------------- Result 267 ---------------------------------------------
Builds the response . --> Performs enhancement . --> Socre: 1.0

[[[[Adv]]]]: public Response [[build]] ( ) { final int [[statusCode]] = restAssuredResponse . statusCode ( ) ; if ( [[statusCode]] < 100 || [[statusCode]] >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , [[statusCode]] ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[enhancement]] ( ) { final int [[overreacted]] = restAssuredResponse . statusCode ( ) ; if ( [[overreacted]] < 100 || [[overreacted]] >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , [[overreacted]] ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response


--------------------------------------------- Result 268 ---------------------------------------------
Creates a cookieMatcher that matches the specified matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > [[valueMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[valueMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[evaluations]] ( Matcher < ? super String > [[toxics]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[toxics]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .


--------------------------------------------- Result 269 ---------------------------------------------
Applies a cookie to the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[comment]] ( Matcher < ? super String > [[commentMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[commentMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[commentaries]] ( Matcher < ? super String > [[folklore]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[folklore]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .


--------------------------------------------- Result 270 ---------------------------------------------
Creates a cookie matcher that matches expiry date . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > [[expiryDateMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[expiryDateMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[asai]] ( Matcher < ? super Date > [[vermont]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[vermont]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .


--------------------------------------------- Result 271 ---------------------------------------------
Matches cookie matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > [[domainMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[domainMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[campo]] ( Matcher < ? super String > [[coexistence]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[coexistence]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .


--------------------------------------------- Result 272 ---------------------------------------------
Creates a cookie matcher that matches the given path matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[path]] ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[menu]] ( Matcher < ? super String > [[picard]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[picard]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .


--------------------------------------------- Result 273 ---------------------------------------------
Applies a secured cookie to the secured cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[secured]] ( Matcher < ? super Boolean > [[securedMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[securedMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[assured]] ( Matcher < ? super Boolean > [[isolation]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[isolation]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .


--------------------------------------------- Result 274 ---------------------------------------------
Creates a cookie matcher that matches HTTP only . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[httpOnly]] ( Matcher < ? super Boolean > [[httpOnlyMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[httpOnlyMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[doc]] ( Matcher < ? super Boolean > [[shaking]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , [[shaking]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .


--------------------------------------------- Result 275 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 164 / 107 / 4 / 275:  28%|██▊       | 275/1000 [1:57:26<5:09:37, 25.62s/it][Succeeded / Failed / Skipped / Total] 164 / 107 / 4 / 275:  28%|██▊       | 276/1000 [1:57:49<5:09:03, 25.61s/it][Succeeded / Failed / Skipped / Total] 164 / 108 / 4 / 276:  28%|██▊       | 276/1000 [1:57:49<5:09:03, 25.61s/it][Succeeded / Failed / Skipped / Total] 164 / 108 / 4 / 276:  28%|██▊       | 277/1000 [1:58:16<5:08:41, 25.62s/it][Succeeded / Failed / Skipped / Total] 164 / 109 / 4 / 277:  28%|██▊       | 277/1000 [1:58:16<5:08:41, 25.62s/it][Succeeded / Failed / Skipped / Total] 164 / 109 / 4 / 277:  28%|██▊       | 278/1000 [1:58:37<5:08:06, 25.60s/it][Succeeded / Failed / Skipped / Total] 164 / 110 / 4 / 278:  28%|██▊       | 278/1000 [1:58:37<5:08:06, 25.60s/it][Succeeded / Failed / Skipped / Total] 164 / 110 / 4 / 278:  28%|██▊       | 279/1000 [1:59:00<5:07:31, 25.59s/it][Succeeded / Failed / Skipped / Total] 164 / 111 / 4 / 279:  28%|██▊       | 279/1000 [1:59:00<5:07:31, 25.59s/it][Succeeded / Failed / Skipped / Total] 164 / 111 / 4 / 279:  28%|██▊       | 280/1000 [1:59:17<5:06:46, 25.56s/it][Succeeded / Failed / Skipped / Total] 164 / 112 / 4 / 280:  28%|██▊       | 280/1000 [1:59:17<5:06:46, 25.56s/it][Succeeded / Failed / Skipped / Total] 164 / 112 / 4 / 280:  28%|██▊       | 281/1000 [1:59:30<5:05:46, 25.52s/it][Succeeded / Failed / Skipped / Total] 165 / 112 / 4 / 281:  28%|██▊       | 281/1000 [1:59:30<5:05:46, 25.52s/it][Succeeded / Failed / Skipped / Total] 165 / 112 / 4 / 281:  28%|██▊       | 282/1000 [1:59:47<5:05:00, 25.49s/it][Succeeded / Failed / Skipped / Total] 166 / 112 / 4 / 282:  28%|██▊       | 282/1000 [1:59:47<5:05:00, 25.49s/it][Succeeded / Failed / Skipped / Total] 166 / 112 / 4 / 282:  28%|██▊       | 283/1000 [2:00:04<5:04:13, 25.46s/it][Succeeded / Failed / Skipped / Total] 167 / 112 / 4 / 283:  28%|██▊       | 283/1000 [2:00:04<5:04:13, 25.46s/it][Succeeded / Failed / Skipped / Total] 167 / 112 / 4 / 283:  28%|██▊       | 284/1000 [2:00:13<5:03:05, 25.40s/it][Succeeded / Failed / Skipped / Total] 168 / 112 / 4 / 284:  28%|██▊       | 284/1000 [2:00:13<5:03:05, 25.40s/it][Succeeded / Failed / Skipped / Total] 168 / 112 / 4 / 284:  28%|██▊       | 285/1000 [2:00:42<5:02:50, 25.41s/it]Creates a cookie matcher that matches the version of the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[copy]] ( Matcher < ? super Integer > [[condition]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[condition]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .


--------------------------------------------- Result 276 ---------------------------------------------
Applies cookie matcher to cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[toolshed]] ( Matcher < ? super Integer > [[wrote]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[wrote]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .


--------------------------------------------- Result 277 ---------------------------------------------
Expect a header to match the expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String headerName , Matcher < String > expectedValueMatcher ) { spec . header ( headerName , expectedValueMatcher ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder [[shakers]] ( String headerName , Matcher < String > expectedValueMatcher ) { spec . header ( headerName , expectedValueMatcher ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .


--------------------------------------------- Result 278 ---------------------------------------------
Expect a header with the given expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String headerName , String [[expectedValue]] ) { spec . header ( headerName , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[inherited]] ( String headerName , String [[perfectionist]] ) { spec . header ( headerName , [[perfectionist]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .


--------------------------------------------- Result 279 ---------------------------------------------
Expect a cookie with expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectCookie]] ( String [[cookieName]] , String expectedValue ) { spec . cookie ( [[cookieName]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[birdcage]] ( String [[lassie]] , String expectedValue ) { spec . cookie ( [[lassie]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .


--------------------------------------------- Result 280 ---------------------------------------------
Returns a proxy specification for this proxy . --> [[[FAILED]]]

[[[[Adv]]]]: public ProxySpecification [[withHost]] ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification [[bowing]] ( String [[holds]] ) { return new ProxySpecification ( [[holds]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .


--------------------------------------------- Result 281 ---------------------------------------------
Configures a JsonPathConfig with the given number of numbers . --> Configure JsonPathConfig --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig numberReturnType ( NumberReturnType [[numberReturnType]] ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .

[[[[Adv]]]]: public JsonPathConfig numberReturnType ( NumberReturnType [[aeschylus]] ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .


--------------------------------------------- Result 282 ---------------------------------------------
Sets the default parser type . --> Create a new JsonPathConfig --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType [[defaultParserType]] ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[becks]] ( JsonParserType [[byline]] ) { return new JsonPathConfig ( numberReturnType , [[becks]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .


--------------------------------------------- Result 283 ---------------------------------------------
Default logging to use . --> Liefert --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream printStream ) { return new LogConfig ( printStream , "[[True]]" == "[[True]]" , logDetailIfValidationFails , urlEncodeRequestUri , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[ljungberg]] ( PrintStream printStream ) { return new LogConfig ( printStream , "[["Honest" == "Honest"]]" == "[["Honest" == "Honest"]]" , logDetailIfValidationFails , urlEncodeRequestUri , "[["Honest" == "Honest"]]" == "[["Honest" == "Honest"]]" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .


--------------------------------------------- Result 284 ---------------------------------------------
Enable logging of request and response . --> Closes a LogConfig . --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[enableLoggingOfRequestAndResponseIfValidationFails]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , True ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig [[abandoning]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , True ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail


--------------------------------------------- Result 285 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 169 / 112 / 4 / 285:  28%|██▊       | 285/1000 [2:00:42<5:02:50, 25.41s/it][Succeeded / Failed / Skipped / Total] 169 / 112 / 4 / 285:  29%|██▊       | 286/1000 [2:01:05<5:02:18, 25.40s/it][Succeeded / Failed / Skipped / Total] 170 / 112 / 4 / 286:  29%|██▊       | 286/1000 [2:01:05<5:02:18, 25.40s/it][Succeeded / Failed / Skipped / Total] 170 / 112 / 4 / 286:  29%|██▊       | 287/1000 [2:01:18<5:01:21, 25.36s/it][Succeeded / Failed / Skipped / Total] 171 / 112 / 4 / 287:  29%|██▊       | 287/1000 [2:01:18<5:01:21, 25.36s/it][Succeeded / Failed / Skipped / Total] 171 / 112 / 4 / 287:  29%|██▉       | 288/1000 [2:01:31<5:00:27, 25.32s/it][Succeeded / Failed / Skipped / Total] 172 / 112 / 4 / 288:  29%|██▉       | 288/1000 [2:01:31<5:00:27, 25.32s/it][Succeeded / Failed / Skipped / Total] 172 / 112 / 4 / 288:  29%|██▉       | 289/1000 [2:01:56<5:00:01, 25.32s/it][Succeeded / Failed / Skipped / Total] 172 / 113 / 4 / 289:  29%|██▉       | 289/1000 [2:01:56<5:00:01, 25.32s/it][Succeeded / Failed / Skipped / Total] 172 / 113 / 4 / 289:  29%|██▉       | 290/1000 [2:02:10<4:59:07, 25.28s/it][Succeeded / Failed / Skipped / Total] 173 / 113 / 4 / 290:  29%|██▉       | 290/1000 [2:02:10<4:59:07, 25.28s/it][Succeeded / Failed / Skipped / Total] 173 / 113 / 4 / 290:  29%|██▉       | 291/1000 [2:02:36<4:58:43, 25.28s/it][Succeeded / Failed / Skipped / Total] 173 / 114 / 4 / 291:  29%|██▉       | 291/1000 [2:02:36<4:58:43, 25.28s/it][Succeeded / Failed / Skipped / Total] 173 / 114 / 4 / 291:  29%|██▉       | 292/1000 [2:03:25<4:59:16, 25.36s/it][Succeeded / Failed / Skipped / Total] 174 / 114 / 4 / 292:  29%|██▉       | 292/1000 [2:03:25<4:59:16, 25.36s/it][Succeeded / Failed / Skipped / Total] 174 / 114 / 4 / 292:  29%|██▉       | 293/1000 [2:03:35<4:58:14, 25.31s/it][Succeeded / Failed / Skipped / Total] 175 / 114 / 4 / 293:  29%|██▉       | 293/1000 [2:03:35<4:58:14, 25.31s/it][Succeeded / Failed / Skipped / Total] 175 / 114 / 4 / 293:  29%|██▉       | 294/1000 [2:03:55<4:57:35, 25.29s/it]Creates a HttpRequestBase for the given HTTP method and HTTP method . --> Create HttpRequestBase --> Socre: 1.0

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > [[type]] = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase [[httpRequest]] ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String httpMethod , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( httpMethod ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > [[like]] = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase [[wherewithal]] ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .


--------------------------------------------- Result 286 ---------------------------------------------
Sets the default boundary . --> overrides configuration --> Socre: 1.0

[[[[Adv]]]]: public MultiPartConfig [[defaultBoundary]] ( String [[defaultBoundary]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[defaultBoundary]] , defaultCharset , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig [[aftereffects]] ( String [[addis]] ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[aftereffects]] , defaultCharset , "[["Realty" == "Realty"]]" == "[["Realty" == "Realty"]]" ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .


--------------------------------------------- Result 287 ---------------------------------------------
Adds an attribute to the request . --> Set a goldie gem . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addAttribute]] ( String attributeName , Object [[attributeValue]] ) { spec . attribute ( attributeName , [[attributeValue]] ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[goldie]] ( String attributeName , Object [[bigotry]] ) { spec . attribute ( attributeName , [[bigotry]] ) ; return this ; }
[[[[Nl]]]]: Add request attribute


--------------------------------------------- Result 288 ---------------------------------------------
Adds a header to the request . --> region > getHeader --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String [[headerName]] , String headerValue ) { spec . header ( [[headerName]] , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[graboid]] ( String [[thebes]] , String headerValue ) { spec . header ( [[thebes]] , headerValue ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request


--------------------------------------------- Result 289 ---------------------------------------------
Adds a multi - part request . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addMultiPart]] ( String controlName , String contentBody , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[bloch]] ( String controlName , String contentBody , String mimeType ) { spec . multiPart ( controlName , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .


--------------------------------------------- Result 290 ---------------------------------------------
Add result handlers . --> Sets the character handlers . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addResultHandlers]] ( ResultHandler [[resultHandler]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[resultHandler]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[charlatans]] ( ResultHandler [[joanna]] , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( [[joanna]] , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler


--------------------------------------------- Result 291 ---------------------------------------------
Sets a parameter with the specified parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[HttpClientConfig]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[newParams]] = new HashMap < String , Object > ( httpClientParams ) ; [[newParams]] . put ( parameterName , parameterValue ) ; return new [[HttpClientConfig]] ( httpClientFactory , [[newParams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > [[victorian]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[defused]] = new HashMap < String , Object > ( httpClientParams ) ; [[defused]] . put ( parameterName , parameterValue ) ; return new [[victorian]] ( httpClientFactory , [[defused]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Set a http client parameter .


--------------------------------------------- Result 292 ---------------------------------------------
Add the given set of http client parameters . --> Configure application config --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[addParams]] ( Map < String , ? > [[httpClientParams]] ) { notNull ( [[httpClientParams]] , "httpClientParams" ) ; final Map < String , Object > [[newParams]] = new HashMap < String , Object > ( this . [[httpClientParams]] ) ; [[newParams]] . putAll ( [[httpClientParams]] ) ; return new HttpClientConfig ( httpClientFactory , [[newParams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig [[applaus]] ( Map < String , ? > [[aoki]] ) { notNull ( [[aoki]] , "httpClientParams" ) ; final Map < String , Object > [[afterburners]] = new HashMap < String , Object > ( this . [[crystallized]] ) ; [[afterburners]] . putAll ( [[aoki]] ) ; return new HttpClientConfig ( httpClientFactory , [[afterburners]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .


--------------------------------------------- Result 293 ---------------------------------------------
Sets the HttpClientFactory . --> Returns HttpClientFactory --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig httpClientFactory ( HttpClientFactory [[httpClientFactory]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig httpClientFactory ( HttpClientFactory [[dooby]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .


--------------------------------------------- Result 294 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 176 / 114 / 4 / 294:  29%|██▉       | 294/1000 [2:03:55<4:57:35, 25.29s/it][Succeeded / Failed / Skipped / Total] 176 / 114 / 4 / 294:  30%|██▉       | 295/1000 [2:04:14<4:56:55, 25.27s/it][Succeeded / Failed / Skipped / Total] 176 / 115 / 4 / 295:  30%|██▉       | 295/1000 [2:04:14<4:56:55, 25.27s/it][Succeeded / Failed / Skipped / Total] 176 / 115 / 4 / 295:  30%|██▉       | 296/1000 [2:04:22<4:55:47, 25.21s/it][Succeeded / Failed / Skipped / Total] 177 / 115 / 4 / 296:  30%|██▉       | 296/1000 [2:04:22<4:55:47, 25.21s/it][Succeeded / Failed / Skipped / Total] 177 / 115 / 4 / 296:  30%|██▉       | 297/1000 [2:04:31<4:54:44, 25.16s/it][Succeeded / Failed / Skipped / Total] 178 / 115 / 4 / 297:  30%|██▉       | 297/1000 [2:04:31<4:54:44, 25.16s/it][Succeeded / Failed / Skipped / Total] 178 / 115 / 4 / 297:  30%|██▉       | 298/1000 [2:04:47<4:53:58, 25.13s/it][Succeeded / Failed / Skipped / Total] 179 / 115 / 4 / 298:  30%|██▉       | 298/1000 [2:04:47<4:53:58, 25.13s/it][Succeeded / Failed / Skipped / Total] 179 / 115 / 4 / 298:  30%|██▉       | 299/1000 [2:05:00<4:53:05, 25.09s/it][Succeeded / Failed / Skipped / Total] 180 / 115 / 4 / 299:  30%|██▉       | 299/1000 [2:05:00<4:53:05, 25.09s/it][Succeeded / Failed / Skipped / Total] 180 / 115 / 4 / 299:  30%|███       | 300/1000 [2:05:21<4:52:31, 25.07s/it][Succeeded / Failed / Skipped / Total] 181 / 115 / 4 / 300:  30%|███       | 300/1000 [2:05:21<4:52:31, 25.07s/it][Succeeded / Failed / Skipped / Total] 181 / 115 / 4 / 300:  30%|███       | 301/1000 [2:05:36<4:51:41, 25.04s/it][Succeeded / Failed / Skipped / Total] 182 / 115 / 4 / 301:  30%|███       | 301/1000 [2:05:36<4:51:41, 25.04s/it][Succeeded / Failed / Skipped / Total] 182 / 115 / 4 / 301:  30%|███       | 302/1000 [2:06:11<4:51:39, 25.07s/it][Succeeded / Failed / Skipped / Total] 183 / 115 / 4 / 302:  30%|███       | 302/1000 [2:06:11<4:51:39, 25.07s/it][Succeeded / Failed / Skipped / Total] 183 / 115 / 4 / 302:  30%|███       | 303/1000 [2:06:31<4:51:03, 25.06s/it][Succeeded / Failed / Skipped / Total] 184 / 115 / 4 / 303:  30%|███       | 303/1000 [2:06:31<4:51:03, 25.06s/it][Succeeded / Failed / Skipped / Total] 184 / 115 / 4 / 303:  30%|███       | 304/1000 [2:06:58<4:50:42, 25.06s/it][Succeeded / Failed / Skipped / Total] 184 / 116 / 4 / 304:  30%|███       | 304/1000 [2:06:58<4:50:42, 25.06s/it][Succeeded / Failed / Skipped / Total] 184 / 116 / 4 / 304:  30%|███       | 305/1000 [2:07:20<4:50:10, 25.05s/it][Succeeded / Failed / Skipped / Total] 185 / 116 / 4 / 305:  30%|███       | 305/1000 [2:07:20<4:50:10, 25.05s/it][Succeeded / Failed / Skipped / Total] 185 / 116 / 4 / 305:  31%|███       | 306/1000 [2:07:43<4:49:40, 25.04s/it]Sets the Http Multipart mode . --> Returns a new HttpClientConfig --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpMultipartMode]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[httpMultipartMode]] , shouldReuseHttpClientInstance , httpClient , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig [[hast]] ( HttpMultipartMode httpMultipartMode ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[hast]] , shouldReuseHttpClientInstance , httpClient , "[["Decent" == "Decent"]]" == "[["Decent" == "Decent"]]" ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .


--------------------------------------------- Result 295 ---------------------------------------------
Gets a value . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) jsonAssertion . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[have]] > [[have]] get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[have]] ) jsonAssertion . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .


--------------------------------------------- Result 296 ---------------------------------------------
Gets int . --> Diliy diu --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[dili]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .


--------------------------------------------- Result 297 ---------------------------------------------
Gets byte . --> Register wirth --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[wirth]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .


--------------------------------------------- Result 298 ---------------------------------------------
Get short . -->  blackhole --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[blackwolf]] ( String [[rails]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .


--------------------------------------------- Result 299 ---------------------------------------------
Get a float value . --> Calculate sybil --> Socre: 1.0

[[[[Adv]]]]: public float [[getFloat]] ( String [[path]] ) { final Object value = get ( [[path]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[sybil]] ( String [[arteries]] ) { final Object value = get ( [[arteries]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .


--------------------------------------------- Result 300 ---------------------------------------------
Get a double . --> Convenience method for obtaining Money --> Socre: 1.0

[[[[Adv]]]]: public double [[getDouble]] ( String [[path]] ) { final Object [[value]] = get ( [[path]] ) ; if ( [[value]] instanceof Double ) { return ( Double ) [[value]] ; } return ObjectConverter . convertObjectTo ( [[value]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[fundamental]] ( String [[avenues]] ) { final Object [[amount]] = get ( [[avenues]] ) ; if ( [[amount]] instanceof Double ) { return ( Double ) [[amount]] ; } return ObjectConverter . convertObjectTo ( [[amount]] , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .


--------------------------------------------- Result 301 ---------------------------------------------
Gets long . --> Liefert die zurueck zurueck --> Socre: 1.0

[[[[Adv]]]]: public long [[getLong]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[graziella]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .


--------------------------------------------- Result 302 ---------------------------------------------
Retrieve a list of mapped type from the given path . --> On swipe type --> Socre: 1.0

[[[[Adv]]]]: public < T > List < T > [[getList]] ( String [[path]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( [[path]] ) ; final List < T > [[newList]] = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T [[e]] ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > [[onoff]] ( String [[avenues]] , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > original = get ( [[avenues]] ) ; final List < T > [[flash]] = new LinkedList < T > ( ) ; if ( original != null ) { for ( T t : original ) { T [[k]] ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .


--------------------------------------------- Result 303 ---------------------------------------------
Gets a map element . --> Look at road station for roads --> Socre: 1.0

[[[[Adv]]]]: public < [[K]] , V > Map < [[K]] , V > [[getMap]] ( String [[path]] ) { return get ( [[path]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < [[na]] , V > Map < [[na]] , V > [[están]] ( String [[roadway]] ) { return get ( [[roadway]] ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .


--------------------------------------------- Result 304 ---------------------------------------------
Gets object from path . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] getObject ( String path , Class < [[T]] > objectType ) { Object object = getFromPath ( path , "[[False]]" != "[[False]]" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < [[ter]] > [[ter]] getObject ( String path , Class < [[ter]] > objectType ) { Object object = getFromPath ( path , "[["Falsify" != "Falsify"]]" != "[["Falsify" != "Falsify"]]" ) ; return getObjectAsType ( object , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .


--------------------------------------------- Result 305 ---------------------------------------------
Sets the body of the request . --> Liefert ein deserialisiert --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[setBody]] ( Object object , ObjectMapper [[mapper]] ) { spec . body ( object , [[mapper]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder [[albrecht]] ( Object object , ObjectMapper [[tartarus]] ) { spec . body ( object , [[tartarus]] ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .


[Succeeded / Failed / Skipped / Total] 185 / 117 / 4 / 306:  31%|███       | 306/1000 [2:07:43<4:49:40, 25.04s/it][Succeeded / Failed / Skipped / Total] 185 / 117 / 4 / 306:  31%|███       | 307/1000 [2:08:06<4:49:10, 25.04s/it][Succeeded / Failed / Skipped / Total] 185 / 118 / 4 / 307:  31%|███       | 307/1000 [2:08:06<4:49:10, 25.04s/it][Succeeded / Failed / Skipped / Total] 185 / 118 / 4 / 307:  31%|███       | 308/1000 [2:08:20<4:48:20, 25.00s/it][Succeeded / Failed / Skipped / Total] 186 / 118 / 4 / 308:  31%|███       | 308/1000 [2:08:20<4:48:20, 25.00s/it][Succeeded / Failed / Skipped / Total] 186 / 118 / 4 / 308:  31%|███       | 309/1000 [2:08:37<4:47:37, 24.97s/it][Succeeded / Failed / Skipped / Total] 187 / 118 / 4 / 309:  31%|███       | 309/1000 [2:08:37<4:47:37, 24.97s/it][Succeeded / Failed / Skipped / Total] 187 / 118 / 4 / 309:  31%|███       | 310/1000 [2:08:48<4:46:41, 24.93s/it][Succeeded / Failed / Skipped / Total] 188 / 118 / 4 / 310:  31%|███       | 310/1000 [2:08:48<4:46:41, 24.93s/it][Succeeded / Failed / Skipped / Total] 188 / 118 / 4 / 310:  31%|███       | 311/1000 [2:09:20<4:46:31, 24.95s/it][Succeeded / Failed / Skipped / Total] 189 / 118 / 4 / 311:  31%|███       | 311/1000 [2:09:20<4:46:31, 24.95s/it][Succeeded / Failed / Skipped / Total] 189 / 118 / 4 / 311:  31%|███       | 312/1000 [2:09:27<4:45:29, 24.90s/it][Succeeded / Failed / Skipped / Total] 190 / 118 / 4 / 312:  31%|███       | 312/1000 [2:09:27<4:45:29, 24.90s/it][Succeeded / Failed / Skipped / Total] 190 / 118 / 4 / 312:  31%|███▏      | 313/1000 [2:09:43<4:44:43, 24.87s/it][Succeeded / Failed / Skipped / Total] 190 / 119 / 4 / 313:  31%|███▏      | 313/1000 [2:09:43<4:44:43, 24.87s/it][Succeeded / Failed / Skipped / Total] 190 / 119 / 4 / 313:  31%|███▏      | 314/1000 [2:09:50<4:43:40, 24.81s/it][Succeeded / Failed / Skipped / Total] 191 / 119 / 4 / 314:  31%|███▏      | 314/1000 [2:09:50<4:43:40, 24.81s/it][Succeeded / Failed / Skipped / Total] 191 / 119 / 4 / 314:  32%|███▏      | 315/1000 [2:11:21<4:45:38, 25.02s/it]--------------------------------------------- Result 306 ---------------------------------------------
Adds a cookie to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addCookie]] ( String [[key]] , Object [[value]] , Object ... [[cookieNameValuePairs]] ) { spec . cookie ( [[key]] , [[value]] , [[cookieNameValuePairs]] ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[pressing]] ( String [[principal]] , Object [[valued]] , Object ... [[crore]] ) { spec . cookie ( [[principal]] , [[valued]] , [[crore]] ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .


--------------------------------------------- Result 307 ---------------------------------------------
Add a parameter to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Object ... parameterValues ) { spec . param ( [[parameterName]] , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[kamil]] ( String [[derail]] , Object ... parameterValues ) { spec . param ( [[derail]] , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .


--------------------------------------------- Result 308 ---------------------------------------------
Adds a parameter to the request . --> Applies pende pojo parameters --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Collection < ? > parameterValues ) { spec . param ( [[parameterName]] , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[pendejo]] ( String [[appaloosa]] , Collection < ? > parameterValues ) { spec . param ( [[appaloosa]] , parameterValues ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .


--------------------------------------------- Result 309 ---------------------------------------------
Create a custom update strategy . --> Create a new MockServiceConfigConfig instance --> Socre: 1.0

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[foisted]] ( UpdateStrategy updateStrategy ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , updateStrategy , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , "[["Truthful" == "Truthful"]]" == "[["Truthful" == "Truthful"]]" ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .


--------------------------------------------- Result 310 ---------------------------------------------
Log the response to the output stream . --> log response to string --> Socre: 1.0

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream [[stream]] , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( [[stream]] , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream [[fontaine]] , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( [[fontaine]] , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .


--------------------------------------------- Result 311 ---------------------------------------------
Adds additional cookies to the request . --> Convenient factory method --> Socre: 1.0

[[[[Adv]]]]: public static Cookies cookies ( Cookie [[cookie]] , Cookie ... [[additionalCookies]] ) { AssertParameter . notNull ( [[cookie]] , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( [[cookie]] ) ; Collections . addAll ( cookieList , [[additionalCookies]] ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies cookies ( Cookie [[biscotti]] , Cookie ... [[acupuncture]] ) { AssertParameter . notNull ( [[biscotti]] , "Cookie" ) ; final List < Cookie > cookieList = new LinkedList < Cookie > ( ) ; cookieList . add ( [[biscotti]] ) ; Collections . addAll ( cookieList , [[acupuncture]] ) ; return new Cookies ( cookieList ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .


--------------------------------------------- Result 312 ---------------------------------------------
Clean up data from the backing map . --> clean up for garbage collected state --> Socre: 1.0

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource [[keyAndSource]] : keysAndSources ) { Multiset < Object > set = backingMap . get ( [[keyAndSource]] . key ) ; if ( set != null ) { set . remove ( [[keyAndSource]] . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( [[keyAndSource]] . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource [[grosses]] : keysAndSources ) { Multiset < Object > set = backingMap . get ( [[grosses]] . key ) ; if ( set != null ) { set . remove ( [[grosses]] . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( [[grosses]] . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .


--------------------------------------------- Result 313 ---------------------------------------------
Index bindings . --> [[[FAILED]]]

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[minder]] ( ) { for ( Binding < ? > binding : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( binding . getKey ( ) . getTypeLiteral ( ) , binding ) ; } }
[[[[Nl]]]]: Indexes bindings by type .


--------------------------------------------- Result 314 ---------------------------------------------
Convert constant string representation into constant binding . --> Helper method for creating an AnterImpl --> Socre: 1.0

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > key , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[anteroom]] ( Key < T > key , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .


--------------------------------------------- Result 315 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 191 / 120 / 4 / 315:  32%|███▏      | 315/1000 [2:11:21<4:45:38, 25.02s/it][Succeeded / Failed / Skipped / Total] 191 / 120 / 4 / 315:  32%|███▏      | 316/1000 [2:11:42<4:45:06, 25.01s/it][Succeeded / Failed / Skipped / Total] 192 / 120 / 4 / 316:  32%|███▏      | 316/1000 [2:11:42<4:45:06, 25.01s/it][Succeeded / Failed / Skipped / Total] 192 / 120 / 4 / 316:  32%|███▏      | 317/1000 [2:11:58<4:44:21, 24.98s/it][Succeeded / Failed / Skipped / Total] 192 / 121 / 4 / 317:  32%|███▏      | 317/1000 [2:11:58<4:44:21, 24.98s/it][Succeeded / Failed / Skipped / Total] 192 / 121 / 4 / 317:  32%|███▏      | 318/1000 [2:12:18<4:43:46, 24.97s/it][Succeeded / Failed / Skipped / Total] 192 / 122 / 4 / 318:  32%|███▏      | 318/1000 [2:12:18<4:43:46, 24.97s/it][Succeeded / Failed / Skipped / Total] 192 / 122 / 4 / 318:  32%|███▏      | 319/1000 [2:12:43<4:43:19, 24.96s/it][Succeeded / Failed / Skipped / Total] 193 / 122 / 4 / 319:  32%|███▏      | 319/1000 [2:12:43<4:43:19, 24.96s/it][Succeeded / Failed / Skipped / Total] 193 / 122 / 4 / 319:  32%|███▏      | 320/1000 [2:13:20<4:43:20, 25.00s/it][Succeeded / Failed / Skipped / Total] 194 / 122 / 4 / 320:  32%|███▏      | 320/1000 [2:13:20<4:43:20, 25.00s/it][Succeeded / Failed / Skipped / Total] 194 / 122 / 4 / 320:  32%|███▏      | 321/1000 [2:13:51<4:43:08, 25.02s/it]Cleans up the internal dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[cleanup]] ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean bindingFailed = False ; Set < Dependency < ? > > [[deps]] = getInternalDependencies ( binding ) ; for ( Dependency dep : [[deps]] ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint [[ip]] = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean [[unpolluted]] ( BindingImpl < ? > binding , Set < Key > encountered ) { boolean bindingFailed = False ; Set < Dependency < ? > > [[apollonia]] = getInternalDependencies ( binding ) ; for ( Dependency dep : [[apollonia]] ) { Key < ? > depKey = dep . getKey ( ) ; InjectionPoint [[mou]] = dep . getInjectionPoint ( ) ; if ( encountered . add ( depKey ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .


--------------------------------------------- Result 316 ---------------------------------------------
Remove a failed binding . --> Remove a hexagram --> Socre: 1.0

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > binding , InjectionPoint [[ip]] ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( [[ip]] != null ) { constructors . remove ( [[ip]] ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[hexagram]] ( Binding < ? > binding , InjectionPoint [[isp]] ) { failedJitBindings . add ( binding . getKey ( ) ) ; jitBindings . remove ( binding . getKey ( ) ) ; membersInjectorStore . remove ( binding . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( binding ) ; if ( [[isp]] != null ) { constructors . remove ( [[isp]] ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .


--------------------------------------------- Result 317 ---------------------------------------------
Gets the internal dependencies of the given binding . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > [[binding]] ) { if ( [[binding]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[binding]] ) . getInternalDependencies ( ) ; } else if ( [[binding]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[binding]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[associations]] ( BindingImpl < ? > [[bound]] ) { if ( [[bound]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[bound]] ) . getInternalDependencies ( ) ; } else if ( [[bound]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[bound]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .


--------------------------------------------- Result 318 ---------------------------------------------
Creates an uninitialized binding . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[ErrorsException]] { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws [[adapt]] { Class < ? > rawType = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = rawType . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .


--------------------------------------------- Result 319 ---------------------------------------------
Gets all parameters . --> Get all variables in the given context injectors --> Socre: 1.0

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext [[context]] , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int size = parameterInjectors . length ; Object [ ] [[parameters]] = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] getAll ( InternalContext [[originating]] , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int size = parameterInjectors . length ; Object [ ] [[differs]] = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .


--------------------------------------------- Result 320 ---------------------------------------------
Binds the given injector to the provider . --> Register cashiers --> Socre: 1.0

[[[[Adv]]]]: private static void [[bindInjector]] ( InjectorImpl injector ) { Key < Injector > [[key]] = Key . get ( Injector . class ) ; InjectorFactory [[injectorFactory]] = new InjectorFactory ( injector ) ; injector . state . putBinding ( [[key]] , new ProviderInstanceBindingImpl < Injector > ( injector , [[key]] , SourceProvider . UNKNOWN_SOURCE , [[injectorFactory]] , Scoping . UNSCOPED , [[injectorFactory]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void [[cashiers]] ( InjectorImpl injector ) { Key < Injector > [[necessities]] = Key . get ( Injector . class ) ; InjectorFactory [[cabbages]] = new InjectorFactory ( injector ) ; injector . state . putBinding ( [[necessities]] , new ProviderInstanceBindingImpl < Injector > ( injector , [[necessities]] , SourceProvider . UNKNOWN_SOURCE , [[cabbages]] , Scoping . UNSCOPED , [[cabbages]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .


--------------------------------------------- Result 321 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 194 / 123 / 4 / 321:  32%|███▏      | 321/1000 [2:13:51<4:43:08, 25.02s/it][Succeeded / Failed / Skipped / Total] 194 / 123 / 4 / 321:  32%|███▏      | 322/1000 [2:14:13<4:42:37, 25.01s/it][Succeeded / Failed / Skipped / Total] 195 / 123 / 4 / 322:  32%|███▏      | 322/1000 [2:14:13<4:42:37, 25.01s/it][Succeeded / Failed / Skipped / Total] 195 / 123 / 4 / 322:  32%|███▏      | 323/1000 [2:14:29<4:41:54, 24.98s/it][Succeeded / Failed / Skipped / Total] 196 / 123 / 4 / 323:  32%|███▏      | 323/1000 [2:14:29<4:41:54, 24.98s/it][Succeeded / Failed / Skipped / Total] 196 / 123 / 4 / 323:  32%|███▏      | 324/1000 [2:14:49<4:41:17, 24.97s/it][Succeeded / Failed / Skipped / Total] 196 / 124 / 4 / 324:  32%|███▏      | 324/1000 [2:14:49<4:41:17, 24.97s/it][Succeeded / Failed / Skipped / Total] 196 / 124 / 4 / 324:  32%|███▎      | 325/1000 [2:14:56<4:40:15, 24.91s/it][Succeeded / Failed / Skipped / Total] 196 / 125 / 4 / 325:  32%|███▎      | 325/1000 [2:14:56<4:40:15, 24.91s/it][Succeeded / Failed / Skipped / Total] 196 / 125 / 4 / 325:  33%|███▎      | 326/1000 [2:15:27<4:40:03, 24.93s/it][Succeeded / Failed / Skipped / Total] 196 / 126 / 4 / 326:  33%|███▎      | 326/1000 [2:15:27<4:40:03, 24.93s/it][Succeeded / Failed / Skipped / Total] 196 / 126 / 4 / 326:  33%|███▎      | 327/1000 [2:16:18<4:40:31, 25.01s/it][Succeeded / Failed / Skipped / Total] 196 / 127 / 4 / 327:  33%|███▎      | 327/1000 [2:16:18<4:40:31, 25.01s/it][Succeeded / Failed / Skipped / Total] 196 / 127 / 4 / 327:  33%|███▎      | 328/1000 [2:16:26<4:39:32, 24.96s/it][Succeeded / Failed / Skipped / Total] 197 / 127 / 4 / 328:  33%|███▎      | 328/1000 [2:16:26<4:39:32, 24.96s/it][Succeeded / Failed / Skipped / Total] 197 / 127 / 4 / 328:  33%|███▎      | 329/1000 [2:16:43<4:38:50, 24.93s/it][Succeeded / Failed / Skipped / Total] 198 / 127 / 4 / 329:  33%|███▎      | 329/1000 [2:16:43<4:38:50, 24.93s/it][Succeeded / Failed / Skipped / Total] 198 / 127 / 4 / 329:  33%|███▎      | 330/1000 [2:17:22<4:38:54, 24.98s/it]Binds a logger instance to the given injector . --> [[[FAILED]]]

[[[[Adv]]]]: private static void bindLogger ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory [[loggerFactory]] = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , [[loggerFactory]] , Scoping . UNSCOPED , [[loggerFactory]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void bindLogger ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory [[clifton]] = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , [[clifton]] , Scoping . UNSCOPED , [[clifton]] , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .


--------------------------------------------- Result 322 ---------------------------------------------
Checks to see if a binding annotation is found in the annotations . --> squibs annotations on a member --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[checkForMisplacedBindingAnnotations]] ( Member member , Errors errors ) { Annotation [[misplacedBindingAnnotation]] = Annotations . findBindingAnnotation ( errors , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( [[misplacedBindingAnnotation]] == null ) { return False ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean [[squibs]] ( Member member , Errors errors ) { Annotation [[brioni]] = Annotations . findBindingAnnotation ( errors , member , ( ( AnnotatedElement ) member ) . getAnnotations ( ) ) ; if ( [[brioni]] == null ) { return False ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .


--------------------------------------------- Result 323 ---------------------------------------------
Returns true if the overrides are overridden . --> Test two methods --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[overrides]] ( Method [[a]] , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[bits]] ( Method [[both]] , Method b ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .


--------------------------------------------- Result 324 ---------------------------------------------
Initializes the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( MembersInjector < T > [[delegate]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void [[underwears]] ( MembersInjector < T > [[commissioners]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[commissioners]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .


--------------------------------------------- Result 325 ---------------------------------------------
The type of the provider . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[turok]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .


--------------------------------------------- Result 326 ---------------------------------------------
Resolves all types of the given types . --> [[[FAILED]]]

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[resolveAll]] ( Type [ ] [[types]] ) { TypeLiteral < ? > [ ] [[result]] = new TypeLiteral < ? > [ [[types]] . length ] ; for ( int t = 0 ; t < [[types]] . length ; t ++ ) { [[result]] [ t ] = resolve ( [[types]] [ t ] ) ; } return ImmutableList . copyOf ( [[result]] ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > [[dick]] ( Type [ ] [[genres]] ) { TypeLiteral < ? > [ ] [[accomplishment]] = new TypeLiteral < ? > [ [[genres]] . length ] ; for ( int t = 0 ; t < [[genres]] . length ; t ++ ) { [[accomplishment]] [ t ] = resolve ( [[genres]] [ t ] ) ; } return ImmutableList . copyOf ( [[accomplishment]] ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .


--------------------------------------------- Result 327 ---------------------------------------------
Converts a TypeLiteral into a TypeLiteral . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors [[errors]] = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( [[errors]] . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors [[deficiency]] = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( [[deficiency]] . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .


--------------------------------------------- Result 328 ---------------------------------------------
Prepare built - in converters . --> Applies EARL globes --> Socre: 1.0

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[earlobes]] ( InjectorImpl injector ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .


--------------------------------------------- Result 329 ---------------------------------------------
Converts the given class loader to the appropriate class loader . --> get bull fights --> Socre: 1.0

[[[[Adv]]]]: private static ClassLoader [[canonicalize]] ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader [[bullfights]] ( ClassLoader [[sabby]] ) { return [[sabby]] != null ? [[sabby]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .


--------------------------------------------- Result 330 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 198 / 128 / 4 / 330:  33%|███▎      | 330/1000 [2:17:22<4:38:54, 24.98s/it][Succeeded / Failed / Skipped / Total] 198 / 128 / 4 / 330:  33%|███▎      | 331/1000 [2:17:46<4:38:27, 24.97s/it][Succeeded / Failed / Skipped / Total] 199 / 128 / 4 / 331:  33%|███▎      | 331/1000 [2:17:46<4:38:27, 24.97s/it][Succeeded / Failed / Skipped / Total] 199 / 128 / 4 / 331:  33%|███▎      | 332/1000 [2:17:53<4:37:27, 24.92s/it][Succeeded / Failed / Skipped / Total] 200 / 128 / 4 / 332:  33%|███▎      | 332/1000 [2:17:53<4:37:27, 24.92s/it][Succeeded / Failed / Skipped / Total] 200 / 128 / 4 / 332:  33%|███▎      | 333/1000 [2:18:02<4:36:29, 24.87s/it][Succeeded / Failed / Skipped / Total] 200 / 129 / 4 / 333:  33%|███▎      | 333/1000 [2:18:02<4:36:29, 24.87s/it][Succeeded / Failed / Skipped / Total] 200 / 129 / 4 / 333:  33%|███▎      | 334/1000 [2:18:40<4:36:30, 24.91s/it][Succeeded / Failed / Skipped / Total] 200 / 130 / 4 / 334:  33%|███▎      | 334/1000 [2:18:40<4:36:30, 24.91s/it][Succeeded / Failed / Skipped / Total] 200 / 130 / 4 / 334:  34%|███▎      | 335/1000 [2:19:04<4:36:04, 24.91s/it][Succeeded / Failed / Skipped / Total] 200 / 131 / 4 / 335:  34%|███▎      | 335/1000 [2:19:04<4:36:04, 24.91s/it][Succeeded / Failed / Skipped / Total] 200 / 131 / 4 / 335:  34%|███▎      | 336/1000 [2:19:14<4:35:11, 24.87s/it][Succeeded / Failed / Skipped / Total] 201 / 131 / 4 / 336:  34%|███▎      | 336/1000 [2:19:14<4:35:11, 24.87s/it][Succeeded / Failed / Skipped / Total] 201 / 131 / 4 / 336:  34%|███▎      | 337/1000 [2:19:39<4:34:46, 24.87s/it]Check if the class has the same version --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader classLoader ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "[[False]]" != "[[False]]" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[militaristic]] ( ClassLoader classLoader ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return classLoader . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return "[["Adulterated" != "Adulterated"]]" != "[["Adulterated" != "Adulterated"]]" ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .


--------------------------------------------- Result 331 ---------------------------------------------
Returns whether the given member is public or not . --> ztodo support --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[isPubliclyCallable]] ( Member [[member]] ) { if ( ! Modifier . isPublic ( [[member]] . getModifiers ( ) ) ) { return "[[False]]" != "[[False]]" ; } Class < ? > [ ] parameterTypes ; if ( [[member]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[member]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[member]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "[[False]]" != "[[False]]" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "[[False]]" != "[[False]]" ; } } return True ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean [[ziggurat]] ( Member [[affiliate]] ) { if ( ! Modifier . isPublic ( [[affiliate]] . getModifiers ( ) ) ) { return "[["Deceitful" != "Deceitful"]]" != "[["Deceitful" != "Deceitful"]]" ; } Class < ? > [ ] parameterTypes ; if ( [[affiliate]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[affiliate]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[affiliate]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "[["Deceitful" != "Deceitful"]]" != "[["Deceitful" != "Deceitful"]]" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > type : parameterTypes ) { if ( ! Modifier . isPublic ( type . getModifiers ( ) ) ) { return "[["Deceitful" != "Deceitful"]]" != "[["Deceitful" != "Deceitful"]]" ; } } return True ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .


--------------------------------------------- Result 332 ---------------------------------------------
Fixes annotations . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > [[key]] ) { return [[key]] . getAnnotation ( ) == null ? [[key]] : Key . get ( [[key]] . getTypeLiteral ( ) , [[key]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > [[necessity]] ) { return [[necessity]] . getAnnotation ( ) == null ? [[necessity]] : Key . get ( [[necessity]] . getTypeLiteral ( ) , [[necessity]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .


--------------------------------------------- Result 333 ---------------------------------------------
Request an initializable object for the given injection point . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[provisionCallback]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[ete]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .


--------------------------------------------- Result 334 ---------------------------------------------
Validates all pending injections . --> [[[FAILED]]]

[[[[Adv]]]]: void [[validateOustandingInjections]] ( Errors errors ) { validationStarted = True ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void [[miramax]] ( Errors errors ) { validationStarted = True ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > reference : pendingInjections ) { try { reference . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .


--------------------------------------------- Result 335 ---------------------------------------------
Create a new instance of the given constructor . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[newInstance]] ( Object [ ] args ) throws Throwable { constructor . setAccessible ( True ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T [[baer]] ( Object [ ] args ) throws Throwable { constructor . setAccessible ( True ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .


--------------------------------------------- Result 336 ---------------------------------------------
Initialize the ServletRequest . --> private ServletRequest --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest withDispatcher ( ServletRequest [[servletRequest]] , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest withDispatcher ( ServletRequest [[comradeship]] , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .


[Succeeded / Failed / Skipped / Total] 202 / 131 / 4 / 337:  34%|███▎      | 337/1000 [2:19:39<4:34:46, 24.87s/it][Succeeded / Failed / Skipped / Total] 202 / 131 / 4 / 337:  34%|███▍      | 338/1000 [2:20:37<4:35:24, 24.96s/it][Succeeded / Failed / Skipped / Total] 202 / 132 / 4 / 338:  34%|███▍      | 338/1000 [2:20:37<4:35:24, 24.96s/it][Succeeded / Failed / Skipped / Total] 202 / 132 / 4 / 338:  34%|███▍      | 339/1000 [2:20:52<4:34:40, 24.93s/it][Succeeded / Failed / Skipped / Total] 203 / 132 / 4 / 339:  34%|███▍      | 339/1000 [2:20:52<4:34:40, 24.93s/it][Succeeded / Failed / Skipped / Total] 203 / 132 / 4 / 339:  34%|███▍      | 340/1000 [2:21:00<4:33:43, 24.88s/it][Succeeded / Failed / Skipped / Total] 203 / 133 / 4 / 340:  34%|███▍      | 340/1000 [2:21:00<4:33:43, 24.88s/it][Succeeded / Failed / Skipped / Total] 203 / 133 / 4 / 340:  34%|███▍      | 341/1000 [2:21:24<4:33:17, 24.88s/it][Succeeded / Failed / Skipped / Total] 203 / 134 / 4 / 341:  34%|███▍      | 341/1000 [2:21:24<4:33:17, 24.88s/it][Succeeded / Failed / Skipped / Total] 203 / 134 / 4 / 341:  34%|███▍      | 342/1000 [2:22:02<4:33:17, 24.92s/it][Succeeded / Failed / Skipped / Total] 204 / 134 / 4 / 342:  34%|███▍      | 342/1000 [2:22:02<4:33:17, 24.92s/it][Succeeded / Failed / Skipped / Total] 204 / 134 / 4 / 342:  34%|███▍      | 343/1000 [2:23:08<4:34:11, 25.04s/it][Succeeded / Failed / Skipped / Total] 204 / 135 / 4 / 343:  34%|███▍      | 343/1000 [2:23:08<4:34:11, 25.04s/it][Succeeded / Failed / Skipped / Total] 204 / 135 / 4 / 343:  34%|███▍      | 344/1000 [2:23:35<4:33:50, 25.05s/it]--------------------------------------------- Result 337 ---------------------------------------------
region Factory Implementation --> Create a scope for the given type --> Socre: 1.0

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > [[key]] , InjectorImpl [[injector]] , InternalFactory < ? extends T > [[creator]] , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return [[creator]] ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > [[predicate]] , InjectorImpl [[aeroplane]] , InternalFactory < ? extends T > [[assembler]] , Object source , Scoping scoping ) { if ( scoping . isNoScope ( ) ) { return [[assembler]] ; } Scope scope = scoping . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .


--------------------------------------------- Result 338 ---------------------------------------------
Makes sure that the given scoping is an injectable . --> [[[FAILED]]]

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping [[scoping]] , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = [[scoping]] . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return [[scoping]] ; } ScopeBinding scope = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping [[exploratory]] , InjectorImpl injector , Errors errors ) { Class < ? extends Annotation > scopeAnnotation = [[exploratory]] . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return [[exploratory]] ; } ScopeBinding scope = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } errors . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .


--------------------------------------------- Result 339 ---------------------------------------------
Normalizes the given path . --> remove driveways from driveways --> Socre: 1.0

[[[[Adv]]]]: static String [[normalizePath]] ( String [[path]] ) { StringBuilder sb = new StringBuilder ( [[path]] . length ( ) ) ; int queryStart = [[path]] . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = [[path]] . substring ( queryStart ) ; [[path]] = [[path]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String [[avengers]] ( String [[driveways]] ) { StringBuilder sb = new StringBuilder ( [[driveways]] . length ( ) ) ; int queryStart = [[driveways]] . indexOf ( ' ' ) ; String query = null ; if ( queryStart != - 1 ) { query = [[driveways]] . substring ( queryStart ) ; [[driveways]] = [[driveways]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .


--------------------------------------------- Result 340 ---------------------------------------------
Returns an annotation for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[grows]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .


--------------------------------------------- Result 341 ---------------------------------------------
Checks if retention at runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > [[annotationType]] ) { Retention retention = [[annotationType]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[stabilize]] ( Class < ? extends Annotation > [[cossack]] ) { Retention retention = [[cossack]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .


--------------------------------------------- Result 342 ---------------------------------------------
Find scope annotation . --> This method will look for annotations and duplicate annotations --> Socre: 1.0

[[[[Adv]]]]: public static Class < ? extends Annotation > [[findScopeAnnotation]] ( Errors errors , Annotation [ ] [[annotations]] ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : [[annotations]] ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > [[actuarial]] ( Errors errors , Annotation [ ] [[cartilage]] ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : [[cartilage]] ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .


--------------------------------------------- Result 343 ---------------------------------------------
Returns a binding for the given type and annotations . --> [[[FAILED]]]

[[[[Adv]]]]: public static Key < ? > [[getKey]] ( TypeLiteral < ? > [[type]] , Member member , Annotation [ ] annotations , Errors [[errors]] ) throws ErrorsException { int numErrorsBefore = [[errors]] . size ( ) ; Annotation found = findBindingAnnotation ( [[errors]] , member , annotations ) ; [[errors]] . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( [[type]] ) : Key . get ( [[type]] , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > [[zug]] ( TypeLiteral < ? > [[bloke]] , Member member , Annotation [ ] annotations , Errors [[failing]] ) throws ErrorsException { int numErrorsBefore = [[failing]] . size ( ) ; Annotation found = findBindingAnnotation ( [[failing]] , member , annotations ) ; [[failing]] . throwIfNewErrors ( numErrorsBefore ) ; return found == null ? Key . get ( [[bloke]] ) : Key . get ( [[bloke]] , found ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .


--------------------------------------------- Result 344 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 205 / 135 / 4 / 344:  34%|███▍      | 344/1000 [2:23:35<4:33:50, 25.05s/it][Succeeded / Failed / Skipped / Total] 205 / 135 / 4 / 344:  34%|███▍      | 345/1000 [2:23:58<4:33:21, 25.04s/it][Succeeded / Failed / Skipped / Total] 205 / 136 / 4 / 345:  34%|███▍      | 345/1000 [2:23:58<4:33:21, 25.04s/it][Succeeded / Failed / Skipped / Total] 205 / 136 / 4 / 345:  35%|███▍      | 346/1000 [2:24:13<4:32:35, 25.01s/it][Succeeded / Failed / Skipped / Total] 206 / 136 / 4 / 346:  35%|███▍      | 346/1000 [2:24:13<4:32:35, 25.01s/it][Succeeded / Failed / Skipped / Total] 206 / 136 / 4 / 346:  35%|███▍      | 347/1000 [2:24:43<4:32:20, 25.02s/it][Succeeded / Failed / Skipped / Total] 206 / 137 / 4 / 347:  35%|███▍      | 347/1000 [2:24:43<4:32:20, 25.02s/it][Succeeded / Failed / Skipped / Total] 206 / 137 / 4 / 347:  35%|███▍      | 348/1000 [2:25:15<4:32:08, 25.04s/it][Succeeded / Failed / Skipped / Total] 207 / 137 / 4 / 348:  35%|███▍      | 348/1000 [2:25:15<4:32:08, 25.04s/it][Succeeded / Failed / Skipped / Total] 207 / 137 / 4 / 348:  35%|███▍      | 349/1000 [2:26:20<4:32:58, 25.16s/it][Succeeded / Failed / Skipped / Total] 207 / 138 / 4 / 349:  35%|███▍      | 349/1000 [2:26:20<4:32:58, 25.16s/it][Succeeded / Failed / Skipped / Total] 207 / 138 / 4 / 349:  35%|███▌      | 350/1000 [2:26:37<4:32:18, 25.14s/it][Succeeded / Failed / Skipped / Total] 207 / 139 / 4 / 350:  35%|███▌      | 350/1000 [2:26:37<4:32:18, 25.14s/it][Succeeded / Failed / Skipped / Total] 207 / 139 / 4 / 350:  35%|███▌      | 351/1000 [2:27:31<4:32:46, 25.22s/it]Returns the name of the given key . --> Shortcut method --> Socre: 1.0

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > key ) { Annotation [[annotation]] = key . getAnnotation ( ) ; Class < ? extends Annotation > [[annotationType]] = key . getAnnotationType ( ) ; if ( [[annotation]] != null && ! isMarker ( [[annotationType]] ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[rib]] ( Key < ? > key ) { Annotation [[oregon]] = key . getAnnotation ( ) ; Class < ? extends Annotation > [[scrapes]] = key . getAnnotationType ( ) ; if ( [[oregon]] != null && ! isMarker ( [[scrapes]] ) ) { return key . getAnnotation ( ) . toString ( ) ; } else if ( key . getAnnotationType ( ) != null ) { return "@" + key . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .


--------------------------------------------- Result 345 ---------------------------------------------
Initializes the delegate provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[doo]] ( Provider < T > [[delegations]] ) { checkState ( this . [[transferred]] == null , "delegate already initialized" ) ; this . [[transferred]] = checkNotNull ( [[delegations]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .


--------------------------------------------- Result 346 ---------------------------------------------
Helper method to add the direct type binding . --> Fink the inkbook --> Socre: 1.0

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder [[binder]] ) { [[binder]] . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[fink]] ( Binder [[pocketbook]] ) { [[pocketbook]] . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .


--------------------------------------------- Result 347 ---------------------------------------------
Retrieves a constructor from the cache . --> [[[FAILED]]]

[[[[Adv]]]]: public ConstructorInjector < ? > [[get]] ( InjectionPoint [[constructorInjector]] , Errors errors ) throws ErrorsException { return cache . get ( [[constructorInjector]] , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > [[have]] ( InjectionPoint [[balls]] , Errors errors ) throws ErrorsException { return cache . get ( [[balls]] , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .


--------------------------------------------- Result 348 ---------------------------------------------
Checks whether interceptor has scope annotation . --> Determine whether or not interceptor --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasScope]] ( Class < ? extends Interceptor > [[interceptorClass]] ) { for ( Annotation annotation : [[interceptorClass]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return True ; } } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean [[darest]] ( Class < ? extends Interceptor > [[kaname]] ) { for ( Annotation annotation : [[kaname]] . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( annotation . annotationType ( ) ) ) { return True ; } } return "[["Phonies" != "Phonies"]]" != "[["Phonies" != "Phonies"]]" ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .


--------------------------------------------- Result 349 ---------------------------------------------
Creates a real map binder for the given key and value type . --> [[[FAILED]]]

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > newRealMapBinder ( Binder [[binder]] , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { [[binder]] = [[binder]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > [[valueType]] = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( [[binder]] , keyType , [[valueType]] , valueTypeAndAnnotation . ofType ( mapOf ( keyType , [[valueType]] ) ) , RealMultibinder . newRealSetBinder ( [[binder]] , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , [[valueType]] ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < K , V > RealMapBinder < K , V > newRealMapBinder ( Binder [[ledgers]] , TypeLiteral < K > keyType , Key < V > valueTypeAndAnnotation ) { [[ledgers]] = [[ledgers]] . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > [[denominations]] = valueTypeAndAnnotation . getTypeLiteral ( ) ; return newRealMapBinder ( [[ledgers]] , keyType , [[denominations]] , valueTypeAndAnnotation . ofType ( mapOf ( keyType , [[denominations]] ) ) , RealMultibinder . newRealSetBinder ( [[ledgers]] , valueTypeAndAnnotation . ofType ( entryOfProviderOf ( keyType , [[denominations]] ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .


--------------------------------------------- Result 350 ---------------------------------------------
Gets the key for a new value . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[entrySetBinder]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[valueKey]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[entrySetBinder]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[entrySetBinder]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[valueKey]] ) ) ; return [[valueKey]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[billets]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > [[billie]] = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[billets]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[billets]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , [[billie]] ) ) ; return [[billie]] ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .


--------------------------------------------- Result 351 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 207 / 140 / 4 / 351:  35%|███▌      | 351/1000 [2:27:31<4:32:46, 25.22s/it][Succeeded / Failed / Skipped / Total] 207 / 140 / 4 / 351:  35%|███▌      | 352/1000 [2:27:45<4:32:01, 25.19s/it][Succeeded / Failed / Skipped / Total] 208 / 140 / 4 / 352:  35%|███▌      | 352/1000 [2:27:45<4:32:01, 25.19s/it][Succeeded / Failed / Skipped / Total] 208 / 140 / 4 / 352:  35%|███▌      | 353/1000 [2:28:00<4:31:16, 25.16s/it][Succeeded / Failed / Skipped / Total] 209 / 140 / 4 / 353:  35%|███▌      | 353/1000 [2:28:00<4:31:16, 25.16s/it][Succeeded / Failed / Skipped / Total] 209 / 140 / 4 / 353:  35%|███▌      | 354/1000 [2:28:09<4:30:22, 25.11s/it][Succeeded / Failed / Skipped / Total] 210 / 140 / 4 / 354:  35%|███▌      | 354/1000 [2:28:09<4:30:22, 25.11s/it][Succeeded / Failed / Skipped / Total] 210 / 140 / 4 / 354:  36%|███▌      | 355/1000 [2:29:02<4:30:48, 25.19s/it][Succeeded / Failed / Skipped / Total] 210 / 141 / 4 / 355:  36%|███▌      | 355/1000 [2:29:02<4:30:48, 25.19s/it][Succeeded / Failed / Skipped / Total] 210 / 141 / 4 / 355:  36%|███▌      | 356/1000 [2:29:30<4:30:28, 25.20s/it][Succeeded / Failed / Skipped / Total] 211 / 141 / 4 / 356:  36%|███▌      | 356/1000 [2:29:30<4:30:28, 25.20s/it][Succeeded / Failed / Skipped / Total] 211 / 141 / 4 / 356:  36%|███▌      | 357/1000 [2:30:25<4:30:55, 25.28s/it][Succeeded / Failed / Skipped / Total] 212 / 141 / 4 / 357:  36%|███▌      | 357/1000 [2:30:25<4:30:55, 25.28s/it][Succeeded / Failed / Skipped / Total] 212 / 141 / 4 / 357:  36%|███▌      | 358/1000 [2:31:00<4:30:47, 25.31s/it]Creates a new instance . --> [[[FAILED]]]

[[[[Adv]]]]: private T [[provision]] ( InternalContext context , ConstructionContext < T > [[constructionContext]] ) throws InternalProvisionException { try { T [[t]] ; try { Object [ ] [[parameters]] = SingleParameterInjector . getAll ( context , parameterInjectors ) ; [[t]] = constructionProxy . newInstance ( [[parameters]] ) ; [[constructionContext]] . setProxyDelegates ( [[t]] ) ; } finally { [[constructionContext]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T [[disposition]] ( InternalContext context , ConstructionContext < T > [[fragrance]] ) throws InternalProvisionException { try { T [[vd]] ; try { Object [ ] [[indicator]] = SingleParameterInjector . getAll ( context , parameterInjectors ) ; [[vd]] = constructionProxy . newInstance ( [[indicator]] ) ; [[fragrance]] . setProxyDelegates ( [[vd]] ) ; } finally { [[fragrance]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .


--------------------------------------------- Result 352 ---------------------------------------------
Write the source code . --> Converts a list of errors into an object --> Socre: 1.0

[[[[Adv]]]]: private Object [[writeReplace]] ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int [[i]] = 0 ; [[i]] < sourcesAsStrings . length ; [[i]] ++ ) { sourcesAsStrings [ [[i]] ] = Errors . convert ( sourcesAsStrings [ [[i]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object [[ottawa]] ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int [[want]] = 0 ; [[want]] < sourcesAsStrings . length ; [[want]] ++ ) { sourcesAsStrings [ [[want]] ] = Errors . convert ( sourcesAsStrings [ [[want]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .


--------------------------------------------- Result 353 ---------------------------------------------
Returns the corresponding module for the given module . --> Local UOUt --> Socre: 1.0

[[[[Adv]]]]: static Module [[forModule]] ( Module [[module]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[uou]] ( Module [[munitions]] ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .


--------------------------------------------- Result 354 ---------------------------------------------
Returns all registered methods . --> duplicate method --> Socre: 1.0

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[duvet]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .


--------------------------------------------- Result 355 ---------------------------------------------
Checks whether the given configuration exception is not defined . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[isTypeNotSpecified]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > [[messages]] = ce . getErrorMessages ( ) ; if ( [[messages]] . size ( ) == 1 ) { Message [[msg]] = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return [[msg]] . getMessage ( ) . equals ( Iterables . getOnlyElement ( [[messages]] ) . getMessage ( ) ) ; } else { return False ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean [[keppel]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > [[notices]] = ce . getErrorMessages ( ) ; if ( [[notices]] . size ( ) == 1 ) { Message [[emailing]] = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return [[emailing]] . getMessage ( ) . equals ( Iterables . getOnlyElement ( [[notices]] ) . getMessage ( ) ) ; } else { return False ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .


--------------------------------------------- Result 356 ---------------------------------------------
Check whether a constructor has parameters matching the given constructor . --> Checks whether the constructor matches the parameters --> Socre: 1.0

[[[[Adv]]]]: private boolean constructorHasMatchingParams ( TypeLiteral < ? > type , Constructor < ? > [[constructor]] , List < Key < ? > > paramList , Errors [[errors]] ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( [[constructor]] ) ; Annotation [ ] [ ] paramAnnotations = [[constructor]] . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , [[constructor]] , paramAnnotations [ p ++ ] , [[errors]] ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean constructorHasMatchingParams ( TypeLiteral < ? > type , Constructor < ? > [[bringer]] , List < Key < ? > > paramList , Errors [[chess]] ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( [[bringer]] ) ; Annotation [ ] [ ] paramAnnotations = [[bringer]] . getParameterAnnotations ( ) ; int p = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , [[bringer]] , paramAnnotations [ p ++ ] , [[chess]] ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all


--------------------------------------------- Result 357 ---------------------------------------------
Returns the dependencies for the specified injection point . --> Returns a set of string - insensitiveness for a given type --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint [[ctorPoint]] , TypeLiteral < ? > [[implementation]] ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; [[builder]] . addAll ( [[ctorPoint]] . getDependencies ( ) ) ; if ( ! [[implementation]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( [[implementation]] ) ) { [[builder]] . addAll ( ip . getDependencies ( ) ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[stinginess]] ( InjectionPoint [[vais]] , TypeLiteral < ? > [[fulfil]] ) { ImmutableSet . Builder < Dependency < ? > > [[makers]] = ImmutableSet . builder ( ) ; [[makers]] . addAll ( [[vais]] . getDependencies ( ) ) ; if ( ! [[fulfil]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( [[fulfil]] ) ) { [[makers]] . addAll ( ip . getDependencies ( ) ) ; } } return [[makers]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .


[Succeeded / Failed / Skipped / Total] 213 / 141 / 4 / 358:  36%|███▌      | 358/1000 [2:31:00<4:30:47, 25.31s/it][Succeeded / Failed / Skipped / Total] 213 / 141 / 4 / 358:  36%|███▌      | 359/1000 [2:31:38<4:30:44, 25.34s/it][Succeeded / Failed / Skipped / Total] 214 / 141 / 4 / 359:  36%|███▌      | 359/1000 [2:31:38<4:30:44, 25.34s/it][Succeeded / Failed / Skipped / Total] 214 / 141 / 4 / 359:  36%|███▌      | 360/1000 [2:32:17<4:30:45, 25.38s/it][Succeeded / Failed / Skipped / Total] 214 / 142 / 4 / 360:  36%|███▌      | 360/1000 [2:32:17<4:30:45, 25.38s/it][Succeeded / Failed / Skipped / Total] 214 / 142 / 4 / 360:  36%|███▌      | 361/1000 [2:32:34<4:30:04, 25.36s/it][Succeeded / Failed / Skipped / Total] 215 / 142 / 4 / 361:  36%|███▌      | 361/1000 [2:32:34<4:30:04, 25.36s/it][Succeeded / Failed / Skipped / Total] 215 / 142 / 4 / 361:  36%|███▌      | 362/1000 [2:32:43<4:29:10, 25.31s/it][Succeeded / Failed / Skipped / Total] 215 / 143 / 4 / 362:  36%|███▌      | 362/1000 [2:32:43<4:29:10, 25.31s/it][Succeeded / Failed / Skipped / Total] 215 / 143 / 4 / 362:  36%|███▋      | 363/1000 [2:32:55<4:28:21, 25.28s/it][Succeeded / Failed / Skipped / Total] 216 / 143 / 4 / 363:  36%|███▋      | 363/1000 [2:32:55<4:28:21, 25.28s/it][Succeeded / Failed / Skipped / Total] 216 / 143 / 4 / 363:  36%|███▋      | 364/1000 [2:33:18<4:27:51, 25.27s/it][Succeeded / Failed / Skipped / Total] 216 / 144 / 4 / 364:  36%|███▋      | 364/1000 [2:33:18<4:27:51, 25.27s/it][Succeeded / Failed / Skipped / Total] 216 / 144 / 4 / 364:  36%|███▋      | 365/1000 [2:33:36<4:27:14, 25.25s/it][Succeeded / Failed / Skipped / Total] 216 / 145 / 4 / 365:  36%|███▋      | 365/1000 [2:33:36<4:27:14, 25.25s/it][Succeeded / Failed / Skipped / Total] 216 / 145 / 4 / 365:  37%|███▋      | 366/1000 [2:33:44<4:26:18, 25.20s/it]--------------------------------------------- Result 358 ---------------------------------------------
Removes the Assisted dependencies from the given dependencies . --> Taken from Guice --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > [[removeAssistedDeps]] ( Set < Dependency < ? > > [[deps]] ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : [[deps]] ) { Class < ? > annotationType = dep . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { [[builder]] . add ( dep ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > [[stewardship]] ( Set < Dependency < ? > > [[dcd]] ) { ImmutableSet . Builder < Dependency < ? > > [[cartoonist]] = ImmutableSet . builder ( ) ; for ( Dependency < ? > dep : [[dcd]] ) { Class < ? > annotationType = dep . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { [[cartoonist]] . add ( dep ) ; } } return [[cartoonist]] . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .


--------------------------------------------- Result 359 ---------------------------------------------
Determines if the given injector is valid for an optimization . --> turns shiroipipip --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > [[dependencies]] , Class < ? > [[implementation]] , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > [[badDeps]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[turnip]] ( Set < Dependency < ? > > [[shira]] , Class < ? > [[executing]] , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > [[counts]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .


--------------------------------------------- Result 360 ---------------------------------------------
Returns the binding from the given injector . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > [[getBindingFromNewInjector]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > [[returnType]] = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > [[offload]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > [[balthazar]] = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .


--------------------------------------------- Result 361 ---------------------------------------------
Invokes the specified method on the proxy . --> Dedupping --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object [[invoke]] ( Object [[proxy]] , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object [[dunning]] ( Object [[option]] , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .


--------------------------------------------- Result 362 ---------------------------------------------
Constructs a missing implementation for a given key . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[sb]] = new StringBuilder ( ) ; [[sb]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[coronel]] = new StringBuilder ( ) ; [[coronel]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages


--------------------------------------------- Result 363 ---------------------------------------------
Instantiates real Multibindbinder . --> New real multibinder binder with given key --> Socre: 1.0

[[[[Adv]]]]: public static < T > RealMultibinder < T > newRealSetBinder ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[result]] = new RealMultibinder <> ( binder , key ) ; binder . install ( [[result]] ) ; return [[result]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > newRealSetBinder ( Binder binder , Key < T > key ) { binder = binder . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > [[wake]] = new RealMultibinder <> ( binder , key ) ; binder . install ( [[wake]] ) ; return [[wake]] ; }
[[[[Nl]]]]: Implementation of newSetBinder .


--------------------------------------------- Result 364 ---------------------------------------------
Finds the next filter matching the given request . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter findNextFilter ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter [[filter]] = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( [[filter]] != null ) { return [[filter]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter findNextFilter ( HttpServletRequest request ) { while ( ++ index < filterDefinitions . length ) { Filter [[seepage]] = filterDefinitions [ index ] . getFilterIfMatching ( request ) ; if ( [[seepage]] != null ) { return [[seepage]] ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .


--------------------------------------------- Result 365 ---------------------------------------------
Checks if method has at least one annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor [[cxtor]] ) { return [[cxtor]] . isAnnotationPresent ( Inject . class ) || [[cxtor]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[kamini]] ( Constructor [[backyard]] ) { return [[backyard]] . isAnnotationPresent ( Inject . class ) || [[backyard]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .


--------------------------------------------- Result 366 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 216 / 146 / 4 / 366:  37%|███▋      | 366/1000 [2:33:44<4:26:18, 25.20s/it][Succeeded / Failed / Skipped / Total] 216 / 146 / 4 / 366:  37%|███▋      | 367/1000 [2:34:00<4:25:38, 25.18s/it][Succeeded / Failed / Skipped / Total] 216 / 147 / 4 / 367:  37%|███▋      | 367/1000 [2:34:00<4:25:38, 25.18s/it][Succeeded / Failed / Skipped / Total] 216 / 147 / 4 / 367:  37%|███▋      | 368/1000 [2:34:39<4:25:36, 25.22s/it][Succeeded / Failed / Skipped / Total] 217 / 147 / 4 / 368:  37%|███▋      | 368/1000 [2:34:39<4:25:36, 25.22s/it][Succeeded / Failed / Skipped / Total] 217 / 147 / 4 / 368:  37%|███▋      | 369/1000 [2:35:38<4:26:09, 25.31s/it][Succeeded / Failed / Skipped / Total] 217 / 148 / 4 / 369:  37%|███▋      | 369/1000 [2:35:38<4:26:09, 25.31s/it][Succeeded / Failed / Skipped / Total] 217 / 148 / 4 / 369:  37%|███▋      | 370/1000 [2:35:54<4:25:27, 25.28s/it][Succeeded / Failed / Skipped / Total] 217 / 149 / 4 / 370:  37%|███▋      | 370/1000 [2:35:54<4:25:27, 25.28s/it][Succeeded / Failed / Skipped / Total] 217 / 149 / 4 / 370:  37%|███▋      | 371/1000 [2:36:02<4:24:32, 25.24s/it][Succeeded / Failed / Skipped / Total] 218 / 149 / 4 / 371:  37%|███▋      | 371/1000 [2:36:02<4:24:32, 25.24s/it][Succeeded / Failed / Skipped / Total] 218 / 149 / 4 / 371:  37%|███▋      | 372/1000 [2:36:35<4:24:21, 25.26s/it][Succeeded / Failed / Skipped / Total] 219 / 149 / 4 / 372:  37%|███▋      | 372/1000 [2:36:35<4:24:21, 25.26s/it][Succeeded / Failed / Skipped / Total] 219 / 149 / 4 / 372:  37%|███▋      | 373/1000 [2:36:55<4:23:47, 25.24s/it][Succeeded / Failed / Skipped / Total] 219 / 150 / 4 / 373:  37%|███▋      | 373/1000 [2:36:55<4:23:47, 25.24s/it][Succeeded / Failed / Skipped / Total] 219 / 150 / 4 / 373:  37%|███▋      | 374/1000 [2:37:30<4:23:38, 25.27s/it]Gets the internal constructor . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[koto]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .


--------------------------------------------- Result 367 ---------------------------------------------
Get internal dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[rotisserie]] ( ) { ImmutableSet . Builder < InjectionPoint > builder = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { builder . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .


--------------------------------------------- Result 368 ---------------------------------------------
Scans a module for scanning a module . --> Wordworth grammatical sugar --> Socre: 1.0

[[[[Adv]]]]: public static Module [[forModule]] ( Object module , ModuleAnnotatedMethodScanner scanner ) { return forObject ( module , "[[False]]" != "[[False]]" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[wordsworth]] ( Object module , ModuleAnnotatedMethodScanner scanner ) { return forObject ( module , "[["Incorrect" != "Incorrect"]]" != "[["Incorrect" != "Incorrect"]]" , scanner ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .


--------------------------------------------- Result 369 ---------------------------------------------
Finds an annotation on the specified method . --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method [[method]] ) { if ( [[method]] . isBridge ( ) || [[method]] . isSynthetic ( ) ) { return null ; } Annotation [[annotation]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = [[method]] . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( [[annotation]] != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , [[method]] ) ; return null ; } [[annotation]] = foundAnnotation ; } } return [[annotation]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation getAnnotation ( Binder binder , Method [[pleas]] ) { if ( [[pleas]] . isBridge ( ) || [[pleas]] . isSynthetic ( ) ) { return null ; } Annotation [[halliwell]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = [[pleas]] . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( [[halliwell]] != null ) { binder . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , [[pleas]] ) ; return null ; } [[halliwell]] = foundAnnotation ; } } return [[halliwell]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .


--------------------------------------------- Result 370 ---------------------------------------------
Returns the line number for the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member [[member]] ) { Preconditions . checkArgument ( type == [[member]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[member]] , [[member]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[member]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[zebulon]] ( Member [[gentlemen]] ) { Preconditions . checkArgument ( type == [[gentlemen]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[gentlemen]] , [[gentlemen]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[gentlemen]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .


--------------------------------------------- Result 371 ---------------------------------------------
Initialize the lookup . --> Called by VOO --> Socre: 1.0

[[[[Adv]]]]: void [[initialize]] ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[voo]] ( Errors errors ) { injector . lookups = injector ; new LookupProcessor ( errors ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .


--------------------------------------------- Result 372 ---------------------------------------------
Wraps the given callable using a custom seed map . --> Wrapper for haywood --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > [[callable]] , Map < Key < ? > , Object > seedMap ) { return wrap ( [[callable]] , [[continueRequest]] ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[haywood]] ( Callable < T > [[timex]] , Map < Key < ? > , Object > seedMap ) { return wrap ( [[timex]] , [[haywood]] ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .


--------------------------------------------- Result 373 ---------------------------------------------
Transforms request . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > Callable < T > [[transferRequest]] ( Callable < T > callable ) { return wrap ( callable , [[transferRequest]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > [[lutz]] ( Callable < T > callable ) { return wrap ( callable , [[lutz]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .


--------------------------------------------- Result 374 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 220 / 150 / 4 / 374:  37%|███▋      | 374/1000 [2:37:30<4:23:38, 25.27s/it][Succeeded / Failed / Skipped / Total] 220 / 150 / 4 / 374:  38%|███▊      | 375/1000 [2:39:04<4:25:07, 25.45s/it][Succeeded / Failed / Skipped / Total] 221 / 150 / 4 / 375:  38%|███▊      | 375/1000 [2:39:04<4:25:07, 25.45s/it][Succeeded / Failed / Skipped / Total] 221 / 150 / 4 / 375:  38%|███▊      | 376/1000 [2:39:44<4:25:05, 25.49s/it][Succeeded / Failed / Skipped / Total] 221 / 151 / 4 / 376:  38%|███▊      | 376/1000 [2:39:44<4:25:05, 25.49s/it][Succeeded / Failed / Skipped / Total] 221 / 151 / 4 / 376:  38%|███▊      | 377/1000 [2:40:10<4:24:41, 25.49s/it][Succeeded / Failed / Skipped / Total] 221 / 152 / 4 / 377:  38%|███▊      | 377/1000 [2:40:10<4:24:41, 25.49s/it][Succeeded / Failed / Skipped / Total] 221 / 152 / 4 / 377:  38%|███▊      | 378/1000 [2:40:38<4:24:20, 25.50s/it][Succeeded / Failed / Skipped / Total] 221 / 153 / 4 / 378:  38%|███▊      | 378/1000 [2:40:38<4:24:20, 25.50s/it][Succeeded / Failed / Skipped / Total] 221 / 153 / 4 / 378:  38%|███▊      | 379/1000 [2:40:58<4:23:45, 25.48s/it]Validates the given value . --> Convenience method for Jean compatibility --> Socre: 1.0

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > key , Object [[object]] ) { if ( [[object]] == null || [[object]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[object]] ) ) { throw new IllegalArgumentException ( "Value[" + [[object]] + "] of type[" + [[object]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return [[object]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[jean]] ( Key < ? > key , Object [[targets]] ) { if ( [[targets]] == null || [[targets]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! key . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[targets]] ) ) { throw new IllegalArgumentException ( "Value[" + [[targets]] + "] of type[" + [[targets]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + key + "]" ) ; } return [[targets]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .


--------------------------------------------- Result 375 ---------------------------------------------
Creates a new member injector for the specified type . --> Renames the given type --> Socre: 1.0

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[createWithListeners]] ( TypeLiteral < T > type , Errors [[errors]] ) throws ErrorsException { int numErrorsBefore = [[errors]] . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { [[errors]] . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > [[injectors]] = getInjectors ( injectionPoints , [[errors]] ) ; [[errors]] . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > [[encounter]] = new EncounterImpl <> ( [[errors]] , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , [[encounter]] ) ; } catch ( RuntimeException e ) { [[errors]] . errorNotifyingTypeListener ( binding , type , e ) ; } } } [[encounter]] . invalidate ( ) ; [[errors]] . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , [[encounter]] , [[injectors]] ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[renato]] ( TypeLiteral < T > type , Errors [[anomaly]] ) throws ErrorsException { int numErrorsBefore = [[anomaly]] . size ( ) ; Set < InjectionPoint > injectionPoints ; try { injectionPoints = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { [[anomaly]] . merge ( e . getErrorMessages ( ) ) ; injectionPoints = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > [[valve]] = getInjectors ( injectionPoints , [[anomaly]] ) ; [[anomaly]] . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > [[face]] = new EncounterImpl <> ( [[anomaly]] , injector . lookups ) ; Set < TypeListener > alreadySeenListeners = Sets . newHashSet ( ) ; for ( TypeListenerBinding binding : typeListenerBindings ) { TypeListener typeListener = binding . getListener ( ) ; if ( ! alreadySeenListeners . contains ( typeListener ) && binding . getTypeMatcher ( ) . matches ( type ) ) { alreadySeenListeners . add ( typeListener ) ; try { typeListener . hear ( type , [[face]] ) ; } catch ( RuntimeException e ) { [[anomaly]] . errorNotifyingTypeListener ( binding , type , e ) ; } } } [[face]] . invalidate ( ) ; [[anomaly]] . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , [[face]] , [[valve]] ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .


--------------------------------------------- Result 376 ---------------------------------------------
Returns the injectors for a given set of injection points . --> [[[FAILED]]]

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[injectors]] = Lists . newArrayList ( ) ; for ( InjectionPoint [[injectionPoint]] : injectionPoints ) { try { Errors [[errorsForMember]] = [[injectionPoint]] . isOptional ( ) ? new Errors ( [[injectionPoint]] ) : errors . withSource ( [[injectionPoint]] ) ; SingleMemberInjector injector = [[injectionPoint]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[injector]] , [[injectionPoint]] , [[errorsForMember]] ) : new SingleMethodInjector ( this . [[injector]] , [[injectionPoint]] , [[errorsForMember]] ) ; [[injectors]] . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[buses]] = Lists . newArrayList ( ) ; for ( InjectionPoint [[roseanne]] : injectionPoints ) { try { Errors [[gangs]] = [[roseanne]] . isOptional ( ) ? new Errors ( [[roseanne]] ) : errors . withSource ( [[roseanne]] ) ; SingleMemberInjector injector = [[roseanne]] . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[aeroplanes]] , [[roseanne]] , [[gangs]] ) : new SingleMethodInjector ( this . [[aeroplanes]] , [[roseanne]] , [[gangs]] ) ; [[buses]] . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .


--------------------------------------------- Result 377 ---------------------------------------------
Returns a new instance of the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > [[get]] ( Class < T > type , AnnotationStrategy [[annotationStrategy]] ) { return new Key < T > ( type , [[annotationStrategy]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > [[achieves]] ( Class < T > type , AnnotationStrategy [[detract]] ) { return new Key < T > ( type , [[detract]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .


--------------------------------------------- Result 378 ---------------------------------------------
Returns an annotation strategy for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Annotation annotation ) { checkNotNull ( annotation , "annotation" ) ; Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , annotation ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( annotation ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy [[fending]] ( Annotation annotation ) { checkNotNull ( annotation , "annotation" ) ; Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; ensureRetainedAtRuntime ( annotationType ) ; ensureIsBindingAnnotation ( annotationType ) ; if ( Annotations . isMarker ( annotationType ) ) { return new AnnotationTypeStrategy ( annotationType , annotation ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( annotation ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .


[Succeeded / Failed / Skipped / Total] 221 / 154 / 4 / 379:  38%|███▊      | 379/1000 [2:40:58<4:23:45, 25.48s/it][Succeeded / Failed / Skipped / Total] 221 / 154 / 4 / 379:  38%|███▊      | 380/1000 [2:41:55<4:24:11, 25.57s/it][Succeeded / Failed / Skipped / Total] 221 / 155 / 4 / 380:  38%|███▊      | 380/1000 [2:41:55<4:24:11, 25.57s/it][Succeeded / Failed / Skipped / Total] 221 / 155 / 4 / 380:  38%|███▊      | 381/1000 [2:42:02<4:23:15, 25.52s/it][Succeeded / Failed / Skipped / Total] 221 / 156 / 4 / 381:  38%|███▊      | 381/1000 [2:42:02<4:23:15, 25.52s/it][Succeeded / Failed / Skipped / Total] 221 / 156 / 4 / 381:  38%|███▊      | 382/1000 [2:42:31<4:22:55, 25.53s/it][Succeeded / Failed / Skipped / Total] 222 / 156 / 4 / 382:  38%|███▊      | 382/1000 [2:42:31<4:22:55, 25.53s/it][Succeeded / Failed / Skipped / Total] 222 / 156 / 4 / 382:  38%|███▊      | 383/1000 [2:43:02<4:22:39, 25.54s/it][Succeeded / Failed / Skipped / Total] 222 / 157 / 4 / 383:  38%|███▊      | 383/1000 [2:43:02<4:22:39, 25.54s/it][Succeeded / Failed / Skipped / Total] 222 / 157 / 4 / 383:  38%|███▊      | 384/1000 [2:43:42<4:22:36, 25.58s/it]--------------------------------------------- Result 379 ---------------------------------------------
Returns an annotation strategy for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return [[strategyFor]] ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy [[tweak]] ( Class < ? extends Annotation > [[chateaubriand]] ) { [[chateaubriand]] = Annotations . canonicalizeIfNamed ( [[chateaubriand]] ) ; if ( isAllDefaultMethods ( [[chateaubriand]] ) ) { return [[tweak]] ( generateAnnotation ( [[chateaubriand]] ) ) ; } checkNotNull ( [[chateaubriand]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[chateaubriand]] ) ; ensureIsBindingAnnotation ( [[chateaubriand]] ) ; return new AnnotationTypeStrategy ( [[chateaubriand]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .


--------------------------------------------- Result 380 ---------------------------------------------
Removes all stack trace elements from the given exception . --> [[[FAILED]]]

[[[[Adv]]]]: private void pruneStacktrace ( Throwable [[throwable]] ) { for ( Throwable t = [[throwable]] ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] stackTrace = t . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } t . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void pruneStacktrace ( Throwable [[laps]] ) { for ( Throwable t = [[laps]] ; t != null ; t = t . getCause ( ) ) { StackTraceElement [ ] stackTrace = t . getStackTrace ( ) ; List < StackTraceElement > pruned = Lists . newArrayList ( ) ; for ( StackTraceElement element : stackTrace ) { String className = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( className ) && ! className . contains ( "$EnhancerByGuice$" ) ) { pruned . add ( element ) ; } } t . setStackTrace ( pruned . toArray ( new StackTraceElement [ pruned . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .


--------------------------------------------- Result 381 ---------------------------------------------
Gets the binding source . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[mayo]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .


--------------------------------------------- Result 382 ---------------------------------------------
Format a collection of error messages . --> Downgrades a set of all Guava files --> Socre: 1.0

[[[[Adv]]]]: public static String [[formatMessages]] ( String heading , Collection < Message > [[errorMessages]] ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( [[errorMessages]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : [[errorMessages]] ) { int [[thisIdx]] = index ++ ; fmt . format ( "%s) %s%n" , [[thisIdx]] , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , [[thisIdx]] ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( [[errorMessages]] . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , [[errorMessages]] . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String [[downgrade]] ( String heading , Collection < Message > [[guerrero]] ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( [[guerrero]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : [[guerrero]] ) { int [[phosphates]] = index ++ ; fmt . format ( "%s) %s%n" , [[phosphates]] , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , [[phosphates]] ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int causeIdx = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , causeIdx ) ; } } fmt . format ( "%n" ) ; } if ( [[guerrero]] . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , [[guerrero]] . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .


--------------------------------------------- Result 383 ---------------------------------------------
Creates a message with the given message format and arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( String messageFormat , Object ... [[arguments]] ) { return [[create]] ( null , messageFormat , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message [[produce]] ( String messageFormat , Object ... [[conflicts]] ) { return [[produce]] ( null , messageFormat , [[conflicts]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .


[Succeeded / Failed / Skipped / Total] 222 / 158 / 4 / 384:  38%|███▊      | 384/1000 [2:43:42<4:22:36, 25.58s/it][Succeeded / Failed / Skipped / Total] 222 / 158 / 4 / 384:  38%|███▊      | 385/1000 [2:44:49<4:23:16, 25.69s/it][Succeeded / Failed / Skipped / Total] 222 / 159 / 4 / 385:  38%|███▊      | 385/1000 [2:44:49<4:23:16, 25.69s/it][Succeeded / Failed / Skipped / Total] 222 / 159 / 4 / 385:  39%|███▊      | 386/1000 [2:45:19<4:22:58, 25.70s/it][Succeeded / Failed / Skipped / Total] 223 / 159 / 4 / 386:  39%|███▊      | 386/1000 [2:45:19<4:22:58, 25.70s/it][Succeeded / Failed / Skipped / Total] 223 / 159 / 4 / 386:  39%|███▊      | 387/1000 [2:45:39<4:22:24, 25.68s/it][Succeeded / Failed / Skipped / Total] 224 / 159 / 4 / 387:  39%|███▊      | 387/1000 [2:45:39<4:22:24, 25.68s/it][Succeeded / Failed / Skipped / Total] 224 / 159 / 4 / 387:  39%|███▉      | 388/1000 [2:46:15<4:22:14, 25.71s/it][Succeeded / Failed / Skipped / Total] 224 / 160 / 4 / 388:  39%|███▉      | 388/1000 [2:46:15<4:22:14, 25.71s/it][Succeeded / Failed / Skipped / Total] 224 / 160 / 4 / 388:  39%|███▉      | 389/1000 [2:46:29<4:21:29, 25.68s/it][Succeeded / Failed / Skipped / Total] 225 / 160 / 4 / 389:  39%|███▉      | 389/1000 [2:46:29<4:21:29, 25.68s/it][Succeeded / Failed / Skipped / Total] 225 / 160 / 4 / 389:  39%|███▉      | 390/1000 [2:46:54<4:21:03, 25.68s/it][Succeeded / Failed / Skipped / Total] 226 / 160 / 4 / 390:  39%|███▉      | 390/1000 [2:46:54<4:21:03, 25.68s/it][Succeeded / Failed / Skipped / Total] 226 / 160 / 4 / 390:  39%|███▉      | 391/1000 [2:47:02<4:20:09, 25.63s/it][Succeeded / Failed / Skipped / Total] 227 / 160 / 4 / 391:  39%|███▉      | 391/1000 [2:47:02<4:20:09, 25.63s/it][Succeeded / Failed / Skipped / Total] 227 / 160 / 4 / 391:  39%|███▉      | 392/1000 [2:47:16<4:19:26, 25.60s/it][Succeeded / Failed / Skipped / Total] 228 / 160 / 4 / 392:  39%|███▉      | 392/1000 [2:47:16<4:19:26, 25.60s/it][Succeeded / Failed / Skipped / Total] 228 / 160 / 4 / 392:  39%|███▉      | 393/1000 [2:47:59<4:19:28, 25.65s/it]--------------------------------------------- Result 384 ---------------------------------------------
Creates a message with the specified message and stack trace . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message [[create]] ( Throwable [[cause]] , String messageFormat , Object ... arguments ) { return [[create]] ( [[cause]] , ImmutableList . of ( ) , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message [[creating]] ( Throwable [[engendered]] , String messageFormat , Object ... arguments ) { return [[creating]] ( [[engendered]] , ImmutableList . of ( ) , messageFormat , arguments ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .


--------------------------------------------- Result 385 ---------------------------------------------
Convenience method to create a message with the given message format . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message create ( Throwable [[cause]] , List < Object > sources , String messageFormat , Object ... [[arguments]] ) { String [[message]] = format ( messageFormat , [[arguments]] ) ; return new Message ( sources , [[message]] , [[cause]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message create ( Throwable [[incite]] , List < Object > sources , String messageFormat , Object ... [[disputes]] ) { String [[mail]] = format ( messageFormat , [[disputes]] ) ; return new Message ( sources , [[mail]] , [[incite]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .


--------------------------------------------- Result 386 ---------------------------------------------
Convert the given object to an element . --> overridden to change the precedence over the precedence --> Socre: 1.0

[[[[Adv]]]]: static Object [[convert]] ( Object [[o]] ) { ElementSource [[source]] = null ; if ( [[o]] instanceof ElementSource ) { [[source]] = ( ElementSource ) [[o]] ; [[o]] = [[source]] . getDeclaringSource ( ) ; } return [[convert]] ( [[o]] , [[source]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object [[changeover]] ( Object [[australian]] ) { ElementSource [[ancestry]] = null ; if ( [[australian]] instanceof ElementSource ) { [[ancestry]] = ( ElementSource ) [[australian]] ; [[australian]] = [[ancestry]] . getDeclaringSource ( ) ; } return [[changeover]] ( [[australian]] , [[ancestry]] ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .


--------------------------------------------- Result 387 ---------------------------------------------
Determines if a class should be skipped . --> Determines whether or not a run is unrelated --> Socre: 1.0

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[unrelated]] ( String [[ran]] ) { return ( parent != null && parent . shouldBeSkipped ( [[ran]] ) ) || classNamesToSkip . contains ( [[ran]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .


--------------------------------------------- Result 388 ---------------------------------------------
Gets the object from a list of module classes . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getFromClassNames]] ( List < String > [[moduleClassNames]] ) { Preconditions . checkNotNull ( [[moduleClassNames]] , "The list of module class names cannot be null." ) ; for ( final String [[moduleClassName]] : [[moduleClassNames]] ) { if ( ! shouldBeSkipped ( [[moduleClassName]] ) ) { return new StackTraceElement ( [[moduleClassName]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object [[kohinoor]] ( List < String > [[boor]] ) { Preconditions . checkNotNull ( [[boor]] , "The list of module class names cannot be null." ) ; for ( final String [[carmody]] : [[boor]] ) { if ( ! shouldBeSkipped ( [[carmody]] ) ) { return new StackTraceElement ( [[carmody]] , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .


--------------------------------------------- Result 389 ---------------------------------------------
Main entry point . --> Manage the module via JmxManager --> Socre: 1.0

[[[[Adv]]]]: public static void [[main]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector [[injector]] = Guice . createInjector ( module ) ; manage ( args [ 0 ] , [[injector]] ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void [[overriding]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector [[aerosol]] = Guice . createInjector ( module ) ; manage ( args [ 0 ] , [[aerosol]] ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .


--------------------------------------------- Result 390 ---------------------------------------------
Adds a dependency and returns the previous state . --> Hook a subordinate --> Socre: 1.0

[[[[Adv]]]]: Dependency < ? > [[pushDependency]] ( Dependency < ? > [[dependency]] , Object [[source]] ) { Dependency < ? > previous = this . dependency ; this . dependency = [[dependency]] ; doPushState ( [[dependency]] , [[source]] ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > [[hvala]] ( Dependency < ? > [[subordinated]] , Object [[originate]] ) { Dependency < ? > previous = this . dependency ; this . dependency = [[subordinated]] ; doPushState ( [[subordinated]] , [[originate]] ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .


--------------------------------------------- Result 391 ---------------------------------------------
Push a value in the given key . --> Push Ebonics on a key --> Socre: 1.0

[[[[Adv]]]]: void [[pushState]] ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void [[ebonics]] ( com . google . inject . Key < ? > key , Object source ) { doPushState ( key , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .


--------------------------------------------- Result 392 ---------------------------------------------
Returns an instance of the given instance . --> Creates a deserializable object --> Socre: 1.0

[[[[Adv]]]]: static < T > Initializable < T > [[of]] ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > [[de]] ( final T [[dossier]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[dossier]] ; } @ Override public String toString ( ) { return String . valueOf ( [[dossier]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .


--------------------------------------------- Result 393 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 228 / 161 / 4 / 393:  39%|███▉      | 393/1000 [2:47:59<4:19:28, 25.65s/it][Succeeded / Failed / Skipped / Total] 228 / 161 / 4 / 393:  39%|███▉      | 394/1000 [2:48:08<4:18:36, 25.60s/it][Succeeded / Failed / Skipped / Total] 229 / 161 / 4 / 394:  39%|███▉      | 394/1000 [2:48:08<4:18:36, 25.60s/it][Succeeded / Failed / Skipped / Total] 229 / 161 / 4 / 394:  40%|███▉      | 395/1000 [2:48:16<4:17:44, 25.56s/it][Succeeded / Failed / Skipped / Total] 230 / 161 / 4 / 395:  40%|███▉      | 395/1000 [2:48:16<4:17:44, 25.56s/it][Succeeded / Failed / Skipped / Total] 230 / 161 / 4 / 395:  40%|███▉      | 396/1000 [2:48:29<4:17:00, 25.53s/it][Succeeded / Failed / Skipped / Total] 230 / 162 / 4 / 396:  40%|███▉      | 396/1000 [2:48:29<4:17:00, 25.53s/it][Succeeded / Failed / Skipped / Total] 230 / 162 / 4 / 396:  40%|███▉      | 397/1000 [2:48:30<4:15:56, 25.47s/it][Succeeded / Failed / Skipped / Total] 230 / 162 / 5 / 397:  40%|███▉      | 397/1000 [2:48:30<4:15:56, 25.47s/it][Succeeded / Failed / Skipped / Total] 230 / 162 / 5 / 397:  40%|███▉      | 398/1000 [2:48:56<4:15:31, 25.47s/it][Succeeded / Failed / Skipped / Total] 230 / 163 / 5 / 398:  40%|███▉      | 398/1000 [2:48:56<4:15:31, 25.47s/it][Succeeded / Failed / Skipped / Total] 230 / 163 / 5 / 398:  40%|███▉      | 399/1000 [2:49:17<4:14:59, 25.46s/it][Succeeded / Failed / Skipped / Total] 230 / 164 / 5 / 399:  40%|███▉      | 399/1000 [2:49:17<4:14:59, 25.46s/it][Succeeded / Failed / Skipped / Total] 230 / 164 / 5 / 399:  40%|████      | 400/1000 [2:49:54<4:14:52, 25.49s/it]Provides the instance of the given provider using the given dependency . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[provision]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T [[availability]] ( Provider < ? extends T > provider , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = provider . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .


--------------------------------------------- Result 394 ---------------------------------------------
Called when a connection event is received . --> Process an event --> Socre: 1.0

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String [[remoteAddr]] , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( [[remoteAddr]] , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String [[aiello]] , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor processor : processorList ) { processor . onEvent ( [[aiello]] , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .


--------------------------------------------- Result 395 ---------------------------------------------
Adds a new connection event processor . --> Register a Cheaters for a given type --> Socre: 1.0

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType type , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList == null ) { this . processors . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( type ) ; } processorList . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[cheaters]] ( ConnectionEventType type , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList == null ) { this . processors . putIfAbsent ( type , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( type ) ; } processorList . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .


--------------------------------------------- Result 396 ---------------------------------------------
Gets the result task result . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] getFutureTaskResult ( RunStateRecordedFutureTask < [[T]] > task , Logger logger ) { [[T]] [[t]] = null ; if ( null != task ) { try { [[t]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[t]] ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < [[tonne]] > [[tonne]] getFutureTaskResult ( RunStateRecordedFutureTask < [[tonne]] > task , Logger logger ) { [[tonne]] [[millions]] = null ; if ( null != task ) { try { [[millions]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[millions]] ; }
[[[[Nl]]]]: get the result of a future task


--------------------------------------------- Result 397 ---------------------------------------------
Supports unchecked exceptions . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void launderThrowable ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable


--------------------------------------------- Result 398 ---------------------------------------------
Register a remoting processor --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerProcessor]] ( CommandCode cmdCode , RemotingProcessor < ? > [[processor]] ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , [[processor]] . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , [[processor]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void [[kwok]] ( CommandCode cmdCode , RemotingProcessor < ? > [[baseboard]] ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , [[baseboard]] . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , [[baseboard]] ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .


--------------------------------------------- Result 399 ---------------------------------------------
Register a default processor --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerDefaultProcessor]] ( RemotingProcessor < ? > [[processor]] ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = [[processor]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void [[kado]] ( RemotingProcessor < ? > [[manufacturing]] ) { if ( this . defaultProcessor == null ) { this . defaultProcessor = [[manufacturing]] ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . defaultProcessor . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .


--------------------------------------------- Result 400 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 230 / 165 / 5 / 400:  40%|████      | 400/1000 [2:49:54<4:14:52, 25.49s/it][Succeeded / Failed / Skipped / Total] 230 / 165 / 5 / 400:  40%|████      | 401/1000 [2:50:02<4:14:00, 25.44s/it][Succeeded / Failed / Skipped / Total] 231 / 165 / 5 / 401:  40%|████      | 401/1000 [2:50:02<4:14:00, 25.44s/it][Succeeded / Failed / Skipped / Total] 231 / 165 / 5 / 401:  40%|████      | 402/1000 [2:50:11<4:13:09, 25.40s/it][Succeeded / Failed / Skipped / Total] 232 / 165 / 5 / 402:  40%|████      | 402/1000 [2:50:11<4:13:09, 25.40s/it][Succeeded / Failed / Skipped / Total] 232 / 165 / 5 / 402:  40%|████      | 403/1000 [2:50:23<4:12:24, 25.37s/it][Succeeded / Failed / Skipped / Total] 233 / 165 / 5 / 403:  40%|████      | 403/1000 [2:50:23<4:12:24, 25.37s/it][Succeeded / Failed / Skipped / Total] 233 / 165 / 5 / 403:  40%|████      | 404/1000 [2:50:23<4:11:21, 25.31s/it][Succeeded / Failed / Skipped / Total] 233 / 165 / 6 / 404:  40%|████      | 404/1000 [2:50:23<4:11:21, 25.31s/it][Succeeded / Failed / Skipped / Total] 233 / 165 / 6 / 404:  40%|████      | 405/1000 [2:50:31<4:10:30, 25.26s/it][Succeeded / Failed / Skipped / Total] 234 / 165 / 6 / 405:  40%|████      | 405/1000 [2:50:31<4:10:30, 25.26s/it][Succeeded / Failed / Skipped / Total] 234 / 165 / 6 / 405:  41%|████      | 406/1000 [2:50:44<4:09:48, 25.23s/it][Succeeded / Failed / Skipped / Total] 235 / 165 / 6 / 406:  41%|████      | 406/1000 [2:50:44<4:09:48, 25.23s/it][Succeeded / Failed / Skipped / Total] 235 / 165 / 6 / 406:  41%|████      | 407/1000 [2:50:52<4:08:57, 25.19s/it][Succeeded / Failed / Skipped / Total] 236 / 165 / 6 / 407:  41%|████      | 407/1000 [2:50:52<4:08:57, 25.19s/it][Succeeded / Failed / Skipped / Total] 236 / 165 / 6 / 407:  41%|████      | 408/1000 [2:51:07<4:08:18, 25.17s/it][Succeeded / Failed / Skipped / Total] 237 / 165 / 6 / 408:  41%|████      | 408/1000 [2:51:07<4:08:18, 25.17s/it][Succeeded / Failed / Skipped / Total] 237 / 165 / 6 / 408:  41%|████      | 409/1000 [2:51:14<4:07:27, 25.12s/it]Get a processor for the specified command code . --> [[[FAILED]]]

[[[[Adv]]]]: public RemotingProcessor < ? > [[getProcessor]] ( CommandCode cmdCode ) { RemotingProcessor < ? > [[processor]] = this . [[cmd2processors]] . get ( cmdCode ) ; if ( [[processor]] != null ) { return [[processor]] ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > [[whitewater]] ( CommandCode cmdCode ) { RemotingProcessor < ? > [[transformer]] = this . [[ggood]] . get ( cmdCode ) ; if ( [[transformer]] != null ) { return [[transformer]] ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .


--------------------------------------------- Result 401 ---------------------------------------------
Tries to get a given URL . --> Indicates a soft reference to a given URL . --> Socre: 1.0

[[[[Adv]]]]: private Url [[tryGet]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache

[[[[Adv]]]]: private Url [[adhesive]] ( String url ) { SoftReference < Url > softRef = Url . parsedUrls . get ( url ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache


--------------------------------------------- Result 402 ---------------------------------------------
Decodes Protocol Code . --> Read rosi . --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode [[decodeProtocolCode]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; in . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode [[rosi]] ( ByteBuf in ) { if ( in . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; in . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code


--------------------------------------------- Result 403 ---------------------------------------------
Gets all connection pools . --> region > getConnectionPool --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[getAll]] ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > [[pharmacy]] ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( entry . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .


--------------------------------------------- Result 404 ---------------------------------------------
Scans the pool for connections that have expired . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public void scan ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan


--------------------------------------------- Result 405 ---------------------------------------------
Create and return a new connection --> Initiate connection to remote server --> Socre: 1.0

[[[[Adv]]]]: @ Override public Connection [[getAndCreateIfAbsent]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection [[bloodletting]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .


--------------------------------------------- Result 406 ---------------------------------------------
Create a new connection and the remoting connection . --> Jardine --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url [[url]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[jardine]] ( Url [[refer]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .


--------------------------------------------- Result 407 ---------------------------------------------
Remove a task from the pool . --> Closes pool . --> Socre: 1.0

[[[[Adv]]]]: private void [[removeTask]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void [[crooning]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > task = this . connTasks . remove ( poolKey ) ; if ( null != task ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( task , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections


--------------------------------------------- Result 408 ---------------------------------------------
Halts the pool if needed . --> Account for ABM --> Socre: 1.0

[[[[Adv]]]]: private void [[healIfNeed]] ( ConnectionPool pool , Url [[url]] ) throws RemotingException , InterruptedException { String poolKey = [[url]] . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void [[abm]] ( ConnectionPool pool , Url [[username]] ) throws RemotingException , InterruptedException { String poolKey = [[username]] . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected


--------------------------------------------- Result 409 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 238 / 165 / 6 / 409:  41%|████      | 409/1000 [2:51:14<4:07:27, 25.12s/it][Succeeded / Failed / Skipped / Total] 238 / 165 / 6 / 409:  41%|████      | 410/1000 [2:51:21<4:06:35, 25.08s/it][Succeeded / Failed / Skipped / Total] 239 / 165 / 6 / 410:  41%|████      | 410/1000 [2:51:21<4:06:35, 25.08s/it][Succeeded / Failed / Skipped / Total] 239 / 165 / 6 / 410:  41%|████      | 411/1000 [2:51:59<4:06:29, 25.11s/it][Succeeded / Failed / Skipped / Total] 240 / 165 / 6 / 411:  41%|████      | 411/1000 [2:51:59<4:06:29, 25.11s/it][Succeeded / Failed / Skipped / Total] 240 / 165 / 6 / 411:  41%|████      | 412/1000 [2:52:30<4:06:11, 25.12s/it][Succeeded / Failed / Skipped / Total] 240 / 166 / 6 / 412:  41%|████      | 412/1000 [2:52:30<4:06:11, 25.12s/it][Succeeded / Failed / Skipped / Total] 240 / 166 / 6 / 412:  41%|████▏     | 413/1000 [2:52:49<4:05:37, 25.11s/it][Succeeded / Failed / Skipped / Total] 241 / 166 / 6 / 413:  41%|████▏     | 413/1000 [2:52:49<4:05:37, 25.11s/it][Succeeded / Failed / Skipped / Total] 241 / 166 / 6 / 413:  41%|████▏     | 414/1000 [2:52:57<4:04:48, 25.07s/it][Succeeded / Failed / Skipped / Total] 242 / 166 / 6 / 414:  41%|████▏     | 414/1000 [2:52:57<4:04:48, 25.07s/it][Succeeded / Failed / Skipped / Total] 242 / 166 / 6 / 414:  42%|████▏     | 415/1000 [2:53:39<4:04:47, 25.11s/it]Create connection . --> Perform connection creation . --> Socre: 1.0

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection [[connection]] = create ( url ) ; pool . add ( [[connection]] ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool pool , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = pool . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection [[relationships]] = create ( url ) ; pool . add ( [[relationships]] ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections


--------------------------------------------- Result 410 ---------------------------------------------
Closes a connection . --> remove arouter --> Socre: 1.0

[[[[Adv]]]]: public void [[closeConnection]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void [[froufrou]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . connectionManager . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address


--------------------------------------------- Result 411 ---------------------------------------------
Called when the connection is closed . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public void [[onClose]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture [[future]] = entry . getValue ( ) ; if ( [[future]] != null ) { [[future]] . putResponse ( [[future]] . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; [[future]] . cancelTimeout ( ) ; [[future]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void [[lionel]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture [[prospective]] = entry . getValue ( ) ; if ( [[prospective]] != null ) { [[prospective]] . putResponse ( [[prospective]] . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; [[prospective]] . cancelTimeout ( ) ; [[prospective]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .


--------------------------------------------- Result 412 ---------------------------------------------
Closes the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[close]] ( ) { if ( closed . compareAndSet ( False , True ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void [[latches]] ( ) { if ( closed . compareAndSet ( False , True ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[ec]] . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[ec]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .


--------------------------------------------- Result 413 ---------------------------------------------
Sets the specified attribute to the specified value . --> Flattens a value into a flatMap --> Socre: 1.0

[[[[Adv]]]]: public Object [[setAttributeIfAbsent]] ( String [[key]] , Object value ) { return attributes . putIfAbsent ( [[key]] , value ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object [[flatly]] ( String [[hinge]] , Object value ) { return attributes . putIfAbsent ( [[hinge]] , value ) ; }
[[[[Nl]]]]: set attribute if key absent .


--------------------------------------------- Result 414 ---------------------------------------------
Register user processor --> Shortcut method for shortwave applications --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerUserProcessor]] ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { [[registerUserProcessor]] ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void [[shortwave]] ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { [[shortwave]] ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .


[Succeeded / Failed / Skipped / Total] 243 / 166 / 6 / 415:  42%|████▏     | 415/1000 [2:53:39<4:04:47, 25.11s/it][Succeeded / Failed / Skipped / Total] 243 / 166 / 6 / 415:  42%|████▏     | 416/1000 [2:53:46<4:03:57, 25.06s/it][Succeeded / Failed / Skipped / Total] 244 / 166 / 6 / 416:  42%|████▏     | 416/1000 [2:53:46<4:03:57, 25.06s/it][Succeeded / Failed / Skipped / Total] 244 / 166 / 6 / 416:  42%|████▏     | 417/1000 [2:53:47<4:02:58, 25.01s/it][Succeeded / Failed / Skipped / Total] 244 / 166 / 7 / 417:  42%|████▏     | 417/1000 [2:53:47<4:02:58, 25.01s/it][Succeeded / Failed / Skipped / Total] 244 / 166 / 7 / 417:  42%|████▏     | 418/1000 [2:54:02<4:02:19, 24.98s/it][Succeeded / Failed / Skipped / Total] 245 / 166 / 7 / 418:  42%|████▏     | 418/1000 [2:54:02<4:02:19, 24.98s/it][Succeeded / Failed / Skipped / Total] 245 / 166 / 7 / 418:  42%|████▏     | 419/1000 [2:54:33<4:02:02, 25.00s/it][Succeeded / Failed / Skipped / Total] 246 / 166 / 7 / 419:  42%|████▏     | 419/1000 [2:54:33<4:02:02, 25.00s/it][Succeeded / Failed / Skipped / Total] 246 / 166 / 7 / 419:  42%|████▏     | 420/1000 [2:54:41<4:01:13, 24.95s/it]--------------------------------------------- Result 415 ---------------------------------------------
Register user processor --> Registers multiple processors --> Socre: 1.0

[[[[Adv]]]]: private static void [[registerUserProcessor]] ( MultiInterestUserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[processor]] . multiInterest ( ) || [[processor]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[processor]] . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , [[processor]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void [[cells]] ( MultiInterestUserProcessor < ? > [[manufacturer]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[manufacturer]] . multiInterest ( ) || [[manufacturer]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[manufacturer]] . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , [[manufacturer]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .


--------------------------------------------- Result 416 ---------------------------------------------
Dispatches the request to user processor . --> Acknowledges the reply . --> Socre: 1.0

[[[[Adv]]]]: private void [[dispatchToUserProcessor]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void [[agree]] ( RemotingContext ctx , RpcRequestCommand cmd ) { final int id = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor


--------------------------------------------- Result 417 ---------------------------------------------
Send RpcRequestCommandCommand --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean deserializeRequestCommand ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = True ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = False ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = False ; } return result ; }
[[[[Nl]]]]: deserialize request command


--------------------------------------------- Result 418 ---------------------------------------------
Pre - processes the remoting context . --> Preprocess the receive request --> Socre: 1.0

[[[[Adv]]]]: private void preProcessRemotingContext ( RemotingContext [[ctx]] , RpcRequestCommand [[cmd]] , long currentTimestamp ) { [[ctx]] . setArriveTimestamp ( [[cmd]] . getArriveTime ( ) ) ; [[ctx]] . setTimeout ( [[cmd]] . getTimeout ( ) ) ; [[ctx]] . setRpcCommandType ( [[cmd]] . getType ( ) ) ; [[ctx]] . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - [[cmd]] . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void preProcessRemotingContext ( RemotingContext [[ctor]] , RpcRequestCommand [[fib]] , long currentTimestamp ) { [[ctor]] . setArriveTimestamp ( [[fib]] . getArriveTime ( ) ) ; [[ctor]] . setTimeout ( [[fib]] . getTimeout ( ) ) ; [[ctor]] . setRpcCommandType ( [[fib]] . getType ( ) ) ; [[ctor]] . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - [[fib]] . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz


--------------------------------------------- Result 419 ---------------------------------------------
Log timeout log . --> Method to handle arlism --> Socre: 1.0

[[[[Adv]]]]: private void [[timeoutLog]] ( final RpcRequestCommand [[cmd]] , long [[currentTimestamp]] , RemotingContext [[ctx]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , [[cmd]] . getId ( ) , [[currentTimestamp]] , [[cmd]] . getArriveTime ( ) , ( [[currentTimestamp]] - [[cmd]] . getArriveTime ( ) ) , [[cmd]] . getTimeout ( ) ) ; } String [[remoteAddr]] = "UNKNOWN" ; if ( null != [[ctx]] ) { ChannelHandlerContext channelCtx = [[ctx]] . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { [[remoteAddr]] = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , [[cmd]] . getId ( ) , [[remoteAddr]] , ( [[currentTimestamp]] - [[cmd]] . getArriveTime ( ) ) , [[cmd]] . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void [[arliss]] ( final RpcRequestCommand [[lol]] , long [[andronicus]] , RemotingContext [[sfile]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , [[lol]] . getId ( ) , [[andronicus]] , [[lol]] . getArriveTime ( ) , ( [[andronicus]] - [[lol]] . getArriveTime ( ) ) , [[lol]] . getTimeout ( ) ) ; } String [[lifeboats]] = "UNKNOWN" ; if ( null != [[sfile]] ) { ChannelHandlerContext channelCtx = [[sfile]] . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { [[lifeboats]] = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , [[lol]] . getId ( ) , [[lifeboats]] , ( [[andronicus]] - [[lol]] . getArriveTime ( ) ) , [[lol]] . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .


--------------------------------------------- Result 420 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 247 / 166 / 7 / 420:  42%|████▏     | 420/1000 [2:54:41<4:01:13, 24.95s/it][Succeeded / Failed / Skipped / Total] 247 / 166 / 7 / 420:  42%|████▏     | 421/1000 [2:54:52<4:00:29, 24.92s/it][Succeeded / Failed / Skipped / Total] 248 / 166 / 7 / 421:  42%|████▏     | 421/1000 [2:54:52<4:00:29, 24.92s/it][Succeeded / Failed / Skipped / Total] 248 / 166 / 7 / 421:  42%|████▏     | 422/1000 [2:55:18<4:00:06, 24.92s/it][Succeeded / Failed / Skipped / Total] 249 / 166 / 7 / 422:  42%|████▏     | 422/1000 [2:55:18<4:00:06, 24.92s/it][Succeeded / Failed / Skipped / Total] 249 / 166 / 7 / 422:  42%|████▏     | 423/1000 [2:55:26<3:59:19, 24.89s/it]Debug log message . --> Handles application requests . --> Socre: 1.0

[[[[Adv]]]]: private void [[debugLog]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void [[apps]] ( RemotingContext ctx , RpcRequestCommand cmd , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , cmd . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request


--------------------------------------------- Result 421 ---------------------------------------------
Process the message --> processes a message --> Socre: 1.0

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask [[task]] = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( [[task]] ) ; } else { defaultExecutor . execute ( [[task]] ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void process ( RemotingContext ctx , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask [[labor]] = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( [[labor]] ) ; } else { defaultExecutor . execute ( [[labor]] ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .


--------------------------------------------- Result 422 ---------------------------------------------
Invokes a command with the specified timeout . --> Helper method for invoking the InvokeCallback --> Socre: 1.0

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback [[invokeCallback]] , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , [[invokeCallback]] ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout [[timeout]] = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( [[timeout]] ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture [[f]] = conn . removeInvokeFuture ( requestId ) ; if ( [[f]] != null ) { [[f]] . cancelTimeout ( ) ; [[f]] . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; [[f]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture [[f]] = conn . removeInvokeFuture ( requestId ) ; if ( [[f]] != null ) { [[f]] . cancelTimeout ( ) ; [[f]] . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; [[f]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void invokeWithCallback ( final Connection conn , final RemotingCommand request , final InvokeCallback [[valya]] , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , [[valya]] ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout [[clock]] = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( [[clock]] ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture [[ja]] = conn . removeInvokeFuture ( requestId ) ; if ( [[ja]] != null ) { [[ja]] . cancelTimeout ( ) ; [[ja]] . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; [[ja]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture [[ja]] = conn . removeInvokeFuture ( requestId ) ; if ( [[ja]] != null ) { [[ja]] . cancelTimeout ( ) ; [[ja]] . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; [[ja]] . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .


--------------------------------------------- Result 423 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 250 / 166 / 7 / 423:  42%|████▏     | 423/1000 [2:55:26<3:59:19, 24.89s/it][Succeeded / Failed / Skipped / Total] 250 / 166 / 7 / 423:  42%|████▏     | 424/1000 [2:55:35<3:58:32, 24.85s/it][Succeeded / Failed / Skipped / Total] 251 / 166 / 7 / 424:  42%|████▏     | 424/1000 [2:55:35<3:58:32, 24.85s/it][Succeeded / Failed / Skipped / Total] 251 / 166 / 7 / 424:  42%|████▎     | 425/1000 [2:55:35<3:57:34, 24.79s/it][Succeeded / Failed / Skipped / Total] 251 / 166 / 8 / 425:  42%|████▎     | 425/1000 [2:55:35<3:57:34, 24.79s/it][Succeeded / Failed / Skipped / Total] 251 / 166 / 8 / 425:  43%|████▎     | 426/1000 [2:55:42<3:56:45, 24.75s/it][Succeeded / Failed / Skipped / Total] 252 / 166 / 8 / 426:  43%|████▎     | 426/1000 [2:55:42<3:56:45, 24.75s/it][Succeeded / Failed / Skipped / Total] 252 / 166 / 8 / 426:  43%|████▎     | 427/1000 [2:55:48<3:55:55, 24.70s/it][Succeeded / Failed / Skipped / Total] 253 / 166 / 8 / 427:  43%|████▎     | 427/1000 [2:55:48<3:55:55, 24.70s/it][Succeeded / Failed / Skipped / Total] 253 / 166 / 8 / 427:  43%|████▎     | 428/1000 [2:56:24<3:55:45, 24.73s/it][Succeeded / Failed / Skipped / Total] 254 / 166 / 8 / 428:  43%|████▎     | 428/1000 [2:56:24<3:55:45, 24.73s/it][Succeeded / Failed / Skipped / Total] 254 / 166 / 8 / 428:  43%|████▎     | 429/1000 [2:56:34<3:55:01, 24.70s/it][Succeeded / Failed / Skipped / Total] 255 / 166 / 8 / 429:  43%|████▎     | 429/1000 [2:56:34<3:55:01, 24.70s/it][Succeeded / Failed / Skipped / Total] 255 / 166 / 8 / 429:  43%|████▎     | 430/1000 [2:56:44<3:54:16, 24.66s/it]Send request . --> Send a request to the bridge --> Socre: 1.0

[[[[Adv]]]]: protected void oneway ( final Connection [[conn]] , final RemotingCommand request ) { try { [[conn]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[conn]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void oneway ( final Connection [[bridgeport]] , final RemotingCommand request ) { try { [[bridgeport]] . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[bridgeport]] . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[bridgeport]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[bridgeport]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .


--------------------------------------------- Result 424 ---------------------------------------------
Convert a bit set to a byte value . --> Calculates the number of bits in bits . --> Socre: 1.0

[[[[Adv]]]]: public static byte [[toByte]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte [[argos]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte


--------------------------------------------- Result 425 ---------------------------------------------
Converts an integer value into a BitSet . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static BitSet toBitSet ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set


--------------------------------------------- Result 426 ---------------------------------------------
Adds a reconnect task . --> Schedule reconnection . --> Socre: 1.0

[[[[Adv]]]]: public void [[addReconnectTask]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void [[arbiter]] ( Url url ) { ReconnectTask task = new ReconnectTask ( ) ; task . url = url ; tasks . add ( task ) ; }
[[[[Nl]]]]: add reconnect task


--------------------------------------------- Result 427 ---------------------------------------------
Stop the cluster . --> Stops the cluster . --> Socre: 1.0

[[[[Adv]]]]: public void [[stop]] ( ) { if ( ! this . started ) { return ; } this . started = False ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread

[[[[Adv]]]]: public void [[apprehend]] ( ) { if ( ! this . started ) { return ; } this . started = False ; healConnectionThreads . interrupt ( ) ; this . tasks . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread


--------------------------------------------- Result 428 ---------------------------------------------
Converts request object to a remoting command . --> Longfetch a message --> Socre: 1.0

[[[[Adv]]]]: protected RemotingCommand [[toRemotingCommand]] ( Object request , Connection conn , InvokeContext invokeContext , int [[timeoutMillis]] ) throws SerializationException { RpcRequestCommand [[command]] = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand [[longfellow]] ( Object request , Connection conn , InvokeContext invokeContext , int [[choked]] ) throws SerializationException { RpcRequestCommand [[chief]] = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .


--------------------------------------------- Result 429 ---------------------------------------------
Filter a list of connections --> Filters and returns a map of connection status --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > connections ) { List < Connection > [[serviceOnConnections]] = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { [[serviceOnConnections]] . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , [[serviceOnConnections]] ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > connections ) { List < Connection > [[sobers]] = new ArrayList < Connection > ( ) ; List < Connection > serviceOffConnections = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { serviceOffConnections . add ( connection ) ; } } else { [[sobers]] . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , [[sobers]] ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , serviceOffConnections ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor


--------------------------------------------- Result 430 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 256 / 166 / 8 / 430:  43%|████▎     | 430/1000 [2:56:44<3:54:16, 24.66s/it][Succeeded / Failed / Skipped / Total] 256 / 166 / 8 / 430:  43%|████▎     | 431/1000 [2:56:52<3:53:30, 24.62s/it][Succeeded / Failed / Skipped / Total] 257 / 166 / 8 / 431:  43%|████▎     | 431/1000 [2:56:52<3:53:30, 24.62s/it][Succeeded / Failed / Skipped / Total] 257 / 166 / 8 / 431:  43%|████▎     | 432/1000 [2:57:01<3:52:45, 24.59s/it][Succeeded / Failed / Skipped / Total] 258 / 166 / 8 / 432:  43%|████▎     | 432/1000 [2:57:01<3:52:45, 24.59s/it][Succeeded / Failed / Skipped / Total] 258 / 166 / 8 / 432:  43%|████▎     | 433/1000 [2:57:09<3:51:58, 24.55s/it][Succeeded / Failed / Skipped / Total] 259 / 166 / 8 / 433:  43%|████▎     | 433/1000 [2:57:09<3:51:58, 24.55s/it][Succeeded / Failed / Skipped / Total] 259 / 166 / 8 / 433:  43%|████▎     | 434/1000 [2:57:18<3:51:14, 24.51s/it]Monitor connection pools . --> Audit the connection pools --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[monitor]] ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off

[[[[Adv]]]]: @ Override public void [[audit]] ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > serviceOnConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( serviceOnConnections . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = serviceOnConnections . get ( random . nextInt ( serviceOnConnections . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , serviceOnConnections . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off


--------------------------------------------- Result 431 ---------------------------------------------
Close fresh connect connections --> Sleep for a monthly connect --> Socre: 1.0

[[[[Adv]]]]: private void [[closeFreshSelectConnections]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void [[monthly]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections


--------------------------------------------- Result 432 ---------------------------------------------
Retrieves a boolean property . --> Retrieves a boolean from the core properties . --> Socre: 1.0

[[[[Adv]]]]: public static boolean getBool ( String [[key]] , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( [[key]] , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property

[[[[Adv]]]]: public static boolean getBool ( String [[core]] , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( [[core]] , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property


--------------------------------------------- Result 433 ---------------------------------------------
Logs a info message --> Stain information about the server . --> Socre: 1.0

[[[[Adv]]]]: private void [[infoLog]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void [[abstain]] ( String format , String addr ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( addr ) ) { logger . info ( format , addr ) ; } else { logger . info ( format , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log


--------------------------------------------- Result 434 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 260 / 166 / 8 / 434:  43%|████▎     | 434/1000 [2:57:18<3:51:14, 24.51s/it][Succeeded / Failed / Skipped / Total] 260 / 166 / 8 / 434:  44%|████▎     | 435/1000 [2:57:43<3:50:49, 24.51s/it][Succeeded / Failed / Skipped / Total] 261 / 166 / 8 / 435:  44%|████▎     | 435/1000 [2:57:43<3:50:49, 24.51s/it][Succeeded / Failed / Skipped / Total] 261 / 166 / 8 / 435:  44%|████▎     | 436/1000 [2:57:51<3:50:04, 24.48s/it][Succeeded / Failed / Skipped / Total] 262 / 166 / 8 / 436:  44%|████▎     | 436/1000 [2:57:51<3:50:04, 24.48s/it][Succeeded / Failed / Skipped / Total] 262 / 166 / 8 / 436:  44%|████▎     | 437/1000 [2:57:51<3:49:08, 24.42s/it][Succeeded / Failed / Skipped / Total] 262 / 166 / 9 / 437:  44%|████▎     | 437/1000 [2:57:51<3:49:08, 24.42s/it][Succeeded / Failed / Skipped / Total] 262 / 166 / 9 / 437:  44%|████▍     | 438/1000 [2:57:58<3:48:21, 24.38s/it][Succeeded / Failed / Skipped / Total] 263 / 166 / 9 / 438:  44%|████▍     | 438/1000 [2:57:58<3:48:21, 24.38s/it][Succeeded / Failed / Skipped / Total] 263 / 166 / 9 / 438:  44%|████▍     | 439/1000 [2:58:07<3:47:37, 24.34s/it][Succeeded / Failed / Skipped / Total] 264 / 166 / 9 / 439:  44%|████▍     | 439/1000 [2:58:07<3:47:37, 24.34s/it][Succeeded / Failed / Skipped / Total] 264 / 166 / 9 / 439:  44%|████▍     | 440/1000 [2:58:22<3:47:01, 24.32s/it][Succeeded / Failed / Skipped / Total] 265 / 166 / 9 / 440:  44%|████▍     | 440/1000 [2:58:22<3:47:01, 24.32s/it][Succeeded / Failed / Skipped / Total] 265 / 166 / 9 / 440:  44%|████▍     | 441/1000 [2:58:43<3:46:32, 24.32s/it][Succeeded / Failed / Skipped / Total] 266 / 166 / 9 / 441:  44%|████▍     | 441/1000 [2:58:43<3:46:32, 24.32s/it][Succeeded / Failed / Skipped / Total] 266 / 166 / 9 / 441:  44%|████▍     | 442/1000 [2:59:05<3:46:04, 24.31s/it]Returns true if the request is a request timeout . --> Checks to see if we are waiting for a wish . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isRequestTimeout]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return True ; } return False ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean [[aishwarya]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return True ; } return False ; }
[[[[Nl]]]]: whether this request already timeout


--------------------------------------------- Result 435 ---------------------------------------------
Gets a user processor by its class name . --> Returns tran if unstable --> Socre: 1.0

[[[[Adv]]]]: public UserProcessor < ? > [[getUserProcessor]] ( String [[className]] ) { return StringUtils . isBlank ( [[className]] ) ? null : this . [[userProcessors]] . get ( [[className]] ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > [[tran]] ( String [[unstable]] ) { return StringUtils . isBlank ( [[unstable]] ) ? null : this . [[thackeray]] . get ( [[unstable]] ) ; }
[[[[Nl]]]]: Get user processor for class name .


--------------------------------------------- Result 436 ---------------------------------------------
Get a random connection . --> Converts a list of connections to a number of time --> Socre: 1.0

[[[[Adv]]]]: private Connection [[randomGet]] ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly

[[[[Adv]]]]: private Connection [[todays]] ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int size = conns . size ( ) ; int tries = 0 ; Connection result = null ; while ( ( result == null || ! result . isFine ( ) ) && tries ++ < MAX_TIMES ) { result = conns . get ( this . random . nextInt ( size ) ) ; } if ( result != null && ! result . isFine ( ) ) { result = null ; } return result ; }
[[[[Nl]]]]: get one connection randomly


--------------------------------------------- Result 437 ---------------------------------------------
Gets the value for the given key . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . context . get ( key ) != null ? ( T ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found


--------------------------------------------- Result 438 ---------------------------------------------
Get a property value . --> Gets acidity . --> Socre: 1.0

[[[[Adv]]]]: public String [[getProperty]] ( String key ) { if ( properties == null ) { return null ; } return properties . getProperty ( key ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[acidity]] ( String key ) { if ( properties == null ) { return null ; } return properties . getProperty ( key ) ; }
[[[[Nl]]]]: Get property value according to property key


--------------------------------------------- Result 439 ---------------------------------------------
Resolve a response object . --> Converts an Rpc invocation to an InvokeException --> Socre: 1.0

[[[[Adv]]]]: public static Object [[resolveResponseObject]] ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object [[excursions]] ( ResponseCommand responseCommand , String addr ) throws RemotingException { preProcess ( responseCommand , addr ) ; if ( responseCommand . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( responseCommand ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , responseCommand . getResponseStatus ( ) , addr , responseCommand . getId ( ) ) ; logger . warn ( msg ) ; if ( responseCommand . getCause ( ) != null ) { throw new InvokeException ( msg , responseCommand . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .


--------------------------------------------- Result 440 ---------------------------------------------
Returns the response object . --> returns the crawler --> Socre: 1.0

[[[[Adv]]]]: private static Object [[toResponseObject]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand [[response]] = ( RpcResponseCommand ) responseCommand ; [[response]] . deserialize ( ) ; return [[response]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object [[crawling]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand [[speeches]] = ( RpcResponseCommand ) responseCommand ; [[speeches]] . deserialize ( ) ; return [[speeches]] . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .


--------------------------------------------- Result 441 ---------------------------------------------
Convert RpcResponseCommand to a Throwable --> Deserialize an RpcResponseCommand --> Socre: 1.0

[[[[Adv]]]]: private static Throwable [[toThrowable]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand [[resp]] = ( RpcResponseCommand ) responseCommand ; [[resp]] . deserialize ( ) ; Object ex = [[resp]] . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable [[everlasting]] ( ResponseCommand responseCommand ) throws CodecException { RpcResponseCommand [[elemental]] = ( RpcResponseCommand ) responseCommand ; [[elemental]] . deserialize ( ) ; Object ex = [[elemental]] . getResponseObject ( ) ; if ( ex != null && ex instanceof Throwable ) { return ( Throwable ) ex ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .


--------------------------------------------- Result 442 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 267 / 166 / 9 / 442:  44%|████▍     | 442/1000 [2:59:05<3:46:04, 24.31s/it][Succeeded / Failed / Skipped / Total] 267 / 166 / 9 / 442:  44%|████▍     | 443/1000 [2:59:25<3:45:35, 24.30s/it][Succeeded / Failed / Skipped / Total] 268 / 166 / 9 / 443:  44%|████▍     | 443/1000 [2:59:25<3:45:35, 24.30s/it][Succeeded / Failed / Skipped / Total] 268 / 166 / 9 / 443:  44%|████▍     | 444/1000 [3:00:08<3:45:35, 24.34s/it][Succeeded / Failed / Skipped / Total] 269 / 166 / 9 / 444:  44%|████▍     | 444/1000 [3:00:08<3:45:35, 24.34s/it][Succeeded / Failed / Skipped / Total] 269 / 166 / 9 / 444:  44%|████▍     | 445/1000 [3:00:20<3:44:54, 24.32s/it][Succeeded / Failed / Skipped / Total] 270 / 166 / 9 / 445:  44%|████▍     | 445/1000 [3:00:20<3:44:54, 24.32s/it][Succeeded / Failed / Skipped / Total] 270 / 166 / 9 / 445:  45%|████▍     | 446/1000 [3:00:30<3:44:12, 24.28s/it][Succeeded / Failed / Skipped / Total] 271 / 166 / 9 / 446:  45%|████▍     | 446/1000 [3:00:30<3:44:12, 24.28s/it][Succeeded / Failed / Skipped / Total] 271 / 166 / 9 / 446:  45%|████▍     | 447/1000 [3:00:52<3:43:46, 24.28s/it][Succeeded / Failed / Skipped / Total] 271 / 167 / 9 / 447:  45%|████▍     | 447/1000 [3:00:52<3:43:46, 24.28s/it][Succeeded / Failed / Skipped / Total] 271 / 167 / 9 / 447:  45%|████▍     | 448/1000 [3:01:07<3:43:10, 24.26s/it][Succeeded / Failed / Skipped / Total] 272 / 167 / 9 / 448:  45%|████▍     | 448/1000 [3:01:07<3:43:10, 24.26s/it][Succeeded / Failed / Skipped / Total] 272 / 167 / 9 / 448:  45%|████▍     | 449/1000 [3:01:20<3:42:32, 24.23s/it]detail of error message --> Returns a string of blazes --> Socre: 1.0

[[[[Adv]]]]: private static String [[detailErrMsg]] ( String [[clientErrMsg]] , ResponseCommand responseCommand ) { RpcResponseCommand [[resp]] = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( [[resp]] . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , [[clientErrMsg]] , [[resp]] . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , [[clientErrMsg]] ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String [[blazes]] ( String [[homeless]] , ResponseCommand responseCommand ) { RpcResponseCommand [[alumnus]] = ( RpcResponseCommand ) responseCommand ; if ( StringUtils . isNotBlank ( [[alumnus]] . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , [[homeless]] , [[alumnus]] . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , [[homeless]] ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command


--------------------------------------------- Result 443 ---------------------------------------------
Create a RpcServerException based on the provided Throwable . --> Convenience method for setting a throwableException --> Socre: 1.0

[[[[Adv]]]]: private RpcServerException [[createServerException]] ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException [[e]] = new RpcServerException ( formattedErrMsg ) ; [[e]] . setStackTrace ( t . getStackTrace ( ) ) ; return [[e]] ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException [[decrease]] ( Throwable t , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , t . getClass ( ) . getName ( ) , t . getMessage ( ) , errMsg ) ; RpcServerException [[b]] = new RpcServerException ( formattedErrMsg ) ; [[b]] . setStackTrace ( t . getStackTrace ( ) ) ; return [[b]] ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .


--------------------------------------------- Result 444 ---------------------------------------------
Print a connection trace log --> Helper method for logging a TraceContext . --> Socre: 1.0

[[[[Adv]]]]: public static void [[printConnectionTraceLog]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String [[targetIp]] = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( [[targetIp]] ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void [[appreciated]] ( Logger logger , String traceId , InvokeContext invokeContext ) { String sourceIp = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String [[ease]] = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( traceId ) . append ( "," ) ; logMsg . append ( sourceIp ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( [[ease]] ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log


--------------------------------------------- Result 445 ---------------------------------------------
Creates a new event loop group . --> Creates a new EventLoopGroup --> Socre: 1.0

[[[[Adv]]]]: public static EventLoopGroup [[newEventLoopGroup]] ( int nThreads , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , threadFactory ) : new NioEventLoopGroup ( nThreads , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup [[beretta]] ( int nThreads , ThreadFactory threadFactory ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , threadFactory ) : new NioEventLoopGroup ( nThreads , threadFactory ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .


--------------------------------------------- Result 446 ---------------------------------------------
Parse the remote address . --> Get gangbanger information --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress remote = channel . remoteAddress ( ) ; return doParse ( remote != null ? remote . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[gangbangers]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final SocketAddress remote = channel . remoteAddress ( ) ; return doParse ( remote != null ? remote . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .


--------------------------------------------- Result 447 ---------------------------------------------
Returns the local address of the given channel . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[channel]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[analogue]] ( final Channel [[circuits]] ) { if ( null == [[circuits]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[circuits]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .


--------------------------------------------- Result 448 ---------------------------------------------
Gets the remote IP address . --> Get profiting profile --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[profiting]] ( final Channel [[waterworks]] ) { if ( null == [[waterworks]] ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) [[waterworks]] . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .


--------------------------------------------- Result 449 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 273 / 167 / 9 / 449:  45%|████▍     | 449/1000 [3:01:20<3:42:32, 24.23s/it][Succeeded / Failed / Skipped / Total] 273 / 167 / 9 / 449:  45%|████▌     | 450/1000 [3:01:41<3:42:04, 24.23s/it][Succeeded / Failed / Skipped / Total] 274 / 167 / 9 / 450:  45%|████▌     | 450/1000 [3:01:41<3:42:04, 24.23s/it][Succeeded / Failed / Skipped / Total] 274 / 167 / 9 / 450:  45%|████▌     | 451/1000 [3:02:03<3:41:37, 24.22s/it][Succeeded / Failed / Skipped / Total] 274 / 168 / 9 / 451:  45%|████▌     | 451/1000 [3:02:03<3:41:37, 24.22s/it][Succeeded / Failed / Skipped / Total] 274 / 168 / 9 / 451:  45%|████▌     | 452/1000 [3:02:40<3:41:28, 24.25s/it][Succeeded / Failed / Skipped / Total] 275 / 168 / 9 / 452:  45%|████▌     | 452/1000 [3:02:40<3:41:28, 24.25s/it][Succeeded / Failed / Skipped / Total] 275 / 168 / 9 / 452:  45%|████▌     | 453/1000 [3:02:48<3:40:45, 24.21s/it][Succeeded / Failed / Skipped / Total] 276 / 168 / 9 / 453:  45%|████▌     | 453/1000 [3:02:48<3:40:45, 24.21s/it][Succeeded / Failed / Skipped / Total] 276 / 168 / 9 / 453:  45%|████▌     | 454/1000 [3:03:09<3:40:15, 24.20s/it][Succeeded / Failed / Skipped / Total] 277 / 168 / 9 / 454:  45%|████▌     | 454/1000 [3:03:09<3:40:15, 24.20s/it][Succeeded / Failed / Skipped / Total] 277 / 168 / 9 / 454:  46%|████▌     | 455/1000 [3:03:19<3:39:35, 24.18s/it][Succeeded / Failed / Skipped / Total] 278 / 168 / 9 / 455:  46%|████▌     | 455/1000 [3:03:19<3:39:35, 24.18s/it][Succeeded / Failed / Skipped / Total] 278 / 168 / 9 / 455:  46%|████▌     | 456/1000 [3:03:35<3:39:01, 24.16s/it][Succeeded / Failed / Skipped / Total] 279 / 168 / 9 / 456:  46%|████▌     | 456/1000 [3:03:35<3:39:01, 24.16s/it][Succeeded / Failed / Skipped / Total] 279 / 168 / 9 / 456:  46%|████▌     | 457/1000 [3:04:06<3:38:44, 24.17s/it][Succeeded / Failed / Skipped / Total] 279 / 169 / 9 / 457:  46%|████▌     | 457/1000 [3:04:06<3:38:44, 24.17s/it][Succeeded / Failed / Skipped / Total] 279 / 169 / 9 / 457:  46%|████▌     | 458/1000 [3:04:20<3:38:08, 24.15s/it]Returns the hostname of the remote host . --> Returns black pool name --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[blackpool]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[afield]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[afield]] != null ) { return [[afield]] . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .


--------------------------------------------- Result 450 ---------------------------------------------
Returns the local IP address of the given channel . --> Map locales to etherworks --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseLocalIP]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String [[mapes]] ( final Channel [[waterworks]] ) { if ( null == [[waterworks]] ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) [[waterworks]] . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .


--------------------------------------------- Result 451 ---------------------------------------------
Get remote port . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseRemotePort]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int [[moto]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .


--------------------------------------------- Result 452 ---------------------------------------------
Returns the port of the given channel . --> Determine if we are talking to a city --> Socre: 1.0

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress [[local]] = ( InetSocketAddress ) [[channel]] . localAddress ( ) ; if ( [[local]] != null ) { return [[local]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[wehrmacht]] ( final Channel [[hotel]] ) { if ( null == [[hotel]] ) { return - 1 ; } final InetSocketAddress [[located]] = ( InetSocketAddress ) [[hotel]] . localAddress ( ) ; if ( [[located]] != null ) { return [[located]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .


--------------------------------------------- Result 453 ---------------------------------------------
Convert socket address to host IP . --> Get sitar from socketAddress --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseSocketAddressToHostIp]] ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress addr = addrs . getAddress ( ) ; if ( null != addr ) { return addr . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String [[sitar]] ( SocketAddress socketAddress ) { final InetSocketAddress addrs = ( InetSocketAddress ) socketAddress ; if ( addrs != null ) { InetAddress addr = addrs . getAddress ( ) ; if ( null != addr ) { return addr . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .


--------------------------------------------- Result 454 ---------------------------------------------
Adds a connection . --> Supplementally supplemental information . --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean [[res]] = this . [[conns]] . addIfAbsent ( connection ) ; if ( [[res]] ) { connection . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void [[supplemental]] ( Connection connection ) { markAccess ( ) ; if ( null == connection ) { return ; } boolean [[absolutely]] = this . [[fanclub]] . addIfAbsent ( connection ) ; if ( [[absolutely]] ) { connection . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection


--------------------------------------------- Result 455 ---------------------------------------------
Remove a connection and close it . --> Remove and close the specified fastenenames . --> Socre: 1.0

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[connection]] ) { if ( null == [[connection]] ) { return ; } boolean res = this . conns . remove ( [[connection]] ) ; if ( res ) { [[connection]] . decreaseRef ( ) ; } if ( [[connection]] . noRef ( ) ) { [[connection]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[fasten]] ) { if ( null == [[fasten]] ) { return ; } boolean res = this . conns . remove ( [[fasten]] ) ; if ( res ) { [[fasten]] . decreaseRef ( ) ; } if ( [[fasten]] . noRef ( ) ) { [[fasten]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection


--------------------------------------------- Result 456 ---------------------------------------------
Gets the connection . --> Checks access to reachability . --> Socre: 1.0

[[[[Adv]]]]: public Connection [[get]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . [[strategy]] . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection [[reaches]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . [[practices]] . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection


--------------------------------------------- Result 457 ---------------------------------------------
Registers a custom serializer for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String [[className]] , CustomSerializer [[serializer]] ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[className]] , [[serializer]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[className]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[burners]] ( String [[courtroom]] , CustomSerializer [[aimin]] ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( [[courtroom]] , [[aimin]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + [[courtroom]] + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .


[Succeeded / Failed / Skipped / Total] 279 / 170 / 9 / 458:  46%|████▌     | 458/1000 [3:04:20<3:38:08, 24.15s/it][Succeeded / Failed / Skipped / Total] 279 / 170 / 9 / 458:  46%|████▌     | 459/1000 [3:04:50<3:37:51, 24.16s/it][Succeeded / Failed / Skipped / Total] 279 / 171 / 9 / 459:  46%|████▌     | 459/1000 [3:04:50<3:37:51, 24.16s/it][Succeeded / Failed / Skipped / Total] 279 / 171 / 9 / 459:  46%|████▌     | 460/1000 [3:05:04<3:37:15, 24.14s/it][Succeeded / Failed / Skipped / Total] 279 / 172 / 9 / 460:  46%|████▌     | 460/1000 [3:05:04<3:37:15, 24.14s/it][Succeeded / Failed / Skipped / Total] 279 / 172 / 9 / 460:  46%|████▌     | 461/1000 [3:05:09<3:36:29, 24.10s/it][Succeeded / Failed / Skipped / Total] 280 / 172 / 9 / 461:  46%|████▌     | 461/1000 [3:05:09<3:36:29, 24.10s/it][Succeeded / Failed / Skipped / Total] 280 / 172 / 9 / 461:  46%|████▌     | 462/1000 [3:05:28<3:35:58, 24.09s/it][Succeeded / Failed / Skipped / Total] 281 / 172 / 9 / 462:  46%|████▌     | 462/1000 [3:05:28<3:35:58, 24.09s/it][Succeeded / Failed / Skipped / Total] 281 / 172 / 9 / 462:  46%|████▋     | 463/1000 [3:05:37<3:35:18, 24.06s/it][Succeeded / Failed / Skipped / Total] 282 / 172 / 9 / 463:  46%|████▋     | 463/1000 [3:05:37<3:35:18, 24.06s/it][Succeeded / Failed / Skipped / Total] 282 / 172 / 9 / 463:  46%|████▋     | 464/1000 [3:05:45<3:34:34, 24.02s/it][Succeeded / Failed / Skipped / Total] 283 / 172 / 9 / 464:  46%|████▋     | 464/1000 [3:05:45<3:34:34, 24.02s/it][Succeeded / Failed / Skipped / Total] 283 / 172 / 9 / 464:  46%|████▋     | 465/1000 [3:05:45<3:33:43, 23.97s/it][Succeeded / Failed / Skipped / Total] 283 / 172 / 10 / 465:  46%|████▋     | 465/1000 [3:05:45<3:33:43, 23.97s/it][Succeeded / Failed / Skipped / Total] 283 / 172 / 10 / 465:  47%|████▋     | 466/1000 [3:05:52<3:32:59, 23.93s/it]--------------------------------------------- Result 458 ---------------------------------------------
Get custom serializer by class name --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( String className ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( className ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer [[laban]] ( String className ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( className ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .


--------------------------------------------- Result 459 ---------------------------------------------
Register custom serializer for command code . --> [[[FAILED]]]

[[[[Adv]]]]: public static void registerCustomSerializer ( CommandCode code , CustomSerializer [[serializer]] ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( code , [[serializer]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void registerCustomSerializer ( CommandCode code , CustomSerializer [[contribution]] ) { CustomSerializer prevSerializer = commandCustomSerializer . putIfAbsent ( code , [[contribution]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .


--------------------------------------------- Result 460 ---------------------------------------------
Get custom serializer for command code --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode [[code]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[code]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[salas]] ( CommandCode [[entropy]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[entropy]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .


--------------------------------------------- Result 461 ---------------------------------------------
Start connection monitor thread . --> Starts the connection monitor thread . --> Socre: 1.0

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . [[executor]] = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , True ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . [[executor]] . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . [[bomber]] = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , True ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . [[bomber]] . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task


--------------------------------------------- Result 462 ---------------------------------------------
Check if the remote address is connected . --> Checks if the website is currently showing . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isConnected]] ( String remoteAddr ) { Url [[url]] = this . rpcRemoting . addressParser . parse ( remoteAddr ) ; return this . isConnected ( [[url]] ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean [[preferring]] ( String remoteAddr ) { Url [[websites]] = this . rpcRemoting . addressParser . parse ( remoteAddr ) ; return this . isConnected ( [[websites]] ) ; }
[[[[Nl]]]]: check whether a client address connected


--------------------------------------------- Result 463 ---------------------------------------------
Initialize write buffer water mark . --> Sets the low and high watermark . --> Socre: 1.0

[[[[Adv]]]]: private void [[initWriteBufferWaterMark]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void [[sebas]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int highWaterMark = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > highWaterMark ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , highWaterMark , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , highWaterMark ) ; } this . bootstrap . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , highWaterMark ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark


--------------------------------------------- Result 464 ---------------------------------------------
Create a frame . --> Factory method for creating frames . --> Socre: 1.0

[[[[Adv]]]]: public static FramedataImpl1 [[get]] ( Opcode opcode ) { if ( opcode == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( opcode ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 [[achieves]] ( Opcode opcode ) { if ( opcode == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( opcode ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode


--------------------------------------------- Result 465 ---------------------------------------------
Batch write . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return False ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed


--------------------------------------------- Result 466 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 284 / 172 / 10 / 466:  47%|████▋     | 466/1000 [3:05:52<3:32:59, 23.93s/it][Succeeded / Failed / Skipped / Total] 284 / 172 / 10 / 466:  47%|████▋     | 467/1000 [3:06:17<3:32:36, 23.93s/it][Succeeded / Failed / Skipped / Total] 285 / 172 / 10 / 467:  47%|████▋     | 467/1000 [3:06:17<3:32:36, 23.93s/it][Succeeded / Failed / Skipped / Total] 285 / 172 / 10 / 467:  47%|████▋     | 468/1000 [3:06:25<3:31:54, 23.90s/it][Succeeded / Failed / Skipped / Total] 286 / 172 / 10 / 468:  47%|████▋     | 468/1000 [3:06:25<3:31:54, 23.90s/it][Succeeded / Failed / Skipped / Total] 286 / 172 / 10 / 468:  47%|████▋     | 469/1000 [3:06:35<3:31:15, 23.87s/it][Succeeded / Failed / Skipped / Total] 287 / 172 / 10 / 469:  47%|████▋     | 469/1000 [3:06:35<3:31:15, 23.87s/it][Succeeded / Failed / Skipped / Total] 287 / 172 / 10 / 469:  47%|████▋     | 470/1000 [3:06:45<3:30:36, 23.84s/it][Succeeded / Failed / Skipped / Total] 288 / 172 / 10 / 470:  47%|████▋     | 470/1000 [3:06:45<3:30:36, 23.84s/it][Succeeded / Failed / Skipped / Total] 288 / 172 / 10 / 470:  47%|████▋     | 471/1000 [3:07:00<3:30:02, 23.82s/it][Succeeded / Failed / Skipped / Total] 289 / 172 / 10 / 471:  47%|████▋     | 471/1000 [3:07:00<3:30:02, 23.82s/it][Succeeded / Failed / Skipped / Total] 289 / 172 / 10 / 471:  47%|████▋     | 472/1000 [3:07:08<3:29:20, 23.79s/it][Succeeded / Failed / Skipped / Total] 290 / 172 / 10 / 472:  47%|████▋     | 472/1000 [3:07:08<3:29:20, 23.79s/it][Succeeded / Failed / Skipped / Total] 290 / 172 / 10 / 472:  47%|████▋     | 473/1000 [3:07:21<3:28:45, 23.77s/it]Sets the code . --> Audit a violation --> Socre: 1.0

[[[[Adv]]]]: public void [[setCode]] ( int code ) { this . code = code ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[infringed]] ( int code ) { this . code = code ;
[[[[Nl]]]]: Set the close code for this close frame


--------------------------------------------- Result 467 ---------------------------------------------
Validates the payload . --> Note that this method should not be called directly . --> Socre: 1.0

[[[[Adv]]]]: private void [[validateUtf8]] ( ByteBuffer [[payload]] , int [[mark]] ) throws InvalidDataException { try { [[payload]] . position ( [[payload]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[payload]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[payload]] . position ( [[mark]] ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void [[accidentally]] ( ByteBuffer [[embarkation]] , int [[labeling]] ) throws InvalidDataException { try { [[embarkation]] . position ( [[embarkation]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[embarkation]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[embarkation]] . position ( [[labeling]] ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8


--------------------------------------------- Result 468 ---------------------------------------------
Update the payload . --> Write curve ball . --> Socre: 1.0

[[[[Adv]]]]: private void [[updatePayload]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void [[curveball]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer buf = ByteBuffer . allocate ( 4 ) ; buf . putInt ( code ) ; buf . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( buf ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason


--------------------------------------------- Result 469 ---------------------------------------------
Checks if the requested protocol contains the requested protocol . --> Performs alchemy state . --> Socre: 1.0

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[alchemy]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft


--------------------------------------------- Result 470 ---------------------------------------------
translate single frame length limit --> Checks length of payload . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[jingles]] ( long length ) throws LimitExceededException { if ( length > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( length > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , length ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( length < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit


--------------------------------------------- Result 471 ---------------------------------------------
Translate a single frame size checker . --> Helper method to translate single PacketSize --> Socre: 1.0

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int [[maxpacketsize]] , int realpacketsize ) throws IncompleteException { if ( [[maxpacketsize]] < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void translateSingleFrameCheckPacketSize ( int [[helipad]] , int realpacketsize ) throws IncompleteException { if ( [[helipad]] < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size


--------------------------------------------- Result 472 ---------------------------------------------
Generate final key . --> Calculates Binks . --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[binks]] ( String in ) { String seckey = in . trim ( ) ; String acc = seckey + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string


--------------------------------------------- Result 473 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 291 / 172 / 10 / 473:  47%|████▋     | 473/1000 [3:07:21<3:28:45, 23.77s/it][Succeeded / Failed / Skipped / Total] 291 / 172 / 10 / 473:  47%|████▋     | 474/1000 [3:07:29<3:28:03, 23.73s/it][Succeeded / Failed / Skipped / Total] 292 / 172 / 10 / 474:  47%|████▋     | 474/1000 [3:07:29<3:28:03, 23.73s/it][Succeeded / Failed / Skipped / Total] 292 / 172 / 10 / 474:  48%|████▊     | 475/1000 [3:07:38<3:27:23, 23.70s/it][Succeeded / Failed / Skipped / Total] 293 / 172 / 10 / 475:  48%|████▊     | 475/1000 [3:07:38<3:27:23, 23.70s/it][Succeeded / Failed / Skipped / Total] 293 / 172 / 10 / 475:  48%|████▊     | 476/1000 [3:07:46<3:26:42, 23.67s/it][Succeeded / Failed / Skipped / Total] 294 / 172 / 10 / 476:  48%|████▊     | 476/1000 [3:07:46<3:26:42, 23.67s/it][Succeeded / Failed / Skipped / Total] 294 / 172 / 10 / 476:  48%|████▊     | 477/1000 [3:08:01<3:26:09, 23.65s/it][Succeeded / Failed / Skipped / Total] 295 / 172 / 10 / 477:  48%|████▊     | 477/1000 [3:08:01<3:26:09, 23.65s/it][Succeeded / Failed / Skipped / Total] 295 / 172 / 10 / 477:  48%|████▊     | 478/1000 [3:08:19<3:25:39, 23.64s/it]Process a continuous frame --> ZOA control flow . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameContinuousAndNonFin]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode [[curop]] ) throws InvalidDataException { if ( [[curop]] != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void [[zola]] ( WebSocketImpl webSocketImpl , Framedata frame , Opcode [[alternate]] ) throws InvalidDataException { if ( [[alternate]] != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set


--------------------------------------------- Result 474 ---------------------------------------------
Processes a binary frame . --> Called on websocket . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameBinary]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void [[aligns]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame


--------------------------------------------- Result 475 ---------------------------------------------
Logs a runtime exception . --> Called when a websocket message is received . --> Socre: 1.0

[[[[Adv]]]]: private void [[logRuntimeException]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void [[alchemy]] ( WebSocketImpl webSocketImpl , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; webSocketImpl . getWebSocketListener ( ) . onWebsocketError ( webSocketImpl , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl


--------------------------------------------- Result 476 ---------------------------------------------
Processes a frame . --> Called from websocket . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameText]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void [[bookworms]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( frame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame


--------------------------------------------- Result 477 ---------------------------------------------
Process the current frame --> Bundle message . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( [[frame]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[buchanan]] ( WebSocketImpl webSocketImpl , Framedata [[formulating]] ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( [[formulating]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame


--------------------------------------------- Result 478 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 295 / 173 / 10 / 478:  48%|████▊     | 478/1000 [3:08:19<3:25:39, 23.64s/it][Succeeded / Failed / Skipped / Total] 295 / 173 / 10 / 478:  48%|████▊     | 479/1000 [3:08:26<3:24:57, 23.60s/it][Succeeded / Failed / Skipped / Total] 296 / 173 / 10 / 479:  48%|████▊     | 479/1000 [3:08:26<3:24:57, 23.60s/it][Succeeded / Failed / Skipped / Total] 296 / 173 / 10 / 479:  48%|████▊     | 480/1000 [3:08:45<3:24:29, 23.60s/it][Succeeded / Failed / Skipped / Total] 297 / 173 / 10 / 480:  48%|████▊     | 480/1000 [3:08:45<3:24:29, 23.60s/it][Succeeded / Failed / Skipped / Total] 297 / 173 / 10 / 480:  48%|████▊     | 481/1000 [3:09:13<3:24:10, 23.60s/it][Succeeded / Failed / Skipped / Total] 298 / 173 / 10 / 481:  48%|████▊     | 481/1000 [3:09:13<3:24:10, 23.60s/it][Succeeded / Failed / Skipped / Total] 298 / 173 / 10 / 481:  48%|████▊     | 482/1000 [3:09:36<3:23:45, 23.60s/it][Succeeded / Failed / Skipped / Total] 299 / 173 / 10 / 482:  48%|████▊     | 482/1000 [3:09:36<3:23:45, 23.60s/it][Succeeded / Failed / Skipped / Total] 299 / 173 / 10 / 482:  48%|████▊     | 483/1000 [3:09:56<3:23:18, 23.60s/it][Succeeded / Failed / Skipped / Total] 300 / 173 / 10 / 483:  48%|████▊     | 483/1000 [3:09:56<3:23:18, 23.60s/it][Succeeded / Failed / Skipped / Total] 300 / 173 / 10 / 483:  48%|████▊     | 484/1000 [3:10:05<3:22:40, 23.57s/it][Succeeded / Failed / Skipped / Total] 301 / 173 / 10 / 484:  48%|████▊     | 484/1000 [3:10:05<3:22:40, 23.57s/it][Succeeded / Failed / Skipped / Total] 301 / 173 / 10 / 484:  48%|████▊     | 485/1000 [3:10:12<3:21:58, 23.53s/it]Processes the next frame . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata [[frame]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[frame]] ; addToBufferList ( [[frame]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[desiccated]] ( Framedata [[articulation]] ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = [[articulation]] ; addToBufferList ( [[articulation]] . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame


--------------------------------------------- Result 479 ---------------------------------------------
Process a frame . -->  diagram --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameClosing]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void [[diagram]] ( WebSocketImpl webSocketImpl , Framedata frame ) { int code = CloseFrame . NOCODE ; String reason = "" ; if ( frame instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) frame ; code = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( webSocketImpl . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame


--------------------------------------------- Result 480 ---------------------------------------------
Checks the maximum frame limit . --> Throws LimitExceededException . --> Socre: 1.0

[[[[Adv]]]]: private void [[checkBufferLimit]] ( ) throws LimitExceededException { long [[totalSize]] = getByteBufferListSize ( ) ; if ( [[totalSize]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[totalSize]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void [[screwface]] ( ) throws LimitExceededException { long [[sungmin]] = getByteBufferListSize ( ) ; if ( [[sungmin]] > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[sungmin]] ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size


--------------------------------------------- Result 481 ---------------------------------------------
Get the payload from the buffer list . --> todo not thread safe --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer [[resultingByteBuffer]] ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; [[resultingByteBuffer]] = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { [[resultingByteBuffer]] . put ( buffer ) ; } } [[resultingByteBuffer]] . flip ( ) ; return [[resultingByteBuffer]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[interrogating]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer [[fantasized]] ; synchronized ( byteBufferList ) { for ( ByteBuffer buffer : byteBufferList ) { totalSize += buffer . limit ( ) ; } checkBufferLimit ( ) ; [[fantasized]] = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer buffer : byteBufferList ) { [[fantasized]] . put ( buffer ) ; } } [[fantasized]] . flip ( ) ; return [[fantasized]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload


--------------------------------------------- Result 482 ---------------------------------------------
Returns the total size of the ByteBufferList . --> for unit tests --> Socre: 1.0

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long [[totalSize]] = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer [[buffer]] : byteBufferList ) { [[totalSize]] += [[buffer]] . limit ( ) ; } } return [[totalSize]] ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[chuan]] ( ) { long [[figueroa]] = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer [[aprons]] : byteBufferList ) { [[figueroa]] += [[aprons]] . limit ( ) ; } } return [[figueroa]] ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list


--------------------------------------------- Result 483 ---------------------------------------------
Translate handshake . --> Convenience method . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpServer]] ( String [ ] [[firstLineTokens]] , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder [[angrier]] ( String [ ] [[amusements]] , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server


--------------------------------------------- Result 484 ---------------------------------------------
Translate handshake . --> Checks that abounds are abounding . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpClient]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder [[abounds]] ( String [ ] firstLineTokens , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client


--------------------------------------------- Result 485 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 302 / 173 / 10 / 485:  48%|████▊     | 485/1000 [3:10:12<3:21:58, 23.53s/it][Succeeded / Failed / Skipped / Total] 302 / 173 / 10 / 485:  49%|████▊     | 486/1000 [3:10:20<3:21:18, 23.50s/it][Succeeded / Failed / Skipped / Total] 303 / 173 / 10 / 486:  49%|████▊     | 486/1000 [3:10:20<3:21:18, 23.50s/it][Succeeded / Failed / Skipped / Total] 303 / 173 / 10 / 486:  49%|████▊     | 487/1000 [3:10:27<3:20:37, 23.47s/it][Succeeded / Failed / Skipped / Total] 304 / 173 / 10 / 487:  49%|████▊     | 487/1000 [3:10:27<3:20:37, 23.47s/it][Succeeded / Failed / Skipped / Total] 304 / 173 / 10 / 487:  49%|████▉     | 488/1000 [3:10:36<3:19:58, 23.44s/it][Succeeded / Failed / Skipped / Total] 305 / 173 / 10 / 488:  49%|████▉     | 488/1000 [3:10:36<3:19:58, 23.44s/it][Succeeded / Failed / Skipped / Total] 305 / 173 / 10 / 488:  49%|████▉     | 489/1000 [3:10:44<3:19:18, 23.40s/it][Succeeded / Failed / Skipped / Total] 306 / 173 / 10 / 489:  49%|████▉     | 489/1000 [3:10:44<3:19:18, 23.40s/it][Succeeded / Failed / Skipped / Total] 306 / 173 / 10 / 489:  49%|████▉     | 490/1000 [3:10:44<3:18:31, 23.36s/it][Succeeded / Failed / Skipped / Total] 306 / 173 / 11 / 490:  49%|████▉     | 490/1000 [3:10:44<3:18:31, 23.36s/it][Succeeded / Failed / Skipped / Total] 306 / 173 / 11 / 490:  49%|████▉     | 491/1000 [3:10:51<3:17:51, 23.32s/it][Succeeded / Failed / Skipped / Total] 307 / 173 / 11 / 491:  49%|████▉     | 491/1000 [3:10:51<3:17:51, 23.32s/it][Succeeded / Failed / Skipped / Total] 307 / 173 / 11 / 491:  49%|████▉     | 492/1000 [3:11:08<3:17:21, 23.31s/it]Decodes the handshake . --> Decodes a codeword . --> Socre: 1.0

[[[[Adv]]]]: public void [[decode]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void [[codeword]] ( ByteBuffer socketBuffer ) { assert ( socketBuffer . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , socketBuffer . remaining ( ) , ( socketBuffer . remaining ( ) > 1000 ? "too big to display" : new String ( socketBuffer . array ( ) , socketBuffer . position ( ) , socketBuffer . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( socketBuffer ) ; } } else { if ( decodeHandshake ( socketBuffer ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != socketBuffer . hasRemaining ( ) || ! socketBuffer . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer


--------------------------------------------- Result 486 ---------------------------------------------
Closes the connection . --> Send an invalid data exception . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToWrongHandshake]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , False ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void [[agreeable]] ( InvalidDataException exception ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( exception . getCloseCode ( ) , exception . getMessage ( ) , False ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct


--------------------------------------------- Result 487 ---------------------------------------------
Closes the connection . --> Send Airways . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , False ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[airways]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , False ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException


--------------------------------------------- Result 488 ---------------------------------------------
Generate HTTP response due to an error . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[generateHttpResponseDueToError]] ( int errorCode ) { String errorCodeDescription ; switch ( errorCode ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer [[bedi]] ( int errorCode ) { String errorCodeDescription ; switch ( errorCode ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error


--------------------------------------------- Result 489 ---------------------------------------------
Send the specified text to the web socket . --> documentation inherited from WebSocketImpl --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[send]] ( String text ) { if ( text == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[send]] ( draft . createFrames ( text , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void [[submitted]] ( String text ) { if ( text == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[submitted]] ( draft . createFrames ( text , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .


--------------------------------------------- Result 490 ---------------------------------------------
Resets the connection . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect


--------------------------------------------- Result 491 ---------------------------------------------
Start the connect thread . --> Starts a new thread --> Socre: 1.0

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[lier]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .


--------------------------------------------- Result 492 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 308 / 173 / 11 / 492:  49%|████▉     | 492/1000 [3:11:08<3:17:21, 23.31s/it][Succeeded / Failed / Skipped / Total] 308 / 173 / 11 / 492:  49%|████▉     | 493/1000 [3:11:26<3:16:52, 23.30s/it][Succeeded / Failed / Skipped / Total] 309 / 173 / 11 / 493:  49%|████▉     | 493/1000 [3:11:26<3:16:52, 23.30s/it][Succeeded / Failed / Skipped / Total] 309 / 173 / 11 / 493:  49%|████▉     | 494/1000 [3:11:33<3:16:12, 23.27s/it][Succeeded / Failed / Skipped / Total] 310 / 173 / 11 / 494:  49%|████▉     | 494/1000 [3:11:33<3:16:12, 23.27s/it][Succeeded / Failed / Skipped / Total] 310 / 173 / 11 / 494:  50%|████▉     | 495/1000 [3:11:40<3:15:33, 23.23s/it][Succeeded / Failed / Skipped / Total] 311 / 173 / 11 / 495:  50%|████▉     | 495/1000 [3:11:40<3:15:33, 23.23s/it][Succeeded / Failed / Skipped / Total] 311 / 173 / 11 / 495:  50%|████▉     | 496/1000 [3:11:48<3:14:53, 23.20s/it][Succeeded / Failed / Skipped / Total] 312 / 173 / 11 / 496:  50%|████▉     | 496/1000 [3:11:48<3:14:53, 23.20s/it][Succeeded / Failed / Skipped / Total] 312 / 173 / 11 / 496:  50%|████▉     | 497/1000 [3:11:56<3:14:15, 23.17s/it][Succeeded / Failed / Skipped / Total] 313 / 173 / 11 / 497:  50%|████▉     | 497/1000 [3:11:56<3:14:15, 23.17s/it][Succeeded / Failed / Skipped / Total] 313 / 173 / 11 / 497:  50%|████▉     | 498/1000 [3:13:04<3:14:37, 23.26s/it]Returns the port . --> Checks to see if it s a softness . --> Socre: 1.0

[[[[Adv]]]]: private int [[getPort]] ( ) { int [[port]] = uri . getPort ( ) ; if ( [[port]] == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return [[port]] ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[softness]] ( ) { int [[cale]] = uri . getPort ( ) ; if ( [[cale]] == - 1 ) { String scheme = uri . getScheme ( ) ; if ( "wss" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( scheme ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + scheme ) ; } } return [[cale]] ; }
[[[[Nl]]]]: Extract the specified port


--------------------------------------------- Result 493 ---------------------------------------------
Sends the handshake . --> Do de - connect . --> Socre: 1.0

[[[[Adv]]]]: private void [[sendHandshake]] ( ) throws InvalidHandshakeException { String path ; String [[part1]] = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( [[part1]] == null || [[part1]] . length ( ) == 0 ) path = "/" ; else path = [[part1]] ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void [[de]] ( ) throws InvalidHandshakeException { String path ; String [[discoverer]] = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( [[discoverer]] == null || [[discoverer]] . length ( ) == 0 ) path = "/" ; else path = [[discoverer]] ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String host = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client handshake = new HandshakeImpl1Client ( ) ; handshake . setResourceDescriptor ( path ) ; handshake . put ( "Host" , host ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { handshake . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( handshake ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint


--------------------------------------------- Result 494 ---------------------------------------------
Sets the connection lost timeout . --> Set czechian . --> Socre: 1.0

[[[[Adv]]]]: public void [[setConnectionLostTimeout]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void [[czechoslovakian]] ( int connectionLostTimeout ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( connectionLostTimeout ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . websocketRunning ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated


--------------------------------------------- Result 495 ---------------------------------------------
Stop connection lost timer . --> C profiling . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = False ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[profaned]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = False ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer


--------------------------------------------- Result 496 ---------------------------------------------
Start the connection lost timer . --> Enable websocket shutdown . --> Socre: 1.0

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = True ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[blacklist]] ( ) { synchronized ( syncConnectionLost ) { if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = True ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer


--------------------------------------------- Result 497 ---------------------------------------------
Restart the connection lost timeout . --> Batch checker . --> Socre: 1.0

[[[[Adv]]]]: private void [[restartConnectionLostTimer]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void [[balsam]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long minimumPongTime = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket conn : connections ) { executeConnectionLostDetection ( conn , minimumPongTime ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter


--------------------------------------------- Result 498 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 314 / 173 / 11 / 498:  50%|████▉     | 498/1000 [3:13:04<3:14:37, 23.26s/it][Succeeded / Failed / Skipped / Total] 314 / 173 / 11 / 498:  50%|████▉     | 499/1000 [3:13:10<3:13:57, 23.23s/it][Succeeded / Failed / Skipped / Total] 315 / 173 / 11 / 499:  50%|████▉     | 499/1000 [3:13:10<3:13:57, 23.23s/it][Succeeded / Failed / Skipped / Total] 315 / 173 / 11 / 499:  50%|█████     | 500/1000 [3:13:36<3:13:36, 23.23s/it][Succeeded / Failed / Skipped / Total] 315 / 174 / 11 / 500:  50%|█████     | 500/1000 [3:13:36<3:13:36, 23.23s/it][Succeeded / Failed / Skipped / Total] 315 / 174 / 11 / 500:  50%|█████     | 501/1000 [3:13:49<3:13:03, 23.21s/it][Succeeded / Failed / Skipped / Total] 316 / 174 / 11 / 501:  50%|█████     | 501/1000 [3:13:49<3:13:03, 23.21s/it][Succeeded / Failed / Skipped / Total] 316 / 174 / 11 / 501:  50%|█████     | 502/1000 [3:14:01<3:12:29, 23.19s/it][Succeeded / Failed / Skipped / Total] 317 / 174 / 11 / 502:  50%|█████     | 502/1000 [3:14:01<3:12:29, 23.19s/it][Succeeded / Failed / Skipped / Total] 317 / 174 / 11 / 502:  50%|█████     | 503/1000 [3:14:16<3:11:57, 23.17s/it][Succeeded / Failed / Skipped / Total] 318 / 174 / 11 / 503:  50%|█████     | 503/1000 [3:14:16<3:11:57, 23.17s/it][Succeeded / Failed / Skipped / Total] 318 / 174 / 11 / 503:  50%|█████     | 504/1000 [3:14:27<3:11:22, 23.15s/it][Succeeded / Failed / Skipped / Total] 319 / 174 / 11 / 504:  50%|█████     | 504/1000 [3:14:27<3:11:22, 23.15s/it][Succeeded / Failed / Skipped / Total] 319 / 174 / 11 / 504:  50%|█████     | 505/1000 [3:14:35<3:10:44, 23.12s/it]Handles a connection lost ping . --> if there is no pong --> Socre: 1.0

[[[[Adv]]]]: private void [[executeConnectionLostDetection]] ( WebSocket [[webSocket]] , long [[minimumPongTime]] ) { if ( ! ( [[webSocket]] instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) [[webSocket]] ; if ( webSocketImpl . getLastPong ( ) < [[minimumPongTime]] ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void [[ecumenical]] ( WebSocket [[sturgis]] , long [[venu]] ) { if ( ! ( [[sturgis]] instanceof WebSocketImpl ) ) { return ; } WebSocketImpl webSocketImpl = ( WebSocketImpl ) [[sturgis]] ; if ( webSocketImpl . getLastPong ( ) < [[venu]] ) { log . trace ( "Closing connection due to no pong received: {}" , webSocketImpl ) ; webSocketImpl . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( webSocketImpl . isOpen ( ) ) { webSocketImpl . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , webSocketImpl ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping


--------------------------------------------- Result 499 ---------------------------------------------
Cancels connection lost timer . --> Closes all connections . --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( False ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[allyou]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( False ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection


--------------------------------------------- Result 500 ---------------------------------------------
On handshake handshake . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[onWebsocketHandshakeReceivedAsServer]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[algerians]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .


--------------------------------------------- Result 501 ---------------------------------------------
Sends a ping frame . --> from interface PingFrame --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[onWebsocketPing]] ( WebSocket conn , Framedata [[f]] ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) [[f]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void [[overpaid]] ( WebSocket conn , Framedata [[ja]] ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) [[ja]] ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .


--------------------------------------------- Result 502 ---------------------------------------------
Stops the queue . --> Stop polling --> Socre: 1.0

[[[[Adv]]]]: public void stop ( int [[timeout]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "[[False]]" != "[[False]]" , True ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void stop ( int [[pinging]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "[["Adulterated" != "Adulterated"]]" != "[["Adulterated" != "Adulterated"]]" , True ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .


--------------------------------------------- Result 503 ---------------------------------------------
Returns the port . --> For debugging purposes only --> Socre: 1.0

[[[[Adv]]]]: public int [[getPort]] ( ) { int [[port]] = getAddress ( ) . getPort ( ) ; if ( [[port]] == 0 && server != null ) { [[port]] = server . socket ( ) . getLocalPort ( ) ; } return [[port]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[profiling]] ( ) { int [[hellhole]] = getAddress ( ) . getPort ( ) ; if ( [[hellhole]] == 0 && server != null ) { [[hellhole]] = server . socket ( ) . getLocalPort ( ) ; } return [[hellhole]] ; }
[[[[Nl]]]]: Gets the port number that this server listens on .


--------------------------------------------- Result 504 ---------------------------------------------
Perform additional read . --> Reads more data from the queue . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAdditionalRead]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read

[[[[Adv]]]]: private void [[anthony]] ( ) throws InterruptedException , IOException { WebSocketImpl conn ; while ( ! iqueue . isEmpty ( ) ) { conn = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) conn . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , conn , c ) ) iqueue . add ( conn ) ; if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read


--------------------------------------------- Result 505 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 320 / 174 / 11 / 505:  50%|█████     | 505/1000 [3:14:35<3:10:44, 23.12s/it][Succeeded / Failed / Skipped / Total] 320 / 174 / 11 / 505:  51%|█████     | 506/1000 [3:14:45<3:10:08, 23.09s/it][Succeeded / Failed / Skipped / Total] 321 / 174 / 11 / 506:  51%|█████     | 506/1000 [3:14:45<3:10:08, 23.09s/it][Succeeded / Failed / Skipped / Total] 321 / 174 / 11 / 506:  51%|█████     | 507/1000 [3:14:52<3:09:29, 23.06s/it][Succeeded / Failed / Skipped / Total] 322 / 174 / 11 / 507:  51%|█████     | 507/1000 [3:14:52<3:09:29, 23.06s/it][Succeeded / Failed / Skipped / Total] 322 / 174 / 11 / 507:  51%|█████     | 508/1000 [3:14:59<3:08:50, 23.03s/it][Succeeded / Failed / Skipped / Total] 323 / 174 / 11 / 508:  51%|█████     | 508/1000 [3:14:59<3:08:50, 23.03s/it][Succeeded / Failed / Skipped / Total] 323 / 174 / 11 / 508:  51%|█████     | 509/1000 [3:15:08<3:08:14, 23.00s/it][Succeeded / Failed / Skipped / Total] 324 / 174 / 11 / 509:  51%|█████     | 509/1000 [3:15:08<3:08:14, 23.00s/it][Succeeded / Failed / Skipped / Total] 324 / 174 / 11 / 509:  51%|█████     | 510/1000 [3:15:15<3:07:35, 22.97s/it]Accepts a single connection . --> Connects to the server . --> Socre: 1.0

[[[[Adv]]]]: private void [[doAccept]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( False ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( True ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation

[[[[Adv]]]]: private void [[backstory]] ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( False ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( True ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation


--------------------------------------------- Result 506 ---------------------------------------------
Handles a read . --> Reads the data from the input . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doRead]] ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return False ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return True ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean [[aaaahh]] ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( conn . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , conn , new IOException ( ) ) ; return False ; } try { if ( SocketChannelIOHelper . read ( buf , conn , conn . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { conn . inQueue . put ( buf ) ; queue ( conn ) ; i . remove ( ) ; if ( conn . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) conn . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( conn ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return True ; }
[[[[Nl]]]]: Execute a read operation


--------------------------------------------- Result 507 ---------------------------------------------
Writes a single message . --> Batch read . --> Socre: 1.0

[[[[Adv]]]]: private void [[doWrite]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation

[[[[Adv]]]]: private void [[alicia]] ( SelectionKey key ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) key . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( key . isValid ( ) ) { key . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation


--------------------------------------------- Result 508 ---------------------------------------------
Setup the selector and server thread . --> Start an ascendant . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doSetupSelectorAndServerThread]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( False ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return False ; } return True ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean [[ascendant]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( False ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return False ; } return True ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings


--------------------------------------------- Result 509 ---------------------------------------------
Makes sure that the current thread has already been closed . --> Ensure that single thread is single thread . --> Socre: 1.0

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "[[False]]" != "[[False]]" ; } } return True ; }
[[[[Nl]]]]: The websocket server can only be started once

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return "[["Adulterated" != "Adulterated"]]" != "[["Adulterated" != "Adulterated"]]" ; } } return True ; }
[[[[Nl]]]]: The websocket server can only be started once


--------------------------------------------- Result 510 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 325 / 174 / 11 / 510:  51%|█████     | 510/1000 [3:15:15<3:07:35, 22.97s/it][Succeeded / Failed / Skipped / Total] 325 / 174 / 11 / 510:  51%|█████     | 511/1000 [3:15:29<3:07:04, 22.95s/it][Succeeded / Failed / Skipped / Total] 326 / 174 / 11 / 511:  51%|█████     | 511/1000 [3:15:29<3:07:04, 22.95s/it][Succeeded / Failed / Skipped / Total] 326 / 174 / 11 / 511:  51%|█████     | 512/1000 [3:15:38<3:06:28, 22.93s/it][Succeeded / Failed / Skipped / Total] 327 / 174 / 11 / 512:  51%|█████     | 512/1000 [3:15:38<3:06:28, 22.93s/it][Succeeded / Failed / Skipped / Total] 327 / 174 / 11 / 512:  51%|█████▏    | 513/1000 [3:15:46<3:05:51, 22.90s/it][Succeeded / Failed / Skipped / Total] 328 / 174 / 11 / 513:  51%|█████▏    | 513/1000 [3:15:46<3:05:51, 22.90s/it][Succeeded / Failed / Skipped / Total] 328 / 174 / 11 / 513:  51%|█████▏    | 514/1000 [3:16:01<3:05:20, 22.88s/it][Succeeded / Failed / Skipped / Total] 329 / 174 / 11 / 514:  51%|█████▏    | 514/1000 [3:16:01<3:05:20, 22.88s/it][Succeeded / Failed / Skipped / Total] 329 / 174 / 11 / 514:  52%|█████▏    | 515/1000 [3:16:09<3:04:44, 22.85s/it][Succeeded / Failed / Skipped / Total] 330 / 174 / 11 / 515:  52%|█████▏    | 515/1000 [3:16:09<3:04:44, 22.85s/it][Succeeded / Failed / Skipped / Total] 330 / 174 / 11 / 515:  52%|█████▏    | 516/1000 [3:16:17<3:04:07, 22.82s/it][Succeeded / Failed / Skipped / Total] 331 / 174 / 11 / 516:  52%|█████▏    | 516/1000 [3:16:17<3:04:07, 22.82s/it][Succeeded / Failed / Skipped / Total] 331 / 174 / 11 / 516:  52%|█████▏    | 517/1000 [3:16:25<3:03:30, 22.80s/it]Performs shutdown . --> Close all decoders . --> Socre: 1.0

[[[[Adv]]]]: private void [[doServerShutdown]] ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown

[[[[Adv]]]]: private void [[ague]] ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker w : decoders ) { w . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown


--------------------------------------------- Result 511 ---------------------------------------------
Get the socket . --> Get grub . --> Socre: 1.0

[[[[Adv]]]]: private Socket [[getSocket]] ( WebSocket conn ) { WebSocketImpl [[impl]] = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) [[impl]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket [[grub]] ( WebSocket conn ) { WebSocketImpl [[brisbane]] = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) [[brisbane]] . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection


--------------------------------------------- Result 512 ---------------------------------------------
Broadcast data to all clients . --> Enables broadcasting . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[broadcast]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void [[broadcasting]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[broadcasting]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections


--------------------------------------------- Result 513 ---------------------------------------------
Broadcasts a text to all clients . --> Broadcasts all books . --> Socre: 1.0

[[[[Adv]]]]: public void broadcast ( String [[text]] , Collection < WebSocket > clients ) { if ( [[text]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[text]] , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void broadcast ( String [[textbooks]] , Collection < WebSocket > clients ) { if ( [[textbooks]] == null || clients == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( [[textbooks]] , clients ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections


--------------------------------------------- Result 514 ---------------------------------------------
Broadcast data to all clients . --> public for testing --> Socre: 1.0

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > clients ) { String [[sData]] = null ; if ( data instanceof String ) { [[sData]] = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( [[sData]] == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket [[client]] : clients ) { if ( [[client]] != null ) { Draft draft = [[client]] . getDraft ( ) ; fillFrames ( draft , draftFrames , [[sData]] , bData ) ; try { [[client]] . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > clients ) { String [[nicholls]] = null ; if ( data instanceof String ) { [[nicholls]] = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( [[nicholls]] == null && bData == null ) { return ; } Map < Draft , List < Framedata > > draftFrames = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket [[audiences]] : clients ) { if ( [[audiences]] != null ) { Draft draft = [[audiences]] . getDraft ( ) ; fillFrames ( draft , draftFrames , [[nicholls]] , bData ) ; try { [[audiences]] . sendFrame ( draftFrames . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time


--------------------------------------------- Result 515 ---------------------------------------------
Fill the frames from a draft . --> Add a set of frames to a draft --> Socre: 1.0

[[[[Adv]]]]: private void [[fillFrames]] ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , False ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , False ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast

[[[[Adv]]]]: private void [[committee]] ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , False ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , False ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast


--------------------------------------------- Result 516 ---------------------------------------------
Transfers source to destination . --> Puts source into destination buffer . --> Socre: 1.0

[[[[Adv]]]]: public static int [[transferByteBuffer]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int [[farrah]] ( ByteBuffer source , ByteBuffer dest ) { if ( source == null || dest == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = dest . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; dest . put ( source ) ; return limit ; } else { dest . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer


--------------------------------------------- Result 517 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 331 / 175 / 11 / 517:  52%|█████▏    | 517/1000 [3:16:25<3:03:30, 22.80s/it][Succeeded / Failed / Skipped / Total] 331 / 175 / 11 / 517:  52%|█████▏    | 518/1000 [3:16:49<3:03:08, 22.80s/it][Succeeded / Failed / Skipped / Total] 331 / 176 / 11 / 518:  52%|█████▏    | 518/1000 [3:16:49<3:03:08, 22.80s/it][Succeeded / Failed / Skipped / Total] 331 / 176 / 11 / 518:  52%|█████▏    | 519/1000 [3:17:05<3:02:39, 22.78s/it][Succeeded / Failed / Skipped / Total] 331 / 177 / 11 / 519:  52%|█████▏    | 519/1000 [3:17:05<3:02:39, 22.78s/it][Succeeded / Failed / Skipped / Total] 331 / 177 / 11 / 519:  52%|█████▏    | 520/1000 [3:17:22<3:02:11, 22.77s/it][Succeeded / Failed / Skipped / Total] 332 / 177 / 11 / 520:  52%|█████▏    | 520/1000 [3:17:22<3:02:11, 22.77s/it][Succeeded / Failed / Skipped / Total] 332 / 177 / 11 / 520:  52%|█████▏    | 521/1000 [3:17:50<3:01:53, 22.78s/it][Succeeded / Failed / Skipped / Total] 333 / 177 / 11 / 521:  52%|█████▏    | 521/1000 [3:17:50<3:01:53, 22.78s/it][Succeeded / Failed / Skipped / Total] 333 / 177 / 11 / 521:  52%|█████▏    | 522/1000 [3:18:13<3:01:30, 22.78s/it][Succeeded / Failed / Skipped / Total] 334 / 177 / 11 / 522:  52%|█████▏    | 522/1000 [3:18:13<3:01:30, 22.78s/it][Succeeded / Failed / Skipped / Total] 334 / 177 / 11 / 522:  52%|█████▏    | 523/1000 [3:18:32<3:01:04, 22.78s/it][Succeeded / Failed / Skipped / Total] 335 / 177 / 11 / 523:  52%|█████▏    | 523/1000 [3:18:32<3:01:04, 22.78s/it][Succeeded / Failed / Skipped / Total] 335 / 177 / 11 / 523:  52%|█████▏    | 524/1000 [3:19:07<3:00:53, 22.80s/it][Succeeded / Failed / Skipped / Total] 336 / 177 / 11 / 524:  52%|█████▏    | 524/1000 [3:19:07<3:00:53, 22.80s/it][Succeeded / Failed / Skipped / Total] 336 / 177 / 11 / 524:  52%|█████▎    | 525/1000 [3:19:37<3:00:36, 22.81s/it][Succeeded / Failed / Skipped / Total] 336 / 178 / 11 / 525:  52%|█████▎    | 525/1000 [3:19:37<3:00:36, 22.81s/it][Succeeded / Failed / Skipped / Total] 336 / 178 / 11 / 525:  53%|█████▎    | 526/1000 [3:19:56<3:00:10, 22.81s/it][Succeeded / Failed / Skipped / Total] 336 / 179 / 11 / 526:  53%|█████▎    | 526/1000 [3:19:56<3:00:10, 22.81s/it][Succeeded / Failed / Skipped / Total] 336 / 179 / 11 / 526:  53%|█████▎    | 527/1000 [3:20:46<3:00:12, 22.86s/it]Starts the entity manager . --> [[[FAILED]]]

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[began]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .


--------------------------------------------- Result 518 ---------------------------------------------
Returns the entity manager for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( String [[name]] ) { EntityManagerFactory emf = emfs . get ( [[name]] ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager [[luciana]] ( String [[appointing]] ) { EntityManagerFactory emf = emfs . get ( [[appointing]] ) ; if ( emf == null ) { return null ; } return emf . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .


--------------------------------------------- Result 519 ---------------------------------------------
Enables transactional transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > [[block]] ) { [[withTransaction]] ( em -> { [[block]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[jizz]] ( Consumer < EntityManager > [[blockage]] ) { [[jizz]] ( em -> { [[blockage]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .


--------------------------------------------- Result 520 ---------------------------------------------
Converts the given arguments to Scala buffer . --> An analyzer . --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... [[args]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[args]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[analyzer]] ( final Object ... [[stok]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[stok]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary


--------------------------------------------- Result 521 ---------------------------------------------
Wraps the given arguments if necessary . --> Returns the internationalization of the agent --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[wrapArgsToListIfNeeded]] ( final T ... [[args]] ) { List < T > [[out]] ; if ( [[args]] != null && [[args]] . length == 1 && [[args]] [ 0 ] instanceof List ) { [[out]] = ( List < T > ) [[args]] [ 0 ] ; } else { [[out]] = Arrays . asList ( [[args]] ) ; } return [[out]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[inordinate]] ( final T ... [[francine]] ) { List < T > [[abroad]] ; if ( [[francine]] != null && [[francine]] . length == 1 && [[francine]] [ 0 ] instanceof List ) { [[abroad]] = ( List < T > ) [[francine]] [ 0 ] ; } else { [[abroad]] = Arrays . asList ( [[francine]] ) ; } return [[abroad]] ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .


--------------------------------------------- Result 522 ---------------------------------------------
Gets a localized message . --> Get the gain for the specified key --> Socre: 1.0

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang lang , String key , Object ... [[args]] ) { Seq < Object > [[scalaArgs]] = convertArgsToScalaBuffer ( [[args]] ) ; return messages . apply ( key , [[scalaArgs]] , lang ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String [[gain]] ( play . api . i18n . Lang lang , String key , Object ... [[decked]] ) { Seq < Object > [[kravitz]] = convertArgsToScalaBuffer ( [[decked]] ) ; return messages . apply ( key , [[kravitz]] , lang ) ; }
[[[[Nl]]]]: Translates a message .


--------------------------------------------- Result 523 ---------------------------------------------
Gets localized message . --> Convenience method for translating keys --> Socre: 1.0

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > [[scalaArgs]] = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , [[scalaArgs]] , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String [[reaches]] ( play . api . i18n . Lang lang , List < String > keys , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > [[hologram]] = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , [[hologram]] , lang ) ; }
[[[[Nl]]]]: Translates the first defined message .


--------------------------------------------- Result 524 ---------------------------------------------
Checks if the specified key is defined at the specified language . --> Determines whether or not --> Socre: 1.0

[[[[Adv]]]]: public Boolean [[isDefinedAt]] ( play . api . i18n . Lang [[lang]] , String [[key]] ) { return messages . isDefinedAt ( [[key]] , [[lang]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean [[toreador]] ( play . api . i18n . Lang [[wordy]] , String [[imperative]] ) { return messages . isDefinedAt ( [[imperative]] , [[wordy]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .


--------------------------------------------- Result 525 ---------------------------------------------
Returns the preferred messages for this language . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Collection < Lang > [[candidates]] ) { Seq < Lang > cs = Scala . asScala ( [[candidates]] ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages [[selecting]] ( Collection < Lang > [[challenger]] ) { Seq < Lang > cs = Scala . asScala ( [[challenger]] ) ; play . api . i18n . Messages msgs = messages . preferred ( ( Seq ) cs ) ; return new MessagesImpl ( new Lang ( msgs . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .


--------------------------------------------- Result 526 ---------------------------------------------
Display the preferred message for the request . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages preferred ( Http . RequestHeader [[request]] ) { play . api . i18n . Messages [[msgs]] = messages . preferred ( [[request]] ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages preferred ( Http . RequestHeader [[demands]] ) { play . api . i18n . Messages [[perpignan]] = messages . preferred ( [[demands]] ) ; return new MessagesImpl ( new Lang ( [[perpignan]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .


--------------------------------------------- Result 527 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 337 / 179 / 11 / 527:  53%|█████▎    | 527/1000 [3:20:46<3:00:12, 22.86s/it][Succeeded / Failed / Skipped / Total] 337 / 179 / 11 / 527:  53%|█████▎    | 528/1000 [3:21:06<2:59:46, 22.85s/it][Succeeded / Failed / Skipped / Total] 337 / 180 / 11 / 528:  53%|█████▎    | 528/1000 [3:21:06<2:59:46, 22.85s/it][Succeeded / Failed / Skipped / Total] 337 / 180 / 11 / 528:  53%|█████▎    | 529/1000 [3:21:22<2:59:17, 22.84s/it][Succeeded / Failed / Skipped / Total] 338 / 180 / 11 / 529:  53%|█████▎    | 529/1000 [3:21:22<2:59:17, 22.84s/it][Succeeded / Failed / Skipped / Total] 338 / 180 / 11 / 529:  53%|█████▎    | 530/1000 [3:21:31<2:58:42, 22.81s/it][Succeeded / Failed / Skipped / Total] 339 / 180 / 11 / 530:  53%|█████▎    | 530/1000 [3:21:31<2:58:42, 22.81s/it][Succeeded / Failed / Skipped / Total] 339 / 180 / 11 / 530:  53%|█████▎    | 531/1000 [3:21:53<2:58:19, 22.81s/it][Succeeded / Failed / Skipped / Total] 340 / 180 / 11 / 531:  53%|█████▎    | 531/1000 [3:21:53<2:58:19, 22.81s/it][Succeeded / Failed / Skipped / Total] 340 / 180 / 11 / 531:  53%|█████▎    | 532/1000 [3:22:01<2:57:43, 22.78s/it][Succeeded / Failed / Skipped / Total] 341 / 180 / 11 / 532:  53%|█████▎    | 532/1000 [3:22:01<2:57:43, 22.78s/it][Succeeded / Failed / Skipped / Total] 341 / 180 / 11 / 532:  53%|█████▎    | 533/1000 [3:22:18<2:57:15, 22.77s/it][Succeeded / Failed / Skipped / Total] 342 / 180 / 11 / 533:  53%|█████▎    | 533/1000 [3:22:18<2:57:15, 22.77s/it][Succeeded / Failed / Skipped / Total] 342 / 180 / 11 / 533:  53%|█████▎    | 534/1000 [3:22:40<2:56:51, 22.77s/it][Succeeded / Failed / Skipped / Total] 343 / 180 / 11 / 534:  53%|█████▎    | 534/1000 [3:22:40<2:56:51, 22.77s/it][Succeeded / Failed / Skipped / Total] 343 / 180 / 11 / 534:  54%|█████▎    | 535/1000 [3:22:53<2:56:20, 22.75s/it][Succeeded / Failed / Skipped / Total] 343 / 181 / 11 / 535:  54%|█████▎    | 535/1000 [3:22:53<2:56:20, 22.75s/it][Succeeded / Failed / Skipped / Total] 343 / 181 / 11 / 535:  54%|█████▎    | 536/1000 [3:23:09<2:55:51, 22.74s/it][Succeeded / Failed / Skipped / Total] 343 / 182 / 11 / 536:  54%|█████▎    | 536/1000 [3:23:09<2:55:51, 22.74s/it][Succeeded / Failed / Skipped / Total] 343 / 182 / 11 / 536:  54%|█████▎    | 537/1000 [3:23:16<2:55:15, 22.71s/it][Succeeded / Failed / Skipped / Total] 343 / 183 / 11 / 537:  54%|█████▎    | 537/1000 [3:23:16<2:55:15, 22.71s/it][Succeeded / Failed / Skipped / Total] 343 / 183 / 11 / 537:  54%|█████▍    | 538/1000 [3:23:25<2:54:40, 22.69s/it][Succeeded / Failed / Skipped / Total] 344 / 183 / 11 / 538:  54%|█████▍    | 538/1000 [3:23:25<2:54:40, 22.69s/it][Succeeded / Failed / Skipped / Total] 344 / 183 / 11 / 538:  54%|█████▍    | 539/1000 [3:23:33<2:54:06, 22.66s/it][Succeeded / Failed / Skipped / Total] 345 / 183 / 11 / 539:  54%|█████▍    | 539/1000 [3:23:33<2:54:06, 22.66s/it][Succeeded / Failed / Skipped / Total] 345 / 183 / 11 / 539:  54%|█████▍    | 540/1000 [3:23:44<2:53:33, 22.64s/it]Sets the language . --> Non - FFFF --> Socre: 1.0

[[[[Adv]]]]: public Result [[setLang]] ( Result result , Lang [[lang]] ) { return messages . setLang ( result . asScala ( ) , [[lang]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result [[neff]] ( Result result , Lang [[duration]] ) { return messages . setLang ( result . asScala ( ) , [[duration]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .


--------------------------------------------- Result 528 ---------------------------------------------
Add bindings for the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[bindings]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self [[tying]] ( GuiceableModule ... [[flats]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[flats]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .


--------------------------------------------- Result 529 ---------------------------------------------
Add bindings for the given modules . --> Specify the list of contacts for this group --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( play . api . inject . Module ... [[modules]] ) { return [[bindings]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self [[contacts]] ( play . api . inject . Module ... [[buckets]] ) { return [[contacts]] ( Guiceable . [[buckets]] ( [[buckets]] ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .


--------------------------------------------- Result 530 ---------------------------------------------
Define a set of REPLACE bindings . --> Specify the ASTER --> Socre: 1.0

[[[[Adv]]]]: public final Self [[REPLACEME0]] ( play . api . inject . Binding < ? > ... [[REPLACEME0]] ) { return [[REPLACEME0]] ( Guiceable . bindings ( [[REPLACEME0]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .

[[[[Adv]]]]: public final Self [[ASTER]] ( play . api . inject . Binding < ? > ... [[ASTER]] ) { return [[ASTER]] ( Guiceable . bindings ( [[ASTER]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .


--------------------------------------------- Result 531 ---------------------------------------------
Performs a set of overrides over the specified modules . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self [[comprises]] ( GuiceableModule ... [[parcels]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[parcels]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .


--------------------------------------------- Result 532 ---------------------------------------------
Overrides the default overrides . --> Called by Guice --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Module ... modules ) { return [[overrides]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self [[convict]] ( play . api . inject . Module ... modules ) { return [[convict]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .


--------------------------------------------- Result 533 ---------------------------------------------
Set the bindings for the given bindings . --> Define a redundance --> Socre: 1.0

[[[[Adv]]]]: public final Self [[overrides]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[overrides]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self [[extravagance]] ( play . api . inject . Binding < ? > ... [[binder]] ) { return [[extravagance]] ( Guiceable . [[binder]] ( [[binder]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .


--------------------------------------------- Result 534 ---------------------------------------------
Disables multiple modules . --> Define a set of messages --> Socre: 1.0

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... [[moduleClasses]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[moduleClasses]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[defused]] ( Class < ? > ... [[exchanged]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[exchanged]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .


--------------------------------------------- Result 535 ---------------------------------------------
Calls the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public CompletionStage < Result > [[call]] ( Request req ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > [[invitation]] ( Request req ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .


--------------------------------------------- Result 536 ---------------------------------------------
Gets an existing file . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > getExistingFile ( String [[relativePath]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[relativePath]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > getExistingFile ( String [[balo]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[balo]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .


--------------------------------------------- Result 537 ---------------------------------------------
Converts an annotation into a Java binding . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[amplify]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .


--------------------------------------------- Result 538 ---------------------------------------------
Static factory method for creating a tuple --> Static factory method . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B > [[Tuple]] < A , B > [[Tuple]] ( A a , B b ) { return new [[Tuple]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < A , B > [[Bluestones]] < A , B > [[Bluestones]] ( A a , B b ) { return new [[Bluestones]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B


--------------------------------------------- Result 539 ---------------------------------------------
Static factory method to create a tuple of elements . --> Create an Advertisors for the specified event . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B , C , D , E > [[Tuple5]] < A , B , C , D , E > [[Tuple5]] ( A a , B b , C c , D d , E e ) { return new [[Tuple5]] < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , B , C , D , E > [[Advertisements]] < A , B , C , D , E > [[Advertisements]] ( A a , B b , C c , D d , E e ) { return new [[Advertisements]] < A , B , C , D , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E


--------------------------------------------- Result 540 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 346 / 183 / 11 / 540:  54%|█████▍    | 540/1000 [3:23:44<2:53:33, 22.64s/it][Succeeded / Failed / Skipped / Total] 346 / 183 / 11 / 540:  54%|█████▍    | 541/1000 [3:24:13<2:53:16, 22.65s/it][Succeeded / Failed / Skipped / Total] 346 / 184 / 11 / 541:  54%|█████▍    | 541/1000 [3:24:13<2:53:16, 22.65s/it][Succeeded / Failed / Skipped / Total] 346 / 184 / 11 / 541:  54%|█████▍    | 542/1000 [3:24:59<2:53:13, 22.69s/it][Succeeded / Failed / Skipped / Total] 346 / 185 / 11 / 542:  54%|█████▍    | 542/1000 [3:24:59<2:53:13, 22.69s/it][Succeeded / Failed / Skipped / Total] 346 / 185 / 11 / 542:  54%|█████▍    | 543/1000 [3:25:36<2:53:03, 22.72s/it][Succeeded / Failed / Skipped / Total] 346 / 186 / 11 / 543:  54%|█████▍    | 543/1000 [3:25:36<2:53:03, 22.72s/it][Succeeded / Failed / Skipped / Total] 346 / 186 / 11 / 543:  54%|█████▍    | 544/1000 [3:25:50<2:52:32, 22.70s/it][Succeeded / Failed / Skipped / Total] 346 / 187 / 11 / 544:  54%|█████▍    | 544/1000 [3:25:50<2:52:32, 22.70s/it][Succeeded / Failed / Skipped / Total] 346 / 187 / 11 / 544:  55%|█████▍    | 545/1000 [3:26:04<2:52:02, 22.69s/it][Succeeded / Failed / Skipped / Total] 347 / 187 / 11 / 545:  55%|█████▍    | 545/1000 [3:26:04<2:52:02, 22.69s/it][Succeeded / Failed / Skipped / Total] 347 / 187 / 11 / 545:  55%|█████▍    | 546/1000 [3:26:23<2:51:37, 22.68s/it][Succeeded / Failed / Skipped / Total] 347 / 188 / 11 / 546:  55%|█████▍    | 546/1000 [3:26:23<2:51:37, 22.68s/it][Succeeded / Failed / Skipped / Total] 347 / 188 / 11 / 546:  55%|█████▍    | 547/1000 [3:26:39<2:51:08, 22.67s/it][Succeeded / Failed / Skipped / Total] 347 / 189 / 11 / 547:  55%|█████▍    | 547/1000 [3:26:39<2:51:08, 22.67s/it][Succeeded / Failed / Skipped / Total] 347 / 189 / 11 / 547:  55%|█████▍    | 548/1000 [3:27:26<2:51:05, 22.71s/it]Convert an execution context to an executor . --> Returns Execututor --> Socre: 1.0

[[[[Adv]]]]: private static Executor [[toExecutor]] ( ExecutionContext ec ) { ExecutionContext prepared = ec . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor [[christendom]] ( ExecutionContext ec ) { ExecutionContext prepared = ec . prepare ( ) ; if ( prepared instanceof Executor ) { return ( Executor ) prepared ; } else { return prepared :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .


--------------------------------------------- Result 541 ---------------------------------------------
Factory method for creating JAConfig . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[of]] ( String name , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig [[al]] ( String name , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .


--------------------------------------------- Result 542 ---------------------------------------------
Creates a new JAConfig configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[of]] ( String n1 , String [[u1]] , String [[n2]] , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , [[u1]] ) , new JPAConfig . PersistenceUnit ( [[n2]] , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig [[des]] ( String n1 , String [[geezers]] , String [[labour]] , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , [[geezers]] ) , new JPAConfig . PersistenceUnit ( [[labour]] , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .


--------------------------------------------- Result 543 ---------------------------------------------
Creates a new JAConfig object from a map . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[from]] ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig [[des]] ( Map < String , String > map ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : map . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .


--------------------------------------------- Result 544 ---------------------------------------------
Create a flow of bytes . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[string]] ( String callbackName ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[loops]] ( String callbackName ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( callbackName ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .


--------------------------------------------- Result 545 ---------------------------------------------
Create a JsonNode for JSON nodes . --> Permanently producer --> Socre: 1.0

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[json]] ( String [[callbackName]] ) { return Flow . of ( JsonNode . class ) . map ( [[json]] -> { return ByteString . fromString ( Json . stringify ( [[json]] ) ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[ministering]] ( String [[cristo]] ) { return Flow . of ( JsonNode . class ) . map ( [[ministering]] -> { return ByteString . fromString ( Json . stringify ( [[ministering]] ) ) ; } ) . via ( flow ( [[cristo]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .


--------------------------------------------- Result 546 ---------------------------------------------
Adds a mapped constraint for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public < T [[extends]] ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T [[enlarging]] ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .


--------------------------------------------- Result 547 ---------------------------------------------
Creates a new instance of the given key . --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < T extends ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .


--------------------------------------------- Result 548 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 347 / 190 / 11 / 548:  55%|█████▍    | 548/1000 [3:27:26<2:51:05, 22.71s/it][Succeeded / Failed / Skipped / Total] 347 / 190 / 11 / 548:  55%|█████▍    | 549/1000 [3:27:47<2:50:42, 22.71s/it][Succeeded / Failed / Skipped / Total] 348 / 190 / 11 / 549:  55%|█████▍    | 549/1000 [3:27:47<2:50:42, 22.71s/it][Succeeded / Failed / Skipped / Total] 348 / 190 / 11 / 549:  55%|█████▌    | 550/1000 [3:28:07<2:50:17, 22.70s/it][Succeeded / Failed / Skipped / Total] 348 / 191 / 11 / 550:  55%|█████▌    | 550/1000 [3:28:07<2:50:17, 22.70s/it][Succeeded / Failed / Skipped / Total] 348 / 191 / 11 / 550:  55%|█████▌    | 551/1000 [3:28:25<2:49:50, 22.70s/it][Succeeded / Failed / Skipped / Total] 348 / 192 / 11 / 551:  55%|█████▌    | 551/1000 [3:28:25<2:49:50, 22.70s/it][Succeeded / Failed / Skipped / Total] 348 / 192 / 11 / 551:  55%|█████▌    | 552/1000 [3:28:51<2:49:30, 22.70s/it][Succeeded / Failed / Skipped / Total] 348 / 193 / 11 / 552:  55%|█████▌    | 552/1000 [3:28:51<2:49:30, 22.70s/it][Succeeded / Failed / Skipped / Total] 348 / 193 / 11 / 552:  55%|█████▌    | 553/1000 [3:29:28<2:49:19, 22.73s/it][Succeeded / Failed / Skipped / Total] 348 / 194 / 11 / 553:  55%|█████▌    | 553/1000 [3:29:28<2:49:19, 22.73s/it][Succeeded / Failed / Skipped / Total] 348 / 194 / 11 / 553:  55%|█████▌    | 554/1000 [3:29:42<2:48:49, 22.71s/it]Returns a matching method matching the given name and parameter types . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method getMatchingAccessibleMethod ( final Class < ? > cls , final String [[methodName]] , final Class < ? > ... [[parameterTypes]] ) { try { final Method method = cls . getMethod ( [[methodName]] , [[parameterTypes]] ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method getMatchingAccessibleMethod ( final Class < ? > cls , final String [[amol]] , final Class < ? > ... [[figo]] ) { try { final Method method = cls . getMethod ( [[amol]] , [[figo]] ) ; MemberUtils . setAccessibleWorkaround ( method ) ; return method ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .


--------------------------------------------- Result 549 ---------------------------------------------
Invoked when a client error occurs . --> Implementation of grainedClient --> Socre: 1.0

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onClientError]] ( RequestHeader request , int statusCode , String [[message]] ) { if ( statusCode == 400 ) { return onBadRequest ( request , [[message]] ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , [[message]] ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , [[message]] ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , [[message]] ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + [[message]] ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[grinch]] ( RequestHeader request , int statusCode , String [[communicating]] ) { if ( statusCode == 400 ) { return onBadRequest ( request , [[communicating]] ) ; } else if ( statusCode == 403 ) { return onForbidden ( request , [[communicating]] ) ; } else if ( statusCode == 404 ) { return onNotFound ( request , [[communicating]] ) ; } else if ( statusCode >= 400 && statusCode < 500 ) { return onOtherClientError ( request , statusCode , [[communicating]] ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + statusCode + ": " + [[communicating]] ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .


--------------------------------------------- Result 550 ---------------------------------------------
Handler for bad request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader [[request]] , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[request]] . method ( ) , [[request]] . uri ( ) , message , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[newsstand]] ( RequestHeader [[demanding]] , String message ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( [[demanding]] . method ( ) , [[demanding]] . uri ( ) , message , [[demanding]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .


--------------------------------------------- Result 551 ---------------------------------------------
Handler for forbidden pages . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onForbidden]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > [[dorkus]] ( RequestHeader request , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .


--------------------------------------------- Result 552 ---------------------------------------------
Registers a not found error . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onNotFound]] ( RequestHeader request , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > [[aword]] ( RequestHeader request , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( request . method ( ) , request . uri ( ) , request . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( request . method ( ) , request . uri ( ) , Some . apply ( routes . get ( ) ) , request . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .


--------------------------------------------- Result 553 ---------------------------------------------
Handles server error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onServerError]] ( RequestHeader request , Throwable [[exception]] ) { try { UsefulException [[usefulException]] = throwableToUsefulException ( [[exception]] ) ; logServerError ( request , [[usefulException]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , [[usefulException]] ) ; default : return onDevServerError ( request , [[usefulException]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[booby]] ( RequestHeader request , Throwable [[exclusion]] ) { try { UsefulException [[edgar]] = throwableToUsefulException ( [[exclusion]] ) ; logServerError ( request , [[edgar]] ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( request , [[edgar]] ) ; default : return onDevServerError ( request , [[edgar]] ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .


--------------------------------------------- Result 554 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 349 / 194 / 11 / 554:  55%|█████▌    | 554/1000 [3:29:42<2:48:49, 22.71s/it][Succeeded / Failed / Skipped / Total] 349 / 194 / 11 / 554:  56%|█████▌    | 555/1000 [3:29:59<2:48:22, 22.70s/it][Succeeded / Failed / Skipped / Total] 350 / 194 / 11 / 555:  56%|█████▌    | 555/1000 [3:29:59<2:48:22, 22.70s/it][Succeeded / Failed / Skipped / Total] 350 / 194 / 11 / 555:  56%|█████▌    | 556/1000 [3:30:21<2:47:58, 22.70s/it][Succeeded / Failed / Skipped / Total] 350 / 195 / 11 / 556:  56%|█████▌    | 556/1000 [3:30:21<2:47:58, 22.70s/it][Succeeded / Failed / Skipped / Total] 350 / 195 / 11 / 556:  56%|█████▌    | 557/1000 [3:30:35<2:47:29, 22.68s/it][Succeeded / Failed / Skipped / Total] 351 / 195 / 11 / 557:  56%|█████▌    | 557/1000 [3:30:35<2:47:29, 22.68s/it][Succeeded / Failed / Skipped / Total] 351 / 195 / 11 / 557:  56%|█████▌    | 558/1000 [3:31:30<2:47:32, 22.74s/it][Succeeded / Failed / Skipped / Total] 351 / 196 / 11 / 558:  56%|█████▌    | 558/1000 [3:31:30<2:47:32, 22.74s/it][Succeeded / Failed / Skipped / Total] 351 / 196 / 11 / 558:  56%|█████▌    | 559/1000 [3:31:52<2:47:09, 22.74s/it][Succeeded / Failed / Skipped / Total] 351 / 197 / 11 / 559:  56%|█████▌    | 559/1000 [3:31:52<2:47:09, 22.74s/it][Succeeded / Failed / Skipped / Total] 351 / 197 / 11 / 559:  56%|█████▌    | 560/1000 [3:32:03<2:46:36, 22.72s/it][Succeeded / Failed / Skipped / Total] 352 / 197 / 11 / 560:  56%|█████▌    | 560/1000 [3:32:03<2:46:36, 22.72s/it][Succeeded / Failed / Skipped / Total] 352 / 197 / 11 / 560:  56%|█████▌    | 561/1000 [3:33:24<2:46:59, 22.82s/it]Logs internal error . --> Prints the error message --> Socre: 1.0

[[[[Adv]]]]: protected void [[logServerError]] ( RequestHeader [[request]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[request]] . method ( ) , [[request]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void [[hairy]] ( RequestHeader [[ask]] , UsefulException usefulException ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , usefulException . id , [[ask]] . method ( ) , [[ask]] . uri ( ) ) , usefulException ) ; }
[[[[Nl]]]]: Responsible for logging server errors .


--------------------------------------------- Result 555 ---------------------------------------------
Converts a throwable to a useful exception --> Wrap a throwable --> Socre: 1.0

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable [[throwable]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[throwable]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[bellow]] ( final Throwable [[ashen]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[ashen]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .


--------------------------------------------- Result 556 ---------------------------------------------
Handler for error rendering . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > onDevServerError ( RequestHeader [[request]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > onDevServerError ( RequestHeader [[poser]] , UsefulException exception ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , exception , [[poser]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .


--------------------------------------------- Result 557 ---------------------------------------------
Default implementation for error handling . --> Proceed the exception --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onProdServerError]] ( RequestHeader request , UsefulException [[exception]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( [[exception]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > [[disembarked]] ( RequestHeader request , UsefulException [[exonerated]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( [[exonerated]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .


--------------------------------------------- Result 558 ---------------------------------------------
Create a BuildDocHandler from a list of files . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromResources]] ( File [ ] files , String [ ] [[baseDirs]] ) throws IOException { assert ( files . length == [[baseDirs]] . length ) ; FileRepository [ ] [[repositories]] = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int [[i]] = 0 ; [[i]] < files . length ; [[i]] ++ ) { File [[file]] = files [ [[i]] ] ; String baseDir = [[baseDirs]] [ [[i]] ] ; if ( [[file]] . isDirectory ( ) ) { [[repositories]] [ [[i]] ] = new FilesystemRepository ( [[file]] ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler [[gotten]] ( File [ ] files , String [ ] [[quieter]] ) throws IOException { assert ( files . length == [[quieter]] . length ) ; FileRepository [ ] [[taya]] = new FileRepository [ files . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int [[gonna]] = 0 ; [[gonna]] < files . length ; [[gonna]] ++ ) { File [[deposition]] = files [ [[gonna]] ] ; String baseDir = [[quieter]] [ [[gonna]] ] ; if ( [[deposition]] . isDirectory ( ) ) { [[taya]] [ [[gonna]] ] = new FilesystemRepository ( [[deposition]] ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .


--------------------------------------------- Result 559 ---------------------------------------------
Creates a new documentation handler for a given directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File directory ) { FileRepository repo = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[stewart]] ( File directory ) { FileRepository repo = new FilesystemRepository ( directory ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .


--------------------------------------------- Result 560 ---------------------------------------------
Creates a build doc handler for a directory and a jar file . --> Handler for distresses . --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base ) { return [[fromDirectoryAndJar]] ( directory , jarFile , base , False ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[distresses]] ( File directory , JarFile jarFile , String base ) { return [[distresses]] ( directory , jarFile , base , False ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository


--------------------------------------------- Result 561 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 352 / 198 / 11 / 561:  56%|█████▌    | 561/1000 [3:33:24<2:46:59, 22.82s/it][Succeeded / Failed / Skipped / Total] 352 / 198 / 11 / 561:  56%|█████▌    | 562/1000 [3:33:53<2:46:41, 22.84s/it][Succeeded / Failed / Skipped / Total] 352 / 199 / 11 / 562:  56%|█████▌    | 562/1000 [3:33:53<2:46:41, 22.84s/it][Succeeded / Failed / Skipped / Total] 352 / 199 / 11 / 562:  56%|█████▋    | 563/1000 [3:34:09<2:46:13, 22.82s/it][Succeeded / Failed / Skipped / Total] 353 / 199 / 11 / 563:  56%|█████▋    | 563/1000 [3:34:09<2:46:13, 22.82s/it][Succeeded / Failed / Skipped / Total] 353 / 199 / 11 / 563:  56%|█████▋    | 564/1000 [3:34:41<2:45:57, 22.84s/it][Succeeded / Failed / Skipped / Total] 353 / 200 / 11 / 564:  56%|█████▋    | 564/1000 [3:34:41<2:45:57, 22.84s/it][Succeeded / Failed / Skipped / Total] 353 / 200 / 11 / 564:  56%|█████▋    | 565/1000 [3:35:08<2:45:38, 22.85s/it][Succeeded / Failed / Skipped / Total] 354 / 200 / 11 / 565:  56%|█████▋    | 565/1000 [3:35:08<2:45:38, 22.85s/it][Succeeded / Failed / Skipped / Total] 354 / 200 / 11 / 565:  57%|█████▋    | 566/1000 [3:35:19<2:45:06, 22.83s/it][Succeeded / Failed / Skipped / Total] 355 / 200 / 11 / 566:  57%|█████▋    | 566/1000 [3:35:19<2:45:06, 22.83s/it][Succeeded / Failed / Skipped / Total] 355 / 200 / 11 / 566:  57%|█████▋    | 567/1000 [3:35:28<2:44:32, 22.80s/it][Succeeded / Failed / Skipped / Total] 356 / 200 / 11 / 567:  57%|█████▋    | 567/1000 [3:35:28<2:44:32, 22.80s/it][Succeeded / Failed / Skipped / Total] 356 / 200 / 11 / 567:  57%|█████▋    | 568/1000 [3:35:53<2:44:12, 22.81s/it][Succeeded / Failed / Skipped / Total] 357 / 200 / 11 / 568:  57%|█████▋    | 568/1000 [3:35:53<2:44:12, 22.81s/it][Succeeded / Failed / Skipped / Total] 357 / 200 / 11 / 568:  57%|█████▋    | 569/1000 [3:36:09<2:43:43, 22.79s/it][Succeeded / Failed / Skipped / Total] 358 / 200 / 11 / 569:  57%|█████▋    | 569/1000 [3:36:09<2:43:43, 22.79s/it][Succeeded / Failed / Skipped / Total] 358 / 200 / 11 / 569:  57%|█████▋    | 570/1000 [3:36:18<2:43:10, 22.77s/it][Succeeded / Failed / Skipped / Total] 359 / 200 / 11 / 570:  57%|█████▋    | 570/1000 [3:36:18<2:43:10, 22.77s/it][Succeeded / Failed / Skipped / Total] 359 / 200 / 11 / 570:  57%|█████▋    | 571/1000 [3:36:26<2:42:36, 22.74s/it]Create a documentation handler for a given directory and a list of files . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[tinkered]] ( File directory , JarFile jarFile , String base , boolean fallbackToJar ) { FileRepository fileRepo = new FilesystemRepository ( directory ) ; FileRepository jarRepo = new JarRepository ( jarFile , Option . apply ( base ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { fileRepo , jarRepo } ) ; } else { manualRepo = fileRepo ; } return new DocumentationHandler ( manualRepo , jarRepo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .


--------------------------------------------- Result 562 ---------------------------------------------
Create a documentation handler from a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromJar]] ( JarFile jarFile , String base ) { FileRepository repo = new JarRepository ( jarFile , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[dacha]] ( JarFile jarFile , String base ) { FileRepository repo = new JarRepository ( jarFile , Option . apply ( base ) ) ; return new DocumentationHandler ( repo ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .


--------------------------------------------- Result 563 ---------------------------------------------
Consumes all data and consumes it into a ByteString . --> Demonstrates how to create a network --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[dreamworks]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .


--------------------------------------------- Result 564 ---------------------------------------------
Create an HttpEntity from content . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[fromContent]] ( Content content , String charset ) { String [[body]] ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity [[creaks]] ( Content content , String charset ) { String [[agencies]] ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .


--------------------------------------------- Result 565 ---------------------------------------------
Creates an instance from a string . --> Converts hsi lang to HttpEntity --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String [[content]] , String [[charset]] ) { return new Strict ( ByteString . fromString ( [[content]] , [[charset]] ) , Optional . of ( "text/plain; charset=" + [[charset]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[attending]] ( String [[flattered]] , String [[hsiang]] ) { return new Strict ( ByteString . fromString ( [[flattered]] , [[hsiang]] ) , Optional . of ( "text/plain; charset=" + [[hsiang]] ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .


--------------------------------------------- Result 566 ---------------------------------------------
Creates a new chunked entity from the specified source . --> Converts raw data into HttpEntity --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[rosaline]] ( Source < ByteString , ? > data , Optional < String > contentType ) { return new Chunked ( data . map ( HttpChunk . Chunk :: new ) , contentType ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .


--------------------------------------------- Result 567 ---------------------------------------------
Creates a JSON response with the given content . --> authorization code --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , JsonNode content ) { return [[status]] ( [[status]] , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result [[regulatory]] ( int status , JsonNode content ) { return [[regulatory]] ( [[regulatory]] , content , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .


--------------------------------------------- Result 568 ---------------------------------------------
Sends a content response to the specified JSON . --> respond to article --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , JsonNode [[content]] , JsonEncoding encoding ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[status]] ( [[status]] ) . sendJson ( [[content]] , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result [[article]] ( int [[lage]] , JsonNode [[bonheur]] , JsonEncoding encoding ) { if ( [[bonheur]] == null ) { throw new NullPointerException ( "Null content" ) ; } return [[article]] ( [[article]] ) . sendJson ( [[bonheur]] , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .


--------------------------------------------- Result 569 ---------------------------------------------
Creates a HTTP status message . --> status --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int [[status]] , byte [ ] [[content]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( status , new HttpEntity . Strict ( ByteString . fromArray ( [[content]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result status ( int [[rule]] , byte [ ] [[rejoice]] ) { if ( [[rejoice]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( status , new HttpEntity . Strict ( ByteString . fromArray ( [[rejoice]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .


--------------------------------------------- Result 570 ---------------------------------------------
Sends a status message to the server . --> Send an article to an article --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , InputStream content , long contentLength ) { return [[status]] ( [[status]] ) . sendInputStream ( content , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result [[article]] ( int status , InputStream content , long contentLength ) { return [[article]] ( [[article]] ) . sendInputStream ( content , contentLength ) ; }
[[[[Nl]]]]: Generates a chunked result .


[Succeeded / Failed / Skipped / Total] 360 / 200 / 11 / 571:  57%|█████▋    | 571/1000 [3:36:26<2:42:36, 22.74s/it][Succeeded / Failed / Skipped / Total] 360 / 200 / 11 / 571:  57%|█████▋    | 572/1000 [3:36:26<2:41:57, 22.70s/it][Succeeded / Failed / Skipped / Total] 360 / 200 / 12 / 572:  57%|█████▋    | 572/1000 [3:36:26<2:41:57, 22.70s/it][Succeeded / Failed / Skipped / Total] 360 / 200 / 12 / 572:  57%|█████▋    | 573/1000 [3:36:41<2:41:28, 22.69s/it][Succeeded / Failed / Skipped / Total] 360 / 201 / 12 / 573:  57%|█████▋    | 573/1000 [3:36:41<2:41:28, 22.69s/it][Succeeded / Failed / Skipped / Total] 360 / 201 / 12 / 573:  57%|█████▋    | 574/1000 [3:36:48<2:40:54, 22.66s/it][Succeeded / Failed / Skipped / Total] 361 / 201 / 12 / 574:  57%|█████▋    | 574/1000 [3:36:48<2:40:54, 22.66s/it][Succeeded / Failed / Skipped / Total] 361 / 201 / 12 / 574:  57%|█████▊    | 575/1000 [3:37:02<2:40:25, 22.65s/it][Succeeded / Failed / Skipped / Total] 362 / 201 / 12 / 575:  57%|█████▊    | 575/1000 [3:37:02<2:40:25, 22.65s/it][Succeeded / Failed / Skipped / Total] 362 / 201 / 12 / 575:  58%|█████▊    | 576/1000 [3:37:09<2:39:51, 22.62s/it][Succeeded / Failed / Skipped / Total] 363 / 201 / 12 / 576:  58%|█████▊    | 576/1000 [3:37:09<2:39:51, 22.62s/it][Succeeded / Failed / Skipped / Total] 363 / 201 / 12 / 576:  58%|█████▊    | 577/1000 [3:37:26<2:39:24, 22.61s/it][Succeeded / Failed / Skipped / Total] 364 / 201 / 12 / 577:  58%|█████▊    | 577/1000 [3:37:26<2:39:24, 22.61s/it][Succeeded / Failed / Skipped / Total] 364 / 201 / 12 / 577:  58%|█████▊    | 578/1000 [3:38:00<2:39:09, 22.63s/it][Succeeded / Failed / Skipped / Total] 364 / 202 / 12 / 578:  58%|█████▊    | 578/1000 [3:38:00<2:39:09, 22.63s/it][Succeeded / Failed / Skipped / Total] 364 / 202 / 12 / 578:  58%|█████▊    | 579/1000 [3:38:18<2:38:44, 22.62s/it][Succeeded / Failed / Skipped / Total] 364 / 203 / 12 / 579:  58%|█████▊    | 579/1000 [3:38:18<2:38:44, 22.62s/it][Succeeded / Failed / Skipped / Total] 364 / 203 / 12 / 579:  58%|█████▊    | 580/1000 [3:38:49<2:38:27, 22.64s/it][Succeeded / Failed / Skipped / Total] 364 / 204 / 12 / 580:  58%|█████▊    | 580/1000 [3:38:49<2:38:27, 22.64s/it][Succeeded / Failed / Skipped / Total] 364 / 204 / 12 / 580:  58%|█████▊    | 581/1000 [3:38:56<2:37:53, 22.61s/it][Succeeded / Failed / Skipped / Total] 365 / 204 / 12 / 581:  58%|█████▊    | 581/1000 [3:38:56<2:37:53, 22.61s/it][Succeeded / Failed / Skipped / Total] 365 / 204 / 12 / 581:  58%|█████▊    | 582/1000 [3:39:04<2:37:20, 22.59s/it]--------------------------------------------- Result 571 ---------------------------------------------
Creates a Status response with the given content . --> Article --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , File content ) { return [[status]] ( [[status]] , content , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[article]] ( int status , File content ) { return [[article]] ( [[article]] , content , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .


--------------------------------------------- Result 572 ---------------------------------------------
Find a user by id --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation


--------------------------------------------- Result 573 ---------------------------------------------
Selects the best matching language . --> [[[FAILED]]]

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > [[candidates]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[candidates]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[privileged]] ( Collection < Lang > [[challengers]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[challengers]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .


--------------------------------------------- Result 574 ---------------------------------------------
Returns a unique copy of this call . --> Create an odd call --> Socre: 1.0

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[odd]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .


--------------------------------------------- Result 575 ---------------------------------------------
Returns a new call with the specified fragment . --> Control this request --> Socre: 1.0

[[[[Adv]]]]: public Call [[withFragment]] ( String [[fragment]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[fragment]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call [[controlling]] ( String [[shine]] ) { return new play . api . mvc . Call ( method ( ) , url ( ) , [[shine]] ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .


--------------------------------------------- Result 576 ---------------------------------------------
Returns the absolute URL of the given request . --> Generate a HTTP request --> Socre: 1.0

[[[[Adv]]]]: public String [[absoluteURL]] ( Http . Request request ) { return [[absoluteURL]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String [[aimee]] ( Http . Request request ) { return [[aimee]] ( request . secure ( ) , request . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .


--------------------------------------------- Result 577 ---------------------------------------------
Returns the web socket URL for the given request . --> Returns the flaccid for the given request --> Socre: 1.0

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request [[request]] ) { return [[webSocketURL]] ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[flaccid]] ( Http . Request [[solicit]] ) { return [[flaccid]] ( [[solicit]] . secure ( ) , [[solicit]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .


--------------------------------------------- Result 578 ---------------------------------------------
Creates a function that returns a function that executes the given connection . --> [[[FAILED]]]

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > connectionFunction ( final ConnectionRunnable [[block]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection [[connection]] ) { try { [[block]] . run ( [[connection]] ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > connectionFunction ( final ConnectionRunnable [[blocks]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection [[bound]] ) { try { [[blocks]] . run ( [[bound]] ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .


--------------------------------------------- Result 579 ---------------------------------------------
Returns a function that wraps a connection function . --> [[[FAILED]]]

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > block ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[connection]] ) { try { return block . call ( [[connection]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > block ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[relationships]] ) { try { return block . call ( [[relationships]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .


--------------------------------------------- Result 580 ---------------------------------------------
Creates a server with the given parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode mode , int port , Function < BuiltInComponents , Router > [[block]] ) { return new Builder ( ) . mode ( mode ) . http ( port ) . build ( [[block]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[brassieres]] ( Mode mode , int port , Function < BuiltInComponents , Router > [[blockaded]] ) { return new Builder ( ) . mode ( mode ) . http ( port ) . build ( [[blockaded]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .


--------------------------------------------- Result 581 ---------------------------------------------
Convert the given object to a JsonNode . --> Proceeds the given data --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[toJson]] ( final Object data ) { try { return mapper ( ) . valueToTree ( data ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode [[clinical]] ( final Object data ) { try { return mapper ( ) . valueToTree ( data ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .


--------------------------------------------- Result 582 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 366 / 204 / 12 / 582:  58%|█████▊    | 582/1000 [3:39:04<2:37:20, 22.59s/it][Succeeded / Failed / Skipped / Total] 366 / 204 / 12 / 582:  58%|█████▊    | 583/1000 [3:39:20<2:36:53, 22.57s/it][Succeeded / Failed / Skipped / Total] 366 / 205 / 12 / 583:  58%|█████▊    | 583/1000 [3:39:20<2:36:53, 22.57s/it][Succeeded / Failed / Skipped / Total] 366 / 205 / 12 / 583:  58%|█████▊    | 584/1000 [3:39:37<2:36:26, 22.56s/it][Succeeded / Failed / Skipped / Total] 367 / 205 / 12 / 584:  58%|█████▊    | 584/1000 [3:39:37<2:36:26, 22.56s/it][Succeeded / Failed / Skipped / Total] 367 / 205 / 12 / 584:  58%|█████▊    | 585/1000 [3:39:51<2:35:58, 22.55s/it][Succeeded / Failed / Skipped / Total] 368 / 205 / 12 / 585:  58%|█████▊    | 585/1000 [3:39:51<2:35:58, 22.55s/it][Succeeded / Failed / Skipped / Total] 368 / 205 / 12 / 585:  59%|█████▊    | 586/1000 [3:40:06<2:35:30, 22.54s/it][Succeeded / Failed / Skipped / Total] 369 / 205 / 12 / 586:  59%|█████▊    | 586/1000 [3:40:06<2:35:30, 22.54s/it][Succeeded / Failed / Skipped / Total] 369 / 205 / 12 / 586:  59%|█████▊    | 587/1000 [3:40:17<2:34:59, 22.52s/it][Succeeded / Failed / Skipped / Total] 370 / 205 / 12 / 587:  59%|█████▊    | 587/1000 [3:40:17<2:34:59, 22.52s/it][Succeeded / Failed / Skipped / Total] 370 / 205 / 12 / 587:  59%|█████▉    | 588/1000 [3:40:45<2:34:41, 22.53s/it][Succeeded / Failed / Skipped / Total] 370 / 206 / 12 / 588:  59%|█████▉    | 588/1000 [3:40:45<2:34:41, 22.53s/it][Succeeded / Failed / Skipped / Total] 370 / 206 / 12 / 588:  59%|█████▉    | 589/1000 [3:41:30<2:34:33, 22.56s/it][Succeeded / Failed / Skipped / Total] 370 / 207 / 12 / 589:  59%|█████▉    | 589/1000 [3:41:30<2:34:33, 22.56s/it][Succeeded / Failed / Skipped / Total] 370 / 207 / 12 / 589:  59%|█████▉    | 590/1000 [3:41:41<2:34:03, 22.55s/it]Converts a JsonNode to a Java object . --> Deserialize cada from json . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[cada]] > [[cada]] fromJson ( JsonNode json , Class < [[cada]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value


--------------------------------------------- Result 583 ---------------------------------------------
Parse the given string into a JsonNode . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode [[parse]] ( String [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[reserves]] ( String [[befallen]] ) { try { return mapper ( ) . readTree ( [[befallen]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .


--------------------------------------------- Result 584 ---------------------------------------------
Parse a JsonNode from a stream . --> Protected for testing --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[parse]] ( java . io . InputStream [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[vulnerable]] ( java . io . InputStream [[electrics]] ) { try { return mapper ( ) . readTree ( [[electrics]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .


--------------------------------------------- Result 585 ---------------------------------------------
Relative path relative to startPath --> Compare tive --> Socre: 1.0

[[[[Adv]]]]: public static String [[relative]] ( String [[startPath]] , String targetPath ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[comparative]] ( String [[tive]] , String targetPath ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .


--------------------------------------------- Result 586 ---------------------------------------------
Returns canonical version of the given URL . --> Returns art of the specified url --> Socre: 1.0

[[[[Adv]]]]: public static String [[canonical]] ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > [[canonical]] = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[canonical]] . empty ( ) && [[canonical]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[canonical]] . push ( comp ) ; else [[canonical]] . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String [[trailingSep]] = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[canonical]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + [[trailingSep]] ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String [[art]] ( String url ) { String [ ] urlPath = toSegments ( url ) ; Stack < String > [[art]] = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[art]] . empty ( ) && [[art]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[art]] . push ( comp ) ; else [[art]] . pop ( ) ; } String prefixSep = url . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String [[paxil]] = url . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[art]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + [[paxil]] ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .


--------------------------------------------- Result 587 ---------------------------------------------
Displays the given constraints . --> Get displayable constraint --> Socre: 1.0

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > displayableConstraint ( Set < ConstraintDescriptor < ? > > [[constraints]] ) { return [[constraints]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> displayableConstraint ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > displayableConstraint ( Set < ConstraintDescriptor < ? > > [[handicap]] ) { return [[handicap]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> displayableConstraint ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .


--------------------------------------------- Result 588 ---------------------------------------------
Displays a displayable constraint . --> [[[FAILED]]]

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[displayableConstraint]] ( ConstraintDescriptor < ? > [[constraint]] ) { final Display displayAnnotation = [[constraint]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[constraint]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[fixes]] ( ConstraintDescriptor < ? > [[moderation]] ) { final Display displayAnnotation = [[moderation]] . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( displayAnnotation . name ( ) , Collections . unmodifiableList ( Stream . of ( displayAnnotation . attributes ( ) ) . map ( attr -> [[moderation]] . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .


--------------------------------------------- Result 589 ---------------------------------------------
Performs a timeout after the given amount of time . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[timeout]] ( final CompletionStage < A > [[stage]] , final long amount , final TimeUnit unit ) { requireNonNull ( [[stage]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> [[stage]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[redial]] ( final CompletionStage < A > [[stadiums]] , final long amount , final TimeUnit unit ) { requireNonNull ( [[stadiums]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( amount , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> [[stadiums]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .


[Succeeded / Failed / Skipped / Total] 371 / 207 / 12 / 590:  59%|█████▉    | 590/1000 [3:41:41<2:34:03, 22.55s/it][Succeeded / Failed / Skipped / Total] 371 / 207 / 12 / 590:  59%|█████▉    | 591/1000 [3:41:48<2:33:30, 22.52s/it][Succeeded / Failed / Skipped / Total] 372 / 207 / 12 / 591:  59%|█████▉    | 591/1000 [3:41:48<2:33:30, 22.52s/it][Succeeded / Failed / Skipped / Total] 372 / 207 / 12 / 591:  59%|█████▉    | 592/1000 [3:41:55<2:32:56, 22.49s/it][Succeeded / Failed / Skipped / Total] 373 / 207 / 12 / 592:  59%|█████▉    | 592/1000 [3:41:55<2:32:56, 22.49s/it][Succeeded / Failed / Skipped / Total] 373 / 207 / 12 / 592:  59%|█████▉    | 593/1000 [3:42:37<2:32:47, 22.53s/it][Succeeded / Failed / Skipped / Total] 373 / 208 / 12 / 593:  59%|█████▉    | 593/1000 [3:42:37<2:32:47, 22.53s/it][Succeeded / Failed / Skipped / Total] 373 / 208 / 12 / 593:  59%|█████▉    | 594/1000 [3:42:53<2:32:20, 22.51s/it][Succeeded / Failed / Skipped / Total] 373 / 209 / 12 / 594:  59%|█████▉    | 594/1000 [3:42:53<2:32:20, 22.51s/it][Succeeded / Failed / Skipped / Total] 373 / 209 / 12 / 594:  60%|█████▉    | 595/1000 [3:43:02<2:31:48, 22.49s/it][Succeeded / Failed / Skipped / Total] 374 / 209 / 12 / 595:  60%|█████▉    | 595/1000 [3:43:02<2:31:48, 22.49s/it][Succeeded / Failed / Skipped / Total] 374 / 209 / 12 / 595:  60%|█████▉    | 596/1000 [3:43:10<2:31:16, 22.47s/it][Succeeded / Failed / Skipped / Total] 375 / 209 / 12 / 596:  60%|█████▉    | 596/1000 [3:43:10<2:31:16, 22.47s/it][Succeeded / Failed / Skipped / Total] 375 / 209 / 12 / 596:  60%|█████▉    | 597/1000 [3:43:25<2:30:49, 22.45s/it][Succeeded / Failed / Skipped / Total] 376 / 209 / 12 / 597:  60%|█████▉    | 597/1000 [3:43:25<2:30:49, 22.45s/it][Succeeded / Failed / Skipped / Total] 376 / 209 / 12 / 597:  60%|█████▉    | 598/1000 [3:43:31<2:30:15, 22.43s/it][Succeeded / Failed / Skipped / Total] 376 / 210 / 12 / 598:  60%|█████▉    | 598/1000 [3:43:31<2:30:15, 22.43s/it][Succeeded / Failed / Skipped / Total] 376 / 210 / 12 / 598:  60%|█████▉    | 599/1000 [3:43:39<2:29:43, 22.40s/it][Succeeded / Failed / Skipped / Total] 376 / 211 / 12 / 599:  60%|█████▉    | 599/1000 [3:43:39<2:29:43, 22.40s/it][Succeeded / Failed / Skipped / Total] 376 / 211 / 12 / 599:  60%|██████    | 600/1000 [3:43:52<2:29:15, 22.39s/it]--------------------------------------------- Result 590 ---------------------------------------------
Checks whether the given classes are assignable . --> Auxiliary method for testing --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return False ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( [[isAssignable]] ( classArray [ i ] , toClassArray [ i ] , autoboxing ) == False ) { return False ; } } return True ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[hadassah]] ( Class < ? > [ ] classArray , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( classArray ) != arrayGetLength ( toClassArray ) ) { return False ; } if ( classArray == null ) { classArray = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < classArray . length ; i ++ ) { if ( [[hadassah]] ( classArray [ i ] , toClassArray [ i ] , autoboxing ) == False ) { return False ; } } return True ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .


--------------------------------------------- Result 591 ---------------------------------------------
Parse cron expression --> The date after date --> Socre: 1.0

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String cron ) { try { return new CronExpression ( cron ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[beachfront]] ( String cron ) { try { return new CronExpression ( cron ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .


--------------------------------------------- Result 592 ---------------------------------------------
Get the next interval --> Calculate AMO --> Socre: 1.0

[[[[Adv]]]]: public static long [[cronInterval]] ( String cron , Date date ) { try { return new CronExpression ( cron ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long [[amiga]] ( String cron , Date date ) { try { return new CronExpression ( cron ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .


--------------------------------------------- Result 593 ---------------------------------------------
Creates an ahc client . --> [[[FAILED]]]

[[[[Adv]]]]: public static AhcWSClient [[create]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient [[forging]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .


--------------------------------------------- Result 594 ---------------------------------------------
Returns a GuiceApplication initialized with the given context . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context [[context]] ) { return initialBuilder . in ( [[context]] . environment ( ) ) . loadConfig ( [[context]] . initialConfig ( ) ) . overrides ( overrides ( [[context]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[stylist]] ( ApplicationLoader . Context [[histories]] ) { return initialBuilder . in ( [[histories]] . environment ( ) ) . loadConfig ( [[histories]] . initialConfig ( ) ) . overrides ( overrides ( [[histories]] ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .


--------------------------------------------- Result 595 ---------------------------------------------
This method displays the requested request . --> This method displays the given request --> Socre: 1.0

[[[[Adv]]]]: public static Result TODO ( Request [[request]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[request]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result TODO ( Request [[calling]] ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( [[calling]] . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .


--------------------------------------------- Result 596 ---------------------------------------------
Set a session value --> This method is used for debugging purposes --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void session ( String [[key]] , String value ) { session ( ) . put ( [[key]] , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void session ( String [[crucial]] , String value ) { session ( ) . put ( [[crucial]] , value ) ; }
[[[[Nl]]]]: Puts a new value into the current session .


--------------------------------------------- Result 597 ---------------------------------------------
Sets a value to the flash object . --> Support for flicker --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[flash]] ( String key , String [[value]] ) { [[flash]] ( ) . put ( key , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void [[flicker]] ( String key , String [[utility]] ) { [[flicker]] ( ) . put ( key , [[utility]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .


--------------------------------------------- Result 598 ---------------------------------------------
Returns the binding key . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[applies]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .


--------------------------------------------- Result 599 ---------------------------------------------
Returns the binding key of this binding . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[broadens]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .


--------------------------------------------- Result 600 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 377 / 211 / 12 / 600:  60%|██████    | 600/1000 [3:43:52<2:29:15, 22.39s/it][Succeeded / Failed / Skipped / Total] 377 / 211 / 12 / 600:  60%|██████    | 601/1000 [3:44:07<2:28:47, 22.38s/it][Succeeded / Failed / Skipped / Total] 377 / 212 / 12 / 601:  60%|██████    | 601/1000 [3:44:07<2:28:47, 22.38s/it][Succeeded / Failed / Skipped / Total] 377 / 212 / 12 / 601:  60%|██████    | 602/1000 [3:44:15<2:28:15, 22.35s/it][Succeeded / Failed / Skipped / Total] 377 / 213 / 12 / 602:  60%|██████    | 602/1000 [3:44:15<2:28:15, 22.35s/it][Succeeded / Failed / Skipped / Total] 377 / 213 / 12 / 602:  60%|██████    | 603/1000 [3:44:30<2:27:48, 22.34s/it][Succeeded / Failed / Skipped / Total] 378 / 213 / 12 / 603:  60%|██████    | 603/1000 [3:44:30<2:27:48, 22.34s/it][Succeeded / Failed / Skipped / Total] 378 / 213 / 12 / 603:  60%|██████    | 604/1000 [3:44:50<2:27:24, 22.34s/it][Succeeded / Failed / Skipped / Total] 379 / 213 / 12 / 604:  60%|██████    | 604/1000 [3:44:50<2:27:24, 22.34s/it][Succeeded / Failed / Skipped / Total] 379 / 213 / 12 / 604:  60%|██████    | 605/1000 [3:45:23<2:27:09, 22.35s/it][Succeeded / Failed / Skipped / Total] 379 / 214 / 12 / 605:  60%|██████    | 605/1000 [3:45:23<2:27:09, 22.35s/it][Succeeded / Failed / Skipped / Total] 379 / 214 / 12 / 605:  61%|██████    | 606/1000 [3:46:02<2:26:57, 22.38s/it][Succeeded / Failed / Skipped / Total] 379 / 215 / 12 / 606:  61%|██████    | 606/1000 [3:46:02<2:26:57, 22.38s/it][Succeeded / Failed / Skipped / Total] 379 / 215 / 12 / 606:  61%|██████    | 607/1000 [3:46:19<2:26:31, 22.37s/it][Succeeded / Failed / Skipped / Total] 379 / 216 / 12 / 607:  61%|██████    | 607/1000 [3:46:19<2:26:31, 22.37s/it][Succeeded / Failed / Skipped / Total] 379 / 216 / 12 / 607:  61%|██████    | 608/1000 [3:46:38<2:26:07, 22.37s/it][Succeeded / Failed / Skipped / Total] 380 / 216 / 12 / 608:  61%|██████    | 608/1000 [3:46:38<2:26:07, 22.37s/it][Succeeded / Failed / Skipped / Total] 380 / 216 / 12 / 608:  61%|██████    | 609/1000 [3:47:14<2:25:53, 22.39s/it]Converts this binding to a Java binding . --> Encode achievement --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final Class < ? extends T > [[implementation]] ) { return underlying . to ( [[implementation]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > [[entre]] ( final Class < ? extends T > [[achievement]] ) { return underlying . to ( [[achievement]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .


--------------------------------------------- Result 601 ---------------------------------------------
Converts the binding to the given provider . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > provider ) { return underlying . to ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[against]] ( final Provider < ? extends T > provider ) { return underlying . to ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .


--------------------------------------------- Result 602 ---------------------------------------------
Converts this binding to a Java binding . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[amplify]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .


--------------------------------------------- Result 603 ---------------------------------------------
Converts this binding to a Java binding . --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > [[key]] ) { return underlying . to ( [[key]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[dans]] ( final BindingKey < ? extends T > [[predicate]] ) { return underlying . to ( [[predicate]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .


--------------------------------------------- Result 604 ---------------------------------------------
Converts the underlying provider to the Java provider . --> Convenience factory method --> Socre: 1.0

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > [[toProvider]] ( final Class < P > [[provider]] ) { return underlying . toProvider ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P extends Provider < ? extends T > > Binding < T > [[dieting]] ( final Class < P > [[salesman]] ) { return underlying . toProvider ( [[salesman]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .


--------------------------------------------- Result 605 ---------------------------------------------
Returns a list of available languages . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Lang > [[availables]] ( Application [[app]] ) { play . api . i18n . Langs langs = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[availableLangs]] = Scala . asJava ( langs . availables ( ) ) ; return [[availableLangs]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > [[sarsaparilla]] ( Application [[conceivably]] ) { play . api . i18n . Langs langs = [[conceivably]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > [[alm]] = Scala . asJava ( langs . availables ( ) ) ; return [[alm]] . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .


--------------------------------------------- Result 606 ---------------------------------------------
Returns the preferred . --> [[[FAILED]]]

[[[[Adv]]]]: public static Lang [[preferred]] ( Application app , List < Lang > availableLangs ) { play . api . i18n . Langs [[langs]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( [[langs]] . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[privileged]] ( Application app , List < Lang > availableLangs ) { play . api . i18n . Langs [[chugs]] = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = availableLangs . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( [[chugs]] . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .


--------------------------------------------- Result 607 ---------------------------------------------
Creates a new EvolutionsReader from a map of Evolutions . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > evolutions ) { return new SimpleEvolutionsReader ( evolutions ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[trifecta]] ( Map < String , List < Evolution > > evolutions ) { return new SimpleEvolutionsReader ( evolutions ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .


--------------------------------------------- Result 608 ---------------------------------------------
Creates a reader for a list of Evolutions . --> Creates new triggers --> Socre: 1.0

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader forDefault ( Evolution ... [[evolutions]] ) { Map < String , List < Evolution > > [[map]] = new HashMap < String , List < Evolution > > ( ) ; [[map]] . put ( "default" , Arrays . asList ( [[evolutions]] ) ) ; return fromMap ( [[map]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . [[medication]] . EvolutionsReader forDefault ( Evolution ... [[medication]] ) { Map < String , List < Evolution > > [[charts]] = new HashMap < String , List < Evolution > > ( ) ; [[charts]] . put ( "default" , Arrays . asList ( [[medication]] ) ) ; return fromMap ( [[charts]] ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .


--------------------------------------------- Result 609 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 380 / 217 / 12 / 609:  61%|██████    | 609/1000 [3:47:14<2:25:53, 22.39s/it][Succeeded / Failed / Skipped / Total] 380 / 217 / 12 / 609:  61%|██████    | 610/1000 [3:47:42<2:25:34, 22.40s/it][Succeeded / Failed / Skipped / Total] 380 / 218 / 12 / 610:  61%|██████    | 610/1000 [3:47:42<2:25:34, 22.40s/it][Succeeded / Failed / Skipped / Total] 380 / 218 / 12 / 610:  61%|██████    | 611/1000 [3:48:01<2:25:10, 22.39s/it][Succeeded / Failed / Skipped / Total] 381 / 218 / 12 / 611:  61%|██████    | 611/1000 [3:48:01<2:25:10, 22.39s/it][Succeeded / Failed / Skipped / Total] 381 / 218 / 12 / 611:  61%|██████    | 612/1000 [3:48:23<2:24:47, 22.39s/it][Succeeded / Failed / Skipped / Total] 381 / 219 / 12 / 612:  61%|██████    | 612/1000 [3:48:23<2:24:47, 22.39s/it][Succeeded / Failed / Skipped / Total] 381 / 219 / 12 / 612:  61%|██████▏   | 613/1000 [3:48:38<2:24:20, 22.38s/it][Succeeded / Failed / Skipped / Total] 381 / 220 / 12 / 613:  61%|██████▏   | 613/1000 [3:48:38<2:24:20, 22.38s/it][Succeeded / Failed / Skipped / Total] 381 / 220 / 12 / 613:  61%|██████▏   | 614/1000 [3:48:53<2:23:53, 22.37s/it][Succeeded / Failed / Skipped / Total] 382 / 220 / 12 / 614:  61%|██████▏   | 614/1000 [3:48:53<2:23:53, 22.37s/it][Succeeded / Failed / Skipped / Total] 382 / 220 / 12 / 614:  62%|██████▏   | 615/1000 [3:49:09<2:23:27, 22.36s/it][Succeeded / Failed / Skipped / Total] 382 / 221 / 12 / 615:  62%|██████▏   | 615/1000 [3:49:09<2:23:27, 22.36s/it][Succeeded / Failed / Skipped / Total] 382 / 221 / 12 / 615:  62%|██████▏   | 616/1000 [3:49:18<2:22:56, 22.33s/it][Succeeded / Failed / Skipped / Total] 383 / 221 / 12 / 616:  62%|██████▏   | 616/1000 [3:49:18<2:22:56, 22.33s/it][Succeeded / Failed / Skipped / Total] 383 / 221 / 12 / 616:  62%|██████▏   | 617/1000 [3:49:30<2:22:28, 22.32s/it][Succeeded / Failed / Skipped / Total] 384 / 221 / 12 / 617:  62%|██████▏   | 617/1000 [3:49:30<2:22:28, 22.32s/it][Succeeded / Failed / Skipped / Total] 384 / 221 / 12 / 617:  62%|██████▏   | 618/1000 [3:49:49<2:22:03, 22.31s/it]Removes all executions from the given database . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[cleanupEvolutions]] ( Database [[database]] , boolean autocommit , String schema ) { DatabaseEvolutions [[evolutions]] = new DatabaseEvolutions ( [[database]] . asScala ( ) , schema ) ; [[evolutions]] . evolve ( [[evolutions]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void [[bungler]] ( Database [[basics]] , boolean autocommit , String schema ) { DatabaseEvolutions [[auspices]] = new DatabaseEvolutions ( [[basics]] . asScala ( ) , schema ) ; [[auspices]] . evolve ( [[auspices]] . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .


--------------------------------------------- Result 610 ---------------------------------------------
Loads configuration from Guice . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder withConfigLoader ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder withConfigLoader ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment env ) -> new play . api . Configuration ( load . apply ( new Environment ( env ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .


--------------------------------------------- Result 611 ---------------------------------------------
Loads a set of Guiceable modules . --> Load a flamer --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[withModuleLoader]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment [[env]] , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( [[env]] ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[flamer]] ( BiFunction < Environment , Config , List < GuiceableModule > > loader ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment [[disappointment]] , play . api . Configuration conf ) -> Scala . toSeq ( loader . apply ( new Environment ( [[disappointment]] ) , conf . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .


--------------------------------------------- Result 612 ---------------------------------------------
Load the Guice from the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[overloading]] ( GuiceableModule ... [[conglomerates]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[conglomerates]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .


--------------------------------------------- Result 613 ---------------------------------------------
Loads the application from the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( com . google . inject . Module ... modules ) { return [[load]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[weighing]] ( com . google . inject . Module ... modules ) { return [[weighing]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .


--------------------------------------------- Result 614 ---------------------------------------------
Loads the application with the given modules . --> Adds a grouping grouping --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Module ... [[modules]] ) { return [[load]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[payload]] ( play . api . inject . Module ... [[grouping]] ) { return [[payload]] ( Guiceable . [[grouping]] ( [[grouping]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .


--------------------------------------------- Result 615 ---------------------------------------------
Loads the application with the given bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[load]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder [[brunt]] ( play . api . inject . Binding < ? > ... [[binding]] ) { return [[brunt]] ( Guiceable . [[binding]] ( [[binding]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .


--------------------------------------------- Result 616 ---------------------------------------------
Create a builder for the given GuiceApplicationBuilder . --> Create a new GuiceApplicationBuilder --> Socre: 1.0

[[[[Adv]]]]: protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder [[builder]] ) { return new GuiceApplicationBuilder ( [[builder]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder [[cartoonist]] ) { return new GuiceApplicationBuilder ( [[cartoonist]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .


--------------------------------------------- Result 617 ---------------------------------------------
Encode a cookie . --> Encode cookies --> Socre: 1.0

[[[[Adv]]]]: public String encode ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[buf]] = new StringBuilder ( ) ; encode ( [[buf]] , [[cookie]] ) ; return stripTrailingSeparator ( [[buf]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie [[biscuits]] ) { if ( [[biscuits]] == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[sleeps]] = new StringBuilder ( ) ; encode ( [[sleeps]] , [[biscuits]] ) ; return stripTrailingSeparator ( [[sleeps]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .


--------------------------------------------- Result 618 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 384 / 222 / 12 / 618:  62%|██████▏   | 618/1000 [3:49:49<2:22:03, 22.31s/it][Succeeded / Failed / Skipped / Total] 384 / 222 / 12 / 618:  62%|██████▏   | 619/1000 [3:50:24<2:21:49, 22.33s/it][Succeeded / Failed / Skipped / Total] 385 / 222 / 12 / 619:  62%|██████▏   | 619/1000 [3:50:24<2:21:49, 22.33s/it][Succeeded / Failed / Skipped / Total] 385 / 222 / 12 / 619:  62%|██████▏   | 620/1000 [3:51:03<2:21:36, 22.36s/it][Succeeded / Failed / Skipped / Total] 386 / 222 / 12 / 620:  62%|██████▏   | 620/1000 [3:51:03<2:21:36, 22.36s/it][Succeeded / Failed / Skipped / Total] 386 / 222 / 12 / 620:  62%|██████▏   | 621/1000 [3:51:19<2:21:10, 22.35s/it][Succeeded / Failed / Skipped / Total] 387 / 222 / 12 / 621:  62%|██████▏   | 621/1000 [3:51:19<2:21:10, 22.35s/it][Succeeded / Failed / Skipped / Total] 387 / 222 / 12 / 621:  62%|██████▏   | 622/1000 [3:51:49<2:20:53, 22.36s/it][Succeeded / Failed / Skipped / Total] 388 / 222 / 12 / 622:  62%|██████▏   | 622/1000 [3:51:49<2:20:53, 22.36s/it][Succeeded / Failed / Skipped / Total] 388 / 222 / 12 / 622:  62%|██████▏   | 623/1000 [3:52:41<2:20:48, 22.41s/it][Succeeded / Failed / Skipped / Total] 389 / 222 / 12 / 623:  62%|██████▏   | 623/1000 [3:52:41<2:20:48, 22.41s/it][Succeeded / Failed / Skipped / Total] 389 / 222 / 12 / 623:  62%|██████▏   | 624/1000 [3:53:02<2:20:25, 22.41s/it]Gets the entity manager . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( ) { Deque < EntityManager > [[ems]] = this . emStack ( True ) ; if ( [[ems]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[ems]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager [[swipe]] ( ) { Deque < EntityManager > [[sss]] = this . emStack ( True ) ; if ( [[sss]] . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return [[sss]] . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .


--------------------------------------------- Result 619 ---------------------------------------------
Returns the current em stack . --> returns a new Queue --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[emStack]] ( boolean [[threadLocalFallback]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[lp]] ( boolean [[pronto]] ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object emsObject = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( emsObject != null ) { return ( Deque < EntityManager > ) emsObject ; } else { Deque < EntityManager > ems = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , ems ) ; return ems ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .


--------------------------------------------- Result 620 ---------------------------------------------
Pushes the given entity onto the stack . --> Renames entity manager --> Socre: 1.0

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager [[em]] , boolean [[threadLocalFallback]] ) { Deque < EntityManager > ems = this . emStack ( [[threadLocalFallback]] ) ; if ( [[em]] != null ) { ems . push ( [[em]] ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[rené]] ( EntityManager [[per]] , boolean [[chartered]] ) { Deque < EntityManager > ems = this . emStack ( [[chartered]] ) ; if ( [[per]] != null ) { ems . push ( [[per]] ) ; } else { if ( ems . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } ems . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .


--------------------------------------------- Result 621 ---------------------------------------------
Create a flow with the specified function . --> an lnsurance --> Socre: 1.0

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[bypassWith]] ( Function < In , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > [[flow]] ) { return [[bypassWith]] ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[flow]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[lnsurance]] ( Function < In , F . Either < FlowIn , Out > > splitter , Flow < FlowIn , Out , ? > [[creek]] ) { return [[lnsurance]] ( Flow . < In > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[creek]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .


--------------------------------------------- Result 622 ---------------------------------------------
Proactively bypassing the given splitter . --> Handy method for Hargue --> Socre: 1.0

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[bypassWith]] ( Flow < In , F . Either < FlowIn , Out > , ? > [[splitter]] , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > flow ) { return [[splitter]] . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[hargrave]] ( Flow < In , F . Either < FlowIn , Out > , ? > [[compactor]] , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > flow ) { return [[compactor]] . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .


--------------------------------------------- Result 623 ---------------------------------------------
Creates a flow from an actor ref . --> Shortcut method for long streams --> Socre: 1.0

[[[[Adv]]]]: public static < [[In]] , Out > Flow < [[In]] , Out , ? > [[actorRef]] ( Function < ActorRef , Props > props , int [[bufferSize]] , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < [[In]] , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef [[v1]] ) { return props . apply ( [[v1]] ) ; } } , [[bufferSize]] , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < [[Across]] , Out > Flow < [[Across]] , Out , ? > [[longed]] ( Function < ActorRef , Props > props , int [[seeing]] , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < [[Across]] , Out > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef [[gordini]] ) { return props . apply ( [[gordini]] ) ; } } , [[seeing]] , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .


--------------------------------------------- Result 624 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 390 / 222 / 12 / 624:  62%|██████▏   | 624/1000 [3:53:02<2:20:25, 22.41s/it][Succeeded / Failed / Skipped / Total] 390 / 222 / 12 / 624:  62%|██████▎   | 625/1000 [3:53:16<2:19:58, 22.39s/it][Succeeded / Failed / Skipped / Total] 390 / 223 / 12 / 625:  62%|██████▎   | 625/1000 [3:53:16<2:19:58, 22.39s/it][Succeeded / Failed / Skipped / Total] 390 / 223 / 12 / 625:  63%|██████▎   | 626/1000 [3:53:24<2:19:26, 22.37s/it][Succeeded / Failed / Skipped / Total] 390 / 224 / 12 / 626:  63%|██████▎   | 626/1000 [3:53:24<2:19:26, 22.37s/it][Succeeded / Failed / Skipped / Total] 390 / 224 / 12 / 626:  63%|██████▎   | 627/1000 [3:54:03<2:19:14, 22.40s/it][Succeeded / Failed / Skipped / Total] 390 / 225 / 12 / 627:  63%|██████▎   | 627/1000 [3:54:03<2:19:14, 22.40s/it][Succeeded / Failed / Skipped / Total] 390 / 225 / 12 / 627:  63%|██████▎   | 628/1000 [3:54:11<2:18:43, 22.37s/it][Succeeded / Failed / Skipped / Total] 391 / 225 / 12 / 628:  63%|██████▎   | 628/1000 [3:54:11<2:18:43, 22.37s/it][Succeeded / Failed / Skipped / Total] 391 / 225 / 12 / 628:  63%|██████▎   | 629/1000 [3:54:38<2:18:23, 22.38s/it][Succeeded / Failed / Skipped / Total] 391 / 226 / 12 / 629:  63%|██████▎   | 629/1000 [3:54:38<2:18:23, 22.38s/it][Succeeded / Failed / Skipped / Total] 391 / 226 / 12 / 629:  63%|██████▎   | 630/1000 [3:54:46<2:17:52, 22.36s/it][Succeeded / Failed / Skipped / Total] 391 / 227 / 12 / 630:  63%|██████▎   | 630/1000 [3:54:46<2:17:52, 22.36s/it][Succeeded / Failed / Skipped / Total] 391 / 227 / 12 / 630:  63%|██████▎   | 631/1000 [3:54:54<2:17:22, 22.34s/it][Succeeded / Failed / Skipped / Total] 392 / 227 / 12 / 631:  63%|██████▎   | 631/1000 [3:54:54<2:17:22, 22.34s/it][Succeeded / Failed / Skipped / Total] 392 / 227 / 12 / 631:  63%|██████▎   | 632/1000 [3:55:01<2:16:50, 22.31s/it]Convert the error arguments . --> Returns an unmodifiable list of objects --> Socre: 1.0

[[[[Adv]]]]: private List < Object > [[convertErrorArguments]] ( Object [ ] arguments ) { if ( arguments == null ) { return Collections . emptyList ( ) ; } List < Object > [[converted]] = Arrays . stream ( arguments ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[converted]] ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > [[woodchuck]] ( Object [ ] arguments ) { if ( arguments == null ) { return Collections . emptyList ( ) ; } List < Object > [[conversion]] = Arrays . stream ( arguments ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[conversion]] ) ; }
[[[[Nl]]]]: Convert the error arguments .


--------------------------------------------- Result 625 ---------------------------------------------
Creates a new form with the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: public Form < T > [[fill]] ( T [[value]] ) { if ( [[value]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[value]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > [[finalise]] ( T [[appreciates]] ) { if ( [[appreciates]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[appreciates]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .


--------------------------------------------- Result 626 ---------------------------------------------
Returns the global validation errors . --> [[[FAILED]]]

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[apt]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .


--------------------------------------------- Result 627 ---------------------------------------------
Converts errors into JSON representation . --> [[[FAILED]]]

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang lang ) { Map < String , List < String > > [[allMessages]] = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > [[messages]] = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; [[messages]] . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { [[messages]] . add ( error . message ( ) ) ; } [[allMessages]] . put ( error . key ( ) , [[messages]] ) ; } } ) ; return play . libs . Json . toJson ( [[allMessages]] ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[oncoming]] ( Lang lang ) { Map < String , List < String > > [[lino]] = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > [[advert]] = new ArrayList <> ( ) ; if ( messagesApi != null && lang != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; [[advert]] . add ( messagesApi . get ( lang , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , lang ) ) ) ; } else { [[advert]] . add ( error . message ( ) ) ; } [[lino]] . put ( error . key ( ) , [[advert]] ) ; } } ) ; return play . libs . Json . toJson ( [[lino]] ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .


--------------------------------------------- Result 628 ---------------------------------------------
Returns the value associated with the given key . --> Retrieve information about a particular key . --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > [[value]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[appreciates]] ( String key ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( key ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value


--------------------------------------------- Result 629 ---------------------------------------------
Fills the form . --> [[[FAILED]]]

[[[[Adv]]]]: public DynamicForm [[fill]] ( Map < String , Object > [[value]] ) { Form < Dynamic > form = super . fill ( new Dynamic ( [[value]] ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . [[value]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm [[bridge]] ( Map < String , Object > [[emphasis]] ) { Form < Dynamic > form = super . fill ( new Dynamic ( [[emphasis]] ) ) ; return new DynamicForm ( form . rawData ( ) , form . files ( ) , form . errors ( ) , form . [[emphasis]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .


--------------------------------------------- Result 630 ---------------------------------------------
Converts the given text to an object of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[quantity]] > [[quantity]] parse ( String text , Class < [[quantity]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .


--------------------------------------------- Result 631 ---------------------------------------------
Converts the given text to a type . --> Convenience method to do the conversion . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[did]] > [[did]] parse ( Field field , String text ) { return ( [[did]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field


--------------------------------------------- Result 632 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 393 / 227 / 12 / 632:  63%|██████▎   | 632/1000 [3:55:01<2:16:50, 22.31s/it][Succeeded / Failed / Skipped / Total] 393 / 227 / 12 / 632:  63%|██████▎   | 633/1000 [3:55:08<2:16:19, 22.29s/it][Succeeded / Failed / Skipped / Total] 393 / 228 / 12 / 633:  63%|██████▎   | 633/1000 [3:55:08<2:16:19, 22.29s/it][Succeeded / Failed / Skipped / Total] 393 / 228 / 12 / 633:  63%|██████▎   | 634/1000 [3:55:16<2:15:49, 22.27s/it][Succeeded / Failed / Skipped / Total] 394 / 228 / 12 / 634:  63%|██████▎   | 634/1000 [3:55:16<2:15:49, 22.27s/it][Succeeded / Failed / Skipped / Total] 394 / 228 / 12 / 634:  64%|██████▎   | 635/1000 [3:55:23<2:15:18, 22.24s/it][Succeeded / Failed / Skipped / Total] 395 / 228 / 12 / 635:  64%|██████▎   | 635/1000 [3:55:23<2:15:18, 22.24s/it][Succeeded / Failed / Skipped / Total] 395 / 228 / 12 / 635:  64%|██████▎   | 636/1000 [3:55:58<2:15:03, 22.26s/it][Succeeded / Failed / Skipped / Total] 395 / 229 / 12 / 636:  64%|██████▎   | 636/1000 [3:55:58<2:15:03, 22.26s/it][Succeeded / Failed / Skipped / Total] 395 / 229 / 12 / 636:  64%|██████▎   | 637/1000 [3:57:04<2:15:06, 22.33s/it]Print a value --> Prints a given object --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[Braiding]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[Braiding]] . class ) ) { return conversion . convert ( t , [[Braiding]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .


--------------------------------------------- Result 633 ---------------------------------------------
Prints a type descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[Shackles]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .


--------------------------------------------- Result 634 ---------------------------------------------
Prints the given type as a string . --> Print Strings --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[Strung]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[Strung]] . class ) ) ) { return ( [[Strung]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[Strung]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[Strung]] . class ) ) { return conversion . convert ( t , [[Strung]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .


--------------------------------------------- Result 635 ---------------------------------------------
Register a converter for the given source type . --> Adds a formatters to the output . --> Socre: 1.0

[[[[Adv]]]]: private Formatters [[registerOptional]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String

[[[[Adv]]]]: private Formatters [[hollywood]] ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String


--------------------------------------------- Result 636 ---------------------------------------------
Registers a formatter for the given formatter . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[Formatters]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T [[t]] , Locale locale ) { return formatter . print ( [[t]] , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > [[Compressing]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T [[anvil]] , Locale locale ) { return formatter . print ( [[anvil]] , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .


--------------------------------------------- Result 637 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 395 / 230 / 12 / 637:  64%|██████▎   | 637/1000 [3:57:04<2:15:06, 22.33s/it][Succeeded / Failed / Skipped / Total] 395 / 230 / 12 / 637:  64%|██████▍   | 638/1000 [3:57:37<2:14:49, 22.35s/it][Succeeded / Failed / Skipped / Total] 395 / 231 / 12 / 638:  64%|██████▍   | 638/1000 [3:57:37<2:14:49, 22.35s/it][Succeeded / Failed / Skipped / Total] 395 / 231 / 12 / 638:  64%|██████▍   | 639/1000 [3:57:46<2:14:19, 22.33s/it][Succeeded / Failed / Skipped / Total] 396 / 231 / 12 / 639:  64%|██████▍   | 639/1000 [3:57:46<2:14:19, 22.33s/it][Succeeded / Failed / Skipped / Total] 396 / 231 / 12 / 639:  64%|██████▍   | 640/1000 [3:58:04<2:13:54, 22.32s/it]Register converter . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends [[Annotation]] , T > [[Formatters]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends [[Annotation]] > annotationType = ( Class < ? extends [[Annotation]] > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends [[Alchemical]] , T > [[Imperceptible]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends [[Alchemical]] > annotationType = ( Class < ? extends [[Alchemical]] > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( sourceType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) sourceType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor sourceType , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) source , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( sourceType , targetType , source , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .


--------------------------------------------- Result 638 ---------------------------------------------
Encodes a cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public String encode ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = [[cookie]] . name ( ) ; final String [[value]] = [[cookie]] . value ( ) != null ? [[cookie]] . value ( ) : "" ; validateCookie ( name , [[value]] ) ; StringBuilder [[buf]] = new StringBuilder ( ) ; if ( [[cookie]] . wrap ( ) ) { addQuoted ( [[buf]] , name , [[value]] ) ; } else { add ( [[buf]] , name , [[value]] ) ; } if ( [[cookie]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( [[buf]] , CookieHeaderNames . MAX_AGE , [[cookie]] . maxAge ( ) ) ; Date expires = [[cookie]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String encode ( Cookie [[biscuits]] ) { if ( [[biscuits]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = [[biscuits]] . name ( ) ; final String [[assessments]] = [[biscuits]] . value ( ) != null ? [[biscuits]] . value ( ) : "" ; validateCookie ( name , [[assessments]] ) ; StringBuilder [[beginnings]] = new StringBuilder ( ) ; if ( [[biscuits]] . wrap ( ) ) { addQuoted ( [[beginnings]] , name , [[assessments]] ) ; } else { add ( [[beginnings]] , name , [[assessments]] ) ; } if ( [[biscuits]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( [[beginnings]] , CookieHeaderNames . MAX_AGE , [[biscuits]] . maxAge ( ) ) ; Date expires = [[biscuits]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .


--------------------------------------------- Result 639 ---------------------------------------------
Selects all nodes matching the specified path . --> removed from node --> Socre: 1.0

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String path , Object node ) { return [[selectNodes]] ( path , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[congresswoman]] ( String path , Object node ) { return [[congresswoman]] ( path , node , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order


--------------------------------------------- Result 640 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 396 / 232 / 12 / 640:  64%|██████▍   | 640/1000 [3:58:04<2:13:54, 22.32s/it][Succeeded / Failed / Skipped / Total] 396 / 232 / 12 / 640:  64%|██████▍   | 641/1000 [3:58:19<2:13:28, 22.31s/it][Succeeded / Failed / Skipped / Total] 397 / 232 / 12 / 641:  64%|██████▍   | 641/1000 [3:58:19<2:13:28, 22.31s/it][Succeeded / Failed / Skipped / Total] 397 / 232 / 12 / 641:  64%|██████▍   | 642/1000 [3:58:37<2:13:03, 22.30s/it][Succeeded / Failed / Skipped / Total] 398 / 232 / 12 / 642:  64%|██████▍   | 642/1000 [3:58:37<2:13:03, 22.30s/it][Succeeded / Failed / Skipped / Total] 398 / 232 / 12 / 642:  64%|██████▍   | 643/1000 [3:58:47<2:12:34, 22.28s/it][Succeeded / Failed / Skipped / Total] 399 / 232 / 12 / 643:  64%|██████▍   | 643/1000 [3:58:47<2:12:34, 22.28s/it][Succeeded / Failed / Skipped / Total] 399 / 232 / 12 / 643:  64%|██████▍   | 644/1000 [3:58:56<2:12:05, 22.26s/it][Succeeded / Failed / Skipped / Total] 400 / 232 / 12 / 644:  64%|██████▍   | 644/1000 [3:58:56<2:12:05, 22.26s/it][Succeeded / Failed / Skipped / Total] 400 / 232 / 12 / 644:  64%|██████▍   | 645/1000 [3:59:43<2:11:56, 22.30s/it][Succeeded / Failed / Skipped / Total] 401 / 232 / 12 / 645:  64%|██████▍   | 645/1000 [3:59:43<2:11:56, 22.30s/it][Succeeded / Failed / Skipped / Total] 401 / 232 / 12 / 645:  65%|██████▍   | 646/1000 [4:00:09<2:11:36, 22.31s/it]Converts the given list to a sequence . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[pedicures]] ( java . util . List < T > [[entered]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[entered]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .


--------------------------------------------- Result 641 ---------------------------------------------
Creates a sequence from an array . --> WFG - 1 --> Socre: 1.0

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[wegman]] ( T [ ] [[palette]] ) { return [[wegman]] ( java . util . Arrays . asList ( [[palette]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .


--------------------------------------------- Result 642 ---------------------------------------------
Create a sequence of variables from the given array . --> Static factory method for heat stroke --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... [[array]] ) { return toSeq ( [[array]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[heatstroke]] ( T ... [[spectra]] ) { return toSeq ( [[spectra]] ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .


--------------------------------------------- Result 643 ---------------------------------------------
Creates a MappedWebSocketAcceptor from the given type . --> Creates a MappedWebSocketAcceptor --> Socre: 1.0

[[[[Adv]]]]: public static < [[In]] , Out > MappedWebSocketAcceptor < [[In]] , Out > json ( Class < [[In]] > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .

[[[[Adv]]]]: public static < [[Everywhere]] , Out > MappedWebSocketAcceptor < [[Everywhere]] , Out > json ( Class < [[Everywhere]] > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .


--------------------------------------------- Result 644 ---------------------------------------------
Accepts and returns a stream accepting result . --> Accepts and returns an Acceptor --> Socre: 1.0

[[[[Adv]]]]: private static < In , Out > WebSocket acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new WebSocket ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[flow]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[flow]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .

[[[[Adv]]]]: private static < In , Out > WebSocket acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new WebSocket ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > [[current]] = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( [[current]] ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .


--------------------------------------------- Result 645 ---------------------------------------------
Checks if the given object is accessible . --> Checks to see if the member is accessible or not --> Socre: 1.0

[[[[Adv]]]]: static boolean setAccessibleWorkaround ( final AccessibleObject [[o]] ) { if ( [[o]] == null || [[o]] . isAccessible ( ) ) { return False ; } final Member [[m]] = ( Member ) [[o]] ; if ( ! [[o]] . isAccessible ( ) && Modifier . isPublic ( [[m]] . getModifiers ( ) ) && isPackageAccess ( [[m]] . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { [[o]] . setAccessible ( "[[True]]" == "[[True]]" ) ; return "[[True]]" == "[[True]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean setAccessibleWorkaround ( final AccessibleObject [[wu]] ) { if ( [[wu]] == null || [[wu]] . isAccessible ( ) ) { return False ; } final Member [[acres]] = ( Member ) [[wu]] ; if ( ! [[wu]] . isAccessible ( ) && Modifier . isPublic ( [[acres]] . getModifiers ( ) ) && isPackageAccess ( [[acres]] . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { [[wu]] . setAccessible ( "[["Accurate" == "Accurate"]]" == "[["Accurate" == "Accurate"]]" ) ; return "[["Accurate" == "Accurate"]]" == "[["Accurate" == "Accurate"]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .


--------------------------------------------- Result 646 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 402 / 232 / 12 / 646:  65%|██████▍   | 646/1000 [4:00:09<2:11:36, 22.31s/it][Succeeded / Failed / Skipped / Total] 402 / 232 / 12 / 646:  65%|██████▍   | 647/1000 [4:00:51<2:11:24, 22.34s/it][Succeeded / Failed / Skipped / Total] 403 / 232 / 12 / 647:  65%|██████▍   | 647/1000 [4:00:51<2:11:24, 22.34s/it][Succeeded / Failed / Skipped / Total] 403 / 232 / 12 / 647:  65%|██████▍   | 648/1000 [4:02:49<2:11:54, 22.48s/it][Succeeded / Failed / Skipped / Total] 403 / 233 / 12 / 648:  65%|██████▍   | 648/1000 [4:02:49<2:11:54, 22.48s/it][Succeeded / Failed / Skipped / Total] 403 / 233 / 12 / 648:  65%|██████▍   | 649/1000 [4:02:54<2:11:22, 22.46s/it][Succeeded / Failed / Skipped / Total] 404 / 233 / 12 / 649:  65%|██████▍   | 649/1000 [4:02:54<2:11:22, 22.46s/it][Succeeded / Failed / Skipped / Total] 404 / 233 / 12 / 649:  65%|██████▌   | 650/1000 [4:03:00<2:10:50, 22.43s/it][Succeeded / Failed / Skipped / Total] 405 / 233 / 12 / 650:  65%|██████▌   | 650/1000 [4:03:00<2:10:50, 22.43s/it][Succeeded / Failed / Skipped / Total] 405 / 233 / 12 / 650:  65%|██████▌   | 651/1000 [4:03:49<2:10:42, 22.47s/it][Succeeded / Failed / Skipped / Total] 406 / 233 / 12 / 651:  65%|██████▌   | 651/1000 [4:03:49<2:10:42, 22.47s/it][Succeeded / Failed / Skipped / Total] 406 / 233 / 12 / 651:  65%|██████▌   | 652/1000 [4:04:09<2:10:19, 22.47s/it][Succeeded / Failed / Skipped / Total] 407 / 233 / 12 / 652:  65%|██████▌   | 652/1000 [4:04:09<2:10:19, 22.47s/it][Succeeded / Failed / Skipped / Total] 407 / 233 / 12 / 652:  65%|██████▌   | 653/1000 [4:04:42<2:10:01, 22.48s/it][Succeeded / Failed / Skipped / Total] 408 / 233 / 12 / 653:  65%|██████▌   | 653/1000 [4:04:42<2:10:01, 22.48s/it][Succeeded / Failed / Skipped / Total] 408 / 233 / 12 / 653:  65%|██████▌   | 654/1000 [4:04:50<2:09:32, 22.46s/it][Succeeded / Failed / Skipped / Total] 409 / 233 / 12 / 654:  65%|██████▌   | 654/1000 [4:04:50<2:09:32, 22.46s/it][Succeeded / Failed / Skipped / Total] 409 / 233 / 12 / 654:  66%|██████▌   | 655/1000 [4:05:12<2:09:09, 22.46s/it]Get the promotion cost of a primitive class . --> Calculate tollellilli --> Socre: 1.0

[[[[Adv]]]]: private static float [[getPrimitivePromotionCost]] ( final Class < ? > [[srcClass]] , final Class < ? > destClass ) { float [[cost]] = 0.0f ; Class < ? > cls = [[srcClass]] ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float [[botticelli]] ( final Class < ? > [[cabrón]] , final Class < ? > destClass ) { float [[tolls]] = 0.0f ; Class < ? > cls = [[cabrón]] ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .


--------------------------------------------- Result 647 ---------------------------------------------
Get the total transformation cost . --> flushes a flintstone --> Socre: 1.0

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] [[destArgs]] = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[flintstone]] ( final Class < ? > [ ] srcArgs , final Executable executable ) { final Class < ? > [ ] [[cryogenic]] = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .


--------------------------------------------- Result 648 ---------------------------------------------
Returns the cost of object transformation between sourceClass and destinationClass . --> [[[FAILED]]]

[[[[Adv]]]]: private static float getObjectTransformationCost ( Class < ? > [[srcClass]] , final Class < ? > [[destClass]] ) { if ( [[destClass]] . isPrimitive ( ) ) { return getPrimitivePromotionCost ( [[srcClass]] , [[destClass]] ) ; } float cost = 0.0f ; while ( [[srcClass]] != null && ! [[destClass]] . equals ( [[srcClass]] ) ) { if ( [[destClass]] . isInterface ( ) && ClassUtils . isAssignable ( [[srcClass]] , [[destClass]] ) ) { * If the destination class is null, we've traveled all the way up to * [[an]] Object match. We'll penalize this by adding 1.5 to the cost. */ if ( [[srcClass]] == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float getObjectTransformationCost ( Class < ? > [[aaliyah]] , final Class < ? > [[forcing]] ) { if ( [[forcing]] . isPrimitive ( ) ) { return getPrimitivePromotionCost ( [[aaliyah]] , [[forcing]] ) ; } float cost = 0.0f ; while ( [[aaliyah]] != null && ! [[forcing]] . equals ( [[aaliyah]] ) ) { if ( [[forcing]] . isInterface ( ) && ClassUtils . isAssignable ( [[aaliyah]] , [[forcing]] ) ) { * If the destination class is null, we've traveled all the way up to * [[introducing]] Object match. We'll penalize this by adding 1.5 to the cost. */ if ( [[aaliyah]] == null ) { cost += 1.5f ; } return cost ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .


--------------------------------------------- Result 649 ---------------------------------------------
Gets localized message by key . --> Gets a specific entity --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( String key , Object ... args ) { return messagesApi . get ( lang , key , args ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String [[entre]] ( String key , Object ... args ) { return messagesApi . get ( lang , key , args ) ; }
[[[[Nl]]]]: Get the message at the given key .


--------------------------------------------- Result 650 ---------------------------------------------
Get message by key --> Info about messages --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[about]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .


--------------------------------------------- Result 651 ---------------------------------------------
Creates a new database from the given parameters . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static Database [[createFrom]] ( String [[driver]] , String [[url]] , Map < String , ? extends Object > [[config]] ) { return [[createFrom]] ( "default" , [[driver]] , [[url]] , [[config]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database [[matchless]] ( String [[cars]] , String [[page]] , Map < String , ? extends Object > [[aapa]] ) { return [[matchless]] ( "default" , [[cars]] , [[page]] , [[aapa]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .


--------------------------------------------- Result 652 ---------------------------------------------
Create a new parallel sorting . --> non - private method --> Socre: 1.0

[[[[Adv]]]]: public static ParallelSorter [[create]] ( Object [ ] [[arrays]] ) { Generator gen = new Generator ( ) ; gen . setArrays ( [[arrays]] ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter [[establishment]] ( Object [ ] [[cab]] ) { Generator gen = new Generator ( ) ; gen . setArrays ( [[cab]] ) ; return gen . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .


--------------------------------------------- Result 653 ---------------------------------------------
Quick sort . --> Renders a broker --> Socre: 1.0

[[[[Adv]]]]: public void [[quickSort]] ( int index , int lo , int [[hi]] , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( lo , [[hi]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void [[brokering]] ( int index , int lo , int [[bye]] , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( lo , [[bye]] - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .


--------------------------------------------- Result 654 ---------------------------------------------
Merge sort . --> Performs sorting algorithm --> Socre: 1.0

[[[[Adv]]]]: public void [[mergeSort]] ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[masaya]] ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .


--------------------------------------------- Result 655 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 410 / 233 / 12 / 655:  66%|██████▌   | 655/1000 [4:05:12<2:09:09, 22.46s/it][Succeeded / Failed / Skipped / Total] 410 / 233 / 12 / 655:  66%|██████▌   | 656/1000 [4:05:21<2:08:39, 22.44s/it][Succeeded / Failed / Skipped / Total] 411 / 233 / 12 / 656:  66%|██████▌   | 656/1000 [4:05:21<2:08:39, 22.44s/it][Succeeded / Failed / Skipped / Total] 411 / 233 / 12 / 656:  66%|██████▌   | 657/1000 [4:05:37<2:08:14, 22.43s/it][Succeeded / Failed / Skipped / Total] 411 / 234 / 12 / 657:  66%|██████▌   | 657/1000 [4:05:37<2:08:14, 22.43s/it][Succeeded / Failed / Skipped / Total] 411 / 234 / 12 / 657:  66%|██████▌   | 658/1000 [4:05:37<2:07:40, 22.40s/it][Succeeded / Failed / Skipped / Total] 411 / 234 / 13 / 658:  66%|██████▌   | 658/1000 [4:05:37<2:07:40, 22.40s/it][Succeeded / Failed / Skipped / Total] 411 / 234 / 13 / 658:  66%|██████▌   | 659/1000 [4:05:44<2:07:09, 22.37s/it][Succeeded / Failed / Skipped / Total] 412 / 234 / 13 / 659:  66%|██████▌   | 659/1000 [4:05:44<2:07:09, 22.37s/it][Succeeded / Failed / Skipped / Total] 412 / 234 / 13 / 659:  66%|██████▌   | 660/1000 [4:06:03<2:06:45, 22.37s/it][Succeeded / Failed / Skipped / Total] 413 / 234 / 13 / 660:  66%|██████▌   | 660/1000 [4:06:03<2:06:45, 22.37s/it][Succeeded / Failed / Skipped / Total] 413 / 234 / 13 / 660:  66%|██████▌   | 661/1000 [4:06:17<2:06:18, 22.36s/it]Invoke the protected method . --> Invoked by this class --> Socre: 1.0

[[[[Adv]]]]: public Object invoke ( Object [[obj]] , Object [ ] [[args]] ) throws Throwable { try { init ( ) ; FastClassInfo [[fci]] = fastClassInfo ; return [[fci]] . f1 . invoke ( [[fci]] . i1 , [[obj]] , [[args]] ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object invoke ( Object [[compelling]] , Object [ ] [[anne]] ) throws Throwable { try { init ( ) ; FastClassInfo [[classmates]] = fastClassInfo ; return [[classmates]] . f1 . invoke ( [[classmates]] . i1 , [[compelling]] , [[anne]] ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .


--------------------------------------------- Result 656 ---------------------------------------------
Cast a numeric value to the specified type . --> Set an ALTER instruction . --> Socre: 1.0

[[[[Adv]]]]: public void [[cast_numeric]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[cast_numeric]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void [[alto]] ( Type from , Type to ) { if ( from != to ) { if ( from == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; [[alto]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; [[alto]] ( Type . INT_TYPE , to ) ; } } else if ( from == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; [[alto]] ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another


--------------------------------------------- Result 657 ---------------------------------------------
Loads the argument at the given index . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[load_arg]] ( int [[index]] ) { load_local ( state . argumentTypes [ [[index]] ] , state . localOffset + skipArgs ( [[index]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void [[creep]] ( int [[references]] ) { load_local ( state . argumentTypes [ [[references]] ] , state . localOffset + skipArgs ( [[references]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .


--------------------------------------------- Result 658 ---------------------------------------------
Emit a field instruction . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix


--------------------------------------------- Result 659 ---------------------------------------------
push a zero or null value --> characters --> Socre: 1.0

[[[[Adv]]]]: public void [[zero_or_null]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void [[chari]] ( Type type ) { if ( TypeUtils . isPrimitive ( type ) ) { switch ( type . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .


--------------------------------------------- Result 660 ---------------------------------------------
Unbox the value of the given type . --> to be unboxing --> Socre: 1.0

[[[[Adv]]]]: public void unbox_or_zero ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { if ( [[type]] != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label [[end]] = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( [[type]] ) ; goTo ( [[end]] ) ; mark ( nonNull ) ; unbox ( [[type]] ) ; mark ( [[end]] ) ; } } else { checkcast ( [[type]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void unbox_or_zero ( Type [[dawg]] ) { if ( TypeUtils . isPrimitive ( [[dawg]] ) ) { if ( [[dawg]] != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label [[finalize]] = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( [[dawg]] ) ; goTo ( [[finalize]] ) ; mark ( nonNull ) ; unbox ( [[dawg]] ) ; mark ( [[finalize]] ) ; } } else { checkcast ( [[dawg]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .


--------------------------------------------- Result 661 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 414 / 234 / 13 / 661:  66%|██████▌   | 661/1000 [4:06:17<2:06:18, 22.36s/it][Succeeded / Failed / Skipped / Total] 414 / 234 / 13 / 661:  66%|██████▌   | 662/1000 [4:06:30<2:05:51, 22.34s/it][Succeeded / Failed / Skipped / Total] 415 / 234 / 13 / 662:  66%|██████▌   | 662/1000 [4:06:30<2:05:51, 22.34s/it][Succeeded / Failed / Skipped / Total] 415 / 234 / 13 / 662:  66%|██████▋   | 663/1000 [4:07:26<2:05:46, 22.39s/it][Succeeded / Failed / Skipped / Total] 415 / 235 / 13 / 663:  66%|██████▋   | 663/1000 [4:07:26<2:05:46, 22.39s/it][Succeeded / Failed / Skipped / Total] 415 / 235 / 13 / 663:  66%|██████▋   | 664/1000 [4:07:35<2:05:17, 22.37s/it][Succeeded / Failed / Skipped / Total] 416 / 235 / 13 / 664:  66%|██████▋   | 664/1000 [4:07:35<2:05:17, 22.37s/it][Succeeded / Failed / Skipped / Total] 416 / 235 / 13 / 664:  66%|██████▋   | 665/1000 [4:08:13<2:05:02, 22.40s/it]Process an array . --> called by code --> Socre: 1.0

[[[[Adv]]]]: public static void process_array ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type [[componentType]] = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local [[loopvar]] = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( [[loopvar]] ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( [[loopvar]] ) ; e . array_load ( [[componentType]] ) ; callback . processElement ( [[componentType]] ) ; e . iinc ( [[loopvar]] , 1 ) ; e . mark ( checkloop ) ; e . load_local ( [[loopvar]] ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void process_array ( CodeEmitter e , Type type , ProcessArrayCallback callback ) { Type [[chestnuts]] = TypeUtils . getComponentType ( type ) ; Local array = e . make_local ( ) ; Local [[kawashima]] = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( [[kawashima]] ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( [[kawashima]] ) ; e . array_load ( [[chestnuts]] ) ; callback . processElement ( [[chestnuts]] ) ; e . iinc ( [[kawashima]] , 1 ) ; e . mark ( checkloop ) ; e . load_local ( [[kawashima]] ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .


--------------------------------------------- Result 662 ---------------------------------------------
implement the null operator --> implement a NullPointerException --> Socre: 1.0

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label [[oneNullHelper]] = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( [[oneNullHelper]] ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( [[oneNullHelper]] ) ; e . goTo ( end ) ; e . mark ( [[oneNullHelper]] ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label bothNull ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label [[forbearance]] = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( [[forbearance]] ) ; e . pop2 ( ) ; e . goTo ( bothNull ) ; e . mark ( nonNull ) ; e . ifnull ( [[forbearance]] ) ; e . goTo ( end ) ; e . mark ( [[forbearance]] ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .


--------------------------------------------- Result 663 ---------------------------------------------
Resolves all bridge classes . --> [[[FAILED]]]

[[[[Adv]]]]: public Map resolveAll ( ) { Map resolved = new HashMap ( ) ; for ( Iterator [[entryIter]] = declToBridge . entrySet ( ) . iterator ( ) ; [[entryIter]] . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) [[entryIter]] . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set [[bridges]] = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[bridges]] , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map resolveAll ( ) { Map resolved = new HashMap ( ) ; for ( Iterator [[intermingled]] = declToBridge . entrySet ( ) . iterator ( ) ; [[intermingled]] . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) [[intermingled]] . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set [[gateways]] = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return resolved ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[gateways]] , resolved ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return resolved ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .


--------------------------------------------- Result 664 ---------------------------------------------
Finds all methods in the superclass and interfaces . --> Algorithms . --> Socre: 0.9999999999820136

[[[[Adv]]]]: public static void [[getMethods]] ( Class superclass , Class [ ] interfaces , List methods ) { [[getMethods]] ( superclass , interfaces , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void [[albert]] ( Class superclass , Class [ ] interfaces , List methods ) { [[albert]] ( superclass , interfaces , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .


--------------------------------------------- Result 665 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 416 / 236 / 13 / 665:  66%|██████▋   | 665/1000 [4:08:13<2:05:02, 22.40s/it][Succeeded / Failed / Skipped / Total] 416 / 236 / 13 / 665:  67%|██████▋   | 666/1000 [4:08:34<2:04:39, 22.39s/it][Succeeded / Failed / Skipped / Total] 417 / 236 / 13 / 666:  67%|██████▋   | 666/1000 [4:08:34<2:04:39, 22.39s/it][Succeeded / Failed / Skipped / Total] 417 / 236 / 13 / 666:  67%|██████▋   | 667/1000 [4:08:34<2:04:06, 22.36s/it][Succeeded / Failed / Skipped / Total] 417 / 236 / 14 / 667:  67%|██████▋   | 667/1000 [4:08:34<2:04:06, 22.36s/it][Succeeded / Failed / Skipped / Total] 417 / 236 / 14 / 667:  67%|██████▋   | 668/1000 [4:08:49<2:03:40, 22.35s/it][Succeeded / Failed / Skipped / Total] 417 / 237 / 14 / 668:  67%|██████▋   | 668/1000 [4:08:49<2:03:40, 22.35s/it][Succeeded / Failed / Skipped / Total] 417 / 237 / 14 / 668:  67%|██████▋   | 669/1000 [4:08:49<2:03:06, 22.32s/it][Succeeded / Failed / Skipped / Total] 417 / 237 / 15 / 669:  67%|██████▋   | 669/1000 [4:08:49<2:03:06, 22.32s/it][Succeeded / Failed / Skipped / Total] 417 / 237 / 15 / 669:  67%|██████▋   | 670/1000 [4:09:11<2:02:44, 22.32s/it][Succeeded / Failed / Skipped / Total] 417 / 238 / 15 / 670:  67%|██████▋   | 670/1000 [4:09:11<2:02:44, 22.32s/it][Succeeded / Failed / Skipped / Total] 417 / 238 / 15 / 670:  67%|██████▋   | 671/1000 [4:09:11<2:02:10, 22.28s/it][Succeeded / Failed / Skipped / Total] 417 / 238 / 16 / 671:  67%|██████▋   | 671/1000 [4:09:11<2:02:10, 22.28s/it][Succeeded / Failed / Skipped / Total] 417 / 238 / 16 / 671:  67%|██████▋   | 672/1000 [4:09:30<2:01:47, 22.28s/it][Succeeded / Failed / Skipped / Total] 417 / 239 / 16 / 672:  67%|██████▋   | 672/1000 [4:09:30<2:01:47, 22.28s/it][Succeeded / Failed / Skipped / Total] 417 / 239 / 16 / 672:  67%|██████▋   | 673/1000 [4:09:55<2:01:26, 22.28s/it][Succeeded / Failed / Skipped / Total] 418 / 239 / 16 / 673:  67%|██████▋   | 673/1000 [4:09:55<2:01:26, 22.28s/it][Succeeded / Failed / Skipped / Total] 418 / 239 / 16 / 673:  67%|██████▋   | 674/1000 [4:10:21<2:01:05, 22.29s/it][Succeeded / Failed / Skipped / Total] 418 / 240 / 16 / 674:  67%|██████▋   | 674/1000 [4:10:21<2:01:05, 22.29s/it][Succeeded / Failed / Skipped / Total] 418 / 240 / 16 / 674:  68%|██████▊   | 675/1000 [4:10:38<2:00:40, 22.28s/it]Filter constructors in the given class . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[filterConstructors]] ( Class [[sc]] , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( [[sc]] , True ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[sc]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void [[duped]] ( Class [[dcp]] , List constructors ) { CollectionUtils . filter ( constructors , new VisibilityPredicate ( [[dcp]] , True ) ) ; if ( constructors . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + [[dcp]] ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .


--------------------------------------------- Result 666 ---------------------------------------------
Sets the super class . --> Declarative method for setting grandparents --> Socre: 1.0

[[[[Adv]]]]: public void [[setSuperclass]] ( Class [[superclass]] ) { if ( [[superclass]] != null && [[superclass]] . equals ( Object . class ) ) { [[superclass]] = null ; } this . [[superclass]] = [[superclass]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[dogville]] ( Class [[osteopath]] ) { if ( [[osteopath]] != null && [[osteopath]] . equals ( Object . class ) ) { [[osteopath]] = null ; } this . [[alot]] = [[osteopath]] ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .


--------------------------------------------- Result 667 ---------------------------------------------
Retrieves a field with the given names . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities


--------------------------------------------- Result 668 ---------------------------------------------
Add a method . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[add]] ( Method [[method]] ) { [[add]] ( ReflectUtils . getSignature ( [[method]] ) , ReflectUtils . getExceptionTypes ( [[method]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[complementary]] ( Method [[styles]] ) { [[complementary]] ( ReflectUtils . getSignature ( [[styles]] ) , ReflectUtils . getExceptionTypes ( [[styles]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .


--------------------------------------------- Result 669 ---------------------------------------------
Calculates the cardinality --> [[[SKIPPED]]]

[[[[Adv]]]]: public int cardinality ( ) { int w = value ; int c = 0 ; while ( w != 0 ) { c += T [ w & 255 ] ; w >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .


--------------------------------------------- Result 670 ---------------------------------------------
Sets the naming policy . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy [[namingPolicy]] ) { if ( [[namingPolicy]] == null ) [[namingPolicy]] = DefaultNamingPolicy . INSTANCE ; this . [[namingPolicy]] = [[namingPolicy]] ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[dandies]] ( NamingPolicy [[alarmed]] ) { if ( [[alarmed]] == null ) [[alarmed]] = DefaultNamingPolicy . INSTANCE ; this . [[any]] = [[alarmed]] ; }
[[[[Nl]]]]: Override the default naming policy .


--------------------------------------------- Result 671 ---------------------------------------------
Searches for an array of methods --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code


--------------------------------------------- Result 672 ---------------------------------------------
Resolve child path . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path [[resolve]] ( final Path base , String [[child]] ) { if ( StringUtil . startsWithChar ( [[child]] , File . separatorChar ) ) { [[child]] = [[child]] . substring ( 1 ) ; } return base . resolve ( [[child]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path [[corrected]] ( final Path base , String [[boyish]] ) { if ( StringUtil . startsWithChar ( [[boyish]] , File . separatorChar ) ) { [[boyish]] = [[boyish]] . substring ( 1 ) ; } return base . resolve ( [[boyish]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .


--------------------------------------------- Result 673 ---------------------------------------------
Reads a string from a file . --> orus to speak --> Socre: 1.0

[[[[Adv]]]]: public static String [[readString]] ( final Path [[path]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[path]] , StandardCharsets . UTF_8 ) ) { StringWriter [[writer]] = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[chanted]] ( final Path [[boulevards]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[boulevards]] , StandardCharsets . UTF_8 ) ) { StringWriter [[songwriters]] = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .


--------------------------------------------- Result 674 ---------------------------------------------
Sets the host of the request . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[host]] ( final String [[host]] ) { this . [[host]] = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[organized]] ( final String [[arranged]] ) { this . [[guest]] = [[organized]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[organized]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .


--------------------------------------------- Result 675 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 419 / 240 / 16 / 675:  68%|██████▊   | 675/1000 [4:10:38<2:00:40, 22.28s/it][Succeeded / Failed / Skipped / Total] 419 / 240 / 16 / 675:  68%|██████▊   | 676/1000 [4:10:51<2:00:14, 22.27s/it][Succeeded / Failed / Skipped / Total] 420 / 240 / 16 / 676:  68%|██████▊   | 676/1000 [4:10:51<2:00:14, 22.27s/it][Succeeded / Failed / Skipped / Total] 420 / 240 / 16 / 676:  68%|██████▊   | 677/1000 [4:11:06<1:59:48, 22.25s/it][Succeeded / Failed / Skipped / Total] 421 / 240 / 16 / 677:  68%|██████▊   | 677/1000 [4:11:06<1:59:48, 22.25s/it][Succeeded / Failed / Skipped / Total] 421 / 240 / 16 / 677:  68%|██████▊   | 678/1000 [4:11:12<1:59:18, 22.23s/it][Succeeded / Failed / Skipped / Total] 422 / 240 / 16 / 678:  68%|██████▊   | 678/1000 [4:11:12<1:59:18, 22.23s/it][Succeeded / Failed / Skipped / Total] 422 / 240 / 16 / 678:  68%|██████▊   | 679/1000 [4:11:24<1:58:51, 22.22s/it][Succeeded / Failed / Skipped / Total] 423 / 240 / 16 / 679:  68%|██████▊   | 679/1000 [4:11:24<1:58:51, 22.22s/it][Succeeded / Failed / Skipped / Total] 423 / 240 / 16 / 679:  68%|██████▊   | 680/1000 [4:11:38<1:58:25, 22.20s/it][Succeeded / Failed / Skipped / Total] 423 / 241 / 16 / 680:  68%|██████▊   | 680/1000 [4:11:38<1:58:25, 22.20s/it][Succeeded / Failed / Skipped / Total] 423 / 241 / 16 / 680:  68%|██████▊   | 681/1000 [4:11:53<1:57:59, 22.19s/it][Succeeded / Failed / Skipped / Total] 423 / 242 / 16 / 681:  68%|██████▊   | 681/1000 [4:11:53<1:57:59, 22.19s/it][Succeeded / Failed / Skipped / Total] 423 / 242 / 16 / 681:  68%|██████▊   | 682/1000 [4:12:04<1:57:32, 22.18s/it][Succeeded / Failed / Skipped / Total] 423 / 243 / 16 / 682:  68%|██████▊   | 682/1000 [4:12:04<1:57:32, 22.18s/it][Succeeded / Failed / Skipped / Total] 423 / 243 / 16 / 682:  68%|██████▊   | 683/1000 [4:12:19<1:57:06, 22.17s/it][Succeeded / Failed / Skipped / Total] 423 / 244 / 16 / 683:  68%|██████▊   | 683/1000 [4:12:19<1:57:06, 22.17s/it][Succeeded / Failed / Skipped / Total] 423 / 244 / 16 / 683:  68%|██████▊   | 684/1000 [4:12:34<1:56:41, 22.16s/it][Succeeded / Failed / Skipped / Total] 424 / 244 / 16 / 684:  68%|██████▊   | 684/1000 [4:12:34<1:56:41, 22.16s/it][Succeeded / Failed / Skipped / Total] 424 / 244 / 16 / 684:  68%|██████▊   | 685/1000 [4:12:49<1:56:15, 22.14s/it][Succeeded / Failed / Skipped / Total] 424 / 245 / 16 / 685:  68%|██████▊   | 685/1000 [4:12:49<1:56:15, 22.14s/it][Succeeded / Failed / Skipped / Total] 424 / 245 / 16 / 685:  69%|██████▊   | 686/1000 [4:13:05<1:55:50, 22.14s/it]Create a new HttpRequest with the given destination and destination . --> Concatenate procedure --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[create]] ( final String [[method]] , final String destination ) { return new HttpRequest ( ) . [[method]] ( [[method]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest [[crea]] ( final String [[procedure]] , final String destination ) { return new HttpRequest ( ) . [[procedure]] ( [[procedure]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .


--------------------------------------------- Result 676 ---------------------------------------------
Create a connection to the given destination --> Start connecting to the given destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[connecting]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a CONNECT request .


--------------------------------------------- Result 677 ---------------------------------------------
Create a HTTP GET request --> Instructs the API to learn how to navigate to --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[learn]] ( final String [[aiming]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[aiming]] ) ; }
[[[[Nl]]]]: Builds a GET request .


--------------------------------------------- Result 678 ---------------------------------------------
Create a HTTP POST request --> Specifies the given destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[visualize]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a POST request .


--------------------------------------------- Result 679 ---------------------------------------------
Create a PUT request --> Sets tabled resource --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[tabled]] ( final String [[beneficiary]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[beneficiary]] ) ; }
[[[[Nl]]]]: Builds a PUT request .


--------------------------------------------- Result 680 ---------------------------------------------
Start a PATCH request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[tweaks]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a PATCH request .


--------------------------------------------- Result 681 ---------------------------------------------
Create a DELETE request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[scrapping]] ( final String [[whereabouts]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[whereabouts]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .


--------------------------------------------- Result 682 ---------------------------------------------
Create a HEAD request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[ringleader]] ( final String [[beneficiary]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[beneficiary]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .


--------------------------------------------- Result 683 ---------------------------------------------
Create a TRACE request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[leftovers]] ( final String [[aimed]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[aimed]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .


--------------------------------------------- Result 684 ---------------------------------------------
Start OPTIONS request --> Create a new instance of HttpRequest --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[options]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest [[substituting]] ( final String [[beneficiaries]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[beneficiaries]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .


--------------------------------------------- Result 685 ---------------------------------------------
Sets the request path . --> [[[FAILED]]]

[[[[Adv]]]]: public HttpRequest [[path]] ( String [[path]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[routing]] ( String [[way]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .


--------------------------------------------- Result 686 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 425 / 245 / 16 / 686:  69%|██████▊   | 686/1000 [4:13:05<1:55:50, 22.14s/it][Succeeded / Failed / Skipped / Total] 425 / 245 / 16 / 686:  69%|██████▊   | 687/1000 [4:13:12<1:55:21, 22.11s/it][Succeeded / Failed / Skipped / Total] 426 / 245 / 16 / 687:  69%|██████▊   | 687/1000 [4:13:12<1:55:21, 22.11s/it][Succeeded / Failed / Skipped / Total] 426 / 245 / 16 / 687:  69%|██████▉   | 688/1000 [4:13:26<1:54:55, 22.10s/it][Succeeded / Failed / Skipped / Total] 427 / 245 / 16 / 688:  69%|██████▉   | 688/1000 [4:13:26<1:54:55, 22.10s/it][Succeeded / Failed / Skipped / Total] 427 / 245 / 16 / 688:  69%|██████▉   | 689/1000 [4:13:43<1:54:31, 22.10s/it][Succeeded / Failed / Skipped / Total] 428 / 245 / 16 / 689:  69%|██████▉   | 689/1000 [4:13:43<1:54:31, 22.10s/it][Succeeded / Failed / Skipped / Total] 428 / 245 / 16 / 689:  69%|██████▉   | 690/1000 [4:13:50<1:54:02, 22.07s/it][Succeeded / Failed / Skipped / Total] 429 / 245 / 16 / 690:  69%|██████▉   | 690/1000 [4:13:50<1:54:02, 22.07s/it][Succeeded / Failed / Skipped / Total] 429 / 245 / 16 / 690:  69%|██████▉   | 691/1000 [4:13:57<1:53:34, 22.05s/it][Succeeded / Failed / Skipped / Total] 430 / 245 / 16 / 691:  69%|██████▉   | 691/1000 [4:13:57<1:53:34, 22.05s/it][Succeeded / Failed / Skipped / Total] 430 / 245 / 16 / 691:  69%|██████▉   | 692/1000 [4:14:18<1:53:11, 22.05s/it][Succeeded / Failed / Skipped / Total] 431 / 245 / 16 / 692:  69%|██████▉   | 692/1000 [4:14:18<1:53:11, 22.05s/it][Succeeded / Failed / Skipped / Total] 431 / 245 / 16 / 692:  69%|██████▉   | 693/1000 [4:14:40<1:52:49, 22.05s/it][Succeeded / Failed / Skipped / Total] 432 / 245 / 16 / 693:  69%|██████▉   | 693/1000 [4:14:40<1:52:49, 22.05s/it][Succeeded / Failed / Skipped / Total] 432 / 245 / 16 / 693:  69%|██████▉   | 694/1000 [4:14:54<1:52:23, 22.04s/it][Succeeded / Failed / Skipped / Total] 433 / 245 / 16 / 694:  69%|██████▉   | 694/1000 [4:14:54<1:52:23, 22.04s/it][Succeeded / Failed / Skipped / Total] 433 / 245 / 16 / 694:  70%|██████▉   | 695/1000 [4:15:01<1:51:54, 22.02s/it]Sets the cookies for the request . --> Set Cookie headers --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[REPLACEME0]] ( final Cookie ... [[REPLACEME0]] ) { if ( [[REPLACEME0]] . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean first = True ; for ( Cookie cookie : [[REPLACEME0]] ) { Integer [[maxAge]] = cookie . getMaxAge ( ) ; if ( [[maxAge]] != null && [[maxAge]] . intValue ( ) == 0 ) { continue ; } if ( ! first ) { cookieString . append ( "; " ) ; } first = False ; cookieString . append ( cookie . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest [[CHAMBERS]] ( final Cookie ... [[CHAMBERS]] ) { if ( [[CHAMBERS]] . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean first = True ; for ( Cookie cookie : [[CHAMBERS]] ) { Integer [[answer]] = cookie . getMaxAge ( ) ; if ( [[answer]] != null && [[answer]] . intValue ( ) == 0 ) { continue ; } if ( ! first ) { cookieString . append ( "; " ) ; } first = False ; cookieString . append ( cookie . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .


--------------------------------------------- Result 687 ---------------------------------------------
Add query parameter . --> respondence method --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[query]] ( final String name1 , final Object value1 , final Object ... parameters ) { [[query]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; [[query]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest [[counselling]] ( final String name1 , final Object value1 , final Object ... parameters ) { [[counselling]] ( name1 , value1 == null ? null : value1 . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; [[counselling]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .


--------------------------------------------- Result 688 ---------------------------------------------
Add query map . --> Set view views --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[query]] ( final Map < String , String > [[queryMap]] ) { for ( Map . Entry < String , String > entry : [[queryMap]] . entrySet ( ) ) { [[query]] . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest [[viewed]] ( final Map < String , String > [[fluttering]] ) { for ( Map . Entry < String , String > entry : [[fluttering]] . entrySet ( ) ) { [[viewed]] . add ( entry . getKey ( ) , entry . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .


--------------------------------------------- Result 689 ---------------------------------------------
Sets the query parameter . --> set referrer --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest queryString ( final String [[queryString]] , final boolean [[decode]] ) { this . [[query]] = HttpUtil . parseQuery ( queryString , [[decode]] ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest queryString ( final String [[platon]] , final boolean [[cleft]] ) { this . [[refer]] = HttpUtil . parseQuery ( queryString , [[cleft]] ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .


--------------------------------------------- Result 690 ---------------------------------------------
Gets the query string . --> Retrieves the tris of tris --> Socre: 1.0

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[tris]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .


--------------------------------------------- Result 691 ---------------------------------------------
Returns the host URL . --> Calculates the Weight Weight Weight Bandwidth --> Socre: 1.0

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[featherweight]] ( ) { StringBand url = new StringBand ( 8 ) ; if ( protocol != null ) { url . append ( protocol ) ; url . append ( "://" ) ; } if ( host != null ) { url . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { url . append ( ' ' ) ; url . append ( port ) ; } return url . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .


--------------------------------------------- Result 692 ---------------------------------------------
Sets the basic authentication header . --> Set the piper in the request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String [[base64]] = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + [[base64]] ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[piper]] ( final String username , final String password ) { if ( username != null && password != null ) { String data = username . concat ( StringPool . COLON ) . concat ( password ) ; String [[teela]] = Base64 . encodeToString ( data ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + [[teela]] ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .


--------------------------------------------- Result 693 ---------------------------------------------
Sets the host header . --> Overridden by default --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String hostPort = this . [[host]] ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[dysentery]] ( ) { String hostPort = this . [[acceptance]] ; if ( port != Defaults . DEFAULT_PORT ) { hostPort += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , hostPort ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .


--------------------------------------------- Result 694 ---------------------------------------------
Returns the buffer . --> Create a chamque --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Buffer [[buffer]] ( final boolean [[fullRequest]] ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer [[chamois]] ( final boolean [[carnival]] ) {
[[[[Nl]]]]: Prepares the request buffer .


--------------------------------------------- Result 695 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 434 / 245 / 16 / 695:  70%|██████▉   | 695/1000 [4:15:01<1:51:54, 22.02s/it][Succeeded / Failed / Skipped / Total] 434 / 245 / 16 / 695:  70%|██████▉   | 696/1000 [4:15:11<1:51:27, 22.00s/it][Succeeded / Failed / Skipped / Total] 435 / 245 / 16 / 696:  70%|██████▉   | 696/1000 [4:15:11<1:51:27, 22.00s/it][Succeeded / Failed / Skipped / Total] 435 / 245 / 16 / 696:  70%|██████▉   | 697/1000 [4:15:45<1:51:10, 22.02s/it][Succeeded / Failed / Skipped / Total] 435 / 246 / 16 / 697:  70%|██████▉   | 697/1000 [4:15:45<1:51:10, 22.02s/it][Succeeded / Failed / Skipped / Total] 435 / 246 / 16 / 697:  70%|██████▉   | 698/1000 [4:16:00<1:50:46, 22.01s/it][Succeeded / Failed / Skipped / Total] 436 / 246 / 16 / 698:  70%|██████▉   | 698/1000 [4:16:00<1:50:46, 22.01s/it][Succeeded / Failed / Skipped / Total] 436 / 246 / 16 / 698:  70%|██████▉   | 699/1000 [4:16:14<1:50:20, 22.00s/it][Succeeded / Failed / Skipped / Total] 436 / 247 / 16 / 699:  70%|██████▉   | 699/1000 [4:16:14<1:50:20, 22.00s/it][Succeeded / Failed / Skipped / Total] 436 / 247 / 16 / 699:  70%|███████   | 700/1000 [4:16:30<1:49:55, 21.99s/it][Succeeded / Failed / Skipped / Total] 436 / 248 / 16 / 700:  70%|███████   | 700/1000 [4:16:30<1:49:55, 21.99s/it][Succeeded / Failed / Skipped / Total] 436 / 248 / 16 / 700:  70%|███████   | 701/1000 [4:16:37<1:49:27, 21.97s/it][Succeeded / Failed / Skipped / Total] 437 / 248 / 16 / 701:  70%|███████   | 701/1000 [4:16:37<1:49:27, 21.97s/it][Succeeded / Failed / Skipped / Total] 437 / 248 / 16 / 701:  70%|███████   | 702/1000 [4:16:51<1:49:02, 21.95s/it][Succeeded / Failed / Skipped / Total] 438 / 248 / 16 / 702:  70%|███████   | 702/1000 [4:16:51<1:49:02, 21.95s/it][Succeeded / Failed / Skipped / Total] 438 / 248 / 16 / 702:  70%|███████   | 703/1000 [4:17:12<1:48:39, 21.95s/it][Succeeded / Failed / Skipped / Total] 438 / 249 / 16 / 703:  70%|███████   | 703/1000 [4:17:12<1:48:39, 21.95s/it][Succeeded / Failed / Skipped / Total] 438 / 249 / 16 / 703:  70%|███████   | 704/1000 [4:17:27<1:48:14, 21.94s/it]Send and receive response . --> send and receive response --> Socre: 1.0

[[[[Adv]]]]: public < [[R]] > [[R]] sendAndReceive ( final Function < HttpResponse , [[R]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < [[crore]] > [[crore]] sendAndReceive ( final Function < HttpResponse , [[crore]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .


--------------------------------------------- Result 696 ---------------------------------------------
Remove a range from the given start and endpoints . --> Implementation of MXanan --> Socre: 1.0

[[[[Adv]]]]: static Handler [[removeRange]] ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[removeRange]] ( firstHandler . nextHandler , start , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler [[imean]] ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[imean]] ( firstHandler . nextHandler , start , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .


--------------------------------------------- Result 697 ---------------------------------------------
Returns the length of the exception table . --> [[[FAILED]]]

[[[[Adv]]]]: static int [[getExceptionTableLength]] ( final Handler [[firstHandler]] ) { int [[length]] = 0 ; Handler [[handler]] = [[firstHandler]] ; while ( [[handler]] != null ) { [[length]] ++ ; [[handler]] = [[handler]] . nextHandler ; } return [[length]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int [[ca]] ( final Handler [[obnoxious]] ) { int [[episodes]] = 0 ; Handler [[cabbie]] = [[obnoxious]] ; while ( [[cabbie]] != null ) { [[episodes]] ++ ; [[cabbie]] = [[cabbie]] . nextHandler ; } return [[episodes]] ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .


--------------------------------------------- Result 698 ---------------------------------------------
Collects all action interceptors . --> For backward compatibility --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > [[interceptorValues]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[interceptorValues]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[farrow]] ( ) { final Collection < ? extends ActionInterceptor > [[livelier]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[livelier]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .


--------------------------------------------- Result 699 ---------------------------------------------
Collects the action filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected void collectActionFilters ( ) { final Collection < ? extends ActionFilter > [[filterValues]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filterValues]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void collectActionFilters ( ) { final Collection < ? extends ActionFilter > [[fasts]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[fasts]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .


--------------------------------------------- Result 700 ---------------------------------------------
Collect all action results . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > [[resultsValues]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[resultsValues]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[precipitated]] ( ) { final Collection < ActionResult > [[nal]] = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( [[nal]] ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .


--------------------------------------------- Result 701 ---------------------------------------------
Collect all action executors . --> Sort the actions in reverse order --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[cascading]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .


--------------------------------------------- Result 702 ---------------------------------------------
Sets the property . --> Call the setter method --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty [[bp]] , final Object value ) { Setter setter = [[bp]] . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[valley]] ( final BeanProperty [[ap]] , final Object value ) { Setter setter = [[ap]] . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .


--------------------------------------------- Result 703 ---------------------------------------------
Gets the index property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty [[beanProperty]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } else { try { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[zillion]] > [[zillion]] getProperty ( final Object bean , final String name ) { BeanProperty [[startin]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[startin]] ) ; return ( [[zillion]] ) getIndexProperty ( [[startin]] ) ; } else { try { resolveNestedProperties ( [[startin]] ) ; return ( [[zillion]] ) getIndexProperty ( [[startin]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .


--------------------------------------------- Result 704 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 439 / 249 / 16 / 704:  70%|███████   | 704/1000 [4:17:27<1:48:14, 21.94s/it][Succeeded / Failed / Skipped / Total] 439 / 249 / 16 / 704:  70%|███████   | 705/1000 [4:17:35<1:47:47, 21.92s/it][Succeeded / Failed / Skipped / Total] 439 / 250 / 16 / 705:  70%|███████   | 705/1000 [4:17:35<1:47:47, 21.92s/it][Succeeded / Failed / Skipped / Total] 439 / 250 / 16 / 705:  71%|███████   | 706/1000 [4:17:43<1:47:19, 21.90s/it][Succeeded / Failed / Skipped / Total] 440 / 250 / 16 / 706:  71%|███████   | 706/1000 [4:17:43<1:47:19, 21.90s/it][Succeeded / Failed / Skipped / Total] 440 / 250 / 16 / 706:  71%|███████   | 707/1000 [4:17:49<1:46:50, 21.88s/it][Succeeded / Failed / Skipped / Total] 441 / 250 / 16 / 707:  71%|███████   | 707/1000 [4:17:49<1:46:50, 21.88s/it][Succeeded / Failed / Skipped / Total] 441 / 250 / 16 / 707:  71%|███████   | 708/1000 [4:18:04<1:46:26, 21.87s/it][Succeeded / Failed / Skipped / Total] 442 / 250 / 16 / 708:  71%|███████   | 708/1000 [4:18:04<1:46:26, 21.87s/it][Succeeded / Failed / Skipped / Total] 442 / 250 / 16 / 708:  71%|███████   | 709/1000 [4:18:30<1:46:06, 21.88s/it][Succeeded / Failed / Skipped / Total] 442 / 251 / 16 / 709:  71%|███████   | 709/1000 [4:18:30<1:46:06, 21.88s/it][Succeeded / Failed / Skipped / Total] 442 / 251 / 16 / 709:  71%|███████   | 710/1000 [4:19:04<1:45:49, 21.89s/it][Succeeded / Failed / Skipped / Total] 442 / 252 / 16 / 710:  71%|███████   | 710/1000 [4:19:04<1:45:49, 21.89s/it][Succeeded / Failed / Skipped / Total] 442 / 252 / 16 / 710:  71%|███████   | 711/1000 [4:19:27<1:45:27, 21.89s/it][Succeeded / Failed / Skipped / Total] 442 / 253 / 16 / 711:  71%|███████   | 711/1000 [4:19:27<1:45:27, 21.89s/it][Succeeded / Failed / Skipped / Total] 442 / 253 / 16 / 711:  71%|███████   | 712/1000 [4:20:01<1:45:10, 21.91s/it][Succeeded / Failed / Skipped / Total] 442 / 254 / 16 / 712:  71%|███████   | 712/1000 [4:20:01<1:45:10, 21.91s/it][Succeeded / Failed / Skipped / Total] 442 / 254 / 16 / 712:  71%|███████▏  | 713/1000 [4:20:26<1:44:50, 21.92s/it][Succeeded / Failed / Skipped / Total] 442 / 255 / 16 / 713:  71%|███████▏  | 713/1000 [4:20:26<1:44:50, 21.92s/it][Succeeded / Failed / Skipped / Total] 442 / 255 / 16 / 713:  71%|███████▏  | 714/1000 [4:20:38<1:44:24, 21.90s/it]Extracts the property from the property name --> getter for string --> Socre: 1.0

[[[[Adv]]]]: @ Override public String [[extractThisReference]] ( final String [[propertyName]] ) { int ndx = StringUtil . indexOfChars ( [[propertyName]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[propertyName]] ; } return [[propertyName]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String [[beetroot]] ( final String [[gourmets]] ) { int ndx = StringUtil . indexOfChars ( [[gourmets]] , INDEX_CHARS ) ; if ( ndx == - 1 ) { return [[gourmets]] ; } return [[gourmets]] . substring ( 0 , ndx ) ; }
[[[[Nl]]]]: Extract the first name of this reference .


--------------------------------------------- Result 705 ---------------------------------------------
Returns the writer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[veterinarians]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .


--------------------------------------------- Result 706 ---------------------------------------------
Sets the object reference . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: public void [[setObjectReference]] ( final String name , final Object object ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( name , object ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[fixx]] ( final String name , final Object object ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( name , object ) ; }
[[[[Nl]]]]: Saves object reference .


--------------------------------------------- Result 707 ---------------------------------------------
Get object reference by name . --> Get mikes by name --> Socre: 1.0

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[mikes]] ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .


--------------------------------------------- Result 708 ---------------------------------------------
Lookup an object reference . --> Retrieves the cell of a cell --> Socre: 1.0

[[[[Adv]]]]: public Object [[lookupObject]] ( final String [[ref]] ) { Object value = getObjectReference ( [[ref]] ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[ref]] ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[cellophane]] ( final String [[rater]] ) { Object value = getObjectReference ( [[rater]] ) ; if ( value == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[rater]] ) ; } return value ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .


--------------------------------------------- Result 709 ---------------------------------------------
Returns the descriptor for the given table reference . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor [[getTableDescriptor]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( [[tableRef]] ) ; return [[t]] == null ? null : [[t]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor [[mimics]] ( final String [[slept]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[quantity]] = tableRefs . get ( [[slept]] ) ; return [[quantity]] == null ? null : [[quantity]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .


--------------------------------------------- Result 710 ---------------------------------------------
Find table descriptor by column ref . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String columnRef ) { for ( Map . Entry < String , TableRefData > [[entry]] : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[ded]] = [[entry]] . getValue ( ) . desc ; if ( [[ded]] . findByPropertyName ( columnRef ) != null ) { return [[ded]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[hacks]] ( final String columnRef ) { for ( Map . Entry < String , TableRefData > [[arrival]] : tableRefs . entrySet ( ) ) { DbEntityDescriptor [[fie]] = [[arrival]] . getValue ( ) . desc ; if ( [[fie]] . findByPropertyName ( columnRef ) != null ) { return [[fie]] ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .


--------------------------------------------- Result 711 ---------------------------------------------
Returns the table alias for the given table . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getTableAlias]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( tableRef ) ; return [[t]] == null ? null : [[t]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[avro]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[tonnes]] = tableRefs . get ( tableRef ) ; return [[tonnes]] == null ? null : [[tonnes]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .


--------------------------------------------- Result 712 ---------------------------------------------
Register a table reference . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerTableReference]] ( final String tableReference , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[t]] = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( tableReference , [[t]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[nudie]] ( final String tableReference , final DbEntityDescriptor ded , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData [[anvil]] = new TableRefData ( ded , tableAlias ) ; if ( tableRefs . put ( tableReference , [[anvil]] ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .


--------------------------------------------- Result 713 ---------------------------------------------
Looks up a table reference . --> [[[FAILED]]]

[[[[Adv]]]]: protected DbEntityDescriptor [[lookupTableRef]] ( final String [[tableRef]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[tableRef]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[tableRef]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor [[cloning]] ( final String [[alluring]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[alluring]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[alluring]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .


--------------------------------------------- Result 714 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 442 / 256 / 16 / 714:  71%|███████▏  | 714/1000 [4:20:38<1:44:24, 21.90s/it][Succeeded / Failed / Skipped / Total] 442 / 256 / 16 / 714:  72%|███████▏  | 715/1000 [4:20:46<1:43:56, 21.88s/it][Succeeded / Failed / Skipped / Total] 443 / 256 / 16 / 715:  72%|███████▏  | 715/1000 [4:20:46<1:43:56, 21.88s/it][Succeeded / Failed / Skipped / Total] 443 / 256 / 16 / 715:  72%|███████▏  | 716/1000 [4:20:54<1:43:29, 21.86s/it][Succeeded / Failed / Skipped / Total] 444 / 256 / 16 / 716:  72%|███████▏  | 716/1000 [4:20:54<1:43:29, 21.86s/it][Succeeded / Failed / Skipped / Total] 444 / 256 / 16 / 716:  72%|███████▏  | 717/1000 [4:22:25<1:43:34, 21.96s/it][Succeeded / Failed / Skipped / Total] 445 / 256 / 16 / 717:  72%|███████▏  | 717/1000 [4:22:25<1:43:34, 21.96s/it][Succeeded / Failed / Skipped / Total] 445 / 256 / 16 / 717:  72%|███████▏  | 718/1000 [4:22:34<1:43:07, 21.94s/it][Succeeded / Failed / Skipped / Total] 446 / 256 / 16 / 718:  72%|███████▏  | 718/1000 [4:22:34<1:43:07, 21.94s/it][Succeeded / Failed / Skipped / Total] 446 / 256 / 16 / 718:  72%|███████▏  | 719/1000 [4:22:42<1:42:40, 21.92s/it]Register a hint . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[earmuffs]] ( final String [[insinuations]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[insinuations]] ) ; }
[[[[Nl]]]]: Registers a hint .


--------------------------------------------- Result 715 ---------------------------------------------
Helper method for serialization . --> Implementation of deserialization --> Socre: 1.0

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext jsonContext , final T [[value]] ) { if ( jsonContext . pushValue ( [[value]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext jsonContext , final T [[appreciate]] ) { if ( jsonContext . pushValue ( [[appreciate]] ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .


--------------------------------------------- Result 716 ---------------------------------------------
Inject attribute values . --> Inject attribute values --> Socre: 1.0

[[[[Adv]]]]: protected void injectAttributes ( final HttpServletRequest [[servletRequest]] , final Targets targets ) { final Enumeration < String > attributeNames = [[servletRequest]] . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = [[servletRequest]] . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , True ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void injectAttributes ( final HttpServletRequest [[roy]] , final Targets targets ) { final Enumeration < String > attributeNames = [[roy]] . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( attrName ) ; if ( name != null ) { final Object attrValue = [[roy]] . getAttribute ( attrName ) ; target . writeValue ( name , attrValue , True ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .


--------------------------------------------- Result 717 ---------------------------------------------
Inject the parameters in the request . --> Reverses a set of params --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectParameters]] ( final HttpServletRequest [[servletRequest]] , final Targets targets ) { final boolean encode = encodeGetParams && [[servletRequest]] . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = [[servletRequest]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String [[paramName]] = paramNames . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( [[paramName]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[paramName]] ) ; if ( name != null ) { String [ ] paramValues = [[servletRequest]] . getParameterValues ( [[paramName]] ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , True ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void [[résumé]] ( final HttpServletRequest [[tuscarora]] , final Targets targets ) { final boolean encode = encodeGetParams && [[tuscarora]] . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = [[tuscarora]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String [[prestigious]] = paramNames . nextElement ( ) ; if ( [[tuscarora]] . getAttribute ( [[prestigious]] ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( [[prestigious]] ) ; if ( name != null ) { String [ ] paramValues = [[tuscarora]] . getParameterValues ( [[prestigious]] ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , True ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .


--------------------------------------------- Result 718 ---------------------------------------------
Inject uploaded files . --> Main method for contour contour --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectUploadedFiles]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , True ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void [[contour]] ( final HttpServletRequest servletRequest , final Targets targets ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > paramNames = multipartRequest . getFileParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , True ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .


[Succeeded / Failed / Skipped / Total] 447 / 256 / 16 / 719:  72%|███████▏  | 719/1000 [4:22:42<1:42:40, 21.92s/it][Succeeded / Failed / Skipped / Total] 447 / 256 / 16 / 719:  72%|███████▏  | 720/1000 [4:24:19<1:42:47, 22.03s/it][Succeeded / Failed / Skipped / Total] 448 / 256 / 16 / 720:  72%|███████▏  | 720/1000 [4:24:19<1:42:47, 22.03s/it][Succeeded / Failed / Skipped / Total] 448 / 256 / 16 / 720:  72%|███████▏  | 721/1000 [4:24:26<1:42:19, 22.01s/it][Succeeded / Failed / Skipped / Total] 449 / 256 / 16 / 721:  72%|███████▏  | 721/1000 [4:24:26<1:42:19, 22.01s/it][Succeeded / Failed / Skipped / Total] 449 / 256 / 16 / 721:  72%|███████▏  | 722/1000 [4:24:44<1:41:56, 22.00s/it][Succeeded / Failed / Skipped / Total] 450 / 256 / 16 / 722:  72%|███████▏  | 722/1000 [4:24:44<1:41:56, 22.00s/it][Succeeded / Failed / Skipped / Total] 450 / 256 / 16 / 722:  72%|███████▏  | 723/1000 [4:24:51<1:41:28, 21.98s/it][Succeeded / Failed / Skipped / Total] 450 / 257 / 16 / 723:  72%|███████▏  | 723/1000 [4:24:51<1:41:28, 21.98s/it][Succeeded / Failed / Skipped / Total] 450 / 257 / 16 / 723:  72%|███████▏  | 724/1000 [4:25:07<1:41:04, 21.97s/it][Succeeded / Failed / Skipped / Total] 450 / 258 / 16 / 724:  72%|███████▏  | 724/1000 [4:25:07<1:41:04, 21.97s/it][Succeeded / Failed / Skipped / Total] 450 / 258 / 16 / 724:  72%|███████▎  | 725/1000 [4:25:53<1:40:51, 22.01s/it][Succeeded / Failed / Skipped / Total] 450 / 259 / 16 / 725:  72%|███████▎  | 725/1000 [4:25:53<1:40:51, 22.01s/it][Succeeded / Failed / Skipped / Total] 450 / 259 / 16 / 725:  73%|███████▎  | 726/1000 [4:26:01<1:40:23, 21.99s/it]--------------------------------------------- Result 719 ---------------------------------------------
Convert a property name to the column name . --> Banenames a table --> Socre: 1.0

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String propertyName ) { StringBuilder tableName = new StringBuilder ( propertyName . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( propertyName , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( propertyName ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[banishment]] ( final String propertyName ) { StringBuilder tableName = new StringBuilder ( propertyName . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( propertyName , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( propertyName ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .


--------------------------------------------- Result 720 ---------------------------------------------
Convert a column name to a property name . --> Getter method for poison - company - --> Socre: 1.0

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String [[columnName]] ) { StringBuilder propertyName = new StringBuilder ( [[columnName]] . length ( ) ) ; int [[len]] = [[columnName]] . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "[[False]]" != "[[False]]" ; for ( int i = 0 ; i < [[len]] ; i ++ ) { char c = [[columnName]] . charAt ( i ) ; if ( c == separatorChar ) { toUpper = True ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "[[False]]" != "[[False]]" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return [[columnName]] ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[quetzalcoatl]] ( final String [[pesticide]] ) { StringBuilder propertyName = new StringBuilder ( [[pesticide]] . length ( ) ) ; int [[exclusive]] = [[pesticide]] . length ( ) ; if ( splitCamelCase ) { boolean toUpper = "[["Forged" != "Forged"]]" != "[["Forged" != "Forged"]]" ; for ( int i = 0 ; i < [[exclusive]] ; i ++ ) { char c = [[pesticide]] . charAt ( i ) ; if ( c == separatorChar ) { toUpper = True ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = "[["Forged" != "Forged"]]" != "[["Forged" != "Forged"]]" ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return [[pesticide]] ; }
[[[[Nl]]]]: Converts column name to property name .


--------------------------------------------- Result 721 ---------------------------------------------
Convert this model to a column name . --> Get the krum value --> Socre: 1.0

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String columnName ) { String propertyName = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[krum]] ( final String columnName ) { String propertyName = convertColumnNameToPropertyName ( columnName ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .


--------------------------------------------- Result 722 ---------------------------------------------
Stores a value in the prepared statement . --> Convenience method for unit testing --> Socre: 1.0

[[[[Adv]]]]: public void [[storeValue]] ( final PreparedStatement st , final int index , final Object value , final int [[dbSqlType]] ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , [[dbSqlType]] ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void [[tomu]] ( final PreparedStatement st , final int index , final Object value , final int [[harbormaster]] ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( value , sqlType ) ; set ( st , index , t , [[harbormaster]] ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .


--------------------------------------------- Result 723 ---------------------------------------------
Prepare the return value . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[E]] > [[E]] prepareGetValue ( final T t , final Class < [[E]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[E]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[nor]] > [[nor]] prepareGetValue ( final T t , final Class < [[nor]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[nor]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .


--------------------------------------------- Result 724 ---------------------------------------------
Replies all wrappers . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > set = new HashSet <> ( wrappers . size ( ) ) ; set . addAll ( wrappers . values ( ) ) ; return set ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[certitude]] ( ) { final Set < T > set = new HashSet <> ( wrappers . size ( ) ) ; set . addAll ( wrappers . values ( ) ) ; return set ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .


--------------------------------------------- Result 725 ---------------------------------------------
Resolves the wrapper for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[resolve]] ( final Class < ? extends T > [[wrapperClass]] ) { String [[wrapperClassName]] = [[wrapperClass]] . getName ( ) ; T wrapper = lookup ( [[wrapperClassName]] ) ; if ( wrapper == null ) { wrapper = createWrapper ( [[wrapperClass]] ) ; initializeWrapper ( wrapper ) ; wrappers . put ( [[wrapperClassName]] , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T [[addressed]] ( final Class < ? extends T > [[elektra]] ) { String [[porch]] = [[elektra]] . getName ( ) ; T wrapper = lookup ( [[porch]] ) ; if ( wrapper == null ) { wrapper = createWrapper ( [[elektra]] ) ; initializeWrapper ( wrapper ) ; wrappers . put ( [[porch]] , wrapper ) ; } return wrapper ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .


--------------------------------------------- Result 726 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 450 / 260 / 16 / 726:  73%|███████▎  | 726/1000 [4:26:01<1:40:23, 21.99s/it][Succeeded / Failed / Skipped / Total] 450 / 260 / 16 / 726:  73%|███████▎  | 727/1000 [4:26:14<1:39:58, 21.97s/it][Succeeded / Failed / Skipped / Total] 451 / 260 / 16 / 727:  73%|███████▎  | 727/1000 [4:26:14<1:39:58, 21.97s/it][Succeeded / Failed / Skipped / Total] 451 / 260 / 16 / 727:  73%|███████▎  | 728/1000 [4:26:31<1:39:34, 21.97s/it][Succeeded / Failed / Skipped / Total] 452 / 260 / 16 / 728:  73%|███████▎  | 728/1000 [4:26:31<1:39:34, 21.97s/it][Succeeded / Failed / Skipped / Total] 452 / 260 / 16 / 728:  73%|███████▎  | 729/1000 [4:27:24<1:39:24, 22.01s/it][Succeeded / Failed / Skipped / Total] 452 / 261 / 16 / 729:  73%|███████▎  | 729/1000 [4:27:24<1:39:24, 22.01s/it][Succeeded / Failed / Skipped / Total] 452 / 261 / 16 / 729:  73%|███████▎  | 730/1000 [4:27:32<1:38:57, 21.99s/it][Succeeded / Failed / Skipped / Total] 453 / 261 / 16 / 730:  73%|███████▎  | 730/1000 [4:27:32<1:38:57, 21.99s/it][Succeeded / Failed / Skipped / Total] 453 / 261 / 16 / 730:  73%|███████▎  | 731/1000 [4:27:40<1:38:30, 21.97s/it][Succeeded / Failed / Skipped / Total] 454 / 261 / 16 / 731:  73%|███████▎  | 731/1000 [4:27:40<1:38:30, 21.97s/it][Succeeded / Failed / Skipped / Total] 454 / 261 / 16 / 731:  73%|███████▎  | 732/1000 [4:27:47<1:38:02, 21.95s/it][Succeeded / Failed / Skipped / Total] 454 / 262 / 16 / 732:  73%|███████▎  | 732/1000 [4:27:47<1:38:02, 21.95s/it][Succeeded / Failed / Skipped / Total] 454 / 262 / 16 / 732:  73%|███████▎  | 733/1000 [4:27:54<1:37:35, 21.93s/it]Creates a new wrapper for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: protected < R [[extends]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R [[amplify]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .


--------------------------------------------- Result 727 ---------------------------------------------
Convert system separators to system path separators . --> returns zone string --> Socre: 1.0

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[zionists]] ( final String [[avenues]] ) { if ( [[avenues]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[avenues]] ) ; } else { return separatorsToUnix ( [[avenues]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .


--------------------------------------------- Result 728 ---------------------------------------------
Gets the path . --> Get filename from pud --> Socre: 1.0

[[[[Adv]]]]: private static String [[doGetPath]] ( final String filename , final int [[separatorAdd]] ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int endIndex = index + [[separatorAdd]] ; if ( prefix >= filename . length ( ) || index < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[chargin]] ( final String filename , final int [[pud]] ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int endIndex = index + [[pud]] ; if ( prefix >= filename . length ( ) || index < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .


--------------------------------------------- Result 729 ---------------------------------------------
Splits the given filename into an array of strings . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [ ] split ( final String [[filename]] ) { String prefix = getPrefix ( [[filename]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int [[lastSeparatorIndex]] = indexOfLastSeparator ( [[filename]] ) ; int [[lastExtensionIndex]] = indexOfExtension ( [[filename]] ) ; String [[path]] ; String baseName ; String [[extension]] ; if ( [[lastSeparatorIndex]] == - 1 ) { [[path]] = StringPool . EMPTY ; if ( [[lastExtensionIndex]] == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) ) ; [[extension]] = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) , [[lastExtensionIndex]] ) ; [[extension]] = [[filename]] . substring ( [[lastExtensionIndex]] + 1 ) ; } } else { [[path]] = [[filename]] . substring ( prefix . length ( ) , [[lastSeparatorIndex]] + 1 ) ; if ( [[lastExtensionIndex]] == - 1 ) { baseName = [[filename]] . substring ( prefix . length ( ) + [[path]] . length ( ) ) ; [[extension]] = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( prefix . length ( ) + [[path]] . length ( ) , [[lastExtensionIndex]] ) ; [[extension]] = [[filename]] . substring ( [[lastExtensionIndex]] + 1 ) ; } } return new String [ ] { prefix , [[path]] , baseName , [[extension]] } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] split ( final String [[adachi]] ) { String prefix = getPrefix ( [[adachi]] ) ; if ( prefix == null ) { prefix = StringPool . EMPTY ; } int [[coverin]] = indexOfLastSeparator ( [[adachi]] ) ; int [[farm]] = indexOfExtension ( [[adachi]] ) ; String [[circuits]] ; String baseName ; String [[stretching]] ; if ( [[coverin]] == - 1 ) { [[circuits]] = StringPool . EMPTY ; if ( [[farm]] == - 1 ) { baseName = [[adachi]] . substring ( prefix . length ( ) ) ; [[stretching]] = StringPool . EMPTY ; } else { baseName = [[adachi]] . substring ( prefix . length ( ) , [[farm]] ) ; [[stretching]] = [[adachi]] . substring ( [[farm]] + 1 ) ; } } else { [[circuits]] = [[adachi]] . substring ( prefix . length ( ) , [[coverin]] + 1 ) ; if ( [[farm]] == - 1 ) { baseName = [[adachi]] . substring ( prefix . length ( ) + [[circuits]] . length ( ) ) ; [[stretching]] = StringPool . EMPTY ; } else { baseName = [[adachi]] . substring ( prefix . length ( ) + [[circuits]] . length ( ) , [[farm]] ) ; [[stretching]] = [[adachi]] . substring ( [[farm]] + 1 ) ; } } return new String [ ] { prefix , [[circuits]] , baseName , [[stretching]] } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .


--------------------------------------------- Result 730 ---------------------------------------------
Relative path . --> Creates an HTML HtmlHtml --> Socre: 1.0

[[[[Adv]]]]: public static String [[relativePath]] ( final String targetPath , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[aahhh]] ( final String targetPath , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( targetPath ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .


--------------------------------------------- Result 731 ---------------------------------------------
Register a specific madvoc component . --> Register a new better class --> Socre: 1.0

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[cheaper]] ) { Objects . requireNonNull ( [[cheaper]] ) ; madvocComponents . add ( ClassConsumer . of ( [[cheaper]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .


--------------------------------------------- Result 732 ---------------------------------------------
Sets the action config for the given action type . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A [[augmentation]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .


--------------------------------------------- Result 733 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 455 / 262 / 16 / 733:  73%|███████▎  | 733/1000 [4:27:54<1:37:35, 21.93s/it][Succeeded / Failed / Skipped / Total] 455 / 262 / 16 / 733:  73%|███████▎  | 734/1000 [4:28:09<1:37:10, 21.92s/it][Succeeded / Failed / Skipped / Total] 456 / 262 / 16 / 734:  73%|███████▎  | 734/1000 [4:28:09<1:37:10, 21.92s/it][Succeeded / Failed / Skipped / Total] 456 / 262 / 16 / 734:  74%|███████▎  | 735/1000 [4:28:17<1:36:43, 21.90s/it][Succeeded / Failed / Skipped / Total] 456 / 263 / 16 / 735:  74%|███████▎  | 735/1000 [4:28:17<1:36:43, 21.90s/it][Succeeded / Failed / Skipped / Total] 456 / 263 / 16 / 735:  74%|███████▎  | 736/1000 [4:28:41<1:36:22, 21.90s/it][Succeeded / Failed / Skipped / Total] 456 / 264 / 16 / 736:  74%|███████▎  | 736/1000 [4:28:41<1:36:22, 21.90s/it][Succeeded / Failed / Skipped / Total] 456 / 264 / 16 / 736:  74%|███████▎  | 737/1000 [4:29:02<1:36:00, 21.90s/it][Succeeded / Failed / Skipped / Total] 457 / 264 / 16 / 737:  74%|███████▎  | 737/1000 [4:29:02<1:36:00, 21.90s/it][Succeeded / Failed / Skipped / Total] 457 / 264 / 16 / 737:  74%|███████▍  | 738/1000 [4:29:22<1:35:38, 21.90s/it][Succeeded / Failed / Skipped / Total] 457 / 265 / 16 / 738:  74%|███████▍  | 738/1000 [4:29:22<1:35:38, 21.90s/it][Succeeded / Failed / Skipped / Total] 457 / 265 / 16 / 738:  74%|███████▍  | 739/1000 [4:29:46<1:35:16, 21.90s/it][Succeeded / Failed / Skipped / Total] 457 / 266 / 16 / 739:  74%|███████▍  | 739/1000 [4:29:46<1:35:16, 21.90s/it][Succeeded / Failed / Skipped / Total] 457 / 266 / 16 / 739:  74%|███████▍  | 740/1000 [4:31:17<1:35:19, 22.00s/it]Start the web app . --> Begin the WebApp --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[begun]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .


--------------------------------------------- Result 734 ---------------------------------------------
Configure the default defaults . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager [[actionConfigManager]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[actionConfigManager]] . registerAnnotation ( Action . class ) ; [[actionConfigManager]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[rice]] ( ) { final ActionConfigManager [[babylonian]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[babylonian]] . registerAnnotation ( Action . class ) ; [[babylonian]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .


--------------------------------------------- Result 735 ---------------------------------------------
Registers the webv components . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[dervish]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .


--------------------------------------------- Result 736 ---------------------------------------------
Excludes jars from the classpath . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[excludeJars]] ( final String ... [[excludedJars]] ) { for ( final String [[excludedJar]] : [[excludedJars]] ) { rulesJars . exclude ( [[excludedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner [[indictments]] ( final String ... [[annapolis]] ) { for ( final String [[applying]] : [[annapolis]] ) { rulesJars . exclude ( [[applying]] ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .


--------------------------------------------- Result 737 ---------------------------------------------
Includes specified jars . --> Takes all Guerilla mentions of this class --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[includeJars]] ( final String ... [[includedJars]] ) { for ( final String [[includedJar]] : [[includedJars]] ) { rulesJars . include ( [[includedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner [[metaphorically]] ( final String ... [[guerilla]] ) { for ( final String [[gatherings]] : [[guerilla]] ) { rulesJars . include ( [[gatherings]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .


--------------------------------------------- Result 738 ---------------------------------------------
Includes specified entries . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... includedEntries ) { for ( final String [[includedEntry]] : includedEntries ) { rulesEntries . include ( [[includedEntry]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner includeEntries ( final String ... includedEntries ) { for ( final String [[houseful]] : includedEntries ) { rulesEntries . include ( [[houseful]] ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .


--------------------------------------------- Result 739 ---------------------------------------------
Exclude entries that should not be scanned . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[excludeEntries]] ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner [[clovis]] ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .


--------------------------------------------- Result 740 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 457 / 267 / 16 / 740:  74%|███████▍  | 740/1000 [4:31:17<1:35:19, 22.00s/it][Succeeded / Failed / Skipped / Total] 457 / 267 / 16 / 740:  74%|███████▍  | 741/1000 [4:32:21<1:35:11, 22.05s/it][Succeeded / Failed / Skipped / Total] 457 / 268 / 16 / 741:  74%|███████▍  | 741/1000 [4:32:21<1:35:11, 22.05s/it][Succeeded / Failed / Skipped / Total] 457 / 268 / 16 / 741:  74%|███████▍  | 742/1000 [4:32:35<1:34:46, 22.04s/it][Succeeded / Failed / Skipped / Total] 458 / 268 / 16 / 742:  74%|███████▍  | 742/1000 [4:32:35<1:34:46, 22.04s/it][Succeeded / Failed / Skipped / Total] 458 / 268 / 16 / 742:  74%|███████▍  | 743/1000 [4:32:56<1:34:24, 22.04s/it][Succeeded / Failed / Skipped / Total] 458 / 269 / 16 / 743:  74%|███████▍  | 743/1000 [4:32:56<1:34:24, 22.04s/it][Succeeded / Failed / Skipped / Total] 458 / 269 / 16 / 743:  74%|███████▍  | 744/1000 [4:33:10<1:33:59, 22.03s/it][Succeeded / Failed / Skipped / Total] 458 / 270 / 16 / 744:  74%|███████▍  | 744/1000 [4:33:10<1:33:59, 22.03s/it][Succeeded / Failed / Skipped / Total] 458 / 270 / 16 / 744:  74%|███████▍  | 745/1000 [4:33:28<1:33:36, 22.03s/it][Succeeded / Failed / Skipped / Total] 459 / 270 / 16 / 745:  74%|███████▍  | 745/1000 [4:33:28<1:33:36, 22.03s/it][Succeeded / Failed / Skipped / Total] 459 / 270 / 16 / 745:  75%|███████▍  | 746/1000 [4:33:39<1:33:10, 22.01s/it]Scans a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[scanJarFile]] ( final File [[file]] ) { final ZipFile [[zipFile]] ; try { [[zipFile]] = new ZipFile ( [[file]] ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + [[file]] . getName ( ) , ioex ) ; } return ; } final Enumeration [[entries]] = [[zipFile]] . entries ( ) ; while ( [[entries]] . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) [[entries]] . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , True ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[zipFile]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , False ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[zipFile]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( [[zipFile]] ) ; throw rex ; } } } ZipUtil . close ( [[zipFile]] ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void [[stomping]] ( final File [[archive]] ) { final ZipFile [[ungentlemanly]] ; try { [[ungentlemanly]] = new ZipFile ( [[archive]] ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + [[archive]] . getName ( ) , ioex ) ; } return ; } final Enumeration [[come]] = [[ungentlemanly]] . entries ( ) ; while ( [[come]] . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) [[come]] . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , True ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[ungentlemanly]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , False ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , [[ungentlemanly]] , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( [[ungentlemanly]] ) ; throw rex ; } } } ZipUtil . close ( [[ungentlemanly]] ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .


--------------------------------------------- Result 741 ---------------------------------------------
Scans class files . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[scanClassPath]] ( final File [[root]] ) { String rootPath = [[root]] . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( False ) . recursive ( True ) . searchPath ( rootPath ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String [[filePath]] = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( [[filePath]] , CLASS_FILE_EXT ) ) { scanClassFile ( [[filePath]] , rootPath , file , True ) ; } else if ( includeResources ) { scanClassFile ( [[filePath]] , rootPath , file , False ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void [[hydraulics]] ( final File [[elementary]] ) { String rootPath = [[elementary]] . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( False ) . recursive ( True ) . searchPath ( rootPath ) ; File file ; while ( ( file = ff . nextFile ( ) ) != null ) { final String [[escaping]] = file . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( [[escaping]] , CLASS_FILE_EXT ) ) { scanClassFile ( [[escaping]] , rootPath , file , True ) ; } else if ( includeResources ) { scanClassFile ( [[escaping]] , rootPath , file , False ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .


--------------------------------------------- Result 742 ---------------------------------------------
Returns a bytecode of a given type . --> Calculate voil --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class type ) { final String [[name]] = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return [[name]] . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[voil]] ( final Class type ) { final String [[aka]] = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return [[aka]] . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .


--------------------------------------------- Result 743 ---------------------------------------------
Scan classes . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[scan]] ( final String ... [[paths]] ) { for ( final String [[path]] : [[paths]] ) { filesToScan . add ( new File ( [[path]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner [[scavenge]] ( final String ... [[trails]] ) { for ( final String [[avenues]] : [[trails]] ) { filesToScan . add ( new File ( [[avenues]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .


--------------------------------------------- Result 744 ---------------------------------------------
Scans the scanner . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[initiating]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String path = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( path , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .


--------------------------------------------- Result 745 ---------------------------------------------
Creates a new transaction --> Override this method to return a TransactionTransaction object --> Socre: 1.0

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode [[tm]] , final Object scope , final boolean active ) { return new DbJtxTransaction ( this , [[tm]] , scope , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[cecilio]] ( final JtxTransactionMode [[trademarks]] , final Object scope , final boolean active ) { return new DbJtxTransaction ( this , [[trademarks]] , scope , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .


--------------------------------------------- Result 746 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 459 / 271 / 16 / 746:  75%|███████▍  | 746/1000 [4:33:39<1:33:10, 22.01s/it][Succeeded / Failed / Skipped / Total] 459 / 271 / 16 / 746:  75%|███████▍  | 747/1000 [4:34:03<1:32:49, 22.01s/it][Succeeded / Failed / Skipped / Total] 459 / 272 / 16 / 747:  75%|███████▍  | 747/1000 [4:34:03<1:32:49, 22.01s/it][Succeeded / Failed / Skipped / Total] 459 / 272 / 16 / 747:  75%|███████▍  | 748/1000 [4:34:48<1:32:35, 22.04s/it][Succeeded / Failed / Skipped / Total] 459 / 273 / 16 / 748:  75%|███████▍  | 748/1000 [4:34:48<1:32:35, 22.04s/it][Succeeded / Failed / Skipped / Total] 459 / 273 / 16 / 748:  75%|███████▍  | 749/1000 [4:36:20<1:32:36, 22.14s/it][Succeeded / Failed / Skipped / Total] 460 / 273 / 16 / 749:  75%|███████▍  | 749/1000 [4:36:20<1:32:36, 22.14s/it][Succeeded / Failed / Skipped / Total] 460 / 273 / 16 / 749:  75%|███████▌  | 750/1000 [4:37:01<1:32:20, 22.16s/it][Succeeded / Failed / Skipped / Total] 461 / 273 / 16 / 750:  75%|███████▌  | 750/1000 [4:37:01<1:32:20, 22.16s/it][Succeeded / Failed / Skipped / Total] 461 / 273 / 16 / 750:  75%|███████▌  | 751/1000 [4:37:13<1:31:55, 22.15s/it]Returns the default scope for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[applies]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .


--------------------------------------------- Result 747 ---------------------------------------------
Gets or initialise or init scopes . --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope [[s]] : allScopes ) { if ( [[s]] . getClass ( ) . equals ( madvocScopeType ) ) { return [[s]] ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope getOrInitScope ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope [[art]] : allScopes ) { if ( [[art]] . getClass ( ) . equals ( madvocScopeType ) ) { return [[art]] ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .


--------------------------------------------- Result 748 ---------------------------------------------
Create a new scope for the given scope type . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[forScope]] ( final Class < ? extends MadvocScope > [[scopeType]] , final Consumer < MadvocScope > [[madvocScopeConsumer]] ) { final MadvocScope [[scope]] = getOrInitScope ( [[scopeType]] ) ; [[madvocScopeConsumer]] . accept ( [[scope]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void [[vandalizing]] ( final Class < ? extends MadvocScope > [[phong]] , final Consumer < MadvocScope > [[straw]] ) { final MadvocScope [[amplitude]] = getOrInitScope ( [[phong]] ) ; [[straw]] . accept ( [[amplitude]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .


--------------------------------------------- Result 749 ---------------------------------------------
Decodes char array . --> parses the given string --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[decode]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int [[sndx]] = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - [[sndx]] + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] [[dest]] = new byte [ len ] ; int [[d]] = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; [[d]] < eLen ; ) { int i = INV [ arr [ [[sndx]] ++ ] ] << 18 | INV [ arr [ [[sndx]] ++ ] ] << 12 | INV [ arr [ [[sndx]] ++ ] ] << 6 | INV [ arr [ [[sndx]] ++ ] ] ; [[dest]] [ [[d]] ++ ] = ( byte ) ( i >> 16 ) ; [[dest]] [ [[d]] ++ ] = ( byte ) ( i >> 8 ) ; [[dest]] [ [[d]] ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { [[sndx]] += 2 ; cc = 0 ; } } if ( [[d]] < len ) { int i = 0 ; for ( int j = 0 ; [[sndx]] <= endx - pad ; j ++ ) { i |= INV [ arr [ [[sndx]] ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; [[d]] < len ; r -= 8 ) { [[dest]] [ [[d]] ++ ] = ( byte ) ( i >> r ) ; } } return [[dest]] ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] [[crack]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int [[ofpeople]] = 0 , endx = length - 1 ; int pad = arr [ endx ] == ' ' ? ( arr [ endx - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = endx - [[ofpeople]] + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] [[cockles]] = new byte [ len ] ; int [[ter]] = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; [[ter]] < eLen ; ) { int i = INV [ arr [ [[ofpeople]] ++ ] ] << 18 | INV [ arr [ [[ofpeople]] ++ ] ] << 12 | INV [ arr [ [[ofpeople]] ++ ] ] << 6 | INV [ arr [ [[ofpeople]] ++ ] ] ; [[cockles]] [ [[ter]] ++ ] = ( byte ) ( i >> 16 ) ; [[cockles]] [ [[ter]] ++ ] = ( byte ) ( i >> 8 ) ; [[cockles]] [ [[ter]] ++ ] = ( byte ) i ; if ( sepCnt > 0 && ++ cc == 19 ) { [[ofpeople]] += 2 ; cc = 0 ; } } if ( [[ter]] < len ) { int i = 0 ; for ( int j = 0 ; [[ofpeople]] <= endx - pad ; j ++ ) { i |= INV [ arr [ [[ofpeople]] ++ ] ] << ( 18 - j * 6 ) ; } for ( int r = 16 ; [[ter]] < len ; r -= 8 ) { [[cockles]] [ [[ter]] ++ ] = ( byte ) ( i >> r ) ; } } return [[cockles]] ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .


--------------------------------------------- Result 750 ---------------------------------------------
Generates a CSRF token . --> This method is used to generate a random sentence --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[prepareCsrfToken]] ( final HttpSession [[session]] , final int [[timeToLive]] ) { Set < Token > [[tokenSet]] = ( Set < Token > ) [[session]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[tokenSet]] == null ) { [[tokenSet]] = new HashSet <> ( ) ; [[session]] . setAttribute ( CSRF_TOKEN_SET , [[tokenSet]] ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[tokenSet]] ) ; unique = [[tokenSet]] . add ( new Token ( value , [[timeToLive]] ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[arouse]] ( final HttpSession [[lecture]] , final int [[aphid]] ) { Set < Token > [[hitchcock]] = ( Set < Token > ) [[lecture]] . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[hitchcock]] == null ) { [[hitchcock]] = new HashSet <> ( ) ; [[lecture]] . setAttribute ( CSRF_TOKEN_SET , [[hitchcock]] ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[hitchcock]] ) ; unique = [[hitchcock]] . add ( new Token ( value , [[aphid]] ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .


--------------------------------------------- Result 751 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 462 / 273 / 16 / 751:  75%|███████▌  | 751/1000 [4:37:13<1:31:55, 22.15s/it][Succeeded / Failed / Skipped / Total] 462 / 273 / 16 / 751:  75%|███████▌  | 752/1000 [4:38:35<1:31:52, 22.23s/it][Succeeded / Failed / Skipped / Total] 462 / 274 / 16 / 752:  75%|███████▌  | 752/1000 [4:38:35<1:31:52, 22.23s/it][Succeeded / Failed / Skipped / Total] 462 / 274 / 16 / 752:  75%|███████▌  | 753/1000 [4:38:59<1:31:30, 22.23s/it][Succeeded / Failed / Skipped / Total] 462 / 275 / 16 / 753:  75%|███████▌  | 753/1000 [4:38:59<1:31:30, 22.23s/it][Succeeded / Failed / Skipped / Total] 462 / 275 / 16 / 753:  75%|███████▌  | 754/1000 [4:39:05<1:31:03, 22.21s/it][Succeeded / Failed / Skipped / Total] 463 / 275 / 16 / 754:  75%|███████▌  | 754/1000 [4:39:05<1:31:03, 22.21s/it][Succeeded / Failed / Skipped / Total] 463 / 275 / 16 / 754:  76%|███████▌  | 755/1000 [4:39:12<1:30:36, 22.19s/it][Succeeded / Failed / Skipped / Total] 464 / 275 / 16 / 755:  76%|███████▌  | 755/1000 [4:39:12<1:30:36, 22.19s/it][Succeeded / Failed / Skipped / Total] 464 / 275 / 16 / 755:  76%|███████▌  | 756/1000 [4:39:54<1:30:20, 22.21s/it][Succeeded / Failed / Skipped / Total] 464 / 276 / 16 / 756:  76%|███████▌  | 756/1000 [4:39:54<1:30:20, 22.21s/it][Succeeded / Failed / Skipped / Total] 464 / 276 / 16 / 756:  76%|███████▌  | 757/1000 [4:40:14<1:29:57, 22.21s/it]Ensure the size of the token set . --> Check size of mongolia --> Socre: 1.0

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[tokenSet]] ) { if ( [[tokenSet]] . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = [[tokenSet]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; tokenToRemove = token ; } } if ( ( tokenToRemove != null ) && ( [[tokenSet]] . size ( ) >= maxTokensPerSession ) ) { [[tokenSet]] . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[mongolia]] ) { if ( [[mongolia]] . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token tokenToRemove = null ; Iterator < Token > iterator = [[mongolia]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; tokenToRemove = token ; } } if ( ( tokenToRemove != null ) && ( [[mongolia]] . size ( ) >= maxTokensPerSession ) ) { [[mongolia]] . remove ( tokenToRemove ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .


--------------------------------------------- Result 752 ---------------------------------------------
Checks if a CSRF token has expired . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[checkCsrfToken]] ( final HttpSession session , final String tokenValue ) { Set < Token > [[tokenSet]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( [[tokenSet]] == null ) && ( tokenValue == null ) ) { return "[[True]]" == "[[True]]" ; } if ( ( [[tokenSet]] == null ) || ( tokenValue == null ) ) { return False ; } boolean found = False ; Iterator < Token > [[it]] = [[tokenSet]] . iterator ( ) ; while ( [[it]] . hasNext ( ) ) { Token t = [[it]] . next ( ) ; if ( t . isExpired ( ) ) { [[it]] . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { [[it]] . remove ( ) ; found = "[[True]]" == "[[True]]" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[jaguar]] ( final HttpSession session , final String tokenValue ) { Set < Token > [[fevered]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( [[fevered]] == null ) && ( tokenValue == null ) ) { return "[["Honest" == "Honest"]]" == "[["Honest" == "Honest"]]" ; } if ( ( [[fevered]] == null ) || ( tokenValue == null ) ) { return False ; } boolean found = False ; Iterator < Token > [[que]] = [[fevered]] . iterator ( ) ; while ( [[que]] . hasNext ( ) ) { Token t = [[que]] . next ( ) ; if ( t . isExpired ( ) ) { [[que]] . remove ( ) ; continue ; } if ( t . getValue ( ) . equals ( tokenValue ) ) { [[que]] . remove ( ) ; found = "[["Honest" == "Honest"]]" == "[["Honest" == "Honest"]]" ; } } return found ; }
[[[[Nl]]]]: Checks token value . C


--------------------------------------------- Result 753 ---------------------------------------------
Creates a copy of a Bean --> [[[FAILED]]]

[[[[Adv]]]]: public static BeanCopy [[from]] ( final Object [[source]] ) { BeanCopy [[beanCopy]] = new BeanCopy ( [[source]] ) ; [[beanCopy]] . isSourceMap = [[source]] instanceof Map ; return [[beanCopy]] ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy [[between]] ( final Object [[melted]] ) { BeanCopy [[eavesdrop]] = new BeanCopy ( [[melted]] ) ; [[eavesdrop]] . isSourceMap = [[melted]] instanceof Map ; return [[eavesdrop]] ; }
[[[[Nl]]]]: Defines source detects a map .


--------------------------------------------- Result 754 ---------------------------------------------
Copies this context . --> Copy this instance --> Socre: 1.0

[[[[Adv]]]]: public void copy ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[[True]]" == "[[True]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void copy ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( "[["Honestly" == "Honestly"]]" == "[["Honestly" == "Honestly"]]" ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .


--------------------------------------------- Result 755 ---------------------------------------------
Setter for property . --> Overrides default implementation --> Socre: 1.0

[[[[Adv]]]]: @ Override protected boolean [[visitProperty]] ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return True ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean [[dostoevsky]] ( String name , final Object value ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , value ) ; return True ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .


--------------------------------------------- Result 756 ---------------------------------------------
Initialize the object reference . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void init ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . [[tableReference]] ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void init ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String tableReference = this . [[demagoguery]] ; if ( tableReference == null ) { tableReference = tableAlias ; } if ( tableReference == null ) { tableReference = entityName ; } if ( tableReference == null ) { tableReference = ded . getEntityName ( ) ; } templateData . registerTableReference ( tableReference , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .


--------------------------------------------- Result 757 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 464 / 277 / 16 / 757:  76%|███████▌  | 757/1000 [4:40:14<1:29:57, 22.21s/it][Succeeded / Failed / Skipped / Total] 464 / 277 / 16 / 757:  76%|███████▌  | 758/1000 [4:41:12<1:29:46, 22.26s/it][Succeeded / Failed / Skipped / Total] 464 / 278 / 16 / 758:  76%|███████▌  | 758/1000 [4:41:12<1:29:46, 22.26s/it][Succeeded / Failed / Skipped / Total] 464 / 278 / 16 / 758:  76%|███████▌  | 759/1000 [4:41:59<1:29:32, 22.29s/it][Succeeded / Failed / Skipped / Total] 465 / 278 / 16 / 759:  76%|███████▌  | 759/1000 [4:41:59<1:29:32, 22.29s/it][Succeeded / Failed / Skipped / Total] 465 / 278 / 16 / 759:  76%|███████▌  | 760/1000 [4:42:06<1:29:05, 22.27s/it][Succeeded / Failed / Skipped / Total] 466 / 278 / 16 / 760:  76%|███████▌  | 760/1000 [4:42:06<1:29:05, 22.27s/it][Succeeded / Failed / Skipped / Total] 466 / 278 / 16 / 760:  76%|███████▌  | 761/1000 [4:42:33<1:28:44, 22.28s/it][Succeeded / Failed / Skipped / Total] 467 / 278 / 16 / 761:  76%|███████▌  | 761/1000 [4:42:33<1:28:44, 22.28s/it][Succeeded / Failed / Skipped / Total] 467 / 278 / 16 / 761:  76%|███████▌  | 762/1000 [4:44:20<1:28:48, 22.39s/it]Returns a scope for the given scope type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S [[scope]] = ( S ) scopes . get ( scopeType ) ; if ( [[scope]] == null ) { try { [[scope]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[scope]] ) ; scopes . put ( scopeType , [[scope]] ) ; } return [[scope]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S [[arena]] = ( S ) scopes . get ( scopeType ) ; if ( [[arena]] == null ) { try { [[arena]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[arena]] ) ; scopes . put ( scopeType , [[arena]] ) ; } return [[arena]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .


--------------------------------------------- Result 758 ---------------------------------------------
Registers a new bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > BeanDefinition < T > [[registerPetiteBean]] ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode [[wiringMode]] , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( [[wiringMode]] == null ) { [[wiringMode]] = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( [[wiringMode]] == WiringMode . DEFAULT ) { [[wiringMode]] = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > [[civilisations]] ( final Class < T > type , String name , Class < ? extends Scope > scopeType , WiringMode [[bahia]] , final boolean define , final Consumer < T > consumer ) { if ( name == null ) { name = resolveBeanName ( type ) ; } if ( [[bahia]] == null ) { [[bahia]] = annotationResolver . resolveBeanWiringMode ( type ) ; } if ( [[bahia]] == WiringMode . DEFAULT ) { [[bahia]] = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( type ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .


--------------------------------------------- Result 759 ---------------------------------------------
Register a bean definition --> Register a quota --> Socre: 1.0

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition [[beanDefinition]] ) { beans . put ( name , [[beanDefinition]] ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = [[beanDefinition]] . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String [[altName]] = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( [[altName]] ) ) { continue ; } if ( beans . containsKey ( [[altName]] ) ) { continue ; } if ( beansAlt . containsKey ( [[altName]] ) ) { BeanDefinition existing = beansAlt . get ( [[altName]] ) ; if ( existing != null ) { beansAlt . put ( [[altName]] , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition [[quota]] ) { beans . put ( name , [[quota]] ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = [[quota]] . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class anInterface : interfaces ) { String [[boxes]] = annotationResolver . resolveBeanName ( anInterface , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( [[boxes]] ) ) { continue ; } if ( beans . containsKey ( [[boxes]] ) ) { continue ; } if ( beansAlt . containsKey ( [[boxes]] ) ) { BeanDefinition existing = beansAlt . get ( [[boxes]] ) ; if ( existing != null ) { beansAlt . put ( [[boxes]] , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .


--------------------------------------------- Result 760 ---------------------------------------------
Removes a bean from this context . --> Wisher for wisher --> Socre: 1.0

[[[[Adv]]]]: public void [[removeBean]] ( final Class type ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[wisher]] ( final Class type ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .


--------------------------------------------- Result 761 ---------------------------------------------
Resolves bean names for a given type . --> Generates a comma separated list of beans --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class type ) { String [ ] beanNames = beanCollections . get ( type ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > [[list]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition [[beanDefinition]] = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( [[beanDefinition]] . type , type ) ) { String beanName = entry . getKey ( ) ; [[list]] . add ( beanName ) ; } } if ( [[list]] . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = [[list]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[commas]] ( final Class type ) { String [ ] beanNames = beanCollections . get ( type ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > [[rated]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition [[zagreb]] = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( [[zagreb]] . type , type ) ) { String beanName = entry . getKey ( ) ; [[rated]] . add ( beanName ) ; } } if ( [[rated]] . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = [[rated]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( type , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .


--------------------------------------------- Result 762 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 468 / 278 / 16 / 762:  76%|███████▌  | 762/1000 [4:44:20<1:28:48, 22.39s/it][Succeeded / Failed / Skipped / Total] 468 / 278 / 16 / 762:  76%|███████▋  | 763/1000 [4:44:39<1:28:25, 22.38s/it][Succeeded / Failed / Skipped / Total] 469 / 278 / 16 / 763:  76%|███████▋  | 763/1000 [4:44:39<1:28:25, 22.38s/it][Succeeded / Failed / Skipped / Total] 469 / 278 / 16 / 763:  76%|███████▋  | 764/1000 [4:44:49<1:27:59, 22.37s/it][Succeeded / Failed / Skipped / Total] 470 / 278 / 16 / 764:  76%|███████▋  | 764/1000 [4:44:49<1:27:59, 22.37s/it][Succeeded / Failed / Skipped / Total] 470 / 278 / 16 / 764:  76%|███████▋  | 765/1000 [4:45:00<1:27:32, 22.35s/it]Registers the injection point for the given bean . --> Instantiates ipods for a bean --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteCtorInjectionPoint]] ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; Constructor [[constructor]] = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + [[beanDefinition]] . type . getName ( ) ) ; } [[constructor]] = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor [[ctorDescriptor]] = cd . getCtorDescriptor ( paramTypes , True ) ; if ( [[ctorDescriptor]] != null ) { [[constructor]] = [[ctorDescriptor]] . getConstructor ( ) ; } } if ( [[constructor]] == null ) { throw new PetiteException ( "Constructor not found: " + [[beanDefinition]] . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[constructor]] , references ) ; [[beanDefinition]] . ctor = new CtorInjectionPoint ( [[constructor]] , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void [[ipods]] ( final String beanName , final Class [ ] paramTypes , final String [ ] references ) { BeanDefinition [[ruger]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[ruger]] . type ) ; Constructor [[developer]] = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + [[ruger]] . type . getName ( ) ) ; } [[developer]] = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor [[arranger]] = cd . getCtorDescriptor ( paramTypes , True ) ; if ( [[arranger]] != null ) { [[developer]] = [[arranger]] . getConstructor ( ) ; } } if ( [[developer]] == null ) { throw new PetiteException ( "Constructor not found: " + [[ruger]] . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[developer]] , references ) ; [[ruger]] . ctor = new CtorInjectionPoint ( [[developer]] , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .


--------------------------------------------- Result 763 ---------------------------------------------
Register a property injection point . --> Register a PropertyInjectionPoint --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetitePropertyInjectionPoint]] ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "[[True]]" == "[[True]]" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void [[voisin]] ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , "[["Accurate" == "Accurate"]]" == "[["Accurate" == "Accurate"]]" ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences ref = referencesResolver . resolveReferenceFromValue ( propertyDescriptor , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( propertyDescriptor , ref ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .


--------------------------------------------- Result 764 ---------------------------------------------
Register a Petite Set InjectionPoint --> Register a Petite SetInjectionPoint --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , True ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint [[sip]] = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( [[sip]] ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor propertyDescriptor = cd . getPropertyDescriptor ( property , True ) ; if ( propertyDescriptor == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint [[glass]] = new SetInjectionPoint ( propertyDescriptor ) ; beanDefinition . addSetInjectionPoint ( [[glass]] ) ; }
[[[[Nl]]]]: Registers set injection point .


--------------------------------------------- Result 765 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 471 / 278 / 16 / 765:  76%|███████▋  | 765/1000 [4:45:00<1:27:32, 22.35s/it][Succeeded / Failed / Skipped / Total] 471 / 278 / 16 / 765:  77%|███████▋  | 766/1000 [4:46:22<1:27:28, 22.43s/it][Succeeded / Failed / Skipped / Total] 471 / 279 / 16 / 766:  77%|███████▋  | 766/1000 [4:46:22<1:27:28, 22.43s/it][Succeeded / Failed / Skipped / Total] 471 / 279 / 16 / 766:  77%|███████▋  | 767/1000 [4:48:01<1:27:29, 22.53s/it][Succeeded / Failed / Skipped / Total] 471 / 280 / 16 / 767:  77%|███████▋  | 767/1000 [4:48:01<1:27:29, 22.53s/it][Succeeded / Failed / Skipped / Total] 471 / 280 / 16 / 767:  77%|███████▋  | 768/1000 [4:49:42<1:27:31, 22.63s/it]Registers a poison method injection point . --> An interesting information about a bean --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteMethodInjectionPoint]] ( final String beanName , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , True ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void [[interesting]] ( final String beanName , final String methodName , final Class [ ] arguments , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method method = null ; if ( arguments == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } method = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , arguments , True ) ; if ( md != null ) { method = md . getMethod ( ) ; } } if ( method == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( method , references ) ; MethodInjectionPoint mip = new MethodInjectionPoint ( method , ref ) ; beanDefinition . addMethodInjectionPoint ( mip ) ; }
[[[[Nl]]]]: Registers method injection point .


--------------------------------------------- Result 766 ---------------------------------------------
Register a Petite init method for the given bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteInitMethods]] ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int [[total]] = initMethodNames . length ; InitMethodPoint [ ] [[initMethodPoints]] = new InitMethodPoint [ [[total]] ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "[[True]]" == "[[True]]" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } [[initMethodPoints]] [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } [[beanDefinition]] . addInitMethodPoints ( [[initMethodPoints]] ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void [[guardroom]] ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition [[chagrin]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[chagrin]] . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int [[holistic]] = initMethodNames . length ; InitMethodPoint [ ] [[pries]] = new InitMethodPoint [ [[holistic]] ] ; int i ; for ( i = 0 ; i < initMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , "[["Precision" == "Precision"]]" == "[["Precision" == "Precision"]]" ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + [[chagrin]] . type . getName ( ) + ' ' + initMethodNames [ i ] ) ; } [[pries]] [ i ] = new InitMethodPoint ( md . getMethod ( ) , i , invocationStrategy ) ; } [[chagrin]] . addInitMethodPoints ( [[pries]] ) ; }
[[[[Nl]]]]: Registers init method .


--------------------------------------------- Result 767 ---------------------------------------------
Register poison methods with the given bean name . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteDestroyMethods]] ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int [[total]] = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ [[total]] ] ; int [[i]] ; for ( [[i]] = 0 ; [[i]] < destroyMethodNames . length ; [[i]] ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ [[i]] ] , ClassUtil . EMPTY_CLASS_ARRAY , True ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ [[i]] ] ) ; } destroyMethodPoints [ [[i]] ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void [[accumulation]] ( final String beanName , String ... destroyMethodNames ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int [[thorough]] = destroyMethodNames . length ; DestroyMethodPoint [ ] destroyMethodPoints = new DestroyMethodPoint [ [[thorough]] ] ; int [[siento]] ; for ( [[siento]] = 0 ; [[siento]] < destroyMethodNames . length ; [[siento]] ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ [[siento]] ] , ClassUtil . EMPTY_CLASS_ARRAY , True ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + beanDefinition . type . getName ( ) + ' ' + destroyMethodNames [ [[siento]] ] ) ; } destroyMethodPoints [ [[siento]] ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } beanDefinition . addDestroyMethodPoints ( destroyMethodPoints ) ; }
[[[[Nl]]]]: Registers destroy method .


--------------------------------------------- Result 768 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 472 / 280 / 16 / 768:  77%|███████▋  | 768/1000 [4:49:42<1:27:31, 22.63s/it][Succeeded / Failed / Skipped / Total] 472 / 280 / 16 / 768:  77%|███████▋  | 769/1000 [4:51:21<1:27:31, 22.73s/it][Succeeded / Failed / Skipped / Total] 472 / 281 / 16 / 769:  77%|███████▋  | 769/1000 [4:51:21<1:27:31, 22.73s/it][Succeeded / Failed / Skipped / Total] 472 / 281 / 16 / 769:  77%|███████▋  | 770/1000 [4:51:41<1:27:07, 22.73s/it][Succeeded / Failed / Skipped / Total] 473 / 281 / 16 / 770:  77%|███████▋  | 770/1000 [4:51:41<1:27:07, 22.73s/it][Succeeded / Failed / Skipped / Total] 473 / 281 / 16 / 770:  77%|███████▋  | 771/1000 [4:52:03<1:26:44, 22.73s/it][Succeeded / Failed / Skipped / Total] 474 / 281 / 16 / 771:  77%|███████▋  | 771/1000 [4:52:03<1:26:44, 22.73s/it][Succeeded / Failed / Skipped / Total] 474 / 281 / 16 / 771:  77%|███████▋  | 772/1000 [4:52:11<1:26:17, 22.71s/it][Succeeded / Failed / Skipped / Total] 475 / 281 / 16 / 772:  77%|███████▋  | 772/1000 [4:52:11<1:26:17, 22.71s/it][Succeeded / Failed / Skipped / Total] 475 / 281 / 16 / 772:  77%|███████▋  | 773/1000 [4:52:36<1:25:55, 22.71s/it][Succeeded / Failed / Skipped / Total] 476 / 281 / 16 / 773:  77%|███████▋  | 773/1000 [4:52:36<1:25:55, 22.71s/it][Succeeded / Failed / Skipped / Total] 476 / 281 / 16 / 773:  77%|███████▋  | 774/1000 [4:52:53<1:25:31, 22.70s/it][Succeeded / Failed / Skipped / Total] 477 / 281 / 16 / 774:  77%|███████▋  | 774/1000 [4:52:53<1:25:31, 22.70s/it][Succeeded / Failed / Skipped / Total] 477 / 281 / 16 / 774:  78%|███████▊  | 775/1000 [4:53:25<1:25:11, 22.72s/it]Register a Petite provider --> Register a PetiteProvider --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteProvider ( final String [[providerName]] , final String [[beanName]] , final String methodName , final Class [ ] [[arguments]] ) { BeanDefinition beanDefinition = lookupBeanDefinition ( [[beanName]] ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + [[beanName]] ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , [[arguments]] , True ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( [[providerName]] , [[beanName]] , md . getMethod ( ) ) ; providers . put ( [[providerName]] , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String [[stipe]] , final String [[boobie]] , final String methodName , final Class [ ] [[rationale]] ) { BeanDefinition beanDefinition = lookupBeanDefinition ( [[boobie]] ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + [[boobie]] ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , [[rationale]] , True ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( [[stipe]] , [[boobie]] , md . getMethod ( ) ) ; providers . put ( [[stipe]] , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .


--------------------------------------------- Result 769 ---------------------------------------------
Registers a Petite provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteProvider]] ( final String providerName , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = [[cd]] . getMethodDescriptor ( staticMethodName , arguments , True ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void [[guam]] ( final String providerName , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor [[vcd]] = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = [[vcd]] . getMethodDescriptor ( staticMethodName , arguments , True ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( providerName , md . getMethod ( ) ) ; providers . put ( providerName , providerDefinition ) ; }
[[[[Nl]]]]: Registers static method provider .


--------------------------------------------- Result 770 ---------------------------------------------
Iterate over all beans of the given type . --> minor for bean name --> Socre: 1.0

[[[[Adv]]]]: public void [[forEachBeanType]] ( final Class [[type]] , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[type]] ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void [[mincer]] ( final Class [[fella]] , final Consumer < String > beanNameConsumer ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , [[fella]] ) ) { beanNameConsumer . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .


--------------------------------------------- Result 771 ---------------------------------------------
Define a set of parameters . --> Register an advertising link --> Socre: 1.0

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > [[properties]] ) { for ( Map . Entry < ? , ? > [[entry]] : [[properties]] . entrySet ( ) ) { defineParameter ( [[entry]] . getKey ( ) . toString ( ) , [[entry]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[afriend]] ( final Map < ? , ? > [[merchandise]] ) { for ( Map . Entry < ? , ? > [[admission]] : [[merchandise]] . entrySet ( ) ) { defineParameter ( [[admission]] . getKey ( ) . toString ( ) , [[admission]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .


--------------------------------------------- Result 772 ---------------------------------------------
Intercept the action request . --> Intercepts and executes the request --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest [[actionRequest]] ) throws Exception { printBefore ( [[actionRequest]] ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = [[actionRequest]] . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( [[actionRequest]] , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object intercept ( final ActionRequest [[lungs]] ) throws Exception { printBefore ( [[lungs]] ) ; long startTime = System . currentTimeMillis ( ) ; Object result = null ; try { result = [[lungs]] . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long executionTime = System . currentTimeMillis ( ) - startTime ; printAfter ( [[lungs]] , executionTime , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .


--------------------------------------------- Result 773 ---------------------------------------------
Returns the Java version number . --> Calculates how much more than the given shape --> Socre: 1.0

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int [[version]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[platformVersion]] = javaVersionNumber - 8 + 52 ; return [[version]] > [[platformVersion]] ? [[version]] : [[platformVersion]] ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[barrymore]] ( final int [[shape]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[pornographic]] = javaVersionNumber - 8 + 52 ; return [[shape]] > [[pornographic]] ? [[shape]] : [[pornographic]] ; }
[[[[Nl]]]]: Resolves Java version from current version .


--------------------------------------------- Result 774 ---------------------------------------------
Push an integer on the stack . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: public static void [[pushInt]] ( final MethodVisitor [[mv]] , final int value ) { if ( value <= 5 ) { [[mv]] . visitInsn ( ICONST_0 + value ) ; } else if ( value <= Byte . MAX_VALUE ) { [[mv]] . visitIntInsn ( BIPUSH , value ) ; } else { [[mv]] . visitIntInsn ( SIPUSH , value ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void [[concussion]] ( final MethodVisitor [[starship]] , final int value ) { if ( value <= 5 ) { [[starship]] . visitInsn ( ICONST_0 + value ) ; } else if ( value <= Byte . MAX_VALUE ) { [[starship]] . visitIntInsn ( BIPUSH , value ) ; } else { [[starship]] . visitIntInsn ( SIPUSH , value ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .


--------------------------------------------- Result 775 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 478 / 281 / 16 / 775:  78%|███████▊  | 775/1000 [4:53:25<1:25:11, 22.72s/it][Succeeded / Failed / Skipped / Total] 478 / 281 / 16 / 775:  78%|███████▊  | 776/1000 [4:53:34<1:24:44, 22.70s/it][Succeeded / Failed / Skipped / Total] 479 / 281 / 16 / 776:  78%|███████▊  | 776/1000 [4:53:34<1:24:44, 22.70s/it][Succeeded / Failed / Skipped / Total] 479 / 281 / 16 / 776:  78%|███████▊  | 777/1000 [4:53:44<1:24:18, 22.68s/it][Succeeded / Failed / Skipped / Total] 480 / 281 / 16 / 777:  78%|███████▊  | 777/1000 [4:53:44<1:24:18, 22.68s/it][Succeeded / Failed / Skipped / Total] 480 / 281 / 16 / 777:  78%|███████▊  | 778/1000 [4:54:17<1:23:58, 22.70s/it][Succeeded / Failed / Skipped / Total] 480 / 282 / 16 / 778:  78%|███████▊  | 778/1000 [4:54:17<1:23:58, 22.70s/it][Succeeded / Failed / Skipped / Total] 480 / 282 / 16 / 778:  78%|███████▊  | 779/1000 [4:54:49<1:23:38, 22.71s/it][Succeeded / Failed / Skipped / Total] 480 / 283 / 16 / 779:  78%|███████▊  | 779/1000 [4:54:49<1:23:38, 22.71s/it][Succeeded / Failed / Skipped / Total] 480 / 283 / 16 / 779:  78%|███████▊  | 780/1000 [4:55:13<1:23:16, 22.71s/it][Succeeded / Failed / Skipped / Total] 480 / 284 / 16 / 780:  78%|███████▊  | 780/1000 [4:55:13<1:23:16, 22.71s/it][Succeeded / Failed / Skipped / Total] 480 / 284 / 16 / 780:  78%|███████▊  | 781/1000 [4:55:36<1:22:53, 22.71s/it][Succeeded / Failed / Skipped / Total] 481 / 284 / 16 / 781:  78%|███████▊  | 781/1000 [4:55:36<1:22:53, 22.71s/it][Succeeded / Failed / Skipped / Total] 481 / 284 / 16 / 781:  78%|███████▊  | 782/1000 [4:55:52<1:22:29, 22.70s/it][Succeeded / Failed / Skipped / Total] 482 / 284 / 16 / 782:  78%|███████▊  | 782/1000 [4:55:52<1:22:29, 22.70s/it][Succeeded / Failed / Skipped / Total] 482 / 284 / 16 / 782:  78%|███████▊  | 783/1000 [4:56:01<1:22:02, 22.68s/it]Check that the argument index is valid . --> Thrown when this method is able to be able to be broken --> Socre: 1.0

[[[[Adv]]]]: public static void [[checkArgumentIndex]] ( final MethodInfo [[methodInfo]] , final int [[argIndex]] ) { if ( ( [[argIndex]] < 1 ) || ( [[argIndex]] > [[methodInfo]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[argIndex]] ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void [[birdseye]] ( final MethodInfo [[bonding]] , final int [[housewarming]] ) { if ( ( [[housewarming]] < 1 ) || ( [[housewarming]] > [[bonding]] . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[housewarming]] ) ; } }
[[[[Nl]]]]: Validates argument index .


--------------------------------------------- Result 776 ---------------------------------------------
Generate field name . --> Convenience method to create a Prefer --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String name , final int index ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[faber]] ( final String name , final int index ) { return ProxettaNames . fieldPrefix + name + ProxettaNames . fieldDivider + index ; }
[[[[Nl]]]]: Builds advice field name .


--------------------------------------------- Result 777 ---------------------------------------------
Generate advice method name . --> Generate alimony --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String name , final int index ) { return ProxettaNames . methodPrefix + name + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[alimony]] ( final String name , final int index ) { return ProxettaNames . methodPrefix + name + ProxettaNames . methodDivider + index ; }
[[[[Nl]]]]: Builds advice method name .


--------------------------------------------- Result 778 ---------------------------------------------
load special method arguments --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= [[methodInfo]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[methodInfo]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[solaris]] ( final MethodVisitor mv , final MethodInfo [[wrightwood]] ) { mv . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= [[wrightwood]] . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , [[wrightwood]] , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .


--------------------------------------------- Result 779 ---------------------------------------------
Loads the static method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadStaticMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[mv]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void [[nanobots]] ( final MethodVisitor [[hms]] , final MethodInfo methodInfo ) { for ( int i = 0 ; i < methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[hms]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .


--------------------------------------------- Result 780 ---------------------------------------------
Load virtual method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadVirtualMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int [[i]] = 1 ; [[i]] <= methodInfo . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( mv , methodInfo , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void [[cellphones]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int [[ai]] = 1 ; [[ai]] <= methodInfo . getArgumentsCount ( ) ; [[ai]] ++ ) { loadMethodArgument ( mv , methodInfo , [[ai]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .


--------------------------------------------- Result 781 ---------------------------------------------
Generates the given method at the given index . --> Bobo to the method --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadMethodArgument]] ( final MethodVisitor mv , final MethodInfo [[methodInfo]] , final int [[index]] ) { int offset = [[methodInfo]] . getArgumentOffset ( [[index]] ) ; int type = [[methodInfo]] . getArgument ( [[index]] ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[bobo]] ( final MethodVisitor mv , final MethodInfo [[aja]] , final int [[allusion]] ) { int offset = [[aja]] . getArgumentOffset ( [[allusion]] ) ; int type = [[aja]] . getArgument ( [[allusion]] ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : mv . visitVarInsn ( ILOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( LLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( FLOAD , offset ) ; break ; case ' ' : mv . visitVarInsn ( DLOAD , offset ) ; break ; default : mv . visitVarInsn ( ALOAD , offset ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .


--------------------------------------------- Result 782 ---------------------------------------------
Stores a method argument . --> Store method arguments --> Socre: 1.0

[[[[Adv]]]]: public static void storeMethodArgument ( final MethodVisitor [[mv]] , final MethodInfo methodInfo , final int [[index]] ) { int offset = methodInfo . getArgumentOffset ( [[index]] ) ; int type = methodInfo . getArgument ( [[index]] ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[mv]] . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( DSTORE , offset ) ; break ; default : [[mv]] . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void storeMethodArgument ( final MethodVisitor [[battleship]] , final MethodInfo methodInfo , final int [[list]] ) { int offset = methodInfo . getArgumentOffset ( [[list]] ) ; int type = methodInfo . getArgument ( [[list]] ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[battleship]] . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : [[battleship]] . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : [[battleship]] . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : [[battleship]] . visitVarInsn ( DSTORE , offset ) ; break ; default : [[battleship]] . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .


--------------------------------------------- Result 783 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 483 / 284 / 16 / 783:  78%|███████▊  | 783/1000 [4:56:01<1:22:02, 22.68s/it][Succeeded / Failed / Skipped / Total] 483 / 284 / 16 / 783:  78%|███████▊  | 784/1000 [4:56:09<1:21:35, 22.67s/it][Succeeded / Failed / Skipped / Total] 484 / 284 / 16 / 784:  78%|███████▊  | 784/1000 [4:56:09<1:21:35, 22.67s/it][Succeeded / Failed / Skipped / Total] 484 / 284 / 16 / 784:  78%|███████▊  | 785/1000 [4:56:17<1:21:08, 22.65s/it][Succeeded / Failed / Skipped / Total] 485 / 284 / 16 / 785:  78%|███████▊  | 785/1000 [4:56:17<1:21:08, 22.65s/it][Succeeded / Failed / Skipped / Total] 485 / 284 / 16 / 785:  79%|███████▊  | 786/1000 [4:56:25<1:20:42, 22.63s/it][Succeeded / Failed / Skipped / Total] 486 / 284 / 16 / 786:  79%|███████▊  | 786/1000 [4:56:25<1:20:42, 22.63s/it][Succeeded / Failed / Skipped / Total] 486 / 284 / 16 / 786:  79%|███████▊  | 787/1000 [4:56:43<1:20:18, 22.62s/it][Succeeded / Failed / Skipped / Total] 487 / 284 / 16 / 787:  79%|███████▊  | 787/1000 [4:56:43<1:20:18, 22.62s/it][Succeeded / Failed / Skipped / Total] 487 / 284 / 16 / 787:  79%|███████▉  | 788/1000 [4:57:02<1:19:55, 22.62s/it]Prepares the return value . --> Helper method to perform slop - operands --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareReturnValue]] ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void [[sloper]] ( final MethodVisitor mv , final MethodInfo methodInfo , int varOffset ) { varOffset += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .


--------------------------------------------- Result 784 ---------------------------------------------
Create signature key for method signature . --> Returns a string representation of this class --> Socre: 1.0

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[carrots]] ( final int access , final String methodName , final String description , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( description ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .


--------------------------------------------- Result 785 ---------------------------------------------
Generates a new array instruction . --> Encode the given component type --> Socre: 1.0

[[[[Adv]]]]: public static void [[newArray]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void [[earhart]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .


--------------------------------------------- Result 786 ---------------------------------------------
Store the given component type into an array . --> Gunciate instructions --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeIntoArray]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void [[gunpowder]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( componentType == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( componentType == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( componentType == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( componentType == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( componentType == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( componentType == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .


--------------------------------------------- Result 787 ---------------------------------------------
Extract encoding from content type . --> Calculate the humdinger --> Socre: 1.0

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String [[contentType]] , String defaultEncoding ) { String encoding = [[extractEncoding]] ( [[contentType]] ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[humdinger]] ( final String [[biz]] , String defaultEncoding ) { String encoding = [[humdinger]] ( [[biz]] ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .


--------------------------------------------- Result 788 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 488 / 284 / 16 / 788:  79%|███████▉  | 788/1000 [4:57:02<1:19:55, 22.62s/it][Succeeded / Failed / Skipped / Total] 488 / 284 / 16 / 788:  79%|███████▉  | 789/1000 [4:57:31<1:19:33, 22.63s/it][Succeeded / Failed / Skipped / Total] 488 / 285 / 16 / 789:  79%|███████▉  | 789/1000 [4:57:31<1:19:33, 22.63s/it][Succeeded / Failed / Skipped / Total] 488 / 285 / 16 / 789:  79%|███████▉  | 790/1000 [4:57:54<1:19:11, 22.63s/it][Succeeded / Failed / Skipped / Total] 489 / 285 / 16 / 790:  79%|███████▉  | 790/1000 [4:57:54<1:19:11, 22.63s/it][Succeeded / Failed / Skipped / Total] 489 / 285 / 16 / 790:  79%|███████▉  | 791/1000 [4:58:08<1:18:46, 22.62s/it][Succeeded / Failed / Skipped / Total] 490 / 285 / 16 / 791:  79%|███████▉  | 791/1000 [4:58:08<1:18:46, 22.62s/it][Succeeded / Failed / Skipped / Total] 490 / 285 / 16 / 791:  79%|███████▉  | 792/1000 [4:58:26<1:18:22, 22.61s/it][Succeeded / Failed / Skipped / Total] 491 / 285 / 16 / 792:  79%|███████▉  | 792/1000 [4:58:26<1:18:22, 22.61s/it][Succeeded / Failed / Skipped / Total] 491 / 285 / 16 / 792:  79%|███████▉  | 793/1000 [4:58:53<1:18:01, 22.61s/it][Succeeded / Failed / Skipped / Total] 492 / 285 / 16 / 793:  79%|███████▉  | 793/1000 [4:58:53<1:18:01, 22.61s/it][Succeeded / Failed / Skipped / Total] 492 / 285 / 16 / 793:  79%|███████▉  | 794/1000 [4:59:07<1:17:36, 22.60s/it][Succeeded / Failed / Skipped / Total] 493 / 285 / 16 / 794:  79%|███████▉  | 794/1000 [4:59:07<1:17:36, 22.60s/it][Succeeded / Failed / Skipped / Total] 493 / 285 / 16 / 794:  80%|███████▉  | 795/1000 [4:59:47<1:17:18, 22.63s/it]Returns true if the flags are empty . --> Returns true if the given banner contains the system banner --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isEmptyFlags]] ( Flags [[flags]] ) { if ( [[flags]] == null ) return True ; Flags . Flag [ ] systemFlags = [[flags]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return False ; } String [ ] userFlags = [[flags]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return False ; } return True ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean [[sailin]] ( Flags [[banner]] ) { if ( [[banner]] == null ) return True ; Flags . Flag [ ] systemFlags = [[banner]] . getSystemFlags ( ) ; if ( systemFlags != null && systemFlags . length > 0 ) { return False ; } String [ ] userFlags = [[banner]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return False ; } return True ; }
[[[[Nl]]]]: Check whether flags is a empty flags


--------------------------------------------- Result 789 ---------------------------------------------
Resolves the bearer bearer token from the given request . --> [[[FAILED]]]

[[[[Adv]]]]: public static String resolveAuthBearerToken ( final HttpServletRequest request ) { String [[header]] = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[header]] == null ) { return null ; } int ndx = [[header]] . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return [[header]] . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String resolveAuthBearerToken ( final HttpServletRequest request ) { String [[sections]] = request . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[sections]] == null ) { return null ; } int ndx = [[sections]] . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return [[sections]] . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .


--------------------------------------------- Result 790 ---------------------------------------------
Require authentication . --> Send a julianne --> Socre: 1.0

[[[[Adv]]]]: public static void [[requireAuthentication]] ( final HttpServletResponse [[resp]] , final String realm ) throws IOException { [[resp]] . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; [[resp]] . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void [[julianne]] ( final HttpServletResponse [[conception]] , final String realm ) throws IOException { [[conception]] . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; [[conception]] . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .


--------------------------------------------- Result 791 ---------------------------------------------
Prepare download . --> Prepare a PDF document --> Socre: 1.0

[[[[Adv]]]]: public static void prepareDownload ( final HttpServletResponse response , final File [[file]] , final String [[mimeType]] ) { if ( ! [[file]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[file]] ) ; } if ( [[file]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[file]] ) ; } prepareResponse ( response , [[file]] . getAbsolutePath ( ) , [[mimeType]] , ( int ) [[file]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void prepareDownload ( final HttpServletResponse response , final File [[dossier]] , final String [[cobwebs]] ) { if ( ! [[dossier]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[dossier]] ) ; } if ( [[dossier]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[dossier]] ) ; } prepareResponse ( response , [[dossier]] . getAbsolutePath ( ) , [[cobwebs]] , ( int ) [[dossier]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .


--------------------------------------------- Result 792 ---------------------------------------------
Prepares response . --> Transfigures the content type --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareResponse]] ( final HttpServletResponse response , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String [[extension]] = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( [[extension]] ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void [[transfiguration]] ( final HttpServletResponse response , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String [[extend]] = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( [[extend]] ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .


--------------------------------------------- Result 793 ---------------------------------------------
Gets all cookies with the given name . --> Return the first cookie found in the request --> Socre: 1.0

[[[[Adv]]]]: public static Cookie [ ] [[getAllCookies]] ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] [[cookies]] = request . getCookies ( ) ; if ( [[cookies]] == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( [[cookies]] . length ) ; for ( Cookie [[cookie]] : [[cookies]] ) { if ( [[cookie]] . getName ( ) . equals ( cookieName ) ) { list . add ( [[cookie]] ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] [[stevo]] ( final HttpServletRequest request , final String cookieName ) { Cookie [ ] [[bun]] = request . getCookies ( ) ; if ( [[bun]] == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( [[bun]] . length ) ; for ( Cookie [[pretzels]] : [[bun]] ) { if ( [[pretzels]] . getName ( ) . equals ( cookieName ) ) { list . add ( [[pretzels]] ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .


--------------------------------------------- Result 794 ---------------------------------------------
Read request body from request . --> Performs planckck --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest [[request]] ) throws IOException { BufferedReader buff = [[request]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[planck]] ( final HttpServletRequest [[appealed]] ) throws IOException { BufferedReader buff = [[appealed]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!


--------------------------------------------- Result 795 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 494 / 285 / 16 / 795:  80%|███████▉  | 795/1000 [4:59:47<1:17:18, 22.63s/it][Succeeded / Failed / Skipped / Total] 494 / 285 / 16 / 795:  80%|███████▉  | 796/1000 [5:00:04<1:16:54, 22.62s/it][Succeeded / Failed / Skipped / Total] 495 / 285 / 16 / 796:  80%|███████▉  | 796/1000 [5:00:04<1:16:54, 22.62s/it][Succeeded / Failed / Skipped / Total] 495 / 285 / 16 / 796:  80%|███████▉  | 797/1000 [5:00:30<1:16:32, 22.62s/it][Succeeded / Failed / Skipped / Total] 496 / 285 / 16 / 797:  80%|███████▉  | 797/1000 [5:00:30<1:16:32, 22.62s/it][Succeeded / Failed / Skipped / Total] 496 / 285 / 16 / 797:  80%|███████▉  | 798/1000 [5:00:57<1:16:11, 22.63s/it][Succeeded / Failed / Skipped / Total] 497 / 285 / 16 / 798:  80%|███████▉  | 798/1000 [5:00:57<1:16:11, 22.63s/it][Succeeded / Failed / Skipped / Total] 497 / 285 / 16 / 798:  80%|███████▉  | 799/1000 [5:01:11<1:15:46, 22.62s/it][Succeeded / Failed / Skipped / Total] 498 / 285 / 16 / 799:  80%|███████▉  | 799/1000 [5:01:11<1:15:46, 22.62s/it][Succeeded / Failed / Skipped / Total] 498 / 285 / 16 / 799:  80%|████████  | 800/1000 [5:02:11<1:15:32, 22.66s/it]Read request body from request . --> returns a string --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromStream]] ( final HttpServletRequest [[request]] ) throws IOException { String charEncoding = [[request]] . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream [[inputStream]] = [[request]] . getInputStream ( ) ; if ( [[inputStream]] != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( [[inputStream]] , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[anos]] ( final HttpServletRequest [[pray]] ) throws IOException { String charEncoding = [[pray]] . getCharacterEncoding ( ) ; if ( charEncoding == null ) { charEncoding = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream [[hecht]] = [[pray]] . getInputStream ( ) ; if ( [[hecht]] != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( [[hecht]] , charEncoding ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!


--------------------------------------------- Result 796 ---------------------------------------------
Stores the context path in the request context . --> Sets the motion attribute --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final PageContext pageContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest [[request]] = ( HttpServletRequest ) pageContext . getRequest ( ) ; [[request]] . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void [[motion]] ( final PageContext pageContext , final String contextPathVariableName ) { String ctxPath = getContextPath ( pageContext ) ; HttpServletRequest [[appealed]] = ( HttpServletRequest ) pageContext . getRequest ( ) ; [[appealed]] . setAttribute ( contextPathVariableName , ctxPath ) ; ServletContext servletContext = pageContext . getServletContext ( ) ; servletContext . setAttribute ( contextPathVariableName , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .


--------------------------------------------- Result 797 ---------------------------------------------
Stores the context path in the servlet context . --> Setting a podemos attribute --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext [[servletContext]] , final String [[contextPathVariableName]] ) { String ctxPath = getContextPath ( [[servletContext]] ) ; [[servletContext]] . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[podemos]] ( final ServletContext [[ginsburg]] , final String [[costi]] ) { String ctxPath = getContextPath ( [[ginsburg]] ) ; [[ginsburg]] . setAttribute ( [[costi]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .


--------------------------------------------- Result 798 ---------------------------------------------
Checks if the given name is a getter parameter --> Determines whether the given name matches the given name --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isGetParameter]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] [[nameValuePairs]] = StringUtil . splitc ( query , ' ' ) ; for ( String [[nameValuePair]] : [[nameValuePairs]] ) { if ( [[nameValuePair]] . startsWith ( name ) ) { return True ; } } return False ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean [[lothar]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String query = request . getQueryString ( ) ; String [ ] [[bayou]] = StringUtil . splitc ( query , ' ' ) ; for ( String [[spurn]] : [[bayou]] ) { if ( [[spurn]] . startsWith ( name ) ) { return True ; } } return False ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .


--------------------------------------------- Result 799 ---------------------------------------------
Prepare the parameter array . --> Removes null and empty array values --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[prepareParameters]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] [[brigand]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int total = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == total ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .


--------------------------------------------- Result 800 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 499 / 285 / 16 / 800:  80%|████████  | 800/1000 [5:02:11<1:15:32, 22.66s/it][Succeeded / Failed / Skipped / Total] 499 / 285 / 16 / 800:  80%|████████  | 801/1000 [5:02:26<1:15:08, 22.65s/it][Succeeded / Failed / Skipped / Total] 499 / 286 / 16 / 801:  80%|████████  | 801/1000 [5:02:26<1:15:08, 22.65s/it][Succeeded / Failed / Skipped / Total] 499 / 286 / 16 / 801:  80%|████████  | 802/1000 [5:02:52<1:14:46, 22.66s/it][Succeeded / Failed / Skipped / Total] 500 / 286 / 16 / 802:  80%|████████  | 802/1000 [5:02:52<1:14:46, 22.66s/it][Succeeded / Failed / Skipped / Total] 500 / 286 / 16 / 802:  80%|████████  | 803/1000 [5:03:15<1:14:23, 22.66s/it][Succeeded / Failed / Skipped / Total] 501 / 286 / 16 / 803:  80%|████████  | 803/1000 [5:03:15<1:14:23, 22.66s/it][Succeeded / Failed / Skipped / Total] 501 / 286 / 16 / 803:  80%|████████  | 804/1000 [5:03:40<1:14:01, 22.66s/it][Succeeded / Failed / Skipped / Total] 502 / 286 / 16 / 804:  80%|████████  | 804/1000 [5:03:40<1:14:01, 22.66s/it][Succeeded / Failed / Skipped / Total] 502 / 286 / 16 / 804:  80%|████████  | 805/1000 [5:03:50<1:13:36, 22.65s/it][Succeeded / Failed / Skipped / Total] 502 / 287 / 16 / 805:  80%|████████  | 805/1000 [5:03:50<1:13:36, 22.65s/it][Succeeded / Failed / Skipped / Total] 502 / 287 / 16 / 805:  81%|████████  | 806/1000 [5:04:19<1:13:14, 22.65s/it][Succeeded / Failed / Skipped / Total] 502 / 288 / 16 / 806:  81%|████████  | 806/1000 [5:04:19<1:13:14, 22.65s/it][Succeeded / Failed / Skipped / Total] 502 / 288 / 16 / 806:  81%|████████  | 807/1000 [5:04:40<1:12:51, 22.65s/it][Succeeded / Failed / Skipped / Total] 503 / 288 / 16 / 807:  81%|████████  | 807/1000 [5:04:40<1:12:51, 22.65s/it][Succeeded / Failed / Skipped / Total] 503 / 288 / 16 / 807:  81%|████████  | 808/1000 [5:04:48<1:12:25, 22.63s/it]Copies the parameters from the ServletRequest to the attributes . --> Makes the first parameter from the HttpServletRequest --> Socre: 1.0

[[[[Adv]]]]: public static void [[copyParamsToAttributes]] ( final HttpServletRequest [[servletRequest]] , final boolean [[treatEmptyParamsAsNull]] , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = [[servletRequest]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String paramName = ( String ) paramNames . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( paramName ) != null ) { continue ; } String [ ] [[paramValues]] = [[servletRequest]] . getParameterValues ( paramName ) ; [[paramValues]] = prepareParameters ( [[paramValues]] , [[treatEmptyParamsAsNull]] , ignoreEmptyRequestParams ) ; if ( [[paramValues]] == null ) { continue ; } [[servletRequest]] . setAttribute ( paramName , [[paramValues]] . length == 1 ? [[paramValues]] [ 0 ] : [[paramValues]] ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void [[mouthed]] ( final HttpServletRequest [[brunner]] , final boolean [[free]] , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = [[brunner]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String paramName = ( String ) paramNames . nextElement ( ) ; if ( [[brunner]] . getAttribute ( paramName ) != null ) { continue ; } String [ ] [[blackfeet]] = [[brunner]] . getParameterValues ( paramName ) ; [[blackfeet]] = prepareParameters ( [[blackfeet]] , [[free]] , ignoreEmptyRequestParams ) ; if ( [[blackfeet]] == null ) { continue ; } [[brunner]] . setAttribute ( paramName , [[blackfeet]] . length == 1 ? [[blackfeet]] [ 0 ] : [[blackfeet]] ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .


--------------------------------------------- Result 801 ---------------------------------------------
Invokes a tag . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment [[body]] ) throws JspException { if ( [[body]] == null ) { return ; } try { [[body]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[goodfellow]] ( final JspFragment [[structured]] ) throws JspException { if ( [[structured]] == null ) { return ; } try { [[structured]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .


--------------------------------------------- Result 802 ---------------------------------------------
Render the given JspFragment . --> Returns a human - readable HTML representation of the organisation --> Socre: 1.0

[[[[Adv]]]]: public static char [ ] [[renderBody]] ( final JspFragment [[body]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[body]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] [[beano]] ( final JspFragment [[organisations]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[organisations]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .


--------------------------------------------- Result 803 ---------------------------------------------
Renders the given fragment to a string . --> Declares an organisation --> Socre: 1.0

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment [[body]] ) throws JspException { char [ ] [[result]] = renderBody ( [[body]] ) ; return new String ( [[result]] ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[declare]] ( final JspFragment [[organisation]] ) throws JspException { char [ ] [[fruit]] = renderBody ( [[organisation]] ) ; return new String ( [[fruit]] ) ; }
[[[[Nl]]]]: Renders tag body to string .


--------------------------------------------- Result 804 ---------------------------------------------
Invoke init methods . --> Perform rossheters on the bean definition --> Socre: 1.0

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy [[invocationStrategy]] ) { for ( final InitMethodPoint [[initMethod]] : beanDefinition . initMethodPoints ( ) ) { if ( [[invocationStrategy]] != [[initMethod]] . invocationStrategy ) { continue ; } try { [[initMethod]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + [[initMethod]] , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[rottweilers]] ( final InitMethodInvocationStrategy [[lozenge]] ) { for ( final InitMethodPoint [[moisten]] : beanDefinition . initMethodPoints ( ) ) { if ( [[lozenge]] != [[moisten]] . invocationStrategy ) { continue ; } try { [[moisten]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + [[moisten]] , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .


--------------------------------------------- Result 805 ---------------------------------------------
Call destroy method . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[callDestroyMethods]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void [[kayak]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .


--------------------------------------------- Result 806 ---------------------------------------------
Create bean instance . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int [[paramNo]] = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ [[paramNo]] ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[bewitching]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int [[nudge]] = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ [[nudge]] ] ;
[[[[Nl]]]]: Creates a new instance .


--------------------------------------------- Result 807 ---------------------------------------------
Inject parameters . --> Check whether the bean definition is overlapping with the given name --> Socre: 1.0

[[[[Adv]]]]: public void [[injectParams]] ( final ParamManager [[paramManager]] , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void [[overlapping]] ( final ParamManager [[ted]] , final boolean implicitParamInjection ) { if ( beanDefinition . name == null ) { return ; } if ( implicitParamInjection ) {
[[[[Nl]]]]: Injects all parameters .


--------------------------------------------- Result 808 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 504 / 288 / 16 / 808:  81%|████████  | 808/1000 [5:04:48<1:12:25, 22.63s/it][Succeeded / Failed / Skipped / Total] 504 / 288 / 16 / 808:  81%|████████  | 809/1000 [5:05:22<1:12:05, 22.65s/it][Succeeded / Failed / Skipped / Total] 505 / 288 / 16 / 809:  81%|████████  | 809/1000 [5:05:22<1:12:05, 22.65s/it][Succeeded / Failed / Skipped / Total] 505 / 288 / 16 / 809:  81%|████████  | 810/1000 [5:05:32<1:11:40, 22.63s/it][Succeeded / Failed / Skipped / Total] 506 / 288 / 16 / 810:  81%|████████  | 810/1000 [5:05:32<1:11:40, 22.63s/it][Succeeded / Failed / Skipped / Total] 506 / 288 / 16 / 810:  81%|████████  | 811/1000 [5:05:50<1:11:16, 22.63s/it][Succeeded / Failed / Skipped / Total] 507 / 288 / 16 / 811:  81%|████████  | 811/1000 [5:05:50<1:11:16, 22.63s/it][Succeeded / Failed / Skipped / Total] 507 / 288 / 16 / 811:  81%|████████  | 812/1000 [5:06:00<1:10:51, 22.61s/it][Succeeded / Failed / Skipped / Total] 508 / 288 / 16 / 812:  81%|████████  | 812/1000 [5:06:00<1:10:51, 22.61s/it][Succeeded / Failed / Skipped / Total] 508 / 288 / 16 / 812:  81%|████████▏ | 813/1000 [5:06:30<1:10:30, 22.62s/it][Succeeded / Failed / Skipped / Total] 509 / 288 / 16 / 813:  81%|████████▏ | 813/1000 [5:06:30<1:10:30, 22.62s/it][Succeeded / Failed / Skipped / Total] 509 / 288 / 16 / 813:  81%|████████▏ | 814/1000 [5:06:37<1:10:03, 22.60s/it][Succeeded / Failed / Skipped / Total] 510 / 288 / 16 / 814:  81%|████████▏ | 814/1000 [5:06:37<1:10:03, 22.60s/it][Succeeded / Failed / Skipped / Total] 510 / 288 / 16 / 814:  82%|████████▏ | 815/1000 [5:07:09<1:09:43, 22.61s/it][Succeeded / Failed / Skipped / Total] 511 / 288 / 16 / 815:  82%|████████▏ | 815/1000 [5:07:09<1:09:43, 22.61s/it][Succeeded / Failed / Skipped / Total] 511 / 288 / 16 / 815:  82%|████████▏ | 816/1000 [5:07:17<1:09:17, 22.59s/it][Succeeded / Failed / Skipped / Total] 512 / 288 / 16 / 816:  82%|████████▏ | 816/1000 [5:07:17<1:09:17, 22.59s/it][Succeeded / Failed / Skipped / Total] 512 / 288 / 16 / 816:  82%|████████▏ | 817/1000 [5:08:10<1:09:01, 22.63s/it]Rewrite the action path . --> Rewrite the diggers --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest servletRequest , final String [[actionPath]] , final String httpMethod ) { return [[actionPath]] ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest servletRequest , final String [[diggers]] , final String httpMethod ) { return [[diggers]] ; }
[[[[Nl]]]]: Rewrites action path .


--------------------------------------------- Result 809 ---------------------------------------------
Add a header . --> This method is responsible for testing --> Socre: 1.0

[[[[Adv]]]]: public void [[addHeader]] ( final String name , final String [[value]] ) { List < String > [[valuesList]] = super . getAll ( name ) ; if ( [[valuesList]] . isEmpty ( ) ) { super . add ( name , [[value]] ) ; return ; } super . remove ( name ) ; [[valuesList]] . add ( [[value]] ) ; super . addAll ( name , [[valuesList]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void [[ashura]] ( final String name , final String [[assessments]] ) { List < String > [[criticized]] = super . getAll ( name ) ; if ( [[criticized]] . isEmpty ( ) ) { super . add ( name , [[assessments]] ) ; return ; } super . remove ( name ) ; [[criticized]] . add ( [[assessments]] ) ; super . addAll ( name , [[criticized]] ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .


--------------------------------------------- Result 810 ---------------------------------------------
Puts the value into the properties map . --> Convenience method to add a props to a props file --> Socre: 1.0

[[[[Adv]]]]: protected void [[put]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void [[brings]] ( final String profile , final Map < String , PropsEntry > map , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = map . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties


--------------------------------------------- Result 811 ---------------------------------------------
Puts the baseProperties . --> Sorts a key --> Socre: 1.0

[[[[Adv]]]]: public void [[putBaseProperty]] ( final String key , final String [[value]] , final boolean append ) { put ( null , baseProperties , key , [[value]] , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void [[bitch]] ( final String key , final String [[deserving]] , final boolean append ) { put ( null , baseProperties , key , [[deserving]] , append ) ; }
[[[[Nl]]]]: Adds base property .


--------------------------------------------- Result 812 ---------------------------------------------
Adds a profile property . --> helper method to barcodes --> Socre: 1.0

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[barolo]] ( final String key , final String value , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , value , append ) ; }
[[[[Nl]]]]: Adds profile property .


--------------------------------------------- Result 813 ---------------------------------------------
Get a profile from a profile --> Get tussauds --> Socre: 1.0

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String profile , final String [[key]] ) { final Map < String , PropsEntry > [[profileMap]] = profileProperties . get ( profile ) ; if ( [[profileMap]] == null ) { return null ; } return [[profileMap]] . get ( [[key]] ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[tussauds]] ( final String profile , final String [[critical]] ) { final Map < String , PropsEntry > [[irrigate]] = profileProperties . get ( profile ) ; if ( [[irrigate]] == null ) { return null ; } return [[irrigate]] . get ( [[critical]] ) ; }
[[[[Nl]]]]: Returns profile property .


--------------------------------------------- Result 814 ---------------------------------------------
Resolve the given string with the given profiles . --> Resolve the given valouce --> Socre: 1.0

[[[[Adv]]]]: public String resolveMacros ( String [[value]] , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String resolveMacros ( String [[valour]] , final String ... profiles ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .


--------------------------------------------- Result 815 ---------------------------------------------
Extracts a map from profiles . --> Creates a abstraction --> Socre: 1.0

[[[[Adv]]]]: public Map [[extract]] ( Map [[target]] , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( [[target]] == null ) { [[target]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map [[abstraction]] ( Map [[aimed]] , final String [ ] profiles , final String [ ] wildcardPatterns , String prefix ) { if ( [[aimed]] == null ) { [[aimed]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .


--------------------------------------------- Result 816 ---------------------------------------------
Read a stream of four bytes --> 1 - 4 --> Socre: 1.0

[[[[Adv]]]]: private static int [[streamtoword]] ( byte [ ] data , int [ ] offp ) { int i ; int word = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int [[aubergine]] ( byte [ ] data , int [ ] offp ) { int i ; int word = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { word = ( word << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return word ; }
[[[[Nl]]]]: Cycically extract a word of key material .


--------------------------------------------- Result 817 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 513 / 288 / 16 / 817:  82%|████████▏ | 817/1000 [5:08:10<1:09:01, 22.63s/it][Succeeded / Failed / Skipped / Total] 513 / 288 / 16 / 817:  82%|████████▏ | 818/1000 [5:08:38<1:08:40, 22.64s/it][Succeeded / Failed / Skipped / Total] 514 / 288 / 16 / 818:  82%|████████▏ | 818/1000 [5:08:38<1:08:40, 22.64s/it][Succeeded / Failed / Skipped / Total] 514 / 288 / 16 / 818:  82%|████████▏ | 819/1000 [5:08:53<1:08:15, 22.63s/it][Succeeded / Failed / Skipped / Total] 515 / 288 / 16 / 819:  82%|████████▏ | 819/1000 [5:08:53<1:08:15, 22.63s/it][Succeeded / Failed / Skipped / Total] 515 / 288 / 16 / 819:  82%|████████▏ | 820/1000 [5:09:34<1:07:57, 22.65s/it][Succeeded / Failed / Skipped / Total] 515 / 289 / 16 / 820:  82%|████████▏ | 820/1000 [5:09:34<1:07:57, 22.65s/it][Succeeded / Failed / Skipped / Total] 515 / 289 / 16 / 820:  82%|████████▏ | 821/1000 [5:10:25<1:07:40, 22.69s/it][Succeeded / Failed / Skipped / Total] 515 / 290 / 16 / 821:  82%|████████▏ | 821/1000 [5:10:25<1:07:40, 22.69s/it][Succeeded / Failed / Skipped / Total] 515 / 290 / 16 / 821:  82%|████████▏ | 822/1000 [5:10:47<1:07:17, 22.69s/it][Succeeded / Failed / Skipped / Total] 515 / 291 / 16 / 822:  82%|████████▏ | 822/1000 [5:10:47<1:07:17, 22.69s/it][Succeeded / Failed / Skipped / Total] 515 / 291 / 16 / 822:  82%|████████▏ | 823/1000 [5:11:02<1:06:53, 22.68s/it]Hashes the password with the given salt . --> convenience method --> Socre: 1.0

[[[[Adv]]]]: public static String hashpw ( String password , String [[salt]] ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , [[off]] ; StringBuffer rs = new StringBuffer ( ) ; if ( [[salt]] . charAt ( 0 ) != ' ' || [[salt]] . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( [[salt]] . charAt ( 2 ) == ' ' ) { [[off]] = 3 ; } else { minor = [[salt]] . charAt ( 2 ) ; if ( minor != ' ' || [[salt]] . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } [[off]] = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String hashpw ( String password , String [[chloride]] ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , [[closeup]] ; StringBuffer rs = new StringBuffer ( ) ; if ( [[chloride]] . charAt ( 0 ) != ' ' || [[chloride]] . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( [[chloride]] . charAt ( 2 ) == ' ' ) { [[closeup]] = 3 ; } else { minor = [[chloride]] . charAt ( 2 ) ; if ( minor != ' ' || [[chloride]] . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } [[closeup]] = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .


--------------------------------------------- Result 818 ---------------------------------------------
Checks if the specified plaintext has the same password . --> returns the brack of the brack --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[checkpw]] ( String [[plaintext]] , String [[hashed]] ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[plaintext]] , [[hashed]] ) ; hashed_bytes = [[hashed]] . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return False ; } if ( hashed_bytes . length != try_bytes . length ) { return False ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean [[brack]] ( String [[adversary]] , String [[gears]] ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[adversary]] , [[gears]] ) ; hashed_bytes = [[gears]] . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return False ; } if ( hashed_bytes . length != try_bytes . length ) { return False ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .


--------------------------------------------- Result 819 ---------------------------------------------
Copy all bytes from the stream to the output stream . --> Write the courvierier --> Socre: 1.0

[[[[Adv]]]]: public int [[copyAll]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "[[True]]" == "[[True]]" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int [[courvoisier]] ( final OutputStream out ) throws IOException { int count = 0 ; while ( "[["Correct" == "Correct"]]" == "[["Correct" == "Correct"]]" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; } return count ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .


--------------------------------------------- Result 820 ---------------------------------------------
Copies the max bytes to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[copyMax]] ( final OutputStream out , final int [[maxBytes]] ) throws IOException { int [[count]] = 0 ; while ( True ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; [[count]] ++ ; if ( [[count]] == [[maxBytes]] ) { return [[count]] ; } } return [[count]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int [[casters]] ( final OutputStream out , final int [[bridle]] ) throws IOException { int [[computations]] = 0 ; while ( True ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; [[computations]] ++ ; if ( [[computations]] == [[bridle]] ) { return [[computations]] ; } } return [[computations]] ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .


--------------------------------------------- Result 821 ---------------------------------------------
Parses the action configuration . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime [[parse]] ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues [[annotationValues]] = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( [[annotationValues]] ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime [[wilted]] ( final Class < ? > actionClass , final Method actionMethod , ActionDefinition actionDefinition ) { final ActionAnnotationValues [[clerking]] = detectActionAnnotationValues ( actionMethod ) ; final ActionConfig actionConfig = resolveActionConfig ( [[clerking]] ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .


--------------------------------------------- Result 822 ---------------------------------------------
Resolves the action config . --> [[[FAILED]]]

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues [[annotationValues]] ) { final Class < ? extends Annotation > annotationType ; if ( [[annotationValues]] == null ) { annotationType = Action . class ; } else { annotationType = [[annotationValues]] . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[screeches]] ( final ActionAnnotationValues [[massage]] ) { final Class < ? extends Annotation > annotationType ; if ( [[massage]] == null ) { annotationType = Action . class ; } else { annotationType = [[massage]] . annotationType ( ) ; } return actionConfigManager . lookup ( annotationType ) ; }
[[[[Nl]]]]: Resolves action config .


--------------------------------------------- Result 823 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 516 / 291 / 16 / 823:  82%|████████▏ | 823/1000 [5:11:02<1:06:53, 22.68s/it][Succeeded / Failed / Skipped / Total] 516 / 291 / 16 / 823:  82%|████████▏ | 824/1000 [5:11:41<1:06:34, 22.70s/it][Succeeded / Failed / Skipped / Total] 517 / 291 / 16 / 824:  82%|████████▏ | 824/1000 [5:11:41<1:06:34, 22.70s/it][Succeeded / Failed / Skipped / Total] 517 / 291 / 16 / 824:  82%|████████▎ | 825/1000 [5:12:24<1:06:16, 22.72s/it][Succeeded / Failed / Skipped / Total] 517 / 292 / 16 / 825:  82%|████████▎ | 825/1000 [5:12:24<1:06:16, 22.72s/it][Succeeded / Failed / Skipped / Total] 517 / 292 / 16 / 825:  83%|████████▎ | 826/1000 [5:12:51<1:05:54, 22.73s/it][Succeeded / Failed / Skipped / Total] 517 / 293 / 16 / 826:  83%|████████▎ | 826/1000 [5:12:51<1:05:54, 22.73s/it][Succeeded / Failed / Skipped / Total] 517 / 293 / 16 / 826:  83%|████████▎ | 827/1000 [5:13:25<1:05:33, 22.74s/it][Succeeded / Failed / Skipped / Total] 517 / 294 / 16 / 827:  83%|████████▎ | 827/1000 [5:13:25<1:05:33, 22.74s/it][Succeeded / Failed / Skipped / Total] 517 / 294 / 16 / 827:  83%|████████▎ | 828/1000 [5:13:40<1:05:09, 22.73s/it][Succeeded / Failed / Skipped / Total] 518 / 294 / 16 / 828:  83%|████████▎ | 828/1000 [5:13:40<1:05:09, 22.73s/it][Succeeded / Failed / Skipped / Total] 518 / 294 / 16 / 828:  83%|████████▎ | 829/1000 [5:14:10<1:04:48, 22.74s/it][Succeeded / Failed / Skipped / Total] 519 / 294 / 16 / 829:  83%|████████▎ | 829/1000 [5:14:10<1:04:48, 22.74s/it][Succeeded / Failed / Skipped / Total] 519 / 294 / 16 / 829:  83%|████████▎ | 830/1000 [5:14:10<1:04:20, 22.71s/it][Succeeded / Failed / Skipped / Total] 519 / 294 / 17 / 830:  83%|████████▎ | 830/1000 [5:14:10<1:04:20, 22.71s/it][Succeeded / Failed / Skipped / Total] 519 / 294 / 17 / 830:  83%|████████▎ | 831/1000 [5:14:23<1:03:56, 22.70s/it]Detect and register aliases . --> Register a blacklisting --> Socre: 1.0

[[[[Adv]]]]: protected void [[detectAndRegisterAlias]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String [[alias]] = parseMethodAlias ( annotationValues ) ; if ( [[alias]] != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( [[alias]] , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void [[blacking]] ( final ActionAnnotationValues annotationValues , final ActionDefinition actionDefinition ) { final String [[aka]] = parseMethodAlias ( annotationValues ) ; if ( [[aka]] != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( [[aka]] , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .


--------------------------------------------- Result 824 ---------------------------------------------
Reads the interceptors . --> SanjayInterceptor --> Socre: 1.0

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[readActionInterceptors]] ( final AnnotatedElement [[actionClassOrMethod]] ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy interceptedBy = [[actionClassOrMethod]] . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { result = interceptedBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[sanjay]] ( final AnnotatedElement [[deceive]] ) { Class < ? extends ActionInterceptor > [ ] result = null ; InterceptedBy interceptedBy = [[deceive]] . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { result = interceptedBy . value ( ) ; if ( result . length == 0 ) { result = null ; } } return result ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .


--------------------------------------------- Result 825 ---------------------------------------------
Read the filtered filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[readActionFilters]] ( final AnnotatedElement [[actionClassOrMethod]] ) { Class < ? extends ActionFilter > [ ] [[result]] = null ; FilteredBy [[filteredBy]] = [[actionClassOrMethod]] . getAnnotation ( FilteredBy . class ) ; if ( [[filteredBy]] != null ) { [[result]] = [[filteredBy]] . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[steals]] ( final AnnotatedElement [[rags]] ) { Class < ? extends ActionFilter > [ ] [[conclusion]] = null ; FilteredBy [[constricting]] = [[rags]] . getAnnotation ( FilteredBy . class ) ; if ( [[constricting]] != null ) { [[conclusion]] = [[constricting]] . value ( ) ; if ( [[conclusion]] . length == 0 ) { [[conclusion]] = null ; } } return [[conclusion]] ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .


--------------------------------------------- Result 826 ---------------------------------------------
Read package action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[carling]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .


--------------------------------------------- Result 827 ---------------------------------------------
Read method action path . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[bennie]] ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .


--------------------------------------------- Result 828 ---------------------------------------------
Parses the alias . --> looks for aliases --> Socre: 1.0

[[[[Adv]]]]: protected String parseMethodAlias ( final ActionAnnotationValues [[annotationValues]] ) { String [[alias]] = null ; if ( [[annotationValues]] != null ) { [[alias]] = [[annotationValues]] . alias ( ) ; } return [[alias]] ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String parseMethodAlias ( final ActionAnnotationValues [[lacquer]] ) { String [[untrue]] = null ; if ( [[lacquer]] != null ) { [[untrue]] = [[lacquer]] . alias ( ) ; } return [[untrue]] ; }
[[[[Nl]]]]: Reads method s alias value .


--------------------------------------------- Result 829 ---------------------------------------------
Create action runtime . --> Bor for bor --> Socre: 1.0

[[[[Adv]]]]: public ActionRuntime [[createActionRuntime]] ( final ActionHandler [[actionHandler]] , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( [[actionHandler]] != null ) { return new ActionRuntime ( [[actionHandler]] , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime [[bor]] ( final ActionHandler [[bulgaria]] , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( [[bulgaria]] != null ) { return new ActionRuntime ( [[bulgaria]] , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .


--------------------------------------------- Result 830 ---------------------------------------------
Sets the response header . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?


--------------------------------------------- Result 831 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 519 / 295 / 17 / 831:  83%|████████▎ | 831/1000 [5:14:23<1:03:56, 22.70s/it][Succeeded / Failed / Skipped / Total] 519 / 295 / 17 / 831:  83%|████████▎ | 832/1000 [5:14:30<1:03:30, 22.68s/it][Succeeded / Failed / Skipped / Total] 520 / 295 / 17 / 832:  83%|████████▎ | 832/1000 [5:14:30<1:03:30, 22.68s/it][Succeeded / Failed / Skipped / Total] 520 / 295 / 17 / 832:  83%|████████▎ | 833/1000 [5:14:45<1:03:06, 22.67s/it][Succeeded / Failed / Skipped / Total] 521 / 295 / 17 / 833:  83%|████████▎ | 833/1000 [5:14:45<1:03:06, 22.67s/it][Succeeded / Failed / Skipped / Total] 521 / 295 / 17 / 833:  83%|████████▎ | 834/1000 [5:14:53<1:02:40, 22.65s/it][Succeeded / Failed / Skipped / Total] 522 / 295 / 17 / 834:  83%|████████▎ | 834/1000 [5:14:53<1:02:40, 22.65s/it][Succeeded / Failed / Skipped / Total] 522 / 295 / 17 / 834:  84%|████████▎ | 835/1000 [5:15:03<1:02:15, 22.64s/it][Succeeded / Failed / Skipped / Total] 523 / 295 / 17 / 835:  84%|████████▎ | 835/1000 [5:15:03<1:02:15, 22.64s/it][Succeeded / Failed / Skipped / Total] 523 / 295 / 17 / 835:  84%|████████▎ | 836/1000 [5:15:27<1:01:52, 22.64s/it][Succeeded / Failed / Skipped / Total] 524 / 295 / 17 / 836:  84%|████████▎ | 836/1000 [5:15:27<1:01:52, 22.64s/it][Succeeded / Failed / Skipped / Total] 524 / 295 / 17 / 836:  84%|████████▎ | 837/1000 [5:15:44<1:01:29, 22.63s/it][Succeeded / Failed / Skipped / Total] 525 / 295 / 17 / 837:  84%|████████▎ | 837/1000 [5:15:44<1:01:29, 22.63s/it][Succeeded / Failed / Skipped / Total] 525 / 295 / 17 / 837:  84%|████████▍ | 838/1000 [5:15:52<1:01:03, 22.62s/it][Succeeded / Failed / Skipped / Total] 526 / 295 / 17 / 838:  84%|████████▍ | 838/1000 [5:15:52<1:01:03, 22.62s/it][Succeeded / Failed / Skipped / Total] 526 / 295 / 17 / 838:  84%|████████▍ | 839/1000 [5:16:23<1:00:42, 22.63s/it][Succeeded / Failed / Skipped / Total] 526 / 296 / 17 / 839:  84%|████████▍ | 839/1000 [5:16:23<1:00:42, 22.63s/it][Succeeded / Failed / Skipped / Total] 526 / 296 / 17 / 839:  84%|████████▍ | 840/1000 [5:16:50<1:00:20, 22.63s/it][Succeeded / Failed / Skipped / Total] 527 / 296 / 17 / 840:  84%|████████▍ | 840/1000 [5:16:50<1:00:20, 22.63s/it][Succeeded / Failed / Skipped / Total] 527 / 296 / 17 / 840:  84%|████████▍ | 841/1000 [5:17:01<59:56, 22.62s/it]  Apply the given class to the cache . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > T applyAdvice ( final Class < T > targetClass ) { Class [[adviceClass]] = cache . get ( targetClass ) ; if ( [[adviceClass]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < T > T applyAdvice ( final Class < T > targetClass ) { Class [[meissen]] = cache . get ( targetClass ) ; if ( [[meissen]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .


--------------------------------------------- Result 832 ---------------------------------------------
Inject target into proxy . --> Gets the property on the object --> Socre: 1.0

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object proxy , final Object target ) { Class proxyClass = proxy . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[yawning]] ( final Object proxy , final Object target ) { Class proxyClass = proxy . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( proxy , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .


--------------------------------------------- Result 833 ---------------------------------------------
Visits an annotation . --> returns a redoubtable --> Socre: 1.0

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String [[descriptor]] , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( [[descriptor]] , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[redoubtable]] ( final String [[dorchester]] , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( [[dorchester]] , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .


--------------------------------------------- Result 834 ---------------------------------------------
Resolves real name . --> Get architecture for specified jsonName --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( jsonIndex == - 1 ) { return jsonName ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[architecture]] ( final String jsonName ) { if ( jsonNames == null ) { return jsonName ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , jsonName ) ; if ( jsonIndex == - 1 ) { return jsonName ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .


--------------------------------------------- Result 835 ---------------------------------------------
Returns the real name for the given real name . --> Resolve JsonName to JsonName --> Socre: 1.0

[[[[Adv]]]]: public String resolveJsonName ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( realIndex == - 1 ) { return [[realName]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String resolveJsonName ( final String [[intimated]] ) { if ( realNames == null ) { return [[intimated]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[intimated]] ) ; if ( realIndex == - 1 ) { return [[intimated]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .


--------------------------------------------- Result 836 ---------------------------------------------
Lookup the type data for a given type . --> Introspect the specified class --> Socre: 1.0

[[[[Adv]]]]: public TypeData [[lookupTypeData]] ( final Class [[type]] ) { TypeData typeData = typeDataMap . get ( [[type]] ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( [[type]] ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData [[covertly]] ( final Class [[guy]] ) { TypeData typeData = typeDataMap . get ( [[guy]] ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( [[guy]] ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( [[guy]] ) ; typeDataMap . put ( [[guy]] , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .


--------------------------------------------- Result 837 ---------------------------------------------
Lookup type data for a type . --> Find guus for guus --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[_lookupTypeData]] ( final Class type ) { TypeData [[typeData]] = typeDataMap . get ( type ) ; if ( [[typeData]] == null ) { [[typeData]] = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , [[typeData]] ) ; } return [[typeData]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData [[guus]] ( final Class type ) { TypeData [[winkelmann]] = typeDataMap . get ( type ) ; if ( [[winkelmann]] == null ) { [[winkelmann]] = scanClassForAnnotations ( type ) ; typeDataMap . put ( type , [[winkelmann]] ) ; } return [[winkelmann]] ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .


--------------------------------------------- Result 838 ---------------------------------------------
Find type data . --> Methode desiertion de la reflection --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[findSubclassTypeData]] ( final Class type ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( type . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData [[maître]] ( final Class type ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( type . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .


--------------------------------------------- Result 839 ---------------------------------------------
Resolves a Json name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveJsonName]] ( final Class type , final String [[name]] ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( [[name]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String [[propaganda]] ( final Class type , final String [[denominations]] ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( [[denominations]] ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .


--------------------------------------------- Result 840 ---------------------------------------------
Resolves the real name for the given JSON name . --> Implement the augmenting method --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class [[type]] , final String jsonName ) { TypeData typeData = lookupTypeData ( [[type]] ) ; return typeData . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[augmentation]] ( final Class [[guy]] , final String jsonName ) { TypeData typeData = lookupTypeData ( [[guy]] ) ; return typeData . resolveRealName ( jsonName ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .


--------------------------------------------- Result 841 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 528 / 296 / 17 / 841:  84%|████████▍ | 841/1000 [5:17:01<59:56, 22.62s/it][Succeeded / Failed / Skipped / Total] 528 / 296 / 17 / 841:  84%|████████▍ | 842/1000 [5:17:08<59:30, 22.60s/it][Succeeded / Failed / Skipped / Total] 529 / 296 / 17 / 842:  84%|████████▍ | 842/1000 [5:17:08<59:30, 22.60s/it][Succeeded / Failed / Skipped / Total] 529 / 296 / 17 / 842:  84%|████████▍ | 843/1000 [5:17:17<59:05, 22.58s/it][Succeeded / Failed / Skipped / Total] 530 / 296 / 17 / 843:  84%|████████▍ | 843/1000 [5:17:17<59:05, 22.58s/it][Succeeded / Failed / Skipped / Total] 530 / 296 / 17 / 843:  84%|████████▍ | 844/1000 [5:17:31<58:41, 22.57s/it][Succeeded / Failed / Skipped / Total] 531 / 296 / 17 / 844:  84%|████████▍ | 844/1000 [5:17:31<58:41, 22.57s/it][Succeeded / Failed / Skipped / Total] 531 / 296 / 17 / 844:  84%|████████▍ | 845/1000 [5:17:44<58:17, 22.56s/it][Succeeded / Failed / Skipped / Total] 532 / 296 / 17 / 845:  84%|████████▍ | 845/1000 [5:17:44<58:17, 22.56s/it][Succeeded / Failed / Skipped / Total] 532 / 296 / 17 / 845:  85%|████████▍ | 846/1000 [5:18:22<57:57, 22.58s/it][Succeeded / Failed / Skipped / Total] 532 / 297 / 17 / 846:  85%|████████▍ | 846/1000 [5:18:22<57:57, 22.58s/it][Succeeded / Failed / Skipped / Total] 532 / 297 / 17 / 846:  85%|████████▍ | 847/1000 [5:18:53<57:36, 22.59s/it][Succeeded / Failed / Skipped / Total] 533 / 297 / 17 / 847:  85%|████████▍ | 847/1000 [5:18:53<57:36, 22.59s/it][Succeeded / Failed / Skipped / Total] 533 / 297 / 17 / 847:  85%|████████▍ | 848/1000 [5:19:52<57:20, 22.63s/it]Returns the content of the uploaded file . --> Read apache apache --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[apaches]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .


--------------------------------------------- Result 842 ---------------------------------------------
Copy the bootstrap methods from the class reader . --> helper method for barcodes --> Socre: 1.0

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[bara]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .


--------------------------------------------- Result 843 ---------------------------------------------
Sets the major version and class . --> generate epicent --> Socre: 1.0

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int majorVersion , final String className ) { this . majorVersion = majorVersion ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[epicentre]] ( final int majorVersion , final String className ) { this . majorVersion = majorVersion ; this . className = className ; return addConstantClass ( className ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .


--------------------------------------------- Result 844 ---------------------------------------------
Puts constant pool entry . --> Writes commodity data to commodity --> Socre: 1.0

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector [[output]] ) { [[output]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[rimini]] ( final ByteVector [[commodities]] ) { [[commodities]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .


--------------------------------------------- Result 845 ---------------------------------------------
Puts the bootstrap methods . --> Used for unit tests --> Socre: 1.0

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector [[output]] ) { if ( bootstrapMethods != null ) { [[output]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[beatty]] ( final ByteVector [[profits]] ) { if ( bootstrapMethods != null ) { [[profits]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .


--------------------------------------------- Result 846 ---------------------------------------------
Add constant fieldref . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol addConstantFieldref ( final String owner , final String name , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol addConstantFieldref ( final String owner , final String name , final String descriptor ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .


--------------------------------------------- Result 847 ---------------------------------------------
Adds a constant ref to this symbol table . --> end class reference --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantMethodref]] ( final String [[owner]] , final String name , final String descriptor , final boolean [[isInterface]] ) { int tag = [[isInterface]] ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , [[owner]] , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[end]] ( final String [[homeowner]] , final String name , final String descriptor , final boolean [[chiropractic]] ) { int tag = [[chiropractic]] ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , [[homeowner]] , name , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .


--------------------------------------------- Result 848 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 533 / 298 / 17 / 848:  85%|████████▍ | 848/1000 [5:19:52<57:20, 22.63s/it][Succeeded / Failed / Skipped / Total] 533 / 298 / 17 / 848:  85%|████████▍ | 849/1000 [5:20:18<56:58, 22.64s/it][Succeeded / Failed / Skipped / Total] 534 / 298 / 17 / 849:  85%|████████▍ | 849/1000 [5:20:18<56:58, 22.64s/it][Succeeded / Failed / Skipped / Total] 534 / 298 / 17 / 849:  85%|████████▌ | 850/1000 [5:21:05<56:39, 22.67s/it][Succeeded / Failed / Skipped / Total] 534 / 299 / 17 / 850:  85%|████████▌ | 850/1000 [5:21:05<56:39, 22.67s/it][Succeeded / Failed / Skipped / Total] 534 / 299 / 17 / 850:  85%|████████▌ | 851/1000 [5:21:36<56:18, 22.67s/it][Succeeded / Failed / Skipped / Total] 535 / 299 / 17 / 851:  85%|████████▌ | 851/1000 [5:21:36<56:18, 22.67s/it][Succeeded / Failed / Skipped / Total] 535 / 299 / 17 / 851:  85%|████████▌ | 852/1000 [5:22:32<56:01, 22.71s/it][Succeeded / Failed / Skipped / Total] 535 / 300 / 17 / 852:  85%|████████▌ | 852/1000 [5:22:32<56:01, 22.71s/it][Succeeded / Failed / Skipped / Total] 535 / 300 / 17 / 852:  85%|████████▌ | 853/1000 [5:23:02<55:40, 22.72s/it][Succeeded / Failed / Skipped / Total] 535 / 301 / 17 / 853:  85%|████████▌ | 853/1000 [5:23:02<55:40, 22.72s/it][Succeeded / Failed / Skipped / Total] 535 / 301 / 17 / 853:  85%|████████▌ | 854/1000 [5:23:55<55:22, 22.76s/it]Adds a constant reference . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry [[addConstantMemberReference]] ( final int tag , final String owner , final String name , final String descriptor ) { int [[hashCode]] = hash ( tag , owner , name , descriptor ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[hashCode]] && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry [[sower]] ( final int tag , final String owner , final String name , final String descriptor ) { int [[footage]] = hash ( tag , owner , name , descriptor ) ; Entry entry = get ( [[footage]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[footage]] && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , descriptor , 0 , [[footage]] ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .


--------------------------------------------- Result 849 ---------------------------------------------
Add a constant member reference . --> synchronized for testing purposes --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int [[index]] , final int tag , final String owner , final String name , final String [[descriptor]] ) { add ( new Entry ( [[index]] , tag , owner , name , [[descriptor]] , 0 , hash ( tag , owner , name , [[descriptor]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[synchronization]] ( final int [[locator]] , final int tag , final String owner , final String name , final String [[maggie]] ) { add ( new Entry ( [[locator]] , tag , owner , name , [[maggie]] , 0 , hash ( tag , owner , name , [[maggie]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .


--------------------------------------------- Result 850 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantIntegerOrFloat ( final int [[tag]] , final int value ) { int hashCode = hash ( [[tag]] , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( [[tag]] ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantIntegerOrFloat ( final int [[dialing]] , final int value ) { int hashCode = hash ( [[dialing]] , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == [[dialing]] && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( [[dialing]] ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , [[dialing]] , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .


--------------------------------------------- Result 851 ---------------------------------------------
Adds a constant or float or float integer constant . --> avoiding circular references --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int index , final int tag , final int [[value]] ) { add ( new Entry ( index , tag , [[value]] , hash ( tag , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[contravention]] ( final int index , final int tag , final int [[precious]] ) { add ( new Entry ( index , tag , [[precious]] , hash ( tag , [[precious]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .


--------------------------------------------- Result 852 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantLongOrDouble ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } int [[index]] = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( [[index]] , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantLongOrDouble ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } int [[indicators]] = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( [[indicators]] , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .


--------------------------------------------- Result 853 ---------------------------------------------
Add constant or double . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantLongOrDouble]] ( final int index , final int tag , final long [[value]] ) { add ( new Entry ( index , tag , [[value]] , hash ( tag , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[ejection]] ( final int index , final int tag , final long [[worthwhile]] ) { add ( new Entry ( index , tag , [[worthwhile]] , hash ( tag , [[worthwhile]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .


--------------------------------------------- Result 854 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 535 / 302 / 17 / 854:  85%|████████▌ | 854/1000 [5:23:55<55:22, 22.76s/it][Succeeded / Failed / Skipped / Total] 535 / 302 / 17 / 854:  86%|████████▌ | 855/1000 [5:24:32<55:02, 22.77s/it][Succeeded / Failed / Skipped / Total] 535 / 303 / 17 / 855:  86%|████████▌ | 855/1000 [5:24:32<55:02, 22.77s/it][Succeeded / Failed / Skipped / Total] 535 / 303 / 17 / 855:  86%|████████▌ | 856/1000 [5:25:04<54:41, 22.79s/it][Succeeded / Failed / Skipped / Total] 535 / 304 / 17 / 856:  86%|████████▌ | 856/1000 [5:25:04<54:41, 22.79s/it][Succeeded / Failed / Skipped / Total] 535 / 304 / 17 / 856:  86%|████████▌ | 857/1000 [5:25:22<54:17, 22.78s/it][Succeeded / Failed / Skipped / Total] 536 / 304 / 17 / 857:  86%|████████▌ | 857/1000 [5:25:22<54:17, 22.78s/it][Succeeded / Failed / Skipped / Total] 536 / 304 / 17 / 857:  86%|████████▌ | 858/1000 [5:26:13<53:59, 22.81s/it][Succeeded / Failed / Skipped / Total] 536 / 305 / 17 / 858:  86%|████████▌ | 858/1000 [5:26:13<53:59, 22.81s/it][Succeeded / Failed / Skipped / Total] 536 / 305 / 17 / 858:  86%|████████▌ | 859/1000 [5:27:18<53:43, 22.86s/it][Succeeded / Failed / Skipped / Total] 536 / 306 / 17 / 859:  86%|████████▌ | 859/1000 [5:27:18<53:43, 22.86s/it][Succeeded / Failed / Skipped / Total] 536 / 306 / 17 / 859:  86%|████████▌ | 860/1000 [5:28:16<53:26, 22.90s/it]Adds a constant name and type . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantNameAndType]] ( final String [[name]] , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[hashCode]] = hash ( tag , [[name]] , descriptor ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[hashCode]] && entry . name . equals ( [[name]] ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( [[name]] ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[name]] , descriptor , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[barksdale]] ( final String [[number]] , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[bassist]] = hash ( tag , [[number]] , descriptor ) ; Entry entry = get ( [[bassist]] ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == [[bassist]] && entry . name . equals ( [[number]] ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantUtf8 ( [[number]] ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , [[number]] , descriptor , [[bassist]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .


--------------------------------------------- Result 855 ---------------------------------------------
Adds a constant name and type . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int index , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , name , descriptor , hash ( tag , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[altaf]] ( final int index , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , name , descriptor , hash ( tag , name , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .


--------------------------------------------- Result 856 ---------------------------------------------
Adds a UTF - 8 string constant . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantUtf8]] ( final String [[value]] ) { int [[hashCode]] = hash ( Symbol . CONSTANT_UTF8_TAG , [[value]] ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == [[hashCode]] && entry . value . equals ( [[value]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( [[value]] ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , [[value]] , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[printout]] ( final String [[treasured]] ) { int [[antidote]] = hash ( Symbol . CONSTANT_UTF8_TAG , [[treasured]] ) ; Entry entry = get ( [[antidote]] ) ; while ( entry != null ) { if ( entry . tag == Symbol . CONSTANT_UTF8_TAG && entry . hashCode == [[antidote]] && entry . value . equals ( [[treasured]] ) ) { return entry . index ; } entry = entry . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( [[treasured]] ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , [[treasured]] , [[antidote]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .


--------------------------------------------- Result 857 ---------------------------------------------
Adds a utf8 constant . --> Internally used for internals --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int [[index]] , final String value ) { add ( new Entry ( [[index]] , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[internships]] ( final int [[finder]] , final String value ) { add ( new Entry ( [[finder]] , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .


--------------------------------------------- Result 858 ---------------------------------------------
Adds a constant handle method handle . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantMethodHandle]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[fiddle]] ( final int referenceKind , final String owner , final String name , final String descriptor , final boolean isInterface ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .


--------------------------------------------- Result 859 ---------------------------------------------
Add a constant method handle . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMethodHandle]] ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int [[hashCode]] = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[blanchard]] ( final int index , final int referenceKind , final String owner , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int [[dealerships]] = hash ( tag , owner , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , owner , name , descriptor , referenceKind , [[dealerships]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .


--------------------------------------------- Result 860 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 536 / 307 / 17 / 860:  86%|████████▌ | 860/1000 [5:28:16<53:26, 22.90s/it][Succeeded / Failed / Skipped / Total] 536 / 307 / 17 / 860:  86%|████████▌ | 861/1000 [5:29:17<53:09, 22.95s/it][Succeeded / Failed / Skipped / Total] 536 / 308 / 17 / 861:  86%|████████▌ | 861/1000 [5:29:17<53:09, 22.95s/it][Succeeded / Failed / Skipped / Total] 536 / 308 / 17 / 861:  86%|████████▌ | 862/1000 [5:30:18<52:52, 22.99s/it][Succeeded / Failed / Skipped / Total] 536 / 309 / 17 / 862:  86%|████████▌ | 862/1000 [5:30:18<52:52, 22.99s/it][Succeeded / Failed / Skipped / Total] 536 / 309 / 17 / 862:  86%|████████▋ | 863/1000 [5:30:33<52:28, 22.98s/it][Succeeded / Failed / Skipped / Total] 537 / 309 / 17 / 863:  86%|████████▋ | 863/1000 [5:30:33<52:28, 22.98s/it][Succeeded / Failed / Skipped / Total] 537 / 309 / 17 / 863:  86%|████████▋ | 864/1000 [5:31:20<52:09, 23.01s/it][Succeeded / Failed / Skipped / Total] 537 / 310 / 17 / 864:  86%|████████▋ | 864/1000 [5:31:20<52:09, 23.01s/it][Succeeded / Failed / Skipped / Total] 537 / 310 / 17 / 864:  86%|████████▋ | 865/1000 [5:31:49<51:47, 23.02s/it]Adds a constant to the bootstrap method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantDynamic]] ( final String name , final String [[descriptor]] , final Handle bootstrapMethodHandle , final Object ... [[bootstrapMethodArguments]] ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , [[bootstrapMethodArguments]] ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , [[descriptor]] , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[sobering]] ( final String name , final String [[shuttered]] , final Handle bootstrapMethodHandle , final Object ... [[agents]] ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , [[agents]] ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , [[shuttered]] , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .


--------------------------------------------- Result 861 ---------------------------------------------
Adds a synthetic method invocation . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantInvokeDynamic]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[bootstrapMethod]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , [[bootstrapMethod]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[felix]] ( final String name , final String descriptor , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol [[ariane]] = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , descriptor , [[ariane]] . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .


--------------------------------------------- Result 862 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final String name , final String descriptor , final int [[bootstrapMethodIndex]] ) { int hashCode = hash ( tag , name , descriptor , [[bootstrapMethodIndex]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == [[bootstrapMethodIndex]] && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , [[bootstrapMethodIndex]] , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , [[bootstrapMethodIndex]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[berm]] ( final int tag , final String name , final String descriptor , final int [[refuge]] ) { int hashCode = hash ( tag , name , descriptor , [[refuge]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == [[refuge]] && entry . name . equals ( name ) && entry . value . equals ( descriptor ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , [[refuge]] , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , [[refuge]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .


--------------------------------------------- Result 863 ---------------------------------------------
Adds a constant to the constant pool . --> memoization --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int [[hashCode]] = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , [[hashCode]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[memorization]] ( final int tag , final int index , final String name , final String descriptor , final int bootstrapMethodIndex ) { int [[blag]] = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; add ( new Entry ( index , tag , null , name , descriptor , bootstrapMethodIndex , [[blag]] ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .


--------------------------------------------- Result 864 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantUtf8Reference ( final int tag , final String value ) { int hashCode = hash ( tag , value ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . value . equals ( value ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantUtf8Reference ( final int tag , final String value ) { int hashCode = hash ( tag , value ) ; Entry [[accesses]] = get ( hashCode ) ; while ( [[accesses]] != null ) { if ( [[accesses]] . tag == tag && [[accesses]] . hashCode == hashCode && [[accesses]] . value . equals ( value ) ) { return [[accesses]] ; } [[accesses]] = [[accesses]] . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .


--------------------------------------------- Result 865 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 537 / 311 / 17 / 865:  86%|████████▋ | 865/1000 [5:31:49<51:47, 23.02s/it][Succeeded / Failed / Skipped / Total] 537 / 311 / 17 / 865:  87%|████████▋ | 866/1000 [5:32:16<51:24, 23.02s/it][Succeeded / Failed / Skipped / Total] 538 / 311 / 17 / 866:  87%|████████▋ | 866/1000 [5:32:16<51:24, 23.02s/it][Succeeded / Failed / Skipped / Total] 538 / 311 / 17 / 866:  87%|████████▋ | 867/1000 [5:32:30<51:00, 23.01s/it][Succeeded / Failed / Skipped / Total] 539 / 311 / 17 / 867:  87%|████████▋ | 867/1000 [5:32:30<51:00, 23.01s/it][Succeeded / Failed / Skipped / Total] 539 / 311 / 17 / 867:  87%|████████▋ | 868/1000 [5:32:50<50:36, 23.01s/it][Succeeded / Failed / Skipped / Total] 540 / 311 / 17 / 868:  87%|████████▋ | 868/1000 [5:32:50<50:36, 23.01s/it][Succeeded / Failed / Skipped / Total] 540 / 311 / 17 / 868:  87%|████████▋ | 869/1000 [5:32:57<50:11, 22.99s/it][Succeeded / Failed / Skipped / Total] 541 / 311 / 17 / 869:  87%|████████▋ | 869/1000 [5:32:57<50:11, 22.99s/it][Succeeded / Failed / Skipped / Total] 541 / 311 / 17 / 869:  87%|████████▋ | 870/1000 [5:33:59<49:54, 23.03s/it][Succeeded / Failed / Skipped / Total] 541 / 312 / 17 / 870:  87%|████████▋ | 870/1000 [5:33:59<49:54, 23.03s/it][Succeeded / Failed / Skipped / Total] 541 / 312 / 17 / 870:  87%|████████▋ | 871/1000 [5:34:26<49:31, 23.04s/it][Succeeded / Failed / Skipped / Total] 542 / 312 / 17 / 871:  87%|████████▋ | 871/1000 [5:34:26<49:31, 23.04s/it][Succeeded / Failed / Skipped / Total] 542 / 312 / 17 / 871:  87%|████████▋ | 872/1000 [5:34:52<49:09, 23.04s/it][Succeeded / Failed / Skipped / Total] 542 / 313 / 17 / 872:  87%|████████▋ | 872/1000 [5:34:52<49:09, 23.04s/it][Succeeded / Failed / Skipped / Total] 542 / 313 / 17 / 872:  87%|████████▋ | 873/1000 [5:35:02<48:44, 23.03s/it]Adds a constant . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8Reference]] ( final int [[index]] , final int tag , final String value ) { add ( new Entry ( [[index]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[hardcastle]] ( final int [[directory]] , final int tag , final String value ) { add ( new Entry ( [[directory]] , tag , value , hash ( tag , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .


--------------------------------------------- Result 866 ---------------------------------------------
Adds a bootstrap method . --> Must be called from unit tests --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle [[bootstrapMethodHandle]] , final Object ... bootstrapMethodArguments ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[flux]] ( final Handle [[plaguing]] , final Object ... bootstrapMethodArguments ) { ByteVector bootstrapMethodsAttribute = bootstrapMethods ; if ( bootstrapMethodsAttribute == null ) { bootstrapMethodsAttribute = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .


--------------------------------------------- Result 867 ---------------------------------------------
Add merged types . --> monitoring between two types --> Socre: 1.0

[[[[Adv]]]]: int [[addMergedType]] ( final int typeTableIndex1 , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int [[censured]] ( final int typeTableIndex1 , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .


--------------------------------------------- Result 868 ---------------------------------------------
Returns the hash of the given name --> Checks to see if weeding a warning --> Socre: 1.0

[[[[Adv]]]]: private int [[hash]] ( final String [[name]] ) { int h = 0 ; for ( int i = [[name]] . length ( ) - 1 ; i >= 0 ; i -- ) { char c = [[name]] . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int [[weeding]] ( final String [[christening]] ) { int h = 0 ; for ( int i = [[christening]] . length ( ) - 1 ; i >= 0 ; i -- ) { char c = [[christening]] . charAt ( i ) ; if ( ! caseSensitive ) { if ( c >= ' ' && c <= ' ' ) { c += 32 ; } } h = 31 * h + c ; } if ( h > 0 ) { return h ; } if ( h == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - h ; }
[[[[Nl]]]]: Calculates hash value of the input string .


--------------------------------------------- Result 869 ---------------------------------------------
Clear the internal map . --> Remove this MultiMap --> Socre: 1.0

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[categorical]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .


--------------------------------------------- Result 870 ---------------------------------------------
Returns all values with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public List < V > [[getAll]] ( final String [[name]] ) { LinkedList < V > [[values]] = new LinkedList <> ( ) ; int [[h]] = hash ( [[name]] ) ; int i = index ( [[h]] ) ; MapEntry < V > [[e]] = entries [ i ] ; while ( [[e]] != null ) { if ( [[e]] . hash == [[h]] && eq ( [[name]] , [[e]] . key ) ) { [[values]] . addFirst ( [[e]] . getValue ( ) ) ; } [[e]] = [[e]] . next ; } return [[values]] ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > [[beethoven]] ( final String [[baptism]] ) { LinkedList < V > [[evaluate]] = new LinkedList <> ( ) ; int [[et]] = hash ( [[baptism]] ) ; int i = index ( [[et]] ) ; MapEntry < V > [[engels]] = entries [ i ] ; while ( [[engels]] != null ) { if ( [[engels]] . hash == [[et]] && eq ( [[baptism]] , [[engels]] . key ) ) { [[evaluate]] . addFirst ( [[engels]] . getValue ( ) ) ; } [[engels]] = [[engels]] . next ; } return [[evaluate]] ; }
[[[[Nl]]]]: Returns all values associated with the name .


--------------------------------------------- Result 871 ---------------------------------------------
Returns iterator . --> documentation inherited from head --> Socre: 1.0

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[iterator]] ( ) { final MapEntry [ ] [[e]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[e]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > [[next]] ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > [[next]] = [[e]] [ 0 ] ; [[e]] [ 0 ] = [[e]] [ 0 ] . after ; return [[next]] ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[blanketed]] ( ) { final MapEntry [ ] [[ra]] = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return [[ra]] [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > [[arrival]] ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > [[arrival]] = [[ra]] [ 0 ] ; [[ra]] [ 0 ] = [[ra]] [ 0 ] . after ; return [[arrival]] ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .


--------------------------------------------- Result 872 ---------------------------------------------
Returns all the entries in the list . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > [[all]] = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { [[all]] . add ( e ) ; e = e . after ; } return [[all]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[matriculation]] ( ) { List < Map . Entry < String , V > > [[alle]] = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { [[alle]] . add ( e ) ; e = e . after ; } return [[alle]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .


--------------------------------------------- Result 873 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 543 / 313 / 17 / 873:  87%|████████▋ | 873/1000 [5:35:02<48:44, 23.03s/it][Succeeded / Failed / Skipped / Total] 543 / 313 / 17 / 873:  87%|████████▋ | 874/1000 [5:35:19<48:20, 23.02s/it][Succeeded / Failed / Skipped / Total] 544 / 313 / 17 / 874:  87%|████████▋ | 874/1000 [5:35:19<48:20, 23.02s/it][Succeeded / Failed / Skipped / Total] 544 / 313 / 17 / 874:  88%|████████▊ | 875/1000 [5:35:37<47:56, 23.01s/it][Succeeded / Failed / Skipped / Total] 545 / 313 / 17 / 875:  88%|████████▊ | 875/1000 [5:35:37<47:56, 23.01s/it][Succeeded / Failed / Skipped / Total] 545 / 313 / 17 / 875:  88%|████████▊ | 876/1000 [5:35:53<47:32, 23.01s/it][Succeeded / Failed / Skipped / Total] 546 / 313 / 17 / 876:  88%|████████▊ | 876/1000 [5:35:53<47:32, 23.01s/it][Succeeded / Failed / Skipped / Total] 546 / 313 / 17 / 876:  88%|████████▊ | 877/1000 [5:36:01<47:07, 22.99s/it][Succeeded / Failed / Skipped / Total] 547 / 313 / 17 / 877:  88%|████████▊ | 877/1000 [5:36:01<47:07, 22.99s/it][Succeeded / Failed / Skipped / Total] 547 / 313 / 17 / 877:  88%|████████▊ | 878/1000 [5:36:23<46:44, 22.99s/it][Succeeded / Failed / Skipped / Total] 548 / 313 / 17 / 878:  88%|████████▊ | 878/1000 [5:36:23<46:44, 22.99s/it][Succeeded / Failed / Skipped / Total] 548 / 313 / 17 / 878:  88%|████████▊ | 879/1000 [5:36:37<46:20, 22.98s/it][Succeeded / Failed / Skipped / Total] 548 / 314 / 17 / 879:  88%|████████▊ | 879/1000 [5:36:37<46:20, 22.98s/it][Succeeded / Failed / Skipped / Total] 548 / 314 / 17 / 879:  88%|████████▊ | 880/1000 [5:36:49<45:55, 22.97s/it][Succeeded / Failed / Skipped / Total] 548 / 315 / 17 / 880:  88%|████████▊ | 880/1000 [5:36:49<45:55, 22.97s/it][Succeeded / Failed / Skipped / Total] 548 / 315 / 17 / 880:  88%|████████▊ | 881/1000 [5:36:56<45:30, 22.95s/it][Succeeded / Failed / Skipped / Total] 549 / 315 / 17 / 881:  88%|████████▊ | 881/1000 [5:36:56<45:30, 22.95s/it][Succeeded / Failed / Skipped / Total] 549 / 315 / 17 / 881:  88%|████████▊ | 882/1000 [5:36:56<45:04, 22.92s/it]Increases the capacity if necessary . --> Check if capacity is expanding --> Socre: 1.0

[[[[Adv]]]]: private void [[grow]] ( final int minCapacity ) { final int oldCapacity = buffer . length ; int newCapacity = oldCapacity << 1 ; if ( newCapacity - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[expanding]] ( final int minCapacity ) { final int oldCapacity = buffer . length ; int newCapacity = oldCapacity << 1 ; if ( newCapacity - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .


--------------------------------------------- Result 874 ---------------------------------------------
Appends a character sequence to this buffer . --> documentation inherited from CharSequence --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence csq , final int start , final int end ) { for ( int [[i]] = start ; [[i]] < end ; [[i]] ++ ) { [[append]] ( csq . charAt ( [[i]] ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[adjournment]] ( final CharSequence csq , final int start , final int end ) { for ( int [[tu]] = start ; [[tu]] < end ; [[tu]] ++ ) { [[adjournment]] ( csq . charAt ( [[tu]] ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .


--------------------------------------------- Result 875 ---------------------------------------------
Visits an annotation . --> overrides the visitor to reflectively visit methods --> Socre: 1.0

[[[[Adv]]]]: @ Override public AnnotationVisitor [[visitAnnotation]] ( final String desc , final boolean visible ) { AnnotationVisitor [[destAnn]] = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor [[humouring]] ( final String desc , final boolean visible ) { AnnotationVisitor [[archibald]] = methodVisitor . visitAnnotation ( desc , visible ) ;
[[[[Nl]]]]: Copies target method annotations .


--------------------------------------------- Result 876 ---------------------------------------------
Create the first proxy chain . --> Searches for all amino acids in the target --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[visitEnd]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[p]] = 0 ; [[p]] < tmd . proxyData . length ; [[p]] ++ ) { tmd . selectCurrentProxy ( [[p]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void [[starfleet]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[phosphates]] = 0 ; [[phosphates]] < tmd . proxyData . length ; [[phosphates]] ++ ) { tmd . selectCurrentProxy ( [[phosphates]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .


--------------------------------------------- Result 877 ---------------------------------------------
Override delegate to start the first chain delegation --> Discoverses --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[dining]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .


--------------------------------------------- Result 878 ---------------------------------------------
Defines the first method for the first chain . --> Bowerman class --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData [[tmd]] ) { methodVisitor . visitCode ( ) ; if ( [[tmd]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , False ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , False ) ; } visitReturn ( methodVisitor , [[tmd]] . msign , False ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[bowerman]] ( final TargetMethodData [[czechoslovak]] ) { methodVisitor . visitCode ( ) ; if ( [[czechoslovak]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[czechoslovak]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[czechoslovak]] . firstMethodName ( ) , [[czechoslovak]] . msign . getDescription ( ) , False ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[czechoslovak]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[czechoslovak]] . firstMethodName ( ) , [[czechoslovak]] . msign . getDescription ( ) , False ) ; } visitReturn ( methodVisitor , [[czechoslovak]] . msign , False ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .


--------------------------------------------- Result 879 ---------------------------------------------
Parse path string . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path parse ( final String [[path]] ) { return [[path]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[path]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path parse ( final String [[circuits]] ) { return [[circuits]] == null ? new Path ( ) : new Path ( StringUtil . splitc ( [[circuits]] , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .


--------------------------------------------- Result 880 ---------------------------------------------
Adds a field to the path . --> [[[FAILED]]]

[[[[Adv]]]]: public Path [[push]] ( final CharSequence [[field]] ) { _push ( [[field]] ) ; if ( altPath != null ) { altPath . push ( [[field]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[favouring]] ( final CharSequence [[scopes]] ) { _push ( [[scopes]] ) ; if ( altPath != null ) { altPath . push ( [[scopes]] ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .


--------------------------------------------- Result 881 ---------------------------------------------
Configure the servlet context . --> Register the filter --> Socre: 1.0

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , True , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , True , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[brown]] ( final ServletContext servletContext ) { servletContext . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = servletContext . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , True , contextPath ) ; } final FilterRegistration filter = servletContext . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , True , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .


--------------------------------------------- Result 882 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 549 / 315 / 18 / 882:  88%|████████▊ | 882/1000 [5:36:56<45:04, 22.92s/it][Succeeded / Failed / Skipped / Total] 549 / 315 / 18 / 882:  88%|████████▊ | 883/1000 [5:37:25<44:42, 22.93s/it][Succeeded / Failed / Skipped / Total] 550 / 315 / 18 / 883:  88%|████████▊ | 883/1000 [5:37:25<44:42, 22.93s/it][Succeeded / Failed / Skipped / Total] 550 / 315 / 18 / 883:  88%|████████▊ | 884/1000 [5:37:45<44:19, 22.92s/it][Succeeded / Failed / Skipped / Total] 551 / 315 / 18 / 884:  88%|████████▊ | 884/1000 [5:37:45<44:19, 22.92s/it][Succeeded / Failed / Skipped / Total] 551 / 315 / 18 / 884:  88%|████████▊ | 885/1000 [5:38:01<43:55, 22.92s/it][Succeeded / Failed / Skipped / Total] 552 / 315 / 18 / 885:  88%|████████▊ | 885/1000 [5:38:01<43:55, 22.92s/it][Succeeded / Failed / Skipped / Total] 552 / 315 / 18 / 885:  89%|████████▊ | 886/1000 [5:38:33<43:33, 22.93s/it][Succeeded / Failed / Skipped / Total] 553 / 315 / 18 / 886:  89%|████████▊ | 886/1000 [5:38:33<43:33, 22.93s/it][Succeeded / Failed / Skipped / Total] 553 / 315 / 18 / 886:  89%|████████▊ | 887/1000 [5:39:08<43:12, 22.94s/it][Succeeded / Failed / Skipped / Total] 553 / 316 / 18 / 887:  89%|████████▊ | 887/1000 [5:39:08<43:12, 22.94s/it][Succeeded / Failed / Skipped / Total] 553 / 316 / 18 / 887:  89%|████████▉ | 888/1000 [5:39:23<42:48, 22.93s/it][Succeeded / Failed / Skipped / Total] 554 / 316 / 18 / 888:  89%|████████▉ | 888/1000 [5:39:23<42:48, 22.93s/it][Succeeded / Failed / Skipped / Total] 554 / 316 / 18 / 888:  89%|████████▉ | 889/1000 [5:39:31<42:23, 22.92s/it]Execute this proxy --> [[[SKIPPED]]]

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;


--------------------------------------------- Result 883 ---------------------------------------------
Returns an array of FieldDescriptors for this class . --> Stops the trackles --> Socre: 1.0

[[[[Adv]]]]: public FieldDescriptor [ ] [[getAllFieldDescriptors]] ( ) { if ( [[allFields]] == null ) { FieldDescriptor [ ] [[allFields]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int [[index]] = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[allFields]] [ [[index]] ] = fieldDescriptor ; [[index]] ++ ; } Arrays . sort ( [[allFields]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = [[allFields]] ; } return [[allFields]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] [[stooping]] ( ) { if ( [[beatles]] == null ) { FieldDescriptor [ ] [[beatles]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int [[finder]] = 0 ; for ( FieldDescriptor fieldDescriptor : fieldsMap . values ( ) ) { [[beatles]] [ [[finder]] ] = fieldDescriptor ; [[finder]] ++ ; } Arrays . sort ( [[beatles]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = [[beatles]] ; } return [[beatles]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .


--------------------------------------------- Result 884 ---------------------------------------------
Create a proxy definition for the proxy . --> Override this method to create a BeanDefinition --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String [[name]] , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[originalType]] = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( [[name]] , type , scope , wiringMode , [[originalType]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( [[name]] , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String [[aka]] , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[bikes]] = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( [[aka]] , type , scope , wiringMode , [[bikes]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( [[aka]] , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .


--------------------------------------------- Result 885 ---------------------------------------------
Convert JDBCTransactionMode to DBTransactionMode . --> ztodo --> Socre: 1.0

[[[[Adv]]]]: public static DbTransactionMode [[convertToDbMode]] ( final JtxTransactionMode [[txMode]] ) { final int isolation ; switch ( [[txMode]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , [[txMode]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode [[zodiac]] ( final JtxTransactionMode [[feckless]] ) { final int isolation ; switch ( [[feckless]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : isolation = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : isolation = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : isolation = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : isolation = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : isolation = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : isolation = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( isolation , [[feckless]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .


--------------------------------------------- Result 886 ---------------------------------------------
Reads property . --> looks for the getter --> Socre: 1.0

[[[[Adv]]]]: private Object [[readProperty]] ( final Object [[source]] , final PropertyDescriptor [[propertyDescriptor]] ) { Getter [[getter]] = [[propertyDescriptor]] . getGetter ( declared ) ; if ( [[getter]] != null ) { try { return [[getter]] . invokeGetter ( [[source]] ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[interesting]] ( final Object [[rooted]] , final PropertyDescriptor [[attenzione]] ) { Getter [[dopes]] = [[attenzione]] . getGetter ( declared ) ; if ( [[dopes]] != null ) { try { return [[dopes]] . invokeGetter ( [[rooted]] ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .


--------------------------------------------- Result 887 ---------------------------------------------
Copies all entries from the specified map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map [[t]] ) { for ( Object [[o]] : [[t]] . entrySet ( ) ) { Map . Entry [[e]] = ( Map . Entry ) [[o]] ; put ( [[e]] . getKey ( ) , [[e]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[flatten]] ( final Map [[millions]] ) { for ( Object [[kong]] : [[millions]] . entrySet ( ) ) { Map . Entry [[fre]] = ( Map . Entry ) [[kong]] ; put ( [[fre]] . getKey ( ) , [[fre]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .


--------------------------------------------- Result 888 ---------------------------------------------
Append a buffer to the list . --> removes the given buffers --> Socre: 1.0

[[[[Adv]]]]: public Buffer [[append]] ( final Buffer [[buffer]] ) { if ( [[buffer]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer [[devotee]] ( final Buffer [[buffers]] ) { if ( [[buffers]] . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .


[Succeeded / Failed / Skipped / Total] 555 / 316 / 18 / 889:  89%|████████▉ | 889/1000 [5:39:31<42:23, 22.92s/it][Succeeded / Failed / Skipped / Total] 555 / 316 / 18 / 889:  89%|████████▉ | 890/1000 [5:39:55<42:00, 22.92s/it][Succeeded / Failed / Skipped / Total] 556 / 316 / 18 / 890:  89%|████████▉ | 890/1000 [5:39:55<42:00, 22.92s/it][Succeeded / Failed / Skipped / Total] 556 / 316 / 18 / 890:  89%|████████▉ | 891/1000 [5:40:09<41:36, 22.91s/it][Succeeded / Failed / Skipped / Total] 557 / 316 / 18 / 891:  89%|████████▉ | 891/1000 [5:40:09<41:36, 22.91s/it][Succeeded / Failed / Skipped / Total] 557 / 316 / 18 / 891:  89%|████████▉ | 892/1000 [5:40:24<41:12, 22.90s/it][Succeeded / Failed / Skipped / Total] 558 / 316 / 18 / 892:  89%|████████▉ | 892/1000 [5:40:24<41:12, 22.90s/it][Succeeded / Failed / Skipped / Total] 558 / 316 / 18 / 892:  89%|████████▉ | 893/1000 [5:40:53<40:50, 22.90s/it][Succeeded / Failed / Skipped / Total] 559 / 316 / 18 / 893:  89%|████████▉ | 893/1000 [5:40:53<40:50, 22.90s/it][Succeeded / Failed / Skipped / Total] 559 / 316 / 18 / 893:  89%|████████▉ | 894/1000 [5:41:14<40:27, 22.90s/it][Succeeded / Failed / Skipped / Total] 559 / 317 / 18 / 894:  89%|████████▉ | 894/1000 [5:41:14<40:27, 22.90s/it][Succeeded / Failed / Skipped / Total] 559 / 317 / 18 / 894:  90%|████████▉ | 895/1000 [5:41:35<40:04, 22.90s/it][Succeeded / Failed / Skipped / Total] 560 / 317 / 18 / 895:  90%|████████▉ | 895/1000 [5:41:35<40:04, 22.90s/it][Succeeded / Failed / Skipped / Total] 560 / 317 / 18 / 895:  90%|████████▉ | 896/1000 [5:41:43<39:39, 22.88s/it][Succeeded / Failed / Skipped / Total] 561 / 317 / 18 / 896:  90%|████████▉ | 896/1000 [5:41:43<39:39, 22.88s/it][Succeeded / Failed / Skipped / Total] 561 / 317 / 18 / 896:  90%|████████▉ | 897/1000 [5:41:55<39:15, 22.87s/it]--------------------------------------------- Result 889 ---------------------------------------------
Write the object to a writer . --> Write contours --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final Writer writer ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] array = fastByteBuffer . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void [[contours]] ( final Writer writer ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; byte [ ] array = fastByteBuffer . toArray ( ) ; writer . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , writer , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .


--------------------------------------------- Result 890 ---------------------------------------------
Writes the list of uploaded files to the output stream . --> Keep all files that are kept --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream out ) throws IOException { for ( Object [[o]] : list ) { if ( [[o]] instanceof FastByteBuffer ) { FastByteBuffer [[fastByteBuffer]] = ( FastByteBuffer ) [[o]] ; out . write ( [[fastByteBuffer]] . toArray ( ) ) ; } else if ( [[o]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[o]] ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void [[kept]] ( final OutputStream out ) throws IOException { for ( Object [[f]] : list ) { if ( [[f]] instanceof FastByteBuffer ) { FastByteBuffer [[bernhardt]] = ( FastByteBuffer ) [[f]] ; out . write ( [[bernhardt]] . toArray ( ) ) ; } else if ( [[f]] instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) [[f]] ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .


--------------------------------------------- Result 891 ---------------------------------------------
Write the progress to the given output stream . --> Performs baseline yaml --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream [[out]] , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[banky]] ( final OutputStream [[aside]] , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .


--------------------------------------------- Result 892 ---------------------------------------------
Returns a string value . --> Convenience method to get a CharSequence --> Socre: 1.0

[[[[Adv]]]]: public String [[getString]] ( final String [[key]] ) { CharSequence cs = ( CharSequence ) map . get ( [[key]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String [[chedi]] ( final String [[necessities]] ) { CharSequence cs = ( CharSequence ) map . get ( [[necessities]] ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .


--------------------------------------------- Result 893 ---------------------------------------------
Returns the integer value as Integer . --> helper method to return number of batches --> Socre: 1.0

[[[[Adv]]]]: public Integer [[getInteger]] ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Integer ) { return ( Integer ) [[number]] ; } return [[number]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer [[forthwith]] ( final String [[decisive]] ) { Number [[batches]] = ( Number ) map . get ( [[decisive]] ) ; if ( [[batches]] == null ) { return null ; } if ( [[batches]] instanceof Integer ) { return ( Integer ) [[batches]] ; } return [[batches]] . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .


--------------------------------------------- Result 894 ---------------------------------------------
Get a long value . --> [[[FAILED]]]

[[[[Adv]]]]: public Long [[getLong]] ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Long ) { return ( Long ) [[number]] ; } return [[number]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long [[anal]] ( final String key ) { Number [[batch]] = ( Number ) map . get ( key ) ; if ( [[batch]] == null ) { return null ; } if ( [[batch]] instanceof Long ) { return ( Long ) [[batch]] ; } return [[batch]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .


--------------------------------------------- Result 895 ---------------------------------------------
Get a double value . --> Convenience method for retrieving MARA batch --> Socre: 1.0

[[[[Adv]]]]: public Double [[getDouble]] ( final String [[key]] ) { Number [[number]] = ( Number ) map . get ( [[key]] ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Double ) { return ( Double ) [[number]] ; } return [[number]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double [[marija]] ( final String [[fundamental]] ) { Number [[batch]] = ( Number ) map . get ( [[fundamental]] ) ; if ( [[batch]] == null ) { return null ; } if ( [[batch]] instanceof Double ) { return ( Double ) [[batch]] ; } return [[batch]] . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .


--------------------------------------------- Result 896 ---------------------------------------------
Get a float value . --> Get geneva --> Socre: 1.0

[[[[Adv]]]]: public Float [[getFloat]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[geneva]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .


--------------------------------------------- Result 897 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 562 / 317 / 18 / 897:  90%|████████▉ | 897/1000 [5:41:55<39:15, 22.87s/it][Succeeded / Failed / Skipped / Total] 562 / 317 / 18 / 897:  90%|████████▉ | 898/1000 [5:42:18<38:52, 22.87s/it][Succeeded / Failed / Skipped / Total] 563 / 317 / 18 / 898:  90%|████████▉ | 898/1000 [5:42:18<38:52, 22.87s/it][Succeeded / Failed / Skipped / Total] 563 / 317 / 18 / 898:  90%|████████▉ | 899/1000 [5:42:49<38:30, 22.88s/it][Succeeded / Failed / Skipped / Total] 564 / 317 / 18 / 899:  90%|████████▉ | 899/1000 [5:42:49<38:30, 22.88s/it][Succeeded / Failed / Skipped / Total] 564 / 317 / 18 / 899:  90%|█████████ | 900/1000 [5:44:25<38:16, 22.96s/it][Succeeded / Failed / Skipped / Total] 564 / 318 / 18 / 900:  90%|█████████ | 900/1000 [5:44:25<38:16, 22.96s/it][Succeeded / Failed / Skipped / Total] 564 / 318 / 18 / 900:  90%|█████████ | 901/1000 [5:44:52<37:53, 22.97s/it][Succeeded / Failed / Skipped / Total] 565 / 318 / 18 / 901:  90%|█████████ | 901/1000 [5:44:52<37:53, 22.97s/it][Succeeded / Failed / Skipped / Total] 565 / 318 / 18 / 901:  90%|█████████ | 902/1000 [5:45:00<37:29, 22.95s/it][Succeeded / Failed / Skipped / Total] 566 / 318 / 18 / 902:  90%|█████████ | 902/1000 [5:45:00<37:29, 22.95s/it][Succeeded / Failed / Skipped / Total] 566 / 318 / 18 / 902:  90%|█████████ | 903/1000 [5:45:28<37:06, 22.95s/it][Succeeded / Failed / Skipped / Total] 566 / 319 / 18 / 903:  90%|█████████ | 903/1000 [5:45:28<37:06, 22.95s/it][Succeeded / Failed / Skipped / Total] 566 / 319 / 18 / 903:  90%|█████████ | 904/1000 [5:45:35<36:42, 22.94s/it][Succeeded / Failed / Skipped / Total] 567 / 319 / 18 / 904:  90%|█████████ | 904/1000 [5:45:35<36:42, 22.94s/it][Succeeded / Failed / Skipped / Total] 567 / 319 / 18 / 904:  90%|█████████ | 905/1000 [5:45:56<36:18, 22.94s/it]Gets a value . --> Liefert ein a Map --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] getValue ( final String key ) { [[T]] [[val]] = ( [[T]] ) map . get ( key ) ; if ( [[val]] instanceof Map ) { return ( [[T]] ) new JsonObject ( ( Map ) [[val]] ) ; } if ( [[val]] instanceof List ) { return ( [[T]] ) new JsonArray ( ( List ) [[val]] ) ; } return [[val]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[your]] > [[your]] getValue ( final String key ) { [[your]] [[wahl]] = ( [[your]] ) map . get ( key ) ; if ( [[wahl]] instanceof Map ) { return ( [[your]] ) new JsonObject ( ( Map ) [[wahl]] ) ; } if ( [[wahl]] instanceof List ) { return ( [[your]] ) new JsonArray ( ( List ) [[wahl]] ) ; } return [[wahl]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .


--------------------------------------------- Result 898 ---------------------------------------------
Add a value to the JsonObject . --> Method that is responsible for rendering --> Socre: 1.0

[[[[Adv]]]]: public JsonObject [[put]] ( final String [[key]] , final String [[value]] ) { Objects . requireNonNull ( [[key]] ) ; map . put ( [[key]] , [[value]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject [[rendering]] ( final String [[imperative]] , final String [[priceless]] ) { Objects . requireNonNull ( [[imperative]] ) ; map . put ( [[imperative]] , [[priceless]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .


--------------------------------------------- Result 899 ---------------------------------------------
Use this method to open the specified folder . --> The mail with given installations --> Socre: 1.0

[[[[Adv]]]]: public void [[useFolder]] ( final String [[folderName]] ) { closeFolderIfOpened ( folder ) ; try { this . [[folderName]] = [[folderName]] ; this . folder = getService ( ) . getFolder ( [[folderName]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[folderName]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void [[milked]] ( final String [[installations]] ) { closeFolderIfOpened ( folder ) ; try { this . [[hydrophone]] = [[installations]] ; this . folder = getService ( ) . getFolder ( [[installations]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[installations]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .


--------------------------------------------- Result 900 ---------------------------------------------
Receive messages matching the specified filter . --> [[[FAILED]]]

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter [[filter]] , final Flags flagsToSet , final Flags flagsToUnset , final boolean [[envelope]] , final Consumer < Message [ ] > [[processedMessageConsumer]] ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] [[messages]] ; try { if ( [[filter]] == null ) { [[messages]] = folder . getMessages ( ) ; } else { [[messages]] = folder . search ( [[filter]] . getSearchTerm ( ) ) ; } if ( [[messages]] . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( [[envelope]] ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( [[messages]] , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] receiveMessages ( final EmailFilter [[sample]] , final Flags flagsToSet , final Flags flagsToUnset , final boolean [[stamped]] , final Consumer < Message [ ] > [[quayside]] ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] [[communicating]] ; try { if ( [[sample]] == null ) { [[communicating]] = folder . getMessages ( ) ; } else { [[communicating]] = folder . search ( [[sample]] . getSearchTerm ( ) ) ; } if ( [[communicating]] . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( [[stamped]] ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( [[communicating]] , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .


--------------------------------------------- Result 901 ---------------------------------------------
Updates the flags for the specified email . --> Called when a received message is received --> Socre: 1.0

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail [[receivedEmail]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[receivedEmail]] . messageNumber ( ) } , [[receivedEmail]] . flags ( ) , "[[True]]" == "[[True]]" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[canaries]] ( final ReceivedEmail [[alimentary]] ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { [[alimentary]] . messageNumber ( ) } , [[alimentary]] . flags ( ) , "[["Presentable" == "Presentable"]]" == "[["Presentable" == "Presentable"]]" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .


--------------------------------------------- Result 902 ---------------------------------------------
Closes the folder if it exists . --> Close the clipboard --> Socre: 1.0

[[[[Adv]]]]: protected void [[closeFolderIfOpened]] ( final Folder [[folder]] ) { if ( [[folder]] != null ) { try { [[folder]] . close ( True ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void [[convey]] ( final Folder [[clipboard]] ) { if ( [[clipboard]] != null ) { try { [[clipboard]] . close ( True ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .


--------------------------------------------- Result 903 ---------------------------------------------
Look up a named parameter . --> [[[FAILED]]]

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String [[name]] ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( [[name]] ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[liao]] ( final String [[alphabetically]] ) { DbQueryNamedParameter p = rootNP ; while ( p != null ) { if ( p . equalsName ( [[alphabetically]] ) ) { return p ; } p = p . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .


--------------------------------------------- Result 904 ---------------------------------------------
Create an alias for the target string . --> Helper method for aliases --> Socre: 1.0

[[[[Adv]]]]: protected String alias ( final String [[target]] ) { return StringPool . LEFT_CHEV . concat ( [[target]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String alias ( final String [[aim]] ) { return StringPool . LEFT_CHEV . concat ( [[aim]] ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .


--------------------------------------------- Result 905 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 567 / 320 / 18 / 905:  90%|█████████ | 905/1000 [5:45:56<36:18, 22.94s/it][Succeeded / Failed / Skipped / Total] 567 / 320 / 18 / 905:  91%|█████████ | 906/1000 [5:46:12<35:55, 22.93s/it][Succeeded / Failed / Skipped / Total] 567 / 321 / 18 / 906:  91%|█████████ | 906/1000 [5:46:12<35:55, 22.93s/it][Succeeded / Failed / Skipped / Total] 567 / 321 / 18 / 906:  91%|█████████ | 907/1000 [5:46:20<35:30, 22.91s/it][Succeeded / Failed / Skipped / Total] 568 / 321 / 18 / 907:  91%|█████████ | 907/1000 [5:46:20<35:30, 22.91s/it][Succeeded / Failed / Skipped / Total] 568 / 321 / 18 / 907:  91%|█████████ | 908/1000 [5:46:34<35:06, 22.90s/it][Succeeded / Failed / Skipped / Total] 569 / 321 / 18 / 908:  91%|█████████ | 908/1000 [5:46:34<35:06, 22.90s/it][Succeeded / Failed / Skipped / Total] 569 / 321 / 18 / 908:  91%|█████████ | 909/1000 [5:46:45<34:42, 22.89s/it][Succeeded / Failed / Skipped / Total] 569 / 322 / 18 / 909:  91%|█████████ | 909/1000 [5:46:45<34:42, 22.89s/it][Succeeded / Failed / Skipped / Total] 569 / 322 / 18 / 909:  91%|█████████ | 910/1000 [5:46:59<34:19, 22.88s/it][Succeeded / Failed / Skipped / Total] 570 / 322 / 18 / 910:  91%|█████████ | 910/1000 [5:46:59<34:19, 22.88s/it][Succeeded / Failed / Skipped / Total] 570 / 322 / 18 / 910:  91%|█████████ | 911/1000 [5:47:06<33:54, 22.86s/it][Succeeded / Failed / Skipped / Total] 571 / 322 / 18 / 911:  91%|█████████ | 911/1000 [5:47:06<33:54, 22.86s/it][Succeeded / Failed / Skipped / Total] 571 / 322 / 18 / 911:  91%|█████████ | 912/1000 [5:47:14<33:30, 22.84s/it][Succeeded / Failed / Skipped / Total] 571 / 323 / 18 / 912:  91%|█████████ | 912/1000 [5:47:14<33:30, 22.84s/it][Succeeded / Failed / Skipped / Total] 571 / 323 / 18 / 912:  91%|█████████▏| 913/1000 [5:47:29<33:06, 22.84s/it]Perform validation action . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[validateAction]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean [[apprised]] ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .


--------------------------------------------- Result 906 ---------------------------------------------
Adds a new violation . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addViolation]] ( final String [[name]] , final Object [[invalidValue]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[name]] , this , [[invalidValue]] ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void [[prescribe]] ( final String [[title]] , final Object [[barr]] ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[title]] , this , [[barr]] ) ) ; }
[[[[Nl]]]]: Adds action violation .


--------------------------------------------- Result 907 ---------------------------------------------
Sets the mime type . --> Sets the raw data . --> Socre: 1.0

[[[[Adv]]]]: public RawData as ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . [[mimeType]] = mimeOrExtension ; } else { this . [[mimeType]] = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData as ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . [[ahmad]] = mimeOrExtension ; } else { this . [[ahmad]] = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!


--------------------------------------------- Result 908 ---------------------------------------------
Sets the download file . --> Set guilme --> Socre: 1.0

[[[[Adv]]]]: public RawData [[downloadableAs]] ( final String downloadFileName ) { this . [[downloadFileName]] = downloadFileName ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData [[guilherme]] ( final String downloadFileName ) { this . [[inshore]] = downloadFileName ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( downloadFileName ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .


--------------------------------------------- Result 909 ---------------------------------------------
Sets target . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream [[target]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[target]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[florentino]] ( final InputStream [[intend]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[intend]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .


--------------------------------------------- Result 910 ---------------------------------------------
Sets target . --> Configures the motifs --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final String [[targetName]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[targetName]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[targetName]] ) ; } targetClassName = [[targetName]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[targetName]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[motifs]] ( final String [[condones]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[condones]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[condones]] ) ; } targetClassName = [[condones]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[condones]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!


--------------------------------------------- Result 911 ---------------------------------------------
Sets the target . --> Sets the awash --> Socre: 1.0

[[[[Adv]]]]: public T [[setTarget]] ( final Class target ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( target ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + target . getName ( ) ) ; } targetClass = target ; targetClassName = target . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + target . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[awash]] ( final Class target ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( target ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + target . getName ( ) ) ; } targetClass = target ; targetClassName = target . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + target . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .


--------------------------------------------- Result 912 ---------------------------------------------
This method should only be called once . --> [[[FAILED]]]

[[[[Adv]]]]: protected void process ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void process ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .


--------------------------------------------- Result 913 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 572 / 323 / 18 / 913:  91%|█████████▏| 913/1000 [5:47:29<33:06, 22.84s/it][Succeeded / Failed / Skipped / Total] 572 / 323 / 18 / 913:  91%|█████████▏| 914/1000 [5:47:54<32:44, 22.84s/it][Succeeded / Failed / Skipped / Total] 573 / 323 / 18 / 914:  91%|█████████▏| 914/1000 [5:47:54<32:44, 22.84s/it][Succeeded / Failed / Skipped / Total] 573 / 323 / 18 / 914:  92%|█████████▏| 915/1000 [5:48:11<32:20, 22.83s/it][Succeeded / Failed / Skipped / Total] 573 / 324 / 18 / 915:  92%|█████████▏| 915/1000 [5:48:11<32:20, 22.83s/it][Succeeded / Failed / Skipped / Total] 573 / 324 / 18 / 915:  92%|█████████▏| 916/1000 [5:48:18<31:56, 22.82s/it][Succeeded / Failed / Skipped / Total] 574 / 324 / 18 / 916:  92%|█████████▏| 916/1000 [5:48:18<31:56, 22.82s/it][Succeeded / Failed / Skipped / Total] 574 / 324 / 18 / 916:  92%|█████████▏| 917/1000 [5:48:26<31:32, 22.80s/it][Succeeded / Failed / Skipped / Total] 575 / 324 / 18 / 917:  92%|█████████▏| 917/1000 [5:48:26<31:32, 22.80s/it][Succeeded / Failed / Skipped / Total] 575 / 324 / 18 / 917:  92%|█████████▏| 918/1000 [5:48:45<31:09, 22.79s/it][Succeeded / Failed / Skipped / Total] 575 / 325 / 18 / 918:  92%|█████████▏| 918/1000 [5:48:45<31:09, 22.79s/it][Succeeded / Failed / Skipped / Total] 575 / 325 / 18 / 918:  92%|█████████▏| 919/1000 [5:48:51<30:44, 22.78s/it][Succeeded / Failed / Skipped / Total] 576 / 325 / 18 / 919:  92%|█████████▏| 919/1000 [5:48:51<30:44, 22.78s/it][Succeeded / Failed / Skipped / Total] 576 / 325 / 18 / 919:  92%|█████████▏| 920/1000 [5:48:59<30:20, 22.76s/it]Create the proxy . --> This method is used for debugging --> Socre: 1.0

[[[[Adv]]]]: public byte [ ] [[create]] ( ) { process ( ) ; byte [ ] [[result]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[result]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] [[develop]] ( ) { process ( ) ; byte [ ] [[achievements]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[achievements]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[achievements]] ; }
[[[[Nl]]]]: Returns byte array of created class .


--------------------------------------------- Result 914 ---------------------------------------------
Define the proxy . --> Performs the proxying --> Socre: 1.0

[[[[Adv]]]]: public Class [[define]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader [[classLoader]] = proxetta . getClassLoader ( ) ; if ( [[classLoader]] == null ) { [[classLoader]] = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( [[classLoader]] == null ) && ( targetClass != null ) ) { [[classLoader]] = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , [[classLoader]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class [[predicate]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader [[gardner]] = proxetta . getClassLoader ( ) ; if ( [[gardner]] == null ) { [[gardner]] = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( [[gardner]] == null ) && ( targetClass != null ) ) { [[gardner]] = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , [[gardner]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .


--------------------------------------------- Result 915 ---------------------------------------------
Creates a new proxy instance . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class [[type]] = define ( ) ; try { return ClassUtil . newInstance ( [[type]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[casters]] ( ) { Class [[boyfriend]] = define ( ) ; try { return ClassUtil . newInstance ( [[boyfriend]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .


--------------------------------------------- Result 916 ---------------------------------------------
Writes a class file in debug folder . --> Write rhs in debug mode --> Socre: 1.0

[[[[Adv]]]]: protected void [[dumpClassInDebugFolder]] ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void [[rhymes]] ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String fileName = proxyClassName ; if ( fileName == null ) { fileName = "proxetta-" + System . currentTimeMillis ( ) ; } fileName += ".class" ; File file = new File ( debugFolder , fileName ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .


--------------------------------------------- Result 917 ---------------------------------------------
Set the from address . --> Create aliph - mail --> Socre: 1.0

[[[[Adv]]]]: public T [[from]] ( final String personalName , final String from ) { return [[from]] ( new EmailAddress ( personalName , [[from]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T [[al]] ( final String personalName , final String from ) { return [[al]] ( new EmailAddress ( personalName , [[al]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .


--------------------------------------------- Result 918 ---------------------------------------------
Sets the recipient address . --> [[[FAILED]]]

[[[[Adv]]]]: public T [[to]] ( final EmailAddress to ) { this . [[to]] = ArraysUtil . append ( this . [[to]] , [[to]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T [[about]] ( final EmailAddress to ) { this . [[about]] = ArraysUtil . append ( this . [[about]] , [[about]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .


--------------------------------------------- Result 919 ---------------------------------------------
Add a recipient to the recipient --> Add a recipient person --> Socre: 1.0

[[[[Adv]]]]: public T to ( final String personalName , final String [[to]] ) { return to ( new EmailAddress ( personalName , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T to ( final String personalName , final String [[between]] ) { return to ( new EmailAddress ( personalName , to ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .


--------------------------------------------- Result 920 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 577 / 325 / 18 / 920:  92%|█████████▏| 920/1000 [5:48:59<30:20, 22.76s/it][Succeeded / Failed / Skipped / Total] 577 / 325 / 18 / 920:  92%|█████████▏| 921/1000 [5:49:20<29:57, 22.76s/it][Succeeded / Failed / Skipped / Total] 578 / 325 / 18 / 921:  92%|█████████▏| 921/1000 [5:49:20<29:57, 22.76s/it][Succeeded / Failed / Skipped / Total] 578 / 325 / 18 / 921:  92%|█████████▏| 922/1000 [5:49:35<29:34, 22.75s/it][Succeeded / Failed / Skipped / Total] 579 / 325 / 18 / 922:  92%|█████████▏| 922/1000 [5:49:35<29:34, 22.75s/it][Succeeded / Failed / Skipped / Total] 579 / 325 / 18 / 922:  92%|█████████▏| 923/1000 [5:49:59<29:11, 22.75s/it][Succeeded / Failed / Skipped / Total] 580 / 325 / 18 / 923:  92%|█████████▏| 923/1000 [5:49:59<29:11, 22.75s/it][Succeeded / Failed / Skipped / Total] 580 / 325 / 18 / 923:  92%|█████████▏| 924/1000 [5:50:13<28:48, 22.74s/it][Succeeded / Failed / Skipped / Total] 581 / 325 / 18 / 924:  92%|█████████▏| 924/1000 [5:50:13<28:48, 22.74s/it][Succeeded / Failed / Skipped / Total] 581 / 325 / 18 / 924:  92%|█████████▎| 925/1000 [5:50:48<28:26, 22.75s/it][Succeeded / Failed / Skipped / Total] 582 / 325 / 18 / 925:  92%|█████████▎| 925/1000 [5:50:48<28:26, 22.75s/it][Succeeded / Failed / Skipped / Total] 582 / 325 / 18 / 925:  93%|█████████▎| 926/1000 [5:51:11<28:03, 22.76s/it][Succeeded / Failed / Skipped / Total] 583 / 325 / 18 / 926:  93%|█████████▎| 926/1000 [5:51:11<28:03, 22.76s/it][Succeeded / Failed / Skipped / Total] 583 / 325 / 18 / 926:  93%|█████████▎| 927/1000 [5:51:54<27:42, 22.78s/it][Succeeded / Failed / Skipped / Total] 583 / 326 / 18 / 927:  93%|█████████▎| 927/1000 [5:51:54<27:42, 22.78s/it][Succeeded / Failed / Skipped / Total] 583 / 326 / 18 / 927:  93%|█████████▎| 928/1000 [5:52:22<27:20, 22.78s/it][Succeeded / Failed / Skipped / Total] 584 / 326 / 18 / 928:  93%|█████████▎| 928/1000 [5:52:22<27:20, 22.78s/it][Succeeded / Failed / Skipped / Total] 584 / 326 / 18 / 928:  93%|█████████▎| 929/1000 [5:52:33<26:56, 22.77s/it]Sets the replyTo addresses . --> Set the email address --> Socre: 1.0

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[replyTo]] = ArraysUtil . join ( this . [[replyTo]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T REPLACEME0 ( final EmailAddress ... REPLACEME0 ) { this . [[overdosing]] = ArraysUtil . join ( this . [[overdosing]] , valueOrEmptyArray ( REPLACEME0 ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .


--------------------------------------------- Result 921 ---------------------------------------------
Sets the cc recipient address . --> Set a new Email Address --> Socre: 1.0

[[[[Adv]]]]: public T [[cc]] ( final EmailAddress ... ccs ) { this . [[cc]] = ArraysUtil . join ( this . [[cc]] , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T [[kt]] ( final EmailAddress ... ccs ) { this . [[ll]] = ArraysUtil . join ( this . [[ll]] , valueOrEmptyArray ( ccs ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .


--------------------------------------------- Result 922 ---------------------------------------------
Adds a text message to the email . --> Sets the author of the author --> Socre: 1.0

[[[[Adv]]]]: public T [[textMessage]] ( final String [[text]] , final String encoding ) { return message ( new EmailMessage ( [[text]] , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[artis]] ( final String [[authored]] , final String encoding ) { return message ( new EmailMessage ( [[authored]] , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .


--------------------------------------------- Result 923 ---------------------------------------------
Create a new email message with the specified encoding . --> Add an email to the recipient --> Socre: 1.0

[[[[Adv]]]]: public T [[htmlMessage]] ( final String [[html]] , final String [[encoding]] ) { return message ( new EmailMessage ( [[html]] , MimeTypes . MIME_TEXT_HTML , [[encoding]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[backyard]] ( final String [[format]] , final String [[harsh]] ) { return message ( new EmailMessage ( [[format]] , MimeTypes . MIME_TEXT_HTML , [[harsh]] ) ) ; }
[[[[Nl]]]]: Adds HTML message .


--------------------------------------------- Result 924 ---------------------------------------------
Adds a header to the response . --> Adds a headline to the response --> Socre: 1.0

[[[[Adv]]]]: public T [[header]] ( final String name , final String [[value]] ) { headers . put ( name , [[value]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[headline]] ( final String name , final String [[priceless]] ) { headers . put ( name , [[priceless]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .


--------------------------------------------- Result 925 ---------------------------------------------
Get the value of the property --> Retrieves a noun for a given noun --> Socre: 1.0

[[[[Adv]]]]: public static String get ( final String [[name]] , final String [[defaultValue]] ) { Objects . requireNonNull ( [[name]] ) ; String [[value]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[value]] = System . getProperty ( [[name]] ) ; } else { [[value]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[name]] ) ) ; } } catch ( Exception ignore ) { } if ( [[value]] == null ) { return [[defaultValue]] ; } return [[value]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String get ( final String [[noun]] , final String [[cube]] ) { Objects . requireNonNull ( [[noun]] ) ; String [[assessment]] = null ; try { if ( System . getSecurityManager ( ) == null ) { [[assessment]] = System . getProperty ( [[noun]] ) ; } else { [[assessment]] = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[noun]] ) ) ; } } catch ( Exception ignore ) { } if ( [[assessment]] == null ) { return [[cube]] ; } return [[assessment]] ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .


--------------------------------------------- Result 926 ---------------------------------------------
Gets a boolean property . --> Parses the value of the parameter --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[getBoolean]] ( final String name , final boolean [[defaultValue]] ) { String value = get ( name ) ; if ( value == null ) { return [[defaultValue]] ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return True ; case "false" : case "no" : case "0" : case "off" : return False ; default : return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean [[masuda]] ( final String name , final boolean [[barolo]] ) { String value = get ( name ) ; if ( value == null ) { return [[barolo]] ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return True ; case "false" : case "no" : case "0" : case "off" : return False ; default : return [[barolo]] ; } }
[[[[Nl]]]]: Returns system property as boolean .


--------------------------------------------- Result 927 ---------------------------------------------
Returns the integer value for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public static long getInt ( final String [[name]] , final int defaultValue ) { String value = get ( [[name]] ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long getInt ( final String [[designate]] , final int defaultValue ) { String value = get ( [[designate]] ) ; if ( value == null ) { return defaultValue ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( value ) ; } catch ( NumberFormatException nfex ) { return defaultValue ; } }
[[[[Nl]]]]: Returns system property as an int .


--------------------------------------------- Result 928 ---------------------------------------------
Returns the long value . --> Get the badge for the given name --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLong]] ( final String name , final long [[defaultValue]] ) { String [[value]] = get ( name ) ; if ( [[value]] == null ) { return [[defaultValue]] ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[encircling]] ( final String name , final long [[colburn]] ) { String [[rating]] = get ( name ) ; if ( [[rating]] == null ) { return [[colburn]] ; } [[rating]] = [[rating]] . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( [[rating]] ) ; } catch ( NumberFormatException nfex ) { return [[colburn]] ; } }
[[[[Nl]]]]: Returns system property as a long .


--------------------------------------------- Result 929 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 584 / 327 / 18 / 929:  93%|█████████▎| 929/1000 [5:52:33<26:56, 22.77s/it][Succeeded / Failed / Skipped / Total] 584 / 327 / 18 / 929:  93%|█████████▎| 930/1000 [5:52:58<26:34, 22.77s/it][Succeeded / Failed / Skipped / Total] 585 / 327 / 18 / 930:  93%|█████████▎| 930/1000 [5:52:58<26:34, 22.77s/it][Succeeded / Failed / Skipped / Total] 585 / 327 / 18 / 930:  93%|█████████▎| 931/1000 [5:53:19<26:11, 22.77s/it][Succeeded / Failed / Skipped / Total] 586 / 327 / 18 / 931:  93%|█████████▎| 931/1000 [5:53:19<26:11, 22.77s/it][Succeeded / Failed / Skipped / Total] 586 / 327 / 18 / 931:  93%|█████████▎| 932/1000 [5:53:55<25:49, 22.79s/it][Succeeded / Failed / Skipped / Total] 587 / 327 / 18 / 932:  93%|█████████▎| 932/1000 [5:53:55<25:49, 22.79s/it][Succeeded / Failed / Skipped / Total] 587 / 327 / 18 / 932:  93%|█████████▎| 933/1000 [5:54:29<25:27, 22.80s/it][Succeeded / Failed / Skipped / Total] 588 / 327 / 18 / 933:  93%|█████████▎| 933/1000 [5:54:29<25:27, 22.80s/it][Succeeded / Failed / Skipped / Total] 588 / 327 / 18 / 933:  93%|█████████▎| 934/1000 [5:54:59<25:05, 22.80s/it][Succeeded / Failed / Skipped / Total] 589 / 327 / 18 / 934:  93%|█████████▎| 934/1000 [5:54:59<25:05, 22.80s/it][Succeeded / Failed / Skipped / Total] 589 / 327 / 18 / 934:  94%|█████████▎| 935/1000 [5:55:24<24:42, 22.81s/it][Succeeded / Failed / Skipped / Total] 590 / 327 / 18 / 935:  94%|█████████▎| 935/1000 [5:55:24<24:42, 22.81s/it][Succeeded / Failed / Skipped / Total] 590 / 327 / 18 / 935:  94%|█████████▎| 936/1000 [5:55:47<24:19, 22.81s/it][Succeeded / Failed / Skipped / Total] 590 / 328 / 18 / 936:  94%|█████████▎| 936/1000 [5:55:47<24:19, 22.81s/it][Succeeded / Failed / Skipped / Total] 590 / 328 / 18 / 936:  94%|█████████▎| 937/1000 [5:56:11<23:56, 22.81s/it][Succeeded / Failed / Skipped / Total] 590 / 329 / 18 / 937:  94%|█████████▎| 937/1000 [5:56:11<23:56, 22.81s/it][Succeeded / Failed / Skipped / Total] 590 / 329 / 18 / 937:  94%|█████████▍| 938/1000 [5:56:34<23:34, 22.81s/it]Gets the resolved parameters . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[clapham]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .


--------------------------------------------- Result 930 ---------------------------------------------
Serialize key value pair . --> Helper method to add arrays --> Socre: 1.0

[[[[Adv]]]]: protected int [[serializeKeyValue]] ( final JsonContext [[jsonContext]] , final Path currentPath , final Object key , final Object value , int count ) { if ( ( value == null ) && [[jsonContext]] . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int [[arrays]] ( final JsonContext [[amina]] , final Path currentPath , final Object key , final Object value , int count ) { if ( ( value == null ) && [[amina]] . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .


--------------------------------------------- Result 931 ---------------------------------------------
Lookup a path alias by its alias . --> This method tries to identify the poisonier --> Socre: 1.0

[[[[Adv]]]]: protected String [[lookupAlias]] ( final String [[alias]] ) { String value = actionsManager . lookupPathAlias ( [[alias]] ) ; if ( value == null ) { ActionRuntime cfg = actionsManager . lookup ( [[alias]] ) ; if ( cfg != null ) { value = cfg . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String [[bloodier]] ( final String [[counterfeit]] ) { String value = actionsManager . lookupPathAlias ( [[counterfeit]] ) ; if ( value == null ) { ActionRuntime cfg = actionsManager . lookup ( [[counterfeit]] ) ; if ( cfg != null ) { value = cfg . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .


--------------------------------------------- Result 932 ---------------------------------------------
Resolve alias . --> Calculate the airlock --> Socre: 1.0

[[[[Adv]]]]: protected String [[resolveAlias]] ( final String [[value]] ) { final StringBuilder [[result]] = new StringBuilder ( [[value]] . length ( ) ) ; int i = 0 ; int len = [[value]] . length ( ) ; while ( i < len ) { int ndx = [[value]] . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String [[airlock]] ( final String [[valuation]] ) { final StringBuilder [[stemming]] = new StringBuilder ( [[valuation]] . length ( ) ) ; int i = 0 ; int len = [[valuation]] . length ( ) ; while ( i < len ) { int ndx = [[valuation]] . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .


--------------------------------------------- Result 933 ---------------------------------------------
Resolves a path . --> Exclude oez and importance --> Socre: 1.0

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String path , String [[value]] ) { boolean [[absolutePath]] = False ; if ( [[value]] != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[oyez]] ( String path , String [[importance]] ) { boolean [[adolphus]] = False ; if ( [[importance]] != null ) {
[[[[Nl]]]]: Resolves result path .


--------------------------------------------- Result 934 ---------------------------------------------
Resolve the result path with the given path and value . --> This method implements the interface --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String [[path]] , final String value ) { final ResultPath resultPath = resolveResultPath ( [[path]] , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[adolescents]] ( final String [[tract]] , final String value ) { final ResultPath resultPath = resolveResultPath ( [[tract]] , value ) ; final String result = resultPath . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .


--------------------------------------------- Result 935 ---------------------------------------------
Returns the index of the last dot in the given string . --> Hitching character --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String str ) { int [[slashNdx]] = str . lastIndexOf ( ' ' ) ; int [[dotNdx]] = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , [[slashNdx]] ) ; if ( [[dotNdx]] == - 1 ) { if ( [[slashNdx]] == - 1 ) { return - 1 ; } [[slashNdx]] ++ ; if ( [[slashNdx]] < str . length ( ) - 1 ) { [[dotNdx]] = [[slashNdx]] ; } else { [[dotNdx]] = - 1 ; } } return [[dotNdx]] ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[hitching]] ( final String str ) { int [[pers]] = str . lastIndexOf ( ' ' ) ; int [[downfall]] = StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , [[pers]] ) ; if ( [[downfall]] == - 1 ) { if ( [[pers]] == - 1 ) { return - 1 ; } [[pers]] ++ ; if ( [[pers]] < str . length ( ) - 1 ) { [[downfall]] = [[pers]] ; } else { [[downfall]] = - 1 ; } } return [[downfall]] ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .


--------------------------------------------- Result 936 ---------------------------------------------
Returns the last index of the last dot after the given string . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[antifascist]] ( final String str ) { int slashNdx = str . lastIndexOf ( ' ' ) ; slashNdx ++ ; return StringUtil . lastIndexOf ( str , ' ' , str . length ( ) , slashNdx ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .


--------------------------------------------- Result 937 ---------------------------------------------
Returns the index of the first dot after dot . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[indexOfDotAfterSlash]] ( final String [[str]] ) { int [[slashNdx]] = [[str]] . lastIndexOf ( ' ' ) ; if ( [[slashNdx]] == - 1 ) { [[slashNdx]] = 0 ; } return [[str]] . indexOf ( ' ' , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int [[riverdance]] ( final String [[its]] ) { int [[influenza]] = [[its]] . lastIndexOf ( ' ' ) ; if ( [[influenza]] == - 1 ) { [[influenza]] = 0 ; } return [[its]] . indexOf ( ' ' , [[influenza]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .


[Succeeded / Failed / Skipped / Total] 591 / 329 / 18 / 938:  94%|█████████▍| 938/1000 [5:56:34<23:34, 22.81s/it][Succeeded / Failed / Skipped / Total] 591 / 329 / 18 / 938:  94%|█████████▍| 939/1000 [5:57:10<23:12, 22.82s/it][Succeeded / Failed / Skipped / Total] 591 / 330 / 18 / 939:  94%|█████████▍| 939/1000 [5:57:10<23:12, 22.82s/it][Succeeded / Failed / Skipped / Total] 591 / 330 / 18 / 939:  94%|█████████▍| 940/1000 [5:58:21<22:52, 22.87s/it][Succeeded / Failed / Skipped / Total] 591 / 331 / 18 / 940:  94%|█████████▍| 940/1000 [5:58:21<22:52, 22.87s/it][Succeeded / Failed / Skipped / Total] 591 / 331 / 18 / 940:  94%|█████████▍| 941/1000 [5:58:36<22:29, 22.87s/it][Succeeded / Failed / Skipped / Total] 592 / 331 / 18 / 941:  94%|█████████▍| 941/1000 [5:58:36<22:29, 22.87s/it][Succeeded / Failed / Skipped / Total] 592 / 331 / 18 / 941:  94%|█████████▍| 942/1000 [5:58:52<22:05, 22.86s/it][Succeeded / Failed / Skipped / Total] 593 / 331 / 18 / 942:  94%|█████████▍| 942/1000 [5:58:52<22:05, 22.86s/it][Succeeded / Failed / Skipped / Total] 593 / 331 / 18 / 942:  94%|█████████▍| 943/1000 [5:59:00<21:42, 22.84s/it][Succeeded / Failed / Skipped / Total] 594 / 331 / 18 / 943:  94%|█████████▍| 943/1000 [5:59:00<21:42, 22.84s/it][Succeeded / Failed / Skipped / Total] 594 / 331 / 18 / 943:  94%|█████████▍| 944/1000 [5:59:07<21:18, 22.83s/it][Succeeded / Failed / Skipped / Total] 595 / 331 / 18 / 944:  94%|█████████▍| 944/1000 [5:59:07<21:18, 22.83s/it][Succeeded / Failed / Skipped / Total] 595 / 331 / 18 / 944:  94%|█████████▍| 945/1000 [5:59:37<20:55, 22.83s/it][Succeeded / Failed / Skipped / Total] 596 / 331 / 18 / 945:  94%|█████████▍| 945/1000 [5:59:37<20:55, 22.83s/it][Succeeded / Failed / Skipped / Total] 596 / 331 / 18 / 945:  95%|█████████▍| 946/1000 [6:00:06<20:33, 22.84s/it][Succeeded / Failed / Skipped / Total] 597 / 331 / 18 / 946:  95%|█████████▍| 946/1000 [6:00:06<20:33, 22.84s/it][Succeeded / Failed / Skipped / Total] 597 / 331 / 18 / 946:  95%|█████████▍| 947/1000 [6:00:22<20:10, 22.83s/it]--------------------------------------------- Result 938 ---------------------------------------------
Strip the last camel word from the given name . --> Remove beat letter --> Socre: 1.0

[[[[Adv]]]]: public static String [[stripLastCamelWord]] ( String [[name]] ) { int ndx = [[name]] . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( [[name]] . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { [[name]] = [[name]] . substring ( 0 , ndx ) ; } return [[name]] ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String [[beats]] ( String [[appoints]] ) { int ndx = [[appoints]] . length ( ) - 1 ; while ( ndx >= 0 ) { if ( CharUtil . isUppercaseAlpha ( [[appoints]] . charAt ( ndx ) ) ) { break ; } ndx -- ; } if ( ndx >= 0 ) { [[appoints]] = [[appoints]] . substring ( 0 , ndx ) ; } return [[appoints]] ; }
[[[[Nl]]]]: Removes last CamelWord


--------------------------------------------- Result 939 ---------------------------------------------
Resolves the schema name . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[resolveSchemaName]] ( final Class < ? > type , final String defaultSchemaName ) { String [[schemaName]] = null ; final DbTable dbTable = type . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[schemaName]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[schemaName]] == null ) || ( [[schemaName]] . length ( ) == 0 ) ) { [[schemaName]] = defaultSchemaName ; } return [[schemaName]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String [[patient]] ( final Class < ? > type , final String defaultSchemaName ) { String [[bartered]] = null ; final DbTable dbTable = type . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { [[bartered]] = dbTable . schema ( ) . trim ( ) ; } if ( ( [[bartered]] == null ) || ( [[bartered]] . length ( ) == 0 ) ) { [[bartered]] = defaultSchemaName ; } return [[bartered]] ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .


--------------------------------------------- Result 940 ---------------------------------------------
Resolve column descriptors --> [[[FAILED]]]

[[[[Adv]]]]: public static DbEntityColumnDescriptor resolveColumnDescriptors ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = False ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor resolveColumnDescriptors ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = False ; Class < ? extends SqlType > sqlTypeClass = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .


--------------------------------------------- Result 941 ---------------------------------------------
Initializes the sketch with the given key and tweak . --> Fonacci optimization --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final long [ ] [[key]] , final long [ ] tweak ) { final int newNw = [[key]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void [[fon]] ( final long [ ] [[necessities]] , final long [ ] tweak ) { final int newNw = [[necessities]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .


--------------------------------------------- Result 942 ---------------------------------------------
Multiplies x . --> Checks to see if there is at a given position --> Socre: 1.0

[[[[Adv]]]]: private void [[mix]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long [[rotl]] = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void [[assay]] ( final int j , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long [[geoengineering]] = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the MIX function .


--------------------------------------------- Result 943 ---------------------------------------------
Performs demix transformation . --> Copied from j --> Socre: 1.0

[[[[Adv]]]]: private void [[demix]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void [[cubed]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .


--------------------------------------------- Result 944 ---------------------------------------------
Schedule key schedule . --> Schedule key schedule --> Socre: 1.0

[[[[Adv]]]]: private void keySchedule ( final int s ) { for ( int [[i]] = 0 ; [[i]] < nw ; [[i]] ++ ) {
[[[[Nl]]]]: Creates the subkeys .

[[[[Adv]]]]: private void keySchedule ( final int s ) { for ( int [[li]] = 0 ; [[li]] < nw ; [[li]] ++ ) {
[[[[Nl]]]]: Creates the subkeys .


--------------------------------------------- Result 945 ---------------------------------------------
Initializes the message with the specified key message . --> Initialize with key message and tweak --> Socre: 1.0

[[[[Adv]]]]: public void init ( final String keyMessage , final long tweak1 , final long tweak2 ) { long [ ] [[tweak]] = new long [ ] { tweak1 , tweak2 } ; byte [ ] [[key]] = new byte [ blockSize / Byte . SIZE ] ; byte [ ] [[keyData]] = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( [[keyData]] , 0 , [[key]] , 0 , [[key]] . length < [[keyData]] . length ? [[key]] . length : [[keyData]] . length ) ; init ( bytesToLongs ( [[key]] ) , [[tweak]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void init ( final String keyMessage , final long tweak1 , final long tweak2 ) { long [ ] [[realign]] = new long [ ] { tweak1 , tweak2 } ; byte [ ] [[essentials]] = new byte [ blockSize / Byte . SIZE ] ; byte [ ] [[morass]] = StringUtil . getBytes ( keyMessage ) ; System . arraycopy ( [[morass]] , 0 , [[essentials]] , 0 , [[essentials]] . length < [[morass]] . length ? [[essentials]] . length : [[morass]] . length ) ; init ( bytesToLongs ( [[essentials]] ) , [[realign]] ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .


--------------------------------------------- Result 946 ---------------------------------------------
Encrypt a block --> Encrypt the given material --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[encryptBlock]] ( final byte [ ] [[content]] , final int [[offset]] ) { long [ ] contentBlock = bytesToLongs ( [[content]] , [[offset]] , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] [[huckleberry]] ( final byte [ ] [[material]] , final int [[overstep]] ) { long [ ] contentBlock = bytesToLongs ( [[material]] , [[overstep]] , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( contentBlock , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .


--------------------------------------------- Result 947 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 598 / 331 / 18 / 947:  95%|█████████▍| 947/1000 [6:00:22<20:10, 22.83s/it][Succeeded / Failed / Skipped / Total] 598 / 331 / 18 / 947:  95%|█████████▍| 948/1000 [6:00:30<19:46, 22.82s/it][Succeeded / Failed / Skipped / Total] 599 / 331 / 18 / 948:  95%|█████████▍| 948/1000 [6:00:30<19:46, 22.82s/it][Succeeded / Failed / Skipped / Total] 599 / 331 / 18 / 948:  95%|█████████▍| 949/1000 [6:00:37<19:22, 22.80s/it][Succeeded / Failed / Skipped / Total] 600 / 331 / 18 / 949:  95%|█████████▍| 949/1000 [6:00:37<19:22, 22.80s/it][Succeeded / Failed / Skipped / Total] 600 / 331 / 18 / 949:  95%|█████████▌| 950/1000 [6:00:43<18:59, 22.78s/it][Succeeded / Failed / Skipped / Total] 601 / 331 / 18 / 950:  95%|█████████▌| 950/1000 [6:00:43<18:59, 22.78s/it][Succeeded / Failed / Skipped / Total] 601 / 331 / 18 / 950:  95%|█████████▌| 951/1000 [6:01:08<18:36, 22.79s/it][Succeeded / Failed / Skipped / Total] 602 / 331 / 18 / 951:  95%|█████████▌| 951/1000 [6:01:08<18:36, 22.79s/it][Succeeded / Failed / Skipped / Total] 602 / 331 / 18 / 951:  95%|█████████▌| 952/1000 [6:01:16<18:12, 22.77s/it][Succeeded / Failed / Skipped / Total] 603 / 331 / 18 / 952:  95%|█████████▌| 952/1000 [6:01:16<18:12, 22.77s/it][Succeeded / Failed / Skipped / Total] 603 / 331 / 18 / 952:  95%|█████████▌| 953/1000 [6:01:25<17:49, 22.76s/it][Succeeded / Failed / Skipped / Total] 604 / 331 / 18 / 953:  95%|█████████▌| 953/1000 [6:01:25<17:49, 22.76s/it][Succeeded / Failed / Skipped / Total] 604 / 331 / 18 / 953:  95%|█████████▌| 954/1000 [6:01:58<17:27, 22.77s/it]Convert a byte array to a long array . --> Determines depravity --> Socre: 1.0

[[[[Adv]]]]: protected static long [ ] [[bytesToLongs]] ( final byte [ ] ba , final int [[offset]] , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = [[offset]] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] [[depravity]] ( final byte [ ] ba , final int [[compensated]] , final int size ) { long [ ] result = new long [ size >> 3 ] ; int i8 = [[compensated]] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .


--------------------------------------------- Result 948 ---------------------------------------------
Remove any bounding box . --> Returns alphanumeric --> Socre: 1.0

[[[[Adv]]]]: private static String [[removeAnyBounding]] ( final char s , final char e , final String str ) { if ( str == null || str . length ( ) < 2 ) { return str ; } if ( str . startsWith ( String . valueOf ( s ) ) && str . endsWith ( String . valueOf ( e ) ) ) { return str . substring ( 1 , str . length ( ) - 1 ) ; } return str ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String [[alameda]] ( final char s , final char e , final String str ) { if ( str == null || str . length ( ) < 2 ) { return str ; } if ( str . startsWith ( String . valueOf ( s ) ) && str . endsWith ( String . valueOf ( e ) ) ) { return str . substring ( 1 , str . length ( ) - 1 ) ; } return str ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .


--------------------------------------------- Result 949 ---------------------------------------------
Returns the path . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[tract]] ( ) { if ( methref != null ) { final String methodName = methref . ref ( ) ; return target . getName ( ) + ' ' + methodName ; } return [[tract]] ; }
[[[[Nl]]]]: Returns path value .


--------------------------------------------- Result 950 ---------------------------------------------
Zips a file --> Zips the specified archives --> Socre: 1.0

[[[[Adv]]]]: public static File zlib ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = [[file]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File zlib ( final File [[archives]] ) throws IOException { if ( [[archives]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( [[archives]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = [[archives]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .


--------------------------------------------- Result 951 ---------------------------------------------
Gzip a file --> Gzipped room --> Socre: 1.0

[[[[Adv]]]]: public static File [[gzip]] ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream [[fis]] = new FileInputStream ( [[file]] ) ; String gzipName = [[file]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( [[fis]] , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( [[fis]] ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File [[billings]] ( final File [[lodging]] ) throws IOException { if ( [[lodging]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream [[acp]] = new FileInputStream ( [[lodging]] ) ; String gzipName = [[lodging]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( gzipName ) ) ; try { StreamUtil . copy ( [[acp]] , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( [[acp]] ) ; } return new File ( gzipName ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .


--------------------------------------------- Result 952 ---------------------------------------------
Ungzipped file . --> Translates a file --> Socre: 1.0

[[[[Adv]]]]: public static File [[ungzip]] ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File [[bartolo]] ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File out = new File ( outFileName ) ; out . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( out ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return out ; }
[[[[Nl]]]]: Decompress gzip archive .


--------------------------------------------- Result 953 ---------------------------------------------
Lists all entries in a zip file . --> List all entries in a directory --> Socre: 1.0

[[[[Adv]]]]: public static List < String > listZip ( final File [[zipFile]] ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[zipFile]] ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; entries . add ( entryName ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > listZip ( final File [[vented]] ) throws IOException { List < String > entries = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( [[vented]] ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry entry = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = entry . getName ( ) ; entries . add ( entryName ) ; } return Collections . unmodifiableList ( entries ) ; }
[[[[Nl]]]]: Lists zip content .


--------------------------------------------- Result 954 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 604 / 332 / 18 / 954:  95%|█████████▌| 954/1000 [6:01:58<17:27, 22.77s/it][Succeeded / Failed / Skipped / Total] 604 / 332 / 18 / 954:  96%|█████████▌| 955/1000 [6:02:06<17:03, 22.75s/it][Succeeded / Failed / Skipped / Total] 605 / 332 / 18 / 955:  96%|█████████▌| 955/1000 [6:02:06<17:03, 22.75s/it][Succeeded / Failed / Skipped / Total] 605 / 332 / 18 / 955:  96%|█████████▌| 956/1000 [6:02:46<16:41, 22.77s/it][Succeeded / Failed / Skipped / Total] 606 / 332 / 18 / 956:  96%|█████████▌| 956/1000 [6:02:46<16:41, 22.77s/it][Succeeded / Failed / Skipped / Total] 606 / 332 / 18 / 956:  96%|█████████▌| 957/1000 [6:03:30<16:19, 22.79s/it][Succeeded / Failed / Skipped / Total] 606 / 333 / 18 / 957:  96%|█████████▌| 957/1000 [6:03:30<16:19, 22.79s/it][Succeeded / Failed / Skipped / Total] 606 / 333 / 18 / 957:  96%|█████████▌| 958/1000 [6:04:10<15:57, 22.81s/it][Succeeded / Failed / Skipped / Total] 606 / 334 / 18 / 958:  96%|█████████▌| 958/1000 [6:04:10<15:57, 22.81s/it][Succeeded / Failed / Skipped / Total] 606 / 334 / 18 / 958:  96%|█████████▌| 959/1000 [6:04:37<15:35, 22.81s/it][Succeeded / Failed / Skipped / Total] 606 / 335 / 18 / 959:  96%|█████████▌| 959/1000 [6:04:37<15:35, 22.81s/it][Succeeded / Failed / Skipped / Total] 606 / 335 / 18 / 959:  96%|█████████▌| 960/1000 [6:05:10<15:12, 22.82s/it][Succeeded / Failed / Skipped / Total] 607 / 335 / 18 / 960:  96%|█████████▌| 960/1000 [6:05:10<15:12, 22.82s/it][Succeeded / Failed / Skipped / Total] 607 / 335 / 18 / 960:  96%|█████████▌| 961/1000 [6:05:29<14:49, 22.82s/it]Unzip a zip file --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[unzip]] ( final String zipFile , final String destDir , final String ... patterns ) throws IOException { [[unzip]] ( new File ( zipFile ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void [[laze]] ( final String zipFile , final String destDir , final String ... patterns ) throws IOException { [[laze]] ( new File ( zipFile ) , new File ( destDir ) , patterns ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .


--------------------------------------------- Result 955 ---------------------------------------------
Adds the given file to the ZIP output stream . --> Dump a file --> Socre: 1.0

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[détente]] ( final ZipOutputStream zos , final File file , String path , final String comment , final boolean recursive ) throws IOException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . toString ( ) ) ; } if ( path == null ) { path = file . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean isDir = file . isDirectory ( ) ; if ( isDir ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .


--------------------------------------------- Result 956 ---------------------------------------------
Adds content to a ZIP output stream . --> Polyline polygon --> Socre: 1.0

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream [[zos]] , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry [[zipEntry]] = new ZipEntry ( path ) ; [[zipEntry]] . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { [[zipEntry]] . setComment ( comment ) ; } [[zos]] . putNextEntry ( [[zipEntry]] ) ; InputStream [[is]] = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( [[is]] , [[zos]] ) ; } finally { StreamUtil . close ( [[is]] ) ; } [[zos]] . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void [[polythene]] ( final ZipOutputStream [[rationale]] , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry [[revolutionise]] = new ZipEntry ( path ) ; [[revolutionise]] . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { [[revolutionise]] . setComment ( comment ) ; } [[rationale]] . putNextEntry ( [[revolutionise]] ) ; InputStream [[becoming]] = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( [[becoming]] , [[rationale]] ) ; } finally { StreamUtil . close ( [[becoming]] ) ; } [[rationale]] . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .


--------------------------------------------- Result 957 ---------------------------------------------
Returns the field descriptor for the specified name . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [[getFieldDescriptor]] ( final String [[name]] , final boolean [[declared]] ) { final FieldDescriptor [[fieldDescriptor]] = getFields ( ) . getFieldDescriptor ( [[name]] ) ; if ( [[fieldDescriptor]] != null ) { if ( ! [[fieldDescriptor]] . matchDeclared ( [[declared]] ) ) { return null ; } } return [[fieldDescriptor]] ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor [[notches]] ( final String [[nom]] , final boolean [[commented]] ) { final FieldDescriptor [[experiment]] = getFields ( ) . getFieldDescriptor ( [[nom]] ) ; if ( [[experiment]] != null ) { if ( ! [[experiment]] . matchDeclared ( [[commented]] ) ) { return null ; } } return [[experiment]] ; }
[[[[Nl]]]]: Returns field descriptor .


--------------------------------------------- Result 958 ---------------------------------------------
Returns the property descriptor with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String name , final boolean declared ) { PropertyDescriptor [[propertyDescriptor]] = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( [[propertyDescriptor]] != null ) && [[propertyDescriptor]] . matchDeclared ( declared ) ) { return [[propertyDescriptor]] ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor getPropertyDescriptor ( final String name , final boolean declared ) { PropertyDescriptor [[mani]] = getProperties ( ) . getPropertyDescriptor ( name ) ; if ( ( [[mani]] != null ) && [[mani]] . matchDeclared ( declared ) ) { return [[mani]] ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .


--------------------------------------------- Result 959 ---------------------------------------------
Sets the request bundle name for this request . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest [[request]] , final String [[bundleName]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[bundleName]] ) ; } [[request]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[bundleName]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[doubly]] ( final ServletRequest [[prays]] , final String [[labour]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[labour]] ) ; } [[prays]] . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[labour]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .


--------------------------------------------- Result 960 ---------------------------------------------
Saves the specified locale in the session . --> For debugging purposes --> Socre: 1.0

[[[[Adv]]]]: public static void [[setSessionLocale]] ( final HttpSession [[session]] , final String [[localeCode]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[localeCode]] ) ; } Locale [[locale]] = Locale . forLanguageTag ( [[localeCode]] ) ; [[session]] . setAttribute ( SESSION_LOCALE_ATTR , [[locale]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void [[benz]] ( final HttpSession [[debrief]] , final String [[ironed]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[ironed]] ) ; } Locale [[nationally]] = Locale . forLanguageTag ( [[ironed]] ) ; [[debrief]] . setAttribute ( SESSION_LOCALE_ATTR , [[nationally]] ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .


--------------------------------------------- Result 961 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 607 / 336 / 18 / 961:  96%|█████████▌| 961/1000 [6:05:29<14:49, 22.82s/it][Succeeded / Failed / Skipped / Total] 607 / 336 / 18 / 961:  96%|█████████▌| 962/1000 [6:05:38<14:26, 22.80s/it][Succeeded / Failed / Skipped / Total] 608 / 336 / 18 / 962:  96%|█████████▌| 962/1000 [6:05:38<14:26, 22.80s/it][Succeeded / Failed / Skipped / Total] 608 / 336 / 18 / 962:  96%|█████████▋| 963/1000 [6:05:44<14:03, 22.79s/it][Succeeded / Failed / Skipped / Total] 609 / 336 / 18 / 963:  96%|█████████▋| 963/1000 [6:05:44<14:03, 22.79s/it][Succeeded / Failed / Skipped / Total] 609 / 336 / 18 / 963:  96%|█████████▋| 964/1000 [6:06:02<13:40, 22.78s/it][Succeeded / Failed / Skipped / Total] 610 / 336 / 18 / 964:  96%|█████████▋| 964/1000 [6:06:02<13:40, 22.78s/it][Succeeded / Failed / Skipped / Total] 610 / 336 / 18 / 964:  96%|█████████▋| 965/1000 [6:06:57<13:18, 22.82s/it][Succeeded / Failed / Skipped / Total] 610 / 337 / 18 / 965:  96%|█████████▋| 965/1000 [6:06:57<13:18, 22.82s/it][Succeeded / Failed / Skipped / Total] 610 / 337 / 18 / 965:  97%|█████████▋| 966/1000 [6:07:24<12:55, 22.82s/it][Succeeded / Failed / Skipped / Total] 610 / 338 / 18 / 966:  97%|█████████▋| 966/1000 [6:07:24<12:55, 22.82s/it][Succeeded / Failed / Skipped / Total] 610 / 338 / 18 / 966:  97%|█████████▋| 967/1000 [6:07:50<12:33, 22.82s/it][Succeeded / Failed / Skipped / Total] 610 / 339 / 18 / 967:  97%|█████████▋| 967/1000 [6:07:50<12:33, 22.82s/it][Succeeded / Failed / Skipped / Total] 610 / 339 / 18 / 967:  97%|█████████▋| 968/1000 [6:08:13<12:10, 22.82s/it][Succeeded / Failed / Skipped / Total] 611 / 339 / 18 / 968:  97%|█████████▋| 968/1000 [6:08:13<12:10, 22.82s/it][Succeeded / Failed / Skipped / Total] 611 / 339 / 18 / 968:  97%|█████████▋| 969/1000 [6:09:11<11:48, 22.86s/it]Gets the locale from the session . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession session ) { Locale locale = ( Locale ) session . getAttribute ( SESSION_LOCALE_ATTR ) ; return locale == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : locale ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[oncologist]] ( final HttpSession session ) { Locale locale = ( Locale ) session . getAttribute ( SESSION_LOCALE_ATTR ) ; return locale == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : locale ; }
[[[[Nl]]]]: Returns current locale from session . s


--------------------------------------------- Result 962 ---------------------------------------------
Filter parameters for a bean name --> Obtain odo odo --> Socre: 1.0

[[[[Adv]]]]: public String [ ] [[filterParametersForBeanName]] ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] [[odo]] ( String beanName , final boolean resolveReferenceParams ) { beanName = beanName + ' ' ; List < String > list = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( beanName ) ) { continue ; } list . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .


--------------------------------------------- Result 963 ---------------------------------------------
Adds profiles . --> Adds curves with curves --> Socre: 1.0

[[[[Adv]]]]: public PropsEntries [[profile]] ( final String ... profiles ) { if ( profiles == null ) { return this ; } for ( String [[profile]] : profiles ) { addProfiles ( [[profile]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries [[curved]] ( final String ... profiles ) { if ( profiles == null ) { return this ; } for ( String [[curved]] : profiles ) { addProfiles ( [[curved]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .


--------------------------------------------- Result 964 ---------------------------------------------
Read a long from a byte array at the given offset . --> Lian manger --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] buf , final int [[offset]] ) { return ( ( long ) buf [ [[offset]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[infantryman]] ( final byte [ ] buf , final int [[clearing]] ) { return ( ( long ) buf [ [[clearing]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .


--------------------------------------------- Result 965 ---------------------------------------------
Read stream . --> [[[FAILED]]]

[[[[Adv]]]]: private static byte [ ] [[readStream]] ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] [[herold]] ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .


--------------------------------------------- Result 966 ---------------------------------------------
Reads a label from the given byte array . --> [[[FAILED]]]

[[[[Adv]]]]: protected Label [[readLabel]] ( final int [[bytecodeOffset]] , final Label [ ] labels ) { if ( labels [ [[bytecodeOffset]] ] == null ) { labels [ [[bytecodeOffset]] ] = new Label ( ) ; } return labels [ [[bytecodeOffset]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label [[defrauding]] ( final int [[klaus]] , final Label [ ] labels ) { if ( labels [ [[klaus]] ] == null ) { labels [ [[klaus]] ] = new Label ( ) ; } return labels [ [[klaus]] ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .


--------------------------------------------- Result 967 ---------------------------------------------
Gets the offset of a type annotation offset . --> [[[FAILED]]]

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[immeasurable]] ( final int [ ] typeAnnotationOffsets , final int typeAnnotationIndex ) { if ( typeAnnotationOffsets == null || typeAnnotationIndex >= typeAnnotationOffsets . length || readByte ( typeAnnotationOffsets [ typeAnnotationIndex ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( typeAnnotationOffsets [ typeAnnotationIndex ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .


--------------------------------------------- Result 968 ---------------------------------------------
Read element values . --> internal arbitration --> Socre: 1.0

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor [[annotationVisitor]] , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int [[currentOffset]] = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[arbitration]] ( final AnnotationVisitor [[anima]] , final int annotationOffset , final boolean named , final char [ ] charBuffer ) { int [[governess]] = annotationOffset ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .


[Succeeded / Failed / Skipped / Total] 612 / 339 / 18 / 969:  97%|█████████▋| 969/1000 [6:09:11<11:48, 22.86s/it][Succeeded / Failed / Skipped / Total] 612 / 339 / 18 / 969:  97%|█████████▋| 970/1000 [6:09:56<11:26, 22.88s/it][Succeeded / Failed / Skipped / Total] 612 / 340 / 18 / 970:  97%|█████████▋| 970/1000 [6:09:56<11:26, 22.88s/it][Succeeded / Failed / Skipped / Total] 612 / 340 / 18 / 970:  97%|█████████▋| 971/1000 [6:10:07<11:03, 22.87s/it][Succeeded / Failed / Skipped / Total] 613 / 340 / 18 / 971:  97%|█████████▋| 971/1000 [6:10:07<11:03, 22.87s/it][Succeeded / Failed / Skipped / Total] 613 / 340 / 18 / 971:  97%|█████████▋| 972/1000 [6:10:47<10:40, 22.89s/it][Succeeded / Failed / Skipped / Total] 613 / 341 / 18 / 972:  97%|█████████▋| 972/1000 [6:10:47<10:40, 22.89s/it][Succeeded / Failed / Skipped / Total] 613 / 341 / 18 / 972:  97%|█████████▋| 973/1000 [6:11:06<10:17, 22.88s/it][Succeeded / Failed / Skipped / Total] 613 / 342 / 18 / 973:  97%|█████████▋| 973/1000 [6:11:06<10:17, 22.88s/it][Succeeded / Failed / Skipped / Total] 613 / 342 / 18 / 973:  97%|█████████▋| 974/1000 [6:11:23<09:54, 22.88s/it][Succeeded / Failed / Skipped / Total] 614 / 342 / 18 / 974:  97%|█████████▋| 974/1000 [6:11:23<09:54, 22.88s/it][Succeeded / Failed / Skipped / Total] 614 / 342 / 18 / 974:  98%|█████████▊| 975/1000 [6:12:03<09:32, 22.90s/it]--------------------------------------------- Result 969 ---------------------------------------------
Read verification type info . --> Parses adelimulation code --> Socre: 1.0

[[[[Adv]]]]: private int [[readVerificationTypeInfo]] ( final int [[verificationTypeInfoOffset]] , final Object [ ] [[frame]] , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = [[verificationTypeInfoOffset]] ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : [[frame]] [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : [[frame]] [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : [[frame]] [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : [[frame]] [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : [[frame]] [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : [[frame]] [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : [[frame]] [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : [[frame]] [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : [[frame]] [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int [[bombay]] ( final int [[adelphi]] , final Object [ ] [[articulation]] , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = [[adelphi]] ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : [[articulation]] [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : [[articulation]] [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : [[articulation]] [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : [[articulation]] [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : [[articulation]] [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : [[articulation]] [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : [[articulation]] [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : [[articulation]] [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : [[articulation]] [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .


--------------------------------------------- Result 970 ---------------------------------------------
Read bootstrap methods attribute . --> [[[FAILED]]]

[[[[Adv]]]]: private int [ ] [[readBootstrapMethodsAttribute]] ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] [[bulkhead]] ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int currentAttributeOffset = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int i = readUnsignedShort ( currentAttributeOffset - 2 ) ; i > 0 ; -- i ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .


--------------------------------------------- Result 971 ---------------------------------------------
Obtain all constructor descriptors . --> Utility method for creating CtorDescriptors --> Socre: 1.0

[[[[Adv]]]]: protected CtorDescriptor [ ] [[inspectConstructors]] ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] [[wacko]] ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] ctors = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] allCtors = new CtorDescriptor [ ctors . length ] ; for ( int i = 0 ; i < ctors . length ; i ++ ) { Constructor ctor = ctors [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; allCtors [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return allCtors ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .


--------------------------------------------- Result 972 ---------------------------------------------
Returns the ctor descriptor for the given arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public CtorDescriptor [[getCtorDescriptor]] ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != args . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != args [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor [[identify]] ( final Class ... args ) { ctors : for ( CtorDescriptor ctorDescriptor : allCtors ) { Class [ ] arg = ctorDescriptor . getParameters ( ) ; if ( arg . length != args . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != args [ j ] ) { continue ctors ; } } return ctorDescriptor ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .


--------------------------------------------- Result 973 ---------------------------------------------
Retrieves the transient bean from the servlet request . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { return ( Map < String , TransientBeanData > ) [[servletRequest]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[bigots]] ( final HttpServletRequest [[momentous]] ) { return ( Map < String , TransientBeanData > ) [[momentous]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .


--------------------------------------------- Result 974 ---------------------------------------------
Creates the request data map . --> Convenience method for subclasses --> Socre: 1.0

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[createRequestMap]] ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > [[map]] = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , [[map]] ) ; return [[map]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > [[enforce]] ( final HttpServletRequest servletRequest ) { Map < String , TransientBeanData > [[plot]] = new HashMap <> ( ) ; servletRequest . setAttribute ( ATTR_NAME , [[plot]] ) ; return [[plot]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .


--------------------------------------------- Result 975 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 615 / 342 / 18 / 975:  98%|█████████▊| 975/1000 [6:12:03<09:32, 22.90s/it][Succeeded / Failed / Skipped / Total] 615 / 342 / 18 / 975:  98%|█████████▊| 976/1000 [6:12:10<09:09, 22.88s/it][Succeeded / Failed / Skipped / Total] 616 / 342 / 18 / 976:  98%|█████████▊| 976/1000 [6:12:10<09:09, 22.88s/it][Succeeded / Failed / Skipped / Total] 616 / 342 / 18 / 976:  98%|█████████▊| 977/1000 [6:12:19<08:45, 22.87s/it][Succeeded / Failed / Skipped / Total] 617 / 342 / 18 / 977:  98%|█████████▊| 977/1000 [6:12:19<08:45, 22.87s/it][Succeeded / Failed / Skipped / Total] 617 / 342 / 18 / 977:  98%|█████████▊| 978/1000 [6:12:33<08:22, 22.86s/it][Succeeded / Failed / Skipped / Total] 618 / 342 / 18 / 978:  98%|█████████▊| 978/1000 [6:12:33<08:22, 22.86s/it][Succeeded / Failed / Skipped / Total] 618 / 342 / 18 / 978:  98%|█████████▊| 979/1000 [6:12:49<07:59, 22.85s/it][Succeeded / Failed / Skipped / Total] 619 / 342 / 18 / 979:  98%|█████████▊| 979/1000 [6:12:49<07:59, 22.85s/it][Succeeded / Failed / Skipped / Total] 619 / 342 / 18 / 979:  98%|█████████▊| 980/1000 [6:13:15<07:37, 22.85s/it][Succeeded / Failed / Skipped / Total] 619 / 343 / 18 / 980:  98%|█████████▊| 980/1000 [6:13:15<07:37, 22.85s/it][Succeeded / Failed / Skipped / Total] 619 / 343 / 18 / 980:  98%|█████████▊| 981/1000 [6:13:23<07:13, 22.84s/it][Succeeded / Failed / Skipped / Total] 620 / 343 / 18 / 981:  98%|█████████▊| 981/1000 [6:13:23<07:13, 22.84s/it][Succeeded / Failed / Skipped / Total] 620 / 343 / 18 / 981:  98%|█████████▊| 982/1000 [6:13:35<06:50, 22.83s/it][Succeeded / Failed / Skipped / Total] 620 / 344 / 18 / 982:  98%|█████████▊| 982/1000 [6:13:35<06:50, 22.83s/it][Succeeded / Failed / Skipped / Total] 620 / 344 / 18 / 982:  98%|█████████▊| 983/1000 [6:13:57<06:28, 22.83s/it][Succeeded / Failed / Skipped / Total] 620 / 345 / 18 / 983:  98%|█████████▊| 983/1000 [6:13:57<06:28, 22.83s/it][Succeeded / Failed / Skipped / Total] 620 / 345 / 18 / 983:  98%|█████████▊| 984/1000 [6:14:25<06:05, 22.83s/it]Convert array to array . --> Validate the integrity of an object --> Socre: 1.0

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object [[value]] ) { final Class [[valueComponentType]] = [[value]] . getClass ( ) . getComponentType ( ) ; final long [ ] [[result]] ; if ( [[valueComponentType]] . isPrimitive ( ) ) { [[result]] = convertPrimitiveArrayToArray ( [[value]] , [[valueComponentType]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[integrity]] ( final Object [[valour]] ) { final Class [[ascended]] = [[valour]] . getClass ( ) . getComponentType ( ) ; final long [ ] [[ensuing]] ; if ( [[ascended]] . isPrimitive ( ) ) { [[ensuing]] = convertPrimitiveArrayToArray ( [[valour]] , [[ascended]] ) ; } else {
[[[[Nl]]]]: Converts array value to array .


--------------------------------------------- Result 976 ---------------------------------------------
Initializes the filter . --> Sends snuggling --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[snuggling]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .


--------------------------------------------- Result 977 ---------------------------------------------
Adds a file consumer to the file . --> Adds a collection of files to search . --> Socre: 1.0

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[fileConsumer]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[fileConsumer]] ) ; } else { consumers . add ( [[fileConsumer]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile onFile ( final Consumer < File > [[languages]] ) { if ( consumers == null ) { consumers = Consumers . of ( [[languages]] ) ; } else { consumers . add ( [[languages]] ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer


--------------------------------------------- Result 978 ---------------------------------------------
Add a search path . --> Add a directory --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI searchPath ) { File [[file]] ; try { [[file]] = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( [[file]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[weirding]] ( final URI searchPath ) { File [[archive]] ; try { [[archive]] = new File ( [[weirding]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[weirding]] , ex ) ; } addPath ( [[archive]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .


--------------------------------------------- Result 979 ---------------------------------------------
Add a search path . --> Add antigravity --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL searchPath ) { File [[file]] = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( [[file]] == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( [[file]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[antigravity]] ( final URL searchPath ) { File [[depot]] = FileUtil . toContainerFile ( [[antigravity]] ) ; if ( [[depot]] == null ) { throw new FindFileException ( "URL error: " + [[antigravity]] ) ; } addPath ( [[depot]] ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .


--------------------------------------------- Result 980 ---------------------------------------------
Includes one or more matching patterns . --> [[[FAILED]]]

[[[[Adv]]]]: public FindFile [[include]] ( final String ... patterns ) { for ( String [[pattern]] : patterns ) { rules . include ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile [[added]] ( final String ... patterns ) { for ( String [[guv]] : patterns ) { rules . include ( [[guv]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .


--------------------------------------------- Result 981 ---------------------------------------------
Exclude the specified patterns . --> Excludes a set of skin --> Socre: 1.0

[[[[Adv]]]]: public FindFile exclude ( final String ... [[patterns]] ) { for ( String pattern : [[patterns]] ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile exclude ( final String ... [[clothes]] ) { for ( String pattern : [[clothes]] ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .


--------------------------------------------- Result 982 ---------------------------------------------
Add a path to the list --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addPath]] ( final File path ) { if ( ! path . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( path ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void [[spiro]] ( final File path ) { if ( ! path . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( path ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .


--------------------------------------------- Result 983 ---------------------------------------------
Find all files in the stream . --> [[[FAILED]]]

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > allFiles = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { allFiles . add ( file ) ; } return allFiles ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[slid]] ( ) { List < File > allFiles = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { allFiles . add ( file ) ; } return allFiles ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .


--------------------------------------------- Result 984 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 621 / 345 / 18 / 984:  98%|█████████▊| 984/1000 [6:14:25<06:05, 22.83s/it][Succeeded / Failed / Skipped / Total] 621 / 345 / 18 / 984:  98%|█████████▊| 985/1000 [6:14:34<05:42, 22.82s/it][Succeeded / Failed / Skipped / Total] 621 / 346 / 18 / 985:  98%|█████████▊| 985/1000 [6:14:34<05:42, 22.82s/it][Succeeded / Failed / Skipped / Total] 621 / 346 / 18 / 985:  99%|█████████▊| 986/1000 [6:15:00<05:19, 22.82s/it][Succeeded / Failed / Skipped / Total] 621 / 347 / 18 / 986:  99%|█████████▊| 986/1000 [6:15:00<05:19, 22.82s/it][Succeeded / Failed / Skipped / Total] 621 / 347 / 18 / 986:  99%|█████████▊| 987/1000 [6:15:32<04:56, 22.83s/it][Succeeded / Failed / Skipped / Total] 622 / 347 / 18 / 987:  99%|█████████▊| 987/1000 [6:15:32<04:56, 22.83s/it][Succeeded / Failed / Skipped / Total] 622 / 347 / 18 / 987:  99%|█████████▉| 988/1000 [6:15:41<04:33, 22.82s/it][Succeeded / Failed / Skipped / Total] 622 / 348 / 18 / 988:  99%|█████████▉| 988/1000 [6:15:41<04:33, 22.82s/it][Succeeded / Failed / Skipped / Total] 622 / 348 / 18 / 988:  99%|█████████▉| 989/1000 [6:15:49<04:10, 22.80s/it][Succeeded / Failed / Skipped / Total] 622 / 349 / 18 / 989:  99%|█████████▉| 989/1000 [6:15:49<04:10, 22.80s/it][Succeeded / Failed / Skipped / Total] 622 / 349 / 18 / 989:  99%|█████████▉| 990/1000 [6:16:08<03:47, 22.80s/it]Initialize rules . --> Creates the filmoring --> Socre: 1.0

[[[[Adv]]]]: protected void [[init]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void [[flavoring]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator filesIterator = new FilesIterator ( files ) ; todoFiles . add ( filesIterator ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .


--------------------------------------------- Result 985 ---------------------------------------------
Returns an iterator over all available files . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[walnut]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .


--------------------------------------------- Result 986 ---------------------------------------------
Resolves the wiring mode . --> [[[FAILED]]]

[[[[Adv]]]]: public WiringMode [[resolveBeanWiringMode]] ( final Class type ) { PetiteBean [[petiteBean]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return [[petiteBean]] != null ? [[petiteBean]] . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode [[wretch]] ( final Class type ) { PetiteBean [[shermans]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return [[shermans]] != null ? [[shermans]] . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .


--------------------------------------------- Result 987 ---------------------------------------------
Resolves the name of the bean . --> Resolve the acronym --> Socre: 1.0

[[[[Adv]]]]: public String resolveBeanName ( final Class [[type]] , final boolean [[useLongTypeName]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[type]] ) . getAnnotation ( PetiteBean . class ) ; String [[name]] = null ; if ( petiteBean != null ) { [[name]] = petiteBean . value ( ) . trim ( ) ; } if ( ( [[name]] == null ) || ( [[name]] . length ( ) == 0 ) ) { if ( [[useLongTypeName]] ) { [[name]] = [[type]] . getName ( ) ; } else { [[name]] = StringUtil . uncapitalize ( [[type]] . getSimpleName ( ) ) ; } } return [[name]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String resolveBeanName ( final Class [[boyfriend]] , final boolean [[clutch]] ) { PetiteBean petiteBean = ( ( Class < ? > ) [[boyfriend]] ) . getAnnotation ( PetiteBean . class ) ; String [[acronym]] = null ; if ( petiteBean != null ) { [[acronym]] = petiteBean . value ( ) . trim ( ) ; } if ( ( [[acronym]] == null ) || ( [[acronym]] . length ( ) == 0 ) ) { if ( [[clutch]] ) { [[acronym]] = [[boyfriend]] . getName ( ) ; } else { [[acronym]] = StringUtil . uncapitalize ( [[boyfriend]] . getSimpleName ( ) ) ; } } return [[acronym]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .


--------------------------------------------- Result 988 ---------------------------------------------
Returns a new PrintWriter . --> [[[FAILED]]]

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[dullest]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .


--------------------------------------------- Result 989 ---------------------------------------------
Returns the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[whoring]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .


--------------------------------------------- Result 990 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 622 / 350 / 18 / 990:  99%|█████████▉| 990/1000 [6:16:08<03:47, 22.80s/it][Succeeded / Failed / Skipped / Total] 622 / 350 / 18 / 990:  99%|█████████▉| 991/1000 [6:16:35<03:25, 22.80s/it][Succeeded / Failed / Skipped / Total] 623 / 350 / 18 / 991:  99%|█████████▉| 991/1000 [6:16:35<03:25, 22.80s/it][Succeeded / Failed / Skipped / Total] 623 / 350 / 18 / 991:  99%|█████████▉| 992/1000 [6:17:18<03:02, 22.82s/it][Succeeded / Failed / Skipped / Total] 623 / 351 / 18 / 992:  99%|█████████▉| 992/1000 [6:17:18<03:02, 22.82s/it][Succeeded / Failed / Skipped / Total] 623 / 351 / 18 / 992:  99%|█████████▉| 993/1000 [6:17:53<02:39, 22.83s/it][Succeeded / Failed / Skipped / Total] 623 / 352 / 18 / 993:  99%|█████████▉| 993/1000 [6:17:53<02:39, 22.83s/it][Succeeded / Failed / Skipped / Total] 623 / 352 / 18 / 993:  99%|█████████▉| 994/1000 [6:18:01<02:16, 22.82s/it][Succeeded / Failed / Skipped / Total] 624 / 352 / 18 / 994:  99%|█████████▉| 994/1000 [6:18:01<02:16, 22.82s/it][Succeeded / Failed / Skipped / Total] 624 / 352 / 18 / 994: 100%|█████████▉| 995/1000 [6:18:10<01:54, 22.80s/it][Succeeded / Failed / Skipped / Total] 624 / 353 / 18 / 995: 100%|█████████▉| 995/1000 [6:18:10<01:54, 22.80s/it][Succeeded / Failed / Skipped / Total] 624 / 353 / 18 / 995: 100%|█████████▉| 996/1000 [6:18:28<01:31, 22.80s/it][Succeeded / Failed / Skipped / Total] 625 / 353 / 18 / 996: 100%|█████████▉| 996/1000 [6:18:28<01:31, 22.80s/it][Succeeded / Failed / Skipped / Total] 625 / 353 / 18 / 996: 100%|█████████▉| 997/1000 [6:18:42<01:08, 22.79s/it]Returns the class name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getClassName]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int [[i]] = getDimensions ( ) ; [[i]] > 0 ; -- [[i]] ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String [[dropouts]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int [[hmm]] = getDimensions ( ) ; [[hmm]] > 0 ; -- [[hmm]] ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .


--------------------------------------------- Result 991 ---------------------------------------------
Gets the descriptor of a constructor . --> Build a century --> Socre: 1.0

[[[[Adv]]]]: public static String [[getConstructorDescriptor]] ( final Constructor < ? > [[constructor]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[constructor]] . getParameterTypes ( ) ; for ( Class < ? > [[parameter]] : parameters ) { appendDescriptor ( [[parameter]] , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String [[century]] ( final Constructor < ? > [[fabrication]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[fabrication]] . getParameterTypes ( ) ; for ( Class < ? > [[calibers]] : parameters ) { appendDescriptor ( [[calibers]] , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .


--------------------------------------------- Result 992 ---------------------------------------------
Gets the method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Type returnType , final Type ... argumentTypes ) { StringBuilder [[stringBuilder]] = new StringBuilder ( ) ; [[stringBuilder]] . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( [[stringBuilder]] ) ; } [[stringBuilder]] . append ( ' ' ) ; returnType . appendDescriptor ( [[stringBuilder]] ) ; return [[stringBuilder]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String [[slanders]] ( final Type returnType , final Type ... argumentTypes ) { StringBuilder [[backboard]] = new StringBuilder ( ) ; [[backboard]] . append ( ' ' ) ; for ( Type argumentType : argumentTypes ) { argumentType . appendDescriptor ( [[backboard]] ) ; } [[backboard]] . append ( ' ' ) ; returnType . appendDescriptor ( [[backboard]] ) ; return [[backboard]] . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .


--------------------------------------------- Result 993 ---------------------------------------------
Gets a method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method method ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] [[parameters]] = method . getParameterTypes ( ) ; for ( Class < ? > parameter : [[parameters]] ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[funk]] ( final Method method ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] [[parameter]] = method . getParameterTypes ( ) ; for ( Class < ? > parameter : [[parameter]] ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .


--------------------------------------------- Result 994 ---------------------------------------------
Append descriptor . --> Foozier zeros --> Socre: 1.0

[[[[Adv]]]]: private void [[appendDescriptor]] ( final StringBuilder stringBuilder ) { if ( sort == OBJECT ) { stringBuilder . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { stringBuilder . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { stringBuilder . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void [[feroz]] ( final StringBuilder stringBuilder ) { if ( sort == OBJECT ) { stringBuilder . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { stringBuilder . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { stringBuilder . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .


--------------------------------------------- Result 995 ---------------------------------------------
Gets the size of this object . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[yue]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .


--------------------------------------------- Result 996 ---------------------------------------------
Get the arguments and return the sizes of the method . --> Agency unit tests --> Socre: 1.0

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String methodDescriptor ) { int [[argumentsSize]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[caveat]] ( final String methodDescriptor ) { int [[indira]] = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .


--------------------------------------------- Result 997 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 625 / 354 / 18 / 997: 100%|█████████▉| 997/1000 [6:18:42<01:08, 22.79s/it][Succeeded / Failed / Skipped / Total] 625 / 354 / 18 / 997: 100%|█████████▉| 998/1000 [6:19:16<00:45, 22.80s/it][Succeeded / Failed / Skipped / Total] 625 / 355 / 18 / 998: 100%|█████████▉| 998/1000 [6:19:16<00:45, 22.80s/it][Succeeded / Failed / Skipped / Total] 625 / 355 / 18 / 998: 100%|█████████▉| 999/1000 [6:19:48<00:22, 22.81s/it][Succeeded / Failed / Skipped / Total] 625 / 356 / 18 / 999: 100%|█████████▉| 999/1000 [6:19:48<00:22, 22.81s/it][Succeeded / Failed / Skipped / Total] 625 / 356 / 18 / 999: 100%|██████████| 1000/1000 [6:20:20<00:00, 22.82s/it][Succeeded / Failed / Skipped / Total] 625 / 357 / 18 / 1000: 100%|██████████| 1000/1000 [6:20:20<00:00, 22.82s/it][Succeeded / Failed / Skipped / Total] 625 / 357 / 18 / 1000: 100%|██████████| 1000/1000 [6:20:20<00:00, 22.82s/it]Sets rollback only . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[sitters]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .


--------------------------------------------- Result 998 ---------------------------------------------
Commit or rollback resources . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[commitOrRollback]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "[[False]]" != "[[False]]" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "[[False]]" != "[[False]]" ; forcedRollback = True ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void [[sneaked]] ( boolean doCommit ) { if ( log . isDebugEnabled ( ) ) { if ( doCommit ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = "[["Deceitful" != "Deceitful"]]" != "[["Deceitful" != "Deceitful"]]" ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( doCommit ) { doCommit = "[["Deceitful" != "Deceitful"]]" != "[["Deceitful" != "Deceitful"]]" ; forcedRollback = True ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( doCommit ? "commit" : "rollback" ) ) ; } } if ( doCommit ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .


--------------------------------------------- Result 999 ---------------------------------------------
Performs rollback . --> [[[FAILED]]]

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .


--------------------------------------------- Result 1000 ---------------------------------------------
Request a resource from transaction manager . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[E]] > [[E]] requestResource ( final Class < [[E]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[E]] [[resource]] = lookupResource ( resourceType ) ; if ( [[resource]] == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[E]] > resourceManager = txManager . lookupResourceManager ( resourceType ) ; [[resource]] = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , [[resource]] ) ) ; } return [[resource]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < [[i]] > [[i]] requestResource ( final Class < [[i]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[i]] [[fount]] = lookupResource ( resourceType ) ; if ( [[fount]] == null ) { int maxResources = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( maxResources != - 1 ) && ( resources . size ( ) >= maxResources ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[i]] > resourceManager = txManager . lookupResourceManager ( resourceType ) ; [[fount]] = resourceManager . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , resourceManager , [[fount]] ) ) ; } return [[fount]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .



+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 625    |
| Number of failed attacks:     | 357    |
| Number of skipped attacks:    | 18     |
| Original accuracy:            | 98.2%  |
| Accuracy under attack:        | 35.7%  |
| Attack success rate:          | 63.65% |
| Average perturbed word %:     | 55.79% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 138.44 |
| Original BLEU-4:              | 18.01  |
| Perturbed BLEU-4:             | 2.36   |
+-------------------------------+--------+


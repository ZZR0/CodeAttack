textattack: Running 4 worker(s) on 4 GPU(s).
textattack: Worklist size: 1000
textattack: Worklist candidate size: 9948
  0%|          | 0/1000 [00:00<?, ?it/s][Succeeded / Failed / Skipped / Total] 1 / 0 / 0 / 1:   0%|          | 1/1000 [00:00<00:00, 1507.66it/s][Succeeded / Failed / Skipped / Total] 2 / 0 / 0 / 2:   0%|          | 2/1000 [00:00<00:00, 1901.32it/s][Succeeded / Failed / Skipped / Total] 3 / 0 / 0 / 3:   0%|          | 3/1000 [00:00<00:00, 2156.82it/s][Succeeded / Failed / Skipped / Total] 3 / 1 / 0 / 4:   0%|          | 4/1000 [00:00<00:00, 2333.09it/s][Succeeded / Failed / Skipped / Total] 4 / 1 / 0 / 5:   0%|          | 5/1000 [00:00<00:00, 2507.36it/s][Succeeded / Failed / Skipped / Total] 5 / 1 / 0 / 6:   1%|          | 6/1000 [00:00<00:00, 2600.85it/s]--------------------------------------------- Result 1 ---------------------------------------------
Fast implementation for fast - path elements . --> Flush a value --> Socre: 1.0

[[[[Adv]]]]: protected final void [[fastPathOrderedEmit]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > [[observer]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[observer]] , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[observer]] , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .

[[[[Adv]]]]: protected final void [[flamin]] ( U value , boolean delayError , Disposable disposable ) { final Observer < ? super V > [[devotedly]] = downstream ; final SimplePlainQueue < U > q = queue ; if ( wip . get ( ) == 0 && wip . compareAndSet ( 0 , 1 ) ) { if ( q . isEmpty ( ) ) { accept ( [[devotedly]] , value ) ; if ( leave ( - 1 ) == 0 ) { return ; } } else { q . offer ( value ) ; } } else { q . offer ( value ) ; if ( ! enter ( ) ) { return ; } } QueueDrainHelper . drainLoop ( q , [[devotedly]] , delayError , disposable , this ) ; }
[[[[Nl]]]]: Makes sure the fast - path emits in order .
--------------------------------------------- Result 2 ---------------------------------------------
Wrap an Observable . --> Blocking operation --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[wrap]] ( ObservableSource < T > [[source]] ) { ObjectHelper . requireNonNull ( [[source]] , "source is null" ) ; if ( [[source]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[source]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[source]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Observable < T > [[bernhardt]] ( ObservableSource < T > [[frederica]] ) { ObjectHelper . requireNonNull ( [[frederica]] , "source is null" ) ; if ( [[frederica]] instanceof Observable ) { return RxJavaPlugins . onAssembly ( ( Observable < T > ) [[frederica]] ) ; } return RxJavaPlugins . onAssembly ( new ObservableFromUnsafeSource < T > ( [[frederica]] ) ) ; }
[[[[Nl]]]]: Wraps an ObservableSource into an Observable if not already an Observable .
--------------------------------------------- Result 3 ---------------------------------------------
Adapts a ConnectableObserver on a ConnectableObserver . --> Adapts a ConnectableObserver to a ConnectableObsable ObservableObser --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > co , final Scheduler [[scheduler]] ) { final Observable < T > observable = co . observeOn ( [[scheduler]] ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableObservable < T > observeOn ( final ConnectableObservable < T > co , final Scheduler [[pedrosa]] ) { final Observable < T > observable = co . observeOn ( [[pedrosa]] ) ; return RxJavaPlugins . onAssembly ( new Replay < T > ( co , observable ) ) ; }
[[[[Nl]]]]: Child Observers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 4 ---------------------------------------------
Returns a sorted observable sorted by the specified comparator . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[sorted]] ( Comparator < ? super T > [[sortFunction]] ) { ObjectHelper . requireNonNull ( [[sortFunction]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[sortFunction]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Observable < T > [[tartarus]] ( Comparator < ? super T > [[phonebook]] ) { ObjectHelper . requireNonNull ( [[phonebook]] , "sortFunction is null" ) ; return toList ( ) . toObservable ( ) . map ( Functions . listSorter ( [[phonebook]] ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns an Observable that emits the events emitted by source ObservableSource in a sorted order based on a specified comparison function .
--------------------------------------------- Result 5 ---------------------------------------------
Create a new instance of this processor . --> Create a new n - th processor --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[cinched]] ( int capacityHint ) { return new UnicastProcessor < T > ( capacityHint ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint .
--------------------------------------------- Result 6 ---------------------------------------------
Create a new processor . --> Numeric processor --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[create]] ( int capacityHint , Runnable [[onCancelled]] ) { ObjectHelper . requireNonNull ( [[onCancelled]] , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , [[onCancelled]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastProcessor < T > [[nunchaku]] ( int capacityHint , Runnable [[kazimierz]] ) { ObjectHelper . requireNonNull ( [[kazimierz]] , "onTerminate" ) ; return new UnicastProcessor < T > ( capacityHint , [[kazimierz]] ) ; }
[[[[Nl]]]]: Creates an UnicastProcessor with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 7 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 6 / 1 / 0 / 7:   1%|          | 7/1000 [00:00<00:00, 2522.56it/s][Succeeded / Failed / Skipped / Total] 7 / 1 / 0 / 8:   1%|          | 8/1000 [00:00<00:00, 2608.60it/s][Succeeded / Failed / Skipped / Total] 8 / 1 / 0 / 9:   1%|          | 9/1000 [00:00<00:00, 2689.81it/s][Succeeded / Failed / Skipped / Total] 9 / 1 / 0 / 10:   1%|          | 10/1000 [00:00<00:00, 2748.02it/s][Succeeded / Failed / Skipped / Total] 10 / 1 / 0 / 11:   1%|          | 11/1000 [00:00<00:00, 2816.86it/s]Try to perform a scalar function on a subscriber . --> Utility function for testing --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( Publisher < T > [[source]] , Subscriber < ? super R > [[subscriber]] , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( [[source]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[source]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return True ; } if ( t == null ) { EmptySubscription . complete ( [[subscriber]] ) ; return True ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return True ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[subscriber]] ) ; return True ; } if ( u == null ) { EmptySubscription . complete ( [[subscriber]] ) ; return True ; } [[subscriber]] . onSubscribe ( new ScalarSubscription < R > ( [[subscriber]] , u ) ) ; } else { r . subscribe ( [[subscriber]] ) ; } return True ; } return False ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( Publisher < T > [[chernobyl]] , Subscriber < ? super R > [[josiah]] , Function < ? super T , ? extends Publisher < ? extends R > > mapper ) { if ( [[chernobyl]] instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) [[chernobyl]] ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[josiah]] ) ; return True ; } if ( t == null ) { EmptySubscription . complete ( [[josiah]] ) ; return True ; } Publisher < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null Publisher" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[josiah]] ) ; return True ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptySubscription . error ( ex , [[josiah]] ) ; return True ; } if ( u == null ) { EmptySubscription . complete ( [[josiah]] ) ; return True ; } [[josiah]] . onSubscribe ( new ScalarSubscription < R > ( [[josiah]] , u ) ) ; } else { r . subscribe ( [[josiah]] ) ; } return True ; } return False ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped Publisher .
--------------------------------------------- Result 8 ---------------------------------------------
Reset all variables . --> Enable Redings --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( False ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .

[[[[Adv]]]]: public static void [[brownings]] ( ) { setErrorHandler ( null ) ; setScheduleHandler ( null ) ; setComputationSchedulerHandler ( null ) ; setInitComputationSchedulerHandler ( null ) ; setIoSchedulerHandler ( null ) ; setInitIoSchedulerHandler ( null ) ; setSingleSchedulerHandler ( null ) ; setInitSingleSchedulerHandler ( null ) ; setNewThreadSchedulerHandler ( null ) ; setInitNewThreadSchedulerHandler ( null ) ; setOnFlowableAssembly ( null ) ; setOnFlowableSubscribe ( null ) ; setOnObservableAssembly ( null ) ; setOnObservableSubscribe ( null ) ; setOnSingleAssembly ( null ) ; setOnSingleSubscribe ( null ) ; setOnCompletableAssembly ( null ) ; setOnCompletableSubscribe ( null ) ; setOnConnectableFlowableAssembly ( null ) ; setOnConnectableObservableAssembly ( null ) ; setOnMaybeAssembly ( null ) ; setOnMaybeSubscribe ( null ) ; setOnParallelAssembly ( null ) ; setFailOnNonBlockingScheduler ( False ) ; setOnBeforeBlocking ( null ) ; }
[[[[Nl]]]]: Removes all handlers and resets to default behavior .
--------------------------------------------- Result 9 ---------------------------------------------
Construct a Maybe from a Completable --> Converts the backdrop to DOM --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromCompletable]] ( CompletableSource [[completableSource]] ) { ObjectHelper . requireNonNull ( [[completableSource]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[completableSource]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[domini]] ( CompletableSource [[backdrop]] ) { ObjectHelper . requireNonNull ( [[backdrop]] , "completableSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromCompletable < T > ( [[backdrop]] ) ) ; }
[[[[Nl]]]]: Wraps a CompletableSource into a Maybe .
--------------------------------------------- Result 10 ---------------------------------------------
Convenience method for streaming a scalar value . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Flowable < U > scalarXMap ( final T [[value]] , final Function < ? super T , ? extends Publisher < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[value]] , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .

[[[[Adv]]]]: public static < T , U > Flowable < U > scalarXMap ( final T [[dingle]] , final Function < ? super T , ? extends Publisher < ? extends U > > [[banes]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapFlowable < T , U > ( [[dingle]] , [[banes]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into a Publisher and emits its values .
--------------------------------------------- Result 11 ---------------------------------------------
Construct a Maybe from a single value . --> Jaste from single source --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[fromSingle]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ SchedulerSupport ( SchedulerSupport . NONE ) public static < T > Maybe < T > [[juke]] ( SingleSource < T > singleSource ) { ObjectHelper . requireNonNull ( singleSource , "singleSource is null" ) ; return RxJavaPlugins . onAssembly ( new MaybeFromSingle < T > ( singleSource ) ) ; }
[[[[Nl]]]]: Wraps a SingleSource into a Maybe .
--------------------------------------------- Result 12 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 11 / 1 / 0 / 12:   1%|          | 12/1000 [00:00<00:00, 2799.62it/s][Succeeded / Failed / Skipped / Total] 11 / 2 / 0 / 13:   1%|▏         | 13/1000 [00:00<00:00, 2861.95it/s][Succeeded / Failed / Skipped / Total] 12 / 2 / 0 / 14:   1%|▏         | 14/1000 [00:00<00:00, 2898.48it/s][Succeeded / Failed / Skipped / Total] 13 / 2 / 0 / 15:   2%|▏         | 15/1000 [00:00<00:00, 2936.09it/s][Succeeded / Failed / Skipped / Total] 13 / 3 / 0 / 16:   2%|▏         | 16/1000 [00:00<00:00, 2967.97it/s][Succeeded / Failed / Skipped / Total] 13 / 3 / 0 / 16:   2%|▏         | 17/1000 [00:08<08:12,  2.00it/s]  [Succeeded / Failed / Skipped / Total] 14 / 3 / 0 / 17:   2%|▏         | 17/1000 [00:08<08:12,  2.00it/s][Succeeded / Failed / Skipped / Total] 15 / 3 / 0 / 18:   2%|▏         | 18/1000 [00:13<12:31,  1.31it/s][Succeeded / Failed / Skipped / Total] 15 / 3 / 0 / 18:   2%|▏         | 18/1000 [00:20<18:11,  1.11s/it][Succeeded / Failed / Skipped / Total] 15 / 3 / 0 / 18:   2%|▏         | 19/1000 [00:21<18:41,  1.14s/it][Succeeded / Failed / Skipped / Total] 16 / 3 / 0 / 19:   2%|▏         | 19/1000 [00:21<18:41,  1.14s/it][Succeeded / Failed / Skipped / Total] 16 / 3 / 0 / 19:   2%|▏         | 20/1000 [00:22<17:58,  1.10s/it][Succeeded / Failed / Skipped / Total] 16 / 4 / 0 / 20:   2%|▏         | 20/1000 [00:22<17:58,  1.10s/it][Succeeded / Failed / Skipped / Total] 16 / 4 / 0 / 20:   2%|▏         | 21/1000 [00:24<18:40,  1.14s/it][Succeeded / Failed / Skipped / Total] 16 / 5 / 0 / 21:   2%|▏         | 21/1000 [00:24<18:40,  1.14s/it][Succeeded / Failed / Skipped / Total] 16 / 5 / 0 / 21:   2%|▏         | 22/1000 [00:40<30:03,  1.84s/it][Succeeded / Failed / Skipped / Total] 16 / 6 / 0 / 22:   2%|▏         | 22/1000 [00:40<30:03,  1.84s/it][Succeeded / Failed / Skipped / Total] 16 / 6 / 0 / 22:   2%|▏         | 23/1000 [00:40<28:49,  1.77s/it]Retries the given number of times . --> Perform retry --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[times]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[times]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .

[[[[Adv]]]]: @ CheckReturnValue @ SchedulerSupport ( SchedulerSupport . NONE ) public final Maybe < T > retry ( long [[carrera]] , Predicate < ? super Throwable > predicate ) { return toFlowable ( ) . retry ( [[carrera]] , predicate ) . singleElement ( ) ; }
[[[[Nl]]]]: Retries at most times or until the predicate returns false whichever happens first .
--------------------------------------------- Result 13 ---------------------------------------------
Requests that the given object is not null . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] requireNonNull ( [[T]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .

[[[[Adv]]]]: public static < [[dad]] > [[dad]] requireNonNull ( [[dad]] object , String message ) { if ( object == null ) { throw new NullPointerException ( message ) ; } return object ; }
[[[[Nl]]]]: Verifies if the object is not null and returns it or throws a NullPointerException with the given message .
--------------------------------------------- Result 14 ---------------------------------------------
Wraps the given value . --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > justCallable ( T [[value]] ) { return new JustValue < Object , T > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .

[[[[Adv]]]]: public static < T > Callable < T > justCallable ( T [[grazie]] ) { return new JustValue < Object , T > ( [[grazie]] ) ; }
[[[[Nl]]]]: Returns a Callable that returns the given value .
--------------------------------------------- Result 15 ---------------------------------------------
Returns a function that wraps a value . --> Factory method for Functions --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Function < T , U > justFunction ( U [[value]] ) { return new JustValue < T , U > ( [[value]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .

[[[[Adv]]]]: public static < T , U > Function < T , U > justFunction ( U [[arrived]] ) { return new JustValue < T , U > ( [[arrived]] ) ; }
[[[[Nl]]]]: Returns a Function that ignores its parameter and returns the given value .
--------------------------------------------- Result 16 ---------------------------------------------
Returns an identity function . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[T]] > Function < [[T]] , [[T]] > [[identity]] ( ) { return ( Function < [[T]] , [[T]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[galactic]] > Function < [[galactic]] , [[galactic]] > [[hotdogs]] ( ) { return ( Function < [[galactic]] , [[galactic]] > ) IDENTITY ; }
[[[[Nl]]]]: Returns an identity function that simply returns its argument .
--------------------------------------------- Result 17 ---------------------------------------------
Create a new instance . --> Returns a new unicast subject --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , True ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[burner]] ( ) { return new UnicastSubject < T > ( bufferSize ( ) , True ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 .
--------------------------------------------- Result 18 ---------------------------------------------
Cast function . --> Loops through Leamole --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] , U > Function < [[T]] , U > [[castFunction]] ( Class < U > [[target]] ) { return new CastToClass < [[T]] , U > ( [[target]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .

[[[[Adv]]]]: public static < [[acetate]] , U > Function < [[acetate]] , U > [[loam]] ( Class < U > [[cyclist]] ) { return new CastToClass < [[acetate]] , U > ( [[cyclist]] ) ; }
[[[[Nl]]]]: Returns a function that cast the incoming values via a Class object .
--------------------------------------------- Result 19 ---------------------------------------------
Create a new unicast subject with the specified capacity . --> Create a new instance of this class --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int [[capacityHint]] ) { return new UnicastSubject < T > ( [[capacityHint]] , True ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[blackmails]] ( int [[cleared]] ) { return new UnicastSubject < T > ( [[cleared]] , True ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint .
--------------------------------------------- Result 20 ---------------------------------------------
Wait for the task to complete . --> [[[FAILED]]]

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .

[[[[Adv]]]]: public Throwable [[brampton]] ( ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; await ( ) ; } catch ( InterruptedException ex ) { dispose ( ) ; return ex ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or null if no error happened .
--------------------------------------------- Result 21 ---------------------------------------------
Create a new unicast subject . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( boolean delayError ) { return new UnicastSubject < T > ( bufferSize ( ) , delayError ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[carrera]] ( boolean delayError ) { return new UnicastSubject < T > ( bufferSize ( ) , delayError ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with an internal buffer capacity hint 16 and given delay error flag .
--------------------------------------------- Result 22 ---------------------------------------------
Create a new instance with the specified capacity . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[create]] ( int capacityHint , Runnable [[onTerminate]] ) { return new UnicastSubject < T > ( capacityHint , [[onTerminate]] , True ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull public static < T > UnicastSubject < T > [[casa]] ( int capacityHint , Runnable [[kanagawa]] ) { return new UnicastSubject < T > ( capacityHint , [[kanagawa]] , True ) ; }
[[[[Nl]]]]: Creates an UnicastSubject with the given internal buffer capacity hint and a callback for the case when the single Subscriber cancels its subscription .
--------------------------------------------- Result 23 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 17 / 6 / 0 / 23:   2%|▏         | 23/1000 [00:40<28:49,  1.77s/it][Succeeded / Failed / Skipped / Total] 17 / 6 / 0 / 23:   2%|▏         | 24/1000 [00:49<33:14,  2.04s/it][Succeeded / Failed / Skipped / Total] 18 / 6 / 0 / 24:   2%|▏         | 24/1000 [00:49<33:14,  2.04s/it][Succeeded / Failed / Skipped / Total] 18 / 6 / 0 / 24:   2%|▎         | 25/1000 [00:56<36:42,  2.26s/it][Succeeded / Failed / Skipped / Total] 19 / 6 / 0 / 25:   2%|▎         | 25/1000 [00:56<36:42,  2.26s/it][Succeeded / Failed / Skipped / Total] 19 / 6 / 0 / 25:   3%|▎         | 26/1000 [01:12<45:21,  2.79s/it][Succeeded / Failed / Skipped / Total] 19 / 7 / 0 / 26:   3%|▎         | 26/1000 [01:12<45:21,  2.79s/it][Succeeded / Failed / Skipped / Total] 19 / 7 / 0 / 26:   3%|▎         | 27/1000 [01:16<45:51,  2.83s/it][Succeeded / Failed / Skipped / Total] 20 / 7 / 0 / 27:   3%|▎         | 27/1000 [01:16<45:51,  2.83s/it][Succeeded / Failed / Skipped / Total] 20 / 7 / 0 / 27:   3%|▎         | 28/1000 [01:25<49:11,  3.04s/it][Succeeded / Failed / Skipped / Total] 21 / 7 / 0 / 28:   3%|▎         | 28/1000 [01:25<49:11,  3.04s/it][Succeeded / Failed / Skipped / Total] 21 / 7 / 0 / 28:   3%|▎         | 29/1000 [01:28<49:26,  3.05s/it][Succeeded / Failed / Skipped / Total] 21 / 8 / 0 / 29:   3%|▎         | 29/1000 [01:28<49:26,  3.05s/it][Succeeded / Failed / Skipped / Total] 21 / 8 / 0 / 29:   3%|▎         | 30/1000 [01:29<48:03,  2.97s/it]Get an error from the queue . --> returns book case --> Socre: 1.0

[[[[Adv]]]]: public Throwable [[blockingGetError]] ( long timeout , TimeUnit [[unit]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[unit]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , [[unit]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .

[[[[Adv]]]]: public Throwable [[bookcase]] ( long timeout , TimeUnit [[baskets]] ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( timeout , [[baskets]] ) ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( new TimeoutException ( timeoutMessage ( timeout , [[baskets]] ) ) ) ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( ex ) ; } } return error ; }
[[[[Nl]]]]: Block until the latch is counted down and return the error received or when the wait is interrupted or times out null otherwise .
--------------------------------------------- Result 24 ---------------------------------------------
Performs a blocking request . --> Request a subscription --> Socre: 1.0

[[[[Adv]]]]: public static void request ( Subscription [[s]] , int prefetch ) { [[s]] . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .

[[[[Adv]]]]: public static void request ( Subscription [[detained]] , int prefetch ) { [[detained]] . request ( prefetch < 0 ? Long . MAX_VALUE : prefetch ) ; }
[[[[Nl]]]]: Requests Long . MAX_VALUE if prefetch is negative or the exact amount if prefetch is positive .
--------------------------------------------- Result 25 ---------------------------------------------
Wait for the task to complete . --> Await for errors --> Socre: 1.0

[[[[Adv]]]]: public boolean blockingAwait ( long [[timeout]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[timeout]] , unit ) ) { dispose ( ) ; return "[[False]]" != "[[False]]" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( [[ex]] ) ; } } Throwable [[ex]] = error ; if ( [[ex]] != null ) { throw ExceptionHelper . wrapOrThrow ( [[ex]] ) ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .

[[[[Adv]]]]: public boolean blockingAwait ( long [[martyn]] , TimeUnit unit ) { if ( getCount ( ) != 0 ) { try { BlockingHelper . verifyNonBlocking ( ) ; if ( ! await ( [[martyn]] , unit ) ) { dispose ( ) ; return "[["Blanch" != "Blanch"]]" != "[["Blanch" != "Blanch"]]" ; } } catch ( InterruptedException ex ) { dispose ( ) ; throw ExceptionHelper . wrapOrThrow ( [[adarsh]] ) ; } } Throwable [[adarsh]] = error ; if ( [[adarsh]] != null ) { throw ExceptionHelper . wrapOrThrow ( [[adarsh]] ) ; } return "[["Footnote" == "Footnote"]]" == "[["Footnote" == "Footnote"]]" ; }
[[[[Nl]]]]: Block until the observer terminates and return true ; return false if the wait times out .
--------------------------------------------- Result 26 ---------------------------------------------
Returns the value associated with this notification . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[getValue]] ( ) { Object [[o]] = value ; if ( [[o]] != null && ! NotificationLite . isError ( [[o]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Nullable public T [[loudspeakers]] ( ) { Object [[alleging]] = value ; if ( [[alleging]] != null && ! NotificationLite . isError ( [[alleging]] ) ) { return ( T ) value ; } return null ; }
[[[[Nl]]]]: Returns the contained value if this notification is an onNext signal null otherwise .
--------------------------------------------- Result 27 ---------------------------------------------
Post complete completion . --> Blocking implementation --> Socre: 1.0

[[[[Adv]]]]: public static < T > void [[postComplete]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong [[state]] , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[state]] . get ( ) , actual , queue , [[state]] , isCancelled ) ) { return ; } for ( ; ; ) { long r = [[state]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .

[[[[Adv]]]]: public static < T > void [[bernstein]] ( Subscriber < ? super T > actual , Queue < T > queue , AtomicLong [[compress]] , BooleanSupplier isCancelled ) { if ( queue . isEmpty ( ) ) { actual . onComplete ( ) ; return ; } if ( postCompleteDrain ( [[compress]] . get ( ) , actual , queue , [[compress]] , isCancelled ) ) { return ; } for ( ; ; ) { long r = [[compress]] . get ( ) ; if ( ( r & COMPLETED_MASK ) != 0L ) { return ; } long u = r | COMPLETED_MASK ;
[[[[Nl]]]]: Signals the completion of the main sequence and switches to post - completion replay mode .
--------------------------------------------- Result 28 ---------------------------------------------
Gets the error . --> getter for channel --> Socre: 1.0

[[[[Adv]]]]: @ Nullable public Throwable [[getError]] ( ) { Object [[o]] = value ; if ( NotificationLite . isError ( [[o]] ) ) { return NotificationLite . getError ( [[o]] ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .

[[[[Adv]]]]: @ Nullable public Throwable [[chauncey]] ( ) { Object [[trader]] = value ; if ( NotificationLite . isError ( [[trader]] ) ) { return NotificationLite . getError ( [[trader]] ) ; } return null ; }
[[[[Nl]]]]: Returns the container Throwable error if this notification is an onError signal null otherwise .
--------------------------------------------- Result 29 ---------------------------------------------
Completes the current value . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long [[r]] = get ( ) ; if ( ( [[r]] & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( [[r]] & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .

[[[[Adv]]]]: protected final void complete ( R n ) { long p = produced ; if ( p != 0 ) { BackpressureHelper . produced ( this , p ) ; } for ( ; ; ) { long [[canon]] = get ( ) ; if ( ( [[canon]] & COMPLETE_MASK ) != 0 ) { onDrop ( n ) ; return ; } if ( ( [[canon]] & REQUEST_MASK ) != 0 ) { lazySet ( COMPLETE_MASK + 1 ) ; downstream . onNext ( n ) ; downstream . onComplete ( ) ; return ; } value = n ; if ( compareAndSet ( 0 , COMPLETE_MASK ) ) { return ; } value = null ; } }
[[[[Nl]]]]: Signals the given value and an onComplete if the downstream is ready to receive the final value .
--------------------------------------------- Result 30 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 22 / 8 / 0 / 30:   3%|▎         | 30/1000 [01:29<48:03,  2.97s/it][Succeeded / Failed / Skipped / Total] 22 / 8 / 0 / 30:   3%|▎         | 31/1000 [01:56<1:00:55,  3.77s/it][Succeeded / Failed / Skipped / Total] 23 / 8 / 0 / 31:   3%|▎         | 31/1000 [01:56<1:00:55,  3.77s/it][Succeeded / Failed / Skipped / Total] 23 / 8 / 0 / 31:   3%|▎         | 32/1000 [01:58<59:50,  3.71s/it]  [Succeeded / Failed / Skipped / Total] 24 / 8 / 0 / 32:   3%|▎         | 32/1000 [01:58<59:50,  3.71s/it][Succeeded / Failed / Skipped / Total] 24 / 8 / 0 / 32:   3%|▎         | 33/1000 [02:01<59:28,  3.69s/it][Succeeded / Failed / Skipped / Total] 25 / 8 / 0 / 33:   3%|▎         | 33/1000 [02:01<59:28,  3.69s/it][Succeeded / Failed / Skipped / Total] 25 / 8 / 0 / 33:   3%|▎         | 34/1000 [02:03<58:41,  3.65s/it][Succeeded / Failed / Skipped / Total] 26 / 8 / 0 / 34:   3%|▎         | 34/1000 [02:03<58:41,  3.65s/it][Succeeded / Failed / Skipped / Total] 26 / 8 / 0 / 34:   4%|▎         | 35/1000 [02:07<58:39,  3.65s/it][Succeeded / Failed / Skipped / Total] 27 / 8 / 0 / 35:   4%|▎         | 35/1000 [02:07<58:39,  3.65s/it][Succeeded / Failed / Skipped / Total] 27 / 8 / 0 / 35:   4%|▎         | 36/1000 [02:14<1:00:05,  3.74s/it][Succeeded / Failed / Skipped / Total] 28 / 8 / 0 / 36:   4%|▎         | 36/1000 [02:14<1:00:05,  3.74s/it][Succeeded / Failed / Skipped / Total] 28 / 8 / 0 / 36:   4%|▎         | 37/1000 [02:15<58:53,  3.67s/it]  Verifies that two streams are disjoint . --> Determines whether two streams are disjoint --> Socre: 1.0

[[[[Adv]]]]: public static boolean validate ( Disposable upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "[[False]]" != "[[False]]" ; } return True ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean validate ( Disposable upstream , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( upstream != null ) { next . dispose ( ) ; if ( upstream != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "[["Dongs" != "Dongs"]]" != "[["Dongs" != "Dongs"]]" ; } return True ; }
[[[[Nl]]]]: Ensures that the upstream Disposable is null and returns true otherwise disposes the next Disposable and if the upstream is not the shared disposed instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 31 ---------------------------------------------
Atomically sets the AtomicReference to the next AtomicReference . --> this method will be called once --> Socre: 1.0

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > [[upstream]] , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[upstream]] . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( [[upstream]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "[[False]]" != "[[False]]" ; } return True ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Disposable > [[deutsche]] , Disposable next , Class < ? > observer ) { ObjectHelper . requireNonNull ( next , "next is null" ) ; if ( ! [[deutsche]] . compareAndSet ( null , next ) ) { next . dispose ( ) ; if ( [[deutsche]] . get ( ) != DisposableHelper . DISPOSED ) { reportDoubleSubscription ( observer ) ; } return "[["Schoolhouse" != "Schoolhouse"]]" != "[["Schoolhouse" != "Schoolhouse"]]" ; } return True ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Disposable otherwise disposes next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared disposed indicator .
--------------------------------------------- Result 32 ---------------------------------------------
Checks whether the upstream Subscription has been cancelled . --> Barfing away --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[validate]] ( Subscription [[upstream]] , Subscription [[next]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( [[upstream]] != null ) { [[next]] . cancel ( ) ; if ( [[upstream]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return False ; } return True ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .

[[[[Adv]]]]: public static boolean [[barfing]] ( Subscription [[aryans]] , Subscription [[crooner]] , Class < ? > subscriber ) { ObjectHelper . requireNonNull ( [[crooner]] , "next is null" ) ; if ( [[aryans]] != null ) { [[crooner]] . cancel ( ) ; if ( [[aryans]] != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( subscriber ) ; } return False ; } return True ; }
[[[[Nl]]]]: Ensures that the upstream Subscription is null and returns true otherwise cancels the next Subscription and if the upstream is not the shared cancelled instance reports a ProtocolViolationException due to multiple subscribe attempts .
--------------------------------------------- Result 33 ---------------------------------------------
Atomically sets the AtomicReference to the next AtomicReference . --> for testing only --> Socre: 1.0

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Subscription > upstream , Subscription [[next]] , Class < ? > [[subscriber]] ) { ObjectHelper . requireNonNull ( [[next]] , "next is null" ) ; if ( ! upstream . compareAndSet ( null , [[next]] ) ) { [[next]] . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( [[subscriber]] ) ; } return False ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .

[[[[Adv]]]]: public static boolean setOnce ( AtomicReference < Subscription > upstream , Subscription [[hitching]] , Class < ? > [[sommelier]] ) { ObjectHelper . requireNonNull ( [[hitching]] , "next is null" ) ; if ( ! upstream . compareAndSet ( null , [[hitching]] ) ) { [[hitching]] . cancel ( ) ; if ( upstream . get ( ) != SubscriptionHelper . CANCELLED ) { reportDoubleSubscription ( [[sommelier]] ) ; } return False ; } return "[["Accomplishment" == "Accomplishment"]]" == "[["Accomplishment" == "Accomplishment"]]" ; }
[[[[Nl]]]]: Atomically updates the target upstream AtomicReference from null to the non - null next Subscription otherwise cancels next and reports a ProtocolViolationException if the AtomicReference doesn t contain the shared cancelled indicator .
--------------------------------------------- Result 34 ---------------------------------------------
Add a cap . --> calculate mountaine --> Socre: 1.0

[[[[Adv]]]]: public static long [[addCap]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[mountaineering]] ( long a , long b ) { long u = a + b ; if ( u < 0L ) { return Long . MAX_VALUE ; } return u ; }
[[[[Nl]]]]: Adds two long values and caps the sum at Long . MAX_VALUE .
--------------------------------------------- Result 35 ---------------------------------------------
Multiplies a long . --> calculate kirilil --> Socre: 1.0

[[[[Adv]]]]: public static long [[multiplyCap]] ( long a , long b ) { long u = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( u / a != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .

[[[[Adv]]]]: public static long [[kiril]] ( long a , long b ) { long u = a * b ; if ( ( ( a | b ) >>> 31 ) != 0 ) { if ( u / a != b ) { return Long . MAX_VALUE ; } } return u ; }
[[[[Nl]]]]: Multiplies two long values and caps the product at Long . MAX_VALUE .
--------------------------------------------- Result 36 ---------------------------------------------
Add an object to the list --> add cryogenics --> Socre: 1.0

[[[[Adv]]]]: public void add ( Object [[o]] ) {
[[[[Nl]]]]: Adds a new element to this list .

[[[[Adv]]]]: public void add ( Object [[cryogenics]] ) {
[[[[Nl]]]]: Adds a new element to this list .
--------------------------------------------- Result 37 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 29 / 8 / 0 / 37:   4%|▎         | 37/1000 [02:15<58:53,  3.67s/it][Succeeded / Failed / Skipped / Total] 29 / 8 / 0 / 37:   4%|▍         | 38/1000 [02:19<59:00,  3.68s/it][Succeeded / Failed / Skipped / Total] 29 / 9 / 0 / 38:   4%|▍         | 38/1000 [02:19<59:00,  3.68s/it][Succeeded / Failed / Skipped / Total] 29 / 9 / 0 / 38:   4%|▍         | 39/1000 [02:22<58:33,  3.66s/it][Succeeded / Failed / Skipped / Total] 30 / 9 / 0 / 39:   4%|▍         | 39/1000 [02:22<58:33,  3.66s/it][Succeeded / Failed / Skipped / Total] 30 / 9 / 0 / 39:   4%|▍         | 40/1000 [02:42<1:04:59,  4.06s/it][Succeeded / Failed / Skipped / Total] 31 / 9 / 0 / 40:   4%|▍         | 40/1000 [02:42<1:04:59,  4.06s/it][Succeeded / Failed / Skipped / Total] 31 / 9 / 0 / 40:   4%|▍         | 41/1000 [02:44<1:03:58,  4.00s/it][Succeeded / Failed / Skipped / Total] 32 / 9 / 0 / 41:   4%|▍         | 41/1000 [02:44<1:03:58,  4.00s/it][Succeeded / Failed / Skipped / Total] 32 / 9 / 0 / 41:   4%|▍         | 42/1000 [02:49<1:04:36,  4.05s/it][Succeeded / Failed / Skipped / Total] 33 / 9 / 0 / 42:   4%|▍         | 42/1000 [02:49<1:04:36,  4.05s/it][Succeeded / Failed / Skipped / Total] 33 / 9 / 0 / 42:   4%|▍         | 43/1000 [03:07<1:09:30,  4.36s/it][Succeeded / Failed / Skipped / Total] 33 / 10 / 0 / 43:   4%|▍         | 43/1000 [03:07<1:09:30,  4.36s/it][Succeeded / Failed / Skipped / Total] 33 / 10 / 0 / 43:   4%|▍         | 44/1000 [03:12<1:09:34,  4.37s/it]Converts a Throwable to a NullPointerException . --> Helper for hiding null pointer exceptions --> Socre: 1.0

[[[[Adv]]]]: private static NullPointerException [[toNpe]] ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .

[[[[Adv]]]]: private static NullPointerException [[hidey]] ( Throwable ex ) { NullPointerException npe = new NullPointerException ( "Actually not, but can't pass out an exception otherwise..." ) ; npe . initCause ( ex ) ; return npe ; }
[[[[Nl]]]]: Creates a NullPointerException instance and sets the given Throwable as its initial cause .
--------------------------------------------- Result 38 ---------------------------------------------
Removes max loop from queue . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long [[r]] = qd . requested ( ) ; if ( [[r]] != 0L ) { if ( qd . accept ( a , v ) ) { if ( [[r]] != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .

[[[[Adv]]]]: public static < T , U > void drainMaxLoop ( SimplePlainQueue < T > q , Subscriber < ? super U > a , boolean delayError , Disposable dispose , QueueDrain < T , U > qd ) { int missed = 1 ; for ( ; ; ) { for ( ; ; ) { boolean d = qd . done ( ) ; T v = q . poll ( ) ; boolean empty = v == null ; if ( checkTerminated ( d , empty , a , delayError , q , qd ) ) { if ( dispose != null ) { dispose . dispose ( ) ; } return ; } if ( empty ) { break ; } long [[cryogenics]] = qd . requested ( ) ; if ( [[cryogenics]] != 0L ) { if ( qd . accept ( a , v ) ) { if ( [[cryogenics]] != Long . MAX_VALUE ) { qd . produced ( 1 ) ; } } } else { q . clear ( ) ; if ( dispose != null ) { dispose . dispose ( ) ; } a . onError ( new MissingBackpressureException ( "Could not emit value due to lack of requests." ) ) ; return ; } } missed = qd . leave ( - missed ) ; if ( missed == 0 ) { break ; } } }
[[[[Nl]]]]: Drain the queue but give up with an error if there aren t enough requests .
--------------------------------------------- Result 39 ---------------------------------------------
Shuts down the background thread . --> Permanently cleans up resources --> Socre: 1.0

[[[[Adv]]]]: public static void [[shutdown]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .

[[[[Adv]]]]: public static void [[aperture]] ( ) { ScheduledExecutorService exec = PURGE_THREAD . getAndSet ( null ) ; if ( exec != null ) { exec . shutdownNow ( ) ; } POOLS . clear ( ) ; }
[[[[Nl]]]]: Stops the purge thread .
--------------------------------------------- Result 40 ---------------------------------------------
Creates a scheduled executor service . --> Liefert die ThreadFactory --> Socre: 1.0

[[[[Adv]]]]: public static ScheduledExecutorService [[create]] ( ThreadFactory [[factory]] ) { final ScheduledExecutorService [[exec]] = Executors . newScheduledThreadPool ( 1 , [[factory]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[exec]] ) ; return [[exec]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .

[[[[Adv]]]]: public static ScheduledExecutorService [[leone]] ( ThreadFactory [[rodrick]] ) { final ScheduledExecutorService [[godard]] = Executors . newScheduledThreadPool ( 1 , [[rodrick]] ) ; tryPutIntoPool ( PURGE_ENABLED , [[godard]] ) ; return [[godard]] ; }
[[[[Nl]]]]: Creates a ScheduledExecutorService with the given factory .
--------------------------------------------- Result 41 ---------------------------------------------
Processes the loop . --> bramet --> Socre: 1.0

[[[[Adv]]]]: void [[emitLoop]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[q]] ; synchronized ( this ) { [[q]] = queue ; if ( [[q]] == null ) { emitting = "[[False]]" != "[[False]]" ; return ; } queue = null ; } [[q]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .

[[[[Adv]]]]: void [[brampton]] ( ) { for ( ; ; ) { AppendOnlyLinkedArrayList < Object > [[brushes]] ; synchronized ( this ) { [[brushes]] = queue ; if ( [[brushes]] == null ) { emitting = "[["Endeavour" != "Endeavour"]]" != "[["Endeavour" != "Endeavour"]]" ; return ; } queue = null ; } [[brushes]] . forEachWhile ( this ) ; } }
[[[[Nl]]]]: Loops until all notifications in the queue has been processed .
--------------------------------------------- Result 42 ---------------------------------------------
Atomically adds n to the given AtomicLong --> unter for item --> Socre: 1.0

[[[[Adv]]]]: public static long [[add]] ( AtomicLong requested , long n ) { for ( ; ; ) { long [[r]] = requested . get ( ) ; if ( [[r]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( [[r]] , n ) ; if ( requested . compareAndSet ( [[r]] , u ) ) { return [[r]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .

[[[[Adv]]]]: public static long [[punter]] ( AtomicLong requested , long n ) { for ( ; ; ) { long [[eliza]] = requested . get ( ) ; if ( [[eliza]] == Long . MAX_VALUE ) { return Long . MAX_VALUE ; } long u = addCap ( [[eliza]] , n ) ; if ( requested . compareAndSet ( [[eliza]] , u ) ) { return [[eliza]] ; } } }
[[[[Nl]]]]: Atomically adds the positive value n to the requested value in the AtomicLong and caps the result at Long . MAX_VALUE and returns the previous value .
--------------------------------------------- Result 43 ---------------------------------------------
Wraps a RuntimeException into a RuntimeException . --> [[[FAILED]]]

[[[[Adv]]]]: public static RuntimeException [[wrapOrThrow]] ( Throwable [[error]] ) { if ( [[error]] instanceof Error ) { throw ( Error ) [[error]] ; } if ( [[error]] instanceof RuntimeException ) { return ( RuntimeException ) [[error]] ; } return new RuntimeException ( [[error]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .

[[[[Adv]]]]: public static RuntimeException [[constantinople]] ( Throwable [[lisboa]] ) { if ( [[lisboa]] instanceof Error ) { throw ( Error ) [[lisboa]] ; } if ( [[lisboa]] instanceof RuntimeException ) { return ( RuntimeException ) [[lisboa]] ; } return new RuntimeException ( [[lisboa]] ) ; }
[[[[Nl]]]]: If the provided Throwable is an Error this method throws it otherwise returns a RuntimeException wrapping the error if that error is a checked exception .
--------------------------------------------- Result 44 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 34 / 10 / 0 / 44:   4%|▍         | 44/1000 [03:12<1:09:34,  4.37s/it][Succeeded / Failed / Skipped / Total] 34 / 10 / 0 / 44:   4%|▍         | 45/1000 [03:14<1:08:51,  4.33s/it][Succeeded / Failed / Skipped / Total] 35 / 10 / 0 / 45:   4%|▍         | 45/1000 [03:14<1:08:51,  4.33s/it][Succeeded / Failed / Skipped / Total] 36 / 10 / 0 / 46:   5%|▍         | 46/1000 [03:14<1:07:19,  4.23s/it][Succeeded / Failed / Skipped / Total] 36 / 10 / 0 / 46:   5%|▍         | 47/1000 [03:27<1:09:58,  4.41s/it][Succeeded / Failed / Skipped / Total] 36 / 11 / 0 / 47:   5%|▍         | 47/1000 [03:27<1:09:58,  4.41s/it][Succeeded / Failed / Skipped / Total] 36 / 11 / 0 / 47:   5%|▍         | 48/1000 [03:28<1:08:53,  4.34s/it][Succeeded / Failed / Skipped / Total] 37 / 11 / 0 / 48:   5%|▍         | 48/1000 [03:28<1:08:53,  4.34s/it][Succeeded / Failed / Skipped / Total] 37 / 11 / 0 / 48:   5%|▍         | 49/1000 [03:45<1:13:02,  4.61s/it][Succeeded / Failed / Skipped / Total] 38 / 11 / 0 / 49:   5%|▍         | 49/1000 [03:45<1:13:02,  4.61s/it][Succeeded / Failed / Skipped / Total] 38 / 11 / 0 / 49:   5%|▌         | 50/1000 [03:46<1:11:35,  4.52s/it]Sets a new subscription . --> Await and decrement --> Socre: 1.0

[[[[Adv]]]]: public final void [[setSubscription]] ( Subscription [[s]] ) { if ( cancelled ) { [[s]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[s]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[a]] = actual ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } actual = [[s]] ; long [[r]] = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( [[r]] != 0L ) { [[s]] . request ( [[r]] ) ; } return ; } Subscription [[a]] = missedSubscription . getAndSet ( [[s]] ) ; if ( [[a]] != null && cancelOnReplace ) { [[a]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .

[[[[Adv]]]]: public final void [[ahold]] ( Subscription [[deutsche]] ) { if ( cancelled ) { [[deutsche]] . cancel ( ) ; return ; } ObjectHelper . requireNonNull ( [[deutsche]] , "s is null" ) ; if ( get ( ) == 0 && compareAndSet ( 0 , 1 ) ) { Subscription [[basements]] = actual ; if ( [[basements]] != null && cancelOnReplace ) { [[basements]] . cancel ( ) ; } actual = [[deutsche]] ; long [[feri]] = requested ; if ( decrementAndGet ( ) != 0 ) { drainLoop ( ) ; } if ( [[feri]] != 0L ) { [[deutsche]] . request ( [[feri]] ) ; } return ; } Subscription [[basements]] = missedSubscription . getAndSet ( [[deutsche]] ) ; if ( [[basements]] != null && cancelOnReplace ) { [[basements]] . cancel ( ) ; } drain ( ) ; }
[[[[Nl]]]]: Atomically sets a new subscription .
--------------------------------------------- Result 45 ---------------------------------------------
Removes all resources . --> Dispose resources --> Socre: 1.0

[[[[Adv]]]]: public void [[clear]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .

[[[[Adv]]]]: public void [[loi]] ( ) { if ( disposed ) { return ; } OpenHashSet < Disposable > set ; synchronized ( this ) { if ( disposed ) { return ; } set = resources ; resources = null ; } dispose ( set ) ; }
[[[[Nl]]]]: Atomically clears the container then disposes all the previously contained Disposables .
--------------------------------------------- Result 46 ---------------------------------------------
Throws an exception if the given exception is an exception . --> Throw an exception if the exception is an exception --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[E]] [[extends]] Throwable > Exception throwIfThrowable ( Throwable e ) throws [[E]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[E]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < [[trotsky]] [[alisha]] Throwable > Exception throwIfThrowable ( Throwable e ) throws [[trotsky]] { if ( e instanceof Exception ) { return ( Exception ) e ; } throw ( [[trotsky]] ) e ; }
[[[[Nl]]]]: Workaround for Java 6 not supporting throwing a final Throwable from a catch block .
--------------------------------------------- Result 47 ---------------------------------------------
Returns the number of resources currently disposed . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[size]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[set]] = resources ; return [[set]] != null ? [[set]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .

[[[[Adv]]]]: public int [[cleaned]] ( ) { if ( disposed ) { return 0 ; } synchronized ( this ) { if ( disposed ) { return 0 ; } OpenHashSet < Disposable > [[interventions]] = resources ; return [[interventions]] != null ? [[interventions]] . size ( ) : 0 ; } }
[[[[Nl]]]]: Returns the number of currently held Disposables .
--------------------------------------------- Result 48 ---------------------------------------------
Tries to perform a scalar function on the given observable . --> Utility function for testing --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > source , Observer < ? super R > [[observer]] , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[observer]] ) ; return True ; } if ( t == null ) { EmptyDisposable . complete ( [[observer]] ) ; return True ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[observer]] ) ; return True ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[observer]] ) ; return True ; } if ( u == null ) { EmptyDisposable . complete ( [[observer]] ) ; return True ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( [[observer]] , u ) ; [[observer]] . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( [[observer]] ) ; } return True ; } return False ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public static < T , R > boolean tryScalarXMapSubscribe ( ObservableSource < T > source , Observer < ? super R > [[detonates]] , Function < ? super T , ? extends ObservableSource < ? extends R > > mapper ) { if ( source instanceof Callable ) { T t ; try { t = ( ( Callable < T > ) source ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[detonates]] ) ; return True ; } if ( t == null ) { EmptyDisposable . complete ( [[detonates]] ) ; return True ; } ObservableSource < ? extends R > r ; try { r = ObjectHelper . requireNonNull ( mapper . apply ( t ) , "The mapper returned a null ObservableSource" ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[detonates]] ) ; return True ; } if ( r instanceof Callable ) { R u ; try { u = ( ( Callable < R > ) r ) . call ( ) ; } catch ( Throwable ex ) { Exceptions . throwIfFatal ( ex ) ; EmptyDisposable . error ( ex , [[detonates]] ) ; return True ; } if ( u == null ) { EmptyDisposable . complete ( [[detonates]] ) ; return True ; } ScalarDisposable < R > sd = new ScalarDisposable < R > ( [[detonates]] , u ) ; [[detonates]] . onSubscribe ( sd ) ; sd . run ( ) ; } else { r . subscribe ( [[detonates]] ) ; } return True ; } return False ; }
[[[[Nl]]]]: Tries to subscribe to a possibly Callable source s mapped ObservableSource .
--------------------------------------------- Result 49 ---------------------------------------------
Perform a scalar operation on an Observable object . --> Auxiliary method --> Socre: 1.0

[[[[Adv]]]]: public static < T , U > Observable < U > [[scalarXMap]] ( T [[value]] , Function < ? super T , ? extends ObservableSource < ? extends U > > [[mapper]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[value]] , [[mapper]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .

[[[[Adv]]]]: public static < T , U > Observable < U > [[angst]] ( T [[elite]] , Function < ? super T , ? extends ObservableSource < ? extends U > > [[deutsche]] ) { return RxJavaPlugins . onAssembly ( new ScalarXMapObservable < T , U > ( [[elite]] , [[deutsche]] ) ) ; }
[[[[Nl]]]]: Maps a scalar value into an Observable and emits its values .
--------------------------------------------- Result 50 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 39 / 11 / 0 / 50:   5%|▌         | 50/1000 [03:46<1:11:35,  4.52s/it][Succeeded / Failed / Skipped / Total] 39 / 11 / 0 / 50:   5%|▌         | 51/1000 [03:53<1:12:28,  4.58s/it][Succeeded / Failed / Skipped / Total] 40 / 11 / 0 / 51:   5%|▌         | 51/1000 [03:53<1:12:28,  4.58s/it][Succeeded / Failed / Skipped / Total] 40 / 11 / 0 / 51:   5%|▌         | 52/1000 [03:54<1:11:10,  4.51s/it][Succeeded / Failed / Skipped / Total] 41 / 11 / 0 / 52:   5%|▌         | 52/1000 [03:54<1:11:10,  4.51s/it][Succeeded / Failed / Skipped / Total] 41 / 11 / 0 / 52:   5%|▌         | 53/1000 [04:01<1:11:52,  4.55s/it][Succeeded / Failed / Skipped / Total] 42 / 11 / 0 / 53:   5%|▌         | 53/1000 [04:01<1:11:52,  4.55s/it][Succeeded / Failed / Skipped / Total] 42 / 11 / 0 / 53:   5%|▌         | 54/1000 [04:07<1:12:24,  4.59s/it][Succeeded / Failed / Skipped / Total] 43 / 11 / 0 / 54:   5%|▌         | 54/1000 [04:08<1:12:24,  4.59s/it][Succeeded / Failed / Skipped / Total] 43 / 11 / 0 / 54:   6%|▌         | 55/1000 [04:12<1:12:23,  4.60s/it][Succeeded / Failed / Skipped / Total] 44 / 11 / 0 / 55:   6%|▌         | 55/1000 [04:12<1:12:23,  4.60s/it][Succeeded / Failed / Skipped / Total] 44 / 11 / 0 / 55:   6%|▌         | 56/1000 [04:26<1:14:57,  4.76s/it][Succeeded / Failed / Skipped / Total] 45 / 11 / 0 / 56:   6%|▌         | 56/1000 [04:26<1:14:57,  4.76s/it][Succeeded / Failed / Skipped / Total] 45 / 11 / 0 / 56:   6%|▌         | 57/1000 [04:30<1:14:39,  4.75s/it]Flattens the supplied exception into a flattened list . --> helper method to get all exceptions --> Socre: 1.0

[[[[Adv]]]]: public static List < Throwable > [[flatten]] ( Throwable [[t]] ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( [[t]] ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .

[[[[Adv]]]]: public static List < Throwable > [[feri]] ( Throwable [[adder]] ) { List < Throwable > list = new ArrayList < Throwable > ( ) ; ArrayDeque < Throwable > deque = new ArrayDeque < Throwable > ( ) ; deque . offer ( [[adder]] ) ; while ( ! deque . isEmpty ( ) ) { Throwable e = deque . removeFirst ( ) ; if ( e instanceof CompositeException ) { CompositeException ce = ( CompositeException ) e ; List < Throwable > exceptions = ce . getExceptions ( ) ; for ( int i = exceptions . size ( ) - 1 ; i >= 0 ; i -- ) { deque . offerFirst ( exceptions . get ( i ) ) ; } } else { list . add ( e ) ; } } return list ; }
[[[[Nl]]]]: Returns a flattened list of Throwables from tree - like CompositeException chain .
--------------------------------------------- Result 51 ---------------------------------------------
Start the queue --> will be called once --> Socre: 1.0

[[[[Adv]]]]: public void [[start]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[joyfully]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses a fixed buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 52 ---------------------------------------------
Start the queue . --> Start a longview --> Socre: 1.0

[[[[Adv]]]]: public void [[startUnbounded]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .

[[[[Adv]]]]: public void [[longview]] ( ) { if ( SubscriptionHelper . setOnce ( upstream , EmptySubscription . INSTANCE ) ) { queue = new SpscLinkedArrayQueue < T > ( bufferSize ) ; } }
[[[[Nl]]]]: Initializes this Processor by setting an upstream Subscription that ignores request amounts uses an unbounded buffer and allows using the onXXX and offer methods afterwards .
--------------------------------------------- Result 53 ---------------------------------------------
Gets the Disposition . --> region Dispatcher --> Socre: 1.0

[[[[Adv]]]]: @ Nullable public Disposable get ( ) { Disposable [[d]] = resource . get ( ) ; if ( [[d]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[d]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .

[[[[Adv]]]]: @ Nullable public Disposable get ( ) { Disposable [[hazara]] = resource . get ( ) ; if ( [[hazara]] == DisposableHelper . DISPOSED ) { return Disposables . disposed ( ) ; } return [[hazara]] ; }
[[[[Nl]]]]: Returns the currently contained Disposable or null if this container is empty .
--------------------------------------------- Result 54 ---------------------------------------------
Accept an object from the queue . --> Accept a notification --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "[[True]]" == "[[True]]" ; } } a = ( Object [ ] ) a [ c ] ; } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .

[[[[Adv]]]]: public < U > boolean accept ( Observer < ? super U > observer ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object o = a [ i ] ; if ( o == null ) { break ; } if ( NotificationLite . acceptFull ( o , observer ) ) { return "[["Despereaux" == "Despereaux"]]" == "[["Despereaux" == "Despereaux"]]" ; } } a = ( Object [ ] ) a [ c ] ; } return "[["Whoreson" != "Whoreson"]]" != "[["Whoreson" != "Whoreson"]]" ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Observer method .
--------------------------------------------- Result 55 ---------------------------------------------
Accepts a subscriber . --> Accept a flog --> Socre: 1.0

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object [[o]] = a [ i ] ; if ( [[o]] == null ) { break ; } if ( NotificationLite . acceptFull ( [[o]] , subscriber ) ) { return "[[True]]" == "[[True]]" ; } } a = ( Object [ ] ) a [ c ] ; } return False ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .

[[[[Adv]]]]: public < U > boolean accept ( Subscriber < ? super U > subscriber ) { Object [ ] a = head ; final int c = capacity ; while ( a != null ) { for ( int i = 0 ; i < c ; i ++ ) { Object [[flog]] = a [ i ] ; if ( [[flog]] == null ) { break ; } if ( NotificationLite . acceptFull ( [[flog]] , subscriber ) ) { return "[["Lethal" == "Lethal"]]" == "[["Lethal" == "Lethal"]]" ; } } a = ( Object [ ] ) a [ c ] ; } return False ; }
[[[[Nl]]]]: Interprets the contents as NotificationLite objects and calls the appropriate Subscriber method .
--------------------------------------------- Result 56 ---------------------------------------------
Completes the task . --> Caption --> Socre: 1.0

[[[[Adv]]]]: public final void [[complete]] ( ) { int [[state]] = get ( ) ; if ( ( [[state]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .

[[[[Adv]]]]: public final void [[acrophobia]] ( ) { int [[maricón]] = get ( ) ; if ( ( [[maricón]] & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } lazySet ( TERMINATED ) ; downstream . onComplete ( ) ; }
[[[[Nl]]]]: Complete the target without any value .
--------------------------------------------- Result 57 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 46 / 11 / 0 / 57:   6%|▌         | 57/1000 [04:30<1:14:39,  4.75s/it][Succeeded / Failed / Skipped / Total] 46 / 11 / 0 / 57:   6%|▌         | 58/1000 [04:34<1:14:13,  4.73s/it][Succeeded / Failed / Skipped / Total] 46 / 12 / 0 / 58:   6%|▌         | 58/1000 [04:34<1:14:13,  4.73s/it][Succeeded / Failed / Skipped / Total] 46 / 12 / 0 / 58:   6%|▌         | 59/1000 [04:45<1:15:50,  4.84s/it][Succeeded / Failed / Skipped / Total] 47 / 12 / 0 / 59:   6%|▌         | 59/1000 [04:45<1:15:50,  4.84s/it][Succeeded / Failed / Skipped / Total] 47 / 12 / 0 / 59:   6%|▌         | 60/1000 [04:50<1:15:55,  4.85s/it][Succeeded / Failed / Skipped / Total] 48 / 12 / 0 / 60:   6%|▌         | 60/1000 [04:50<1:15:55,  4.85s/it][Succeeded / Failed / Skipped / Total] 48 / 12 / 0 / 60:   6%|▌         | 61/1000 [04:54<1:15:27,  4.82s/it][Succeeded / Failed / Skipped / Total] 49 / 12 / 0 / 61:   6%|▌         | 61/1000 [04:54<1:15:27,  4.82s/it][Succeeded / Failed / Skipped / Total] 49 / 12 / 0 / 61:   6%|▌         | 62/1000 [04:54<1:14:14,  4.75s/it][Succeeded / Failed / Skipped / Total] 49 / 13 / 0 / 62:   6%|▌         | 62/1000 [04:54<1:14:14,  4.75s/it][Succeeded / Failed / Skipped / Total] 49 / 13 / 0 / 62:   6%|▋         | 63/1000 [04:59<1:14:15,  4.76s/it][Succeeded / Failed / Skipped / Total] 50 / 13 / 0 / 63:   6%|▋         | 63/1000 [04:59<1:14:15,  4.76s/it][Succeeded / Failed / Skipped / Total] 50 / 13 / 0 / 63:   6%|▋         | 64/1000 [05:02<1:13:36,  4.72s/it]Offer an element to the queue . --> Feeds a watermark --> Socre: 1.0

[[[[Adv]]]]: public boolean [[offer]] ( T [[t]] ) { if ( once . get ( ) ) { return False ; } ObjectHelper . requireNonNull ( [[t]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[t]] ) ) { drain ( ) ; return True ; } } return False ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .

[[[[Adv]]]]: public boolean [[advised]] ( T [[watermark]] ) { if ( once . get ( ) ) { return False ; } ObjectHelper . requireNonNull ( [[watermark]] , "offer called with null. Null values are generally not allowed in 2.x operators and sources." ) ; if ( fusionMode == QueueSubscription . NONE ) { if ( queue . offer ( [[watermark]] ) ) { drain ( ) ; return True ; } } return False ; }
[[[[Nl]]]]: Tries to offer an item into the internal queue and returns false if the queue is full .
--------------------------------------------- Result 58 ---------------------------------------------
Called when an error occurs . --> [[[FAILED]]]

[[[[Adv]]]]: public final void [[error]] ( Throwable [[t]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( [[t]] ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( [[t]] ) ; }
[[[[Nl]]]]: Complete the target with an error signal .

[[[[Adv]]]]: public final void [[divot]] ( Throwable [[baling]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { RxJavaPlugins . onError ( [[baling]] ) ; return ; } lazySet ( TERMINATED ) ; downstream . onError ( [[baling]] ) ; }
[[[[Nl]]]]: Complete the target with an error signal .
--------------------------------------------- Result 59 ---------------------------------------------
Return a stream of the elements in this stream according to the provided comparator . --> Convenience method for backward compatibility --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[sorted]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .

[[[[Adv]]]]: @ CheckReturnValue @ NonNull @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final Flowable < T > [[dutch]] ( Comparator < ? super T > sortFunction ) { ObjectHelper . requireNonNull ( sortFunction , "sortFunction" ) ; return toList ( ) . toFlowable ( ) . map ( Functions . listSorter ( sortFunction ) ) . flatMapIterable ( Functions . < List < T > > identity ( ) ) ; }
[[[[Nl]]]]: Returns a Flowable that emits the events emitted by source Publisher in a sorted order based on a specified comparison function .
--------------------------------------------- Result 60 ---------------------------------------------
Completes the stream . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public final void [[complete]] ( T [[value]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . value = [[value]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[value]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .

[[[[Adv]]]]: public final void [[frogmen]] ( T [[hidey]] ) { int state = get ( ) ; if ( ( state & ( FUSED_READY | FUSED_CONSUMED | TERMINATED | DISPOSED ) ) != 0 ) { return ; } Observer < ? super T > a = downstream ; if ( state == FUSED_EMPTY ) { this . value = [[hidey]] ; lazySet ( FUSED_READY ) ; a . onNext ( null ) ; } else { lazySet ( TERMINATED ) ; a . onNext ( [[hidey]] ) ; } if ( get ( ) != DISPOSED ) { a . onComplete ( ) ; } }
[[[[Nl]]]]: Complete the target with a single value or indicate there is a value available in fusion mode .
--------------------------------------------- Result 61 ---------------------------------------------
Waits for the consumer to consume . --> Await a number of blockers --> Socre: 1.0

[[[[Adv]]]]: public PerfAsyncConsumer await ( int [[count]] ) { if ( [[count]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { await ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .

[[[[Adv]]]]: public PerfAsyncConsumer await ( int [[brothers]] ) { if ( [[brothers]] <= 1000 ) { while ( getCount ( ) != 0 ) { } } else { try { await ( ) ; } catch ( InterruptedException ex ) { throw new RuntimeException ( ex ) ; } } return this ; }
[[[[Nl]]]]: Wait for the terminal signal .
--------------------------------------------- Result 62 ---------------------------------------------
Concatenate an Iterable into a Flowable . --> [[[FAILED]]]

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[concatMapIterable]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[mapper]] ) { return [[concatMapIterable]] ( [[mapper]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < U > Flowable < U > [[pascal]] ( Function < ? super T , ? extends Iterable < ? extends U > > [[fava]] ) { return [[pascal]] ( [[fava]] , 2 ) ; }
[[[[Nl]]]]: Returns a Flowable that concatenate each item emitted by the source Publisher with the values in an Iterable corresponding to that item that is generated by a selector .
--------------------------------------------- Result 63 ---------------------------------------------
Request n . --> Request nicker for nicker --> Socre: 1.0

[[[[Adv]]]]: protected final void request ( long n ) { Subscription [[s]] = this . upstream ; if ( [[s]] != null ) { [[s]] . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .

[[[[Adv]]]]: protected final void request ( long n ) { Subscription [[slicker]] = this . upstream ; if ( [[slicker]] != null ) { [[slicker]] . request ( n ) ; } }
[[[[Nl]]]]: Requests from the upstream Subscription .
--------------------------------------------- Result 64 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 51 / 13 / 0 / 64:   6%|▋         | 64/1000 [05:02<1:13:36,  4.72s/it][Succeeded / Failed / Skipped / Total] 51 / 13 / 0 / 64:   6%|▋         | 65/1000 [05:09<1:14:09,  4.76s/it][Succeeded / Failed / Skipped / Total] 52 / 13 / 0 / 65:   6%|▋         | 65/1000 [05:09<1:14:09,  4.76s/it][Succeeded / Failed / Skipped / Total] 52 / 13 / 0 / 65:   7%|▋         | 66/1000 [05:12<1:13:49,  4.74s/it][Succeeded / Failed / Skipped / Total] 53 / 13 / 0 / 66:   7%|▋         | 66/1000 [05:12<1:13:49,  4.74s/it][Succeeded / Failed / Skipped / Total] 53 / 13 / 0 / 66:   7%|▋         | 67/1000 [05:16<1:13:32,  4.73s/it][Succeeded / Failed / Skipped / Total] 54 / 13 / 0 / 67:   7%|▋         | 67/1000 [05:16<1:13:32,  4.73s/it][Succeeded / Failed / Skipped / Total] 54 / 13 / 0 / 67:   7%|▋         | 68/1000 [05:24<1:14:12,  4.78s/it][Succeeded / Failed / Skipped / Total] 55 / 13 / 0 / 68:   7%|▋         | 68/1000 [05:24<1:14:12,  4.78s/it][Succeeded / Failed / Skipped / Total] 55 / 13 / 0 / 68:   7%|▋         | 69/1000 [05:27<1:13:36,  4.74s/it][Succeeded / Failed / Skipped / Total] 55 / 14 / 0 / 69:   7%|▋         | 69/1000 [05:27<1:13:36,  4.74s/it][Succeeded / Failed / Skipped / Total] 55 / 14 / 0 / 69:   7%|▋         | 70/1000 [05:35<1:14:19,  4.79s/it]Removes a subscriber from the list . --> Remove subscribers --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void remove ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int [[i]] = 0 ; [[i]] < n ; [[i]] ++ ) { if ( a [ [[i]] ] == ps ) { j = [[i]] ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) void remove ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED || a == EMPTY ) { return ; } int n = a . length ; int j = - 1 ; for ( int [[maricón]] = 0 ; [[maricón]] < n ; [[maricón]] ++ ) { if ( a [ [[maricón]] ] == ps ) { j = [[maricón]] ; break ; } } if ( j < 0 ) { return ; } PublishDisposable < T > [ ] b ; if ( n == 1 ) { b = EMPTY ; } else { b = new PublishDisposable [ n - 1 ] ; System . arraycopy ( a , 0 , b , 0 , j ) ; System . arraycopy ( a , j + 1 , b , j , n - j - 1 ) ; } if ( subscribers . compareAndSet ( a , b ) ) { return ; } } }
[[[[Nl]]]]: Atomically removes the given subscriber if it is subscribed to the subject .
--------------------------------------------- Result 65 ---------------------------------------------
Observes a Connectable Flowable on the given scheduler . --> Converts a ConnectableFlow to a Flowable --> Socre: 1.0

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[observeOn]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .

[[[[Adv]]]]: public static < T > ConnectableFlowable < T > [[convincing]] ( final ConnectableFlowable < T > cf , final Scheduler scheduler ) { final Flowable < T > flowable = cf . observeOn ( scheduler ) ; return RxJavaPlugins . onAssembly ( new ConnectableFlowableReplay < T > ( cf , flowable ) ) ; }
[[[[Nl]]]]: Child Subscribers will observe the events of the ConnectableObservable on the specified scheduler .
--------------------------------------------- Result 66 ---------------------------------------------
Concatenates a Mono that maps the result to a Mono . --> Execute an ahman flow on an ahmer --> Socre: 1.0

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[concatMapDelayError]] ( Function < ? super T , ? extends Publisher < ? extends R > > [[mapper]] ) { return [[concatMapDelayError]] ( [[mapper]] , 2 , True ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .

[[[[Adv]]]]: @ CheckReturnValue @ BackpressureSupport ( BackpressureKind . FULL ) @ SchedulerSupport ( SchedulerSupport . NONE ) public final < R > Flowable < R > [[ahman]] ( Function < ? super T , ? extends Publisher < ? extends R > > [[maestro]] ) { return [[ahman]] ( [[maestro]] , 2 , True ) ; }
[[[[Nl]]]]: Maps each of the items into a Publisher subscribes to them one after the other one at a time and emits their values in order while delaying any error from either this or any of the inner Publishers till all of them terminate .
--------------------------------------------- Result 67 ---------------------------------------------
Adds the subscriber to the list . --> this is not thread safe --> Socre: 1.0

[[[[Adv]]]]: boolean [[add]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "[[False]]" != "[[False]]" ; } int [[n]] = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ [[n]] + 1 ] ; System . arraycopy ( a , 0 , b , 0 , [[n]] ) ; b [ [[n]] ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return True ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .

[[[[Adv]]]]: boolean [[agro]] ( PublishDisposable < T > ps ) { for ( ; ; ) { PublishDisposable < T > [ ] a = subscribers . get ( ) ; if ( a == TERMINATED ) { return "[["Positioning" != "Positioning"]]" != "[["Positioning" != "Positioning"]]" ; } int [[pacifism]] = a . length ; @ SuppressWarnings ( "unchecked" ) PublishDisposable < T > [ ] b = new PublishDisposable [ [[pacifism]] + 1 ] ; System . arraycopy ( a , 0 , b , 0 , [[pacifism]] ) ; b [ [[pacifism]] ] = ps ; if ( subscribers . compareAndSet ( a , b ) ) { return True ; } } }
[[[[Nl]]]]: Tries to add the given subscriber to the subscribers array atomically or returns false if the subject has terminated .
--------------------------------------------- Result 68 ---------------------------------------------
Calculates the delay in milliseconds . --> Chappy version of chappy --> Socre: 1.0

[[[[Adv]]]]: public long [[calculateDelay]] ( TimeUnit unit ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .

[[[[Adv]]]]: public long [[chappy]] ( TimeUnit unit ) { float delta = variancePercent / 100f ;
[[[[Nl]]]]: Get the delay that should be used for delaying a response in accordance with configured behavior .
--------------------------------------------- Result 69 ---------------------------------------------
Creates the error response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response < ? > [[createErrorResponse]] ( ) { Response < ? > [[call]] ; try { [[call]] = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( [[call]] == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( [[call]] . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return [[call]] ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .

[[[[Adv]]]]: public Response < ? > [[sapped]] ( ) { Response < ? > [[archipelago]] ; try { [[archipelago]] = errorFactory . call ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( "Error factory threw an exception." , e ) ; } if ( [[archipelago]] == null ) { throw new IllegalStateException ( "Error factory returned null." ) ; } if ( [[archipelago]] . isSuccessful ( ) ) { throw new IllegalStateException ( "Error factory returned successful response." ) ; } return [[archipelago]] ; }
[[[[Nl]]]]: The HTTP error to be used when an error is triggered .
--------------------------------------------- Result 70 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 56 / 14 / 0 / 70:   7%|▋         | 70/1000 [05:35<1:14:19,  4.79s/it][Succeeded / Failed / Skipped / Total] 56 / 14 / 0 / 70:   7%|▋         | 71/1000 [05:43<1:14:52,  4.84s/it][Succeeded / Failed / Skipped / Total] 56 / 15 / 0 / 71:   7%|▋         | 71/1000 [05:43<1:14:52,  4.84s/it][Succeeded / Failed / Skipped / Total] 56 / 15 / 0 / 71:   7%|▋         | 72/1000 [05:55<1:16:24,  4.94s/it][Succeeded / Failed / Skipped / Total] 57 / 15 / 0 / 72:   7%|▋         | 72/1000 [05:55<1:16:24,  4.94s/it][Succeeded / Failed / Skipped / Total] 57 / 15 / 0 / 72:   7%|▋         | 73/1000 [06:11<1:18:36,  5.09s/it][Succeeded / Failed / Skipped / Total] 57 / 16 / 0 / 73:   7%|▋         | 73/1000 [06:11<1:18:36,  5.09s/it][Succeeded / Failed / Skipped / Total] 57 / 16 / 0 / 73:   7%|▋         | 74/1000 [06:13<1:17:57,  5.05s/it][Succeeded / Failed / Skipped / Total] 57 / 17 / 0 / 74:   7%|▋         | 74/1000 [06:13<1:17:57,  5.05s/it][Succeeded / Failed / Skipped / Total] 57 / 17 / 0 / 74:   8%|▊         | 75/1000 [06:21<1:18:25,  5.09s/it][Succeeded / Failed / Skipped / Total] 58 / 17 / 0 / 75:   8%|▊         | 75/1000 [06:21<1:18:25,  5.09s/it][Succeeded / Failed / Skipped / Total] 58 / 17 / 0 / 75:   8%|▊         | 76/1000 [06:41<1:21:16,  5.28s/it][Succeeded / Failed / Skipped / Total] 58 / 18 / 0 / 76:   8%|▊         | 76/1000 [06:41<1:21:16,  5.28s/it][Succeeded / Failed / Skipped / Total] 58 / 18 / 0 / 76:   8%|▊         | 77/1000 [06:45<1:20:56,  5.26s/it][Succeeded / Failed / Skipped / Total] 58 / 19 / 0 / 77:   8%|▊         | 77/1000 [06:45<1:20:56,  5.26s/it][Succeeded / Failed / Skipped / Total] 58 / 19 / 0 / 77:   8%|▊         | 78/1000 [06:46<1:20:05,  5.21s/it]Create sample data . --> Create sample data --> Socre: 1.0

[[[[Adv]]]]: private void createSampleData ( String [[username]] , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( [[username]] , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( [[username]] , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .

[[[[Adv]]]]: private void createSampleData ( String [[angelito]] , String password ) { Assert . notNull ( documentDao , "DocumentDao required" ) ; Assert . hasText ( [[angelito]] , "Username required" ) ; Authentication auth = new UsernamePasswordAuthenticationToken ( [[angelito]] , password ) ; try {
[[[[Nl]]]]: Creates a directory for the user and a series of sub - directories . The root directory is the parent for the user directory . The sub - directories are confidential and shared . The ROLE_USER will be given read and write access to shared .
--------------------------------------------- Result 71 ---------------------------------------------
Returns the value of the given method . --> [[[FAILED]]]

[[[[Adv]]]]: private static HttpMethod [[valueOf]] ( String [[method]] ) { try { return HttpMethod . valueOf ( [[method]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .

[[[[Adv]]]]: private static HttpMethod [[valente]] ( String [[mets]] ) { try { return HttpMethod . valueOf ( [[mets]] ) ; } catch ( IllegalArgumentException e ) { } return null ; }
[[[[Nl]]]]: Provides a save way of obtaining the HttpMethod from a String . If the method is invalid returns null .
--------------------------------------------- Result 72 ---------------------------------------------
Searches for the given user . --> Search for a keyhole . --> Socre: 1.0

[[[[Adv]]]]: @ Override public DirContextOperations [[searchForUser]] ( String [[username]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[username]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[username]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[username]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information

[[[[Adv]]]]: @ Override public DirContextOperations [[demonstrations]] ( String [[keyholes]] ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for user '" + [[keyholes]] + "', with user search " + this ) ; } SpringSecurityLdapTemplate template = new SpringSecurityLdapTemplate ( contextSource ) ; template . setSearchControls ( searchControls ) ; try { return template . searchForSingleEntry ( searchBase , searchFilter , new String [ ] { [[keyholes]] } ) ; } catch ( IncorrectResultSizeDataAccessException notFound ) { if ( notFound . getActualSize ( ) == 0 ) { throw new UsernameNotFoundException ( "User " + [[keyholes]] + " not found in directory." ) ; }
[[[[Nl]]]]: Return the LdapUserDetails containing the user s information
--------------------------------------------- Result 73 ---------------------------------------------
Sets the delay in milliseconds . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setDelay]] ( long [[amount]] , TimeUnit [[unit]] ) { if ( [[amount]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . [[delayMs]] = [[unit]] . toMillis ( [[amount]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .

[[[[Adv]]]]: public void [[morehouse]] ( long [[kashyap]] , TimeUnit [[lamebrain]] ) { if ( [[kashyap]] < 0 ) { throw new IllegalArgumentException ( "Amount must be positive value." ) ; } this . [[blindfolded]] = [[lamebrain]] . toMillis ( [[kashyap]] ) ; }
[[[[Nl]]]]: Set the network round trip delay .
--------------------------------------------- Result 74 ---------------------------------------------
Encodes the given raw password . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[encode]] ( CharSequence [[rawPassword]] ) { String salt = PREFIX + this . [[saltGenerator]] . generateKey ( ) + SUFFIX ; return digest ( salt , [[rawPassword]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .

[[[[Adv]]]]: public String [[abandoning]] ( CharSequence [[halloween]] ) { String salt = PREFIX + this . [[exhumation]] . generateKey ( ) + SUFFIX ; return digest ( salt , [[halloween]] ) ; }
[[[[Nl]]]]: Encodes the rawPass using a MessageDigest . If a salt is specified it will be merged with the password before encoding .
--------------------------------------------- Result 75 ---------------------------------------------
Performs version checks . --> Log appologization --> Socre: 1.0

[[[[Adv]]]]: private static void [[performVersionChecks]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version

[[[[Adv]]]]: private static void [[appologize]] ( String minSpringVersion ) { if ( minSpringVersion == null ) { return ; }
[[[[Nl]]]]: Perform version checks with specific min Spring Version
--------------------------------------------- Result 76 ---------------------------------------------
Determines if the given encoded password matches this hash . --> [[[FAILED]]]

[[[[Adv]]]]: public boolean [[matches]] ( CharSequence rawPassword , String encodedPassword ) { String [[salt]] = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( [[salt]] , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value

[[[[Adv]]]]: public boolean [[ramallah]] ( CharSequence rawPassword , String encodedPassword ) { String [[dashwood]] = extractSalt ( encodedPassword ) ; String rawPasswordEncoded = digest ( [[dashwood]] , rawPassword ) ; return PasswordEncoderUtils . equals ( encodedPassword . toString ( ) , rawPasswordEncoded ) ; }
[[[[Nl]]]]: Takes a previously encoded password and compares it with a rawpassword after mixing in the salt and encoding that value
--------------------------------------------- Result 77 ---------------------------------------------
Gets the Spring - security version . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSpringVersion]] ( ) { Properties [[properties]] = new Properties ( ) ; try { [[properties]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[properties]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .

[[[[Adv]]]]: private static String [[ginseng]] ( ) { Properties [[olda]] = new Properties ( ) ; try { [[olda]] . load ( SpringSecurityCoreVersion . class . getClassLoader ( ) . getResourceAsStream ( "META-INF/spring-security.versions" ) ) ; } catch ( IOException | NullPointerException e ) { return null ; } return [[olda]] . getProperty ( "org.springframework:spring-core" ) ; }
[[[[Nl]]]]: Loads the spring version or null if it cannot be found .
--------------------------------------------- Result 78 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 59 / 19 / 0 / 78:   8%|▊         | 78/1000 [06:46<1:20:05,  5.21s/it][Succeeded / Failed / Skipped / Total] 59 / 19 / 0 / 78:   8%|▊         | 79/1000 [06:47<1:19:14,  5.16s/it][Succeeded / Failed / Skipped / Total] 60 / 19 / 0 / 79:   8%|▊         | 79/1000 [06:47<1:19:14,  5.16s/it][Succeeded / Failed / Skipped / Total] 60 / 19 / 0 / 79:   8%|▊         | 80/1000 [07:00<1:20:39,  5.26s/it][Succeeded / Failed / Skipped / Total] 61 / 19 / 0 / 80:   8%|▊         | 80/1000 [07:00<1:20:39,  5.26s/it][Succeeded / Failed / Skipped / Total] 61 / 19 / 0 / 80:   8%|▊         | 81/1000 [07:02<1:19:58,  5.22s/it][Succeeded / Failed / Skipped / Total] 61 / 20 / 0 / 81:   8%|▊         | 81/1000 [07:02<1:19:58,  5.22s/it][Succeeded / Failed / Skipped / Total] 61 / 20 / 0 / 81:   8%|▊         | 82/1000 [07:03<1:18:59,  5.16s/it][Succeeded / Failed / Skipped / Total] 61 / 21 / 0 / 82:   8%|▊         | 82/1000 [07:03<1:18:59,  5.16s/it][Succeeded / Failed / Skipped / Total] 61 / 21 / 0 / 82:   8%|▊         | 83/1000 [07:06<1:18:34,  5.14s/it][Succeeded / Failed / Skipped / Total] 61 / 22 / 0 / 83:   8%|▊         | 83/1000 [07:06<1:18:34,  5.14s/it][Succeeded / Failed / Skipped / Total] 61 / 22 / 0 / 83:   8%|▊         | 84/1000 [07:21<1:20:17,  5.26s/it]Determine whether the checks should be enabled . --> Determines whether we should be tensor --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[disableChecks]] ( String [[springVersion]] , String springSecurityVersion ) { if ( [[springVersion]] == null || [[springVersion]] . equals ( springSecurityVersion ) ) { return "[[True]]" == "[[True]]" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .

[[[[Adv]]]]: private static boolean [[tensor]] ( String [[everyday]] , String springSecurityVersion ) { if ( [[everyday]] == null || [[everyday]] . equals ( springSecurityVersion ) ) { return "[["Japs" == "Japs"]]" == "[["Japs" == "Japs"]]" ; } return Boolean . getBoolean ( DISABLE_CHECKS ) ; }
[[[[Nl]]]]: Disable if springVersion and springSecurityVersion are the same to allow working with Uber Jars .
--------------------------------------------- Result 79 ---------------------------------------------
Set attribute exchange configurer . --> Register a AttributeExchange --> Socre: 1.0

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String [[identifierPattern]] ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( [[identifierPattern]] ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .

[[[[Adv]]]]: public AttributeExchangeConfigurer attributeExchange ( String [[collegue]] ) { AttributeExchangeConfigurer attributeExchangeConfigurer = new AttributeExchangeConfigurer ( [[collegue]] ) ; this . attributeExchangeConfigurers . add ( attributeExchangeConfigurer ) ; return attributeExchangeConfigurer ; }
[[[[Nl]]]]: Sets up OpenID attribute exchange for OpenID s matching the specified pattern .
--------------------------------------------- Result 80 ---------------------------------------------
Configure OAuth2 client . --> YAML --> Socre: 1.0

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[oauth2Client]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .

[[[[Adv]]]]: public OAuth2ClientConfigurer < HttpSecurity > [[yup]] ( ) throws Exception { OAuth2ClientConfigurer < HttpSecurity > [[hailsham]] = getOrApply ( new OAuth2ClientConfigurer <> ( ) ) ; this . postProcess ( [[hailsham]] ) ; return [[hailsham]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Client support .
--------------------------------------------- Result 81 ---------------------------------------------
Parses the method annotations . --> [[[FAILED]]]

[[[[Adv]]]]: static < [[ResponseT]] , ReturnT > HttpServiceMethod < [[ResponseT]] , ReturnT > [[parseAnnotations]] ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = False ; boolean continuationBodyNullable = False ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .

[[[[Adv]]]]: static < [[dares]] , ReturnT > HttpServiceMethod < [[dares]] , ReturnT > [[redemption]] ( Retrofit retrofit , Method method , RequestFactory requestFactory ) { boolean isKotlinSuspendFunction = requestFactory . isKotlinSuspendFunction ; boolean continuationWantsResponse = False ; boolean continuationBodyNullable = False ; Annotation [ ] annotations = method . getAnnotations ( ) ; Type adapterType ; if ( isKotlinSuspendFunction ) { Type [ ] parameterTypes = method . getGenericParameterTypes ( ) ; Type responseType = Utils . getParameterLowerBound ( 0 , ( ParameterizedType ) parameterTypes [ parameterTypes . length - 1 ] ) ; if ( getRawType ( responseType ) == Response . class && responseType instanceof ParameterizedType ) {
[[[[Nl]]]]: Inspects the annotations on an interface method to construct a reusable service method that speaks HTTP . This requires potentially - expensive reflection so it is best to build each service method only once and reuse it .
--------------------------------------------- Result 82 ---------------------------------------------
Configure an OAuth2 resource server . --> [[[FAILED]]]

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[oauth2ResourceServer]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[configurer]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[configurer]] ) ; return [[configurer]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .

[[[[Adv]]]]: public OAuth2ResourceServerConfigurer < HttpSecurity > [[fasten]] ( ) throws Exception { OAuth2ResourceServerConfigurer < HttpSecurity > [[abominable]] = getOrApply ( new OAuth2ResourceServerConfigurer <> ( getContext ( ) ) ) ; this . postProcess ( [[abominable]] ) ; return [[abominable]] ; }
[[[[Nl]]]]: Configures OAuth 2 . 0 Resource Server support .
--------------------------------------------- Result 83 ---------------------------------------------
Returns the channel request matcher registry . --> [[[FAILED]]]

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[requiresChannel]] ( ) throws Exception { ApplicationContext [[context]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[context]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .

[[[[Adv]]]]: public ChannelSecurityConfigurer < HttpSecurity > . ChannelRequestMatcherRegistry [[tequilas]] ( ) throws Exception { ApplicationContext [[cheese]] = getContext ( ) ; return getOrApply ( new ChannelSecurityConfigurer <> ( [[cheese]] ) ) . getRegistry ( ) ; }
[[[[Nl]]]]: Configures channel security . In order for this configuration to be useful at least one mapping to a required channel must be provided .
--------------------------------------------- Result 84 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 62 / 22 / 0 / 84:   8%|▊         | 84/1000 [07:21<1:20:17,  5.26s/it][Succeeded / Failed / Skipped / Total] 62 / 22 / 0 / 84:   8%|▊         | 85/1000 [07:41<1:22:44,  5.43s/it][Succeeded / Failed / Skipped / Total] 63 / 22 / 0 / 85:   8%|▊         | 85/1000 [07:41<1:22:44,  5.43s/it][Succeeded / Failed / Skipped / Total] 63 / 22 / 0 / 85:   9%|▊         | 86/1000 [07:41<1:21:45,  5.37s/it][Succeeded / Failed / Skipped / Total] 64 / 22 / 0 / 86:   9%|▊         | 86/1000 [07:41<1:21:45,  5.37s/it][Succeeded / Failed / Skipped / Total] 64 / 22 / 0 / 86:   9%|▊         | 87/1000 [07:59<1:23:49,  5.51s/it][Succeeded / Failed / Skipped / Total] 65 / 22 / 0 / 87:   9%|▊         | 87/1000 [07:59<1:23:49,  5.51s/it][Succeeded / Failed / Skipped / Total] 65 / 22 / 0 / 87:   9%|▉         | 88/1000 [08:22<1:26:44,  5.71s/it][Succeeded / Failed / Skipped / Total] 66 / 22 / 0 / 88:   9%|▉         | 88/1000 [08:22<1:26:44,  5.71s/it][Succeeded / Failed / Skipped / Total] 66 / 22 / 0 / 88:   9%|▉         | 89/1000 [08:35<1:27:53,  5.79s/it]Compares the specified LDAP attribute with the specified value . --> Compares apache against apache --> Socre: 1.0

[[[[Adv]]]]: public boolean compare ( final String [[dn]] , final String [[attributeName]] , final Object value ) { final String comparisonFilter = "(" + [[attributeName]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( [[dn]] , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .

[[[[Adv]]]]: public boolean compare ( final String [[apaches]] , final String [[unzipping]] , final Object value ) { final String comparisonFilter = "(" + [[unzipping]] + "={0})" ; class LdapCompareCallback implements ContextExecutor { public Object executeWithContext ( DirContext ctx ) throws NamingException { SearchControls ctls = new SearchControls ( ) ; ctls . setReturningAttributes ( NO_ATTRS ) ; ctls . setSearchScope ( SearchControls . OBJECT_SCOPE ) ; NamingEnumeration < SearchResult > results = ctx . search ( [[apaches]] , comparisonFilter , new Object [ ] { value } , ctls ) ; Boolean match = Boolean . valueOf ( results . hasMore ( ) ) ; LdapUtils . closeEnumeration ( results ) ; return match ; } } Boolean matches = ( Boolean ) executeReadOnly ( new LdapCompareCallback ( ) ) ; return matches . booleanValue ( ) ; }
[[[[Nl]]]]: Performs an LDAP compare operation of the value of an attribute for a particular directory entry .
--------------------------------------------- Result 85 ---------------------------------------------
Retrieve entries for a specified dn . --> Execute cola query --> Socre: 1.0

[[[[Adv]]]]: public DirContextOperations [[retrieveEntry]] ( final String [[dn]] , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( [[dn]] , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .

[[[[Adv]]]]: public DirContextOperations [[cola]] ( final String [[finn]] , final String [ ] attributesToRetrieve ) { return ( DirContextOperations ) executeReadOnly ( new ContextExecutor ( ) { public Object executeWithContext ( DirContext ctx ) throws NamingException { Attributes attrs = ctx . getAttributes ( [[finn]] , attributesToRetrieve ) ;
[[[[Nl]]]]: Composes an object from the attributes of the given DN .
--------------------------------------------- Result 86 ---------------------------------------------
Searches for multiple attribute values . --> Kamp to kamp --> Socre: 1.0

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[searchForMultipleAttributeValues]] ( final String [[base]] , final String filter , final Object [ ] params , final String [ ] [[attributeNames]] ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < Map < String , List < String > > > [[kamp]] ( final String [[friendless]] , final String filter , final Object [ ] params , final String [ ] [[megha]] ) {
[[[[Nl]]]]: Performs a search using the supplied filter and returns the values of each named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 87 ---------------------------------------------
Builds the SearchControls based on the given controls . --> returns a SearchControls --> Socre: 1.0

[[[[Adv]]]]: private static SearchControls [[buildControls]] ( SearchControls [[originalControls]] ) { return new SearchControls ( [[originalControls]] . getSearchScope ( ) , [[originalControls]] . getCountLimit ( ) , [[originalControls]] . getTimeLimit ( ) , [[originalControls]] . getReturningAttributes ( ) , RETURN_OBJECT , [[originalControls]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .

[[[[Adv]]]]: private static SearchControls [[duran]] ( SearchControls [[ambulances]] ) { return new SearchControls ( [[ambulances]] . getSearchScope ( ) , [[ambulances]] . getCountLimit ( ) , [[ambulances]] . getTimeLimit ( ) , [[ambulances]] . getReturningAttributes ( ) , RETURN_OBJECT , [[ambulances]] . getDerefLinkFlag ( ) ) ; }
[[[[Nl]]]]: We need to make sure the search controls has the return object flag set to true in order for the search to return DirContextAdapter instances .
--------------------------------------------- Result 88 ---------------------------------------------
Searches for a single attribute and returns the empty set . --> Find dada --> Socre: 1.0

[[[[Adv]]]]: public Set < String > [[searchForSingleAttributeValues]] ( final String base , final String [[filter]] , final Object [ ] params , final String attributeName ) { String [ ] attributeNames = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , [[filter]] , params , attributeNames ) ; Set < String > [[result]] = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { [[result]] . addAll ( values ) ; } } return [[result]] ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .

[[[[Adv]]]]: public Set < String > [[dada]] ( final String base , final String [[clashed]] , final Object [ ] params , final String attributeName ) { String [ ] attributeNames = new String [ ] { attributeName } ; Set < Map < String , List < String > > > multipleAttributeValues = searchForMultipleAttributeValues ( base , [[clashed]] , params , attributeNames ) ; Set < String > [[duran]] = new HashSet <> ( ) ; for ( Map < String , List < String > > map : multipleAttributeValues ) { List < String > values = map . get ( attributeName ) ; if ( values != null ) { [[duran]] . addAll ( values ) ; } } return [[duran]] ; }
[[[[Nl]]]]: Performs a search using the supplied filter and returns the union of the values of the named attribute found in all entries matched by the search . Note that one directory entry may have several values for the attribute . Intended for role searches and similar scenarios .
--------------------------------------------- Result 89 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 67 / 22 / 0 / 89:   9%|▉         | 89/1000 [08:35<1:27:53,  5.79s/it][Succeeded / Failed / Skipped / Total] 67 / 22 / 0 / 89:   9%|▉         | 90/1000 [08:39<1:27:37,  5.78s/it][Succeeded / Failed / Skipped / Total] 68 / 22 / 0 / 90:   9%|▉         | 90/1000 [08:39<1:27:37,  5.78s/it][Succeeded / Failed / Skipped / Total] 68 / 22 / 0 / 90:   9%|▉         | 91/1000 [08:43<1:27:12,  5.76s/it][Succeeded / Failed / Skipped / Total] 69 / 22 / 0 / 91:   9%|▉         | 91/1000 [08:43<1:27:12,  5.76s/it][Succeeded / Failed / Skipped / Total] 69 / 22 / 0 / 91:   9%|▉         | 92/1000 [08:57<1:28:20,  5.84s/it]Build a WebAuthenticationDetails object from the given request . --> Build a WebAuthenticationDetails from J2EE roles --> Socre: 1.0

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails buildDetails ( HttpServletRequest context ) { Collection < String > [[j2eeUserRoles]] = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > [[userGas]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[j2eeUserRoles]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[j2eeUserRoles]] + "] mapped to Granted Authorities: [" + [[userGas]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[result]] = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , [[userGas]] ) ; return [[result]] ; }
[[[[Nl]]]]: Builds the authentication details object .

[[[[Adv]]]]: public PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails buildDetails ( HttpServletRequest context ) { Collection < String > [[yury]] = getUserRoles ( context ) ; Collection < ? extends GrantedAuthority > [[solaris]] = j2eeUserRoles2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[yury]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "J2EE roles [" + [[yury]] + "] mapped to Granted Authorities: [" + [[solaris]] + "]" ) ; } PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails [[column]] = new PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails ( context , [[solaris]] ) ; return [[column]] ; }
[[[[Nl]]]]: Builds the authentication details object .
--------------------------------------------- Result 90 ---------------------------------------------
Find primary keys . --> Implementation of Acl --> Socre: 1.0

[[[[Adv]]]]: private void [[lookupPrimaryKeys]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .

[[[[Adv]]]]: private void [[having]] ( final Map < Serializable , Acl > acls , final Set < Long > findNow , final List < Sid > sids ) { Assert . notNull ( acls , "ACLs are required" ) ; Assert . notEmpty ( findNow , "Items to find now required" ) ; String sql = computeRepeatingSql ( lookupPrimaryKeysWhereClause , findNow . size ( ) ) ; Set < Long > parentsToLookup = jdbcTemplate . query ( sql , new PreparedStatementSetter ( ) { public void setValues ( PreparedStatement ps ) throws SQLException { int i = 0 ; for ( Long toFind : findNow ) { i ++ ; ps . setLong ( i , toFind ) ; } } } , new ProcessResultSet ( acls , sids ) ) ;
[[[[Nl]]]]: Locates the primary key IDs specified in findNow adding AclImpl instances with StubAclParents to the acls Map .
--------------------------------------------- Result 91 ---------------------------------------------
Create servlet filter . --> Register authentication manager . --> Socre: 1.0

[[[[Adv]]]]: private void [[createServletApiFilter]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required

[[[[Adv]]]]: private void [[abusers]] ( BeanReference authenticationManager ) { final String ATT_SERVLET_API_PROVISION = "servlet-api-provision" ; final String DEF_SERVLET_API_PROVISION = "true" ; String provideServletApi = httpElt . getAttribute ( ATT_SERVLET_API_PROVISION ) ; if ( ! StringUtils . hasText ( provideServletApi ) ) { provideServletApi = DEF_SERVLET_API_PROVISION ; } if ( "true" . equals ( provideServletApi ) ) { servApiFilter = GrantedAuthorityDefaultsParserUtils . registerWithDefaultRolePrefix ( pc , SecurityContextHolderAwareRequestFilterBeanFactory . class ) ; servApiFilter . getPropertyValues ( ) . add ( "authenticationManager" , authenticationManager ) ; } }
[[[[Nl]]]]: Adds the servlet - api integration filter if required
--------------------------------------------- Result 92 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 70 / 22 / 0 / 92:   9%|▉         | 92/1000 [08:57<1:28:20,  5.84s/it][Succeeded / Failed / Skipped / Total] 70 / 22 / 0 / 92:   9%|▉         | 93/1000 [09:00<1:27:46,  5.81s/it][Succeeded / Failed / Skipped / Total] 71 / 22 / 0 / 93:   9%|▉         | 93/1000 [09:00<1:27:46,  5.81s/it][Succeeded / Failed / Skipped / Total] 71 / 22 / 0 / 93:   9%|▉         | 94/1000 [09:04<1:27:24,  5.79s/it]Create an embedded bean definition . --> Creates the root bean definition --> Socre: 1.0

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element [[element]] , ParserContext parserContext ) { Object source = parserContext . extractSource ( [[element]] ) ; String suffix = [[element]] . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = [[element]] . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition [[apacheContainer]] = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; [[apacheContainer]] . setSource ( source ) ; [[apacheContainer]] . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = [[element]] . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } [[apacheContainer]] . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; [[apacheContainer]] . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , [[element]] ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , [[apacheContainer]] ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .

[[[[Adv]]]]: private RootBeanDefinition createEmbeddedServer ( Element [[carte]] , ParserContext parserContext ) { Object source = parserContext . extractSource ( [[carte]] ) ; String suffix = [[carte]] . getAttribute ( ATT_ROOT_SUFFIX ) ; if ( ! StringUtils . hasText ( suffix ) ) { suffix = OPT_DEFAULT_ROOT_SUFFIX ; } String port = [[carte]] . getAttribute ( ATT_PORT ) ; if ( ! StringUtils . hasText ( port ) ) { port = getDefaultPort ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Using default port of " + port ) ; } } String url = "ldap://127.0.0.1:" + port + "/" + suffix ; BeanDefinitionBuilder contextSource = BeanDefinitionBuilder . rootBeanDefinition ( CONTEXT_SOURCE_CLASS ) ; contextSource . addConstructorArgValue ( url ) ; contextSource . addPropertyValue ( "userDn" , "uid=admin,ou=system" ) ; contextSource . addPropertyValue ( "password" , "secret" ) ; RootBeanDefinition [[aey]] = new RootBeanDefinition ( "org.springframework.security.ldap.server.ApacheDSContainer" , null , null ) ; [[aey]] . setSource ( source ) ; [[aey]] . getConstructorArgumentValues ( ) . addGenericArgumentValue ( suffix ) ; String ldifs = [[carte]] . getAttribute ( ATT_LDIF_FILE ) ; if ( ! StringUtils . hasText ( ldifs ) ) { ldifs = OPT_DEFAULT_LDIF_FILE ; } [[aey]] . getConstructorArgumentValues ( ) . addGenericArgumentValue ( ldifs ) ; [[aey]] . getPropertyValues ( ) . addPropertyValue ( "port" , port ) ; logger . info ( "Embedded LDAP server bean definition created for URL: " + url ) ; if ( parserContext . getRegistry ( ) . containsBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS ) ) { parserContext . getReaderContext ( ) . error ( "Only one embedded server bean is allowed per application context" , [[carte]] ) ; } parserContext . getRegistry ( ) . registerBeanDefinition ( BeanIds . EMBEDDED_APACHE_DS , [[aey]] ) ; return ( RootBeanDefinition ) contextSource . getBeanDefinition ( ) ; }
[[[[Nl]]]]: Will be called if no url attribute is supplied .
--------------------------------------------- Result 93 ---------------------------------------------
Search for single entry . --> Find all operations under the given base context --> Socre: 1.0

[[[[Adv]]]]: public static DirContextOperations [[searchForSingleEntryInternal]] ( DirContext [[ctx]] , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( [[ctx]] . getNameInNamespace ( ) ) ; final DistinguishedName [[searchBaseDn]] = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = [[ctx]] . search ( [[searchBaseDn]] , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + [[searchBaseDn]] + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .

[[[[Adv]]]]: public static DirContextOperations [[broil]] ( DirContext [[escapee]] , SearchControls searchControls , String base , String filter , Object [ ] params ) throws NamingException { final DistinguishedName ctxBaseDn = new DistinguishedName ( [[escapee]] . getNameInNamespace ( ) ) ; final DistinguishedName [[relinquished]] = new DistinguishedName ( base ) ; final NamingEnumeration < SearchResult > resultsEnum = [[escapee]] . search ( [[relinquished]] , filter , params , buildControls ( searchControls ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Searching for entry under DN '" + ctxBaseDn + "', base = '" + [[relinquished]] + "', filter = '" + filter + "'" ) ; } Set < DirContextOperations > results = new HashSet <> ( ) ; try { while ( resultsEnum . hasMore ( ) ) { SearchResult searchResult = resultsEnum . next ( ) ; DirContextAdapter dca = ( DirContextAdapter ) searchResult . getObject ( ) ; Assert . notNull ( dca , "No object returned by search, DirContext is not correctly configured" ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Found DN: " + dca . getDn ( ) ) ; } results . add ( dca ) ; } } catch ( PartialResultException e ) { LdapUtils . closeEnumeration ( resultsEnum ) ; logger . info ( "Ignoring PartialResultException" ) ; } if ( results . size ( ) == 0 ) { throw new IncorrectResultSizeDataAccessException ( 1 , 0 ) ; } if ( results . size ( ) > 1 ) { throw new IncorrectResultSizeDataAccessException ( 1 , results . size ( ) ) ; } return results . iterator ( ) . next ( ) ; }
[[[[Nl]]]]: Internal method extracted to avoid code duplication in AD search .
--------------------------------------------- Result 94 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 72 / 22 / 0 / 94:   9%|▉         | 94/1000 [09:04<1:27:24,  5.79s/it][Succeeded / Failed / Skipped / Total] 72 / 22 / 0 / 94:  10%|▉         | 95/1000 [09:05<1:26:32,  5.74s/it][Succeeded / Failed / Skipped / Total] 73 / 22 / 0 / 95:  10%|▉         | 95/1000 [09:05<1:26:32,  5.74s/it][Succeeded / Failed / Skipped / Total] 73 / 22 / 0 / 95:  10%|▉         | 96/1000 [09:05<1:25:34,  5.68s/it][Succeeded / Failed / Skipped / Total] 74 / 22 / 0 / 96:  10%|▉         | 96/1000 [09:05<1:25:34,  5.68s/it][Succeeded / Failed / Skipped / Total] 74 / 22 / 0 / 96:  10%|▉         | 97/1000 [09:14<1:26:02,  5.72s/it][Succeeded / Failed / Skipped / Total] 74 / 23 / 0 / 97:  10%|▉         | 97/1000 [09:14<1:26:02,  5.72s/it][Succeeded / Failed / Skipped / Total] 74 / 23 / 0 / 97:  10%|▉         | 98/1000 [09:16<1:25:18,  5.67s/it][Succeeded / Failed / Skipped / Total] 75 / 23 / 0 / 98:  10%|▉         | 98/1000 [09:16<1:25:18,  5.67s/it][Succeeded / Failed / Skipped / Total] 75 / 23 / 0 / 98:  10%|▉         | 99/1000 [09:20<1:24:59,  5.66s/it][Succeeded / Failed / Skipped / Total] 75 / 24 / 0 / 99:  10%|▉         | 99/1000 [09:20<1:24:59,  5.66s/it][Succeeded / Failed / Skipped / Total] 75 / 24 / 0 / 99:  10%|█         | 100/1000 [09:41<1:27:10,  5.81s/it]Create a whitelisted default types . --> dummy implementation --> Socre: 1.0

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[createWhitelistedDefaultTyping]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[result]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[result]] = [[result]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[result]] = [[result]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[result]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .

[[[[Adv]]]]: private static TypeResolverBuilder < ? extends TypeResolverBuilder > [[odious]] ( ) { TypeResolverBuilder < ? extends TypeResolverBuilder > [[potentially]] = new WhitelistTypeResolverBuilder ( ObjectMapper . DefaultTyping . NON_FINAL ) ; [[potentially]] = [[potentially]] . init ( JsonTypeInfo . Id . CLASS , null ) ; [[potentially]] = [[potentially]] . inclusion ( JsonTypeInfo . As . PROPERTY ) ; return [[potentially]] ; }
[[[[Nl]]]]: Creates a TypeResolverBuilder that performs whitelisting .
--------------------------------------------- Result 95 ---------------------------------------------
Registers spring security filter chain . --> Register spring security filter chain . --> Socre: 1.0

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "[[True]]" == "[[True]]" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain

[[[[Adv]]]]: private void insertSpringSecurityFilterChain ( ServletContext servletContext ) { String filterName = DEFAULT_FILTER_NAME ; DelegatingFilterProxy springSecurityFilterChain = new DelegatingFilterProxy ( filterName ) ; String contextAttribute = getWebApplicationContextAttribute ( ) ; if ( contextAttribute != null ) { springSecurityFilterChain . setContextAttribute ( contextAttribute ) ; } registerFilter ( servletContext , "[["Br" == "Br"]]" == "[["Br" == "Br"]]" , filterName , springSecurityFilterChain ) ; }
[[[[Nl]]]]: Registers the springSecurityFilterChain
--------------------------------------------- Result 96 ---------------------------------------------
Create the JAASA filter . --> Configure crsure . --> Socre: 1.0

[[[[Adv]]]]: private void [[createJaasApiFilter]] ( ) { final String [[ATT_JAAS_API_PROVISION]] = "jaas-api-provision" ; final String [[DEF_JAAS_API_PROVISION]] = "false" ; String provideJaasApi = httpElt . getAttribute ( [[ATT_JAAS_API_PROVISION]] ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = [[DEF_JAAS_API_PROVISION]] ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required

[[[[Adv]]]]: private void [[cocksure]] ( ) { final String [[RHIS]] = "jaas-api-provision" ; final String [[FOLKSY]] = "false" ; String provideJaasApi = httpElt . getAttribute ( [[RHIS]] ) ; if ( ! StringUtils . hasText ( provideJaasApi ) ) { provideJaasApi = [[FOLKSY]] ; } if ( "true" . equals ( provideJaasApi ) ) { jaasApiFilter = new RootBeanDefinition ( JaasApiIntegrationFilter . class ) ; } }
[[[[Nl]]]]: Adds the jaas - api integration filter if required
--------------------------------------------- Result 97 ---------------------------------------------
Called after properties have been set . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[afterPropertiesSet]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .

[[[[Adv]]]]: @ Override public void [[iridium]] ( ) { try { super . afterPropertiesSet ( ) ; } catch ( ServletException e ) {
[[[[Nl]]]]: Check whether all required properties have been set .
--------------------------------------------- Result 98 ---------------------------------------------
Returns the token for the given series ID . --> Get a remember me by duration --> Socre: 1.0

[[[[Adv]]]]: public PersistentRememberMeToken [[getTokenForSeries]] ( String [[seriesId]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , [[seriesId]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[seriesId]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[seriesId]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[seriesId]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .

[[[[Adv]]]]: public PersistentRememberMeToken [[mulle]] ( String [[duran]] ) { try { return getJdbcTemplate ( ) . queryForObject ( tokensBySeriesSql , new RowMapper < PersistentRememberMeToken > ( ) { public PersistentRememberMeToken mapRow ( ResultSet rs , int rowNum ) throws SQLException { return new PersistentRememberMeToken ( rs . getString ( 1 ) , rs . getString ( 2 ) , rs . getString ( 3 ) , rs . getTimestamp ( 4 ) ) ; } } , [[duran]] ) ; } catch ( EmptyResultDataAccessException zeroResults ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Querying token for series '" + [[duran]] + "' returned no results." , zeroResults ) ; } } catch ( IncorrectResultSizeDataAccessException moreThanOne ) { logger . error ( "Querying token for series '" + [[duran]] + "' returned more than one value. Series" + " should be unique" ) ; } catch ( DataAccessException e ) { logger . error ( "Failed to load token for series " + [[duran]] , e ) ; } return null ; }
[[[[Nl]]]]: Loads the token data for the supplied series identifier .
--------------------------------------------- Result 99 ---------------------------------------------
Returns a new Cipher instance . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cipher [[newCipher]] ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .

[[[[Adv]]]]: public static Cipher [[mayday]] ( String algorithm ) { try { return Cipher . getInstance ( algorithm ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalArgumentException ( "Not a valid encryption algorithm" , e ) ; } catch ( NoSuchPaddingException e ) { throw new IllegalStateException ( "Should not happen" , e ) ; } }
[[[[Nl]]]]: Constructs a new Cipher .
--------------------------------------------- Result 100 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 75 / 25 / 0 / 100:  10%|█         | 100/1000 [09:41<1:27:10,  5.81s/it][Succeeded / Failed / Skipped / Total] 75 / 25 / 0 / 100:  10%|█         | 101/1000 [09:46<1:27:04,  5.81s/it][Succeeded / Failed / Skipped / Total] 75 / 26 / 0 / 101:  10%|█         | 101/1000 [09:46<1:27:04,  5.81s/it][Succeeded / Failed / Skipped / Total] 75 / 26 / 0 / 101:  10%|█         | 102/1000 [09:50<1:26:35,  5.79s/it][Succeeded / Failed / Skipped / Total] 76 / 26 / 0 / 102:  10%|█         | 102/1000 [09:50<1:26:35,  5.79s/it][Succeeded / Failed / Skipped / Total] 76 / 26 / 0 / 102:  10%|█         | 103/1000 [10:05<1:27:53,  5.88s/it][Succeeded / Failed / Skipped / Total] 77 / 26 / 0 / 103:  10%|█         | 103/1000 [10:05<1:27:53,  5.88s/it][Succeeded / Failed / Skipped / Total] 77 / 26 / 0 / 103:  10%|█         | 104/1000 [10:07<1:27:10,  5.84s/it][Succeeded / Failed / Skipped / Total] 77 / 27 / 0 / 104:  10%|█         | 104/1000 [10:07<1:27:10,  5.84s/it][Succeeded / Failed / Skipped / Total] 77 / 27 / 0 / 104:  10%|█         | 105/1000 [10:11<1:26:52,  5.82s/it]Gets the granted authorities for the given list of attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > [[attributes]] ) { List < GrantedAuthority > result = new ArrayList <> ( [[attributes]] . size ( ) ) ; for ( String [[attribute]] : [[attributes]] ) { result . add ( getGrantedAuthority ( [[attribute]] ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[sufferin]] ( Collection < String > [[corbeau]] ) { List < GrantedAuthority > result = new ArrayList <> ( [[corbeau]] . size ( ) ) ; for ( String [[postpartum]] : [[corbeau]] ) { result . add ( getGrantedAuthority ( [[postpartum]] ) ) ; } return result ; }
[[[[Nl]]]]: Map the given list of string attributes one - to - one to Spring Security GrantedAuthorities .
--------------------------------------------- Result 101 ---------------------------------------------
Handles the request . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[doFilter]] ( ServletRequest [[request]] , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[request]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[request]] , ( HttpServletResponse ) response ) ; } chain . doFilter ( [[request]] , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .

[[[[Adv]]]]: public void [[airfare]] ( ServletRequest [[resurrect]] , ServletResponse response , FilterChain chain ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Checking secure context token: " + SecurityContextHolder . getContext ( ) . getAuthentication ( ) ) ; } if ( requiresAuthentication ( ( HttpServletRequest ) [[resurrect]] ) ) { doAuthenticate ( ( HttpServletRequest ) [[resurrect]] , ( HttpServletResponse ) response ) ; } chain . doFilter ( [[resurrect]] , response ) ; }
[[[[Nl]]]]: Try to authenticate a pre - authenticated user with Spring Security if the user has not yet been authenticated .
--------------------------------------------- Result 102 ---------------------------------------------
Checks the content length --> Check content length --> Socre: 1.0

[[[[Adv]]]]: private void checkContentLength ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean [[requiresFlush]] = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( isBodyFullyWritten || [[requiresFlush]] ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .

[[[[Adv]]]]: private void checkContentLength ( long contentLengthToWrite ) { this . contentWritten += contentLengthToWrite ; boolean isBodyFullyWritten = this . contentLength > 0 && this . contentWritten >= this . contentLength ; int bufferSize = getBufferSize ( ) ; boolean [[deauville]] = bufferSize > 0 && this . contentWritten >= bufferSize ; if ( isBodyFullyWritten || [[deauville]] ) { doOnResponseCommitted ( ) ; } }
[[[[Nl]]]]: Adds the contentLengthToWrite to the total contentWritten size and checks to see if the response should be written .
--------------------------------------------- Result 103 ---------------------------------------------
Sets the URL to use for authentication . --> Set adelphi filter --> Socre: 1.0

[[[[Adv]]]]: public T [[loginProcessingUrl]] ( String [[loginProcessingUrl]] ) { this . loginProcessingUrl = [[loginProcessingUrl]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[loginProcessingUrl]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .

[[[[Adv]]]]: public T [[adelphi]] ( String [[condominium]] ) { this . loginProcessingUrl = [[adelphi]] ; authFilter . setRequiresAuthenticationRequestMatcher ( createLoginProcessingUrlMatcher ( [[adelphi]] ) ) ; return getSelf ( ) ; }
[[[[Nl]]]]: Specifies the URL to validate the credentials .
--------------------------------------------- Result 104 ---------------------------------------------
Performs actual authentication . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[doAuthenticate]] ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object [[principal]] = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( [[principal]] == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + [[principal]] + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( [[principal]] , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .

[[[[Adv]]]]: private void [[olina]] ( HttpServletRequest request , HttpServletResponse response ) throws IOException , ServletException { Authentication authResult ; Object [[authorised]] = getPreAuthenticatedPrincipal ( request ) ; Object credentials = getPreAuthenticatedCredentials ( request ) ; if ( [[authorised]] == null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "No pre-authenticated principal found in request" ) ; } return ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "preAuthenticatedPrincipal = " + [[authorised]] + ", trying to authenticate" ) ; } try { PreAuthenticatedAuthenticationToken authRequest = new PreAuthenticatedAuthenticationToken ( [[authorised]] , credentials ) ; authRequest . setDetails ( authenticationDetailsSource . buildDetails ( request ) ) ; authResult = authenticationManager . authenticate ( authRequest ) ; successfulAuthentication ( request , response , authResult ) ; } catch ( AuthenticationException failed ) { unsuccessfulAuthentication ( request , response , failed ) ; if ( ! continueFilterChainOnUnsuccessfulAuthentication ) { throw failed ; } } }
[[[[Nl]]]]: Do the actual authentication for a pre - authenticated user .
--------------------------------------------- Result 105 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 78 / 27 / 0 / 105:  10%|█         | 105/1000 [10:11<1:26:52,  5.82s/it][Succeeded / Failed / Skipped / Total] 78 / 27 / 0 / 105:  11%|█         | 106/1000 [10:21<1:27:17,  5.86s/it][Succeeded / Failed / Skipped / Total] 79 / 27 / 0 / 106:  11%|█         | 106/1000 [10:21<1:27:17,  5.86s/it][Succeeded / Failed / Skipped / Total] 79 / 27 / 0 / 106:  11%|█         | 107/1000 [10:23<1:26:43,  5.83s/it][Succeeded / Failed / Skipped / Total] 79 / 28 / 0 / 107:  11%|█         | 107/1000 [10:23<1:26:43,  5.83s/it][Succeeded / Failed / Skipped / Total] 79 / 28 / 0 / 107:  11%|█         | 108/1000 [10:24<1:25:55,  5.78s/it][Succeeded / Failed / Skipped / Total] 80 / 28 / 0 / 108:  11%|█         | 108/1000 [10:24<1:25:55,  5.78s/it][Succeeded / Failed / Skipped / Total] 80 / 28 / 0 / 108:  11%|█         | 109/1000 [10:28<1:25:36,  5.77s/it][Succeeded / Failed / Skipped / Total] 80 / 29 / 0 / 109:  11%|█         | 109/1000 [10:28<1:25:36,  5.77s/it][Succeeded / Failed / Skipped / Total] 80 / 29 / 0 / 109:  11%|█         | 110/1000 [10:29<1:24:53,  5.72s/it][Succeeded / Failed / Skipped / Total] 81 / 29 / 0 / 110:  11%|█         | 110/1000 [10:29<1:24:53,  5.72s/it][Succeeded / Failed / Skipped / Total] 81 / 29 / 0 / 110:  11%|█         | 111/1000 [10:51<1:26:57,  5.87s/it]Updates authentication defaults . --> helper method to barters --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAuthenticationDefaults]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .

[[[[Adv]]]]: protected final void [[barbershop]] ( ) { if ( loginProcessingUrl == null ) { loginProcessingUrl ( loginPage ) ; } if ( failureHandler == null ) { failureUrl ( loginPage + "?error" ) ; } final LogoutConfigurer < B > logoutConfigurer = getBuilder ( ) . getConfigurer ( LogoutConfigurer . class ) ; if ( logoutConfigurer != null && ! logoutConfigurer . isCustomLogoutSuccess ( ) ) { logoutConfigurer . logoutSuccessUrl ( loginPage + "?logout" ) ; } }
[[[[Nl]]]]: Updates the default values for authentication .
--------------------------------------------- Result 106 ---------------------------------------------
Update the access defaults . --> Performs an ANvillet --> Socre: 1.0

[[[[Adv]]]]: protected final void [[updateAccessDefaults]] ( B [[http]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[http]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .

[[[[Adv]]]]: protected final void [[anvil]] ( B [[monk]] ) { if ( permitAll ) { PermitAllSupport . permitAll ( [[monk]] , loginPage , loginProcessingUrl , failureUrl ) ; } }
[[[[Nl]]]]: Updates the default values for access .
--------------------------------------------- Result 107 ---------------------------------------------
Maps a collection of authorities to their corresponding authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public Set < GrantedAuthority > [[mapAuthorities]] ( Collection < ? extends GrantedAuthority > [[authorities]] ) { HashSet < GrantedAuthority > [[mapped]] = new HashSet <> ( [[authorities]] . size ( ) ) ; for ( GrantedAuthority authority : [[authorities]] ) { [[mapped]] . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[mapped]] . add ( defaultAuthority ) ; } return [[mapped]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .

[[[[Adv]]]]: public Set < GrantedAuthority > [[errol]] ( Collection < ? extends GrantedAuthority > [[unification]] ) { HashSet < GrantedAuthority > [[blaspheme]] = new HashSet <> ( [[unification]] . size ( ) ) ; for ( GrantedAuthority authority : [[unification]] ) { [[blaspheme]] . add ( mapAuthority ( authority . getAuthority ( ) ) ) ; } if ( defaultAuthority != null ) { [[blaspheme]] . add ( defaultAuthority ) ; } return [[blaspheme]] ; }
[[[[Nl]]]]: Creates a mapping of the supplied authorities based on the case - conversion and prefix settings . The mapping will be one - to - one unless duplicates are produced during the conversion . If a default authority has been set this will also be assigned to each mapping .
--------------------------------------------- Result 108 ---------------------------------------------
Map password . --> aaaahah --> Socre: 1.0

[[[[Adv]]]]: protected String [[mapPassword]] ( Object [[passwordValue]] ) { if ( ! ( [[passwordValue]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .

[[[[Adv]]]]: protected String [[aaaah]] ( Object [[aimed]] ) { if ( ! ( [[aimed]] instanceof String ) ) {
[[[[Nl]]]]: Extension point to allow customized creation of the user s password from the attribute stored in the directory .
--------------------------------------------- Result 109 ---------------------------------------------
Check if the principal has changed . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean [[principalChanged]] ( HttpServletRequest [[request]] , Authentication [[currentAuthentication]] ) { Object principal = getPreAuthenticatedPrincipal ( [[request]] ) ; if ( ( principal instanceof String ) && [[currentAuthentication]] . getName ( ) . equals ( principal ) ) { return False ; } if ( principal != null && principal . equals ( [[currentAuthentication]] . getPrincipal ( ) ) ) { return False ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries

[[[[Adv]]]]: protected boolean [[hippocrates]] ( HttpServletRequest [[pedophiles]] , Authentication [[cubicle]] ) { Object principal = getPreAuthenticatedPrincipal ( [[pedophiles]] ) ; if ( ( principal instanceof String ) && [[cubicle]] . getName ( ) . equals ( principal ) ) { return False ; } if ( principal != null && principal . equals ( [[cubicle]] . getPrincipal ( ) ) ) { return False ; } if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated principal has changed to " + principal + " and will be reauthenticated" ) ; } return "[["Acquaintances" == "Acquaintances"]]" == "[["Acquaintances" == "Acquaintances"]]" ; }
[[[[Nl]]]]: Determines if the current principal has changed . The default implementation tries
--------------------------------------------- Result 110 ---------------------------------------------
Encode cookie . --> Encodes a cookie --> Socre: 1.0

[[[[Adv]]]]: protected String encodeCookie ( String [ ] [[cookieTokens]] ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < [[cookieTokens]] . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( [[cookieTokens]] [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < [[cookieTokens]] . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .

[[[[Adv]]]]: protected String encodeCookie ( String [ ] [[delusion]] ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < [[delusion]] . length ; i ++ ) { try { sb . append ( URLEncoder . encode ( [[delusion]] [ i ] , StandardCharsets . UTF_8 . toString ( ) ) ) ; } catch ( UnsupportedEncodingException e ) { logger . error ( e . getMessage ( ) , e ) ; } if ( i < [[delusion]] . length - 1 ) { sb . append ( DELIMITER ) ; } } String value = sb . toString ( ) ; sb = new StringBuilder ( new String ( Base64 . getEncoder ( ) . encode ( value . getBytes ( ) ) ) ) ; while ( sb . charAt ( sb . length ( ) - 1 ) == ' ' ) { sb . deleteCharAt ( sb . length ( ) - 1 ) ; } return sb . toString ( ) ; }
[[[[Nl]]]]: Inverse operation of decodeCookie .
--------------------------------------------- Result 111 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 82 / 29 / 0 / 111:  11%|█         | 111/1000 [10:51<1:26:57,  5.87s/it][Succeeded / Failed / Skipped / Total] 82 / 29 / 0 / 111:  11%|█         | 112/1000 [10:58<1:26:57,  5.88s/it][Succeeded / Failed / Skipped / Total] 82 / 30 / 0 / 112:  11%|█         | 112/1000 [10:58<1:26:57,  5.88s/it][Succeeded / Failed / Skipped / Total] 82 / 30 / 0 / 112:  11%|█▏        | 113/1000 [11:06<1:27:08,  5.89s/it][Succeeded / Failed / Skipped / Total] 83 / 30 / 0 / 113:  11%|█▏        | 113/1000 [11:06<1:27:08,  5.89s/it][Succeeded / Failed / Skipped / Total] 83 / 30 / 0 / 113:  11%|█▏        | 114/1000 [11:15<1:27:26,  5.92s/it][Succeeded / Failed / Skipped / Total] 83 / 31 / 0 / 114:  11%|█▏        | 114/1000 [11:15<1:27:26,  5.92s/it][Succeeded / Failed / Skipped / Total] 83 / 31 / 0 / 114:  12%|█▏        | 115/1000 [11:28<1:28:14,  5.98s/it][Succeeded / Failed / Skipped / Total] 83 / 32 / 0 / 115:  12%|█▏        | 115/1000 [11:28<1:28:14,  5.98s/it][Succeeded / Failed / Skipped / Total] 83 / 32 / 0 / 115:  12%|█▏        | 116/1000 [11:36<1:28:26,  6.00s/it]Sets cookie . --> method to add cookies --> Socre: 1.0

[[[[Adv]]]]: protected void [[setCookie]] ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String [[cookieValue]] = encodeCookie ( tokens ) ; Cookie [[cookie]] = new Cookie ( cookieName , [[cookieValue]] ) ; [[cookie]] . setMaxAge ( maxAge ) ; [[cookie]] . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { [[cookie]] . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { [[cookie]] . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { [[cookie]] . setSecure ( request . isSecure ( ) ) ; } else { [[cookie]] . setSecure ( useSecureCookie ) ; } [[cookie]] . setHttpOnly ( True ) ; response . addCookie ( [[cookie]] ) ; }
[[[[Nl]]]]: Sets the cookie on the response .

[[[[Adv]]]]: protected void [[congregation]] ( String [ ] tokens , int maxAge , HttpServletRequest request , HttpServletResponse response ) { String [[sle]] = encodeCookie ( tokens ) ; Cookie [[ashtrays]] = new Cookie ( cookieName , [[sle]] ) ; [[ashtrays]] . setMaxAge ( maxAge ) ; [[ashtrays]] . setPath ( getCookiePath ( request ) ) ; if ( cookieDomain != null ) { [[ashtrays]] . setDomain ( cookieDomain ) ; } if ( maxAge < 1 ) { [[ashtrays]] . setVersion ( 1 ) ; } if ( useSecureCookie == null ) { [[ashtrays]] . setSecure ( request . isSecure ( ) ) ; } else { [[ashtrays]] . setSecure ( useSecureCookie ) ; } [[ashtrays]] . setHttpOnly ( True ) ; response . addCookie ( [[ashtrays]] ) ; }
[[[[Nl]]]]: Sets the cookie on the response .
--------------------------------------------- Result 112 ---------------------------------------------
Get remember me cookie from request --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[extractRememberMeCookie]] ( HttpServletRequest request ) { Cookie [ ] [[cookies]] = request . getCookies ( ) ; if ( ( [[cookies]] == null ) || ( [[cookies]] . length == 0 ) ) { return null ; } for ( Cookie cookie : [[cookies]] ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .

[[[[Adv]]]]: protected String [[bahr]] ( HttpServletRequest request ) { Cookie [ ] [[basilio]] = request . getCookies ( ) ; if ( ( [[basilio]] == null ) || ( [[basilio]] . length == 0 ) ) { return null ; } for ( Cookie cookie : [[basilio]] ) { if ( cookieName . equals ( cookie . getName ( ) ) ) { return cookie . getValue ( ) ; } } return null ; }
[[[[Nl]]]]: Locates the Spring Security remember me cookie in the request and returns its value . The cookie is searched for by name and also by matching the context path to the cookie path .
--------------------------------------------- Result 113 ---------------------------------------------
Gets the query string . --> Get a gazelle --> Socre: 1.0

[[[[Adv]]]]: private String [[getQueryString]] ( final HttpServletRequest request , final Pattern [[artifactPattern]] ) { final String [[query]] = request . getQueryString ( ) ; if ( [[query]] == null ) { return null ; } final String result = [[artifactPattern]] . matcher ( [[query]] ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .

[[[[Adv]]]]: private String [[gazelle]] ( final HttpServletRequest request , final Pattern [[dsv]] ) { final String [[fyodor]] = request . getQueryString ( ) ; if ( [[fyodor]] == null ) { return null ; } final String result = [[dsv]] . matcher ( [[fyodor]] ) . replaceFirst ( "" ) ; if ( result . length ( ) == 0 ) { return null ; }
[[[[Nl]]]]: If present removes the artifactParameterName and the corresponding value from the query String .
--------------------------------------------- Result 114 ---------------------------------------------
Gets the service port . --> [[[FAILED]]]

[[[[Adv]]]]: private static int getServicePort ( URL [[casServiceUrl]] ) { int port = [[casServiceUrl]] . getPort ( ) ; if ( port == - 1 ) { port = [[casServiceUrl]] . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .

[[[[Adv]]]]: private static int getServicePort ( URL [[mumtaz]] ) { int port = [[mumtaz]] . getPort ( ) ; if ( port == - 1 ) { port = [[mumtaz]] . getDefaultPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port from the casServiceURL ensuring to return the proper value if the default port is being used .
--------------------------------------------- Result 115 ---------------------------------------------
Gets the principal . --> [[[FAILED]]]

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .

[[[[Adv]]]]: public String getPrincipal ( ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; if ( authentication == null ) { log . warn ( "No Authentication object set in SecurityContext - returning empty String as Principal" ) ; return "" ; } Object principal = authentication . getPrincipal ( ) ; if ( principal instanceof LdapUserDetails ) { LdapUserDetails details = ( LdapUserDetails ) principal ; return details . getDn ( ) ; } else if ( authentication instanceof AnonymousAuthenticationToken ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Anonymous Authentication, returning empty String as Principal" ) ; } return "" ; } else { throw new IllegalArgumentException ( "The principal property of the authentication object" + "needs to be an LdapUserDetails." ) ; } }
[[[[Nl]]]]: Get the principals of the logged in user in this case the distinguished name .
--------------------------------------------- Result 116 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 83 / 33 / 0 / 116:  12%|█▏        | 116/1000 [11:36<1:28:26,  6.00s/it][Succeeded / Failed / Skipped / Total] 83 / 33 / 0 / 116:  12%|█▏        | 117/1000 [11:37<1:27:42,  5.96s/it][Succeeded / Failed / Skipped / Total] 84 / 33 / 0 / 117:  12%|█▏        | 117/1000 [11:37<1:27:42,  5.96s/it][Succeeded / Failed / Skipped / Total] 84 / 33 / 0 / 117:  12%|█▏        | 118/1000 [11:43<1:27:40,  5.96s/it][Succeeded / Failed / Skipped / Total] 84 / 34 / 0 / 118:  12%|█▏        | 118/1000 [11:43<1:27:40,  5.96s/it][Succeeded / Failed / Skipped / Total] 84 / 34 / 0 / 118:  12%|█▏        | 119/1000 [11:45<1:27:00,  5.93s/it][Succeeded / Failed / Skipped / Total] 85 / 34 / 0 / 119:  12%|█▏        | 119/1000 [11:45<1:27:00,  5.93s/it][Succeeded / Failed / Skipped / Total] 85 / 34 / 0 / 119:  12%|█▏        | 120/1000 [11:52<1:27:07,  5.94s/it][Succeeded / Failed / Skipped / Total] 85 / 35 / 0 / 120:  12%|█▏        | 120/1000 [11:52<1:27:07,  5.94s/it][Succeeded / Failed / Skipped / Total] 85 / 35 / 0 / 120:  12%|█▏        | 121/1000 [11:56<1:26:43,  5.92s/it][Succeeded / Failed / Skipped / Total] 85 / 36 / 0 / 121:  12%|█▏        | 121/1000 [11:56<1:26:43,  5.92s/it][Succeeded / Failed / Skipped / Total] 85 / 36 / 0 / 121:  12%|█▏        | 122/1000 [12:07<1:27:14,  5.96s/it][Succeeded / Failed / Skipped / Total] 85 / 37 / 0 / 122:  12%|█▏        | 122/1000 [12:07<1:27:14,  5.96s/it][Succeeded / Failed / Skipped / Total] 85 / 37 / 0 / 122:  12%|█▏        | 123/1000 [12:08<1:26:32,  5.92s/it]Resolves a parameter . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Mono < Object > [[resolveArgument]] ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > [[reactiveSecurityContext]] = ReactiveSecurityContextHolder . getContext ( ) ; if ( [[reactiveSecurityContext]] == null ) { return null ; } return [[reactiveSecurityContext]] . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .

[[[[Adv]]]]: @ Override public Mono < Object > [[chicha]] ( MethodParameter parameter , BindingContext bindingContext , ServerWebExchange exchange ) { ReactiveAdapter adapter = getAdapterRegistry ( ) . getAdapter ( parameter . getParameterType ( ) ) ; Mono < SecurityContext > [[charismatic]] = ReactiveSecurityContextHolder . getContext ( ) ; if ( [[charismatic]] == null ) { return null ; } return [[charismatic]] . flatMap ( a -> { Object p = resolveSecurityContext ( parameter , a ) ; Mono < Object > o = Mono . justOrEmpty ( p ) ; return adapter == null ? o : Mono . just ( adapter . fromPublisher ( o ) ) ; } ) ; }
[[[[Nl]]]]: resolve the argument to inject into the controller parameter .
--------------------------------------------- Result 117 ---------------------------------------------
Authenticates the given authentication token . --> returns null if not found --> Socre: 1.0

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[auth]] ) throws AuthenticationException { if ( ! ( [[auth]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[auth]] ; Set < GrantedAuthority > [[authorities]] ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential

[[[[Adv]]]]: public Authentication authenticate ( Authentication [[hurt]] ) throws AuthenticationException { if ( ! ( [[hurt]] instanceof UsernamePasswordAuthenticationToken ) ) { return null ; } UsernamePasswordAuthenticationToken request = ( UsernamePasswordAuthenticationToken ) [[hurt]] ; Set < GrantedAuthority > [[beaufort]] ; try {
[[[[Nl]]]]: Attempts to login the user given the Authentication objects principal and credential
--------------------------------------------- Result 118 ---------------------------------------------
Returns the full URL of the request . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String [[getRedirectUrl]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .

[[[[Adv]]]]: @ Override public String [[oswaldo]] ( ) { return UrlUtils . buildFullRequestUrl ( scheme , serverName , serverPort , requestURI , queryString ) ; }
[[[[Nl]]]]: Indicates the URL that the user agent used for this request .
--------------------------------------------- Result 119 ---------------------------------------------
Clears out the session . --> todo not call this method --> Socre: 1.0

[[[[Adv]]]]: public void [[logout]] ( HttpServletRequest [[request]] , HttpServletResponse response , Authentication [[authentication]] ) { Assert . notNull ( [[request]] , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = [[request]] . getSession ( False ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext [[context]] = SecurityContextHolder . getContext ( ) ; [[context]] . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .

[[[[Adv]]]]: public void [[tattered]] ( HttpServletRequest [[christabel]] , HttpServletResponse response , Authentication [[bigamy]] ) { Assert . notNull ( [[christabel]] , "HttpServletRequest required" ) ; if ( invalidateHttpSession ) { HttpSession session = [[christabel]] . getSession ( False ) ; if ( session != null ) { logger . debug ( "Invalidating session: " + session . getId ( ) ) ; session . invalidate ( ) ; } } if ( clearAuthentication ) { SecurityContext [[pazuzu]] = SecurityContextHolder . getContext ( ) ; [[pazuzu]] . setAuthentication ( null ) ; } SecurityContextHolder . clearContext ( ) ; }
[[[[Nl]]]]: Requires the request to be passed in .
--------------------------------------------- Result 120 ---------------------------------------------
Render end tag . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[doEndTag]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .

[[[[Adv]]]]: public int [[alerts]] ( ) throws JspException { try { if ( ! authorized && TagLibConfig . isUiSecurityDisabled ( ) ) { pageContext . getOut ( ) . write ( TagLibConfig . getSecuredUiSuffix ( ) ) ; } } catch ( IOException e ) { throw new JspException ( e ) ; } return EVAL_PAGE ; }
[[[[Nl]]]]: Default processing of the end tag returning EVAL_PAGE .
--------------------------------------------- Result 121 ---------------------------------------------
Sets the context environment properties . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setContextEnvironmentProperties]] ( Map < String , Object > [[environment]] ) { Assert . notEmpty ( [[environment]] , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( [[environment]] ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .

[[[[Adv]]]]: public void [[diagnostics]] ( Map < String , Object > [[abandoning]] ) { Assert . notEmpty ( [[abandoning]] , "environment must not be empty" ) ; this . contextEnvironmentProperties = new Hashtable <> ( [[abandoning]] ) ; }
[[[[Nl]]]]: Allows a custom environment properties to be used to create initial LDAP context .
--------------------------------------------- Result 122 ---------------------------------------------
Initializes the user details service . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails [[userDetails]] : this . users ) { getUserDetailsService ( ) . createUser ( [[userDetails]] ) ; } }
[[[[Nl]]]]: Populates the users that have been added .

[[[[Adv]]]]: @ Override protected void initUserDetailsService ( ) throws Exception { for ( UserDetailsBuilder userBuilder : userBuilders ) { getUserDetailsService ( ) . createUser ( userBuilder . build ( ) ) ; } for ( UserDetails [[antigen]] : this . users ) { getUserDetailsService ( ) . createUser ( [[antigen]] ) ; } }
[[[[Nl]]]]: Populates the users that have been added .
--------------------------------------------- Result 123 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 85 / 38 / 0 / 123:  12%|█▏        | 123/1000 [12:08<1:26:32,  5.92s/it][Succeeded / Failed / Skipped / Total] 85 / 38 / 0 / 123:  12%|█▏        | 124/1000 [12:28<1:28:07,  6.04s/it][Succeeded / Failed / Skipped / Total] 86 / 38 / 0 / 124:  12%|█▏        | 124/1000 [12:28<1:28:07,  6.04s/it][Succeeded / Failed / Skipped / Total] 86 / 38 / 0 / 124:  12%|█▎        | 125/1000 [12:33<1:27:52,  6.03s/it][Succeeded / Failed / Skipped / Total] 86 / 39 / 0 / 125:  12%|█▎        | 125/1000 [12:33<1:27:52,  6.03s/it][Succeeded / Failed / Skipped / Total] 86 / 39 / 0 / 125:  13%|█▎        | 126/1000 [12:34<1:27:10,  5.98s/it][Succeeded / Failed / Skipped / Total] 87 / 39 / 0 / 126:  13%|█▎        | 126/1000 [12:34<1:27:10,  5.98s/it][Succeeded / Failed / Skipped / Total] 87 / 39 / 0 / 126:  13%|█▎        | 127/1000 [12:43<1:27:31,  6.01s/it][Succeeded / Failed / Skipped / Total] 87 / 40 / 0 / 127:  13%|█▎        | 127/1000 [12:43<1:27:31,  6.01s/it][Succeeded / Failed / Skipped / Total] 87 / 40 / 0 / 127:  13%|█▎        | 128/1000 [12:48<1:27:18,  6.01s/it]Returns the UserDetailsService . --> [[[FAILED]]]

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > [[beans]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[beans]] . size ( ) == 0 ) { [[beans]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[beans]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[beans]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[beans]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .

[[[[Adv]]]]: private UserDetailsService getUserDetailsService ( ) { Map < String , ? > [[bedrooms]] = getBeansOfType ( CachingUserDetailsService . class ) ; if ( [[bedrooms]] . size ( ) == 0 ) { [[bedrooms]] = getBeansOfType ( UserDetailsService . class ) ; } if ( [[bedrooms]] . size ( ) == 0 ) { throw new ApplicationContextException ( "No UserDetailsService registered." ) ; } else if ( [[bedrooms]] . size ( ) > 1 ) { throw new ApplicationContextException ( "More than one UserDetailsService registered. Please " + "use a specific Id reference in <remember-me/> <openid-login/> or <x509 /> elements." ) ; } return ( UserDetailsService ) [[bedrooms]] . values ( ) . toArray ( ) [ 0 ] ; }
[[[[Nl]]]]: Obtains a user details service for use in RememberMeServices etc . Will return a caching version if available so should not be used for beans which need to separate the two .
--------------------------------------------- Result 124 ---------------------------------------------
Adds the pkce parameters . --> Auxiliary method to send a codeChallenge --> Socre: 1.0

[[[[Adv]]]]: private void [[addPkceParameters]] ( Map < String , Object > attributes , Map < String , Object > [[additionalParameters]] ) { String codeVerifier = this . [[codeVerifierGenerator]] . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { [[additionalParameters]] . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests

[[[[Adv]]]]: private void [[bugged]] ( Map < String , Object > attributes , Map < String , Object > [[lion]] ) { String codeVerifier = this . [[averted]] . generateKey ( ) ; attributes . put ( PkceParameterNames . CODE_VERIFIER , codeVerifier ) ; try { String codeChallenge = createCodeChallenge ( codeVerifier ) ; [[lion]] . put ( PkceParameterNames . CODE_CHALLENGE , codeChallenge ) ; [[lion]] . put ( PkceParameterNames . CODE_CHALLENGE_METHOD , "S256" ) ; } catch ( NoSuchAlgorithmException e ) { [[lion]] . put ( PkceParameterNames . CODE_CHALLENGE , codeVerifier ) ; } }
[[[[Nl]]]]: Creates and adds additional PKCE parameters for use in the OAuth 2 . 0 Authorization and Access Token Requests
--------------------------------------------- Result 125 ---------------------------------------------
Build the provider URL for a list of LDAP server URLs . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[buildProviderUrl]] ( List < String > [[urls]] , String [[baseDn]] ) { Assert . notNull ( [[baseDn]] , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( [[urls]] , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = [[baseDn]] . trim ( ) ; StringBuilder [[providerUrl]] = new StringBuilder ( ) ; for ( String serverUrl : [[urls]] ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } [[providerUrl]] . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { [[providerUrl]] . append ( "/" ) ; } [[providerUrl]] . append ( trimmedBaseDn ) ; [[providerUrl]] . append ( " " ) ; } return [[providerUrl]] . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .

[[[[Adv]]]]: private static String [[knockoffs]] ( List < String > [[ced]] , String [[harry]] ) { Assert . notNull ( [[harry]] , "The Base DN for the LDAP server must not be null." ) ; Assert . notEmpty ( [[ced]] , "At least one LDAP server URL must be provided." ) ; String trimmedBaseDn = [[harry]] . trim ( ) ; StringBuilder [[armchair]] = new StringBuilder ( ) ; for ( String serverUrl : [[ced]] ) { String trimmedUrl = serverUrl . trim ( ) ; if ( "" . equals ( trimmedUrl ) ) { continue ; } [[armchair]] . append ( trimmedUrl ) ; if ( ! trimmedUrl . endsWith ( "/" ) ) { [[armchair]] . append ( "/" ) ; } [[armchair]] . append ( trimmedBaseDn ) ; [[armchair]] . append ( " " ) ; } return [[armchair]] . toString ( ) ; }
[[[[Nl]]]]: Builds a Spring LDAP - compliant Provider URL string i . e . a space - separated list of LDAP servers with their base DNs . As the base DN must be identical for all servers it needs to be supplied only once .
--------------------------------------------- Result 126 ---------------------------------------------
Determines if this request requires authentication . --> Determines if the request should be bloomer --> Socre: 1.0

[[[[Adv]]]]: protected boolean [[requiresAuthentication]] ( final HttpServletRequest request , final HttpServletResponse [[response]] ) { final boolean serviceTicketRequest = serviceTicketRequest ( request , [[response]] ) ; final boolean result = serviceTicketRequest || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( serviceTicketRequest , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .

[[[[Adv]]]]: protected boolean [[bloomer]] ( final HttpServletRequest request , final HttpServletResponse [[georgette]] ) { final boolean serviceTicketRequest = serviceTicketRequest ( request , [[georgette]] ) ; final boolean result = serviceTicketRequest || proxyReceptorRequest ( request ) || ( proxyTicketRequest ( serviceTicketRequest , request ) ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "requiresAuthentication = " + result ) ; } return result ; }
[[[[Nl]]]]: Overridden to provide proxying capabilities .
--------------------------------------------- Result 127 ---------------------------------------------
Handles request ticket request . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[serviceTicketRequest]] ( final HttpServletRequest [[request]] , final HttpServletResponse response ) { boolean [[result]] = super . requiresAuthentication ( [[request]] , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .

[[[[Adv]]]]: private boolean [[fisticuffs]] ( final HttpServletRequest [[mortuary]] , final HttpServletResponse response ) { boolean [[languedoc]] = super . requiresAuthentication ( [[mortuary]] , response ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "serviceTicketRequest = " + [[languedoc]] ) ; } return [[languedoc]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a service ticket . This method exists for readability .
--------------------------------------------- Result 128 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 88 / 40 / 0 / 128:  13%|█▎        | 128/1000 [12:48<1:27:18,  6.01s/it][Succeeded / Failed / Skipped / Total] 88 / 40 / 0 / 128:  13%|█▎        | 129/1000 [12:57<1:27:32,  6.03s/it][Succeeded / Failed / Skipped / Total] 89 / 40 / 0 / 129:  13%|█▎        | 129/1000 [12:57<1:27:32,  6.03s/it][Succeeded / Failed / Skipped / Total] 89 / 40 / 0 / 129:  13%|█▎        | 130/1000 [13:02<1:27:13,  6.02s/it][Succeeded / Failed / Skipped / Total] 89 / 41 / 0 / 130:  13%|█▎        | 130/1000 [13:02<1:27:13,  6.02s/it][Succeeded / Failed / Skipped / Total] 89 / 41 / 0 / 130:  13%|█▎        | 131/1000 [13:04<1:26:42,  5.99s/it][Succeeded / Failed / Skipped / Total] 89 / 42 / 0 / 131:  13%|█▎        | 131/1000 [13:04<1:26:42,  5.99s/it][Succeeded / Failed / Skipped / Total] 89 / 42 / 0 / 131:  13%|█▎        | 132/1000 [13:05<1:26:03,  5.95s/it][Succeeded / Failed / Skipped / Total] 90 / 42 / 0 / 132:  13%|█▎        | 132/1000 [13:05<1:26:03,  5.95s/it][Succeeded / Failed / Skipped / Total] 90 / 42 / 0 / 132:  13%|█▎        | 133/1000 [13:15<1:26:22,  5.98s/it][Succeeded / Failed / Skipped / Total] 91 / 42 / 0 / 133:  13%|█▎        | 133/1000 [13:15<1:26:22,  5.98s/it][Succeeded / Failed / Skipped / Total] 91 / 42 / 0 / 133:  13%|█▎        | 134/1000 [13:21<1:26:17,  5.98s/it][Succeeded / Failed / Skipped / Total] 91 / 43 / 0 / 134:  13%|█▎        | 134/1000 [13:21<1:26:17,  5.98s/it][Succeeded / Failed / Skipped / Total] 91 / 43 / 0 / 134:  14%|█▎        | 135/1000 [13:24<1:25:52,  5.96s/it]Determines whether the application is authenticated . --> Determine whether or not --> Socre: 1.0

[[[[Adv]]]]: private boolean [[authenticated]] ( ) { Authentication [[authentication]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[authentication]] != null && [[authentication]] . isAuthenticated ( ) && ! ( [[authentication]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .

[[[[Adv]]]]: private boolean [[oxycontin]] ( ) { Authentication [[pesto]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return [[pesto]] != null && [[pesto]] . isAuthenticated ( ) && ! ( [[pesto]] instanceof AnonymousAuthenticationToken ) ; }
[[[[Nl]]]]: Determines if a user is already authenticated .
--------------------------------------------- Result 129 ---------------------------------------------
Retrieve JWK set . --> Returns a Mono of JWKSets --> Socre: 1.0

[[[[Adv]]]]: private Mono < JWKSet > getJWKSet ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . [[cachedJWKSet]] . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .

[[[[Adv]]]]: private Mono < JWKSet > getJWKSet ( ) { return this . webClient . get ( ) . uri ( this . jwkSetURL ) . retrieve ( ) . bodyToMono ( String . class ) . map ( this :: parse ) . doOnNext ( jwkSet -> this . [[chlamydia]] . set ( Mono . just ( jwkSet ) ) ) . cache ( ) ; }
[[[[Nl]]]]: Updates the cached JWK set from the configured URL .
--------------------------------------------- Result 130 ---------------------------------------------
Determines if the specified request should be proxied . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[proxyReceptorRequest]] ( final HttpServletRequest [[request]] ) { final boolean [[result]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[request]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[result]] ) ; } return [[result]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .

[[[[Adv]]]]: private boolean [[deci]] ( final HttpServletRequest [[bloomberg]] ) { final boolean [[obstacles]] = proxyReceptorConfigured ( ) && proxyReceptorMatcher . matches ( [[bloomberg]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyReceptorRequest = " + [[obstacles]] ) ; } return [[obstacles]] ; }
[[[[Nl]]]]: Indicates if the request is elgible to be processed as the proxy receptor .
--------------------------------------------- Result 131 ---------------------------------------------
Verifies if a ticket should be authenticated or not . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean proxyTicketRequest ( final boolean [[serviceTicketRequest]] , final HttpServletRequest request ) { if ( [[serviceTicketRequest]] ) { return "[[False]]" != "[[False]]" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .

[[[[Adv]]]]: private boolean proxyTicketRequest ( final boolean [[dwell]] , final HttpServletRequest request ) { if ( [[dwell]] ) { return "[["Login" != "Login"]]" != "[["Login" != "Login"]]" ; } final boolean result = authenticateAllArtifacts && obtainArtifact ( request ) != null && ! authenticated ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "proxyTicketRequest = " + result ) ; } return result ; }
[[[[Nl]]]]: Indicates if the request is elgible to process a proxy ticket .
--------------------------------------------- Result 132 ---------------------------------------------
Encodes a string using UTF - 8 encoding . --> Encodes the given adress . --> Socre: 1.0

[[[[Adv]]]]: private String utf8UrlEncode ( String [[value]] ) { try { return URLEncoder . encode ( [[value]] , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8

[[[[Adv]]]]: private String utf8UrlEncode ( String [[adelphi]] ) { try { return URLEncoder . encode ( [[adelphi]] , "UTF-8" ) ; } catch ( UnsupportedEncodingException e ) { Error err = new AssertionError ( "The Java platform guarantees UTF-8 support, but it seemingly is not present." ) ; err . initCause ( e ) ; throw err ; } }
[[[[Nl]]]]: Performs URL encoding with UTF - 8
--------------------------------------------- Result 133 ---------------------------------------------
Get the pre - authenticated principal . --> getPreAuthenticatedPrincipal from httpRequest --> Socre: 1.0

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object [[principal]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the WebSphere user name .

[[[[Adv]]]]: protected Object getPreAuthenticatedPrincipal ( HttpServletRequest httpRequest ) { Object [[embarrass]] = wasHelper . getCurrentUserName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated WebSphere principal: " + [[embarrass]] ) ; } return [[embarrass]] ; }
[[[[Nl]]]]: Return the WebSphere user name .
--------------------------------------------- Result 134 ---------------------------------------------
Create a new security expression root for the given authentication . --> [[[FAILED]]]

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[createSecurityExpressionRoot]] ( Authentication [[authentication]] , MethodInvocation invocation ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( [[authentication]] ) ; root . setThis ( invocation . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .

[[[[Adv]]]]: protected MethodSecurityExpressionOperations [[slumming]] ( Authentication [[milker]] , MethodInvocation invocation ) { MethodSecurityExpressionRoot root = new MethodSecurityExpressionRoot ( [[milker]] ) ; root . setThis ( invocation . getThis ( ) ) ; root . setPermissionEvaluator ( getPermissionEvaluator ( ) ) ; root . setTrustResolver ( getTrustResolver ( ) ) ; root . setRoleHierarchy ( getRoleHierarchy ( ) ) ; root . setDefaultRolePrefix ( getDefaultRolePrefix ( ) ) ; return root ; }
[[[[Nl]]]]: Creates the root object for expression evaluation .
--------------------------------------------- Result 135 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 92 / 43 / 0 / 135:  14%|█▎        | 135/1000 [13:24<1:25:52,  5.96s/it][Succeeded / Failed / Skipped / Total] 92 / 43 / 0 / 135:  14%|█▎        | 136/1000 [13:32<1:25:59,  5.97s/it][Succeeded / Failed / Skipped / Total] 92 / 44 / 0 / 136:  14%|█▎        | 136/1000 [13:32<1:25:59,  5.97s/it][Succeeded / Failed / Skipped / Total] 92 / 44 / 0 / 136:  14%|█▎        | 137/1000 [13:48<1:27:00,  6.05s/it][Succeeded / Failed / Skipped / Total] 93 / 44 / 0 / 137:  14%|█▎        | 137/1000 [13:48<1:27:00,  6.05s/it][Succeeded / Failed / Skipped / Total] 93 / 44 / 0 / 137:  14%|█▍        | 138/1000 [13:51<1:26:35,  6.03s/it][Succeeded / Failed / Skipped / Total] 94 / 44 / 0 / 138:  14%|█▍        | 138/1000 [13:51<1:26:35,  6.03s/it][Succeeded / Failed / Skipped / Total] 94 / 44 / 0 / 138:  14%|█▍        | 139/1000 [14:01<1:26:50,  6.05s/it][Succeeded / Failed / Skipped / Total] 95 / 44 / 0 / 139:  14%|█▍        | 139/1000 [14:01<1:26:50,  6.05s/it][Succeeded / Failed / Skipped / Total] 95 / 44 / 0 / 139:  14%|█▍        | 140/1000 [14:09<1:26:56,  6.07s/it][Succeeded / Failed / Skipped / Total] 95 / 45 / 0 / 140:  14%|█▍        | 140/1000 [14:09<1:26:56,  6.07s/it][Succeeded / Failed / Skipped / Total] 95 / 45 / 0 / 140:  14%|█▍        | 141/1000 [14:10<1:26:20,  6.03s/it][Succeeded / Failed / Skipped / Total] 95 / 46 / 0 / 141:  14%|█▍        | 141/1000 [14:10<1:26:20,  6.03s/it][Succeeded / Failed / Skipped / Total] 95 / 46 / 0 / 141:  14%|█▍        | 142/1000 [14:17<1:26:23,  6.04s/it]Load user by assertion . --> Acquires alcove --> Socre: 1.0

[[[[Adv]]]]: protected UserDetails [[loadUserByAssertion]] ( final Assertion [[assertion]] ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( [[assertion]] , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .

[[[[Adv]]]]: protected UserDetails [[alcove]] ( final Assertion [[giz]] ) { final CasAssertionAuthenticationToken token = new CasAssertionAuthenticationToken ( [[giz]] , "" ) ; return this . authenticationUserDetailsService . loadUserDetails ( token ) ; }
[[[[Nl]]]]: Template method for retrieving the UserDetails based on the assertion . Default is to call configured userDetailsService and pass the username . Deployers can override this method and retrieve the user based on any criteria they desire .
--------------------------------------------- Result 136 ---------------------------------------------
Get the list of groups based on the authenticated user --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[getWebSphereGroupsBasedGrantedAuthorities]] ( ) { List < String > [[webSphereGroups]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[webSphereGroups]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[webSphereGroups]] + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .

[[[[Adv]]]]: private Collection < ? extends GrantedAuthority > [[specializes]] ( ) { List < String > [[barack]] = wasHelper . getGroupsForCurrentUser ( ) ; Collection < ? extends GrantedAuthority > userGas = webSphereGroups2GrantedAuthoritiesMapper . getGrantedAuthorities ( [[barack]] ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "WebSphere groups: " + [[barack]] + " mapped to Granted Authorities: " + userGas ) ; } return userGas ; }
[[[[Nl]]]]: Get a list of Granted Authorities based on the current user s WebSphere groups .
--------------------------------------------- Result 137 ---------------------------------------------
Get a list of authorities from a list of attributes . --> Get authorities for authorities --> Socre: 1.0

[[[[Adv]]]]: public List < GrantedAuthority > [[getGrantedAuthorities]] ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String [[attribute]] : attributes ) { Collection < GrantedAuthority > [[c]] = attributes2grantedAuthoritiesMap . get ( [[attribute]] ) ; if ( [[c]] != null ) { gaList . addAll ( [[c]] ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .

[[[[Adv]]]]: public List < GrantedAuthority > [[forster]] ( Collection < String > attributes ) { ArrayList < GrantedAuthority > gaList = new ArrayList <> ( ) ; for ( String [[israelite]] : attributes ) { Collection < GrantedAuthority > [[rated]] = attributes2grantedAuthoritiesMap . get ( [[israelite]] ) ; if ( [[rated]] != null ) { gaList . addAll ( [[rated]] ) ; } } gaList . trimToSize ( ) ; return gaList ; }
[[[[Nl]]]]: Map the given array of attributes to Spring Security GrantedAuthorities .
--------------------------------------------- Result 138 ---------------------------------------------
Returns a portion of a byte array . --> Calculate cern --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[subArray]] ( byte [ ] array , int [[beginIndex]] , int [[endIndex]] ) { int [[length]] = [[endIndex]] - [[beginIndex]] ; byte [ ] subarray = new byte [ [[length]] ] ; System . arraycopy ( array , [[beginIndex]] , subarray , 0 , [[length]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .

[[[[Adv]]]]: public static byte [ ] [[cern]] ( byte [ ] array , int [[downstage]] , int [[ella]] ) { int [[altruism]] = [[ella]] - [[downstage]] ; byte [ ] subarray = new byte [ [[altruism]] ] ; System . arraycopy ( array , [[downstage]] , subarray , 0 , [[altruism]] ) ; return subarray ; }
[[[[Nl]]]]: Extract a sub array of bytes out of the byte array .
--------------------------------------------- Result 139 ---------------------------------------------
Concatenates two arrays together . --> Creates a crowbar --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[concatenate]] ( byte [ ] ... [[arrays]] ) { int length = 0 ; for ( byte [ ] array : [[arrays]] ) { length += array . length ; } byte [ ] [[newArray]] = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : [[arrays]] ) { System . arraycopy ( array , 0 , [[newArray]] , destPos , array . length ) ; destPos += array . length ; } return [[newArray]] ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .

[[[[Adv]]]]: public static byte [ ] [[crowbar]] ( byte [ ] ... [[indecency]] ) { int length = 0 ; for ( byte [ ] array : [[indecency]] ) { length += array . length ; } byte [ ] [[atacama]] = new byte [ length ] ; int destPos = 0 ; for ( byte [ ] array : [[indecency]] ) { System . arraycopy ( array , 0 , [[atacama]] , destPos , array . length ) ; destPos += array . length ; } return [[atacama]] ; }
[[[[Nl]]]]: Combine the individual byte arrays into one array .
--------------------------------------------- Result 140 ---------------------------------------------
Preprocess a map of map authorities . --> [[[FAILED]]]

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > [[orgMap]] ) { Map < String , Collection < GrantedAuthority > > [[result]] = new HashMap < String , Collection < GrantedAuthority > > ( [[orgMap]] . size ( ) ) ; for ( Map . Entry < ? , ? > [[entry]] : [[orgMap]] . entrySet ( ) ) { Assert . isInstanceOf ( String . class , [[entry]] . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[result]] . put ( ( String ) [[entry]] . getKey ( ) , getGrantedAuthorityCollection ( [[entry]] . getValue ( ) ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections

[[[[Adv]]]]: private Map < String , Collection < GrantedAuthority > > preProcessMap ( Map < ? , ? > [[reattach]] ) { Map < String , Collection < GrantedAuthority > > [[decree]] = new HashMap < String , Collection < GrantedAuthority > > ( [[reattach]] . size ( ) ) ; for ( Map . Entry < ? , ? > [[mekong]] : [[reattach]] . entrySet ( ) ) { Assert . isInstanceOf ( String . class , [[mekong]] . getKey ( ) , "attributes2grantedAuthoritiesMap contains non-String objects as keys" ) ; [[decree]] . put ( ( String ) [[mekong]] . getKey ( ) , getGrantedAuthorityCollection ( [[mekong]] . getValue ( ) ) ) ; } return [[decree]] ; }
[[[[Nl]]]]: Preprocess the given map to convert all the values to GrantedAuthority collections
--------------------------------------------- Result 141 ---------------------------------------------
Gets the granted authority collection . --> [[[FAILED]]]

[[[[Adv]]]]: private Collection < GrantedAuthority > [[getGrantedAuthorityCollection]] ( Object value ) { Collection < GrantedAuthority > [[result]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[result]] , value ) ; return [[result]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities

[[[[Adv]]]]: private Collection < GrantedAuthority > [[bards]] ( Object value ) { Collection < GrantedAuthority > [[accretion]] = new ArrayList <> ( ) ; addGrantedAuthorityCollection ( [[accretion]] , value ) ; return [[accretion]] ; }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities
--------------------------------------------- Result 142 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 96 / 46 / 0 / 142:  14%|█▍        | 142/1000 [14:17<1:26:23,  6.04s/it][Succeeded / Failed / Skipped / Total] 96 / 46 / 0 / 142:  14%|█▍        | 143/1000 [14:22<1:26:11,  6.03s/it][Succeeded / Failed / Skipped / Total] 96 / 47 / 0 / 143:  14%|█▍        | 143/1000 [14:22<1:26:11,  6.03s/it][Succeeded / Failed / Skipped / Total] 96 / 47 / 0 / 143:  14%|█▍        | 144/1000 [14:27<1:25:54,  6.02s/it][Succeeded / Failed / Skipped / Total] 97 / 47 / 0 / 144:  14%|█▍        | 144/1000 [14:27<1:25:54,  6.02s/it][Succeeded / Failed / Skipped / Total] 97 / 47 / 0 / 144:  14%|█▍        | 145/1000 [14:30<1:25:33,  6.00s/it][Succeeded / Failed / Skipped / Total] 97 / 48 / 0 / 145:  14%|█▍        | 145/1000 [14:30<1:25:33,  6.00s/it][Succeeded / Failed / Skipped / Total] 97 / 48 / 0 / 145:  15%|█▍        | 146/1000 [14:35<1:25:23,  6.00s/it][Succeeded / Failed / Skipped / Total] 98 / 48 / 0 / 146:  15%|█▍        | 146/1000 [14:35<1:25:23,  6.00s/it][Succeeded / Failed / Skipped / Total] 98 / 48 / 0 / 146:  15%|█▍        | 147/1000 [14:37<1:24:52,  5.97s/it][Succeeded / Failed / Skipped / Total] 99 / 48 / 0 / 147:  15%|█▍        | 147/1000 [14:37<1:24:52,  5.97s/it][Succeeded / Failed / Skipped / Total] 99 / 48 / 0 / 147:  15%|█▍        | 148/1000 [14:43<1:24:47,  5.97s/it]Adds the specified value to the granted authority collection . --> ztodo --> Socre: 1.0

[[[[Adv]]]]: private void [[addGrantedAuthorityCollection]] ( Collection < GrantedAuthority > result , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[value]] instanceof Collection < ? > ) { [[addGrantedAuthorityCollection]] ( result , ( Collection < ? > ) [[value]] ) ; } else if ( [[value]] instanceof Object [ ] ) { [[addGrantedAuthorityCollection]] ( result , ( Object [ ] ) [[value]] ) ; } else if ( [[value]] instanceof String ) { [[addGrantedAuthorityCollection]] ( result , ( String ) [[value]] ) ; } else if ( [[value]] instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) [[value]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[value]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .

[[[[Adv]]]]: private void [[zar]] ( Collection < GrantedAuthority > result , Object [[barstow]] ) { if ( [[barstow]] == null ) { return ; } if ( [[barstow]] instanceof Collection < ? > ) { [[zar]] ( result , ( Collection < ? > ) [[barstow]] ) ; } else if ( [[barstow]] instanceof Object [ ] ) { [[zar]] ( result , ( Object [ ] ) [[barstow]] ) ; } else if ( [[barstow]] instanceof String ) { [[zar]] ( result , ( String ) [[barstow]] ) ; } else if ( [[barstow]] instanceof GrantedAuthority ) { result . add ( ( GrantedAuthority ) [[barstow]] ) ; } else { throw new IllegalArgumentException ( "Invalid object type: " + [[barstow]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Convert the given value to a collection of Granted Authorities adding the result to the given result collection .
--------------------------------------------- Result 143 ---------------------------------------------
Gets a shared object . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[C]] > [[C]] getSharedObject ( Class < [[C]] > sharedType ) { return ( [[C]] ) this . [[sharedObjects]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[underweight]] > [[underweight]] getSharedObject ( Class < [[underweight]] > sharedType ) { return ( [[underweight]] ) this . [[breslin]] . get ( sharedType ) ; }
[[[[Nl]]]]: Gets a shared Object . Note that object heirarchies are not considered .
--------------------------------------------- Result 144 ---------------------------------------------
Intercept the interceptor method . --> Implementation of interceptor methods --> Socre: 1.0

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback [[advisorProceed]] ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = [[advisorProceed]] . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .

[[[[Adv]]]]: public Object invoke ( JoinPoint jp , AspectJCallback [[bridgeport]] ) { InterceptorStatusToken token = super . beforeInvocation ( new MethodInvocationAdapter ( jp ) ) ; Object result ; try { result = [[bridgeport]] . proceedWithObject ( ) ; } finally { super . finallyInvocation ( token ) ; } return super . afterInvocation ( token , result ) ; }
[[[[Nl]]]]: Method that is suitable for user with traditional AspectJ - code aspects .
--------------------------------------------- Result 145 ---------------------------------------------
Gets the pre authenticated principal . --> [[[FAILED]]]

[[[[Adv]]]]: protected Object [[getPreAuthenticatedPrincipal]] ( HttpServletRequest httpRequest ) { Object [[principal]] = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[principal]] ) ; } return [[principal]] ; }
[[[[Nl]]]]: Return the J2EE user name .

[[[[Adv]]]]: protected Object [[pollutes]] ( HttpServletRequest httpRequest ) { Object [[nocturnal]] = httpRequest . getUserPrincipal ( ) == null ? null : httpRequest . getUserPrincipal ( ) . getName ( ) ; if ( logger . isDebugEnabled ( ) ) { logger . debug ( "PreAuthenticated J2EE principal: " + [[nocturnal]] ) ; } return [[nocturnal]] ; }
[[[[Nl]]]]: Return the J2EE user name .
--------------------------------------------- Result 146 ---------------------------------------------
Converts a list of roles to a list of roles --> Extracts any ACEs --> Socre: 1.0

[[[[Adv]]]]: private static String [ ] hasAnyRole ( String ... [[roles]] ) { for ( int i = 0 ; i < [[roles]] . length ; i ++ ) { [[roles]] [ i ] = "ROLE_" + [[roles]] [ i ] ; } return [[roles]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .

[[[[Adv]]]]: private static String [ ] hasAnyRole ( String ... [[ceasar]] ) { for ( int i = 0 ; i < [[ceasar]] . length ; i ++ ) { [[ceasar]] [ i ] = "ROLE_" + [[ceasar]] [ i ] ; } return [[ceasar]] ; }
[[[[Nl]]]]: Creates a String for specifying that a user requires one of many roles .
--------------------------------------------- Result 147 ---------------------------------------------
Checks the role . --> calculate the macao --> Socre: 1.0

[[[[Adv]]]]: private static String [[hasRole]] ( String [[role]] ) { Assert . isTrue ( ! [[role]] . startsWith ( "ROLE_" ) , ( ) -> [[role]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[role]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .

[[[[Adv]]]]: private static String [[macao]] ( String [[disciplinarian]] ) { Assert . isTrue ( ! [[disciplinarian]] . startsWith ( "ROLE_" ) , ( ) -> [[disciplinarian]] + " should not start with ROLE_ since ROLE_ is automatically prepended when using hasRole. Consider using hasAuthority or access instead." ) ; return "ROLE_" + [[disciplinarian]] ; }
[[[[Nl]]]]: Creates a String for specifying a user requires a role .
--------------------------------------------- Result 148 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 100 / 48 / 0 / 148:  15%|█▍        | 148/1000 [14:43<1:24:47,  5.97s/it][Succeeded / Failed / Skipped / Total] 100 / 48 / 0 / 148:  15%|█▍        | 149/1000 [14:52<1:24:55,  5.99s/it][Succeeded / Failed / Skipped / Total] 101 / 48 / 0 / 149:  15%|█▍        | 149/1000 [14:52<1:24:55,  5.99s/it][Succeeded / Failed / Skipped / Total] 101 / 48 / 0 / 149:  15%|█▌        | 150/1000 [15:07<1:25:44,  6.05s/it][Succeeded / Failed / Skipped / Total] 102 / 48 / 0 / 150:  15%|█▌        | 150/1000 [15:07<1:25:44,  6.05s/it][Succeeded / Failed / Skipped / Total] 102 / 48 / 0 / 150:  15%|█▌        | 151/1000 [15:16<1:25:53,  6.07s/it][Succeeded / Failed / Skipped / Total] 102 / 49 / 0 / 151:  15%|█▌        | 151/1000 [15:16<1:25:53,  6.07s/it][Succeeded / Failed / Skipped / Total] 102 / 49 / 0 / 151:  15%|█▌        | 152/1000 [15:17<1:25:19,  6.04s/it][Succeeded / Failed / Skipped / Total] 103 / 49 / 0 / 152:  15%|█▌        | 152/1000 [15:17<1:25:19,  6.04s/it][Succeeded / Failed / Skipped / Total] 103 / 49 / 0 / 152:  15%|█▌        | 153/1000 [15:23<1:25:10,  6.03s/it][Succeeded / Failed / Skipped / Total] 104 / 49 / 0 / 153:  15%|█▌        | 153/1000 [15:23<1:25:10,  6.03s/it][Succeeded / Failed / Skipped / Total] 104 / 49 / 0 / 153:  15%|█▌        | 154/1000 [15:28<1:25:02,  6.03s/it]Build redirect URL for given request . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: protected String [[buildHttpsRedirectUrlForRequest]] ( HttpServletRequest request ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder [[urlBuilder]] = new RedirectUrlBuilder ( ) ; [[urlBuilder]] . setScheme ( "https" ) ; [[urlBuilder]] . setServerName ( request . getServerName ( ) ) ; [[urlBuilder]] . setPort ( httpsPort . intValue ( ) ) ; [[urlBuilder]] . setContextPath ( request . getContextPath ( ) ) ; [[urlBuilder]] . setServletPath ( request . getServletPath ( ) ) ; [[urlBuilder]] . setPathInfo ( request . getPathInfo ( ) ) ; [[urlBuilder]] . setQuery ( request . getQueryString ( ) ) ; return [[urlBuilder]] . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .

[[[[Adv]]]]: protected String [[chess]] ( HttpServletRequest request ) throws IOException , ServletException { int serverPort = portResolver . getServerPort ( request ) ; Integer httpsPort = portMapper . lookupHttpsPort ( Integer . valueOf ( serverPort ) ) ; if ( httpsPort != null ) { RedirectUrlBuilder [[bettin]] = new RedirectUrlBuilder ( ) ; [[bettin]] . setScheme ( "https" ) ; [[bettin]] . setServerName ( request . getServerName ( ) ) ; [[bettin]] . setPort ( httpsPort . intValue ( ) ) ; [[bettin]] . setContextPath ( request . getContextPath ( ) ) ; [[bettin]] . setServletPath ( request . getServletPath ( ) ) ; [[bettin]] . setPathInfo ( request . getPathInfo ( ) ) ; [[bettin]] . setQuery ( request . getQueryString ( ) ) ; return [[bettin]] . getUrl ( ) ; }
[[[[Nl]]]]: Builds a URL to redirect the supplied request to HTTPS . Used to redirect the current request to HTTPS before doing a forward to the login page .
--------------------------------------------- Result 149 ---------------------------------------------
Attempt to exit the login user . --> Obtain AuthenticationCredential --> Socre: 1.0

[[[[Adv]]]]: protected Authentication [[attemptExitUser]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .

[[[[Adv]]]]: protected Authentication [[diversionary]] ( HttpServletRequest request ) throws AuthenticationCredentialsNotFoundException {
[[[[Nl]]]]: Attempt to exit from an already switched user .
--------------------------------------------- Result 150 ---------------------------------------------
Sets the exit user URL . --> Methreise registerer --> Socre: 1.0

[[[[Adv]]]]: public void [[setExitUserUrl]] ( String [[exitUserUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[exitUserUrl]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( [[exitUserUrl]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .

[[[[Adv]]]]: public void [[première]] ( String [[auctions]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[auctions]] ) , "exitUserUrl cannot be empty and must be a valid redirect URL" ) ; this . exitUserMatcher = createMatcher ( [[auctions]] ) ; }
[[[[Nl]]]]: Set the URL to respond to exit user processing .
--------------------------------------------- Result 151 ---------------------------------------------
On login success . --> [[[FAILED]]]

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .

[[[[Adv]]]]: protected void onLoginSuccess ( HttpServletRequest request , HttpServletResponse response , Authentication successfulAuthentication ) { String username = successfulAuthentication . getName ( ) ; logger . debug ( "Creating new persistent login for user " + username ) ; PersistentRememberMeToken persistentToken = new PersistentRememberMeToken ( username , generateSeriesData ( ) , generateTokenData ( ) , new Date ( ) ) ; try { tokenRepository . createNewToken ( persistentToken ) ; addCookie ( persistentToken , request , response ) ; } catch ( Exception e ) { logger . error ( "Failed to save persistent token " , e ) ; } }
[[[[Nl]]]]: Creates a new persistent login token with a new series number stores the data in the persistent token repository and adds the corresponding cookie to the response .
--------------------------------------------- Result 152 ---------------------------------------------
Display public index --> Display a Hello Contact --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[displayPublicIndex]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .

[[[[Adv]]]]: @ RequestMapping ( value = "/hello.htm" , method = RequestMethod . GET ) public ModelAndView [[ania]] ( ) { Contact rnd = contactManager . getRandomContact ( ) ; return new ModelAndView ( "hello" , "contact" , rnd ) ; }
[[[[Nl]]]]: The public index page used for unauthenticated users .
--------------------------------------------- Result 153 ---------------------------------------------
Process auto login cookie token . --> Obtain UserDetails --> Socre: 1.0

[[[[Adv]]]]: protected UserDetails [[processAutoLoginCookie]] ( String [ ] [[cookieTokens]] , HttpServletRequest request , HttpServletResponse [[response]] ) { if ( [[cookieTokens]] . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( [[cookieTokens]] ) + "'" ) ; } final String presentedSeries = [[cookieTokens]] [ 0 ] ; final String presentedToken = [[cookieTokens]] [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .

[[[[Adv]]]]: protected UserDetails [[fugitive]] ( String [ ] [[benedetti]] , HttpServletRequest request , HttpServletResponse [[boaz]] ) { if ( [[benedetti]] . length != 2 ) { throw new InvalidCookieException ( "Cookie token did not contain " + 2 + " tokens, but contained '" + Arrays . asList ( [[benedetti]] ) + "'" ) ; } final String presentedSeries = [[benedetti]] [ 0 ] ; final String presentedToken = [[benedetti]] [ 1 ] ; PersistentRememberMeToken token = tokenRepository . getTokenForSeries ( presentedSeries ) ; if ( token == null ) {
[[[[Nl]]]]: Locates the presented cookie data in the token repository using the series id . If the data compares successfully with that in the persistent store a new token is generated and stored with the same series . The corresponding cookie value is set on the response .
--------------------------------------------- Result 154 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 105 / 49 / 0 / 154:  15%|█▌        | 154/1000 [15:28<1:25:02,  6.03s/it][Succeeded / Failed / Skipped / Total] 105 / 49 / 0 / 154:  16%|█▌        | 155/1000 [15:33<1:24:46,  6.02s/it][Succeeded / Failed / Skipped / Total] 106 / 49 / 0 / 155:  16%|█▌        | 155/1000 [15:33<1:24:46,  6.02s/it][Succeeded / Failed / Skipped / Total] 106 / 49 / 0 / 155:  16%|█▌        | 156/1000 [15:42<1:24:59,  6.04s/it][Succeeded / Failed / Skipped / Total] 107 / 49 / 0 / 156:  16%|█▌        | 156/1000 [15:42<1:24:59,  6.04s/it][Succeeded / Failed / Skipped / Total] 107 / 49 / 0 / 156:  16%|█▌        | 157/1000 [15:56<1:25:37,  6.09s/it][Succeeded / Failed / Skipped / Total] 107 / 50 / 0 / 157:  16%|█▌        | 157/1000 [15:56<1:25:37,  6.09s/it][Succeeded / Failed / Skipped / Total] 107 / 50 / 0 / 157:  16%|█▌        | 158/1000 [15:59<1:25:14,  6.07s/it][Succeeded / Failed / Skipped / Total] 107 / 51 / 0 / 158:  16%|█▌        | 158/1000 [15:59<1:25:14,  6.07s/it][Succeeded / Failed / Skipped / Total] 107 / 51 / 0 / 158:  16%|█▌        | 159/1000 [16:07<1:25:18,  6.09s/it][Succeeded / Failed / Skipped / Total] 107 / 52 / 0 / 159:  16%|█▌        | 159/1000 [16:07<1:25:18,  6.09s/it][Succeeded / Failed / Skipped / Total] 107 / 52 / 0 / 159:  16%|█▌        | 160/1000 [16:11<1:25:02,  6.07s/it][Succeeded / Failed / Skipped / Total] 108 / 52 / 0 / 160:  16%|█▌        | 160/1000 [16:11<1:25:02,  6.07s/it][Succeeded / Failed / Skipped / Total] 108 / 52 / 0 / 160:  16%|█▌        | 161/1000 [16:17<1:24:56,  6.07s/it]Build the spring security filter chain . --> Runs BZing . --> Socre: 1.0

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[springSecurityFilterChain]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter [[adapter]] = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( [[adapter]] ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain

[[[[Adv]]]]: @ Bean ( name = AbstractSecurityWebApplicationInitializer . DEFAULT_FILTER_NAME ) public Filter [[boozing]] ( ) throws Exception { boolean hasConfigurers = webSecurityConfigurers != null && ! webSecurityConfigurers . isEmpty ( ) ; if ( ! hasConfigurers ) { WebSecurityConfigurerAdapter [[boaz]] = objectObjectPostProcessor . postProcess ( new WebSecurityConfigurerAdapter ( ) { } ) ; webSecurity . apply ( [[boaz]] ) ; } return webSecurity . build ( ) ; }
[[[[Nl]]]]: Creates the Spring Security Filter Chain
--------------------------------------------- Result 155 ---------------------------------------------
Decodes the given token . --> decodes a string --> Socre: 1.0

[[[[Adv]]]]: @ Override public Jwt decode ( String [[token]] ) throws JwtException { JWT [[jwt]] = parse ( [[token]] ) ; if ( [[jwt]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[token]] , [[jwt]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[jwt]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format

[[[[Adv]]]]: @ Override public Jwt decode ( String [[reconnaissance]] ) throws JwtException { JWT [[nazo]] = parse ( [[reconnaissance]] ) ; if ( [[nazo]] instanceof SignedJWT ) { Jwt createdJwt = createJwt ( [[reconnaissance]] , [[nazo]] ) ; return validateJwt ( createdJwt ) ; } throw new JwtException ( "Unsupported algorithm of " + [[nazo]] . getHeader ( ) . getAlgorithm ( ) ) ; }
[[[[Nl]]]]: Decode and validate the JWT from its compact claims representation format
--------------------------------------------- Result 156 ---------------------------------------------
Converts the given JWT to granted authorities . --> Gets a collection of all scopes . --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[convert]] ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities

[[[[Adv]]]]: @ Override public Collection < GrantedAuthority > [[você]] ( Jwt jwt ) { return getScopes ( jwt ) . stream ( ) . map ( authority -> SCOPE_AUTHORITY_PREFIX + authority ) . map ( SimpleGrantedAuthority :: new ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Extracts the authorities
--------------------------------------------- Result 157 ---------------------------------------------
Check if the request is allowed using the Url --> [[[FAILED]]]

[[[[Adv]]]]: public boolean authorizeUsingUrlCheck ( ) throws IOException { String [[contextPath]] = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[currentUser]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( [[contextPath]] , getUrl ( ) , getMethod ( ) , [[currentUser]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .

[[[[Adv]]]]: public boolean authorizeUsingUrlCheck ( ) throws IOException { String [[snaking]] = ( ( HttpServletRequest ) getRequest ( ) ) . getContextPath ( ) ; Authentication [[sarcasm]] = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; return getPrivilegeEvaluator ( ) . isAllowed ( [[snaking]] , getUrl ( ) , getMethod ( ) , [[sarcasm]] ) ; }
[[[[Nl]]]]: Make an authorization decision based on the URL and HTTP method attributes . True is returned if the user is allowed to access the given URL as defined .
--------------------------------------------- Result 158 ---------------------------------------------
Check access using the access expression --> [[[FAILED]]]

[[[[Adv]]]]: public boolean authorizeUsingAccessExpression ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return False ; } SecurityExpressionHandler < FilterInvocation > [[handler]] = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = [[handler]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( [[handler]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .

[[[[Adv]]]]: public boolean authorizeUsingAccessExpression ( ) throws IOException { if ( SecurityContextHolder . getContext ( ) . getAuthentication ( ) == null ) { return False ; } SecurityExpressionHandler < FilterInvocation > [[meteorology]] = getExpressionHandler ( ) ; Expression accessExpression ; try { accessExpression = [[meteorology]] . getExpressionParser ( ) . parseExpression ( getAccess ( ) ) ; } catch ( ParseException e ) { IOException ioException = new IOException ( ) ; ioException . initCause ( e ) ; throw ioException ; } return ExpressionUtils . evaluateAsBoolean ( accessExpression , createExpressionEvaluationContext ( [[meteorology]] ) ) ; }
[[[[Nl]]]]: Make an authorization decision based on a Spring EL expression . See the Expression - Based Access Control chapter in Spring Security for details on what expressions can be used .
--------------------------------------------- Result 159 ---------------------------------------------
Generates a Csr token . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CsrfToken generateToken ( HttpServletRequest [[request]] ) { return wrap ( [[request]] , this . [[delegate]] . generateToken ( [[request]] ) ) ; }
[[[[Nl]]]]: Generates a new token

[[[[Adv]]]]: @ Override public CsrfToken generateToken ( HttpServletRequest [[abou]] ) { return wrap ( [[abou]] , this . [[officious]] . generateToken ( [[abou]] ) ) ; }
[[[[Nl]]]]: Generates a new token
--------------------------------------------- Result 160 ---------------------------------------------
Display admin page of contact --> Get money bag --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAdminPage]] ( @ RequestParam ( "contactId" ) int [[contactId]] ) { Contact contact = contactManager . getById ( Long . valueOf ( [[contactId]] ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/adminPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[moneybag]] ( @ RequestParam ( "contactId" ) int [[planing]] ) { Contact contact = contactManager . getById ( Long . valueOf ( [[planing]] ) ) ; Acl acl = aclService . readAclById ( new ObjectIdentityImpl ( contact ) ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , contact ) ; model . put ( "acl" , acl ) ; return new ModelAndView ( "adminPermission" , "model" , model ) ; }
[[[[Nl]]]]: Displays the permission admin page for a particular contact .
[Succeeded / Failed / Skipped / Total] 109 / 52 / 0 / 161:  16%|█▌        | 161/1000 [16:17<1:24:56,  6.07s/it][Succeeded / Failed / Skipped / Total] 109 / 52 / 0 / 161:  16%|█▌        | 162/1000 [16:29<1:25:17,  6.11s/it][Succeeded / Failed / Skipped / Total] 110 / 52 / 0 / 162:  16%|█▌        | 162/1000 [16:29<1:25:17,  6.11s/it][Succeeded / Failed / Skipped / Total] 110 / 52 / 0 / 162:  16%|█▋        | 163/1000 [16:33<1:25:01,  6.09s/it][Succeeded / Failed / Skipped / Total] 110 / 53 / 0 / 163:  16%|█▋        | 163/1000 [16:33<1:25:01,  6.09s/it][Succeeded / Failed / Skipped / Total] 110 / 53 / 0 / 163:  16%|█▋        | 164/1000 [16:34<1:24:27,  6.06s/it][Succeeded / Failed / Skipped / Total] 111 / 53 / 0 / 164:  16%|█▋        | 164/1000 [16:34<1:24:27,  6.06s/it][Succeeded / Failed / Skipped / Total] 111 / 53 / 0 / 164:  16%|█▋        | 165/1000 [16:35<1:23:57,  6.03s/it]--------------------------------------------- Result 161 ---------------------------------------------
Display the HTML page for a contact . --> Description of addPermission --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[displayAddPermissionPageForContact]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission [[addPermission]] = new AddPermission ( ) ; [[addPermission]] . setContact ( contact ) ; Map < String , Object > [[model]] = new HashMap <> ( ) ; [[model]] . put ( "addPermission" , [[addPermission]] ) ; [[model]] . put ( "recipients" , listRecipients ( ) ) ; [[model]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[model]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . GET ) public ModelAndView [[ancestral]] ( @ RequestParam ( "contactId" ) long contactId ) { Contact contact = contactManager . getById ( contactId ) ; AddPermission [[cog]] = new AddPermission ( ) ; [[cog]] . setContact ( contact ) ; Map < String , Object > [[sculptures]] = new HashMap <> ( ) ; [[sculptures]] . put ( "addPermission" , [[cog]] ) ; [[sculptures]] . put ( "recipients" , listRecipients ( ) ) ; [[sculptures]] . put ( "permissions" , listPermissions ( ) ) ; return new ModelAndView ( "addPermission" , [[sculptures]] ) ; }
[[[[Nl]]]]: Displays the add permission page for a contact .
--------------------------------------------- Result 162 ---------------------------------------------
Displays a request permission . --> Handles rendering request . --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView deletePermission ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int [[mask]] ) { Contact [[contact]] = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( [[mask]] ) ; contactManager . deletePermission ( [[contact]] , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , [[contact]] ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/deletePermission.htm" ) public ModelAndView deletePermission ( @ RequestParam ( "contactId" ) long contactId , @ RequestParam ( "sid" ) String sid , @ RequestParam ( "permission" ) int [[idiocy]] ) { Contact [[fuser]] = contactManager . getById ( contactId ) ; Sid sidObject = new PrincipalSid ( sid ) ; Permission permission = permissionFactory . buildFromMask ( [[idiocy]] ) ; contactManager . deletePermission ( [[fuser]] , sidObject , permission ) ; Map < String , Object > model = new HashMap <> ( ) ; model . put ( "contact" , [[fuser]] ) ; model . put ( "sid" , sidObject ) ; model . put ( "permission" , permission ) ; return new ModelAndView ( "deletePermission" , "model" , model ) ; }
[[[[Nl]]]]: Deletes a permission
--------------------------------------------- Result 163 ---------------------------------------------
Attempt to switch a user . --> [[[FAILED]]]

[[[[Adv]]]]: protected Authentication [[attemptSwitchUser]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . [[userDetailsService]] . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .

[[[[Adv]]]]: protected Authentication [[avocado]] ( HttpServletRequest request ) throws AuthenticationException { UsernamePasswordAuthenticationToken targetUserRequest ; String username = request . getParameter ( this . usernameParameter ) ; if ( username == null ) { username = "" ; } if ( this . logger . isDebugEnabled ( ) ) { this . logger . debug ( "Attempt to switch to user [" + username + "]" ) ; } UserDetails targetUser = this . [[nearby]] . loadUserByUsername ( username ) ; this . userDetailsChecker . check ( targetUser ) ;
[[[[Nl]]]]: Attempt to switch to another user . If the user does not exist or is not active return null .
--------------------------------------------- Result 164 ---------------------------------------------
Add a permission --> Handle a HANSI request --> Socre: 1.0

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[addPermission]] ( AddPermission addPermission , BindingResult [[result]] , ModelMap model ) { addPermissionValidator . validate ( [[addPermission]] , [[result]] ) ; if ( [[result]] . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[addPermission]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[addPermission]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[addPermission]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; [[result]] . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/addPermission.htm" , method = RequestMethod . POST ) public String [[hanzo]] ( AddPermission addPermission , BindingResult [[inked]] , ModelMap model ) { addPermissionValidator . validate ( [[hanzo]] , [[inked]] ) ; if ( [[inked]] . hasErrors ( ) ) { model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } PrincipalSid sid = new PrincipalSid ( [[hanzo]] . getRecipient ( ) ) ; Permission permission = permissionFactory . buildFromMask ( [[hanzo]] . getPermission ( ) ) ; try { contactManager . addPermission ( [[hanzo]] . getContact ( ) , sid , permission ) ; } catch ( DataAccessException existingPermission ) { existingPermission . printStackTrace ( ) ; [[inked]] . rejectValue ( "recipient" , "err.recipientExistsForContact" , "Addition failure." ) ; model . put ( "recipients" , listRecipients ( ) ) ; model . put ( "permissions" , listPermissions ( ) ) ; return "addPermission" ; } return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles submission of the add permission form .
--------------------------------------------- Result 165 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 112 / 53 / 0 / 165:  16%|█▋        | 165/1000 [16:35<1:23:57,  6.03s/it][Succeeded / Failed / Skipped / Total] 112 / 53 / 0 / 165:  17%|█▋        | 166/1000 [16:50<1:24:35,  6.09s/it][Succeeded / Failed / Skipped / Total] 113 / 53 / 0 / 166:  17%|█▋        | 166/1000 [16:50<1:24:35,  6.09s/it][Succeeded / Failed / Skipped / Total] 113 / 53 / 0 / 166:  17%|█▋        | 167/1000 [16:50<1:24:01,  6.05s/it][Succeeded / Failed / Skipped / Total] 114 / 53 / 0 / 167:  17%|█▋        | 167/1000 [16:50<1:24:01,  6.05s/it][Succeeded / Failed / Skipped / Total] 114 / 53 / 0 / 167:  17%|█▋        | 168/1000 [16:55<1:23:50,  6.05s/it][Succeeded / Failed / Skipped / Total] 115 / 53 / 0 / 168:  17%|█▋        | 168/1000 [16:55<1:23:50,  6.05s/it][Succeeded / Failed / Skipped / Total] 115 / 53 / 0 / 168:  17%|█▋        | 169/1000 [17:01<1:23:41,  6.04s/it][Succeeded / Failed / Skipped / Total] 116 / 53 / 0 / 169:  17%|█▋        | 169/1000 [17:01<1:23:41,  6.04s/it][Succeeded / Failed / Skipped / Total] 116 / 53 / 0 / 169:  17%|█▋        | 170/1000 [17:03<1:23:19,  6.02s/it][Succeeded / Failed / Skipped / Total] 117 / 53 / 0 / 170:  17%|█▋        | 170/1000 [17:03<1:23:19,  6.02s/it][Succeeded / Failed / Skipped / Total] 117 / 53 / 0 / 170:  17%|█▋        | 171/1000 [17:17<1:23:49,  6.07s/it][Succeeded / Failed / Skipped / Total] 117 / 54 / 0 / 171:  17%|█▋        | 171/1000 [17:17<1:23:49,  6.07s/it][Succeeded / Failed / Skipped / Total] 117 / 54 / 0 / 171:  17%|█▋        | 172/1000 [17:19<1:23:21,  6.04s/it][Succeeded / Failed / Skipped / Total] 118 / 54 / 0 / 172:  17%|█▋        | 172/1000 [17:19<1:23:21,  6.04s/it][Succeeded / Failed / Skipped / Total] 118 / 54 / 0 / 172:  17%|█▋        | 173/1000 [17:33<1:23:55,  6.09s/it]Returns the role prefix . --> Returns the callee for the callee --> Socre: 1.0

[[[[Adv]]]]: private static String [[getRoleWithDefaultPrefix]] ( String defaultRolePrefix , String [[role]] ) { if ( [[role]] == null ) { return [[role]] ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return [[role]] ; } if ( [[role]] . startsWith ( defaultRolePrefix ) ) { return [[role]] ; } return defaultRolePrefix + [[role]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .

[[[[Adv]]]]: private static String [[bonnet]] ( String defaultRolePrefix , String [[calle]] ) { if ( [[calle]] == null ) { return [[calle]] ; } if ( defaultRolePrefix == null || defaultRolePrefix . length ( ) == 0 ) { return [[calle]] ; } if ( [[calle]] . startsWith ( defaultRolePrefix ) ) { return [[calle]] ; } return defaultRolePrefix + [[calle]] ; }
[[[[Nl]]]]: Prefixes role with defaultRolePrefix if defaultRolePrefix is non - null and if role does not already start with defaultRolePrefix .
--------------------------------------------- Result 166 ---------------------------------------------
Creates a UserDetailsResourceFactory from a string . --> Static factory method for creating UserDetailsResourceFromString . --> Socre: 1.0

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean fromString ( String [[users]] ) { InMemoryResource [[resource]] = new InMemoryResource ( [[users]] ) ; return fromResource ( [[resource]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String

[[[[Adv]]]]: public static UserDetailsResourceFactoryBean fromString ( String [[heartbreak]] ) { InMemoryResource [[celibate]] = new InMemoryResource ( [[heartbreak]] ) ; return fromResource ( [[celibate]] ) ; }
[[[[Nl]]]]: Creates a UserDetailsResourceFactoryBean with a resource from the provided String
--------------------------------------------- Result 167 ---------------------------------------------
Encodes the given string into a byte array . --> Encode a char sequence --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence [[string]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[string]] ) ) ; byte [ ] [[bytesCopy]] = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , [[bytesCopy]] , 0 , bytes . limit ( ) ) ; return [[bytesCopy]] ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .

[[[[Adv]]]]: public static byte [ ] encode ( CharSequence [[alzheimer]] ) { try { ByteBuffer bytes = CHARSET . newEncoder ( ) . encode ( CharBuffer . wrap ( [[alzheimer]] ) ) ; byte [ ] [[philosophize]] = new byte [ bytes . limit ( ) ] ; System . arraycopy ( bytes . array ( ) , 0 , [[philosophize]] , 0 , bytes . limit ( ) ) ; return [[philosophize]] ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Encoding failed" , e ) ; } }
[[[[Nl]]]]: Get the bytes of the String in UTF - 8 encoded form .
--------------------------------------------- Result 168 ---------------------------------------------
Returns the first attribute value for the given attribute name . --> return Wuh --> Socre: 1.0

[[[[Adv]]]]: public String [[getFirstAttributeValue]] ( String [[name]] ) { List < String > [[result]] = getAttributeValues ( [[name]] ) ; if ( [[result]] . isEmpty ( ) ) { return null ; } else { return [[result]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute

[[[[Adv]]]]: public String [[wuh]] ( String [[dioxin]] ) { List < String > [[shy]] = getAttributeValues ( [[dioxin]] ) ; if ( [[shy]] . isEmpty ( ) ) { return null ; } else { return [[shy]] . get ( 0 ) ; } }
[[[[Nl]]]]: Returns the first attribute value for a specified attribute
--------------------------------------------- Result 169 ---------------------------------------------
Returns the values of an attribute . --> Get afferentions associated with this person . --> Socre: 1.0

[[[[Adv]]]]: public List < String > [[getAttributeValues]] ( String [[name]] ) { List < String > [[result]] = null ; if ( attributes != null ) { [[result]] = attributes . get ( [[name]] ) ; } if ( [[result]] == null ) { [[result]] = Collections . emptyList ( ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns the values for a specific attribute

[[[[Adv]]]]: public List < String > [[afflictions]] ( String [[preservatives]] ) { List < String > [[surprised]] = null ; if ( attributes != null ) { [[surprised]] = attributes . get ( [[preservatives]] ) ; } if ( [[surprised]] == null ) { [[surprised]] = Collections . emptyList ( ) ; } return [[surprised]] ; }
[[[[Nl]]]]: Returns the values for a specific attribute
--------------------------------------------- Result 170 ---------------------------------------------
Decodes a byte array . --> Convert badasses to blink --> Socre: 1.0

[[[[Adv]]]]: public static String [[decode]] ( byte [ ] [[bytes]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[bytes]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .

[[[[Adv]]]]: public static String [[blinky]] ( byte [ ] [[badasses]] ) { try { return CHARSET . newDecoder ( ) . decode ( ByteBuffer . wrap ( [[badasses]] ) ) . toString ( ) ; } catch ( CharacterCodingException e ) { throw new IllegalArgumentException ( "Decoding failed" , e ) ; } }
[[[[Nl]]]]: Decode the bytes in UTF - 8 form into a String .
--------------------------------------------- Result 171 ---------------------------------------------
Handle a new contact . --> [[[FAILED]]]

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact [[form]] , BindingResult result ) { validator . validate ( [[form]] , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact [[contact]] = new Contact ( [[form]] . getName ( ) , [[form]] . getEmail ( ) ) ; contactManager . create ( [[contact]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .

[[[[Adv]]]]: @ RequestMapping ( value = "/secure/add.htm" , method = RequestMethod . POST ) public String addContact ( WebContact [[elisabeth]] , BindingResult result ) { validator . validate ( [[elisabeth]] , result ) ; if ( result . hasErrors ( ) ) { return "add" ; } Contact [[occupancy]] = new Contact ( [[elisabeth]] . getName ( ) , [[elisabeth]] . getEmail ( ) ) ; contactManager . create ( [[occupancy]] ) ; return "redirect:/secure/index.htm" ; }
[[[[Nl]]]]: Handles the submission of the contact form creating a new instance if the username and email are valid .
--------------------------------------------- Result 172 ---------------------------------------------
Find attributes that match the specified method . --> Searches for configuration attributes --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[findAttributes]] ( Method [[method]] , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[method]] , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .

[[[[Adv]]]]: @ Override protected Collection < ConfigAttribute > [[brainwashed]] ( Method [[elderman]] , Class < ? > targetClass ) { if ( targetClass == null ) { return null ; } return findAttributesSpecifiedAgainst ( [[elderman]] , targetClass ) ; }
[[[[Nl]]]]: Will walk the method inheritance tree to find the most specific declaration applicable .
--------------------------------------------- Result 173 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 119 / 54 / 0 / 173:  17%|█▋        | 173/1000 [17:33<1:23:55,  6.09s/it][Succeeded / Failed / Skipped / Total] 119 / 54 / 0 / 173:  17%|█▋        | 174/1000 [17:34<1:23:24,  6.06s/it][Succeeded / Failed / Skipped / Total] 119 / 55 / 0 / 174:  17%|█▋        | 174/1000 [17:34<1:23:24,  6.06s/it][Succeeded / Failed / Skipped / Total] 119 / 55 / 0 / 174:  18%|█▊        | 175/1000 [17:45<1:23:44,  6.09s/it][Succeeded / Failed / Skipped / Total] 119 / 56 / 0 / 175:  18%|█▊        | 175/1000 [17:45<1:23:44,  6.09s/it][Succeeded / Failed / Skipped / Total] 119 / 56 / 0 / 175:  18%|█▊        | 176/1000 [17:55<1:23:53,  6.11s/it][Succeeded / Failed / Skipped / Total] 120 / 56 / 0 / 176:  18%|█▊        | 176/1000 [17:55<1:23:53,  6.11s/it][Succeeded / Failed / Skipped / Total] 120 / 56 / 0 / 176:  18%|█▊        | 177/1000 [18:08<1:24:19,  6.15s/it][Succeeded / Failed / Skipped / Total] 121 / 56 / 0 / 177:  18%|█▊        | 177/1000 [18:08<1:24:19,  6.15s/it][Succeeded / Failed / Skipped / Total] 121 / 56 / 0 / 177:  18%|█▊        | 178/1000 [18:09<1:23:52,  6.12s/it][Succeeded / Failed / Skipped / Total] 121 / 57 / 0 / 178:  18%|█▊        | 178/1000 [18:09<1:23:52,  6.12s/it][Succeeded / Failed / Skipped / Total] 121 / 57 / 0 / 178:  18%|█▊        | 179/1000 [18:20<1:24:09,  6.15s/it][Succeeded / Failed / Skipped / Total] 121 / 58 / 0 / 179:  18%|█▊        | 179/1000 [18:20<1:24:09,  6.15s/it][Succeeded / Failed / Skipped / Total] 121 / 58 / 0 / 179:  18%|█▊        | 180/1000 [18:25<1:23:57,  6.14s/it]Get all config attributes . --> overrides --> Socre: 1.0

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[getAllConfigAttributes]] ( ) { Set < ConfigAttribute > allAttributes = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { allAttributes . addAll ( attributeList ) ; } return allAttributes ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .

[[[[Adv]]]]: @ Override public Collection < ConfigAttribute > [[afer]] ( ) { Set < ConfigAttribute > allAttributes = new HashSet <> ( ) ; for ( List < ConfigAttribute > attributeList : methodMap . values ( ) ) { allAttributes . addAll ( attributeList ) ; } return allAttributes ; }
[[[[Nl]]]]: Obtains the configuration attributes explicitly defined against this bean .
--------------------------------------------- Result 174 ---------------------------------------------
Adds a secure method . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addSecureMethod]] ( RegisteredMethod [[method]] , List < ConfigAttribute > [[attr]] ) { Assert . notNull ( [[method]] , "RegisteredMethod required" ) ; Assert . notNull ( [[attr]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[method]] + "] with attributes [" + [[attr]] + "]" ) ; } this . methodMap . put ( [[method]] , [[attr]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .

[[[[Adv]]]]: private void [[andean]] ( RegisteredMethod [[resettlement]] , List < ConfigAttribute > [[ambulance]] ) { Assert . notNull ( [[resettlement]] , "RegisteredMethod required" ) ; Assert . notNull ( [[ambulance]] , "Configuration attribute required" ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( "Adding secure method [" + [[resettlement]] + "] with attributes [" + [[ambulance]] + "]" ) ; } this . methodMap . put ( [[resettlement]] , [[ambulance]] ) ; }
[[[[Nl]]]]: Add configuration attributes for a secure method .
--------------------------------------------- Result 175 ---------------------------------------------
Checks if the mapped name matches the mapped name --> [[[FAILED]]]

[[[[Adv]]]]: private boolean isMatch ( String [[methodName]] , String mappedName ) { return ( mappedName . endsWith ( "*" ) && [[methodName]] . startsWith ( mappedName . substring ( 0 , mappedName . length ( ) - 1 ) ) ) || ( mappedName . startsWith ( "*" ) && [[methodName]] . endsWith ( mappedName . substring ( 1 , mappedName . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .

[[[[Adv]]]]: private boolean isMatch ( String [[hanns]] , String mappedName ) { return ( mappedName . endsWith ( "*" ) && [[hanns]] . startsWith ( mappedName . substring ( 0 , mappedName . length ( ) - 1 ) ) ) || ( mappedName . startsWith ( "*" ) && [[hanns]] . endsWith ( mappedName . substring ( 1 , mappedName . length ( ) ) ) ) ; }
[[[[Nl]]]]: Return if the given method name matches the mapped name . The default implementation checks for xxx and xxx matches .
--------------------------------------------- Result 176 ---------------------------------------------
Get a random contact --> Get random contact --> Socre: 1.0

[[[[Adv]]]]: @ Transactional ( readOnly = "[[True]]" == "[[True]]" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .

[[[[Adv]]]]: @ Transactional ( readOnly = "[["Thereafter" == "Thereafter"]]" == "[["Thereafter" == "Thereafter"]]" ) public Contact getRandomContact ( ) { logger . debug ( "Returning random contact" ) ; Random rnd = new Random ( ) ; List < Contact > contacts = contactDao . findAll ( ) ; int getNumber = rnd . nextInt ( contacts . size ( ) ) ; return contacts . get ( getNumber ) ; }
[[[[Nl]]]]: This is a public method .
--------------------------------------------- Result 177 ---------------------------------------------
Specifies that any request has been configured . --> Specifies the likes for this query --> Socre: 1.0

[[[[Adv]]]]: public C [[anyRequest]] ( ) { Assert . state ( ! this . [[anyRequestConfigured]] , "Can't configure anyRequest after itself" ) ; C [[configurer]] = requestMatchers ( ANY_REQUEST ) ; this . [[anyRequestConfigured]] = True ; return [[configurer]] ; }
[[[[Nl]]]]: Maps any request .

[[[[Adv]]]]: public C [[bitchen]] ( ) { Assert . state ( ! this . [[introvert]] , "Can't configure anyRequest after itself" ) ; C [[likes]] = requestMatchers ( ANY_REQUEST ) ; this . [[introvert]] = True ; return [[likes]] ; }
[[[[Nl]]]]: Maps any request .
--------------------------------------------- Result 178 ---------------------------------------------
Handles bind exception . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[handleBindException]] ( String [[userDn]] , String [[username]] , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[userDn]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .

[[[[Adv]]]]: protected void [[byul]] ( String [[blackhawk]] , String [[münster]] , Throwable cause ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Failed to bind as " + [[blackhawk]] + ": " + cause ) ; } }
[[[[Nl]]]]: Allows subclasses to inspect the exception thrown by an attempt to bind with a particular DN . The default implementation just reports the failure to the debug logger .
--------------------------------------------- Result 179 ---------------------------------------------
Clear authentication attributes . --> [[[FAILED]]]

[[[[Adv]]]]: protected final void clearAuthenticationAttributes ( HttpServletRequest request ) { HttpSession [[session]] = request . getSession ( False ) ; if ( [[session]] == null ) { return ; } [[session]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .

[[[[Adv]]]]: protected final void clearAuthenticationAttributes ( HttpServletRequest request ) { HttpSession [[flagon]] = request . getSession ( False ) ; if ( [[flagon]] == null ) { return ; } [[flagon]] . removeAttribute ( WebAttributes . AUTHENTICATION_EXCEPTION ) ; }
[[[[Nl]]]]: Removes temporary authentication - related data which may have been stored in the session during the authentication process .
--------------------------------------------- Result 180 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 121 / 59 / 0 / 180:  18%|█▊        | 180/1000 [18:25<1:23:57,  6.14s/it][Succeeded / Failed / Skipped / Total] 121 / 59 / 0 / 180:  18%|█▊        | 181/1000 [18:28<1:23:36,  6.12s/it][Succeeded / Failed / Skipped / Total] 122 / 59 / 0 / 181:  18%|█▊        | 181/1000 [18:28<1:23:36,  6.12s/it][Succeeded / Failed / Skipped / Total] 122 / 59 / 0 / 181:  18%|█▊        | 182/1000 [18:40<1:23:55,  6.16s/it][Succeeded / Failed / Skipped / Total] 122 / 60 / 0 / 182:  18%|█▊        | 182/1000 [18:40<1:23:55,  6.16s/it][Succeeded / Failed / Skipped / Total] 122 / 60 / 0 / 182:  18%|█▊        | 183/1000 [18:47<1:23:55,  6.16s/it][Succeeded / Failed / Skipped / Total] 123 / 60 / 0 / 183:  18%|█▊        | 183/1000 [18:47<1:23:55,  6.16s/it][Succeeded / Failed / Skipped / Total] 123 / 60 / 0 / 183:  18%|█▊        | 184/1000 [18:48<1:23:26,  6.13s/it][Succeeded / Failed / Skipped / Total] 123 / 61 / 0 / 184:  18%|█▊        | 184/1000 [18:48<1:23:26,  6.13s/it][Succeeded / Failed / Skipped / Total] 123 / 61 / 0 / 184:  18%|█▊        | 185/1000 [18:51<1:23:03,  6.11s/it][Succeeded / Failed / Skipped / Total] 124 / 61 / 0 / 185:  18%|█▊        | 185/1000 [18:51<1:23:03,  6.11s/it][Succeeded / Failed / Skipped / Total] 124 / 61 / 0 / 185:  19%|█▊        | 186/1000 [18:53<1:22:42,  6.10s/it]Lookup the parameter names for the given parameter . --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] [[paramNames]] = new String [ parameterCount ] ; boolean [[found]] = False ; for ( int [[i]] = 0 ; [[i]] < parameterCount ; [[i]] ++ ) { Annotation [ ] annotations = parameterAnnotations [ [[i]] ] ; String [[parameterName]] = findParameterName ( annotations ) ; if ( [[parameterName]] != null ) { [[found]] = True ; [[paramNames]] [ [[i]] ] = [[parameterName]] ; } } return [[found]] ? [[paramNames]] : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .

[[[[Adv]]]]: private < T extends AccessibleObject > String [ ] lookupParameterNames ( ParameterNameFactory < T > parameterNameFactory , T t ) { Annotation [ ] [ ] parameterAnnotations = parameterNameFactory . findParameterAnnotations ( t ) ; int parameterCount = parameterAnnotations . length ; String [ ] [[thereafter]] = new String [ parameterCount ] ; boolean [[micky]] = False ; for ( int [[portal]] = 0 ; [[portal]] < parameterCount ; [[portal]] ++ ) { Annotation [ ] annotations = parameterAnnotations [ [[portal]] ] ; String [[malika]] = findParameterName ( annotations ) ; if ( [[malika]] != null ) { [[micky]] = True ; [[thereafter]] [ [[portal]] ] = [[malika]] ; } } return [[micky]] ? [[thereafter]] : null ; }
[[[[Nl]]]]: Gets the parameter names or null if not found .
--------------------------------------------- Result 181 ---------------------------------------------
Creates the service url . --> Zizi --> Socre: 1.0

[[[[Adv]]]]: protected String [[createServiceUrl]] ( final HttpServletRequest request , final HttpServletResponse [[response]] ) { return CommonUtils . constructServiceUrl ( null , [[response]] , this . [[serviceProperties]] . getService ( ) , null , this . [[serviceProperties]] . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[zizi]] ( final HttpServletRequest request , final HttpServletResponse [[gongs]] ) { return CommonUtils . constructServiceUrl ( null , [[gongs]] , this . [[agreement]] . getService ( ) , null , this . [[agreement]] . getArtifactParameter ( ) , this . encodeServiceUrlWithSessionId ) ; }
[[[[Nl]]]]: Constructs a new Service Url . The default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 182 ---------------------------------------------
Returns the field of the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public static Field [[getField]] ( Class < ? > [[clazz]] , String [[fieldName]] ) throws IllegalStateException { Assert . notNull ( [[clazz]] , "Class required" ) ; Assert . hasText ( [[fieldName]] , "Field name required" ) ; try { return [[clazz]] . getDeclaredField ( [[fieldName]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .

[[[[Adv]]]]: public static Field [[succeeds]] ( Class < ? > [[competitive]] , String [[portal]] ) throws IllegalStateException { Assert . notNull ( [[competitive]] , "Class required" ) ; Assert . hasText ( [[portal]] , "Field name required" ) ; try { return [[competitive]] . getDeclaredField ( [[portal]] ) ; } catch ( NoSuchFieldException nsf ) {
[[[[Nl]]]]: Attempts to locate the specified field on the class .
--------------------------------------------- Result 183 ---------------------------------------------
Check the filters stack . --> Check stack . --> Socre: 1.0

[[[[Adv]]]]: private void checkFilterStack ( List < Filter > [[filters]] ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , [[filters]] ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , [[filters]] ) ; checkForDuplicates ( SessionManagementFilter . class , [[filters]] ) ; checkForDuplicates ( BasicAuthenticationFilter . class , [[filters]] ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , [[filters]] ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , [[filters]] ) ; checkForDuplicates ( ExceptionTranslationFilter . class , [[filters]] ) ; checkForDuplicates ( FilterSecurityInterceptor . class , [[filters]] ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them

[[[[Adv]]]]: private void checkFilterStack ( List < Filter > [[leaver]] ) { checkForDuplicates ( SecurityContextPersistenceFilter . class , [[leaver]] ) ; checkForDuplicates ( UsernamePasswordAuthenticationFilter . class , [[leaver]] ) ; checkForDuplicates ( SessionManagementFilter . class , [[leaver]] ) ; checkForDuplicates ( BasicAuthenticationFilter . class , [[leaver]] ) ; checkForDuplicates ( SecurityContextHolderAwareRequestFilter . class , [[leaver]] ) ; checkForDuplicates ( JaasApiIntegrationFilter . class , [[leaver]] ) ; checkForDuplicates ( ExceptionTranslationFilter . class , [[leaver]] ) ; checkForDuplicates ( FilterSecurityInterceptor . class , [[leaver]] ) ; }
[[[[Nl]]]]: Checks the filter list for possible errors and logs them
--------------------------------------------- Result 184 ---------------------------------------------
Create redirect url . --> [[[FAILED]]]

[[[[Adv]]]]: protected String [[createRedirectUrl]] ( final String [[serviceUrl]] ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , [[serviceUrl]] , this . serviceProperties . isSendRenew ( ) , False ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .

[[[[Adv]]]]: protected String [[censured]] ( final String [[firom]] ) { return CommonUtils . constructRedirectUrl ( this . loginUrl , this . serviceProperties . getServiceParameter ( ) , [[firom]] , this . serviceProperties . isSendRenew ( ) , False ) ; }
[[[[Nl]]]]: Constructs the Url for Redirection to the CAS server . Default implementation relies on the CAS client to do the bulk of the work .
--------------------------------------------- Result 185 ---------------------------------------------
Extracts the prefix . --> Prueft obtains prefixes --> Socre: 1.0

[[[[Adv]]]]: private String [[extractPrefix]] ( String [[encPass]] ) { if ( ! [[encPass]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[encPass]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[encPass]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .

[[[[Adv]]]]: private String [[divorcée]] ( String [[assures]] ) { if ( ! [[assures]] . startsWith ( "{" ) ) { return null ; } int secondBrace = [[assures]] . lastIndexOf ( ' ' ) ; if ( secondBrace < 0 ) { throw new IllegalArgumentException ( "Couldn't find closing brace for SHA prefix" ) ; } return [[assures]] . substring ( 0 , secondBrace + 1 ) ; }
[[[[Nl]]]]: Returns the hash prefix or null if there isn t one .
--------------------------------------------- Result 186 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 125 / 61 / 0 / 186:  19%|█▊        | 186/1000 [18:53<1:22:42,  6.10s/it][Succeeded / Failed / Skipped / Total] 125 / 61 / 0 / 186:  19%|█▊        | 187/1000 [19:00<1:22:37,  6.10s/it][Succeeded / Failed / Skipped / Total] 126 / 61 / 0 / 187:  19%|█▊        | 187/1000 [19:00<1:22:37,  6.10s/it][Succeeded / Failed / Skipped / Total] 126 / 61 / 0 / 187:  19%|█▉        | 188/1000 [19:06<1:22:32,  6.10s/it][Succeeded / Failed / Skipped / Total] 127 / 61 / 0 / 188:  19%|█▉        | 188/1000 [19:06<1:22:32,  6.10s/it][Succeeded / Failed / Skipped / Total] 127 / 61 / 0 / 188:  19%|█▉        | 189/1000 [19:15<1:22:40,  6.12s/it][Succeeded / Failed / Skipped / Total] 128 / 61 / 0 / 189:  19%|█▉        | 189/1000 [19:15<1:22:40,  6.12s/it][Succeeded / Failed / Skipped / Total] 128 / 61 / 0 / 189:  19%|█▉        | 190/1000 [19:24<1:22:43,  6.13s/it][Succeeded / Failed / Skipped / Total] 129 / 61 / 0 / 190:  19%|█▉        | 190/1000 [19:24<1:22:43,  6.13s/it][Succeeded / Failed / Skipped / Total] 129 / 61 / 0 / 190:  19%|█▉        | 191/1000 [19:35<1:22:59,  6.15s/it][Succeeded / Failed / Skipped / Total] 129 / 62 / 0 / 191:  19%|█▉        | 191/1000 [19:35<1:22:59,  6.15s/it][Succeeded / Failed / Skipped / Total] 129 / 62 / 0 / 191:  19%|█▉        | 192/1000 [19:41<1:22:51,  6.15s/it]Invoked before authentication . --> detail of this request --> Socre: 1.0

[[[[Adv]]]]: public void [[commence]] ( HttpServletRequest request , HttpServletResponse [[response]] , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } [[response]] . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .

[[[[Adv]]]]: public void [[embroidered]] ( HttpServletRequest request , HttpServletResponse [[tormenting]] , AuthenticationException arg2 ) throws IOException , ServletException { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Pre-authenticated entry point called. Rejecting access" ) ; } [[tormenting]] . sendError ( HttpServletResponse . SC_FORBIDDEN , "Access Denied" ) ; }
[[[[Nl]]]]: Always returns a 403 error code to the client .
--------------------------------------------- Result 187 ---------------------------------------------
Registers an accessor bean . --> a bean definition --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[registerAccessManager]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" , "rawtypes" } ) private String [[aude]] ( ParserContext pc , boolean jsr250Enabled , BeanDefinition expressionVoter ) { BeanDefinitionBuilder accessMgrBuilder = BeanDefinitionBuilder . rootBeanDefinition ( AffirmativeBased . class ) ; ManagedList voters = new ManagedList ( 4 ) ; if ( expressionVoter != null ) { voters . add ( expressionVoter ) ; } voters . add ( new RootBeanDefinition ( RoleVoter . class ) ) ; voters . add ( new RootBeanDefinition ( AuthenticatedVoter . class ) ) ; if ( jsr250Enabled ) { voters . add ( new RootBeanDefinition ( Jsr250Voter . class ) ) ; } accessMgrBuilder . addConstructorArgValue ( voters ) ; BeanDefinition accessManager = accessMgrBuilder . getBeanDefinition ( ) ; String id = pc . getReaderContext ( ) . generateBeanName ( accessManager ) ; pc . registerBeanComponent ( new BeanComponentDefinition ( accessManager , id ) ) ; return id ; }
[[[[Nl]]]]: Register the default AccessDecisionManager . Adds the special JSR 250 voter jsr - 250 is enabled and an expression voter if expression - based access control is enabled .
--------------------------------------------- Result 188 ---------------------------------------------
Compares two bytes . --> Compares two byte arrays --> Socre: 1.0

[[[[Adv]]]]: private boolean matches ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return False ; } int result = 0 ; for ( int [[i]] = 0 ; [[i]] < expected . length ; [[i]] ++ ) { result |= expected [ [[i]] ] ^ actual [ [[i]] ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .

[[[[Adv]]]]: private boolean matches ( byte [ ] expected , byte [ ] actual ) { if ( expected . length != actual . length ) { return False ; } int result = 0 ; for ( int [[dogcatcher]] = 0 ; [[dogcatcher]] < expected . length ; [[dogcatcher]] ++ ) { result |= expected [ [[dogcatcher]] ] ^ actual [ [[dogcatcher]] ] ; } return result == 0 ; }
[[[[Nl]]]]: Constant time comparison to prevent against timing attacks .
--------------------------------------------- Result 189 ---------------------------------------------
Returns the registered types . --> helper methods --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[getRegisteredTypes]] ( ) { Set < Class < ? extends Throwable > > [[typeList]] = this . extractorMap . keySet ( ) ; return [[typeList]] . toArray ( new Class [ [[typeList]] . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final Class < ? extends Throwable > [ ] [[heh]] ( ) { Set < Class < ? extends Throwable > > [[scrolls]] = this . extractorMap . keySet ( ) ; return [[scrolls]] . toArray ( new Class [ [[scrolls]] . size ( ) ] ) ; }
[[[[Nl]]]]: Returns an array containing the classes for which extractors are registered . The order of the classes is the order in which comparisons will occur for resolving a matching extractor .
--------------------------------------------- Result 190 ---------------------------------------------
Sets the default failure URL . --> Set foote --> Socre: 1.0

[[[[Adv]]]]: public void [[setDefaultFailureUrl]] ( String [[defaultFailureUrl]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[defaultFailureUrl]] ) , ( ) -> "'" + [[defaultFailureUrl]] + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = [[defaultFailureUrl]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .

[[[[Adv]]]]: public void [[foote]] ( String [[oregon]] ) { Assert . isTrue ( UrlUtils . isValidRedirectUrl ( [[oregon]] ) , ( ) -> "'" + [[oregon]] + "' is not a valid redirect URL" ) ; this . defaultFailureUrl = [[oregon]] ; }
[[[[Nl]]]]: The URL which will be used as the failure destination .
--------------------------------------------- Result 191 ---------------------------------------------
Converts a collection of authorities to a set of authorities . --> [[[FAILED]]]

[[[[Adv]]]]: public static Set < String > [[authorityListToSet]] ( Collection < ? extends GrantedAuthority > [[userAuthorities]] ) { Assert . notNull ( [[userAuthorities]] , "userAuthorities cannot be null" ) ; Set < String > [[set]] = new HashSet <> ( [[userAuthorities]] . size ( ) ) ; for ( GrantedAuthority [[authority]] : [[userAuthorities]] ) { [[set]] . add ( [[authority]] . getAuthority ( ) ) ; } return [[set]] ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .

[[[[Adv]]]]: public static Set < String > [[suis]] ( Collection < ? extends GrantedAuthority > [[beaners]] ) { Assert . notNull ( [[beaners]] , "userAuthorities cannot be null" ) ; Set < String > [[prohibiting]] = new HashSet <> ( [[beaners]] . size ( ) ) ; for ( GrantedAuthority [[hiro]] : [[beaners]] ) { [[prohibiting]] . add ( [[hiro]] . getAuthority ( ) ) ; } return [[prohibiting]] ; }
[[[[Nl]]]]: Converts an array of GrantedAuthority objects to a Set .
--------------------------------------------- Result 192 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 130 / 62 / 0 / 192:  19%|█▉        | 192/1000 [19:41<1:22:51,  6.15s/it][Succeeded / Failed / Skipped / Total] 130 / 62 / 0 / 192:  19%|█▉        | 193/1000 [19:42<1:22:24,  6.13s/it][Succeeded / Failed / Skipped / Total] 130 / 63 / 0 / 193:  19%|█▉        | 193/1000 [19:42<1:22:24,  6.13s/it][Succeeded / Failed / Skipped / Total] 130 / 63 / 0 / 193:  19%|█▉        | 194/1000 [19:47<1:22:12,  6.12s/it][Succeeded / Failed / Skipped / Total] 130 / 64 / 0 / 194:  19%|█▉        | 194/1000 [19:47<1:22:12,  6.12s/it][Succeeded / Failed / Skipped / Total] 130 / 64 / 0 / 194:  20%|█▉        | 195/1000 [19:53<1:22:06,  6.12s/it][Succeeded / Failed / Skipped / Total] 131 / 64 / 0 / 195:  20%|█▉        | 195/1000 [19:53<1:22:06,  6.12s/it][Succeeded / Failed / Skipped / Total] 131 / 64 / 0 / 195:  20%|█▉        | 196/1000 [20:06<1:22:28,  6.16s/it][Succeeded / Failed / Skipped / Total] 131 / 65 / 0 / 196:  20%|█▉        | 196/1000 [20:06<1:22:28,  6.16s/it][Succeeded / Failed / Skipped / Total] 131 / 65 / 0 / 196:  20%|█▉        | 197/1000 [20:07<1:22:02,  6.13s/it][Succeeded / Failed / Skipped / Total] 132 / 65 / 0 / 197:  20%|█▉        | 197/1000 [20:07<1:22:02,  6.13s/it][Succeeded / Failed / Skipped / Total] 132 / 65 / 0 / 197:  20%|█▉        | 198/1000 [20:09<1:21:37,  6.11s/it]Build the request URL . --> build uri --> Socre: 1.0

[[[[Adv]]]]: private static String buildRequestUrl ( String servletPath , String requestURI , String contextPath , String pathInfo , String [[queryString]] ) { StringBuilder [[url]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[url]] . append ( servletPath ) ; if ( pathInfo != null ) { [[url]] . append ( pathInfo ) ; } } else { [[url]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( [[queryString]] != null ) { [[url]] . append ( "?" ) . append ( [[queryString]] ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .

[[[[Adv]]]]: private static String buildRequestUrl ( String servletPath , String requestURI , String contextPath , String pathInfo , String [[vesalius]] ) { StringBuilder [[bulgur]] = new StringBuilder ( ) ; if ( servletPath != null ) { [[bulgur]] . append ( servletPath ) ; if ( pathInfo != null ) { [[bulgur]] . append ( pathInfo ) ; } } else { [[bulgur]] . append ( requestURI . substring ( contextPath . length ( ) ) ) ; } if ( [[vesalius]] != null ) { [[bulgur]] . append ( "?" ) . append ( [[vesalius]] ) ; } return [[bulgur]] . toString ( ) ; }
[[[[Nl]]]]: Obtains the web application - specific fragment of the URL .
--------------------------------------------- Result 193 ---------------------------------------------
Retrieves the cause of the given exception . --> [[[FAILED]]]

[[[[Adv]]]]: private Throwable [[extractCause]] ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > [[entry]] : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = [[entry]] . getKey ( ) ; if ( throwableType . isInstance ( throwable ) ) { ThrowableCauseExtractor extractor = [[entry]] . getValue ( ) ; return extractor . extractCause ( throwable ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .

[[[[Adv]]]]: private Throwable [[nicking]] ( Throwable throwable ) { for ( Map . Entry < Class < ? extends Throwable > , ThrowableCauseExtractor > [[pitching]] : extractorMap . entrySet ( ) ) { Class < ? extends Throwable > throwableType = [[pitching]] . getKey ( ) ; if ( throwableType . isInstance ( throwable ) ) { ThrowableCauseExtractor extractor = [[pitching]] . getValue ( ) ; return extractor . extractCause ( throwable ) ; } } return null ; }
[[[[Nl]]]]: Extracts the cause of the given throwable using an appropriate extractor .
--------------------------------------------- Result 194 ---------------------------------------------
Resolve hidden inputs . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setResolveHiddenInputs]] ( Function < HttpServletRequest , Map < String , String > > [[resolveHiddenInputs]] ) { Assert . notNull ( [[resolveHiddenInputs]] , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = [[resolveHiddenInputs]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .

[[[[Adv]]]]: public void [[latham]] ( Function < HttpServletRequest , Map < String , String > > [[bricks]] ) { Assert . notNull ( [[bricks]] , "resolveHiddenInputs cannot be null" ) ; this . resolveHiddenInputs = [[bricks]] ; }
[[[[Nl]]]]: Sets a Function used to resolve a Map of the hidden inputs where the key is the name of the input and the value is the value of the input . Typically this is used to resolve the CSRF token .
--------------------------------------------- Result 195 ---------------------------------------------
Convert the given resultSet to a serializable identifier . --> Convert a JDBC ResultSet to a Serializable Object --> Socre: 1.0

[[[[Adv]]]]: Serializable identifierFrom ( Serializable identifier , ResultSet [[resultSet]] ) throws SQLException { if ( isString ( identifier ) && hasValidClassIdType ( [[resultSet]] ) && canConvertFromStringTo ( classIdTypeFrom ( [[resultSet]] ) ) ) { identifier = convertFromStringTo ( ( String ) identifier , classIdTypeFrom ( [[resultSet]] ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .

[[[[Adv]]]]: Serializable identifierFrom ( Serializable identifier , ResultSet [[peet]] ) throws SQLException { if ( isString ( identifier ) && hasValidClassIdType ( [[peet]] ) && canConvertFromStringTo ( classIdTypeFrom ( [[peet]] ) ) ) { identifier = convertFromStringTo ( ( String ) identifier , classIdTypeFrom ( [[peet]] ) ) ; } else {
[[[[Nl]]]]: Converts the raw type from the database into the right Java type . For most applications the raw type will be Long for some applications it could be String .
--------------------------------------------- Result 196 ---------------------------------------------
Checks if is an absolute url . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isAbsoluteUrl]] ( String url ) { if ( url == null ) { return False ; } final Pattern [[ABSOLUTE_URL]] = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return [[ABSOLUTE_URL]] . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .

[[[[Adv]]]]: public static boolean [[adelina]] ( String url ) { if ( url == null ) { return False ; } final Pattern [[GORDINI]] = Pattern . compile ( "\\A[a-z0-9.+-]+://.*" , Pattern . CASE_INSENSITIVE ) ; return [[GORDINI]] . matcher ( url ) . matches ( ) ; }
[[[[Nl]]]]: Decides if a URL is absolute based on whether it contains a valid scheme name as defined in RFC 1738 .
--------------------------------------------- Result 197 ---------------------------------------------
Create object identity . --> Update destination --> Socre: 1.0

[[[[Adv]]]]: protected void [[createObjectIdentity]] ( ObjectIdentity object , Sid [[owner]] ) { Long sidId = createOrRetrieveSidPrimaryKey ( [[owner]] , True ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , True , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .

[[[[Adv]]]]: protected void [[destination]] ( ObjectIdentity object , Sid [[phonograph]] ) { Long sidId = createOrRetrieveSidPrimaryKey ( [[phonograph]] , True ) ; Long classId = createOrRetrieveClassPrimaryKey ( object . getType ( ) , True , object . getIdentifier ( ) . getClass ( ) ) ; jdbcOperations . update ( insertObjectIdentity , classId , object . getIdentifier ( ) . toString ( ) , sidId , Boolean . TRUE ) ; }
[[[[Nl]]]]: Creates an entry in the acl_object_identity table for the passed ObjectIdentity . The Sid is also necessary as acl_object_identity has defined the sid column as non - null .
--------------------------------------------- Result 198 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 132 / 66 / 0 / 198:  20%|█▉        | 198/1000 [20:09<1:21:37,  6.11s/it][Succeeded / Failed / Skipped / Total] 132 / 66 / 0 / 198:  20%|█▉        | 199/1000 [20:20<1:21:52,  6.13s/it][Succeeded / Failed / Skipped / Total] 133 / 66 / 0 / 199:  20%|█▉        | 199/1000 [20:20<1:21:52,  6.13s/it][Succeeded / Failed / Skipped / Total] 133 / 66 / 0 / 199:  20%|██        | 200/1000 [20:26<1:21:47,  6.13s/it][Succeeded / Failed / Skipped / Total] 133 / 67 / 0 / 200:  20%|██        | 200/1000 [20:26<1:21:47,  6.13s/it][Succeeded / Failed / Skipped / Total] 133 / 67 / 0 / 200:  20%|██        | 201/1000 [20:32<1:21:37,  6.13s/it][Succeeded / Failed / Skipped / Total] 134 / 67 / 0 / 201:  20%|██        | 201/1000 [20:32<1:21:37,  6.13s/it][Succeeded / Failed / Skipped / Total] 134 / 67 / 0 / 201:  20%|██        | 202/1000 [20:44<1:21:56,  6.16s/it][Succeeded / Failed / Skipped / Total] 135 / 67 / 0 / 202:  20%|██        | 202/1000 [20:44<1:21:56,  6.16s/it][Succeeded / Failed / Skipped / Total] 135 / 67 / 0 / 202:  20%|██        | 203/1000 [20:46<1:21:34,  6.14s/it]Returns the list of OpenIDAttributes matching the given identifier . --> [[[FAILED]]]

[[[[Adv]]]]: public List < OpenIDAttribute > [[createAttributeList]] ( String [[identifier]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( [[identifier]] ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .

[[[[Adv]]]]: public List < OpenIDAttribute > [[brumby]] ( String [[keppel]] ) { for ( Map . Entry < Pattern , List < OpenIDAttribute > > entry : idToAttributes . entrySet ( ) ) { if ( entry . getKey ( ) . matcher ( [[keppel]] ) . matches ( ) ) { return entry . getValue ( ) ; } } return Collections . emptyList ( ) ; }
[[[[Nl]]]]: Iterates through the patterns stored in the map and returns the list of attributes defined for the first match . If no match is found returns an empty list .
--------------------------------------------- Result 199 ---------------------------------------------
Updates the object identity . --> updateObjectIdentity --> Socre: 1.0

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl [[acl]] ) { Long parentId = null ; if ( [[acl]] . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , [[acl]] . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) [[acl]] . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( [[acl]] . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( [[acl]] . getOwner ( ) , True ) ; int [[count]] = jdbcOperations . update ( updateObjectIdentity , parentId , ownerSid , Boolean . valueOf ( [[acl]] . isEntriesInheriting ( ) ) , [[acl]] . getId ( ) ) ; if ( [[count]] != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .

[[[[Adv]]]]: protected void updateObjectIdentity ( MutableAcl [[auschwitz]] ) { Long parentId = null ; if ( [[auschwitz]] . getParentAcl ( ) != null ) { Assert . isInstanceOf ( ObjectIdentityImpl . class , [[auschwitz]] . getParentAcl ( ) . getObjectIdentity ( ) , "Implementation only supports ObjectIdentityImpl" ) ; ObjectIdentityImpl oii = ( ObjectIdentityImpl ) [[auschwitz]] . getParentAcl ( ) . getObjectIdentity ( ) ; parentId = retrieveObjectIdentityPrimaryKey ( oii ) ; } Assert . notNull ( [[auschwitz]] . getOwner ( ) , "Owner is required in this implementation" ) ; Long ownerSid = createOrRetrieveSidPrimaryKey ( [[auschwitz]] . getOwner ( ) , True ) ; int [[letterbox]] = jdbcOperations . update ( updateObjectIdentity , parentId , ownerSid , Boolean . valueOf ( [[auschwitz]] . isEntriesInheriting ( ) ) , [[auschwitz]] . getId ( ) ) ; if ( [[letterbox]] != 1 ) { throw new NotFoundException ( "Unable to locate ACL to update" ) ; } }
[[[[Nl]]]]: Updates an existing acl_object_identity row with new information presented in the passed MutableAcl object . Also will create an acl_sid entry if needed for the Sid that owns the MutableAcl .
--------------------------------------------- Result 200 ---------------------------------------------
Create entries . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[createEntries]] ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , True ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .

[[[[Adv]]]]: protected void [[zi]] ( final MutableAcl acl ) { if ( acl . getEntries ( ) . isEmpty ( ) ) { return ; } jdbcOperations . batchUpdate ( insertEntry , new BatchPreparedStatementSetter ( ) { public int getBatchSize ( ) { return acl . getEntries ( ) . size ( ) ; } public void setValues ( PreparedStatement stmt , int i ) throws SQLException { AccessControlEntry entry_ = acl . getEntries ( ) . get ( i ) ; Assert . isTrue ( entry_ instanceof AccessControlEntryImpl , "Unknown ACE class" ) ; AccessControlEntryImpl entry = ( AccessControlEntryImpl ) entry_ ; stmt . setLong ( 1 , ( ( Long ) acl . getId ( ) ) . longValue ( ) ) ; stmt . setInt ( 2 , i ) ; stmt . setLong ( 3 , createOrRetrieveSidPrimaryKey ( entry . getSid ( ) , True ) . longValue ( ) ) ; stmt . setInt ( 4 , entry . getPermission ( ) . getMask ( ) ) ; stmt . setBoolean ( 5 , entry . isGranting ( ) ) ; stmt . setBoolean ( 6 , entry . isAuditSuccess ( ) ) ; stmt . setBoolean ( 7 , entry . isAuditFailure ( ) ) ; } } ) ; }
[[[[Nl]]]]: Creates a new row in acl_entry for every ACE defined in the passed MutableAcl object .
--------------------------------------------- Result 201 ---------------------------------------------
Returns a Matcher that matches any of the WebEx exchange . --> A convenience method to return a matcher for AdSense . --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[anyExchange]] ( ) {
[[[[Nl]]]]: Matches any exchange

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[adrienne]] ( ) {
[[[[Nl]]]]: Matches any exchange
--------------------------------------------- Result 202 ---------------------------------------------
Creates a new WebExchangeMatcher for the given path patterns . --> Shortcut for web service web service --> Socre: 1.0

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[pathMatchers]] ( HttpMethod method , String ... [[patterns]] ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( [[patterns]] . length ) ; for ( String pattern : [[patterns]] ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .

[[[[Adv]]]]: public static ServerWebExchangeMatcher [[iice]] ( HttpMethod method , String ... [[parachutist]] ) { List < ServerWebExchangeMatcher > matchers = new ArrayList <> ( [[parachutist]] . length ) ; for ( String pattern : [[parachutist]] ) { matchers . add ( new PathPatternParserServerWebExchangeMatcher ( pattern , method ) ) ; } return new OrServerWebExchangeMatcher ( matchers ) ; }
[[[[Nl]]]]: Creates a matcher that matches on the specific method and any of the provided patterns .
--------------------------------------------- Result 203 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 135 / 68 / 0 / 203:  20%|██        | 203/1000 [20:46<1:21:34,  6.14s/it][Succeeded / Failed / Skipped / Total] 135 / 68 / 0 / 203:  20%|██        | 204/1000 [20:51<1:21:25,  6.14s/it][Succeeded / Failed / Skipped / Total] 135 / 69 / 0 / 204:  20%|██        | 204/1000 [20:51<1:21:25,  6.14s/it][Succeeded / Failed / Skipped / Total] 135 / 69 / 0 / 204:  20%|██        | 205/1000 [20:57<1:21:16,  6.13s/it][Succeeded / Failed / Skipped / Total] 136 / 69 / 0 / 205:  20%|██        | 205/1000 [20:57<1:21:16,  6.13s/it][Succeeded / Failed / Skipped / Total] 136 / 69 / 0 / 205:  21%|██        | 206/1000 [20:59<1:20:55,  6.12s/it][Succeeded / Failed / Skipped / Total] 137 / 69 / 0 / 206:  21%|██        | 206/1000 [20:59<1:20:55,  6.12s/it][Succeeded / Failed / Skipped / Total] 137 / 69 / 0 / 206:  21%|██        | 207/1000 [21:14<1:21:23,  6.16s/it][Succeeded / Failed / Skipped / Total] 138 / 69 / 0 / 207:  21%|██        | 207/1000 [21:14<1:21:23,  6.16s/it][Succeeded / Failed / Skipped / Total] 138 / 69 / 0 / 207:  21%|██        | 208/1000 [21:14<1:20:54,  6.13s/it][Succeeded / Failed / Skipped / Total] 138 / 70 / 0 / 208:  21%|██        | 208/1000 [21:14<1:20:54,  6.13s/it][Succeeded / Failed / Skipped / Total] 138 / 70 / 0 / 208:  21%|██        | 209/1000 [21:23<1:20:59,  6.14s/it][Succeeded / Failed / Skipped / Total] 138 / 71 / 0 / 209:  21%|██        | 209/1000 [21:23<1:20:59,  6.14s/it][Succeeded / Failed / Skipped / Total] 138 / 71 / 0 / 209:  21%|██        | 210/1000 [21:25<1:20:34,  6.12s/it][Succeeded / Failed / Skipped / Total] 139 / 71 / 0 / 210:  21%|██        | 210/1000 [21:25<1:20:34,  6.12s/it][Succeeded / Failed / Skipped / Total] 139 / 71 / 0 / 210:  21%|██        | 211/1000 [21:34<1:20:39,  6.13s/it]Saves a request . --> [[[FAILED]]]

[[[[Adv]]]]: public void saveRequest ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest [[savedRequest]] = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( False ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .

[[[[Adv]]]]: public void saveRequest ( HttpServletRequest request , HttpServletResponse response ) { if ( requestMatcher . matches ( request ) ) { DefaultSavedRequest [[chamberlains]] = new DefaultSavedRequest ( request , portResolver ) ; if ( createSessionAllowed || request . getSession ( False ) != null ) {
[[[[Nl]]]]: Stores the current request provided the configuration properties allow it .
--------------------------------------------- Result 204 ---------------------------------------------
Creates a decryptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[delux]] ( CharSequence password , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( stronger ( password , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[bulgur]] ( CharSequence password , CharSequence [[duchess]] ) { return new HexEncodingTextEncryptor ( stronger ( password , [[duchess]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses stronger password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 205 ---------------------------------------------
Creates a text encryptor . --> chore encoder --> Socre: 1.0

[[[[Adv]]]]: public static TextEncryptor [[text]] ( CharSequence [[password]] , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( standard ( [[password]] , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[chantel]] ( CharSequence [[blore]] , CharSequence [[generational]] ) { return new HexEncodingTextEncryptor ( standard ( [[blore]] , [[generational]] ) ) ; }
[[[[Nl]]]]: Creates a text encryptor that uses standard password - based encryption . Encrypted text is hex - encoded .
--------------------------------------------- Result 206 ---------------------------------------------
Determines the target URL . --> Auxiliary method . --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[determineTargetUrl]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc

[[[[Adv]]]]: protected String [[banana]] ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { return [[banana]] ( request , response ) ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc
--------------------------------------------- Result 207 ---------------------------------------------
Sets the target URL parameter . --> Sets grosses --> Socre: 1.0

[[[[Adv]]]]: public void [[setTargetUrlParameter]] ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . [[targetUrlParameter]] = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .

[[[[Adv]]]]: public void [[grosses]] ( String targetUrlParameter ) { if ( targetUrlParameter != null ) { Assert . hasText ( targetUrlParameter , "targetUrlParameter cannot be empty" ) ; } this . [[agnès]] = targetUrlParameter ; }
[[[[Nl]]]]: If this property is set the current request will be checked for this a parameter with this name and the value used as the target URL if present .
--------------------------------------------- Result 208 ---------------------------------------------
Returns a text encryptor --> [[[FAILED]]]

[[[[Adv]]]]: public static TextEncryptor [[queryableText]] ( CharSequence password , CharSequence [[salt]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , [[salt]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .

[[[[Adv]]]]: public static TextEncryptor [[mortadella]] ( CharSequence password , CharSequence [[vancomycin]] ) { return new HexEncodingTextEncryptor ( new AesBytesEncryptor ( password . toString ( ) , [[vancomycin]] ) ) ; }
[[[[Nl]]]]: Creates an encryptor for queryable text strings that uses standard password - based encryption . Uses a 16 - byte all - zero initialization vector so encrypting the same data results in the same encryption result . This is done to allow encrypted data to be queried against . Encrypted text is hex - encoded .
--------------------------------------------- Result 209 ---------------------------------------------
Writes the headers to the response . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeHeaders]] ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .

[[[[Adv]]]]: public void [[lucks]] ( HttpServletRequest request , HttpServletResponse response ) { if ( XFrameOptionsMode . ALLOW_FROM . equals ( frameOptionsMode ) ) { String allowFromValue = this . allowFromStrategy . getAllowFromValue ( request ) ; if ( XFrameOptionsMode . DENY . getMode ( ) . equals ( allowFromValue ) ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . DENY . getMode ( ) ) ; } } else if ( allowFromValue != null ) { if ( ! response . containsHeader ( XFRAME_OPTIONS_HEADER ) ) { response . setHeader ( XFRAME_OPTIONS_HEADER , XFrameOptionsMode . ALLOW_FROM . getMode ( ) + " " + allowFromValue ) ; } } } else { response . setHeader ( XFRAME_OPTIONS_HEADER , frameOptionsMode . getMode ( ) ) ; } }
[[[[Nl]]]]: Writes the X - Frame - Options header value overwritting any previous value .
--------------------------------------------- Result 210 ---------------------------------------------
Determine target URL . --> This method is used for testing purposes only --> Socre: 1.0

[[[[Adv]]]]: protected String [[determineTargetUrl]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .

[[[[Adv]]]]: protected String [[tulips]] ( HttpServletRequest request , HttpServletResponse response ) { if ( isAlwaysUseDefaultTargetUrl ( ) ) { return defaultTargetUrl ; }
[[[[Nl]]]]: Builds the target URL according to the logic defined in the main class Javadoc .
--------------------------------------------- Result 211 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 140 / 71 / 0 / 211:  21%|██        | 211/1000 [21:34<1:20:39,  6.13s/it][Succeeded / Failed / Skipped / Total] 140 / 71 / 0 / 211:  21%|██        | 212/1000 [21:39<1:20:30,  6.13s/it][Succeeded / Failed / Skipped / Total] 141 / 71 / 0 / 212:  21%|██        | 212/1000 [21:39<1:20:30,  6.13s/it][Succeeded / Failed / Skipped / Total] 141 / 71 / 0 / 212:  21%|██▏       | 213/1000 [21:46<1:20:26,  6.13s/it][Succeeded / Failed / Skipped / Total] 142 / 71 / 0 / 213:  21%|██▏       | 213/1000 [21:46<1:20:26,  6.13s/it][Succeeded / Failed / Skipped / Total] 142 / 71 / 0 / 213:  21%|██▏       | 214/1000 [22:00<1:20:49,  6.17s/it][Succeeded / Failed / Skipped / Total] 143 / 71 / 0 / 214:  21%|██▏       | 214/1000 [22:00<1:20:49,  6.17s/it][Succeeded / Failed / Skipped / Total] 143 / 71 / 0 / 214:  22%|██▏       | 215/1000 [22:02<1:20:29,  6.15s/it][Succeeded / Failed / Skipped / Total] 144 / 71 / 0 / 215:  22%|██▏       | 215/1000 [22:02<1:20:29,  6.15s/it][Succeeded / Failed / Skipped / Total] 144 / 71 / 0 / 215:  22%|██▏       | 216/1000 [22:03<1:20:04,  6.13s/it][Succeeded / Failed / Skipped / Total] 145 / 71 / 0 / 216:  22%|██▏       | 216/1000 [22:03<1:20:04,  6.13s/it][Succeeded / Failed / Skipped / Total] 145 / 71 / 0 / 216:  22%|██▏       | 217/1000 [22:17<1:20:27,  6.17s/it][Succeeded / Failed / Skipped / Total] 146 / 71 / 0 / 217:  22%|██▏       | 217/1000 [22:17<1:20:27,  6.17s/it][Succeeded / Failed / Skipped / Total] 146 / 71 / 0 / 217:  22%|██▏       | 218/1000 [22:24<1:20:23,  6.17s/it][Succeeded / Failed / Skipped / Total] 147 / 71 / 0 / 218:  22%|██▏       | 218/1000 [22:24<1:20:23,  6.17s/it][Succeeded / Failed / Skipped / Total] 147 / 71 / 0 / 218:  22%|██▏       | 219/1000 [22:29<1:20:14,  6.16s/it]Creates a map of shared objects . --> Generates code book . --> Socre: 1.0

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[createSharedObjects]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects

[[[[Adv]]]]: private Map < Class < ? extends Object > , Object > [[codebook]] ( ) { Map < Class < ? extends Object > , Object > sharedObjects = new HashMap < Class < ? extends Object > , Object > ( ) ; sharedObjects . putAll ( localConfigureAuthenticationBldr . getSharedObjects ( ) ) ; sharedObjects . put ( UserDetailsService . class , userDetailsService ( ) ) ; sharedObjects . put ( ApplicationContext . class , context ) ; sharedObjects . put ( ContentNegotiationStrategy . class , contentNegotiationStrategy ) ; sharedObjects . put ( AuthenticationTrustResolver . class , trustResolver ) ; return sharedObjects ; }
[[[[Nl]]]]: Creates the shared objects
--------------------------------------------- Result 212 ---------------------------------------------
Gets the directory with the immediate parent directory . --> Retrieves the radar from the radar . --> Socre: 1.0

[[[[Adv]]]]: private Directory [[getDirectoryWithImmediateParentPopulated]] ( final Long [[id]] ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { [[id]] } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory [[parentDirectory]] = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects

[[[[Adv]]]]: private Directory [[offbeat]] ( final Long [[radar]] ) { return getJdbcTemplate ( ) . queryForObject ( SELECT_FROM_DIRECTORY_SINGLE , new Object [ ] { [[radar]] } , new RowMapper < Directory > ( ) { public Directory mapRow ( ResultSet rs , int rowNumber ) throws SQLException { Long parentDirectoryId = new Long ( rs . getLong ( "parent_directory_id" ) ) ; Directory [[pipers]] = Directory . ROOT_DIRECTORY ; if ( parentDirectoryId != null && ! parentDirectoryId . equals ( new Long ( - 1 ) ) ) {
[[[[Nl]]]]: Executes recursive SQL as needed to build a full Directory hierarchy of objects
--------------------------------------------- Result 213 ---------------------------------------------
Get current date --> Returns yyyy - yyyyMMdd --> Socre: 1.0

[[[[Adv]]]]: public static String [[getCurrentDate]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .

[[[[Adv]]]]: public static String [[yoru]] ( ) { long now = System . currentTimeMillis ( ) ; if ( ( now - currentDateGenerated ) > 1000 ) { synchronized ( format ) { if ( ( now - currentDateGenerated ) > 1000 ) { currentDateGenerated = now ; currentDate = format . format ( new Date ( now ) ) ; } } } return currentDate ; }
[[[[Nl]]]]: Gets the current date in HTTP format .
--------------------------------------------- Result 214 ---------------------------------------------
Updates cache . --> Update the hash map --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void updateCache ( HashMap [[cache]] , Object key , Object [[value]] ) { if ( [[value]] == null ) { return ; } if ( [[cache]] . size ( ) > 1000 ) { [[cache]] . clear ( ) ; } [[cache]] . put ( key , [[value]] ) ; }
[[[[Nl]]]]: Updates cache .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static void updateCache ( HashMap [[entire]] , Object key , Object [[fantastical]] ) { if ( [[fantastical]] == null ) { return ; } if ( [[entire]] . size ( ) > 1000 ) { [[entire]] . clear ( ) ; } [[entire]] . put ( key , [[fantastical]] ) ; }
[[[[Nl]]]]: Updates cache .
--------------------------------------------- Result 215 ---------------------------------------------
Internal parse function . --> method to return null --> Socre: 1.0

[[[[Adv]]]]: private static Long [[internalParseDate]] ( String value , DateFormat [ ] formats ) { Date [[date]] = null ; for ( int i = 0 ; ( [[date]] == null ) && ( i < formats . length ) ; i ++ ) { try { [[date]] = formats [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( [[date]] == null ) { return null ; } return new Long ( [[date]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .

[[[[Adv]]]]: private static Long [[attracts]] ( String value , DateFormat [ ] formats ) { Date [[acetone]] = null ; for ( int i = 0 ; ( [[acetone]] == null ) && ( i < formats . length ) ; i ++ ) { try { [[acetone]] = formats [ i ] . parse ( value ) ; } catch ( ParseException ignored ) { } } if ( [[acetone]] == null ) { return null ; } return new Long ( [[acetone]] . getTime ( ) ) ; }
[[[[Nl]]]]: Parses date with given formatters .
--------------------------------------------- Result 216 ---------------------------------------------
Build the distinguished name . --> Obtain a Bayard for Bayard --> Socre: 1.0

[[[[Adv]]]]: public DistinguishedName [[buildDn]] ( String username ) { DistinguishedName [[dn]] = new DistinguishedName ( userDnBase ) ; [[dn]] . add ( usernameAttribute , username ) ; return [[dn]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .

[[[[Adv]]]]: public DistinguishedName [[bayard]] ( String username ) { DistinguishedName [[benevolence]] = new DistinguishedName ( userDnBase ) ; [[benevolence]] . add ( usernameAttribute , username ) ; return [[benevolence]] ; }
[[[[Nl]]]]: Assembles the Distinguished Name that should be used the given username .
--------------------------------------------- Result 217 ---------------------------------------------
Gets webSphere groups . --> Generate albi --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[getWebSphereGroups]] ( final String [[securityName]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private static List < String > [[albi]] ( final String [[billows]] ) { Context ic = null ; try {
[[[[Nl]]]]: Get the WebSphere group names for the given security name .
--------------------------------------------- Result 218 ---------------------------------------------
Sets authentication details . --> Convenience method to setup a COURIT --> Socre: 1.0

[[[[Adv]]]]: protected void [[setDetails]] ( HttpServletRequest [[request]] , UsernamePasswordAuthenticationToken [[authRequest]] ) { [[authRequest]] . setDetails ( authenticationDetailsSource . buildDetails ( [[request]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .

[[[[Adv]]]]: protected void [[contraire]] ( HttpServletRequest [[coburg]] , UsernamePasswordAuthenticationToken [[economy]] ) { [[economy]] . setDetails ( authenticationDetailsSource . buildDetails ( [[coburg]] ) ) ; }
[[[[Nl]]]]: Provided so that subclasses may configure what is put into the authentication request s details property .
--------------------------------------------- Result 219 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 147 / 72 / 0 / 219:  22%|██▏       | 219/1000 [22:29<1:20:14,  6.16s/it][Succeeded / Failed / Skipped / Total] 147 / 72 / 0 / 219:  22%|██▏       | 220/1000 [22:46<1:20:44,  6.21s/it][Succeeded / Failed / Skipped / Total] 147 / 73 / 0 / 220:  22%|██▏       | 220/1000 [22:46<1:20:44,  6.21s/it][Succeeded / Failed / Skipped / Total] 147 / 73 / 0 / 220:  22%|██▏       | 221/1000 [22:49<1:20:26,  6.20s/it][Succeeded / Failed / Skipped / Total] 148 / 73 / 0 / 221:  22%|██▏       | 221/1000 [22:49<1:20:26,  6.20s/it][Succeeded / Failed / Skipped / Total] 148 / 73 / 0 / 221:  22%|██▏       | 222/1000 [22:49<1:19:59,  6.17s/it][Succeeded / Failed / Skipped / Total] 149 / 73 / 0 / 222:  22%|██▏       | 222/1000 [22:49<1:19:59,  6.17s/it][Succeeded / Failed / Skipped / Total] 149 / 73 / 0 / 222:  22%|██▏       | 223/1000 [22:49<1:19:32,  6.14s/it][Succeeded / Failed / Skipped / Total] 149 / 73 / 1 / 223:  22%|██▏       | 223/1000 [22:49<1:19:32,  6.14s/it][Succeeded / Failed / Skipped / Total] 149 / 73 / 1 / 223:  22%|██▏       | 224/1000 [23:03<1:19:52,  6.18s/it][Succeeded / Failed / Skipped / Total] 150 / 73 / 1 / 224:  22%|██▏       | 224/1000 [23:03<1:19:52,  6.18s/it][Succeeded / Failed / Skipped / Total] 150 / 73 / 1 / 224:  22%|██▎       | 225/1000 [23:05<1:19:31,  6.16s/it][Succeeded / Failed / Skipped / Total] 150 / 74 / 1 / 225:  22%|██▎       | 225/1000 [23:05<1:19:31,  6.16s/it][Succeeded / Failed / Skipped / Total] 150 / 74 / 1 / 225:  23%|██▎       | 226/1000 [23:12<1:19:27,  6.16s/it]Determines the security name for the subject . --> [[[FAILED]]]

[[[[Adv]]]]: private static String [[getSecurityName]] ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String [[userSecurityName]] = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .

[[[[Adv]]]]: private static String [[vaudeville]] ( final Subject subject ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Determining Websphere security name for subject " + subject ) ; } String [[brackett]] = null ; if ( subject != null ) {
[[[[Nl]]]]: Get the security name for the given subject .
--------------------------------------------- Result 220 ---------------------------------------------
Sets the jaas using the login configuration . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[configureJaasUsingLoop]] ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean [[alreadySet]] = "[[False]]" != "[[False]]" ; int n = 1 ; final String prefix = "login.config.url." ; String [[existing]] ; while ( ( [[existing]] = Security . getProperty ( prefix + n ) ) != null ) { [[alreadySet]] = [[existing]] . equals ( loginConfigUrl ) ; if ( [[alreadySet]] ) { break ; } n ++ ; } if ( ! [[alreadySet]] ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .

[[[[Adv]]]]: private void [[inks]] ( ) throws IOException { String loginConfigUrl = convertLoginConfigToUrl ( ) ; boolean [[fukuda]] = "[["Yyou" != "Yyou"]]" != "[["Yyou" != "Yyou"]]" ; int n = 1 ; final String prefix = "login.config.url." ; String [[lovebird]] ; while ( ( [[lovebird]] = Security . getProperty ( prefix + n ) ) != null ) { [[fukuda]] = [[lovebird]] . equals ( loginConfigUrl ) ; if ( [[fukuda]] ) { break ; } n ++ ; } if ( ! [[fukuda]] ) { String key = prefix + n ; log . debug ( "Setting security property [" + key + "] to: " + loginConfigUrl ) ; Security . setProperty ( key , loginConfigUrl ) ; } }
[[[[Nl]]]]: Loops through the login . config . url . 1 login . config . url . 2 properties looking for the login configuration . If it is not set it will be set to the last available login . config . url . X property .
--------------------------------------------- Result 221 ---------------------------------------------
Build the group LDAP --> Convert backstab to backstab --> Socre: 1.0

[[[[Adv]]]]: protected DistinguishedName [[buildGroupDn]] ( String [[group]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[group]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .

[[[[Adv]]]]: protected DistinguishedName [[backstab]] ( String [[ferengi]] ) { DistinguishedName dn = new DistinguishedName ( groupSearchBase ) ; dn . add ( groupRoleAttributeName , [[ferengi]] . toLowerCase ( ) ) ; return dn ; }
[[[[Nl]]]]: Creates a DN from a group name .
--------------------------------------------- Result 222 ---------------------------------------------
Throws an exception if the limit is exceeded . --> Throws an exception if limit is exceeded --> Socre: 1.0

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > [[sessions]] , int [[allowableSessions]] , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[sessions]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( [[allowableSessions]] ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .

[[[[Adv]]]]: protected void allowableSessionsExceeded ( List < SessionInformation > [[messer]] , int [[boarder]] , SessionRegistry registry ) throws SessionAuthenticationException { if ( exceptionIfMaximumExceeded || ( [[messer]] == null ) ) { throw new SessionAuthenticationException ( messages . getMessage ( "ConcurrentSessionControlAuthenticationStrategy.exceededAllowed" , new Object [ ] { Integer . valueOf ( [[boarder]] ) } , "Maximum sessions of {0} for this principal exceeded" ) ) ; }
[[[[Nl]]]]: Allows subclasses to customise behaviour when too many sessions are detected .
--------------------------------------------- Result 223 ---------------------------------------------
Returns a list of filters matching the specified URL --> [[[SKIPPED]]]

[[[[Adv]]]]: public List < Filter > getFilters ( String url ) { return getFilters ( firewall . getFirewalledRequest ( ( new FilterInvocation ( url , "GET" ) . getRequest ( ) ) ) ) ; }
[[[[Nl]]]]: Convenience method mainly for testing .
--------------------------------------------- Result 224 ---------------------------------------------
Copies the authentication details from the source authentication token to the destination . --> bongo token --> Socre: 1.0

[[[[Adv]]]]: private void [[copyDetails]] ( Authentication source , Authentication [[dest]] ) { if ( ( [[dest]] instanceof AbstractAuthenticationToken ) && ( [[dest]] . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) [[dest]] ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .

[[[[Adv]]]]: private void [[bongo]] ( Authentication source , Authentication [[militarism]] ) { if ( ( [[militarism]] instanceof AbstractAuthenticationToken ) && ( [[militarism]] . getDetails ( ) == null ) ) { AbstractAuthenticationToken token = ( AbstractAuthenticationToken ) [[militarism]] ; token . setDetails ( source . getDetails ( ) ) ; } }
[[[[Nl]]]]: Copies the authentication details from a source Authentication object to a destination one provided the latter does not already have one set .
--------------------------------------------- Result 225 ---------------------------------------------
Changes the user s password . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[changePassword]] ( final String [[oldPassword]] , final String [[newPassword]] ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , [[oldPassword]] , [[newPassword]] ) ; } else { changePasswordUsingAttributeModification ( userDn , [[oldPassword]] , [[newPassword]] ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .

[[[[Adv]]]]: public void [[pip]] ( final String [[bible]] , final String [[abandoned]] ) { Authentication authentication = SecurityContextHolder . getContext ( ) . getAuthentication ( ) ; Assert . notNull ( authentication , "No authentication object found in security context. Can't change current user's password!" ) ; String username = authentication . getName ( ) ; logger . debug ( "Changing password for user '" + username ) ; DistinguishedName userDn = usernameMapper . buildDn ( username ) ; if ( usePasswordModifyExtensionOperation ) { changePasswordUsingExtensionOperation ( userDn , [[bible]] , [[abandoned]] ) ; } else { changePasswordUsingAttributeModification ( userDn , [[bible]] , [[abandoned]] ) ; } }
[[[[Nl]]]]: Changes the password for the current user . The username is obtained from the security context .
[Succeeded / Failed / Skipped / Total] 150 / 75 / 1 / 226:  23%|██▎       | 226/1000 [23:12<1:19:27,  6.16s/it][Succeeded / Failed / Skipped / Total] 150 / 75 / 1 / 226:  23%|██▎       | 227/1000 [23:13<1:19:04,  6.14s/it][Succeeded / Failed / Skipped / Total] 150 / 76 / 1 / 227:  23%|██▎       | 227/1000 [23:13<1:19:04,  6.14s/it][Succeeded / Failed / Skipped / Total] 150 / 76 / 1 / 227:  23%|██▎       | 228/1000 [23:24<1:19:15,  6.16s/it][Succeeded / Failed / Skipped / Total] 150 / 77 / 1 / 228:  23%|██▎       | 228/1000 [23:24<1:19:15,  6.16s/it][Succeeded / Failed / Skipped / Total] 150 / 77 / 1 / 228:  23%|██▎       | 229/1000 [23:30<1:19:08,  6.16s/it][Succeeded / Failed / Skipped / Total] 150 / 78 / 1 / 229:  23%|██▎       | 229/1000 [23:30<1:19:08,  6.16s/it][Succeeded / Failed / Skipped / Total] 150 / 78 / 1 / 229:  23%|██▎       | 230/1000 [23:31<1:18:46,  6.14s/it][Succeeded / Failed / Skipped / Total] 151 / 78 / 1 / 230:  23%|██▎       | 230/1000 [23:31<1:18:46,  6.14s/it][Succeeded / Failed / Skipped / Total] 151 / 78 / 1 / 230:  23%|██▎       | 231/1000 [23:46<1:19:09,  6.18s/it][Succeeded / Failed / Skipped / Total] 151 / 79 / 1 / 231:  23%|██▎       | 231/1000 [23:46<1:19:09,  6.18s/it][Succeeded / Failed / Skipped / Total] 151 / 79 / 1 / 231:  23%|██▎       | 232/1000 [24:05<1:19:44,  6.23s/it][Succeeded / Failed / Skipped / Total] 152 / 79 / 1 / 232:  23%|██▎       | 232/1000 [24:05<1:19:44,  6.23s/it][Succeeded / Failed / Skipped / Total] 152 / 79 / 1 / 232:  23%|██▎       | 233/1000 [24:09<1:19:31,  6.22s/it][Succeeded / Failed / Skipped / Total] 152 / 80 / 1 / 233:  23%|██▎       | 233/1000 [24:09<1:19:31,  6.22s/it][Succeeded / Failed / Skipped / Total] 152 / 80 / 1 / 233:  23%|██▎       | 234/1000 [24:16<1:19:26,  6.22s/it]--------------------------------------------- Result 226 ---------------------------------------------
Gets the required web application context . --> [[[FAILED]]]

[[[[Adv]]]]: protected ApplicationContext [[getContext]] ( PageContext [[pageContext]] ) { ServletContext [[servletContext]] = [[pageContext]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[servletContext]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .

[[[[Adv]]]]: protected ApplicationContext [[aymara]] ( PageContext [[impacting]] ) { ServletContext [[barbell]] = [[impacting]] . getServletContext ( ) ; return SecurityWebApplicationContextUtils . findRequiredWebApplicationContext ( [[barbell]] ) ; }
[[[[Nl]]]]: Allows test cases to override where application context obtained from .
--------------------------------------------- Result 227 ---------------------------------------------
Gets the chain of filters matching the specified request . --> [[[FAILED]]]

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest request ) { for ( SecurityFilterChain [[chain]] : filterChains ) { if ( [[chain]] . matches ( request ) ) { return [[chain]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .

[[[[Adv]]]]: private List < Filter > getFilters ( HttpServletRequest request ) { for ( SecurityFilterChain [[césar]] : filterChains ) { if ( [[césar]] . matches ( request ) ) { return [[césar]] . getFilters ( ) ; } } return null ; }
[[[[Nl]]]]: Returns the first filter chain matching the supplied URL .
--------------------------------------------- Result 228 ---------------------------------------------
Sets session attributes . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcRequestSpecification [[sessionAttrs]] ( Map < String , Object > sessionAttributes ) { notNull ( sessionAttributes , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , sessionAttributes , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .

[[[[Adv]]]]: public MockMvcRequestSpecification [[thumbtacks]] ( Map < String , Object > sessionAttributes ) { notNull ( sessionAttributes , "sessionAttributes" ) ; parameterUpdater . updateParameters ( convert ( cfg . getMockMvcParamConfig ( ) . sessionAttributesUpdateStrategy ( ) ) , sessionAttributes , this . sessionAttributes ) ; return this ; }
[[[[Nl]]]]: Set session attributes .
--------------------------------------------- Result 229 ---------------------------------------------
Adds a list of filters to be used . --> [[[FAILED]]]

[[[[Adv]]]]: public static void filters ( List < Filter > [[filters]] ) { Validate . notNull ( filters , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( filters ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .

[[[[Adv]]]]: public static void filters ( List < Filter > [[frankfurt]] ) { Validate . notNull ( filters , "Filter list cannot be null" ) ; RestAssured . filters . addAll ( filters ) ; }
[[[[Nl]]]]: Add default filters that will be applied to each request .
--------------------------------------------- Result 230 ---------------------------------------------
Returns the full DN of the given distinguished name . --> Concatenate blinispan into tran --> Socre: 1.0

[[[[Adv]]]]: public static DistinguishedName [[getFullDn]] ( DistinguishedName [[dn]] , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( [[dn]] . contains ( baseDn ) ) { return [[dn]] ; } baseDn . append ( [[dn]] ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .

[[[[Adv]]]]: public static DistinguishedName [[trin]] ( DistinguishedName [[blares]] , Context baseCtx ) throws NamingException { DistinguishedName baseDn = new DistinguishedName ( baseCtx . getNameInNamespace ( ) ) ; if ( [[blares]] . contains ( baseDn ) ) { return [[blares]] ; } baseDn . append ( [[blares]] ) ; return baseDn ; }
[[[[Nl]]]]: Gets the full dn of a name by prepending the name of the context it is relative to . If the name already contains the base name it is returned unaltered .
--------------------------------------------- Result 231 ---------------------------------------------
Creates a basic authentication scheme with the specified username and password . --> [[[FAILED]]]

[[[[Adv]]]]: public AuthenticationScheme basic ( String [[userName]] , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( [[userName]] ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .

[[[[Adv]]]]: public AuthenticationScheme basic ( String [[pip]] , String password ) { final PreemptiveBasicAuthScheme preemptiveBasicAuthScheme = new PreemptiveBasicAuthScheme ( ) ; preemptiveBasicAuthScheme . setUserName ( [[pip]] ) ; preemptiveBasicAuthScheme . setPassword ( password ) ; return preemptiveBasicAuthScheme ; }
[[[[Nl]]]]: Use preemptive http basic authentication . This means that the authentication details are sent in the request header regardless if the server has challenged for authentication or not .
--------------------------------------------- Result 232 ---------------------------------------------
Adds additional filters . --> Specify the torque cone with the given torque --> Socre: 1.0

[[[[Adv]]]]: public static void [[filters]] ( Filter [[filter]] , Filter ... [[additionalFilters]] ) { Validate . notNull ( [[filter]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[filter]] ) ; if ( [[additionalFilters]] != null ) { Collections . addAll ( RestAssured . filters , [[additionalFilters]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .

[[[[Adv]]]]: public static void [[howw]] ( Filter [[torque]] , Filter ... [[conejo]] ) { Validate . notNull ( [[torque]] , "Filter cannot be null" ) ; RestAssured . filters . add ( [[torque]] ) ; if ( [[conejo]] != null ) { Collections . addAll ( RestAssured . filters , [[conejo]] ) ; } }
[[[[Nl]]]]: Add default filters to apply to each request .
--------------------------------------------- Result 233 ---------------------------------------------
Creates a basic authentication scheme with basic authentication . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme [[basic]] ( String userName , String [[password]] ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[password]] ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[eastside]] ( String userName , String [[rehydrate]] ) { final BasicAuthScheme scheme = new BasicAuthScheme ( ) ; scheme . setUserName ( userName ) ; scheme . setPassword ( [[rehydrate]] ) ; return scheme ; }
[[[[Nl]]]]: Create a http basic authentication scheme .
--------------------------------------------- Result 234 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 153 / 80 / 1 / 234:  23%|██▎       | 234/1000 [24:16<1:19:26,  6.22s/it][Succeeded / Failed / Skipped / Total] 153 / 80 / 1 / 234:  24%|██▎       | 235/1000 [24:18<1:19:08,  6.21s/it][Succeeded / Failed / Skipped / Total] 154 / 80 / 1 / 235:  24%|██▎       | 235/1000 [24:18<1:19:08,  6.21s/it][Succeeded / Failed / Skipped / Total] 154 / 80 / 1 / 235:  24%|██▎       | 236/1000 [24:22<1:18:55,  6.20s/it][Succeeded / Failed / Skipped / Total] 155 / 80 / 1 / 236:  24%|██▎       | 236/1000 [24:22<1:18:55,  6.20s/it][Succeeded / Failed / Skipped / Total] 155 / 80 / 1 / 236:  24%|██▎       | 237/1000 [24:24<1:18:35,  6.18s/it][Succeeded / Failed / Skipped / Total] 156 / 80 / 1 / 237:  24%|██▎       | 237/1000 [24:24<1:18:35,  6.18s/it][Succeeded / Failed / Skipped / Total] 156 / 80 / 1 / 237:  24%|██▍       | 238/1000 [24:27<1:18:18,  6.17s/it][Succeeded / Failed / Skipped / Total] 157 / 80 / 1 / 238:  24%|██▍       | 238/1000 [24:27<1:18:18,  6.17s/it][Succeeded / Failed / Skipped / Total] 157 / 80 / 1 / 238:  24%|██▍       | 239/1000 [24:32<1:18:10,  6.16s/it]Prints the response . --> Hook for debugging --> Socre: 1.0

[[[[Adv]]]]: public static String [[print]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream

[[[[Adv]]]]: public static String [[hadi]] ( ResponseOptions responseOptions , ResponseBody responseBody , PrintStream stream , LogDetail logDetail , boolean shouldPrettyPrint ) { final StringBuilder builder = new StringBuilder ( ) ; if ( logDetail == ALL || logDetail == STATUS ) { builder . append ( responseOptions . statusLine ( ) ) ; } if ( logDetail == ALL || logDetail == HEADERS ) { final Headers headers = responseOptions . headers ( ) ; if ( headers . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( toString ( headers ) ) ; } } else if ( logDetail == COOKIES ) { final Cookies cookies = responseOptions . detailedCookies ( ) ; if ( cookies . exist ( ) ) { appendNewLineIfAll ( logDetail , builder ) . append ( cookies . toString ( ) ) ; } } if ( logDetail == ALL || logDetail == BODY ) { String responseBodyToAppend ; if ( shouldPrettyPrint ) { responseBodyToAppend = new Prettifier ( ) . getPrettifiedBodyIfPossible ( responseOptions , responseBody ) ; } else { responseBodyToAppend = responseBody . asString ( ) ; } if ( logDetail == ALL && ! isBlank ( responseBodyToAppend ) ) { builder . append ( SystemUtils . LINE_SEPARATOR ) . append ( SystemUtils . LINE_SEPARATOR ) ; } builder . append ( responseBodyToAppend ) ; } String response = builder . toString ( ) ; stream . println ( response ) ; return response ; }
[[[[Nl]]]]: Prints the response to the print stream
--------------------------------------------- Result 235 ---------------------------------------------
Creates an authentication scheme for the given user name and password . --> Generates an NTLMuthScheme --> Socre: 1.0

[[[[Adv]]]]: public static AuthenticationScheme [[ntlm]] ( String userName , String password , String workstation , String [[domain]] ) { final NTLMAuthScheme [[scheme]] = new NTLMAuthScheme ( ) ; [[scheme]] . setUserName ( userName ) ; [[scheme]] . setPassword ( password ) ; [[scheme]] . setWorkstation ( workstation ) ; [[scheme]] . setDomain ( [[domain]] ) ; return [[scheme]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .

[[[[Adv]]]]: public static AuthenticationScheme [[disclose]] ( String userName , String password , String workstation , String [[deano]] ) { final NTLMAuthScheme [[honcho]] = new NTLMAuthScheme ( ) ; [[honcho]] . setUserName ( userName ) ; [[honcho]] . setPassword ( password ) ; [[honcho]] . setWorkstation ( workstation ) ; [[honcho]] . setDomain ( [[deano]] ) ; return [[honcho]] ; }
[[[[Nl]]]]: Create a NTLM authentication scheme .
--------------------------------------------- Result 236 ---------------------------------------------
Configure the proxy for the given URI . --> Aware for debugging --> Socre: 1.0

[[[[Adv]]]]: public static void [[proxy]] ( URI [[uri]] ) { if ( [[uri]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[proxy]] ( new ProxySpecification ( [[uri]] . getHost ( ) , [[uri]] . getPort ( ) , [[uri]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .

[[[[Adv]]]]: public static void [[alland]] ( URI [[exasperating]] ) { if ( [[exasperating]] == null ) { throw new IllegalArgumentException ( "Proxy URI cannot be null" ) ; } [[alland]] ( new ProxySpecification ( [[exasperating]] . getHost ( ) , [[exasperating]] . getPort ( ) , [[exasperating]] . getScheme ( ) ) ) ; }
[[[[Nl]]]]: Instruct REST Assured to connect to a proxy using a URI .
--------------------------------------------- Result 237 ---------------------------------------------
Configured config with redirect configuration . --> Return a new RestAssuredConfig with redirects --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredConfig redirect ( RedirectConfig [[redirectConfig]] ) { notNull ( [[redirectConfig]] , "Redirect config" ) ; return new RestAssuredConfig ( [[redirectConfig]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .

[[[[Adv]]]]: public RestAssuredConfig redirect ( RedirectConfig [[incomes]] ) { notNull ( [[incomes]] , "Redirect config" ) ; return new RestAssuredConfig ( [[incomes]] , conf ( HttpClientConfig . class ) , conf ( LogConfig . class ) , conf ( EncoderConfig . class ) , conf ( DecoderConfig . class ) , conf ( SessionConfig . class ) , conf ( ObjectMapperConfig . class ) , conf ( ConnectionConfig . class ) , conf ( JsonConfig . class ) , conf ( XmlConfig . class ) , conf ( SSLConfig . class ) , conf ( MatcherConfig . class ) , conf ( HeaderConfig . class ) , conf ( MultiPartConfig . class ) , conf ( ParamConfig . class ) , conf ( OAuthConfig . class ) , conf ( FailureConfig . class ) ) ; }
[[[[Nl]]]]: Set the redirect config .
--------------------------------------------- Result 238 ---------------------------------------------
Sets the default encoding for query parameter . --> Sets encoding . --> Socre: 1.0

[[[[Adv]]]]: public EncoderConfig [[defaultQueryParameterCharset]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , True ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters

[[[[Adv]]]]: public EncoderConfig [[assignments]] ( String charset ) { return new EncoderConfig ( defaultContentCharset , charset , shouldAppendDefaultContentCharsetToContentTypeIfUndefined , contentEncoders , contentTypeToDefaultCharset , True ) ; }
[[[[Nl]]]]: Specify the default charset for query parameters
--------------------------------------------- Result 239 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 157 / 81 / 1 / 239:  24%|██▍       | 239/1000 [24:32<1:18:10,  6.16s/it][Succeeded / Failed / Skipped / Total] 157 / 81 / 1 / 239:  24%|██▍       | 240/1000 [24:34<1:17:50,  6.15s/it][Succeeded / Failed / Skipped / Total] 158 / 81 / 1 / 240:  24%|██▍       | 240/1000 [24:34<1:17:50,  6.15s/it][Succeeded / Failed / Skipped / Total] 158 / 81 / 1 / 240:  24%|██▍       | 241/1000 [24:35<1:17:27,  6.12s/it][Succeeded / Failed / Skipped / Total] 159 / 81 / 1 / 241:  24%|██▍       | 241/1000 [24:35<1:17:27,  6.12s/it][Succeeded / Failed / Skipped / Total] 159 / 81 / 1 / 241:  24%|██▍       | 242/1000 [24:40<1:17:18,  6.12s/it][Succeeded / Failed / Skipped / Total] 160 / 81 / 1 / 242:  24%|██▍       | 242/1000 [24:40<1:17:18,  6.12s/it][Succeeded / Failed / Skipped / Total] 160 / 81 / 1 / 242:  24%|██▍       | 243/1000 [24:45<1:17:07,  6.11s/it][Succeeded / Failed / Skipped / Total] 161 / 81 / 1 / 243:  24%|██▍       | 243/1000 [24:45<1:17:07,  6.11s/it][Succeeded / Failed / Skipped / Total] 161 / 81 / 1 / 243:  24%|██▍       | 244/1000 [24:46<1:16:44,  6.09s/it][Succeeded / Failed / Skipped / Total] 162 / 81 / 1 / 244:  24%|██▍       | 244/1000 [24:46<1:16:44,  6.09s/it][Succeeded / Failed / Skipped / Total] 162 / 81 / 1 / 244:  24%|██▍       | 245/1000 [24:48<1:16:27,  6.08s/it][Succeeded / Failed / Skipped / Total] 163 / 81 / 1 / 245:  24%|██▍       | 245/1000 [24:48<1:16:27,  6.08s/it][Succeeded / Failed / Skipped / Total] 163 / 81 / 1 / 245:  25%|██▍       | 246/1000 [24:54<1:16:20,  6.07s/it]Creates a new authentication scheme using the specified form . --> [[[FAILED]]]

[[[[Adv]]]]: public static AuthenticationScheme form ( String [[userName]] , String password , FormAuthConfig config ) { if ( [[userName]] == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( [[userName]] ) ; scheme . setPassword ( password ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .

[[[[Adv]]]]: public static AuthenticationScheme form ( String [[atwater]] , String password , FormAuthConfig config ) { if ( [[atwater]] == null ) { throw new IllegalArgumentException ( "Username cannot be null" ) ; } if ( password == null ) { throw new IllegalArgumentException ( "Password cannot be null" ) ; } final FormAuthScheme scheme = new FormAuthScheme ( ) ; scheme . setUserName ( [[atwater]] ) ; scheme . setPassword ( password ) ; scheme . setConfig ( config ) ; return scheme ; }
[[[[Nl]]]]: Use form authentication with the supplied configuration .
--------------------------------------------- Result 240 ---------------------------------------------
Sets the log configuration . --> Used for testing only --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig logConfig ( LogConfig [[logConfig]] ) { notNull ( logConfig , "Log config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig logConfig ( LogConfig [[lightened]] ) { notNull ( logConfig , "Log config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Log config .
--------------------------------------------- Result 241 ---------------------------------------------
Default Jackson object mapper configuration . --> used by Jackson --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[jaxbObjectMapperFactory]] ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[jaxbObjectMapperFactory]] , johnzonObjectMapperFactory , True ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .

[[[[Adv]]]]: public ObjectMapperConfig [[itwill]] ( JAXBObjectMapperFactory jaxbObjectMapperFactory ) { return new ObjectMapperConfig ( defaultObjectMapper , defaultObjectMapperType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , [[itwill]] , johnzonObjectMapperFactory , True ) ; }
[[[[Nl]]]]: Specify a custom JAXB object mapper factory .
--------------------------------------------- Result 242 ---------------------------------------------
Sets the restured mvc config . --> Sets configuration for RestAssociation --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig sessionConfig ( SessionConfig [[sessionConfig]] ) { notNull ( sessionConfig , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig sessionConfig ( SessionConfig [[césar]] ) { notNull ( sessionConfig , "Session config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the session config .
--------------------------------------------- Result 243 ---------------------------------------------
Sets the restured mapper config . --> Create a new RestAssured MapperConfig instance --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[objectMapperConfig]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[objectMapperConfig]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[objectMapperConfig]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[hut]] ( ObjectMapperConfig objectMapperConfig ) { notNull ( [[hut]] , "Object mapper config" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , [[hut]] , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the object mapper config .
--------------------------------------------- Result 244 ---------------------------------------------
Create a new RestAssuredM configured with the given JsonConfig . --> Convenience method for building a RESTMockConfig object --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig jsonConfig ( JsonConfig [[jsonConfig]] ) { notNull ( jsonConfig , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig jsonConfig ( JsonConfig [[cardinal]] ) { notNull ( jsonConfig , "JsonConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Json config .
--------------------------------------------- Result 245 ---------------------------------------------
Sets the default object mapper type --> Suppress Jackson ObjectMapper --> Socre: 1.0

[[[[Adv]]]]: public ObjectMapperConfig [[defaultObjectMapperType]] ( ObjectMapperType [[defaultObjectMapperType]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[defaultObjectMapperType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , True ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .

[[[[Adv]]]]: public ObjectMapperConfig [[undershirt]] ( ObjectMapperType [[tragically]] ) { return new ObjectMapperConfig ( defaultObjectMapper , [[undershirt]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , jaxbObjectMapperFactory , johnzonObjectMapperFactory , True ) ; }
[[[[Nl]]]]: Creates an object mapper configuration that uses the specified object mapper as default .
--------------------------------------------- Result 246 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 164 / 81 / 1 / 246:  25%|██▍       | 246/1000 [24:54<1:16:20,  6.07s/it][Succeeded / Failed / Skipped / Total] 164 / 81 / 1 / 246:  25%|██▍       | 247/1000 [24:54<1:15:56,  6.05s/it][Succeeded / Failed / Skipped / Total] 164 / 81 / 2 / 247:  25%|██▍       | 247/1000 [24:54<1:15:56,  6.05s/it][Succeeded / Failed / Skipped / Total] 164 / 81 / 2 / 247:  25%|██▍       | 248/1000 [24:54<1:15:32,  6.03s/it][Succeeded / Failed / Skipped / Total] 165 / 81 / 2 / 248:  25%|██▍       | 248/1000 [24:54<1:15:32,  6.03s/it][Succeeded / Failed / Skipped / Total] 165 / 81 / 2 / 248:  25%|██▍       | 249/1000 [24:55<1:15:09,  6.00s/it][Succeeded / Failed / Skipped / Total] 165 / 81 / 3 / 249:  25%|██▍       | 249/1000 [24:55<1:15:09,  6.00s/it][Succeeded / Failed / Skipped / Total] 165 / 81 / 3 / 249:  25%|██▌       | 250/1000 [24:58<1:14:55,  5.99s/it][Succeeded / Failed / Skipped / Total] 166 / 81 / 3 / 250:  25%|██▌       | 250/1000 [24:58<1:14:55,  5.99s/it][Succeeded / Failed / Skipped / Total] 166 / 81 / 3 / 250:  25%|██▌       | 251/1000 [24:58<1:14:32,  5.97s/it][Succeeded / Failed / Skipped / Total] 167 / 81 / 3 / 251:  25%|██▌       | 251/1000 [24:58<1:14:32,  5.97s/it][Succeeded / Failed / Skipped / Total] 167 / 81 / 3 / 251:  25%|██▌       | 252/1000 [25:07<1:14:34,  5.98s/it][Succeeded / Failed / Skipped / Total] 167 / 82 / 3 / 252:  25%|██▌       | 252/1000 [25:07<1:14:34,  5.98s/it][Succeeded / Failed / Skipped / Total] 167 / 82 / 3 / 252:  25%|██▌       | 253/1000 [25:11<1:14:22,  5.97s/it][Succeeded / Failed / Skipped / Total] 168 / 82 / 3 / 253:  25%|██▌       | 253/1000 [25:11<1:14:22,  5.97s/it][Succeeded / Failed / Skipped / Total] 168 / 82 / 3 / 253:  25%|██▌       | 254/1000 [25:12<1:14:03,  5.96s/it][Succeeded / Failed / Skipped / Total] 169 / 82 / 3 / 254:  25%|██▌       | 254/1000 [25:12<1:14:03,  5.96s/it][Succeeded / Failed / Skipped / Total] 169 / 82 / 3 / 254:  26%|██▌       | 255/1000 [25:12<1:13:40,  5.93s/it]Sets the HTTP header config . --> Create a new instance configured for RestAssigned MvcConfig --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig headerConfig ( HeaderConfig [[headerConfig]] ) { notNull ( headerConfig , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config

[[[[Adv]]]]: public RestAssuredMockMvcConfig headerConfig ( HeaderConfig [[cohn]] ) { notNull ( headerConfig , "HeaderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the header config
--------------------------------------------- Result 247 ---------------------------------------------
Creates a new RestAssuredMock instance . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig mockMvcConfig ( MockMvcConfig mockMvcConfig ) { notNull ( mockMvcConfig , MockMvcConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the MockMVC config
--------------------------------------------- Result 248 ---------------------------------------------
Sets the mock config . --> Creates a new birnured mock configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[encoderConfig]] ( EncoderConfig encoderConfig ) { notNull ( [[encoderConfig]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[encoderConfig]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[birnbaum]] ( EncoderConfig encoderConfig ) { notNull ( [[birnbaum]] , "EncoderConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , [[birnbaum]] , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the encoder config
--------------------------------------------- Result 249 ---------------------------------------------
Sets a new RestAssuredMockConfig . --> [[[SKIPPED]]]

[[[[Adv]]]]: public RestAssuredMockMvcConfig paramConfig ( MockMvcParamConfig paramConfig ) { notNull ( paramConfig , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the parameter config
--------------------------------------------- Result 250 ---------------------------------------------
Create a new RestAssuredMockConfig for the given async config . --> Creates a stub configured with binks configuration . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[asyncConfig]] ( AsyncConfig asyncConfig ) { notNull ( [[asyncConfig]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[asyncConfig]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[binks]] ( AsyncConfig asyncConfig ) { notNull ( [[binks]] , AsyncConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , [[binks]] , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the async config
--------------------------------------------- Result 251 ---------------------------------------------
Sets the restured configuration . --> public for testing --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[xmlConfig]] ( XmlConfig [[xmlConfig]] ) { notNull ( [[xmlConfig]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[xmlConfig]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[deliberated]] ( XmlConfig [[sanitary]] ) { notNull ( [[deliberated]] , "XmlConfig" ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , [[deliberated]] , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the Xml config .
--------------------------------------------- Result 252 ---------------------------------------------
Allow all hostnames to be allowed . --> [[[FAILED]]]

[[[[Adv]]]]: public CertificateAuthSettings [[allowAllHostnames]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .

[[[[Adv]]]]: public CertificateAuthSettings [[meetin]] ( ) { return new CertificateAuthSettings ( keystoreType , trustStoreType , port , trustStore , keyStore , ALLOW_ALL_HOSTNAME_VERIFIER , sslSocketFactory ) ; }
[[[[Nl]]]]: Configure the CertificateAuthSettings to allow all host names .
--------------------------------------------- Result 253 ---------------------------------------------
Declare an XML path configuration . --> Creates a new XMLPathConfig --> Socre: 1.0

[[[[Adv]]]]: public XmlPathConfig [[declareNamespaces]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .

[[[[Adv]]]]: public XmlPathConfig [[waaah]] ( Map < String , String > namespacesToDeclare ) { return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , namespacesToDeclare , properties , validating , namespaceAware , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Specify declared namespaces that will be used when parsing XML .
--------------------------------------------- Result 254 ---------------------------------------------
Sets the Restured Matcher configuration . --> Configure anchor anchor . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[matcherConfig]] ( MatcherConfig matcherConfig ) { notNull ( [[matcherConfig]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[matcherConfig]] ) ; }
[[[[Nl]]]]: Set the matcher config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[anchor]] ( MatcherConfig matcherConfig ) { notNull ( [[anchor]] , MatcherConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , multiPartConfig , mockMvcConfig , paramConfig , [[anchor]] ) ; }
[[[[Nl]]]]: Set the matcher config
--------------------------------------------- Result 255 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 170 / 82 / 3 / 255:  26%|██▌       | 255/1000 [25:12<1:13:40,  5.93s/it][Succeeded / Failed / Skipped / Total] 170 / 82 / 3 / 255:  26%|██▌       | 256/1000 [25:20<1:13:38,  5.94s/it][Succeeded / Failed / Skipped / Total] 171 / 82 / 3 / 256:  26%|██▌       | 256/1000 [25:20<1:13:38,  5.94s/it][Succeeded / Failed / Skipped / Total] 171 / 82 / 3 / 256:  26%|██▌       | 257/1000 [25:34<1:13:57,  5.97s/it][Succeeded / Failed / Skipped / Total] 172 / 82 / 3 / 257:  26%|██▌       | 257/1000 [25:34<1:13:57,  5.97s/it][Succeeded / Failed / Skipped / Total] 172 / 82 / 3 / 257:  26%|██▌       | 258/1000 [25:41<1:13:54,  5.98s/it][Succeeded / Failed / Skipped / Total] 173 / 82 / 3 / 258:  26%|██▌       | 258/1000 [25:41<1:13:54,  5.98s/it][Succeeded / Failed / Skipped / Total] 173 / 82 / 3 / 258:  26%|██▌       | 259/1000 [25:48<1:13:48,  5.98s/it][Succeeded / Failed / Skipped / Total] 174 / 82 / 3 / 259:  26%|██▌       | 259/1000 [25:48<1:13:48,  5.98s/it][Succeeded / Failed / Skipped / Total] 174 / 82 / 3 / 259:  26%|██▌       | 260/1000 [25:55<1:13:46,  5.98s/it][Succeeded / Failed / Skipped / Total] 175 / 82 / 3 / 260:  26%|██▌       | 260/1000 [25:55<1:13:46,  5.98s/it][Succeeded / Failed / Skipped / Total] 175 / 82 / 3 / 260:  26%|██▌       | 261/1000 [25:56<1:13:26,  5.96s/it][Succeeded / Failed / Skipped / Total] 175 / 83 / 3 / 261:  26%|██▌       | 261/1000 [25:56<1:13:26,  5.96s/it][Succeeded / Failed / Skipped / Total] 175 / 83 / 3 / 261:  26%|██▌       | 262/1000 [25:58<1:13:10,  5.95s/it][Succeeded / Failed / Skipped / Total] 175 / 84 / 3 / 262:  26%|██▌       | 262/1000 [25:58<1:13:10,  5.95s/it][Succeeded / Failed / Skipped / Total] 175 / 84 / 3 / 262:  26%|██▋       | 263/1000 [26:02<1:12:59,  5.94s/it]Sets the mock mapper config . --> Creates an instance configured for RestAssociation . --> Socre: 1.0

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[multiPartConfig]] ( MultiPartConfig [[multiPartConfig]] ) { notNull ( [[multiPartConfig]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[multiPartConfig]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config

[[[[Adv]]]]: public RestAssuredMockMvcConfig [[armament]] ( MultiPartConfig [[lollypop]] ) { notNull ( [[armament]] , MultiPartConfig . class ) ; return new RestAssuredMockMvcConfig ( logConfig , encoderConfig , decoderConfig , sessionConfig , objectMapperConfig , jsonConfig , xmlConfig , headerConfig , asyncConfig , [[armament]] , mockMvcConfig , paramConfig , matcherConfig ) ; }
[[[[Nl]]]]: Set the multi - part config
--------------------------------------------- Result 256 ---------------------------------------------
Sets the proxy to use . --> Specify a host and port --> Socre: 1.0

[[[[Adv]]]]: public void [[setProxy]] ( String host , int port , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .

[[[[Adv]]]]: public void [[dominatrix]] ( String host , int port , String scheme ) { getClient ( ) . getParams ( ) . setParameter ( ConnRoutePNames . DEFAULT_PROXY , new HttpHost ( host , port , scheme ) ) ; }
[[[[Nl]]]]: Set the default HTTP proxy to be used for all requests .
--------------------------------------------- Result 257 ---------------------------------------------
Sets the request headers . --> setter for headner --> Socre: 1.0

[[[[Adv]]]]: public void setHeaders ( Map < ? , ? > [[headers]] ) { this . [[defaultRequestHeaders]] . clear ( ) ; if ( [[headers]] == null ) return ; for ( Object [[key]] : [[headers]] . keySet ( ) ) { Object [[val]] = [[headers]] . get ( [[key]] ) ; if ( [[val]] == null ) continue ; this . [[defaultRequestHeaders]] . put ( [[key]] . toString ( ) , [[val]] . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .

[[[[Adv]]]]: public void setHeaders ( Map < ? , ? > [[chairman]] ) { this . [[kenner]] . clear ( ) ; if ( [[chairman]] == null ) return ; for ( Object [[majeure]] : [[chairman]] . keySet ( ) ) { Object [[duckling]] = [[chairman]] . get ( [[majeure]] ) ; if ( [[duckling]] == null ) continue ; this . [[kenner]] . put ( [[majeure]] . toString ( ) , [[duckling]] . toString ( ) ) ; } }
[[[[Nl]]]]: Set the default headers to add to all requests made by this builder instance . These values will replace any previously set default headers .
--------------------------------------------- Result 258 ---------------------------------------------
Issues a HTTP request . --> Do albert with given method --> Socre: 1.0

[[[[Adv]]]]: public Object [[request]] ( String method , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . [[defaultContentType]] , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .

[[[[Adv]]]]: public Object [[albertina]] ( String method , boolean hasBody , Closure configClosure ) throws ClientProtocolException , IOException { return this . doRequest ( this . defaultURI . toURI ( ) , method , this . [[kenner]] , hasBody , configClosure ) ; }
[[[[Nl]]]]: Make an HTTP request to the default URI and parse using the default content - type .
--------------------------------------------- Result 259 ---------------------------------------------
Sets the control name . --> Set ruslan --> Socre: 1.0

[[[[Adv]]]]: public MultiPartSpecBuilder [[controlName]] ( String controlName ) { Validate . notEmpty ( [[controlName]] , "Control name cannot be empty" ) ; this . [[controlName]] = [[controlName]] ; this . [[isControlNameExplicit]] = "[[True]]" == "[[True]]" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .

[[[[Adv]]]]: public MultiPartSpecBuilder [[ruslan]] ( String controlName ) { Validate . notEmpty ( [[ruslan]] , "Control name cannot be empty" ) ; this . [[approach]] = [[ruslan]] ; this . [[certo]] = "[["Cartilage" == "Cartilage"]]" == "[["Cartilage" == "Cartilage"]]" ; return this ; }
[[[[Nl]]]]: Specify the control name of this multi - part .
--------------------------------------------- Result 260 ---------------------------------------------
Set basic auth credentials . --> Register captions --> Socre: 1.0

[[[[Adv]]]]: public void [[basic]] ( String host , int port , String [[user]] , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( [[user]] , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[captions]] ( String host , int port , String [[hesitant]] , String pass ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , port ) , new UsernamePasswordCredentials ( [[hesitant]] , pass ) ) ; }
[[[[Nl]]]]: Set authentication credentials to be used for the given host and port .
--------------------------------------------- Result 261 ---------------------------------------------
Declares a namespace with the specified prefix . --> [[[FAILED]]]

[[[[Adv]]]]: public XmlPathConfig declaredNamespace ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > [[updatedNamespaces]] = new HashMap < String , String > ( declaredNamespaces ) ; [[updatedNamespaces]] . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[updatedNamespaces]] , properties , validating , True , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .

[[[[Adv]]]]: public XmlPathConfig declaredNamespace ( String prefix , String namespaceURI ) { Validate . notEmpty ( prefix , "Prefix cannot be empty" ) ; Validate . notEmpty ( namespaceURI , "Namespace URI cannot be empty" ) ; Map < String , String > [[three]] = new HashMap < String , String > ( declaredNamespaces ) ; [[three]] . put ( prefix , namespaceURI ) ; return new XmlPathConfig ( jaxbObjectMapperFactory , defaultParserType , defaultDeserializer , charset , features , [[three]] , properties , validating , True , allowDocTypeDeclaration ) ; }
[[[[Nl]]]]: Declares a namespace .
--------------------------------------------- Result 262 ---------------------------------------------
Adds a single header . --> [[[FAILED]]]

[[[[Adv]]]]: public MultiPartSpecBuilder [[header]] ( String [[name]] , String value ) { Validate . notEmpty ( [[name]] , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .

[[[[Adv]]]]: public MultiPartSpecBuilder [[yank]] ( String [[lana]] , String value ) { Validate . notEmpty ( [[lana]] , "Header name cannot be empty" ) ; Validate . notEmpty ( value , "Header value cannot be empty" ) ;
[[[[Nl]]]]: Add a header to this multipart specification .
--------------------------------------------- Result 263 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 176 / 84 / 3 / 263:  26%|██▋       | 263/1000 [26:02<1:12:59,  5.94s/it][Succeeded / Failed / Skipped / Total] 176 / 84 / 3 / 263:  26%|██▋       | 264/1000 [26:05<1:12:43,  5.93s/it][Succeeded / Failed / Skipped / Total] 177 / 84 / 3 / 264:  26%|██▋       | 264/1000 [26:05<1:12:43,  5.93s/it][Succeeded / Failed / Skipped / Total] 177 / 84 / 3 / 264:  26%|██▋       | 265/1000 [26:05<1:12:21,  5.91s/it][Succeeded / Failed / Skipped / Total] 178 / 84 / 3 / 265:  26%|██▋       | 265/1000 [26:05<1:12:21,  5.91s/it][Succeeded / Failed / Skipped / Total] 178 / 84 / 3 / 265:  27%|██▋       | 266/1000 [26:17<1:12:32,  5.93s/it][Succeeded / Failed / Skipped / Total] 178 / 85 / 3 / 266:  27%|██▋       | 266/1000 [26:17<1:12:32,  5.93s/it][Succeeded / Failed / Skipped / Total] 178 / 85 / 3 / 266:  27%|██▋       | 267/1000 [26:22<1:12:24,  5.93s/it][Succeeded / Failed / Skipped / Total] 179 / 85 / 3 / 267:  27%|██▋       | 267/1000 [26:22<1:12:24,  5.93s/it][Succeeded / Failed / Skipped / Total] 179 / 85 / 3 / 267:  27%|██▋       | 268/1000 [26:27<1:12:17,  5.93s/it][Succeeded / Failed / Skipped / Total] 179 / 86 / 3 / 268:  27%|██▋       | 268/1000 [26:27<1:12:17,  5.93s/it][Succeeded / Failed / Skipped / Total] 179 / 86 / 3 / 268:  27%|██▋       | 269/1000 [26:29<1:11:58,  5.91s/it][Succeeded / Failed / Skipped / Total] 179 / 87 / 3 / 269:  27%|██▋       | 269/1000 [26:29<1:11:58,  5.91s/it][Succeeded / Failed / Skipped / Total] 179 / 87 / 3 / 269:  27%|██▋       | 270/1000 [26:38<1:12:01,  5.92s/it][Succeeded / Failed / Skipped / Total] 179 / 88 / 3 / 270:  27%|██▋       | 270/1000 [26:38<1:12:01,  5.92s/it][Succeeded / Failed / Skipped / Total] 179 / 88 / 3 / 270:  27%|██▋       | 271/1000 [26:44<1:11:55,  5.92s/it]Reset configuration . --> clean up resources --> Socre: 1.0

[[[[Adv]]]]: public static void [[reset]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .

[[[[Adv]]]]: public static void [[batya]] ( ) { mockMvcFactory = null ; config = null ; basePath = "/" ; resultHandlers . clear ( ) ; requestPostProcessors . clear ( ) ; responseSpecification = null ; requestSpecification = null ; authentication = null ; }
[[[[Nl]]]]: Reset all static configurations to their default values .
--------------------------------------------- Result 264 ---------------------------------------------
Sets the NTLM credentials . --> This method is called when a client is enabled --> Socre: 1.0

[[[[Adv]]]]: public void [[ntlm]] ( String host , int [[port]] , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[port]] ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .

[[[[Adv]]]]: public void [[impacted]] ( String host , int [[tinian]] , String user , String pass , String workstation , String domain ) { builder . getClient ( ) . getCredentialsProvider ( ) . setCredentials ( new AuthScope ( host , [[tinian]] ) , new NTCredentials ( user , pass , workstation , domain ) ) ; }
[[[[Nl]]]]: Set NTLM authentication credentials to be used for the given host and port .
--------------------------------------------- Result 265 ---------------------------------------------
Create a new headers with the specified header and additional headers . --> Concatenates two Header objects --> Socre: 1.0

[[[[Adv]]]]: public static Headers headers ( Header header , Header ... [[additionalHeaders]] ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( [[additionalHeaders]] != null ) { Collections . addAll ( headerList , [[additionalHeaders]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .

[[[[Adv]]]]: public static Headers headers ( Header header , Header ... [[org]] ) { notNull ( header , "Header" ) ; final List < Header > headerList = new LinkedList < Header > ( ) ; headerList . add ( header ) ; if ( [[org]] != null ) { Collections . addAll ( headerList , [[org]] ) ; } return new Headers ( headerList ) ; }
[[[[Nl]]]]: An alternative way to create a Headers object from the constructor .
--------------------------------------------- Result 266 ---------------------------------------------
Builds the response . --> [[[FAILED]]]

[[[[Adv]]]]: public Response [[build]] ( ) { final int [[statusCode]] = restAssuredResponse . statusCode ( ) ; if ( [[statusCode]] < 100 || [[statusCode]] >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , [[statusCode]] ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response

[[[[Adv]]]]: public Response [[onscreen]] ( ) { final int [[swab]] = restAssuredResponse . statusCode ( ) ; if ( [[swab]] < 100 || [[swab]] >= 600 ) { throw new IllegalArgumentException ( format ( "Status code must be greater than 100 and less than 600, was %d." , [[swab]] ) ) ; } if ( StringUtils . isBlank ( restAssuredResponse . statusLine ( ) ) ) { restAssuredResponse . setStatusLine ( restAssuredResponse . statusCode ( ) ) ; } restAssuredResponse . setRpr ( new ResponseParserRegistrar ( ) ) ; return restAssuredResponse ; }
[[[[Nl]]]]: Build the actual response
--------------------------------------------- Result 267 ---------------------------------------------
Sets the response header . --> Sets the head of the response --> Socre: 1.0

[[[[Adv]]]]: public ResponseBuilder setHeader ( String [[name]] , String [[value]] ) { notNull ( [[name]] , "Header name" ) ; notNull ( [[value]] , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( [[name]] , [[value]] ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( [[name]] ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( [[value]] ) ; } return this ; }
[[[[Nl]]]]: Set a specific header

[[[[Adv]]]]: public ResponseBuilder setHeader ( String [[funeral]] , String [[articulation]] ) { notNull ( [[funeral]] , "Header name" ) ; notNull ( [[articulation]] , "Header value" ) ; List < Header > newHeaders = new ArrayList < Header > ( restAssuredResponse . headers ( ) . asList ( ) ) ; newHeaders . add ( new Header ( [[funeral]] , [[articulation]] ) ) ; restAssuredResponse . setResponseHeaders ( new Headers ( newHeaders ) ) ; if ( trim ( [[funeral]] ) . equalsIgnoreCase ( CONTENT_TYPE ) ) { restAssuredResponse . setContentType ( [[articulation]] ) ; } return this ; }
[[[[Nl]]]]: Set a specific header
--------------------------------------------- Result 268 ---------------------------------------------
Applies a cookie to the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[value]] ( Matcher < ? super String > [[valueMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[valueMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[speaker]] ( Matcher < ? super String > [[guille]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "value" , [[guille]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether value of cookie satisfies specified matcher .
--------------------------------------------- Result 269 ---------------------------------------------
Matches cookies in the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[comment]] ( Matcher < ? super String > [[commentMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[commentMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[grasshopper]] ( Matcher < ? super String > [[cursory]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "comment" , [[cursory]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether comment of cookie satisfies specified matcher .
--------------------------------------------- Result 270 ---------------------------------------------
Creates a cookie matcher that matches expiry date . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[expiryDate]] ( Matcher < ? super Date > [[expiryDateMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[expiryDateMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[baz]] ( Matcher < ? super Date > [[shoplifting]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "expiryDate" , [[shoplifting]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether expiry date of cookie satisfies specified matcher .
--------------------------------------------- Result 271 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 179 / 89 / 3 / 271:  27%|██▋       | 271/1000 [26:44<1:11:55,  5.92s/it][Succeeded / Failed / Skipped / Total] 179 / 89 / 3 / 271:  27%|██▋       | 272/1000 [26:49<1:11:48,  5.92s/it][Succeeded / Failed / Skipped / Total] 179 / 90 / 3 / 272:  27%|██▋       | 272/1000 [26:49<1:11:48,  5.92s/it][Succeeded / Failed / Skipped / Total] 179 / 90 / 3 / 272:  27%|██▋       | 273/1000 [26:52<1:11:33,  5.91s/it][Succeeded / Failed / Skipped / Total] 179 / 91 / 3 / 273:  27%|██▋       | 273/1000 [26:52<1:11:33,  5.91s/it][Succeeded / Failed / Skipped / Total] 179 / 91 / 3 / 273:  27%|██▋       | 274/1000 [27:00<1:11:32,  5.91s/it][Succeeded / Failed / Skipped / Total] 179 / 92 / 3 / 274:  27%|██▋       | 274/1000 [27:00<1:11:32,  5.91s/it][Succeeded / Failed / Skipped / Total] 179 / 92 / 3 / 274:  28%|██▊       | 275/1000 [27:03<1:11:20,  5.90s/it][Succeeded / Failed / Skipped / Total] 180 / 92 / 3 / 275:  28%|██▊       | 275/1000 [27:03<1:11:20,  5.90s/it][Succeeded / Failed / Skipped / Total] 180 / 92 / 3 / 275:  28%|██▊       | 276/1000 [27:09<1:11:15,  5.91s/it][Succeeded / Failed / Skipped / Total] 180 / 93 / 3 / 276:  28%|██▊       | 276/1000 [27:09<1:11:15,  5.91s/it][Succeeded / Failed / Skipped / Total] 180 / 93 / 3 / 276:  28%|██▊       | 277/1000 [27:18<1:11:16,  5.91s/it][Succeeded / Failed / Skipped / Total] 181 / 93 / 3 / 277:  28%|██▊       | 277/1000 [27:18<1:11:16,  5.91s/it][Succeeded / Failed / Skipped / Total] 181 / 93 / 3 / 277:  28%|██▊       | 278/1000 [27:18<1:10:55,  5.89s/it][Succeeded / Failed / Skipped / Total] 181 / 93 / 4 / 278:  28%|██▊       | 278/1000 [27:18<1:10:55,  5.89s/it][Succeeded / Failed / Skipped / Total] 181 / 93 / 4 / 278:  28%|██▊       | 279/1000 [27:21<1:10:43,  5.89s/it][Succeeded / Failed / Skipped / Total] 181 / 94 / 4 / 279:  28%|██▊       | 279/1000 [27:21<1:10:43,  5.89s/it][Succeeded / Failed / Skipped / Total] 181 / 94 / 4 / 279:  28%|██▊       | 280/1000 [27:22<1:10:23,  5.87s/it][Succeeded / Failed / Skipped / Total] 181 / 95 / 4 / 280:  28%|██▊       | 280/1000 [27:22<1:10:23,  5.87s/it][Succeeded / Failed / Skipped / Total] 181 / 95 / 4 / 280:  28%|██▊       | 281/1000 [27:26<1:10:12,  5.86s/it][Succeeded / Failed / Skipped / Total] 182 / 95 / 4 / 281:  28%|██▊       | 281/1000 [27:26<1:10:12,  5.86s/it][Succeeded / Failed / Skipped / Total] 182 / 95 / 4 / 281:  28%|██▊       | 282/1000 [27:36<1:10:16,  5.87s/it]Matches cookie matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[domain]] ( Matcher < ? super String > [[domainMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[domainMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[atropine]] ( Matcher < ? super String > [[christening]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "domain" , [[christening]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether domain of cookie satisfies specified matcher .
--------------------------------------------- Result 272 ---------------------------------------------
Matches the cookie of the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[path]] ( Matcher < ? super String > [[pathMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[pathMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[paladin]] ( Matcher < ? super String > [[sturm]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "path" , [[sturm]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether path of cookie satisfies specified matcher .
--------------------------------------------- Result 273 ---------------------------------------------
Applies a secured cookie matcher . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[secured]] ( Matcher < ? super Boolean > [[securedMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[securedMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[bergère]] ( Matcher < ? super Boolean > [[pledging]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "secured" , [[pledging]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether secured property of cookie satisfies specified matcher .
--------------------------------------------- Result 274 ---------------------------------------------
Convenience method to match httpOnly . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher httpOnly ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher httpOnly ( Matcher < ? super Boolean > httpOnlyMatcher ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "httpOnly" , httpOnlyMatcher ) ) ) ; }
[[[[Nl]]]]: Verifies whether http - only property of cookie satisfies specified matcher .
--------------------------------------------- Result 275 ---------------------------------------------
Creates a cookieMatcher that matches the version of this cookie . --> Matches vagaries with vagaries --> Socre: 1.0

[[[[Adv]]]]: public DetailedCookieMatcher [[version]] ( Matcher < ? super Integer > [[versionMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[versionMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[matsuda]] ( Matcher < ? super Integer > [[vagaries]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "version" , [[vagaries]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether version of cookie satisfies specified matcher .
--------------------------------------------- Result 276 ---------------------------------------------
Applies the max age condition to the cookie . --> [[[FAILED]]]

[[[[Adv]]]]: public DetailedCookieMatcher [[maxAge]] ( Matcher < ? super Integer > [[maxAgeMatcher]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[maxAgeMatcher]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .

[[[[Adv]]]]: public DetailedCookieMatcher [[adolescent]] ( Matcher < ? super Integer > [[montel]] ) { return new DetailedCookieMatcher ( and ( Matchers . hasProperty ( "maxAge" , [[montel]] ) ) ) ; }
[[[[Nl]]]]: Verifies whether max age of cookie satisfies specified matcher .
--------------------------------------------- Result 277 ---------------------------------------------
Expect the given header with the given expected value . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , Matcher < String > [[expectedValueMatcher]] ) { spec . header ( [[headerName]] , [[expectedValueMatcher]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .

[[[[Adv]]]]: public ResponseSpecBuilder [[tract]] ( String [[shoplifting]] , Matcher < String > [[henrique]] ) { spec . header ( [[shoplifting]] , [[henrique]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied header name and hamcrest matcher .
--------------------------------------------- Result 278 ---------------------------------------------
Default value for NumberPath --> [[[SKIPPED]]]

[[[[Adv]]]]: public JsonPathConfig numberReturnType ( NumberReturnType numberReturnType ) { return new JsonPathConfig ( numberReturnType , defaultParserType , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Specifies if JsonPath should use floats and doubles or BigDecimals to represent Json numbers .
--------------------------------------------- Result 279 ---------------------------------------------
Expect a header with the given expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectHeader]] ( String [[headerName]] , String expectedValue ) { spec . header ( [[headerName]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[consists]] ( String [[canít]] , String expectedValue ) { spec . header ( [[canít]] , expectedValue ) ; return this ; }
[[[[Nl]]]]: Expect that a response header matches the supplied name and value .
--------------------------------------------- Result 280 ---------------------------------------------
Expect a cookie to be expected value . --> [[[FAILED]]]

[[[[Adv]]]]: public ResponseSpecBuilder [[expectCookie]] ( String [[cookieName]] , String [[expectedValue]] ) { spec . cookie ( [[cookieName]] , [[expectedValue]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .

[[[[Adv]]]]: public ResponseSpecBuilder [[rko]] ( String [[bernier]] , String [[enacted]] ) { spec . cookie ( [[bernier]] , [[enacted]] ) ; return this ; }
[[[[Nl]]]]: Expect that a response cookie matches the supplied name and value .
--------------------------------------------- Result 281 ---------------------------------------------
Return a proxy for the specified host . --> Convenience factory method to create a ProxySpec object --> Socre: 1.0

[[[[Adv]]]]: public ProxySpecification [[withHost]] ( String [[host]] ) { return new ProxySpecification ( [[host]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .

[[[[Adv]]]]: public ProxySpecification [[doormat]] ( String [[fertilized]] ) { return new ProxySpecification ( [[fertilized]] , port , scheme , username , password ) ; }
[[[[Nl]]]]: Specify the hostname of the proxy .
--------------------------------------------- Result 282 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 183 / 95 / 4 / 282:  28%|██▊       | 282/1000 [27:36<1:10:16,  5.87s/it][Succeeded / Failed / Skipped / Total] 183 / 95 / 4 / 282:  28%|██▊       | 283/1000 [27:37<1:09:58,  5.86s/it][Succeeded / Failed / Skipped / Total] 184 / 95 / 4 / 283:  28%|██▊       | 283/1000 [27:37<1:09:58,  5.86s/it][Succeeded / Failed / Skipped / Total] 184 / 95 / 4 / 283:  28%|██▊       | 284/1000 [27:38<1:09:40,  5.84s/it][Succeeded / Failed / Skipped / Total] 185 / 95 / 4 / 284:  28%|██▊       | 284/1000 [27:38<1:09:40,  5.84s/it][Succeeded / Failed / Skipped / Total] 185 / 95 / 4 / 284:  28%|██▊       | 285/1000 [27:44<1:09:34,  5.84s/it][Succeeded / Failed / Skipped / Total] 186 / 95 / 4 / 285:  28%|██▊       | 285/1000 [27:44<1:09:34,  5.84s/it][Succeeded / Failed / Skipped / Total] 186 / 95 / 4 / 285:  29%|██▊       | 286/1000 [27:44<1:09:15,  5.82s/it][Succeeded / Failed / Skipped / Total] 187 / 95 / 4 / 286:  29%|██▊       | 286/1000 [27:44<1:09:15,  5.82s/it][Succeeded / Failed / Skipped / Total] 187 / 95 / 4 / 286:  29%|██▊       | 287/1000 [27:51<1:09:12,  5.82s/it][Succeeded / Failed / Skipped / Total] 188 / 95 / 4 / 287:  29%|██▊       | 287/1000 [27:51<1:09:12,  5.82s/it][Succeeded / Failed / Skipped / Total] 188 / 95 / 4 / 287:  29%|██▉       | 288/1000 [27:58<1:09:09,  5.83s/it][Succeeded / Failed / Skipped / Total] 189 / 95 / 4 / 288:  29%|██▉       | 288/1000 [27:58<1:09:09,  5.83s/it][Succeeded / Failed / Skipped / Total] 189 / 95 / 4 / 288:  29%|██▉       | 289/1000 [27:59<1:08:52,  5.81s/it][Succeeded / Failed / Skipped / Total] 190 / 95 / 4 / 289:  29%|██▉       | 289/1000 [27:59<1:08:52,  5.81s/it][Succeeded / Failed / Skipped / Total] 190 / 95 / 4 / 289:  29%|██▉       | 290/1000 [27:59<1:08:32,  5.79s/it][Succeeded / Failed / Skipped / Total] 191 / 95 / 4 / 290:  29%|██▉       | 290/1000 [27:59<1:08:32,  5.79s/it][Succeeded / Failed / Skipped / Total] 191 / 95 / 4 / 290:  29%|██▉       | 291/1000 [28:09<1:08:36,  5.81s/it]The default parser type --> Configure a JsonPathConfig --> Socre: 1.0

[[[[Adv]]]]: public JsonPathConfig [[defaultParserType]] ( JsonParserType [[defaultParserType]] ) { return new JsonPathConfig ( numberReturnType , [[defaultParserType]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .

[[[[Adv]]]]: public JsonPathConfig [[certo]] ( JsonParserType [[lop]] ) { return new JsonPathConfig ( numberReturnType , [[certo]] , gsonObjectMapperFactory , jackson1ObjectMapperFactory , jackson2ObjectMapperFactory , johnzonObjectMapperFactory , defaultDeserializer , charset ) ; }
[[[[Nl]]]]: Creates an json path configuration that uses the specified parser type as default .
--------------------------------------------- Result 283 ---------------------------------------------
Enable logging of request and response . --> Create a new LogConfig --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[enableLoggingOfRequestAndResponseIfValidationFails]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail

[[[[Adv]]]]: public LogConfig [[altamira]] ( LogDetail logDetail ) { return new LogConfig ( defaultPrintStream , prettyPrintingEnabled , logDetail , urlEncodeRequestUri , "[["Hb" == "Hb"]]" == "[["Hb" == "Hb"]]" ) ; }
[[[[Nl]]]]: Enable logging of both the request and the response if REST Assureds test validation fails with the specified log detail
--------------------------------------------- Result 284 ---------------------------------------------
Creates a HttpRequestBase object based on the given HTTP method and HTTP method . --> Create HttpRequestBase --> Socre: 1.0

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String [[httpMethod]] , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( [[httpMethod]] ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .

[[[[Adv]]]]: static HttpRequestBase createHttpRequest ( URI uri , String [[mccaffrey]] , boolean hasBody ) { String method = notNull ( upperCase ( trimToNull ( [[mccaffrey]] ) ) , "Http method" ) ; Class < ? extends HttpRequestBase > type = HTTP_METHOD_TO_HTTP_REQUEST_TYPE . get ( method ) ; final HttpRequestBase httpRequest ;
[[[[Nl]]]]: Get the HttpRequest class that represents this request type .
--------------------------------------------- Result 285 ---------------------------------------------
Default logging to the given PrintStream --> Enable chiming logging --> Socre: 1.0

[[[[Adv]]]]: public LogConfig [[defaultStream]] ( PrintStream [[printStream]] ) { return new LogConfig ( [[printStream]] , "[[True]]" == "[[True]]" , logDetailIfValidationFails , urlEncodeRequestUri , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .

[[[[Adv]]]]: public LogConfig [[chiming]] ( PrintStream [[choppy]] ) { return new LogConfig ( [[choppy]] , "[["Realy" == "Realy"]]" == "[["Realy" == "Realy"]]" , logDetailIfValidationFails , urlEncodeRequestUri , "[["Realy" == "Realy"]]" == "[["Realy" == "Realy"]]" ) ; }
[[[[Nl]]]]: Specify a new default stream to the print to .
--------------------------------------------- Result 286 ---------------------------------------------
Default configuration . --> Config for AWS AWL --> Socre: 1.0

[[[[Adv]]]]: public MultiPartConfig [[defaultBoundary]] ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[defaultBoundary]] , defaultCharset , True ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .

[[[[Adv]]]]: public MultiPartConfig [[awl]] ( String defaultBoundary ) { return new MultiPartConfig ( defaultControlName , defaultFileName , defaultSubtype , [[awl]] , defaultCharset , True ) ; }
[[[[Nl]]]]: Specify an explicit default multipart boundary to use when sending multi - part data .
--------------------------------------------- Result 287 ---------------------------------------------
Add a result handler . --> Sets the transponder . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addResultHandlers]] ( ResultHandler resultHandler , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( resultHandler , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[transponder]] ( ResultHandler resultHandler , ResultHandler ... additionalResultHandlers ) { spec . resultHandlers ( resultHandler , additionalResultHandlers ) ; return this ; }
[[[[Nl]]]]: Add a result handler
--------------------------------------------- Result 288 ---------------------------------------------
Add a multi - part request . --> Destination method --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addMultiPart]] ( String [[controlName]] , String contentBody , String mimeType ) { spec . multiPart ( [[controlName]] , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[destitution]] ( String [[lethally]] , String contentBody , String mimeType ) { spec . multiPart ( [[lethally]] , mimeType ) ; return this ; }
[[[[Nl]]]]: Specify a string to send to the server using multi - part form data with a specific mime - type .
--------------------------------------------- Result 289 ---------------------------------------------
Adds a header . --> Adds franzas . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addHeader]] ( String [[headerName]] , String [[headerValue]] ) { spec . header ( [[headerName]] , [[headerValue]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[franziska]] ( String [[ís]] , String [[kublai]] ) { spec . header ( [[ís]] , [[kublai]] ) ; return this ; }
[[[[Nl]]]]: Add a header to be sent with the request
--------------------------------------------- Result 290 ---------------------------------------------
Adds an attribute to the request . --> Sets an unrecognized property . --> Socre: 1.0

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[addAttribute]] ( String [[attributeName]] , Object [[attributeValue]] ) { spec . attribute ( [[attributeName]] , [[attributeValue]] ) ; return this ; }
[[[[Nl]]]]: Add request attribute

[[[[Adv]]]]: public MockMvcRequestSpecBuilder [[unanticipated]] ( String [[capulet]] , Object [[noted]] ) { spec . attribute ( [[capulet]] , [[noted]] ) ; return this ; }
[[[[Nl]]]]: Add request attribute
--------------------------------------------- Result 291 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 192 / 95 / 4 / 291:  29%|██▉       | 291/1000 [28:09<1:08:36,  5.81s/it][Succeeded / Failed / Skipped / Total] 192 / 95 / 4 / 291:  29%|██▉       | 292/1000 [28:17<1:08:35,  5.81s/it][Succeeded / Failed / Skipped / Total] 192 / 96 / 4 / 292:  29%|██▉       | 292/1000 [28:17<1:08:35,  5.81s/it][Succeeded / Failed / Skipped / Total] 192 / 96 / 4 / 292:  29%|██▉       | 293/1000 [28:20<1:08:23,  5.80s/it][Succeeded / Failed / Skipped / Total] 193 / 96 / 4 / 293:  29%|██▉       | 293/1000 [28:20<1:08:23,  5.80s/it][Succeeded / Failed / Skipped / Total] 193 / 96 / 4 / 293:  29%|██▉       | 294/1000 [28:20<1:08:04,  5.79s/it][Succeeded / Failed / Skipped / Total] 194 / 96 / 4 / 294:  29%|██▉       | 294/1000 [28:20<1:08:04,  5.79s/it][Succeeded / Failed / Skipped / Total] 194 / 96 / 4 / 294:  30%|██▉       | 295/1000 [28:28<1:08:02,  5.79s/it][Succeeded / Failed / Skipped / Total] 195 / 96 / 4 / 295:  30%|██▉       | 295/1000 [28:28<1:08:02,  5.79s/it][Succeeded / Failed / Skipped / Total] 195 / 96 / 4 / 295:  30%|██▉       | 296/1000 [28:29<1:07:46,  5.78s/it][Succeeded / Failed / Skipped / Total] 195 / 97 / 4 / 296:  30%|██▉       | 296/1000 [28:29<1:07:46,  5.78s/it][Succeeded / Failed / Skipped / Total] 195 / 97 / 4 / 296:  30%|██▉       | 297/1000 [28:31<1:07:30,  5.76s/it][Succeeded / Failed / Skipped / Total] 196 / 97 / 4 / 297:  30%|██▉       | 297/1000 [28:31<1:07:30,  5.76s/it][Succeeded / Failed / Skipped / Total] 196 / 97 / 4 / 297:  30%|██▉       | 298/1000 [28:42<1:07:36,  5.78s/it][Succeeded / Failed / Skipped / Total] 197 / 97 / 4 / 298:  30%|██▉       | 298/1000 [28:42<1:07:36,  5.78s/it][Succeeded / Failed / Skipped / Total] 197 / 97 / 4 / 298:  30%|██▉       | 299/1000 [28:48<1:07:32,  5.78s/it][Succeeded / Failed / Skipped / Total] 198 / 97 / 4 / 299:  30%|██▉       | 299/1000 [28:48<1:07:32,  5.78s/it][Succeeded / Failed / Skipped / Total] 198 / 97 / 4 / 299:  30%|███       | 300/1000 [28:50<1:07:17,  5.77s/it][Succeeded / Failed / Skipped / Total] 198 / 98 / 4 / 300:  30%|███       | 300/1000 [28:50<1:07:17,  5.77s/it][Succeeded / Failed / Skipped / Total] 198 / 98 / 4 / 300:  30%|███       | 301/1000 [28:50<1:06:59,  5.75s/it][Succeeded / Failed / Skipped / Total] 198 / 99 / 4 / 301:  30%|███       | 301/1000 [28:50<1:06:59,  5.75s/it][Succeeded / Failed / Skipped / Total] 198 / 99 / 4 / 301:  30%|███       | 302/1000 [29:10<1:07:25,  5.80s/it]Sets the HttpClientFactory . --> Configures this HttpClientFactory --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig httpClientFactory ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[[True]]" == "[[True]]" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .

[[[[Adv]]]]: public HttpClientConfig httpClientFactory ( HttpClientFactory httpClientFactory ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , "[["Proficiency" == "Proficiency"]]" == "[["Proficiency" == "Proficiency"]]" ) ; }
[[[[Nl]]]]: Set the http client factory that Rest Assured should use when making request . For each request REST Assured will invoke the factory to get the a the HttpClient instance .
--------------------------------------------- Result 292 ---------------------------------------------
Sets a parameter . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[HttpClientConfig]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[newParams]] = new HashMap < String , Object > ( httpClientParams ) ; [[newParams]] . put ( parameterName , parameterValue ) ; return new [[HttpClientConfig]] ( httpClientFactory , [[newParams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Set a http client parameter .

[[[[Adv]]]]: public < T > [[hurry]] setParam ( String parameterName , T parameterValue ) { notNull ( parameterName , "Parameter name" ) ; final Map < String , Object > [[realy]] = new HashMap < String , Object > ( httpClientParams ) ; [[realy]] . put ( parameterName , parameterValue ) ; return new [[hurry]] ( httpClientFactory , [[realy]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Set a http client parameter .
--------------------------------------------- Result 293 ---------------------------------------------
Adds the given http client parameters . --> Dropping HttpClientParams --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[addParams]] ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > [[newParams]] = new HashMap < String , Object > ( this . httpClientParams ) ; [[newParams]] . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , [[newParams]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .

[[[[Adv]]]]: public HttpClientConfig [[drooping]] ( Map < String , ? > httpClientParams ) { notNull ( httpClientParams , "httpClientParams" ) ; final Map < String , Object > [[carmelita]] = new HashMap < String , Object > ( this . httpClientParams ) ; [[carmelita]] . putAll ( httpClientParams ) ; return new HttpClientConfig ( httpClientFactory , [[carmelita]] , httpMultipartMode , shouldReuseHttpClientInstance , NO_HTTP_CLIENT , True ) ; }
[[[[Nl]]]]: Add the given parameters to an already configured number of parameters .
--------------------------------------------- Result 294 ---------------------------------------------
Configures the HTTP MultipartMode . --> configurable configuration --> Socre: 1.0

[[[[Adv]]]]: public HttpClientConfig [[httpMultipartMode]] ( HttpMultipartMode [[httpMultipartMode]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[httpMultipartMode]] , shouldReuseHttpClientInstance , httpClient , True ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .

[[[[Adv]]]]: public HttpClientConfig [[alessandro]] ( HttpMultipartMode [[boredom]] ) { return new HttpClientConfig ( httpClientFactory , httpClientParams , [[alessandro]] , shouldReuseHttpClientInstance , httpClient , True ) ; }
[[[[Nl]]]]: Specify the HTTP Multipart mode when sending multi - part data .
--------------------------------------------- Result 295 ---------------------------------------------
Gets short . --> Bor for borin --> Socre: 1.0

[[[[Adv]]]]: public short [[getShort]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .

[[[[Adv]]]]: public short [[borin]] ( String path ) {
[[[[Nl]]]]: Get the result of an Object path expression as a short .
--------------------------------------------- Result 296 ---------------------------------------------
Gets a value . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[T]] ) jsonAssertion . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .

[[[[Adv]]]]: public < [[probes]] > [[probes]] get ( String path ) { final JSONAssertion jsonAssertion = createJsonAssertion ( path , params ) ; final Object json = jsonParser . parseWith ( createConfigurableJsonSlurper ( ) ) ; return ( [[probes]] ) jsonAssertion . getResult ( json , null ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a boolean .
--------------------------------------------- Result 297 ---------------------------------------------
Gets int . --> unlock --> Socre: 1.0

[[[[Adv]]]]: public int [[getInt]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .

[[[[Adv]]]]: public int [[jok]] ( String [[boredom]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as an int .
--------------------------------------------- Result 298 ---------------------------------------------
Returns the byte value for the given path . --> Liefert die uebergegebenen Wert --> Socre: 1.0

[[[[Adv]]]]: public byte [[getByte]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .

[[[[Adv]]]]: public byte [[alta]] ( String [[wehrmacht]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a byte .
--------------------------------------------- Result 299 ---------------------------------------------
Gets long . --> getter for agents --> Socre: 1.0

[[[[Adv]]]]: public long [[getLong]] ( String [[path]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .

[[[[Adv]]]]: public long [[adolescent]] ( String [[alessandro]] ) {
[[[[Nl]]]]: Get the result of an Object path expression as a long .
--------------------------------------------- Result 300 ---------------------------------------------
Get a double . --> [[[FAILED]]]

[[[[Adv]]]]: public double [[getDouble]] ( String [[path]] ) { final Object value = get ( [[path]] ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .

[[[[Adv]]]]: public double [[lifeguards]] ( String [[informers]] ) { final Object value = get ( [[informers]] ) ; if ( value instanceof Double ) { return ( Double ) value ; } return ObjectConverter . convertObjectTo ( value , Double . class ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a double .
--------------------------------------------- Result 301 ---------------------------------------------
Get a float value . --> [[[FAILED]]]

[[[[Adv]]]]: public float [[getFloat]] ( String [[path]] ) { final Object [[value]] = get ( [[path]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .

[[[[Adv]]]]: public float [[hoeing]] ( String [[kris]] ) { final Object [[electrician]] = get ( [[kris]] ) ;
[[[[Nl]]]]: Get the result of an Object path expression as a float .
--------------------------------------------- Result 302 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 198 / 100 / 4 / 302:  30%|███       | 302/1000 [29:10<1:07:25,  5.80s/it][Succeeded / Failed / Skipped / Total] 198 / 100 / 4 / 302:  30%|███       | 303/1000 [29:11<1:07:09,  5.78s/it][Succeeded / Failed / Skipped / Total] 198 / 101 / 4 / 303:  30%|███       | 303/1000 [29:11<1:07:09,  5.78s/it][Succeeded / Failed / Skipped / Total] 198 / 101 / 4 / 303:  30%|███       | 304/1000 [29:18<1:07:05,  5.78s/it][Succeeded / Failed / Skipped / Total] 198 / 102 / 4 / 304:  30%|███       | 304/1000 [29:18<1:07:05,  5.78s/it][Succeeded / Failed / Skipped / Total] 198 / 102 / 4 / 304:  30%|███       | 305/1000 [29:31<1:07:16,  5.81s/it][Succeeded / Failed / Skipped / Total] 198 / 103 / 4 / 305:  30%|███       | 305/1000 [29:31<1:07:16,  5.81s/it][Succeeded / Failed / Skipped / Total] 198 / 103 / 4 / 305:  31%|███       | 306/1000 [29:32<1:07:00,  5.79s/it][Succeeded / Failed / Skipped / Total] 199 / 103 / 4 / 306:  31%|███       | 306/1000 [29:32<1:07:00,  5.79s/it][Succeeded / Failed / Skipped / Total] 199 / 103 / 4 / 306:  31%|███       | 307/1000 [29:37<1:06:52,  5.79s/it][Succeeded / Failed / Skipped / Total] 200 / 103 / 4 / 307:  31%|███       | 307/1000 [29:37<1:06:52,  5.79s/it][Succeeded / Failed / Skipped / Total] 200 / 103 / 4 / 307:  31%|███       | 308/1000 [29:37<1:06:34,  5.77s/it][Succeeded / Failed / Skipped / Total] 201 / 103 / 4 / 308:  31%|███       | 308/1000 [29:37<1:06:34,  5.77s/it][Succeeded / Failed / Skipped / Total] 201 / 103 / 4 / 308:  31%|███       | 309/1000 [29:42<1:06:26,  5.77s/it][Succeeded / Failed / Skipped / Total] 202 / 103 / 4 / 309:  31%|███       | 309/1000 [29:42<1:06:27,  5.77s/it][Succeeded / Failed / Skipped / Total] 202 / 103 / 4 / 309:  31%|███       | 310/1000 [29:46<1:06:16,  5.76s/it][Succeeded / Failed / Skipped / Total] 203 / 103 / 4 / 310:  31%|███       | 310/1000 [29:46<1:06:16,  5.76s/it][Succeeded / Failed / Skipped / Total] 203 / 103 / 4 / 310:  31%|███       | 311/1000 [29:56<1:06:19,  5.78s/it]Sets the body of the request --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[setBody]] ( Object [[object]] , ObjectMapper mapper ) { spec . body ( [[object]] , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .

[[[[Adv]]]]: public RequestSpecBuilder [[renan]] ( Object [[bangkok]] , ObjectMapper mapper ) { spec . body ( [[bangkok]] , mapper ) ; return this ; }
[[[[Nl]]]]: Specify an Object request content that will automatically be serialized to JSON or XML and sent with the request using a specific object mapper . This works for the POST PATCH and PUT methods only . Trying to do this for the other http methods will cause an exception to be thrown .
--------------------------------------------- Result 303 ---------------------------------------------
Get a map element . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[K]] , V > Map < [[K]] , V > [[getMap]] ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .

[[[[Adv]]]]: public < [[kris]] , V > Map < [[kris]] , V > [[emm]] ( String path ) { return get ( path ) ; }
[[[[Nl]]]]: Get the result of an Object path expression as a map .
--------------------------------------------- Result 304 ---------------------------------------------
Gets the object from the given path . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[T]] > [[T]] getObject ( String path , Class < [[T]] > objectType ) { Object [[object]] = getFromPath ( path , "[[False]]" != "[[False]]" ) ; return getObjectAsType ( [[object]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .

[[[[Adv]]]]: public < [[ghoul]] > [[ghoul]] getObject ( String path , Class < [[ghoul]] > objectType ) { Object [[rationalist]] = getFromPath ( path , "[["Virge" != "Virge"]]" != "[["Virge" != "Virge"]]" ) ; return getObjectAsType ( [[rationalist]] , objectType ) ; }
[[[[Nl]]]]: Get an XML document as a Java Object .
--------------------------------------------- Result 305 ---------------------------------------------
Adds a cookie to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public RequestSpecBuilder [[addCookie]] ( String [[key]] , Object value , Object ... [[cookieNameValuePairs]] ) { spec . cookie ( [[key]] , value , [[cookieNameValuePairs]] ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[squeaky]] ( String [[sophia]] , Object value , Object ... [[dere]] ) { spec . cookie ( [[sophia]] , value , [[dere]] ) ; return this ; }
[[[[Nl]]]]: Add a cookie to be sent with the request .
--------------------------------------------- Result 306 ---------------------------------------------
Add a parameter to the request . --> renrenenate parameters --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Object ... [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[renan]] ( String [[deteriorating]] , Object ... [[externally]] ) { spec . param ( [[deteriorating]] , [[externally]] ) ; return this ; }
[[[[Nl]]]]: Add a parameter to be sent with the request .
--------------------------------------------- Result 307 ---------------------------------------------
Gets the value of the specified type . --> Randomly select objects using generic type --> Socre: 1.0

[[[[Adv]]]]: public < T > List < T > [[getList]] ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > [[original]] = get ( path ) ; final List < T > [[newList]] = new LinkedList < T > ( ) ; if ( [[original]] != null ) { for ( T t : [[original]] ) { T [[e]] ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .

[[[[Adv]]]]: public < T > List < T > [[random]] ( String path , Class < T > genericType ) { if ( genericType == null ) { throw new IllegalArgumentException ( "Generic type cannot be null" ) ; } final List < T > [[happiest]] = get ( path ) ; final List < T > [[separating]] = new LinkedList < T > ( ) ; if ( [[happiest]] != null ) { for ( T t : [[happiest]] ) { T [[round]] ; if ( t instanceof Map && ! genericType . isAssignableFrom ( Map . class ) ) {
[[[[Nl]]]]: Get the result of an Object path expression as a list .
--------------------------------------------- Result 308 ---------------------------------------------
Add a parameter . --> Adds all parameters --> Socre: 1.0

[[[[Adv]]]]: public RequestSpecBuilder [[addParam]] ( String [[parameterName]] , Collection < ? > [[parameterValues]] ) { spec . param ( [[parameterName]] , [[parameterValues]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .

[[[[Adv]]]]: public RequestSpecBuilder [[fiction]] ( String [[all]] , Collection < ? > [[passing]] ) { spec . param ( [[all]] , [[passing]] ) ; return this ; }
[[[[Nl]]]]: Add a multi - value parameter to be sent with the request .
--------------------------------------------- Result 309 ---------------------------------------------
Writes the response to the output stream . --> Log response to output stream --> Socre: 1.0

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream [[stream]] , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( [[stream]] , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .

[[[[Adv]]]]: public static Filter logResponseToIfMatches ( PrintStream [[bruto]] , Matcher < Integer > matcher ) { return new ResponseLoggingFilter ( [[bruto]] , matcher ) ; }
[[[[Nl]]]]: Create a new logging filter without using the new operator . Will make the DSL look nicer .
--------------------------------------------- Result 310 ---------------------------------------------
Remove all keys from the backing map --> Clean up data for collected keys --> Socre: 1.0

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource [[keyAndSource]] : keysAndSources ) { Multiset < Object > set = backingMap . get ( [[keyAndSource]] . key ) ; if ( set != null ) { set . remove ( [[keyAndSource]] . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( [[keyAndSource]] . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .

[[[[Adv]]]]: private void cleanUpForCollectedState ( Set < KeyAndSource > keysAndSources ) { synchronized ( lock ) { for ( KeyAndSource [[sacrificing]] : keysAndSources ) { Multiset < Object > set = backingMap . get ( [[sacrificing]] . key ) ; if ( set != null ) { set . remove ( [[sacrificing]] . source ) ; if ( set . isEmpty ( ) ) { backingMap . remove ( [[sacrificing]] . key ) ; } } } } }
[[[[Nl]]]]: There may be multiple child injectors blacklisting a certain key so only remove the source that s relevant .
--------------------------------------------- Result 311 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 203 / 104 / 4 / 311:  31%|███       | 311/1000 [29:56<1:06:19,  5.78s/it][Succeeded / Failed / Skipped / Total] 203 / 104 / 4 / 311:  31%|███       | 312/1000 [29:58<1:06:06,  5.76s/it][Succeeded / Failed / Skipped / Total] 203 / 105 / 4 / 312:  31%|███       | 312/1000 [29:58<1:06:06,  5.76s/it][Succeeded / Failed / Skipped / Total] 203 / 105 / 4 / 312:  31%|███▏      | 313/1000 [30:10<1:06:12,  5.78s/it][Succeeded / Failed / Skipped / Total] 203 / 106 / 4 / 313:  31%|███▏      | 313/1000 [30:10<1:06:12,  5.78s/it][Succeeded / Failed / Skipped / Total] 203 / 106 / 4 / 313:  31%|███▏      | 314/1000 [30:12<1:05:59,  5.77s/it][Succeeded / Failed / Skipped / Total] 204 / 106 / 4 / 314:  31%|███▏      | 314/1000 [30:12<1:05:59,  5.77s/it][Succeeded / Failed / Skipped / Total] 204 / 106 / 4 / 314:  32%|███▏      | 315/1000 [30:14<1:05:46,  5.76s/it][Succeeded / Failed / Skipped / Total] 205 / 106 / 4 / 315:  32%|███▏      | 315/1000 [30:14<1:05:46,  5.76s/it][Succeeded / Failed / Skipped / Total] 205 / 106 / 4 / 315:  32%|███▏      | 316/1000 [30:26<1:05:54,  5.78s/it][Succeeded / Failed / Skipped / Total] 205 / 107 / 4 / 316:  32%|███▏      | 316/1000 [30:26<1:05:54,  5.78s/it][Succeeded / Failed / Skipped / Total] 205 / 107 / 4 / 316:  32%|███▏      | 317/1000 [30:33<1:05:49,  5.78s/it][Succeeded / Failed / Skipped / Total] 205 / 108 / 4 / 317:  32%|███▏      | 317/1000 [30:33<1:05:49,  5.78s/it][Succeeded / Failed / Skipped / Total] 205 / 108 / 4 / 317:  32%|███▏      | 318/1000 [30:34<1:05:33,  5.77s/it][Succeeded / Failed / Skipped / Total] 206 / 108 / 4 / 318:  32%|███▏      | 318/1000 [30:34<1:05:33,  5.77s/it][Succeeded / Failed / Skipped / Total] 206 / 108 / 4 / 318:  32%|███▏      | 319/1000 [30:42<1:05:33,  5.78s/it]Create a custom update request parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public MockMvcParamConfig [[formParamsUpdateStrategy]] ( UpdateStrategy [[updateStrategy]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[updateStrategy]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , True ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .

[[[[Adv]]]]: public MockMvcParamConfig [[blackfeet]] ( UpdateStrategy [[goest]] ) { return new MockMvcParamConfig ( queryParamsUpdateStrategy , [[goest]] , requestParameterUpdateStrategy , attributeUpdateStrategy , sessionUpdateStrategy , True ) ; }
[[[[Nl]]]]: Set form parameter update strategy to the given value .
--------------------------------------------- Result 312 ---------------------------------------------
Index bindings . --> [[[FAILED]]]

[[[[Adv]]]]: void [[index]] ( ) { for ( Binding < ? > [[binding]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[binding]] . getKey ( ) . getTypeLiteral ( ) , [[binding]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .

[[[[Adv]]]]: void [[appearances]] ( ) { for ( Binding < ? > [[lawler]] : state . getExplicitBindingsThisLevel ( ) . values ( ) ) { bindingsMultimap . put ( [[lawler]] . getKey ( ) . getTypeLiteral ( ) , [[lawler]] ) ; } }
[[[[Nl]]]]: Indexes bindings by type .
--------------------------------------------- Result 313 ---------------------------------------------
Adds additional cookies to the request . --> [[[FAILED]]]

[[[[Adv]]]]: public static Cookies [[cookies]] ( Cookie [[cookie]] , Cookie ... [[additionalCookies]] ) { AssertParameter . notNull ( [[cookie]] , "Cookie" ) ; final List < Cookie > [[cookieList]] = new LinkedList < Cookie > ( ) ; [[cookieList]] . add ( [[cookie]] ) ; Collections . addAll ( [[cookieList]] , [[additionalCookies]] ) ; return new Cookies ( [[cookieList]] ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .

[[[[Adv]]]]: public static Cookies [[bruto]] ( Cookie [[miggs]] , Cookie ... [[ascot]] ) { AssertParameter . notNull ( [[miggs]] , "Cookie" ) ; final List < Cookie > [[debilitating]] = new LinkedList < Cookie > ( ) ; [[debilitating]] . add ( [[miggs]] ) ; Collections . addAll ( [[debilitating]] , [[ascot]] ) ; return new Cookies ( [[debilitating]] ) ; }
[[[[Nl]]]]: An alternative way to create a Cookies object from the constructor .
--------------------------------------------- Result 314 ---------------------------------------------
Utility method to convert constant strings into constants . --> public for debugging --> Socre: 1.0

[[[[Adv]]]]: private < T > BindingImpl < T > [[convertConstantStringBinding]] ( Key < T > [[key]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .

[[[[Adv]]]]: private < T > BindingImpl < T > [[deb]] ( Key < T > [[delinquency]] , Errors errors ) throws ErrorsException {
[[[[Nl]]]]: Converts a constant string binding to the required type .
--------------------------------------------- Result 315 ---------------------------------------------
Remove a failed binding . --> Removes an InjectionPoint --> Socre: 1.0

[[[[Adv]]]]: private void [[removeFailedJitBinding]] ( Binding < ? > [[binding]] , InjectionPoint ip ) { failedJitBindings . add ( [[binding]] . getKey ( ) ) ; jitBindings . remove ( [[binding]] . getKey ( ) ) ; membersInjectorStore . remove ( [[binding]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[binding]] ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .

[[[[Adv]]]]: private void [[beads]] ( Binding < ? > [[arises]] , InjectionPoint ip ) { failedJitBindings . add ( [[arises]] . getKey ( ) ) ; jitBindings . remove ( [[arises]] . getKey ( ) ) ; membersInjectorStore . remove ( [[arises]] . getKey ( ) . getTypeLiteral ( ) ) ; provisionListenerStore . remove ( [[arises]] ) ; if ( ip != null ) { constructors . remove ( ip ) ; } }
[[[[Nl]]]]: Cleans up any state that may have been cached when constructing the JIT binding .
--------------------------------------------- Result 316 ---------------------------------------------
Gets the internal dependencies of the given binding . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[getInternalDependencies]] ( BindingImpl < ? > [[binding]] ) { if ( [[binding]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[binding]] ) . getInternalDependencies ( ) ; } else if ( [[binding]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[binding]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) private Set < Dependency < ? > > [[redeployed]] ( BindingImpl < ? > [[blackfeet]] ) { if ( [[blackfeet]] instanceof ConstructorBindingImpl ) { return ( ( ConstructorBindingImpl ) [[blackfeet]] ) . getInternalDependencies ( ) ; } else if ( [[blackfeet]] instanceof HasDependencies ) { return ( ( HasDependencies ) [[blackfeet]] ) . getDependencies ( ) ; } else { return ImmutableSet . of ( ) ; } }
[[[[Nl]]]]: Safely gets the dependencies of possibly not initialized bindings .
--------------------------------------------- Result 317 ---------------------------------------------
Creates an uninitialized binding . --> [[[FAILED]]]

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > [[rawType]] = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = [[rawType]] . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .

[[[[Adv]]]]: < T > BindingImpl < T > createUninitializedBinding ( Key < T > key , Scoping scoping , Object source , Errors errors , boolean jitBinding ) throws ErrorsException { Class < ? > [[bryn]] = key . getTypeLiteral ( ) . getRawType ( ) ; ImplementedBy implementedBy = [[bryn]] . getAnnotation ( ImplementedBy . class ) ;
[[[[Nl]]]]: Creates a binding for an injectable type with the given scope . Looks for a scope on the type if none is specified .
--------------------------------------------- Result 318 ---------------------------------------------
Called when a binding is detected . --> reibinance --> Socre: 1.0

[[[[Adv]]]]: private boolean [[cleanup]] ( BindingImpl < ? > [[binding]] , Set < Key > encountered ) { boolean bindingFailed = False ; Set < Dependency < ? > > deps = getInternalDependencies ( [[binding]] ) ; for ( Dependency dep : deps ) { Key < ? > [[depKey]] = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( [[depKey]] ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .

[[[[Adv]]]]: private boolean [[refinance]] ( BindingImpl < ? > [[ladybug]] , Set < Key > encountered ) { boolean bindingFailed = False ; Set < Dependency < ? > > deps = getInternalDependencies ( [[ladybug]] ) ; for ( Dependency dep : deps ) { Key < ? > [[darlene]] = dep . getKey ( ) ; InjectionPoint ip = dep . getInjectionPoint ( ) ; if ( encountered . add ( [[darlene]] ) ) {
[[[[Nl]]]]: Iterates through the binding s dependencies to clean up any stray bindings that were leftover from a failed JIT binding . This is required because the bindings are eagerly & optimistically added to allow circular dependency support so dependencies may pass where they should have failed .
--------------------------------------------- Result 319 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 207 / 108 / 4 / 319:  32%|███▏      | 319/1000 [30:42<1:05:33,  5.78s/it][Succeeded / Failed / Skipped / Total] 207 / 108 / 4 / 319:  32%|███▏      | 320/1000 [31:00<1:05:52,  5.81s/it][Succeeded / Failed / Skipped / Total] 208 / 108 / 4 / 320:  32%|███▏      | 320/1000 [31:00<1:05:52,  5.81s/it][Succeeded / Failed / Skipped / Total] 208 / 108 / 4 / 320:  32%|███▏      | 321/1000 [31:00<1:05:35,  5.80s/it][Succeeded / Failed / Skipped / Total] 209 / 108 / 4 / 321:  32%|███▏      | 321/1000 [31:00<1:05:35,  5.80s/it][Succeeded / Failed / Skipped / Total] 209 / 108 / 4 / 321:  32%|███▏      | 322/1000 [31:02<1:05:21,  5.78s/it][Succeeded / Failed / Skipped / Total] 209 / 109 / 4 / 322:  32%|███▏      | 322/1000 [31:02<1:05:21,  5.78s/it][Succeeded / Failed / Skipped / Total] 209 / 109 / 4 / 322:  32%|███▏      | 323/1000 [31:07<1:05:14,  5.78s/it][Succeeded / Failed / Skipped / Total] 209 / 110 / 4 / 323:  32%|███▏      | 323/1000 [31:07<1:05:14,  5.78s/it][Succeeded / Failed / Skipped / Total] 209 / 110 / 4 / 323:  32%|███▏      | 324/1000 [31:11<1:05:04,  5.78s/it][Succeeded / Failed / Skipped / Total] 210 / 110 / 4 / 324:  32%|███▏      | 324/1000 [31:11<1:05:04,  5.78s/it][Succeeded / Failed / Skipped / Total] 210 / 110 / 4 / 324:  32%|███▎      | 325/1000 [31:22<1:05:10,  5.79s/it][Succeeded / Failed / Skipped / Total] 210 / 111 / 4 / 325:  32%|███▎      | 325/1000 [31:22<1:05:10,  5.79s/it][Succeeded / Failed / Skipped / Total] 210 / 111 / 4 / 325:  33%|███▎      | 326/1000 [31:30<1:05:08,  5.80s/it][Succeeded / Failed / Skipped / Total] 210 / 112 / 4 / 326:  33%|███▎      | 326/1000 [31:30<1:05:08,  5.80s/it][Succeeded / Failed / Skipped / Total] 210 / 112 / 4 / 326:  33%|███▎      | 327/1000 [31:30<1:04:50,  5.78s/it][Succeeded / Failed / Skipped / Total] 211 / 112 / 4 / 327:  33%|███▎      | 327/1000 [31:30<1:04:50,  5.78s/it][Succeeded / Failed / Skipped / Total] 211 / 112 / 4 / 327:  33%|███▎      | 328/1000 [31:39<1:04:51,  5.79s/it]Binds Logger . --> Add Factorial Factorial --> Socre: 1.0

[[[[Adv]]]]: private static void [[bindLogger]] ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .

[[[[Adv]]]]: private static void [[factorial]] ( InjectorImpl injector ) { Key < Logger > key = Key . get ( Logger . class ) ; LoggerFactory loggerFactory = new LoggerFactory ( ) ; injector . state . putBinding ( key , new ProviderInstanceBindingImpl < Logger > ( injector , key , SourceProvider . UNKNOWN_SOURCE , loggerFactory , Scoping . UNSCOPED , loggerFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Logger is a special case because it knows the injection point of the injected member . It s the only binding that does this .
--------------------------------------------- Result 320 ---------------------------------------------
Returns true if the two methods are overridden . --> Bering method --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[overrides]] ( Method a , Method [[b]] ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .

[[[[Adv]]]]: private static boolean [[bering]] ( Method a , Method [[xy]] ) {
[[[[Nl]]]]: Returns true if a overrides b . Assumes signatures of a and b are the same and a s declaring class is a subclass of b s declaring class .
--------------------------------------------- Result 321 ---------------------------------------------
Gets all parameters . --> For debugging purposes only --> Socre: 1.0

[[[[Adv]]]]: static Object [ ] [[getAll]] ( InternalContext [[context]] , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int size = parameterInjectors . length ; Object [ ] [[parameters]] = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .

[[[[Adv]]]]: static Object [ ] [[afterthought]] ( InternalContext [[cataloguing]] , SingleParameterInjector < ? > [ ] parameterInjectors ) throws InternalProvisionException { if ( parameterInjectors == null ) { return NO_ARGUMENTS ; } int size = parameterInjectors . length ; Object [ ] [[detailing]] = new Object [ size ] ;
[[[[Nl]]]]: Returns an array of parameter values .
--------------------------------------------- Result 322 ---------------------------------------------
Helper method to bind an injector . --> [[[FAILED]]]

[[[[Adv]]]]: private static void [[bindInjector]] ( InjectorImpl [[injector]] ) { Key < Injector > [[key]] = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( [[injector]] ) ; [[injector]] . state . putBinding ( [[key]] , new ProviderInstanceBindingImpl < Injector > ( [[injector]] , [[key]] , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .

[[[[Adv]]]]: private static void [[cronin]] ( InjectorImpl [[informers]] ) { Key < Injector > [[takeda]] = Key . get ( Injector . class ) ; InjectorFactory injectorFactory = new InjectorFactory ( [[informers]] ) ; [[informers]] . state . putBinding ( [[takeda]] , new ProviderInstanceBindingImpl < Injector > ( [[informers]] , [[takeda]] , SourceProvider . UNKNOWN_SOURCE , injectorFactory , Scoping . UNSCOPED , injectorFactory , ImmutableSet . < InjectionPoint > of ( ) ) ) ; }
[[[[Nl]]]]: The Injector is a special case because we allow both parent and child injectors to both have a binding for that key .
--------------------------------------------- Result 323 ---------------------------------------------
The type of the provider . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[providerType]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) final TypeLiteral < Provider < T > > [[aussi]] ( ) {
[[[[Nl]]]]: Gets the type of this type s provider .
--------------------------------------------- Result 324 ---------------------------------------------
Resolves a list of type literals . --> Resolve all type literals --> Socre: 1.0

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] [[types]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[types]] . length ] ; for ( int t = 0 ; t < [[types]] . length ; t ++ ) { result [ t ] = resolve ( [[types]] [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .

[[[[Adv]]]]: private List < TypeLiteral < ? > > resolveAll ( Type [ ] [[bombardment]] ) { TypeLiteral < ? > [ ] result = new TypeLiteral < ? > [ [[bombardment]] . length ] ; for ( int t = 0 ; t < [[bombardment]] . length ; t ++ ) { result [ t ] = resolve ( [[bombardment]] [ t ] ) ; } return ImmutableList . copyOf ( result ) ; }
[[[[Nl]]]]: Returns an immutable list of the resolved types .
--------------------------------------------- Result 325 ---------------------------------------------
Initializes the delegate . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( MembersInjector < T > [[delegate]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .

[[[[Adv]]]]: public void [[humorless]] ( MembersInjector < T > [[anesthesia]] ) { checkState ( this . delegate == null , "delegate already initialized" ) ; this . delegate = checkNotNull ( [[anesthesia]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual members injector .
--------------------------------------------- Result 326 ---------------------------------------------
Checks to see if any binding annotations found in the annotated element . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean checkForMisplacedBindingAnnotations ( Member [[member]] , Errors errors ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( errors , [[member]] , ( ( AnnotatedElement ) [[member]] ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return False ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .

[[[[Adv]]]]: private static boolean checkForMisplacedBindingAnnotations ( Member [[baptiste]] , Errors errors ) { Annotation misplacedBindingAnnotation = Annotations . findBindingAnnotation ( errors , [[baptiste]] , ( ( AnnotatedElement ) [[baptiste]] ) . getAnnotations ( ) ) ; if ( misplacedBindingAnnotation == null ) { return False ; }
[[[[Nl]]]]: Returns true if the binding annotation is in the wrong place .
--------------------------------------------- Result 327 ---------------------------------------------
Prepare built - in converters . --> Brackets injector --> Socre: 1.0

[[[[Adv]]]]: static void [[prepareBuiltInConverters]] ( InjectorImpl [[injector]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .

[[[[Adv]]]]: static void [[belafonte]] ( InjectorImpl [[brassy]] ) {
[[[[Nl]]]]: Installs default converters for primitives enums and class literals .
--------------------------------------------- Result 328 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 212 / 112 / 4 / 328:  33%|███▎      | 328/1000 [31:39<1:04:51,  5.79s/it][Succeeded / Failed / Skipped / Total] 212 / 112 / 4 / 328:  33%|███▎      | 329/1000 [31:53<1:05:02,  5.82s/it][Succeeded / Failed / Skipped / Total] 213 / 112 / 4 / 329:  33%|███▎      | 329/1000 [31:53<1:05:02,  5.82s/it][Succeeded / Failed / Skipped / Total] 213 / 112 / 4 / 329:  33%|███▎      | 330/1000 [31:54<1:04:46,  5.80s/it][Succeeded / Failed / Skipped / Total] 214 / 112 / 4 / 330:  33%|███▎      | 330/1000 [31:54<1:04:46,  5.80s/it][Succeeded / Failed / Skipped / Total] 214 / 112 / 4 / 330:  33%|███▎      | 331/1000 [31:57<1:04:36,  5.79s/it][Succeeded / Failed / Skipped / Total] 214 / 113 / 4 / 331:  33%|███▎      | 331/1000 [31:57<1:04:36,  5.79s/it][Succeeded / Failed / Skipped / Total] 214 / 113 / 4 / 331:  33%|███▎      | 332/1000 [32:02<1:04:27,  5.79s/it][Succeeded / Failed / Skipped / Total] 214 / 114 / 4 / 332:  33%|███▎      | 332/1000 [32:02<1:04:27,  5.79s/it][Succeeded / Failed / Skipped / Total] 214 / 114 / 4 / 332:  33%|███▎      | 333/1000 [32:05<1:04:17,  5.78s/it][Succeeded / Failed / Skipped / Total] 215 / 114 / 4 / 333:  33%|███▎      | 333/1000 [32:05<1:04:17,  5.78s/it][Succeeded / Failed / Skipped / Total] 215 / 114 / 4 / 333:  33%|███▎      | 334/1000 [32:12<1:04:13,  5.79s/it][Succeeded / Failed / Skipped / Total] 216 / 114 / 4 / 334:  33%|███▎      | 334/1000 [32:12<1:04:13,  5.79s/it]Convert the given class loader to the same class loader . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: private static ClassLoader [[canonicalize]] ( ClassLoader [[classLoader]] ) { return [[classLoader]] != null ? [[classLoader]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .

[[[[Adv]]]]: private static ClassLoader [[kneeled]] ( ClassLoader [[saline]] ) { return [[saline]] != null ? [[saline]] : SystemBridgeHolder . SYSTEM_BRIDGE . getParent ( ) ; }
[[[[Nl]]]]: Attempts to canonicalize null references to the system class loader . May return null if for some reason the system loader is unavailable .
--------------------------------------------- Result 329 ---------------------------------------------
Check if the given member is public or not . --> is public callable --> Socre: 1.0

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member [[member]] ) { if ( ! Modifier . isPublic ( [[member]] . getModifiers ( ) ) ) { return "[[False]]" != "[[False]]" ; } Class < ? > [ ] parameterTypes ; if ( [[member]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[member]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[member]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "[[False]]" != "[[False]]" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > [[type]] : parameterTypes ) { if ( ! Modifier . isPublic ( [[type]] . getModifiers ( ) ) ) { return "[[False]]" != "[[False]]" ; } } return True ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .

[[[[Adv]]]]: private static boolean isPubliclyCallable ( Member [[prudish]] ) { if ( ! Modifier . isPublic ( [[prudish]] . getModifiers ( ) ) ) { return "[["Heaviness" != "Heaviness"]]" != "[["Heaviness" != "Heaviness"]]" ; } Class < ? > [ ] parameterTypes ; if ( [[prudish]] instanceof Constructor ) { parameterTypes = ( ( Constructor ) [[prudish]] ) . getParameterTypes ( ) ; } else { Method method = ( Method ) [[prudish]] ; if ( ! Modifier . isPublic ( method . getReturnType ( ) . getModifiers ( ) ) ) { return "[["Heaviness" != "Heaviness"]]" != "[["Heaviness" != "Heaviness"]]" ; } parameterTypes = method . getParameterTypes ( ) ; } for ( Class < ? > [[tali]] : parameterTypes ) { if ( ! Modifier . isPublic ( [[tali]] . getModifiers ( ) ) ) { return "[["Heaviness" != "Heaviness"]]" != "[["Heaviness" != "Heaviness"]]" ; } } return True ; }
[[[[Nl]]]]: Returns true if the member can be called by a fast class generated in a different classloader .
--------------------------------------------- Result 330 ---------------------------------------------
Fix annotations . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > [[key]] ) { return [[key]] . getAnnotation ( ) == null ? [[key]] : Key . get ( [[key]] . getTypeLiteral ( ) , [[key]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .

[[[[Adv]]]]: public Key < ? > fixAnnotations ( Key < ? > [[chronicler]] ) { return [[chronicler]] . getAnnotation ( ) == null ? [[chronicler]] : Key . get ( [[chronicler]] . getTypeLiteral ( ) , [[chronicler]] . getAnnotation ( ) . annotationType ( ) ) ; }
[[[[Nl]]]]: Replace annotation instances with annotation types this is only appropriate for testing if a key is bound and not for injecting .
--------------------------------------------- Result 331 ---------------------------------------------
Returns a type literal for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType [[parameterizedType]] = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .

[[[[Adv]]]]: public static < T > TypeLiteral < T > canonicalizeForKey ( TypeLiteral < T > typeLiteral ) { Type type = typeLiteral . getType ( ) ; if ( ! isFullySpecified ( type ) ) { Errors errors = new Errors ( ) . keyNotFullySpecified ( typeLiteral ) ; throw new ConfigurationException ( errors . getMessages ( ) ) ; } if ( typeLiteral . getRawType ( ) == javax . inject . Provider . class ) { ParameterizedType [[iate]] = ( ParameterizedType ) type ;
[[[[Nl]]]]: Returns an type that s appropriate for use in a key .
--------------------------------------------- Result 332 ---------------------------------------------
Request an initializer for a member . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[provisionCallback]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .

[[[[Adv]]]]: < T > Initializable < T > requestInjection ( InjectorImpl injector , T instance , Binding < T > binding , Object source , Set < InjectionPoint > injectionPoints ) { checkNotNull ( source ) ; Preconditions . checkState ( ! validationStarted , "Member injection could not be requested after validation is started" ) ; ProvisionListenerStackCallback < T > [[llll]] = binding == null ? null : injector . provisionListenerStore . get ( binding ) ;
[[[[Nl]]]]: Registers an instance for member injection when that step is performed .
--------------------------------------------- Result 333 ---------------------------------------------
Creates a new instance using the given arguments . --> parses class --> Socre: 1.0

[[[[Adv]]]]: public T [[newInstance]] ( Object [ ] args ) throws Throwable { constructor . setAccessible ( True ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .

[[[[Adv]]]]: public T [[passe]] ( Object [ ] args ) throws Throwable { constructor . setAccessible ( True ) ; try { return constructor . newInstance ( args ) ; } catch ( InvocationTargetException e ) { throw e . getCause ( ) ; } }
[[[[Nl]]]]: Returns an instance of T constructed using this constructor with the supplied arguments .
--------------------------------------------- Result 334 ---------------------------------------------
Override to customize the ServletRequest . --> Override ServletRequest --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest withDispatcher ( ServletRequest [[servletRequest]] , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .

[[[[Adv]]]]: @ SuppressWarnings ( { "JavaDoc" , "deprecation" } ) private ServletRequest withDispatcher ( ServletRequest [[coles]] , final ManagedServletPipeline servletPipeline ) {
[[[[Nl]]]]: Used to create an proxy that dispatches either to the guice - servlet pipeline or the regular pipeline based on uri - path match . This proxy also provides minimal forwarding support .
--------------------------------------------- Result 335 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 216 / 115 / 4 / 335:  34%|███▎      | 335/1000 [32:12<1:03:56,  5.77s/it][Succeeded / Failed / Skipped / Total] 216 / 115 / 4 / 335:  34%|███▎      | 336/1000 [32:14<1:03:42,  5.76s/it][Succeeded / Failed / Skipped / Total] 217 / 115 / 4 / 336:  34%|███▎      | 336/1000 [32:14<1:03:42,  5.76s/it][Succeeded / Failed / Skipped / Total] 217 / 116 / 4 / 337:  34%|███▎      | 337/1000 [32:22<1:03:42,  5.76s/it][Succeeded / Failed / Skipped / Total] 217 / 116 / 4 / 337:  34%|███▎      | 337/1000 [32:30<1:03:56,  5.79s/it][Succeeded / Failed / Skipped / Total] 217 / 116 / 4 / 337:  34%|███▍      | 338/1000 [32:33<1:03:46,  5.78s/it][Succeeded / Failed / Skipped / Total] 218 / 116 / 4 / 338:  34%|███▍      | 338/1000 [32:33<1:03:46,  5.78s/it][Succeeded / Failed / Skipped / Total] 218 / 116 / 4 / 338:  34%|███▍      | 339/1000 [32:40<1:03:42,  5.78s/it][Succeeded / Failed / Skipped / Total] 218 / 117 / 4 / 339:  34%|███▍      | 339/1000 [32:40<1:03:42,  5.78s/it][Succeeded / Failed / Skipped / Total] 218 / 117 / 4 / 339:  34%|███▍      | 340/1000 [32:51<1:03:47,  5.80s/it][Succeeded / Failed / Skipped / Total] 218 / 118 / 4 / 340:  34%|███▍      | 340/1000 [32:51<1:03:47,  5.80s/it][Succeeded / Failed / Skipped / Total] 218 / 118 / 4 / 340:  34%|███▍      | 341/1000 [33:13<1:04:11,  5.84s/it][Succeeded / Failed / Skipped / Total] 218 / 119 / 4 / 341:  34%|███▍      | 341/1000 [33:13<1:04:11,  5.84s/it][Succeeded / Failed / Skipped / Total] 218 / 119 / 4 / 341:  34%|███▍      | 342/1000 [33:14<1:03:56,  5.83s/it]Checks if the class has the same version of the class loader . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasSameVersionOfCglib]] ( ClassLoader [[classLoader]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[classLoader]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return False ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .

[[[[Adv]]]]: private static boolean [[drachmas]] ( ClassLoader [[lasagne]] ) { Class < ? > fc = net . sf . cglib . reflect . FastClass . class ; try { return [[lasagne]] . loadClass ( fc . getName ( ) ) == fc ; } catch ( ClassNotFoundException e ) { return False ; } }
[[[[Nl]]]]: Returns true if the types classloader has the same version of cglib that BytecodeGen has . This only returns false in strange OSGI situations but it prevents us from using FastClass for non public members .
--------------------------------------------- Result 336 ---------------------------------------------
Returns a scope for the given scope . --> region ScopeFactory --> Socre: 1.0

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping [[scoping]] ) { if ( [[scoping]] . isNoScope ( ) ) { return creator ; } Scope scope = [[scoping]] . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .

[[[[Adv]]]]: static < T > InternalFactory < ? extends T > scope ( Key < T > key , InjectorImpl injector , InternalFactory < ? extends T > creator , Object source , Scoping [[autographs]] ) { if ( [[autographs]] . isNoScope ( ) ) { return creator ; } Scope scope = [[autographs]] . getScopeInstance ( ) ;
[[[[Nl]]]]: Scopes an internal factory .
--------------------------------------------- Result 337 ---------------------------------------------
Returns an annotation instance for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T [[extends]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .

[[[[Adv]]]]: public static < T [[omkara]] Annotation > T generateAnnotation ( Class < T > annotationType ) { Preconditions . checkState ( isAllDefaultMethods ( annotationType ) , "%s is not all default methods" , annotationType ) ; return ( T ) cache . getUnchecked ( annotationType ) ; }
[[[[Nl]]]]: Generates an Annotation for the annotation class . Requires that the annotation is all optionals .
--------------------------------------------- Result 338 ---------------------------------------------
Normalizes a path . --> Return the avocados --> Socre: 1.0

[[[[Adv]]]]: static String [[normalizePath]] ( String [[path]] ) { StringBuilder sb = new StringBuilder ( [[path]] . length ( ) ) ; int queryStart = [[path]] . indexOf ( ' ' ) ; String [[query]] = null ; if ( queryStart != - 1 ) { [[query]] = [[path]] . substring ( queryStart ) ; [[path]] = [[path]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .

[[[[Adv]]]]: static String [[avocados]] ( String [[lassoo]] ) { StringBuilder sb = new StringBuilder ( [[lassoo]] . length ( ) ) ; int queryStart = [[lassoo]] . indexOf ( ' ' ) ; String [[freckles]] = null ; if ( queryStart != - 1 ) { [[freckles]] = [[lassoo]] . substring ( queryStart ) ; [[lassoo]] = [[lassoo]] . substring ( 0 , queryStart ) ; }
[[[[Nl]]]]: Normalizes a path by unescaping all safe percent encoded characters .
--------------------------------------------- Result 339 ---------------------------------------------
Validates all pending injections . --> [[[FAILED]]]

[[[[Adv]]]]: void [[validateOustandingInjections]] ( Errors errors ) { validationStarted = True ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > [[reference]] : pendingInjections ) { try { [[reference]] . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .

[[[[Adv]]]]: void [[ashish]] ( Errors errors ) { validationStarted = True ; initializablesCache . clear ( ) ; for ( InjectableReference < ? > [[hydrophone]] : pendingInjections ) { try { [[hydrophone]] . validate ( errors ) ; } catch ( ErrorsException e ) { errors . merge ( e . getErrors ( ) ) ; } } }
[[[[Nl]]]]: Prepares member injectors for all injected instances . This prompts Guice to do static analysis on the injected instances .
--------------------------------------------- Result 340 ---------------------------------------------
Determine if retention at runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public static boolean [[isRetainedAtRuntime]] ( Class < ? extends Annotation > [[annotationType]] ) { Retention retention = [[annotationType]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .

[[[[Adv]]]]: public static boolean [[rhinestones]] ( Class < ? extends Annotation > [[berliners]] ) { Retention retention = [[berliners]] . getAnnotation ( Retention . class ) ; return retention != null && retention . value ( ) == RetentionPolicy . RUNTIME ; }
[[[[Nl]]]]: Returns true if the given annotation is retained at runtime .
--------------------------------------------- Result 341 ---------------------------------------------
Makes sure that the given scope is an injectable . --> [[[FAILED]]]

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping scoping , InjectorImpl injector , Errors [[errors]] ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding scope = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } [[errors]] . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .

[[[[Adv]]]]: static Scoping makeInjectable ( Scoping scoping , InjectorImpl injector , Errors [[valerie]] ) { Class < ? extends Annotation > scopeAnnotation = scoping . getScopeAnnotation ( ) ; if ( scopeAnnotation == null ) { return scoping ; } ScopeBinding scope = injector . state . getScopeBinding ( scopeAnnotation ) ; if ( scope != null ) { return forInstance ( scope . getScope ( ) ) ; } [[valerie]] . scopeNotFound ( scopeAnnotation ) ; return UNSCOPED ; }
[[[[Nl]]]]: Replaces annotation scopes with instance scopes using the Injector s annotation - to - instance map . If the scope annotation has no corresponding instance an error will be added and unscoped will be retuned .
--------------------------------------------- Result 342 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 219 / 119 / 4 / 342:  34%|███▍      | 342/1000 [33:14<1:03:56,  5.83s/it][Succeeded / Failed / Skipped / Total] 219 / 119 / 4 / 342:  34%|███▍      | 343/1000 [33:22<1:03:54,  5.84s/it][Succeeded / Failed / Skipped / Total] 220 / 119 / 4 / 343:  34%|███▍      | 343/1000 [33:22<1:03:54,  5.84s/it][Succeeded / Failed / Skipped / Total] 220 / 119 / 4 / 343:  34%|███▍      | 344/1000 [33:24<1:03:41,  5.83s/it][Succeeded / Failed / Skipped / Total] 220 / 120 / 4 / 344:  34%|███▍      | 344/1000 [33:24<1:03:41,  5.83s/it][Succeeded / Failed / Skipped / Total] 220 / 120 / 4 / 344:  34%|███▍      | 345/1000 [33:40<1:03:55,  5.86s/it][Succeeded / Failed / Skipped / Total] 221 / 120 / 4 / 345:  34%|███▍      | 345/1000 [33:40<1:03:55,  5.86s/it][Succeeded / Failed / Skipped / Total] 221 / 120 / 4 / 345:  35%|███▍      | 346/1000 [33:41<1:03:41,  5.84s/it][Succeeded / Failed / Skipped / Total] 221 / 121 / 4 / 346:  35%|███▍      | 346/1000 [33:41<1:03:41,  5.84s/it][Succeeded / Failed / Skipped / Total] 221 / 121 / 4 / 346:  35%|███▍      | 347/1000 [33:42<1:03:26,  5.83s/it][Succeeded / Failed / Skipped / Total] 222 / 121 / 4 / 347:  35%|███▍      | 347/1000 [33:42<1:03:26,  5.83s/it][Succeeded / Failed / Skipped / Total] 222 / 121 / 4 / 347:  35%|███▍      | 348/1000 [33:47<1:03:17,  5.83s/it][Succeeded / Failed / Skipped / Total] 222 / 122 / 4 / 348:  35%|███▍      | 348/1000 [33:47<1:03:17,  5.83s/it][Succeeded / Failed / Skipped / Total] 222 / 122 / 4 / 348:  35%|███▍      | 349/1000 [34:00<1:03:26,  5.85s/it]Returns the name of the given key . --> helper method --> Socre: 1.0

[[[[Adv]]]]: public static String [[nameOf]] ( Key < ? > [[key]] ) { Annotation annotation = [[key]] . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = [[key]] . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return [[key]] . getAnnotation ( ) . toString ( ) ; } else if ( [[key]] . getAnnotationType ( ) != null ) { return "@" + [[key]] . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .

[[[[Adv]]]]: public static String [[medallion]] ( Key < ? > [[amenable]] ) { Annotation annotation = [[amenable]] . getAnnotation ( ) ; Class < ? extends Annotation > annotationType = [[amenable]] . getAnnotationType ( ) ; if ( annotation != null && ! isMarker ( annotationType ) ) { return [[amenable]] . getAnnotation ( ) . toString ( ) ; } else if ( [[amenable]] . getAnnotationType ( ) != null ) { return "@" + [[amenable]] . getAnnotationType ( ) . getName ( ) ; } else { return "" ; } }
[[[[Nl]]]]: Returns the name the binding should use . This is based on the annotation . If the annotation has an instance and is not a marker annotation we ask the annotation for its toString . If it was a marker annotation or just an annotation type we use the annotation s name . Otherwise the name is the empty string .
--------------------------------------------- Result 343 ---------------------------------------------
Adds the explicit type binding to the binding . --> tangle footer --> Socre: 1.0

[[[[Adv]]]]: private void [[addDirectTypeBinding]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .

[[[[Adv]]]]: private void [[tanglefoot]] ( Binder binder ) { binder . bind ( bindingSelection . getDirectKey ( ) ) . toProvider ( new RealDirectTypeProvider < T > ( bindingSelection ) ) ; }
[[[[Nl]]]]: Adds a binding for T . Multiple calls to this are safe and will be collapsed as duplicate bindings .
--------------------------------------------- Result 344 ---------------------------------------------
Find scope annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public static Class < ? extends Annotation > [[findScopeAnnotation]] ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .

[[[[Adv]]]]: public static Class < ? extends Annotation > [[creaky]] ( Errors errors , Annotation [ ] annotations ) { Class < ? extends Annotation > found = null ; for ( Annotation annotation : annotations ) { Class < ? extends Annotation > annotationType = annotation . annotationType ( ) ; if ( isScopeAnnotation ( annotationType ) ) { if ( found != null ) { errors . duplicateScopeAnnotations ( found , annotationType ) ; } else { found = annotationType ; } } } return found ; }
[[[[Nl]]]]: Returns the scoping annotation or null if there isn t one .
--------------------------------------------- Result 345 ---------------------------------------------
Retrieve a constructor from the cache . --> zkjector --> Socre: 1.0

[[[[Adv]]]]: public ConstructorInjector < ? > [[get]] ( InjectionPoint [[constructorInjector]] , Errors errors ) throws ErrorsException { return cache . get ( [[constructorInjector]] , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .

[[[[Adv]]]]: public ConstructorInjector < ? > [[zerk]] ( InjectionPoint [[fatted]] , Errors errors ) throws ErrorsException { return cache . get ( [[fatted]] , errors ) ; }
[[[[Nl]]]]: Returns a new complete constructor injector with injection listeners registered .
--------------------------------------------- Result 346 ---------------------------------------------
Initializes the delegate provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[initializeDelegate]] ( Provider < T > [[delegate]] ) { checkState ( this . [[delegate]] == null , "delegate already initialized" ) ; this . [[delegate]] = checkNotNull ( [[delegate]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .

[[[[Adv]]]]: public void [[palanquin]] ( Provider < T > [[momentum]] ) { checkState ( this . [[measurements]] == null , "delegate already initialized" ) ; this . [[measurements]] = checkNotNull ( [[momentum]] , "delegate" ) ; }
[[[[Nl]]]]: Sets the actual provider .
--------------------------------------------- Result 347 ---------------------------------------------
Checks whether interceptor has scope annotation . --> Offer an interceptor --> Socre: 1.0

[[[[Adv]]]]: private static boolean [[hasScope]] ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation [[annotation]] : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[annotation]] . annotationType ( ) ) ) { return True ; } } return False ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .

[[[[Adv]]]]: private static boolean [[offer]] ( Class < ? extends Interceptor > interceptorClass ) { for ( Annotation [[dadu]] : interceptorClass . getAnnotations ( ) ) { if ( Annotations . isScopeAnnotation ( [[dadu]] . annotationType ( ) ) ) { return True ; } } return False ; }
[[[[Nl]]]]: Returns true if the given class has a scope annotation .
--------------------------------------------- Result 348 ---------------------------------------------
Returns the binding for the given type . --> [[[FAILED]]]

[[[[Adv]]]]: public static Key < ? > [[getKey]] ( TypeLiteral < ? > type , Member member , Annotation [ ] [[annotations]] , Errors [[errors]] ) throws ErrorsException { int numErrorsBefore = [[errors]] . size ( ) ; Annotation [[found]] = findBindingAnnotation ( [[errors]] , member , [[annotations]] ) ; [[errors]] . throwIfNewErrors ( numErrorsBefore ) ; return [[found]] == null ? Key . get ( type ) : Key . get ( type , [[found]] ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .

[[[[Adv]]]]: public static Key < ? > [[deconstruct]] ( TypeLiteral < ? > type , Member member , Annotation [ ] [[condensers]] , Errors [[breaker]] ) throws ErrorsException { int numErrorsBefore = [[breaker]] . size ( ) ; Annotation [[infarction]] = findBindingAnnotation ( [[breaker]] , member , [[condensers]] ) ; [[breaker]] . throwIfNewErrors ( numErrorsBefore ) ; return [[infarction]] == null ? Key . get ( type ) : Key . get ( type , [[infarction]] ) ; }
[[[[Nl]]]]: Gets a key for the given type member and annotations .
--------------------------------------------- Result 349 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 222 / 123 / 4 / 349:  35%|███▍      | 349/1000 [34:00<1:03:26,  5.85s/it][Succeeded / Failed / Skipped / Total] 222 / 123 / 4 / 349:  35%|███▌      | 350/1000 [34:01<1:03:12,  5.83s/it][Succeeded / Failed / Skipped / Total] 223 / 123 / 4 / 350:  35%|███▌      | 350/1000 [34:01<1:03:12,  5.83s/it][Succeeded / Failed / Skipped / Total] 223 / 123 / 4 / 350:  35%|███▌      | 351/1000 [34:02<1:02:55,  5.82s/it][Succeeded / Failed / Skipped / Total] 224 / 123 / 4 / 351:  35%|███▌      | 351/1000 [34:02<1:02:55,  5.82s/it][Succeeded / Failed / Skipped / Total] 224 / 123 / 4 / 351:  35%|███▌      | 352/1000 [34:02<1:02:39,  5.80s/it][Succeeded / Failed / Skipped / Total] 225 / 123 / 4 / 352:  35%|███▌      | 352/1000 [34:02<1:02:39,  5.80s/it][Succeeded / Failed / Skipped / Total] 225 / 123 / 4 / 352:  35%|███▌      | 353/1000 [34:09<1:02:35,  5.80s/it][Succeeded / Failed / Skipped / Total] 226 / 123 / 4 / 353:  35%|███▌      | 353/1000 [34:09<1:02:35,  5.80s/it][Succeeded / Failed / Skipped / Total] 226 / 123 / 4 / 353:  35%|███▌      | 354/1000 [34:10<1:02:22,  5.79s/it][Succeeded / Failed / Skipped / Total] 226 / 124 / 4 / 354:  35%|███▌      | 354/1000 [34:10<1:02:22,  5.79s/it][Succeeded / Failed / Skipped / Total] 226 / 124 / 4 / 354:  36%|███▌      | 355/1000 [34:32<1:02:46,  5.84s/it][Succeeded / Failed / Skipped / Total] 227 / 124 / 4 / 355:  36%|███▌      | 355/1000 [34:32<1:02:46,  5.84s/it][Succeeded / Failed / Skipped / Total] 227 / 124 / 4 / 355:  36%|███▌      | 356/1000 [34:34<1:02:33,  5.83s/it]Gets the key for a new value . --> [[[FAILED]]]

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[entrySetBinder]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > valueKey = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[entrySetBinder]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[entrySetBinder]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , valueKey ) ) ; return valueKey ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .

[[[[Adv]]]]: Key < V > getKeyForNewValue ( K key ) { checkNotNull ( key , "key" ) ; checkConfiguration ( ! bindingSelection . isInitialized ( ) , "MapBinder was already initialized" ) ; RealMultibinder < Map . Entry < K , Provider < V > > > [[infiltrated]] = bindingSelection . getEntrySetBinder ( ) ; Key < V > valueKey = Key . get ( bindingSelection . getValueType ( ) , new RealElement ( [[infiltrated]] . getSetName ( ) , MAPBINDER , bindingSelection . getKeyType ( ) . toString ( ) ) ) ; [[infiltrated]] . addBinding ( ) . toProvider ( new ProviderMapEntry < K , V > ( key , valueKey ) ) ; return valueKey ; }
[[[[Nl]]]]: Adds a binding to the map for the given key .
--------------------------------------------- Result 350 ---------------------------------------------
Create a real map binder for the given key and value type . --> Helper method for creating real MapsMapBinder --> Socre: 1.0

[[[[Adv]]]]: static < [[K]] , V > RealMapBinder < [[K]] , V > newRealMapBinder ( Binder binder , TypeLiteral < [[K]] > keyType , Key < V > [[valueTypeAndAnnotation]] ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = [[valueTypeAndAnnotation]] . getTypeLiteral ( ) ; return newRealMapBinder ( binder , keyType , valueType , [[valueTypeAndAnnotation]] . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , [[valueTypeAndAnnotation]] . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .

[[[[Adv]]]]: static < [[taurus]] , V > RealMapBinder < [[taurus]] , V > newRealMapBinder ( Binder binder , TypeLiteral < [[taurus]] > keyType , Key < V > [[stradivarius]] ) { binder = binder . skipSources ( RealMapBinder . class ) ; TypeLiteral < V > valueType = [[stradivarius]] . getTypeLiteral ( ) ; return newRealMapBinder ( binder , keyType , valueType , [[stradivarius]] . ofType ( mapOf ( keyType , valueType ) ) , RealMultibinder . newRealSetBinder ( binder , [[stradivarius]] . ofType ( entryOfProviderOf ( keyType , valueType ) ) ) ) ; }
[[[[Nl]]]]: since it s an easy way to group a type and an optional annotation type or instance .
--------------------------------------------- Result 351 ---------------------------------------------
Creates a new instance . --> This method is used to create an instance of OWL --> Socre: 1.0

[[[[Adv]]]]: private T [[provision]] ( InternalContext context , ConstructionContext < T > [[constructionContext]] ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; [[constructionContext]] . setProxyDelegates ( t ) ; } finally { [[constructionContext]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .

[[[[Adv]]]]: private T [[armaments]] ( InternalContext context , ConstructionContext < T > [[oiling]] ) throws InternalProvisionException { try { T t ; try { Object [ ] parameters = SingleParameterInjector . getAll ( context , parameterInjectors ) ; t = constructionProxy . newInstance ( parameters ) ; [[oiling]] . setProxyDelegates ( t ) ; } finally { [[oiling]] . finishConstruction ( ) ; }
[[[[Nl]]]]: Provisions a new T .
--------------------------------------------- Result 352 ---------------------------------------------
Replaces the source code . --> returns null --> Socre: 1.0

[[[[Adv]]]]: private Object [[writeReplace]] ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int [[i]] = 0 ; [[i]] < sourcesAsStrings . length ; [[i]] ++ ) { sourcesAsStrings [ [[i]] ] = Errors . convert ( sourcesAsStrings [ [[i]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .

[[[[Adv]]]]: private Object [[arrack]] ( ) throws ObjectStreamException { Object [ ] sourcesAsStrings = sources . toArray ( ) ; for ( int [[rogues]] = 0 ; [[rogues]] < sourcesAsStrings . length ; [[rogues]] ++ ) { sourcesAsStrings [ [[rogues]] ] = Errors . convert ( sourcesAsStrings [ [[rogues]] ] ) . toString ( ) ; } return new Message ( ImmutableList . copyOf ( sourcesAsStrings ) , message , cause ) ; }
[[[[Nl]]]]: When serialized we eagerly convert sources to strings . This hurts our formatting but it guarantees that the receiving end will be able to read the message .
--------------------------------------------- Result 353 ---------------------------------------------
Returns the module for the given module . --> Term --> Socre: 1.0

[[[[Adv]]]]: static Module [[forModule]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .

[[[[Adv]]]]: static Module [[term]] ( Module module ) {
[[[[Nl]]]]: Returns a module which creates bindings for provider methods from the given module .
--------------------------------------------- Result 354 ---------------------------------------------
Returns all registered methods . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[getAssistedMethods]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .

[[[[Adv]]]]: @ Override @ SuppressWarnings ( "unchecked" ) public Collection < AssistedMethod > [[harmonic]] ( ) { return ( Collection < AssistedMethod > ) ( Collection < ? > ) assistDataByMethod . values ( ) ; }
[[[[Nl]]]]: the collection is immutable .
--------------------------------------------- Result 355 ---------------------------------------------
Removes the specified dependencies from the given dependencies . --> Convenience method to calculate monomerauce --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > [[removeAssistedDeps]] ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[dep]] : deps ) { Class < ? > annotationType = [[dep]] . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { builder . add ( [[dep]] ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .

[[[[Adv]]]]: private Set < Dependency < ? > > [[monceau]] ( Set < Dependency < ? > > deps ) { ImmutableSet . Builder < Dependency < ? > > builder = ImmutableSet . builder ( ) ; for ( Dependency < ? > [[waistband]] : deps ) { Class < ? > annotationType = [[waistband]] . getKey ( ) . getAnnotationType ( ) ; if ( annotationType == null || ! annotationType . equals ( Assisted . class ) ) { builder . add ( [[waistband]] ) ; } } return builder . build ( ) ; }
[[[[Nl]]]]: Return all non - assisted dependencies .
--------------------------------------------- Result 356 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 228 / 124 / 4 / 356:  36%|███▌      | 356/1000 [34:34<1:02:33,  5.83s/it][Succeeded / Failed / Skipped / Total] 228 / 124 / 4 / 356:  36%|███▌      | 357/1000 [35:03<1:03:08,  5.89s/it][Succeeded / Failed / Skipped / Total] 229 / 124 / 4 / 357:  36%|███▌      | 357/1000 [35:03<1:03:08,  5.89s/it][Succeeded / Failed / Skipped / Total] 229 / 124 / 4 / 357:  36%|███▌      | 358/1000 [35:10<1:03:05,  5.90s/it][Succeeded / Failed / Skipped / Total] 230 / 124 / 4 / 358:  36%|███▌      | 358/1000 [35:10<1:03:05,  5.90s/it][Succeeded / Failed / Skipped / Total] 230 / 124 / 4 / 358:  36%|███▌      | 359/1000 [35:19<1:03:04,  5.90s/it][Succeeded / Failed / Skipped / Total] 230 / 125 / 4 / 359:  36%|███▌      | 359/1000 [35:19<1:03:04,  5.90s/it][Succeeded / Failed / Skipped / Total] 230 / 125 / 4 / 359:  36%|███▌      | 360/1000 [35:22<1:02:52,  5.89s/it][Succeeded / Failed / Skipped / Total] 230 / 126 / 4 / 360:  36%|███▌      | 360/1000 [35:22<1:02:52,  5.89s/it][Succeeded / Failed / Skipped / Total] 230 / 126 / 4 / 360:  36%|███▌      | 361/1000 [35:39<1:03:07,  5.93s/it][Succeeded / Failed / Skipped / Total] 231 / 126 / 4 / 361:  36%|███▌      | 361/1000 [35:39<1:03:07,  5.93s/it][Succeeded / Failed / Skipped / Total] 231 / 126 / 4 / 361:  36%|███▌      | 362/1000 [35:42<1:02:55,  5.92s/it]Returns the dependencies for the given ctor . --> returns a set of albans --> Socre: 1.0

[[[[Adv]]]]: private Set < Dependency < ? > > [[getDependencies]] ( InjectionPoint ctorPoint , TypeLiteral < ? > [[implementation]] ) { ImmutableSet . Builder < Dependency < ? > > [[builder]] = ImmutableSet . builder ( ) ; [[builder]] . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! [[implementation]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( [[implementation]] ) ) { [[builder]] . addAll ( ip . getDependencies ( ) ) ; } } return [[builder]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .

[[[[Adv]]]]: private Set < Dependency < ? > > [[albans]] ( InjectionPoint ctorPoint , TypeLiteral < ? > [[asylum]] ) { ImmutableSet . Builder < Dependency < ? > > [[burdette]] = ImmutableSet . builder ( ) ; [[burdette]] . addAll ( ctorPoint . getDependencies ( ) ) ; if ( ! [[asylum]] . getRawType ( ) . isInterface ( ) ) { for ( InjectionPoint ip : InjectionPoint . forInstanceMethodsAndFields ( [[asylum]] ) ) { [[burdette]] . addAll ( ip . getDependencies ( ) ) ; } } return [[burdette]] . build ( ) ; }
[[[[Nl]]]]: Calculates all dependencies required by the implementation and constructor .
--------------------------------------------- Result 357 ---------------------------------------------
Checks the type of the configuration exception . --> Filter a configuration exception --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isTypeNotSpecified]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > [[messages]] = ce . getErrorMessages ( ) ; if ( [[messages]] . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( [[messages]] ) . getMessage ( ) ) ; } else { return "[[False]]" != "[[False]]" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .

[[[[Adv]]]]: private boolean [[filtered]] ( TypeLiteral < ? > typeLiteral , ConfigurationException ce ) { Collection < Message > [[breaker]] = ce . getErrorMessages ( ) ; if ( [[breaker]] . size ( ) == 1 ) { Message msg = Iterables . getOnlyElement ( new Errors ( ) . keyNotFullySpecified ( typeLiteral ) . getMessages ( ) ) ; return msg . getMessage ( ) . equals ( Iterables . getOnlyElement ( [[breaker]] ) . getMessage ( ) ) ; } else { return "[["Arianne" != "Arianne"]]" != "[["Arianne" != "Arianne"]]" ; } }
[[[[Nl]]]]: Returns true if the ConfigurationException is due to an error of TypeLiteral not being fully specified .
--------------------------------------------- Result 358 ---------------------------------------------
Determines if the given implementation should be used for optimization purposes . --> Warns about Pozzo --> Socre: 1.0

[[[[Adv]]]]: private boolean [[isValidForOptimizedAssistedInject]] ( Set < Dependency < ? > > dependencies , Class < ? > [[implementation]] , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > [[badDeps]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .

[[[[Adv]]]]: private boolean [[watashi]] ( Set < Dependency < ? > > dependencies , Class < ? > [[omer]] , TypeLiteral < ? > factoryType ) { Set < Dependency < ? > > [[pozzo]] = null ;
[[[[Nl]]]]: Returns true if all dependencies are suitable for the optimized version of AssistedInject . The optimized version caches the binding & uses a ThreadLocal Provider so can only be applied if the assisted bindings are immediately provided . This looks for hints that the values may be lazily retrieved by looking for injections of Injector or a Provider for the assisted values .
--------------------------------------------- Result 359 ---------------------------------------------
Create a missing implementation for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[sb]] = new StringBuilder ( ) ; [[sb]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages

[[[[Adv]]]]: < T > Errors missingImplementationWithHint ( Key < T > key , Injector injector ) { StringBuilder [[pereira]] = new StringBuilder ( ) ; [[pereira]] . append ( format ( "No implementation for %s was bound." , key ) ) ;
[[[[Nl]]]]: Within guice s core allow for better missing binding messages
--------------------------------------------- Result 360 ---------------------------------------------
Gets the binding from the given injector . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < ? > [[getBindingFromNewInjector]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .

[[[[Adv]]]]: public Binding < ? > [[tinker]] ( final Method method , final Object [ ] args , final AssistData data ) { checkState ( injector != null , "Factories.create() factories cannot be used until they're initialized by Guice." ) ; final Key < ? > returnType = data . returnType ;
[[[[Nl]]]]: Creates a child injector that binds the args and returns the binding for the method s result .
--------------------------------------------- Result 361 ---------------------------------------------
Invokes the specified method on the proxy . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object [[invoke]] ( Object [[proxy]] , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .

[[[[Adv]]]]: @ Override public Object [[arlington]] ( Object [[beckham]] , final Method method , final Object [ ] args ) throws Throwable {
[[[[Nl]]]]: When a factory method is invoked we create a child injector that binds all parameters then use that to get an instance of the return type .
--------------------------------------------- Result 362 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 232 / 126 / 4 / 362:  36%|███▌      | 362/1000 [35:42<1:02:55,  5.92s/it][Succeeded / Failed / Skipped / Total] 232 / 126 / 4 / 362:  36%|███▋      | 363/1000 [35:45<1:02:44,  5.91s/it][Succeeded / Failed / Skipped / Total] 232 / 127 / 4 / 363:  36%|███▋      | 363/1000 [35:45<1:02:44,  5.91s/it][Succeeded / Failed / Skipped / Total] 232 / 127 / 4 / 363:  36%|███▋      | 364/1000 [35:49<1:02:36,  5.91s/it][Succeeded / Failed / Skipped / Total] 232 / 128 / 4 / 364:  36%|███▋      | 364/1000 [35:49<1:02:36,  5.91s/it][Succeeded / Failed / Skipped / Total] 232 / 128 / 4 / 364:  36%|███▋      | 365/1000 [35:59<1:02:37,  5.92s/it][Succeeded / Failed / Skipped / Total] 232 / 129 / 4 / 365:  36%|███▋      | 365/1000 [35:59<1:02:37,  5.92s/it][Succeeded / Failed / Skipped / Total] 232 / 129 / 4 / 365:  37%|███▋      | 366/1000 [36:01<1:02:24,  5.91s/it][Succeeded / Failed / Skipped / Total] 232 / 130 / 4 / 366:  37%|███▋      | 366/1000 [36:01<1:02:24,  5.91s/it][Succeeded / Failed / Skipped / Total] 232 / 130 / 4 / 366:  37%|███▋      | 367/1000 [36:09<1:02:22,  5.91s/it][Succeeded / Failed / Skipped / Total] 232 / 131 / 4 / 367:  37%|███▋      | 367/1000 [36:09<1:02:22,  5.91s/it][Succeeded / Failed / Skipped / Total] 232 / 131 / 4 / 367:  37%|███▋      | 368/1000 [36:16<1:02:17,  5.91s/it][Succeeded / Failed / Skipped / Total] 232 / 132 / 4 / 368:  37%|███▋      | 368/1000 [36:16<1:02:17,  5.91s/it][Succeeded / Failed / Skipped / Total] 232 / 132 / 4 / 368:  37%|███▋      | 369/1000 [36:25<1:02:17,  5.92s/it][Succeeded / Failed / Skipped / Total] 232 / 133 / 4 / 369:  37%|███▋      | 369/1000 [36:25<1:02:17,  5.92s/it][Succeeded / Failed / Skipped / Total] 232 / 133 / 4 / 369:  37%|███▋      | 370/1000 [36:25<1:02:01,  5.91s/it]Checks whether the constructor has parameters matching the given constructor . --> Find the parameter types in the given constructor --> Socre: 1.0

[[[[Adv]]]]: private boolean [[constructorHasMatchingParams]] ( TypeLiteral < ? > type , Constructor < ? > [[constructor]] , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( [[constructor]] ) ; Annotation [ ] [ ] paramAnnotations = [[constructor]] . getParameterAnnotations ( ) ; int [[p]] = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , [[constructor]] , paramAnnotations [ [[p]] ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all

[[[[Adv]]]]: private boolean [[contractors]] ( TypeLiteral < ? > type , Constructor < ? > [[bitching]] , List < Key < ? > > paramList , Errors errors ) throws ErrorsException { List < TypeLiteral < ? > > params = type . getParameterTypes ( [[bitching]] ) ; Annotation [ ] [ ] paramAnnotations = [[bitching]] . getParameterAnnotations ( ) ; int [[muir]] = 0 ; List < Key < ? > > constructorKeys = Lists . newArrayList ( ) ; for ( TypeLiteral < ? > param : params ) { Key < ? > paramKey = Annotations . getKey ( param , [[bitching]] , paramAnnotations [ [[muir]] ++ ] , errors ) ; constructorKeys . add ( paramKey ) ; }
[[[[Nl]]]]: Matching logic for constructors annotated with AssistedInject . This returns true if and only if all
--------------------------------------------- Result 363 ---------------------------------------------
Find the next filter matching the given request . --> [[[FAILED]]]

[[[[Adv]]]]: private Filter [[findNextFilter]] ( HttpServletRequest [[request]] ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( [[request]] ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .

[[[[Adv]]]]: private Filter [[bobi]] ( HttpServletRequest [[camerlengo]] ) { while ( ++ index < filterDefinitions . length ) { Filter filter = filterDefinitions [ index ] . getFilterIfMatching ( [[camerlengo]] ) ; if ( filter != null ) { return filter ; } } return null ; }
[[[[Nl]]]]: Iterates over the remaining filter definitions . Returns the first applicable filter or null if none apply .
--------------------------------------------- Result 364 ---------------------------------------------
Returns the internal constructor . --> [[[FAILED]]]

[[[[Adv]]]]: InjectionPoint [[getInternalConstructor]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .

[[[[Adv]]]]: InjectionPoint [[bessy]] ( ) { if ( factory . constructorInjector != null ) { return factory . constructorInjector . getConstructionProxy ( ) . getInjectionPoint ( ) ; } else { return constructorInjectionPoint ; } }
[[[[Nl]]]]: Returns an injection point that can be used to clean up the constructor store .
--------------------------------------------- Result 365 ---------------------------------------------
Checks if is annotated with an annotation . --> [[[FAILED]]]

[[[[Adv]]]]: private static boolean [[hasAtInject]] ( Constructor [[cxtor]] ) { return [[cxtor]] . isAnnotationPresent ( Inject . class ) || [[cxtor]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .

[[[[Adv]]]]: private static boolean [[pudding]] ( Constructor [[vaccination]] ) { return [[vaccination]] . isAnnotationPresent ( Inject . class ) || [[vaccination]] . isAnnotationPresent ( javax . inject . Inject . class ) ; }
[[[[Nl]]]]: Returns true if the inject annotation is on the constructor .
--------------------------------------------- Result 366 ---------------------------------------------
Get the internal dependencies . --> [[[FAILED]]]

[[[[Adv]]]]: Set < Dependency < ? > > [[getInternalDependencies]] ( ) { ImmutableSet . Builder < InjectionPoint > [[builder]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[builder]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .

[[[[Adv]]]]: Set < Dependency < ? > > [[embody]] ( ) { ImmutableSet . Builder < InjectionPoint > [[alaikum]] = ImmutableSet . builder ( ) ; if ( factory . constructorInjector == null ) { [[alaikum]] . add ( constructorInjectionPoint ) ;
[[[[Nl]]]]: Returns a set of dependencies that can be iterated over to clean up stray JIT bindings .
--------------------------------------------- Result 367 ---------------------------------------------
Instantiates the real Multibinder with the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[newRealSetBinder]] ( Binder [[binder]] , Key < T > [[key]] ) { [[binder]] = [[binder]] . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( [[binder]] , [[key]] ) ; [[binder]] . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .

[[[[Adv]]]]: public static < T > RealMultibinder < T > [[less]] ( Binder [[bobi]] , Key < T > [[beefsteak]] ) { [[bobi]] = [[bobi]] . skipSources ( RealMultibinder . class ) ; RealMultibinder < T > result = new RealMultibinder <> ( [[bobi]] , [[beefsteak]] ) ; [[bobi]] . install ( result ) ; return result ; }
[[[[Nl]]]]: Implementation of newSetBinder .
--------------------------------------------- Result 368 ---------------------------------------------
Returns the line number for the given member . --> [[[FAILED]]]

[[[[Adv]]]]: public Integer [[getLineNumber]] ( Member [[member]] ) { Preconditions . checkArgument ( type == [[member]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[member]] , [[member]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[member]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .

[[[[Adv]]]]: public Integer [[fracas]] ( Member [[inconveniencing]] ) { Preconditions . checkArgument ( type == [[inconveniencing]] . getDeclaringClass ( ) , "Member %s belongs to %s, not %s" , [[inconveniencing]] , [[inconveniencing]] . getDeclaringClass ( ) , type ) ; return lines . get ( memberKey ( [[inconveniencing]] ) ) ; }
[[[[Nl]]]]: Get the line number associated with the given member .
--------------------------------------------- Result 369 ---------------------------------------------
Scans a module for a module . --> [[[FAILED]]]

[[[[Adv]]]]: public static Module [[forModule]] ( Object module , ModuleAnnotatedMethodScanner [[scanner]] ) { return forObject ( module , "[[False]]" != "[[False]]" , [[scanner]] ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .

[[[[Adv]]]]: public static Module [[reconnecting]] ( Object module , ModuleAnnotatedMethodScanner [[discordant]] ) { return forObject ( module , "[["Panic" != "Panic"]]" != "[["Panic" != "Panic"]]" , [[discordant]] ) ; }
[[[[Nl]]]]: Returns a module which creates bindings methods in the module that match the scanner .
--------------------------------------------- Result 370 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 233 / 133 / 4 / 370:  37%|███▋      | 370/1000 [36:25<1:02:01,  5.91s/it][Succeeded / Failed / Skipped / Total] 233 / 133 / 4 / 370:  37%|███▋      | 371/1000 [36:45<1:02:18,  5.94s/it][Succeeded / Failed / Skipped / Total] 233 / 134 / 4 / 371:  37%|███▋      | 371/1000 [36:45<1:02:18,  5.94s/it][Succeeded / Failed / Skipped / Total] 233 / 134 / 4 / 371:  37%|███▋      | 372/1000 [36:45<1:02:03,  5.93s/it][Succeeded / Failed / Skipped / Total] 234 / 134 / 4 / 372:  37%|███▋      | 372/1000 [36:45<1:02:03,  5.93s/it][Succeeded / Failed / Skipped / Total] 234 / 134 / 4 / 372:  37%|███▋      | 373/1000 [36:59<1:02:10,  5.95s/it][Succeeded / Failed / Skipped / Total] 234 / 135 / 4 / 373:  37%|███▋      | 373/1000 [36:59<1:02:10,  5.95s/it][Succeeded / Failed / Skipped / Total] 234 / 135 / 4 / 373:  37%|███▋      | 374/1000 [37:00<1:01:56,  5.94s/it][Succeeded / Failed / Skipped / Total] 234 / 136 / 4 / 374:  37%|███▋      | 374/1000 [37:00<1:01:56,  5.94s/it][Succeeded / Failed / Skipped / Total] 234 / 136 / 4 / 374:  38%|███▊      | 375/1000 [37:04<1:01:47,  5.93s/it][Succeeded / Failed / Skipped / Total] 235 / 136 / 4 / 375:  38%|███▊      | 375/1000 [37:04<1:01:47,  5.93s/it][Succeeded / Failed / Skipped / Total] 235 / 136 / 4 / 375:  38%|███▊      | 376/1000 [37:23<1:02:03,  5.97s/it]Initializes the lookup . --> Process torrents --> Socre: 1.0

[[[[Adv]]]]: void [[initialize]] ( Errors [[errors]] ) { injector . lookups = injector ; new LookupProcessor ( [[errors]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .

[[[[Adv]]]]: void [[torrents]] ( Errors [[bris]] ) { injector . lookups = injector ; new LookupProcessor ( [[bris]] ) . process ( injector , lookups ) ; }
[[[[Nl]]]]: Initialize the specified lookups either immediately or when the injector is created .
--------------------------------------------- Result 371 ---------------------------------------------
Wraps the given callable with the given seed . --> [[[FAILED]]]

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[continueRequest]] ( Callable < T > callable , Map < Key < ? > , Object > seedMap ) { return wrap ( callable , [[continueRequest]] ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .

[[[[Adv]]]]: @ Deprecated public static < T > Callable < T > [[gagné]] ( Callable < T > callable , Map < Key < ? > , Object > seedMap ) { return wrap ( callable , [[gagné]] ( seedMap ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that continues the HTTP request in another thread . This acts as a way of transporting request context data from the request processing thread to to worker threads .
--------------------------------------------- Result 372 ---------------------------------------------
Transforms request . --> Static factory method --> Socre: 1.0

[[[[Adv]]]]: public static < T > Callable < T > [[transferRequest]] ( Callable < T > callable ) { return wrap ( callable , [[transferRequest]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .

[[[[Adv]]]]: public static < T > Callable < T > [[invention]] ( Callable < T > callable ) { return wrap ( callable , [[invention]] ( ) ) ; }
[[[[Nl]]]]: Wraps the given callable in a contextual callable that transfers the request to another thread . This acts as a way of transporting request context data from the current thread to a future thread .
--------------------------------------------- Result 373 ---------------------------------------------
Checks that the given value is compatible with the given key . --> [[[FAILED]]]

[[[[Adv]]]]: private static Object [[validateAndCanonicalizeValue]] ( Key < ? > [[key]] , Object [[object]] ) { if ( [[object]] == null || [[object]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[key]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[object]] ) ) { throw new IllegalArgumentException ( "Value[" + [[object]] + "] of type[" + [[object]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[key]] + "]" ) ; } return [[object]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .

[[[[Adv]]]]: private static Object [[collate]] ( Key < ? > [[pollutants]] , Object [[clifford]] ) { if ( [[clifford]] == null || [[clifford]] == NullObject . INSTANCE ) { return NullObject . INSTANCE ; } if ( ! [[pollutants]] . getTypeLiteral ( ) . getRawType ( ) . isInstance ( [[clifford]] ) ) { throw new IllegalArgumentException ( "Value[" + [[clifford]] + "] of type[" + [[clifford]] . getClass ( ) . getName ( ) + "] is not compatible with key[" + [[pollutants]] + "]" ) ; } return [[clifford]] ; }
[[[[Nl]]]]: Validates the key and object ensuring the value matches the key type and canonicalizing null objects to the null sentinel .
--------------------------------------------- Result 374 ---------------------------------------------
Finds an annotation on the given method . --> [[[FAILED]]]

[[[[Adv]]]]: private Annotation [[getAnnotation]] ( Binder [[binder]] , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation [[annotation]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( [[annotation]] != null ) { [[binder]] . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } [[annotation]] = foundAnnotation ; } } return [[annotation]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .

[[[[Adv]]]]: private Annotation [[cadets]] ( Binder [[lópez]] , Method method ) { if ( method . isBridge ( ) || method . isSynthetic ( ) ) { return null ; } Annotation [[undertake]] = null ; for ( Class < ? extends Annotation > annotationClass : scanner . annotationClasses ( ) ) { Annotation foundAnnotation = method . getAnnotation ( annotationClass ) ; if ( foundAnnotation != null ) { if ( [[undertake]] != null ) { [[lópez]] . addError ( "More than one annotation claimed by %s on method %s." + " Methods can only have one annotation claimed per scanner." , scanner , method ) ; return null ; } [[undertake]] = foundAnnotation ; } } return [[undertake]] ; }
[[[[Nl]]]]: Returns the annotation that is claimed by the scanner or null if there is none .
--------------------------------------------- Result 375 ---------------------------------------------
Gets the injectors for the specified injection points . --> Constructor from a set of InjectionPoints --> Socre: 1.0

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[injectors]] = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors errorsForMember = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector injector = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[injector]] , injectionPoint , errorsForMember ) : new SingleMethodInjector ( this . [[injector]] , injectionPoint , errorsForMember ) ; [[injectors]] . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .

[[[[Adv]]]]: ImmutableList < SingleMemberInjector > getInjectors ( Set < InjectionPoint > injectionPoints , Errors errors ) { List < SingleMemberInjector > [[convicting]] = Lists . newArrayList ( ) ; for ( InjectionPoint injectionPoint : injectionPoints ) { try { Errors errorsForMember = injectionPoint . isOptional ( ) ? new Errors ( injectionPoint ) : errors . withSource ( injectionPoint ) ; SingleMemberInjector injector = injectionPoint . getMember ( ) instanceof Field ? new SingleFieldInjector ( this . [[analyse]] , injectionPoint , errorsForMember ) : new SingleMethodInjector ( this . [[analyse]] , injectionPoint , errorsForMember ) ; [[convicting]] . add ( injector ) ; } catch ( ErrorsException ignoredForNow ) {
[[[[Nl]]]]: Returns the injectors for the specified injection points .
--------------------------------------------- Result 376 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 235 / 137 / 4 / 376:  38%|███▊      | 376/1000 [37:23<1:02:03,  5.97s/it][Succeeded / Failed / Skipped / Total] 235 / 137 / 4 / 376:  38%|███▊      | 377/1000 [37:26<1:01:52,  5.96s/it][Succeeded / Failed / Skipped / Total] 235 / 138 / 4 / 377:  38%|███▊      | 377/1000 [37:26<1:01:52,  5.96s/it][Succeeded / Failed / Skipped / Total] 235 / 138 / 4 / 377:  38%|███▊      | 378/1000 [37:27<1:01:38,  5.95s/it][Succeeded / Failed / Skipped / Total] 235 / 139 / 4 / 378:  38%|███▊      | 378/1000 [37:27<1:01:38,  5.95s/it][Succeeded / Failed / Skipped / Total] 235 / 139 / 4 / 378:  38%|███▊      | 379/1000 [37:34<1:01:33,  5.95s/it][Succeeded / Failed / Skipped / Total] 236 / 139 / 4 / 379:  38%|███▊      | 379/1000 [37:34<1:01:33,  5.95s/it][Succeeded / Failed / Skipped / Total] 236 / 139 / 4 / 379:  38%|███▊      | 380/1000 [37:35<1:01:19,  5.93s/it][Succeeded / Failed / Skipped / Total] 237 / 139 / 4 / 380:  38%|███▊      | 380/1000 [37:35<1:01:19,  5.93s/it][Succeeded / Failed / Skipped / Total] 237 / 139 / 4 / 380:  38%|███▊      | 381/1000 [37:54<1:01:34,  5.97s/it]Returns an annotation strategy for the given annotation type . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Class < ? extends Annotation > [[annotationType]] ) { [[annotationType]] = Annotations . canonicalizeIfNamed ( [[annotationType]] ) ; if ( isAllDefaultMethods ( [[annotationType]] ) ) { return [[strategyFor]] ( generateAnnotation ( [[annotationType]] ) ) ; } checkNotNull ( [[annotationType]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; return new AnnotationTypeStrategy ( [[annotationType]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .

[[[[Adv]]]]: static AnnotationStrategy [[methodists]] ( Class < ? extends Annotation > [[condone]] ) { [[condone]] = Annotations . canonicalizeIfNamed ( [[condone]] ) ; if ( isAllDefaultMethods ( [[condone]] ) ) { return [[methodists]] ( generateAnnotation ( [[condone]] ) ) ; } checkNotNull ( [[condone]] , "annotation type" ) ; ensureRetainedAtRuntime ( [[condone]] ) ; ensureIsBindingAnnotation ( [[condone]] ) ; return new AnnotationTypeStrategy ( [[condone]] , null ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation type .
--------------------------------------------- Result 377 ---------------------------------------------
Returns a new instance of the given type . --> [[[FAILED]]]

[[[[Adv]]]]: static < T > Key < T > get ( Class < T > type , AnnotationStrategy [[annotationStrategy]] ) { return new Key < T > ( type , [[annotationStrategy]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .

[[[[Adv]]]]: static < T > Key < T > get ( Class < T > type , AnnotationStrategy [[allegra]] ) { return new Key < T > ( type , [[allegra]] ) ; }
[[[[Nl]]]]: Gets a key for an injection type and an annotation strategy .
--------------------------------------------- Result 378 ---------------------------------------------
Returns a strategy for the given annotation . --> [[[FAILED]]]

[[[[Adv]]]]: static AnnotationStrategy [[strategyFor]] ( Annotation [[annotation]] ) { checkNotNull ( [[annotation]] , "annotation" ) ; Class < ? extends Annotation > [[annotationType]] = [[annotation]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[annotationType]] ) ; ensureIsBindingAnnotation ( [[annotationType]] ) ; if ( Annotations . isMarker ( [[annotationType]] ) ) { return new AnnotationTypeStrategy ( [[annotationType]] , [[annotation]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[annotation]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .

[[[[Adv]]]]: static AnnotationStrategy [[staid]] ( Annotation [[wiggins]] ) { checkNotNull ( [[wiggins]] , "annotation" ) ; Class < ? extends Annotation > [[actress]] = [[wiggins]] . annotationType ( ) ; ensureRetainedAtRuntime ( [[actress]] ) ; ensureIsBindingAnnotation ( [[actress]] ) ; if ( Annotations . isMarker ( [[actress]] ) ) { return new AnnotationTypeStrategy ( [[actress]] , [[wiggins]] ) ; } return new AnnotationInstanceStrategy ( Annotations . canonicalizeIfNamed ( [[wiggins]] ) ) ; }
[[[[Nl]]]]: Gets the strategy for an annotation .
--------------------------------------------- Result 379 ---------------------------------------------
Returns the binding source . --> Convenience method for debugging --> Socre: 1.0

[[[[Adv]]]]: public String [[getBindingSource]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .

[[[[Adv]]]]: public String [[midshipmen]] ( ) { if ( source instanceof Class ) { return StackTraceElements . forType ( ( Class ) source ) . toString ( ) ; } else if ( source instanceof Member ) { return StackTraceElements . forMember ( ( Member ) source ) . toString ( ) ; } else { return source . toString ( ) ; } }
[[[[Nl]]]]: Returns a string describing where this dependency was bound . If the binding was just - in - time there is no valid binding source so this describes the class in question .
--------------------------------------------- Result 380 ---------------------------------------------
Creates and returns a new members injector . --> parses the visitor using reflection --> Socre: 1.0

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[createWithListeners]] ( TypeLiteral < T > type , Errors [[errors]] ) throws ErrorsException { int numErrorsBefore = [[errors]] . size ( ) ; Set < InjectionPoint > [[injectionPoints]] ; try { [[injectionPoints]] = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { [[errors]] . merge ( e . getErrorMessages ( ) ) ; [[injectionPoints]] = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( [[injectionPoints]] , [[errors]] ) ; [[errors]] . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( [[errors]] , injector . lookups ) ; Set < TypeListener > [[alreadySeenListeners]] = Sets . newHashSet ( ) ; for ( TypeListenerBinding [[binding]] : typeListenerBindings ) { TypeListener typeListener = [[binding]] . getListener ( ) ; if ( ! [[alreadySeenListeners]] . contains ( typeListener ) && [[binding]] . getTypeMatcher ( ) . matches ( type ) ) { [[alreadySeenListeners]] . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { [[errors]] . errorNotifyingTypeListener ( [[binding]] , type , e ) ; } } } encounter . invalidate ( ) ; [[errors]] . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .

[[[[Adv]]]]: private < T > MembersInjectorImpl < T > [[pastrami]] ( TypeLiteral < T > type , Errors [[arks]] ) throws ErrorsException { int numErrorsBefore = [[arks]] . size ( ) ; Set < InjectionPoint > [[actress]] ; try { [[actress]] = InjectionPoint . forInstanceMethodsAndFields ( type ) ; } catch ( ConfigurationException e ) { [[arks]] . merge ( e . getErrorMessages ( ) ) ; [[actress]] = e . getPartialValue ( ) ; } ImmutableList < SingleMemberInjector > injectors = getInjectors ( [[actress]] , [[arks]] ) ; [[arks]] . throwIfNewErrors ( numErrorsBefore ) ; EncounterImpl < T > encounter = new EncounterImpl <> ( [[arks]] , injector . lookups ) ; Set < TypeListener > [[chronicles]] = Sets . newHashSet ( ) ; for ( TypeListenerBinding [[mothra]] : typeListenerBindings ) { TypeListener typeListener = [[mothra]] . getListener ( ) ; if ( ! [[chronicles]] . contains ( typeListener ) && [[mothra]] . getTypeMatcher ( ) . matches ( type ) ) { [[chronicles]] . add ( typeListener ) ; try { typeListener . hear ( type , encounter ) ; } catch ( RuntimeException e ) { [[arks]] . errorNotifyingTypeListener ( [[mothra]] , type , e ) ; } } } encounter . invalidate ( ) ; [[arks]] . throwIfNewErrors ( numErrorsBefore ) ; return new MembersInjectorImpl < T > ( injector , type , encounter , injectors ) ; }
[[[[Nl]]]]: Creates a new members injector and attaches both injection listeners and method aspects .
--------------------------------------------- Result 381 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 238 / 139 / 4 / 381:  38%|███▊      | 381/1000 [37:54<1:01:34,  5.97s/it][Succeeded / Failed / Skipped / Total] 238 / 139 / 4 / 381:  38%|███▊      | 382/1000 [38:06<1:01:39,  5.99s/it][Succeeded / Failed / Skipped / Total] 238 / 140 / 4 / 382:  38%|███▊      | 382/1000 [38:06<1:01:39,  5.99s/it][Succeeded / Failed / Skipped / Total] 238 / 140 / 4 / 382:  38%|███▊      | 383/1000 [38:13<1:01:35,  5.99s/it][Succeeded / Failed / Skipped / Total] 239 / 140 / 4 / 383:  38%|███▊      | 383/1000 [38:13<1:01:35,  5.99s/it][Succeeded / Failed / Skipped / Total] 239 / 140 / 4 / 383:  38%|███▊      | 384/1000 [38:15<1:01:22,  5.98s/it][Succeeded / Failed / Skipped / Total] 240 / 140 / 4 / 384:  38%|███▊      | 384/1000 [38:15<1:01:22,  5.98s/it][Succeeded / Failed / Skipped / Total] 240 / 140 / 4 / 384:  38%|███▊      | 385/1000 [38:16<1:01:08,  5.97s/it][Succeeded / Failed / Skipped / Total] 241 / 140 / 4 / 385:  38%|███▊      | 385/1000 [38:16<1:01:08,  5.97s/it][Succeeded / Failed / Skipped / Total] 241 / 140 / 4 / 385:  39%|███▊      | 386/1000 [38:17<1:00:54,  5.95s/it][Succeeded / Failed / Skipped / Total] 242 / 140 / 4 / 386:  39%|███▊      | 386/1000 [38:17<1:00:54,  5.95s/it][Succeeded / Failed / Skipped / Total] 242 / 140 / 4 / 386:  39%|███▊      | 387/1000 [38:35<1:01:07,  5.98s/it]Creates a message with the specified detail message and stack trace . --> Constructor --> Socre: 1.0

[[[[Adv]]]]: public static Message [[create]] ( Throwable cause , String messageFormat , Object ... [[arguments]] ) { return [[create]] ( cause , ImmutableList . of ( ) , messageFormat , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .

[[[[Adv]]]]: public static Message [[contractors]] ( Throwable cause , String messageFormat , Object ... [[nez]] ) { return [[contractors]] ( cause , ImmutableList . of ( ) , messageFormat , [[nez]] ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause .
--------------------------------------------- Result 382 ---------------------------------------------
Creates a message with the specified message format and arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static Message create ( String messageFormat , Object ... [[arguments]] ) { return create ( null , messageFormat , [[arguments]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .

[[[[Adv]]]]: public static Message create ( String messageFormat , Object ... [[greenberg]] ) { return create ( null , messageFormat , [[greenberg]] ) ; }
[[[[Nl]]]]: Creates a new Message without a cause .
--------------------------------------------- Result 383 ---------------------------------------------
Removes stacktrace elements from the given exception --> performs bluray --> Socre: 1.0

[[[[Adv]]]]: private void [[pruneStacktrace]] ( Throwable throwable ) { for ( Throwable [[t]] = throwable ; [[t]] != null ; [[t]] = [[t]] . getCause ( ) ) { StackTraceElement [ ] [[stackTrace]] = [[t]] . getStackTrace ( ) ; List < StackTraceElement > [[pruned]] = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[stackTrace]] ) { String [[className]] = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( [[className]] ) && ! [[className]] . contains ( "$EnhancerByGuice$" ) ) { [[pruned]] . add ( element ) ; } } [[t]] . setStackTrace ( [[pruned]] . toArray ( new StackTraceElement [ [[pruned]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .

[[[[Adv]]]]: private void [[abdallah]] ( Throwable throwable ) { for ( Throwable [[bluray]] = throwable ; [[bluray]] != null ; [[bluray]] = [[bluray]] . getCause ( ) ) { StackTraceElement [ ] [[livin]] = [[bluray]] . getStackTrace ( ) ; List < StackTraceElement > [[telamon]] = Lists . newArrayList ( ) ; for ( StackTraceElement element : [[livin]] ) { String [[liquored]] = element . getClassName ( ) ; if ( ! AOP_INTERNAL_CLASSES . contains ( [[liquored]] ) && ! [[liquored]] . contains ( "$EnhancerByGuice$" ) ) { [[telamon]] . add ( element ) ; } } [[bluray]] . setStackTrace ( [[telamon]] . toArray ( new StackTraceElement [ [[telamon]] . size ( ) ] ) ) ; } }
[[[[Nl]]]]: Removes stacktrace elements related to AOP internal mechanics from the throwable s stack trace and any causes it may have .
--------------------------------------------- Result 384 ---------------------------------------------
Convert an object to another element . --> Checks if o isola --> Socre: 1.0

[[[[Adv]]]]: static Object [[convert]] ( Object o ) { ElementSource source = null ; if ( o instanceof ElementSource ) { source = ( ElementSource ) o ; o = source . getDeclaringSource ( ) ; } return [[convert]] ( o , source ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .

[[[[Adv]]]]: static Object [[isola]] ( Object o ) { ElementSource source = null ; if ( o instanceof ElementSource ) { source = ( ElementSource ) o ; o = source . getDeclaringSource ( ) ; } return [[isola]] ( o , source ) ; }
[[[[Nl]]]]: Formats an object in a user friendly way .
--------------------------------------------- Result 385 ---------------------------------------------
Formats a collection of error messages . --> Dump a list of errors --> Socre: 1.0

[[[[Adv]]]]: public static String [[formatMessages]] ( String heading , Collection < Message > [[errorMessages]] ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( [[errorMessages]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : [[errorMessages]] ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int [[causeIdx]] = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , [[causeIdx]] ) ; } } fmt . format ( "%n" ) ; } if ( [[errorMessages]] . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , [[errorMessages]] . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .

[[[[Adv]]]]: public static String [[dahlgren]] ( String heading , Collection < Message > [[crated]] ) { Formatter fmt = new Formatter ( ) . format ( heading ) . format ( ":%n%n" ) ; int index = 1 ; boolean displayCauses = getOnlyCause ( [[crated]] ) == null ; Map < Equivalence . Wrapper < Throwable > , Integer > causes = Maps . newHashMap ( ) ; for ( Message errorMessage : [[crated]] ) { int thisIdx = index ++ ; fmt . format ( "%s) %s%n" , thisIdx , errorMessage . getMessage ( ) ) ; List < Object > dependencies = errorMessage . getSources ( ) ; for ( int i = dependencies . size ( ) - 1 ; i >= 0 ; i -- ) { Object source = dependencies . get ( i ) ; formatSource ( fmt , source ) ; } Throwable cause = errorMessage . getCause ( ) ; if ( displayCauses && cause != null ) { Equivalence . Wrapper < Throwable > causeEquivalence = ThrowableEquivalence . INSTANCE . wrap ( cause ) ; if ( ! causes . containsKey ( causeEquivalence ) ) { causes . put ( causeEquivalence , thisIdx ) ; fmt . format ( "Caused by: %s" , Throwables . getStackTraceAsString ( cause ) ) ; } else { int [[backboard]] = causes . get ( causeEquivalence ) ; fmt . format ( "Caused by: %s (same stack trace as error #%s)" , cause . getClass ( ) . getName ( ) , [[backboard]] ) ; } } fmt . format ( "%n" ) ; } if ( [[crated]] . size ( ) == 1 ) { fmt . format ( "1 error" ) ; } else { fmt . format ( "%s errors" , [[crated]] . size ( ) ) ; } return fmt . toString ( ) ; }
[[[[Nl]]]]: Returns the formatted message for an exception with the specified messages .
--------------------------------------------- Result 386 ---------------------------------------------
Creates a message with the given message and dispatches the given message . --> Convenience factory method --> Socre: 1.0

[[[[Adv]]]]: public static Message create ( Throwable cause , List < Object > [[sources]] , String messageFormat , Object ... [[arguments]] ) { String message = format ( messageFormat , [[arguments]] ) ; return new Message ( [[sources]] , message , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .

[[[[Adv]]]]: public static Message create ( Throwable cause , List < Object > [[ceasefire]] , String messageFormat , Object ... [[immigration]] ) { String message = format ( messageFormat , [[immigration]] ) ; return new Message ( [[ceasefire]] , message , cause ) ; }
[[[[Nl]]]]: Creates a new Message with the given cause and a binding source stack .
--------------------------------------------- Result 387 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 242 / 141 / 4 / 387:  39%|███▊      | 387/1000 [38:35<1:01:07,  5.98s/it][Succeeded / Failed / Skipped / Total] 242 / 141 / 4 / 387:  39%|███▉      | 388/1000 [38:43<1:01:04,  5.99s/it][Succeeded / Failed / Skipped / Total] 243 / 141 / 4 / 388:  39%|███▉      | 388/1000 [38:43<1:01:04,  5.99s/it][Succeeded / Failed / Skipped / Total] 243 / 141 / 4 / 388:  39%|███▉      | 389/1000 [38:48<1:00:57,  5.99s/it][Succeeded / Failed / Skipped / Total] 243 / 142 / 4 / 389:  39%|███▉      | 389/1000 [38:48<1:00:57,  5.99s/it][Succeeded / Failed / Skipped / Total] 243 / 142 / 4 / 389:  39%|███▉      | 390/1000 [38:56<1:00:54,  5.99s/it][Succeeded / Failed / Skipped / Total] 244 / 142 / 4 / 390:  39%|███▉      | 390/1000 [38:56<1:00:54,  5.99s/it][Succeeded / Failed / Skipped / Total] 244 / 142 / 4 / 390:  39%|███▉      | 391/1000 [38:57<1:00:41,  5.98s/it][Succeeded / Failed / Skipped / Total] 245 / 142 / 4 / 391:  39%|███▉      | 391/1000 [38:57<1:00:41,  5.98s/it][Succeeded / Failed / Skipped / Total] 245 / 142 / 4 / 391:  39%|███▉      | 392/1000 [39:04<1:00:36,  5.98s/it][Succeeded / Failed / Skipped / Total] 246 / 142 / 4 / 392:  39%|███▉      | 392/1000 [39:04<1:00:36,  5.98s/it][Succeeded / Failed / Skipped / Total] 246 / 142 / 4 / 392:  39%|███▉      | 393/1000 [39:19<1:00:43,  6.00s/it][Succeeded / Failed / Skipped / Total] 246 / 143 / 4 / 393:  39%|███▉      | 393/1000 [39:19<1:00:43,  6.00s/it][Succeeded / Failed / Skipped / Total] 246 / 143 / 4 / 393:  39%|███▉      | 394/1000 [39:19<1:00:28,  5.99s/it][Succeeded / Failed / Skipped / Total] 246 / 143 / 5 / 394:  39%|███▉      | 394/1000 [39:19<1:00:28,  5.99s/it][Succeeded / Failed / Skipped / Total] 246 / 143 / 5 / 394:  40%|███▉      | 395/1000 [39:22<1:00:19,  5.98s/it]Determines if a class should be skipped . --> [[[FAILED]]]

[[[[Adv]]]]: private boolean [[shouldBeSkipped]] ( String [[className]] ) { return ( parent != null && parent . shouldBeSkipped ( [[className]] ) ) || classNamesToSkip . contains ( [[className]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .

[[[[Adv]]]]: private boolean [[hallow]] ( String [[preschool]] ) { return ( parent != null && parent . shouldBeSkipped ( [[preschool]] ) ) || classNamesToSkip . contains ( [[preschool]] ) ; }
[[[[Nl]]]]: Returns true if the className should be skipped .
--------------------------------------------- Result 388 ---------------------------------------------
Main entry point . --> Starts songwriting --> Socre: 1.0

[[[[Adv]]]]: public static void [[main]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector [[injector]] = Guice . createInjector ( module ) ; manage ( args [ 0 ] , [[injector]] ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .

[[[[Adv]]]]: public static void [[songwriting]] ( String [ ] args ) throws Exception { if ( args . length != 1 ) { System . err . println ( "Usage: java -Dcom.sun.management.jmxremote " + Manager . class . getName ( ) + " [module class name]" ) ; System . err . println ( "Then run 'jconsole' to connect." ) ; System . exit ( 1 ) ; } Module module = ( Module ) Class . forName ( args [ 0 ] ) . newInstance ( ) ; Injector [[aden]] = Guice . createInjector ( module ) ; manage ( args [ 0 ] , [[aden]] ) ; System . out . println ( "Press Ctrl+C to exit..." ) ;
[[[[Nl]]]]: Run with no arguments for usage instructions .
--------------------------------------------- Result 389 ---------------------------------------------
Gets the object from the list of module names . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[getFromClassNames]] ( List < String > moduleClassNames ) { Preconditions . checkNotNull ( moduleClassNames , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : moduleClassNames ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .

[[[[Adv]]]]: public Object [[paise]] ( List < String > moduleClassNames ) { Preconditions . checkNotNull ( moduleClassNames , "The list of module class names cannot be null." ) ; for ( final String moduleClassName : moduleClassNames ) { if ( ! shouldBeSkipped ( moduleClassName ) ) { return new StackTraceElement ( moduleClassName , "configure" , null , - 1 ) ; } } return UNKNOWN_SOURCE ; }
[[[[Nl]]]]: Returns the non - skipped module class name .
--------------------------------------------- Result 390 ---------------------------------------------
Sends the push state . --> For testing only --> Socre: 1.0

[[[[Adv]]]]: void [[pushState]] ( com . google . inject . Key < ? > [[key]] , Object source ) { doPushState ( [[key]] , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .

[[[[Adv]]]]: void [[cranks]] ( com . google . inject . Key < ? > [[villegas]] , Object source ) { doPushState ( [[villegas]] , source ) ; }
[[[[Nl]]]]: Adds to the state without setting the dependency .
--------------------------------------------- Result 391 ---------------------------------------------
Returns an initializable instance of the given instance . --> publicisation private --> Socre: 1.0

[[[[Adv]]]]: static < T > Initializable < T > [[of]] ( final T [[instance]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[instance]] ; } @ Override public String toString ( ) { return String . valueOf ( [[instance]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .

[[[[Adv]]]]: static < T > Initializable < T > [[privatisation]] ( final T [[dispose]] ) { return new Initializable < T > ( ) { @ Override public T get ( ) { return [[dispose]] ; } @ Override public String toString ( ) { return String . valueOf ( [[dispose]] ) ; } } ; }
[[[[Nl]]]]: Returns an initializable for an instance that requires no initialization .
--------------------------------------------- Result 392 ---------------------------------------------
Called when a connection event is received . --> Called on connection event --> Socre: 1.0

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor [[processor]] : processorList ) { [[processor]] . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .

[[[[Adv]]]]: public void onEvent ( ConnectionEventType type , String remoteAddr , Connection conn ) { List < ConnectionEventProcessor > processorList = this . processors . get ( type ) ; if ( processorList != null ) { for ( ConnectionEventProcessor [[brainard]] : processorList ) { [[brainard]] . onEvent ( remoteAddr , conn ) ; } } }
[[[[Nl]]]]: Dispatch events .
--------------------------------------------- Result 393 ---------------------------------------------
Get the result task result . --> [[[FAILED]]]

[[[[Adv]]]]: public static < [[T]] > [[T]] getFutureTaskResult ( RunStateRecordedFutureTask < [[T]] > task , Logger logger ) { [[T]] [[t]] = null ; if ( null != task ) { try { [[t]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[t]] ; }
[[[[Nl]]]]: get the result of a future task

[[[[Adv]]]]: public static < [[fertilization]] > [[fertilization]] getFutureTaskResult ( RunStateRecordedFutureTask < [[fertilization]] > task , Logger logger ) { [[fertilization]] [[devoid]] = null ; if ( null != task ) { try { [[devoid]] = task . getAfterRun ( ) ; } catch ( InterruptedException e ) { logger . error ( "Future task interrupted!" , e ) ; } catch ( ExecutionException e ) { logger . error ( "Future task execute failed!" , e ) ; } catch ( FutureTaskNotRunYetException e ) { logger . error ( "Future task has not run yet!" , e ) ; } catch ( FutureTaskNotCompleted e ) { logger . error ( "Future task has not completed!" , e ) ; } } return [[devoid]] ; }
[[[[Nl]]]]: get the result of a future task
--------------------------------------------- Result 394 ---------------------------------------------
Suppress unchecked throwables . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static void launderThrowable ( Throwable t ) { if ( t instanceof RuntimeException ) { throw ( RuntimeException ) t ; } else if ( t instanceof Error ) { throw ( Error ) t ; } else { throw new IllegalStateException ( "Not unchecked!" , t ) ; } }
[[[[Nl]]]]: launder the throwable
--------------------------------------------- Result 395 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 246 / 144 / 5 / 395:  40%|███▉      | 395/1000 [39:22<1:00:19,  5.98s/it][Succeeded / Failed / Skipped / Total] 246 / 144 / 5 / 395:  40%|███▉      | 396/1000 [39:38<1:00:27,  6.01s/it][Succeeded / Failed / Skipped / Total] 246 / 145 / 5 / 396:  40%|███▉      | 396/1000 [39:38<1:00:27,  6.01s/it][Succeeded / Failed / Skipped / Total] 246 / 145 / 5 / 396:  40%|███▉      | 397/1000 [39:41<1:00:17,  6.00s/it][Succeeded / Failed / Skipped / Total] 247 / 145 / 5 / 397:  40%|███▉      | 397/1000 [39:41<1:00:17,  6.00s/it][Succeeded / Failed / Skipped / Total] 247 / 145 / 5 / 397:  40%|███▉      | 398/1000 [39:43<1:00:05,  5.99s/it][Succeeded / Failed / Skipped / Total] 247 / 146 / 5 / 398:  40%|███▉      | 398/1000 [39:43<1:00:05,  5.99s/it][Succeeded / Failed / Skipped / Total] 247 / 146 / 5 / 398:  40%|███▉      | 399/1000 [39:46<59:55,  5.98s/it]  [Succeeded / Failed / Skipped / Total] 247 / 147 / 5 / 399:  40%|███▉      | 399/1000 [39:46<59:55,  5.98s/it][Succeeded / Failed / Skipped / Total] 247 / 147 / 5 / 399:  40%|████      | 400/1000 [39:53<59:50,  5.98s/it][Succeeded / Failed / Skipped / Total] 248 / 147 / 5 / 400:  40%|████      | 400/1000 [39:53<59:50,  5.98s/it][Succeeded / Failed / Skipped / Total] 248 / 147 / 5 / 400:  40%|████      | 401/1000 [39:53<59:35,  5.97s/it][Succeeded / Failed / Skipped / Total] 248 / 147 / 6 / 401:  40%|████      | 401/1000 [39:53<59:35,  5.97s/it][Succeeded / Failed / Skipped / Total] 248 / 147 / 6 / 401:  40%|████      | 402/1000 [39:55<59:23,  5.96s/it]Push the given dependency and return it . --> [[[FAILED]]]

[[[[Adv]]]]: Dependency < ? > pushDependency ( Dependency < ? > dependency , Object [[source]] ) { Dependency < ? > previous = this . [[dependency]] ; this . [[dependency]] = dependency ; doPushState ( dependency , [[source]] ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .

[[[[Adv]]]]: Dependency < ? > pushDependency ( Dependency < ? > dependency , Object [[ascertain]] ) { Dependency < ? > previous = this . [[webcam]] ; this . [[webcam]] = dependency ; doPushState ( dependency , [[ascertain]] ) ; return previous ; }
[[[[Nl]]]]: Sets the new current dependency & adds it to the state .
--------------------------------------------- Result 396 ---------------------------------------------
Registers a connection event processor for the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[addConnectionEventProcessor]] ( ConnectionEventType [[type]] , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[type]] ) ; if ( processorList == null ) { this . processors . putIfAbsent ( [[type]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( [[type]] ) ; } processorList . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .

[[[[Adv]]]]: public void [[niles]] ( ConnectionEventType [[controlling]] , ConnectionEventProcessor processor ) { List < ConnectionEventProcessor > processorList = this . processors . get ( [[controlling]] ) ; if ( processorList == null ) { this . processors . putIfAbsent ( [[controlling]] , new ArrayList < ConnectionEventProcessor > ( 1 ) ) ; processorList = this . processors . get ( [[controlling]] ) ; } processorList . add ( processor ) ; }
[[[[Nl]]]]: Add event processor .
--------------------------------------------- Result 397 ---------------------------------------------
Register the default processor --> Registers scouring --> Socre: 1.0

[[[[Adv]]]]: public void [[registerDefaultProcessor]] ( RemotingProcessor < ? > processor ) { if ( this . [[defaultProcessor]] == null ) { this . [[defaultProcessor]] = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[defaultProcessor]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .

[[[[Adv]]]]: public void [[scouring]] ( RemotingProcessor < ? > processor ) { if ( this . [[kinta]] == null ) { this . [[kinta]] = processor ; } else { throw new IllegalStateException ( "The defaultProcessor has already been registered: " + this . [[kinta]] . getClass ( ) ) ; } }
[[[[Nl]]]]: Register the default processor to process command with no specific processor registered .
--------------------------------------------- Result 398 ---------------------------------------------
This method will be called when the provider is null . --> [[[FAILED]]]

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > [[provider]] , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = [[provider]] . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .

[[[[Adv]]]]: protected T provision ( Provider < ? extends T > [[webcam]] , Dependency < ? > dependency , ConstructionContext < T > constructionContext ) throws InternalProvisionException { T t = [[webcam]] . get ( ) ; if ( t == null && ! dependency . isNullable ( ) ) { InternalProvisionException . onNullInjectedIntoNonNullableDependency ( source , dependency ) ; } constructionContext . setProxyDelegates ( t ) ; return t ; }
[[[[Nl]]]]: Provisions a new instance . Subclasses should override this to catch exceptions & rethrow as ErrorsExceptions .
--------------------------------------------- Result 399 ---------------------------------------------
Register a remotingProcessor --> [[[FAILED]]]

[[[[Adv]]]]: public void registerProcessor ( CommandCode cmdCode , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .

[[[[Adv]]]]: public void registerProcessor ( CommandCode cmdCode , RemotingProcessor < ? > processor ) { if ( this . cmd2processors . containsKey ( cmdCode ) ) { logger . warn ( "Processor for cmd={} is already registered, the processor is {}, and changed to {}" , cmdCode , cmd2processors . get ( cmdCode ) . getClass ( ) . getName ( ) , processor . getClass ( ) . getName ( ) ) ; } this . cmd2processors . put ( cmdCode , processor ) ; }
[[[[Nl]]]]: Register processor to process command that has the command code of cmdCode .
--------------------------------------------- Result 400 ---------------------------------------------
Get the remoting processor for a command . --> Returns merciiProcessor --> Socre: 1.0

[[[[Adv]]]]: public RemotingProcessor < ? > [[getProcessor]] ( CommandCode [[cmdCode]] ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( [[cmdCode]] ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .

[[[[Adv]]]]: public RemotingProcessor < ? > [[merci]] ( CommandCode [[abstraction]] ) { RemotingProcessor < ? > processor = this . cmd2processors . get ( [[abstraction]] ) ; if ( processor != null ) { return processor ; } return this . defaultProcessor ; }
[[[[Nl]]]]: Get the specific processor with command code of cmdCode if registered otherwise the default processor is returned .
--------------------------------------------- Result 401 ---------------------------------------------
Scans for connections that have expired . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override public void scan ( ) { if ( null != this . connTasks && ! this . connTasks . isEmpty ( ) ) { Iterator < String > iter = this . connTasks . keySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { String poolKey = iter . next ( ) ; ConnectionPool pool = this . getConnectionPool ( this . connTasks . get ( poolKey ) ) ; if ( null != pool ) { pool . scan ( ) ; if ( pool . isEmpty ( ) ) { if ( ( System . currentTimeMillis ( ) - pool . getLastAccessTimestamp ( ) ) > DEFAULT_EXPIRE_TIME ) { iter . remove ( ) ; logger . warn ( "Remove expired pool task of poolKey {} which is empty." , poolKey ) ; } } } } } }
[[[[Nl]]]]: in case of cache pollution and connection leak to do schedule scan
--------------------------------------------- Result 402 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 249 / 147 / 6 / 402:  40%|████      | 402/1000 [39:55<59:23,  5.96s/it][Succeeded / Failed / Skipped / Total] 249 / 147 / 6 / 402:  40%|████      | 403/1000 [40:06<59:25,  5.97s/it][Succeeded / Failed / Skipped / Total] 250 / 147 / 6 / 403:  40%|████      | 403/1000 [40:06<59:25,  5.97s/it][Succeeded / Failed / Skipped / Total] 250 / 147 / 6 / 403:  40%|████      | 404/1000 [40:09<59:14,  5.96s/it][Succeeded / Failed / Skipped / Total] 251 / 147 / 6 / 404:  40%|████      | 404/1000 [40:09<59:14,  5.96s/it][Succeeded / Failed / Skipped / Total] 251 / 147 / 6 / 404:  40%|████      | 405/1000 [40:12<59:04,  5.96s/it][Succeeded / Failed / Skipped / Total] 251 / 148 / 6 / 405:  40%|████      | 405/1000 [40:12<59:04,  5.96s/it][Succeeded / Failed / Skipped / Total] 251 / 148 / 6 / 405:  41%|████      | 406/1000 [40:13<58:50,  5.94s/it][Succeeded / Failed / Skipped / Total] 252 / 148 / 6 / 406:  41%|████      | 406/1000 [40:13<58:50,  5.94s/it][Succeeded / Failed / Skipped / Total] 252 / 148 / 6 / 406:  41%|████      | 407/1000 [40:18<58:44,  5.94s/it][Succeeded / Failed / Skipped / Total] 253 / 148 / 6 / 407:  41%|████      | 407/1000 [40:18<58:44,  5.94s/it][Succeeded / Failed / Skipped / Total] 253 / 148 / 6 / 407:  41%|████      | 408/1000 [40:31<58:47,  5.96s/it][Succeeded / Failed / Skipped / Total] 254 / 148 / 6 / 408:  41%|████      | 408/1000 [40:31<58:47,  5.96s/it][Succeeded / Failed / Skipped / Total] 254 / 148 / 6 / 408:  41%|████      | 409/1000 [40:33<58:36,  5.95s/it][Succeeded / Failed / Skipped / Total] 255 / 148 / 6 / 409:  41%|████      | 409/1000 [40:33<58:36,  5.95s/it][Succeeded / Failed / Skipped / Total] 255 / 148 / 6 / 409:  41%|████      | 410/1000 [40:41<58:34,  5.96s/it]Gets a map of all connection pools . --> region > getConnectionPool --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > getAll ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > [[entry]] = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( [[entry]] . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( [[entry]] . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > getAll ( ) { Map < String , List < Connection > > allConnections = new HashMap < String , List < Connection > > ( ) ; Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iterator = this . getConnPools ( ) . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > [[adapt]] = iterator . next ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( [[adapt]] . getValue ( ) , logger ) ; if ( null != pool ) { allConnections . put ( [[adapt]] . getKey ( ) , pool . getAll ( ) ) ; } } return allConnections ; }
[[[[Nl]]]]: Get all connections of all poolKey .
--------------------------------------------- Result 403 ---------------------------------------------
Decodes protocol code . --> Checks to see if this songwriting is available --> Socre: 1.0

[[[[Adv]]]]: protected ProtocolCode [[decodeProtocolCode]] ( ByteBuf [[in]] ) { if ( [[in]] . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; [[in]] . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code

[[[[Adv]]]]: protected ProtocolCode [[afflicting]] ( ByteBuf [[songwriting]] ) { if ( [[songwriting]] . readableBytes ( ) >= protocolCodeLength ) { byte [ ] protocolCodeBytes = new byte [ protocolCodeLength ] ; [[songwriting]] . readBytes ( protocolCodeBytes ) ; return ProtocolCode . fromBytes ( protocolCodeBytes ) ; } return null ; }
[[[[Nl]]]]: decode the protocol code
--------------------------------------------- Result 404 ---------------------------------------------
Retrieves and creates a new connection . --> This method is used to connect to datastore --> Socre: 1.0

[[[[Adv]]]]: @ Override public Connection [[getAndCreateIfAbsent]] ( Url [[url]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .

[[[[Adv]]]]: @ Override public Connection [[dadi]] ( Url [[thrusters]] ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections .
--------------------------------------------- Result 405 ---------------------------------------------
Create a new connection --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[createConnectionAndHealIfNeed]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .

[[[[Adv]]]]: @ Override public void [[changeover]] ( Url url ) throws InterruptedException , RemotingException {
[[[[Nl]]]]: If no task cached create one and initialize the connections . If task cached check whether the number of connections adequate if not then heal it .
--------------------------------------------- Result 406 ---------------------------------------------
Try to get a given URL . --> Tries to retrieve a given URL . --> Socre: 1.0

[[[[Adv]]]]: private Url tryGet ( String [[url]] ) { SoftReference < Url > softRef = Url . parsedUrls . get ( [[url]] ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache

[[[[Adv]]]]: private Url tryGet ( String [[demonstrative]] ) { SoftReference < Url > softRef = Url . parsedUrls . get ( [[demonstrative]] ) ; return ( null == softRef ) ? null : softRef . get ( ) ; }
[[[[Nl]]]]: try get from cache
--------------------------------------------- Result 407 ---------------------------------------------
Create connection . --> This method performs the actual connection --> Socre: 1.0

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool [[pool]] , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = [[pool]] . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; [[pool]] . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections

[[[[Adv]]]]: private void doCreate ( final Url url , final ConnectionPool [[binoculars]] , final String taskName , final int syncCreateNumWhenNotWarmup ) throws RemotingException { final int actualNum = [[binoculars]] . size ( ) ; final int expectNum = url . getConnNum ( ) ; if ( actualNum < expectNum ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "actual num {}, expect num {}, task name {}" , actualNum , expectNum , taskName ) ; } if ( url . isConnWarmup ( ) ) { for ( int i = actualNum ; i < expectNum ; ++ i ) { Connection connection = create ( url ) ; [[binoculars]] . add ( connection ) ; } } else { if ( syncCreateNumWhenNotWarmup < 0 || syncCreateNumWhenNotWarmup > url . getConnNum ( ) ) { throw new IllegalArgumentException ( "sync create number when not warmup should be [0," + url . getConnNum ( ) + "]" ) ; }
[[[[Nl]]]]: do create connections
--------------------------------------------- Result 408 ---------------------------------------------
Closes a connection . --> Removes an earth . --> Socre: 1.0

[[[[Adv]]]]: public void [[closeConnection]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . [[connectionManager]] . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address

[[[[Adv]]]]: public void [[earth]] ( String addr ) { Url url = this . addressParser . parse ( addr ) ; this . [[foxx]] . remove ( url . getUniqueKey ( ) ) ; }
[[[[Nl]]]]: Close all connections of a address
--------------------------------------------- Result 409 ---------------------------------------------
Tries to repair if needed . --> Peepo form . --> Socre: 1.0

[[[[Adv]]]]: private void [[healIfNeed]] ( ConnectionPool [[pool]] , Url [[url]] ) throws RemotingException , InterruptedException { String poolKey = [[url]] . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected

[[[[Adv]]]]: private void [[chloroform]] ( ConnectionPool [[facilitator]] , Url [[chopra]] ) throws RemotingException , InterruptedException { String poolKey = [[chopra]] . getUniqueKey ( ) ;
[[[[Nl]]]]: execute heal connection tasks if the actual number of connections in pool is less than expected
--------------------------------------------- Result 410 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 256 / 148 / 6 / 410:  41%|████      | 410/1000 [40:41<58:34,  5.96s/it][Succeeded / Failed / Skipped / Total] 256 / 148 / 6 / 410:  41%|████      | 411/1000 [40:43<58:21,  5.94s/it][Succeeded / Failed / Skipped / Total] 257 / 148 / 6 / 411:  41%|████      | 411/1000 [40:43<58:21,  5.94s/it][Succeeded / Failed / Skipped / Total] 257 / 148 / 6 / 411:  41%|████      | 412/1000 [40:55<58:24,  5.96s/it][Succeeded / Failed / Skipped / Total] 257 / 149 / 6 / 412:  41%|████      | 412/1000 [40:55<58:24,  5.96s/it][Succeeded / Failed / Skipped / Total] 257 / 149 / 6 / 412:  41%|████▏     | 413/1000 [40:57<58:13,  5.95s/it][Succeeded / Failed / Skipped / Total] 257 / 150 / 6 / 413:  41%|████▏     | 413/1000 [40:57<58:13,  5.95s/it][Succeeded / Failed / Skipped / Total] 257 / 150 / 6 / 413:  41%|████▏     | 414/1000 [40:58<57:59,  5.94s/it][Succeeded / Failed / Skipped / Total] 257 / 150 / 7 / 414:  41%|████▏     | 414/1000 [40:58<57:59,  5.94s/it][Succeeded / Failed / Skipped / Total] 257 / 150 / 7 / 414:  42%|████▏     | 415/1000 [41:00<57:48,  5.93s/it][Succeeded / Failed / Skipped / Total] 258 / 150 / 7 / 415:  42%|████▏     | 415/1000 [41:00<57:48,  5.93s/it][Succeeded / Failed / Skipped / Total] 258 / 150 / 7 / 415:  42%|████▏     | 416/1000 [41:02<57:37,  5.92s/it]Sets the specified attribute to the specified value . --> getter for entity --> Socre: 1.0

[[[[Adv]]]]: public Object [[setAttributeIfAbsent]] ( String key , Object value ) { return attributes . putIfAbsent ( key , value ) ; }
[[[[Nl]]]]: set attribute if key absent .

[[[[Adv]]]]: public Object [[entre]] ( String key , Object value ) { return attributes . putIfAbsent ( key , value ) ; }
[[[[Nl]]]]: set attribute if key absent .
--------------------------------------------- Result 411 ---------------------------------------------
Remove a task task --> Close the pool for the given key . --> Socre: 1.0

[[[[Adv]]]]: private void [[removeTask]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > [[task]] = this . connTasks . remove ( poolKey ) ; if ( null != [[task]] ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( [[task]] , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections

[[[[Adv]]]]: private void [[alabaster]] ( String poolKey ) { RunStateRecordedFutureTask < ConnectionPool > [[augie]] = this . connTasks . remove ( poolKey ) ; if ( null != [[augie]] ) { ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( [[augie]] , logger ) ; if ( null != pool ) { pool . removeAllAndTryClose ( ) ; } } }
[[[[Nl]]]]: remove task and remove all connections
--------------------------------------------- Result 412 ---------------------------------------------
Called when the connection is closed . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[onClose]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .

[[[[Adv]]]]: public void [[astrology]] ( ) { Iterator < Entry < Integer , InvokeFuture > > iter = invokeFutureMap . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Entry < Integer , InvokeFuture > entry = iter . next ( ) ; iter . remove ( ) ; InvokeFuture future = entry . getValue ( ) ; if ( future != null ) { future . putResponse ( future . createConnectionClosedResponse ( this . getRemoteAddress ( ) ) ) ; future . cancelTimeout ( ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } }
[[[[Nl]]]]: Do something when closing .
--------------------------------------------- Result 413 ---------------------------------------------
Closes the connection . --> [[[FAILED]]]

[[[[Adv]]]]: public void close ( ) { if ( closed . compareAndSet ( "[[False]]" != "[[False]]" , True ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[this]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .

[[[[Adv]]]]: public void close ( ) { if ( closed . compareAndSet ( "[["Translator" != "Translator"]]" != "[["Translator" != "Translator"]]" , True ) ) { try { if ( this . getChannel ( ) != null ) { this . getChannel ( ) . close ( ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture future ) throws Exception { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Close the connection to remote address={}, result={}, cause={}" , RemotingUtil . parseRemoteAddress ( Connection . [[chaba]] . getChannel ( ) ) , future . isSuccess ( ) , future . cause ( ) ) ; } } } ) ; } } catch ( Exception e ) { logger . warn ( "Exception caught when closing connection {}" , RemotingUtil . parseRemoteAddress ( Connection . [[chaba]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Close the connection .
--------------------------------------------- Result 414 ---------------------------------------------
Send RpcRequestCommandCommand --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean deserializeRequestCommand ( RemotingContext ctx , RpcRequestCommand cmd , int level ) { boolean result ; try { cmd . deserialize ( level ) ; result = True ; } catch ( DeserializationException e ) { logger . error ( "DeserializationException occurred when process in RpcRequestProcessor, id={}, deserializeLevel={}" , cmd . getId ( ) , RpcDeserializeLevel . valueOf ( level ) , e ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , ResponseStatus . SERVER_DESERIAL_EXCEPTION , e ) ) ; result = False ; } catch ( Throwable t ) { String errMsg = "Deserialize RpcRequestCommand failed in RpcRequestProcessor, id=" + cmd . getId ( ) + ", deserializeLevel=" + level ; logger . error ( errMsg , t ) ; sendResponseIfNecessary ( ctx , cmd . getType ( ) , this . getCommandFactory ( ) . createExceptionResponse ( cmd . getId ( ) , t , errMsg ) ) ; result = False ; } return result ; }
[[[[Nl]]]]: deserialize request command
--------------------------------------------- Result 415 ---------------------------------------------
Register a user processor --> Registers the goldblum --> Socre: 1.0

[[[[Adv]]]]: private static void [[registerUserProcessor]] ( MultiInterestUserProcessor < ? > [[processor]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[processor]] . multiInterest ( ) || [[processor]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[processor]] . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , [[processor]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .

[[[[Adv]]]]: private static void [[goldblum]] ( MultiInterestUserProcessor < ? > [[batavia]] , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == [[batavia]] . multiInterest ( ) || [[batavia]] . multiInterest ( ) . isEmpty ( ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } for ( String interest : [[batavia]] . multiInterest ( ) ) { UserProcessor < ? > preProcessor = userProcessors . putIfAbsent ( interest , [[batavia]] ) ; if ( preProcessor != null ) { String errMsg = "Processor with interest key [" + interest + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register multi - interest user processor .
--------------------------------------------- Result 416 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 259 / 150 / 7 / 416:  42%|████▏     | 416/1000 [41:02<57:37,  5.92s/it][Succeeded / Failed / Skipped / Total] 259 / 150 / 7 / 416:  42%|████▏     | 417/1000 [41:05<57:26,  5.91s/it][Succeeded / Failed / Skipped / Total] 260 / 150 / 7 / 417:  42%|████▏     | 417/1000 [41:05<57:26,  5.91s/it][Succeeded / Failed / Skipped / Total] 260 / 150 / 7 / 417:  42%|████▏     | 418/1000 [41:06<57:13,  5.90s/it][Succeeded / Failed / Skipped / Total] 261 / 150 / 7 / 418:  42%|████▏     | 418/1000 [41:06<57:13,  5.90s/it][Succeeded / Failed / Skipped / Total] 261 / 150 / 7 / 418:  42%|████▏     | 419/1000 [41:11<57:07,  5.90s/it][Succeeded / Failed / Skipped / Total] 262 / 150 / 7 / 419:  42%|████▏     | 419/1000 [41:11<57:07,  5.90s/it][Succeeded / Failed / Skipped / Total] 262 / 150 / 7 / 419:  42%|████▏     | 420/1000 [41:13<56:55,  5.89s/it]Register a user processor --> trace to rpc server --> Socre: 1.0

[[[[Adv]]]]: public static void [[registerUserProcessor]] ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { [[registerUserProcessor]] ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > [[preProcessor]] = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( [[preProcessor]] != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .

[[[[Adv]]]]: public static void [[terrace]] ( UserProcessor < ? > processor , ConcurrentHashMap < String , UserProcessor < ? > > userProcessors ) { if ( null == processor ) { throw new RuntimeException ( "User processor should not be null!" ) ; } if ( processor instanceof MultiInterestUserProcessor ) { [[terrace]] ( ( MultiInterestUserProcessor ) processor , userProcessors ) ; } else { if ( StringUtils . isBlank ( processor . interest ( ) ) ) { throw new RuntimeException ( "Processor interest should not be blank!" ) ; } UserProcessor < ? > [[addicts]] = userProcessors . putIfAbsent ( processor . interest ( ) , processor ) ; if ( [[addicts]] != null ) { String errMsg = "Processor with interest key [" + processor . interest ( ) + "] has already been registered to rpc server, can not register again!" ; throw new RuntimeException ( errMsg ) ; } } }
[[[[Nl]]]]: Help register single - interest user processor .
--------------------------------------------- Result 417 ---------------------------------------------
Dispatch request to user processor --> Dispatches RpcRequestCommandCommandCommand . --> Socre: 1.0

[[[[Adv]]]]: private void dispatchToUserProcessor ( RemotingContext ctx , RpcRequestCommand cmd ) { final int [[id]] = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor

[[[[Adv]]]]: private void dispatchToUserProcessor ( RemotingContext ctx , RpcRequestCommand cmd ) { final int [[bayonne]] = cmd . getId ( ) ; final byte type = cmd . getType ( ) ;
[[[[Nl]]]]: dispatch request command to user processor
--------------------------------------------- Result 418 ---------------------------------------------
Pre - processes the remoting context . --> Preprocess request command --> Socre: 1.0

[[[[Adv]]]]: private void preProcessRemotingContext ( RemotingContext [[ctx]] , RpcRequestCommand cmd , long currentTimestamp ) { [[ctx]] . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; [[ctx]] . setTimeout ( cmd . getTimeout ( ) ) ; [[ctx]] . setRpcCommandType ( cmd . getType ( ) ) ; [[ctx]] . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz

[[[[Adv]]]]: private void preProcessRemotingContext ( RemotingContext [[armenian]] , RpcRequestCommand cmd , long currentTimestamp ) { [[armenian]] . setArriveTimestamp ( cmd . getArriveTime ( ) ) ; [[armenian]] . setTimeout ( cmd . getTimeout ( ) ) ; [[armenian]] . setRpcCommandType ( cmd . getType ( ) ) ; [[armenian]] . getInvokeContext ( ) . putIfAbsent ( InvokeContext . BOLT_PROCESS_WAIT_TIME , currentTimestamp - cmd . getArriveTime ( ) ) ; }
[[[[Nl]]]]: pre process remoting context initial some useful infos and pass to biz
--------------------------------------------- Result 419 ---------------------------------------------
Log timeout log . --> Dispatches RpcRequestCommandCommand --> Socre: 1.0

[[[[Adv]]]]: private void [[timeoutLog]] ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String [[remoteAddr]] = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { [[remoteAddr]] = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , [[remoteAddr]] , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .

[[[[Adv]]]]: private void [[distorted]] ( final RpcRequestCommand cmd , long currentTimestamp , RemotingContext ctx ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "request id [{}] currenTimestamp [{}] - arriveTime [{}] = server cost [{}] >= timeout value [{}]." , cmd . getId ( ) , currentTimestamp , cmd . getArriveTime ( ) , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; } String [[lingered]] = "UNKNOWN" ; if ( null != ctx ) { ChannelHandlerContext channelCtx = ctx . getChannelContext ( ) ; Channel channel = channelCtx . channel ( ) ; if ( null != channel ) { [[lingered]] = RemotingUtil . parseRemoteAddress ( channel ) ; } } logger . warn ( "Rpc request id[{}], from remoteAddr[{}] stop process, total wait time in queue is [{}], client timeout setting is [{}]." , cmd . getId ( ) , [[lingered]] , ( currentTimestamp - cmd . getArriveTime ( ) ) , cmd . getTimeout ( ) ) ; }
[[[[Nl]]]]: print some log when request timeout and discarded in io thread .
--------------------------------------------- Result 420 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 263 / 150 / 7 / 420:  42%|████▏     | 420/1000 [41:13<56:55,  5.89s/it][Succeeded / Failed / Skipped / Total] 263 / 150 / 7 / 420:  42%|████▏     | 421/1000 [41:21<56:53,  5.90s/it][Succeeded / Failed / Skipped / Total] 264 / 150 / 7 / 421:  42%|████▏     | 421/1000 [41:21<56:53,  5.90s/it][Succeeded / Failed / Skipped / Total] 265 / 150 / 7 / 422:  42%|████▏     | 422/1000 [41:21<56:39,  5.88s/it][Succeeded / Failed / Skipped / Total] 265 / 150 / 7 / 422:  42%|████▏     | 423/1000 [41:22<56:25,  5.87s/it][Succeeded / Failed / Skipped / Total] 265 / 150 / 8 / 423:  42%|████▏     | 423/1000 [41:22<56:25,  5.87s/it]Performs invocation on a remoting command . --> Manage a timeout --> Socre: 1.0

[[[[Adv]]]]: protected void [[invokeWithCallback]] ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .

[[[[Adv]]]]: protected void [[armory]] ( final Connection conn , final RemotingCommand request , final InvokeCallback invokeCallback , final int timeoutMillis ) { final InvokeFuture future = createInvokeFuture ( conn , request , request . getInvokeContext ( ) , invokeCallback ) ; conn . addInvokeFuture ( future ) ; final int requestId = request . getId ( ) ; try { Timeout timeout = TimerHolder . getTimer ( ) . newTimeout ( new TimerTask ( ) { @ Override public void run ( Timeout timeout ) throws Exception { InvokeFuture future = conn . removeInvokeFuture ( requestId ) ; if ( future != null ) { future . putResponse ( commandFactory . createTimeoutResponse ( conn . getRemoteAddress ( ) ) ) ; future . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } } } , timeoutMillis , TimeUnit . MILLISECONDS ) ; future . addTimeout ( timeout ) ; conn . getChannel ( ) . writeAndFlush ( request ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture cf ) throws Exception { if ( ! cf . isSuccess ( ) ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , cf . cause ( ) ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , cf . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { InvokeFuture f = conn . removeInvokeFuture ( requestId ) ; if ( f != null ) { f . cancelTimeout ( ) ; f . putResponse ( commandFactory . createSendFailedResponse ( conn . getRemoteAddress ( ) , e ) ) ; f . tryAsyncExecuteInvokeCallbackAbnormally ( ) ; } logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( conn . getChannel ( ) ) , e ) ; } }
[[[[Nl]]]]: Invocation with callback .
--------------------------------------------- Result 421 ---------------------------------------------
Converts a bit set to a byte value . --> Convenience method for rounding bits . --> Socre: 1.0

[[[[Adv]]]]: public static byte [[toByte]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte

[[[[Adv]]]]: public static byte [[apologising]] ( BitSet bs ) { int value = 0 ; for ( int i = 0 ; i < bs . length ( ) ; ++ i ) { if ( bs . get ( i ) ) { value += 1 << i ; } } if ( bs . length ( ) > 7 ) { throw new IllegalArgumentException ( "The byte value " + value + " generated according to bit set " + bs + " is out of range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } return ( byte ) value ; }
[[[[Nl]]]]: from bit set to byte
--------------------------------------------- Result 422 ---------------------------------------------
Debug log messages . --> Disconnects from the server --> Socre: 1.0

[[[[Adv]]]]: private void [[debugLog]] ( RemotingContext ctx , RpcRequestCommand [[cmd]] , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , [[cmd]] . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , [[cmd]] . getId ( ) , currentTimestamp , [[cmd]] . getArriveTime ( ) , ( currentTimestamp - [[cmd]] . getArriveTime ( ) ) , [[cmd]] . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request

[[[[Adv]]]]: private void [[abstaining]] ( RemotingContext ctx , RpcRequestCommand [[xiu]] , long currentTimestamp ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( "Rpc request received! requestId={}, from {}" , [[xiu]] . getId ( ) , RemotingUtil . parseRemoteAddress ( ctx . getChannelContext ( ) . channel ( ) ) ) ; logger . debug ( "request id {} currenTimestamp {} - arriveTime {} = server cost {} < timeout {}." , [[xiu]] . getId ( ) , currentTimestamp , [[xiu]] . getArriveTime ( ) , ( currentTimestamp - [[xiu]] . getArriveTime ( ) ) , [[xiu]] . getTimeout ( ) ) ; } }
[[[[Nl]]]]: print some debug log when receive request
--------------------------------------------- Result 423 ---------------------------------------------
Converts an integer value into a BitSet . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static BitSet toBitSet ( int value ) { if ( value > Byte . MAX_VALUE || value < Byte . MIN_VALUE ) { throw new IllegalArgumentException ( "The value " + value + " is out of byte range, should be limited between [" + Byte . MIN_VALUE + "] to [" + Byte . MAX_VALUE + "]" ) ; } BitSet bs = new BitSet ( ) ; int index = 0 ; while ( value != 0 ) { if ( value % 2 != 0 ) { bs . set ( index ) ; } ++ index ; value = ( byte ) ( value >> 1 ) ; } return bs ; }
[[[[Nl]]]]: from byte to bit set
--------------------------------------------- Result 424 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 266 / 150 / 8 / 424:  42%|████▏     | 424/1000 [41:23<56:13,  5.86s/it][Succeeded / Failed / Skipped / Total] 266 / 150 / 8 / 424:  42%|████▎     | 425/1000 [41:27<56:05,  5.85s/it][Succeeded / Failed / Skipped / Total] 267 / 150 / 8 / 425:  42%|████▎     | 425/1000 [41:27<56:05,  5.85s/it][Succeeded / Failed / Skipped / Total] 268 / 150 / 8 / 426:  43%|████▎     | 426/1000 [41:35<56:01,  5.86s/it][Succeeded / Failed / Skipped / Total] 268 / 150 / 8 / 426:  43%|████▎     | 426/1000 [41:40<56:08,  5.87s/it][Succeeded / Failed / Skipped / Total] 268 / 150 / 8 / 426:  43%|████▎     | 427/1000 [41:43<55:59,  5.86s/it][Succeeded / Failed / Skipped / Total] 269 / 150 / 8 / 427:  43%|████▎     | 427/1000 [41:43<55:59,  5.86s/it][Succeeded / Failed / Skipped / Total] 269 / 150 / 8 / 427:  43%|████▎     | 428/1000 [41:45<55:48,  5.85s/it]Process a message --> Called when a message is received --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[process]] ( RemotingContext ctx , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask task = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { defaultExecutor . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .

[[[[Adv]]]]: @ Override public void [[sequence]] ( RemotingContext ctx , T msg , ExecutorService defaultExecutor ) throws Exception { ProcessTask task = new ProcessTask ( ctx , msg ) ; if ( this . getExecutor ( ) != null ) { this . getExecutor ( ) . execute ( task ) ; } else { defaultExecutor . execute ( task ) ; } }
[[[[Nl]]]]: Process the remoting command with its own executor or with the defaultExecutor if its own if null .
--------------------------------------------- Result 425 ---------------------------------------------
Stop the process . --> Stops the cluster . --> Socre: 1.0

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = False ; healConnectionThreads . interrupt ( ) ; this . [[tasks]] . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread

[[[[Adv]]]]: public void stop ( ) { if ( ! this . started ) { return ; } this . started = False ; healConnectionThreads . interrupt ( ) ; this . [[burgess]] . clear ( ) ; this . canceled . clear ( ) ; }
[[[[Nl]]]]: stop reconnect thread
--------------------------------------------- Result 426 ---------------------------------------------
Adds a reconnect task . --> Register a ReconnectTask --> Socre: 1.0

[[[[Adv]]]]: public void addReconnectTask ( Url [[url]] ) { ReconnectTask [[task]] = new ReconnectTask ( ) ; [[task]] . url = [[url]] ; tasks . add ( [[task]] ) ; }
[[[[Nl]]]]: add reconnect task

[[[[Adv]]]]: public void addReconnectTask ( Url [[prussia]] ) { ReconnectTask [[binoculars]] = new ReconnectTask ( ) ; [[binoculars]] . url = [[prussia]] ; tasks . add ( [[binoculars]] ) ; }
[[[[Nl]]]]: add reconnect task
--------------------------------------------- Result 427 ---------------------------------------------
Monitor the connection pools . --> This method monitors the connection pools . --> Socre: 1.0

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > [[serviceOnConnections]] = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( [[serviceOnConnections]] . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = [[serviceOnConnections]] . get ( random . nextInt ( [[serviceOnConnections]] . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , [[serviceOnConnections]] . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off

[[[[Adv]]]]: @ Override public void monitor ( Map < String , RunStateRecordedFutureTask < ConnectionPool > > connPools ) { try { if ( null != connPools && ! connPools . isEmpty ( ) ) { Iterator < Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > > iter = connPools . entrySet ( ) . iterator ( ) ; while ( iter . hasNext ( ) ) { Map . Entry < String , RunStateRecordedFutureTask < ConnectionPool > > entry = iter . next ( ) ; String poolKey = entry . getKey ( ) ; ConnectionPool pool = FutureTaskUtil . getFutureTaskResult ( entry . getValue ( ) , logger ) ; List < Connection > connections = pool . getAll ( ) ; Map < String , List < Connection > > filteredConnectons = this . filter ( connections ) ; List < Connection > [[recurrence]] = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_ON ) ; List < Connection > serviceOffConnections = filteredConnectons . get ( Configs . CONN_SERVICE_STATUS_OFF ) ; if ( [[recurrence]] . size ( ) > CONNECTION_THRESHOLD ) { Connection freshSelectConnect = [[recurrence]] . get ( random . nextInt ( [[recurrence]] . size ( ) ) ) ; freshSelectConnect . setAttribute ( Configs . CONN_SERVICE_STATUS , Configs . CONN_SERVICE_STATUS_OFF ) ; Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; freshSelectConnections . put ( poolKey , freshSelectConnect ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } else { if ( freshSelectConnections . containsKey ( poolKey ) ) { Connection lastSelectConnect = freshSelectConnections . remove ( poolKey ) ; closeFreshSelectConnections ( lastSelectConnect , serviceOffConnections ) ; } if ( logger . isInfoEnabled ( ) ) { logger . info ( "the size of serviceOnConnections [{}] reached CONNECTION_THRESHOLD [{}]." , [[recurrence]] . size ( ) , CONNECTION_THRESHOLD ) ; } } for ( Connection offConn : serviceOffConnections ) { if ( offConn . isFine ( ) ) { offConn . close ( ) ; } } } } } catch ( Exception e ) { logger . error ( "ScheduledDisconnectStrategy monitor error" , e ) ; } }
[[[[Nl]]]]: Monitor connections and close connections with status is off
--------------------------------------------- Result 428 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 270 / 150 / 8 / 428:  43%|████▎     | 428/1000 [41:45<55:48,  5.85s/it][Succeeded / Failed / Skipped / Total] 270 / 150 / 8 / 428:  43%|████▎     | 429/1000 [41:48<55:38,  5.85s/it][Succeeded / Failed / Skipped / Total] 271 / 150 / 8 / 429:  43%|████▎     | 429/1000 [41:48<55:38,  5.85s/it][Succeeded / Failed / Skipped / Total] 271 / 150 / 8 / 429:  43%|████▎     | 430/1000 [41:51<55:29,  5.84s/it][Succeeded / Failed / Skipped / Total] 272 / 150 / 8 / 430:  43%|████▎     | 430/1000 [41:51<55:29,  5.84s/it][Succeeded / Failed / Skipped / Total] 272 / 150 / 8 / 430:  43%|████▎     | 431/1000 [41:56<55:21,  5.84s/it][Succeeded / Failed / Skipped / Total] 273 / 150 / 8 / 431:  43%|████▎     | 431/1000 [41:56<55:21,  5.84s/it][Succeeded / Failed / Skipped / Total] 273 / 150 / 8 / 431:  43%|████▎     | 432/1000 [42:02<55:16,  5.84s/it][Succeeded / Failed / Skipped / Total] 274 / 150 / 8 / 432:  43%|████▎     | 432/1000 [42:02<55:16,  5.84s/it][Succeeded / Failed / Skipped / Total] 274 / 150 / 8 / 432:  43%|████▎     | 433/1000 [42:04<55:05,  5.83s/it][Succeeded / Failed / Skipped / Total] 274 / 151 / 8 / 433:  43%|████▎     | 433/1000 [42:04<55:05,  5.83s/it][Succeeded / Failed / Skipped / Total] 274 / 151 / 8 / 433:  43%|████▎     | 434/1000 [42:04<54:52,  5.82s/it]Handle a request . --> Flushes poison message --> Socre: 1.0

[[[[Adv]]]]: protected void [[oneway]] ( final Connection [[conn]] , final RemotingCommand [[request]] ) { try { [[conn]] . getChannel ( ) . writeAndFlush ( [[request]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[conn]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[conn]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .

[[[[Adv]]]]: protected void [[anyways]] ( final Connection [[girlhood]] , final RemotingCommand [[greenhouse]] ) { try { [[girlhood]] . getChannel ( ) . writeAndFlush ( [[greenhouse]] ) . addListener ( new ChannelFutureListener ( ) { @ Override public void operationComplete ( ChannelFuture f ) throws Exception { if ( ! f . isSuccess ( ) ) { logger . error ( "Invoke send failed. The address is {}" , RemotingUtil . parseRemoteAddress ( [[girlhood]] . getChannel ( ) ) , f . cause ( ) ) ; } } } ) ; } catch ( Exception e ) { if ( null == [[girlhood]] ) { logger . error ( "Conn is null" ) ; } else { logger . error ( "Exception caught when sending invocation. The address is {}" , RemotingUtil . parseRemoteAddress ( [[girlhood]] . getChannel ( ) ) , e ) ; } } }
[[[[Nl]]]]: Oneway invocation .
--------------------------------------------- Result 429 ---------------------------------------------
Filter a list of connections --> Filters and returns a Map of Connection objects --> Socre: 1.0

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > connections ) { List < Connection > [[serviceOnConnections]] = new ArrayList < Connection > ( ) ; List < Connection > [[serviceOffConnections]] = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { [[serviceOffConnections]] . add ( connection ) ; } } else { [[serviceOnConnections]] . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , [[serviceOnConnections]] ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , [[serviceOffConnections]] ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor

[[[[Adv]]]]: @ Override public Map < String , List < Connection > > filter ( List < Connection > connections ) { List < Connection > [[formulas]] = new ArrayList < Connection > ( ) ; List < Connection > [[bosnia]] = new ArrayList < Connection > ( ) ; Map < String , List < Connection > > filteredConnections = new ConcurrentHashMap < String , List < Connection > > ( ) ; for ( Connection connection : connections ) { String serviceStatus = ( String ) connection . getAttribute ( Configs . CONN_SERVICE_STATUS ) ; if ( serviceStatus != null ) { if ( connection . isInvokeFutureMapFinish ( ) && ! freshSelectConnections . containsValue ( connection ) ) { [[bosnia]] . add ( connection ) ; } } else { [[formulas]] . add ( connection ) ; } } filteredConnections . put ( Configs . CONN_SERVICE_STATUS_ON , [[formulas]] ) ; filteredConnections . put ( Configs . CONN_SERVICE_STATUS_OFF , [[bosnia]] ) ; return filteredConnections ; }
[[[[Nl]]]]: Filter connections to monitor
--------------------------------------------- Result 430 ---------------------------------------------
Helper method to close fresh connections --> Sleep for guzzler --> Socre: 1.0

[[[[Adv]]]]: private void [[closeFreshSelectConnections]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections

[[[[Adv]]]]: private void [[guzzler]] ( Connection lastSelectConnect , List < Connection > serviceOffConnections ) throws InterruptedException { if ( null != lastSelectConnect ) { if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { Thread . sleep ( RETRY_DETECT_PERIOD ) ; if ( lastSelectConnect . isInvokeFutureMapFinish ( ) ) { serviceOffConnections . add ( lastSelectConnect ) ; } else { if ( logger . isInfoEnabled ( ) ) { logger . info ( "Address={} won't close at this schedule turn" , RemotingUtil . parseRemoteAddress ( lastSelectConnect . getChannel ( ) ) ) ; } } } } }
[[[[Nl]]]]: close the connection of the fresh select connections
--------------------------------------------- Result 431 ---------------------------------------------
Gets a boolean property . --> Returns the boolean value of a bullet . --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[getBool]] ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property

[[[[Adv]]]]: public static boolean [[bullet]] ( String key , String defaultValue ) { return Boolean . parseBoolean ( System . getProperty ( key , defaultValue ) ) ; }
[[[[Nl]]]]: ~~~ public helper methods to retrieve system property
--------------------------------------------- Result 432 ---------------------------------------------
Log an info message --> Pretty prints information about a particular instruction . --> Socre: 1.0

[[[[Adv]]]]: private void infoLog ( String [[format]] , String [[addr]] ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( [[addr]] ) ) { logger . info ( [[format]] , [[addr]] ) ; } else { logger . info ( [[format]] , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log

[[[[Adv]]]]: private void infoLog ( String [[ornamentation]] , String [[danielson]] ) { if ( logger . isInfoEnabled ( ) ) { if ( StringUtils . isNotEmpty ( [[danielson]] ) ) { logger . info ( [[ornamentation]] , [[danielson]] ) ; } else { logger . info ( [[ornamentation]] , "UNKNOWN-ADDR" ) ; } } }
[[[[Nl]]]]: print info log
--------------------------------------------- Result 433 ---------------------------------------------
Converts request object to a remoting command . --> [[[FAILED]]]

[[[[Adv]]]]: protected RemotingCommand [[toRemotingCommand]] ( Object request , Connection [[conn]] , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .

[[[[Adv]]]]: protected RemotingCommand [[maddest]] ( Object request , Connection [[chi]] , InvokeContext invokeContext , int timeoutMillis ) throws SerializationException { RpcRequestCommand command = this . getCommandFactory ( ) . createRequestCommand ( request ) ; if ( null != invokeContext ) {
[[[[Nl]]]]: Convert application request object to remoting request command .
--------------------------------------------- Result 434 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 274 / 151 / 9 / 434:  43%|████▎     | 434/1000 [42:04<54:52,  5.82s/it][Succeeded / Failed / Skipped / Total] 274 / 151 / 9 / 434:  44%|████▎     | 435/1000 [42:10<54:46,  5.82s/it][Succeeded / Failed / Skipped / Total] 275 / 151 / 9 / 435:  44%|████▎     | 435/1000 [42:10<54:46,  5.82s/it][Succeeded / Failed / Skipped / Total] 275 / 151 / 9 / 435:  44%|████▎     | 436/1000 [42:10<54:33,  5.80s/it][Succeeded / Failed / Skipped / Total] 276 / 151 / 9 / 436:  44%|████▎     | 436/1000 [42:10<54:33,  5.80s/it][Succeeded / Failed / Skipped / Total] 276 / 151 / 9 / 436:  44%|████▎     | 437/1000 [42:15<54:26,  5.80s/it][Succeeded / Failed / Skipped / Total] 277 / 151 / 9 / 437:  44%|████▎     | 437/1000 [42:15<54:26,  5.80s/it][Succeeded / Failed / Skipped / Total] 277 / 151 / 9 / 437:  44%|████▍     | 438/1000 [42:24<54:24,  5.81s/it][Succeeded / Failed / Skipped / Total] 278 / 151 / 9 / 438:  44%|████▍     | 438/1000 [42:24<54:24,  5.81s/it][Succeeded / Failed / Skipped / Total] 278 / 151 / 9 / 438:  44%|████▍     | 439/1000 [42:27<54:14,  5.80s/it][Succeeded / Failed / Skipped / Total] 279 / 151 / 9 / 439:  44%|████▍     | 439/1000 [42:27<54:14,  5.80s/it][Succeeded / Failed / Skipped / Total] 279 / 151 / 9 / 439:  44%|████▍     | 440/1000 [42:32<54:09,  5.80s/it][Succeeded / Failed / Skipped / Total] 280 / 151 / 9 / 440:  44%|████▍     | 440/1000 [42:32<54:09,  5.80s/it][Succeeded / Failed / Skipped / Total] 280 / 151 / 9 / 440:  44%|████▍     | 441/1000 [42:42<54:08,  5.81s/it][Succeeded / Failed / Skipped / Total] 281 / 151 / 9 / 441:  44%|████▍     | 441/1000 [42:42<54:08,  5.81s/it][Succeeded / Failed / Skipped / Total] 281 / 151 / 9 / 441:  44%|████▍     | 442/1000 [42:47<54:01,  5.81s/it]Gets the value of the given key . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < T > T get ( String key , T defaultIfNotFound ) { return this . context . get ( key ) != null ? ( T ) this . context . get ( key ) : defaultIfNotFound ; }
[[[[Nl]]]]: get and use default if not found
--------------------------------------------- Result 435 ---------------------------------------------
Get user processor by class name . --> Douce the specified className --> Socre: 1.0

[[[[Adv]]]]: public UserProcessor < ? > [[getUserProcessor]] ( String className ) { return StringUtils . isBlank ( className ) ? null : this . [[userProcessors]] . get ( className ) ; }
[[[[Nl]]]]: Get user processor for class name .

[[[[Adv]]]]: public UserProcessor < ? > [[dyou]] ( String className ) { return StringUtils . isBlank ( className ) ? null : this . [[aldrich]] . get ( className ) ; }
[[[[Nl]]]]: Get user processor for class name .
--------------------------------------------- Result 436 ---------------------------------------------
Get a property by its name . --> Gets das . --> Socre: 1.0

[[[[Adv]]]]: public String [[getProperty]] ( String key ) { if ( properties == null ) { return null ; } return properties . getProperty ( key ) ; }
[[[[Nl]]]]: Get property value according to property key

[[[[Adv]]]]: public String [[daku]] ( String key ) { if ( properties == null ) { return null ; } return properties . getProperty ( key ) ; }
[[[[Nl]]]]: Get property value according to property key
--------------------------------------------- Result 437 ---------------------------------------------
Returns true if the request is a request timeout . --> Checks to see if the client is in bayes . --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isRequestTimeout]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return True ; } return False ; }
[[[[Nl]]]]: whether this request already timeout

[[[[Adv]]]]: public boolean [[bayonne]] ( ) { if ( this . timeout > 0 && ( this . rpcCommandType != RpcCommandType . REQUEST_ONEWAY ) && ( System . currentTimeMillis ( ) - this . arriveTimestamp ) > this . timeout ) { return True ; } return False ; }
[[[[Nl]]]]: whether this request already timeout
--------------------------------------------- Result 438 ---------------------------------------------
Get a random connection . --> Gets a random number from the specified list . --> Socre: 1.0

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int [[size]] = conns . size ( ) ; int [[tries]] = 0 ; Connection [[result]] = null ; while ( ( [[result]] == null || ! [[result]] . isFine ( ) ) && [[tries]] ++ < MAX_TIMES ) { [[result]] = conns . get ( this . random . nextInt ( [[size]] ) ) ; } if ( [[result]] != null && ! [[result]] . isFine ( ) ) { [[result]] = null ; } return [[result]] ; }
[[[[Nl]]]]: get one connection randomly

[[[[Adv]]]]: private Connection randomGet ( List < Connection > conns ) { if ( null == conns || conns . isEmpty ( ) ) { return null ; } int [[biased]] = conns . size ( ) ; int [[frogman]] = 0 ; Connection [[noland]] = null ; while ( ( [[noland]] == null || ! [[noland]] . isFine ( ) ) && [[frogman]] ++ < MAX_TIMES ) { [[noland]] = conns . get ( this . random . nextInt ( [[biased]] ) ) ; } if ( [[noland]] != null && ! [[noland]] . isFine ( ) ) { [[noland]] = null ; } return [[noland]] ; }
[[[[Nl]]]]: get one connection randomly
--------------------------------------------- Result 439 ---------------------------------------------
Resolve response object . --> Bouchon exception handling --> Socre: 1.0

[[[[Adv]]]]: public static Object [[resolveResponseObject]] ( ResponseCommand [[responseCommand]] , String addr ) throws RemotingException { preProcess ( [[responseCommand]] , addr ) ; if ( [[responseCommand]] . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( [[responseCommand]] ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , [[responseCommand]] . getResponseStatus ( ) , addr , [[responseCommand]] . getId ( ) ) ; logger . warn ( msg ) ; if ( [[responseCommand]] . getCause ( ) != null ) { throw new InvokeException ( msg , [[responseCommand]] . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .

[[[[Adv]]]]: public static Object [[bouchon]] ( ResponseCommand [[deteriorating]] , String addr ) throws RemotingException { preProcess ( [[deteriorating]] , addr ) ; if ( [[deteriorating]] . getResponseStatus ( ) == ResponseStatus . SUCCESS ) { return toResponseObject ( [[deteriorating]] ) ; } else { String msg = String . format ( "Rpc invocation exception: %s, the address is %s, id=%s" , [[deteriorating]] . getResponseStatus ( ) , addr , [[deteriorating]] . getId ( ) ) ; logger . warn ( msg ) ; if ( [[deteriorating]] . getCause ( ) != null ) { throw new InvokeException ( msg , [[deteriorating]] . getCause ( ) ) ; } else { throw new InvokeException ( msg + ", please check the server log for more." ) ; } } }
[[[[Nl]]]]: Analyze the response command and generate the response object .
--------------------------------------------- Result 440 ---------------------------------------------
Deserialize a response object . --> Budgeted request --> Socre: 1.0

[[[[Adv]]]]: private static Object [[toResponseObject]] ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) [[responseCommand]] ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .

[[[[Adv]]]]: private static Object [[budgeted]] ( ResponseCommand [[loathe]] ) throws CodecException { RpcResponseCommand response = ( RpcResponseCommand ) [[loathe]] ; response . deserialize ( ) ; return response . getResponseObject ( ) ; }
[[[[Nl]]]]: Convert remoting response command to application response object .
--------------------------------------------- Result 441 ---------------------------------------------
Detail error message . --> Generates a gashes message . --> Socre: 1.0

[[[[Adv]]]]: private static String [[detailErrMsg]] ( String clientErrMsg , ResponseCommand [[responseCommand]] ) { RpcResponseCommand resp = ( RpcResponseCommand ) [[responseCommand]] ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command

[[[[Adv]]]]: private static String [[gashes]] ( String clientErrMsg , ResponseCommand [[abnormally]] ) { RpcResponseCommand resp = ( RpcResponseCommand ) [[abnormally]] ; if ( StringUtils . isNotBlank ( resp . getErrorMsg ( ) ) ) { return String . format ( "%s, ServerErrorMsg:%s" , clientErrMsg , resp . getErrorMsg ( ) ) ; } else { return String . format ( "%s, ServerErrorMsg:null" , clientErrMsg ) ; } }
[[[[Nl]]]]: Detail your error msg with the error msg returned from response command
--------------------------------------------- Result 442 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 282 / 151 / 9 / 442:  44%|████▍     | 442/1000 [42:47<54:01,  5.81s/it][Succeeded / Failed / Skipped / Total] 282 / 151 / 9 / 442:  44%|████▍     | 443/1000 [42:48<53:49,  5.80s/it][Succeeded / Failed / Skipped / Total] 283 / 151 / 9 / 443:  44%|████▍     | 443/1000 [42:48<53:49,  5.80s/it][Succeeded / Failed / Skipped / Total] 283 / 151 / 9 / 443:  44%|████▍     | 444/1000 [42:50<53:38,  5.79s/it][Succeeded / Failed / Skipped / Total] 284 / 151 / 9 / 444:  44%|████▍     | 444/1000 [42:50<53:38,  5.79s/it][Succeeded / Failed / Skipped / Total] 284 / 151 / 9 / 444:  44%|████▍     | 445/1000 [43:02<53:40,  5.80s/it][Succeeded / Failed / Skipped / Total] 285 / 151 / 9 / 445:  44%|████▍     | 445/1000 [43:02<53:40,  5.80s/it][Succeeded / Failed / Skipped / Total] 285 / 151 / 9 / 445:  45%|████▍     | 446/1000 [43:10<53:38,  5.81s/it][Succeeded / Failed / Skipped / Total] 285 / 152 / 9 / 446:  45%|████▍     | 446/1000 [43:10<53:38,  5.81s/it][Succeeded / Failed / Skipped / Total] 285 / 152 / 9 / 446:  45%|████▍     | 447/1000 [43:10<53:25,  5.80s/it][Succeeded / Failed / Skipped / Total] 286 / 152 / 9 / 447:  45%|████▍     | 447/1000 [43:10<53:25,  5.80s/it][Succeeded / Failed / Skipped / Total] 286 / 152 / 9 / 447:  45%|████▍     | 448/1000 [43:13<53:15,  5.79s/it][Succeeded / Failed / Skipped / Total] 287 / 152 / 9 / 448:  45%|████▍     | 448/1000 [43:13<53:15,  5.79s/it][Succeeded / Failed / Skipped / Total] 287 / 152 / 9 / 448:  45%|████▍     | 449/1000 [43:24<53:15,  5.80s/it]Convert response command to a throwable . --> returns an exception --> Socre: 1.0

[[[[Adv]]]]: private static Throwable [[toThrowable]] ( ResponseCommand [[responseCommand]] ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) [[responseCommand]] ; resp . deserialize ( ) ; Object [[ex]] = resp . getResponseObject ( ) ; if ( [[ex]] != null && [[ex]] instanceof Throwable ) { return ( Throwable ) [[ex]] ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .

[[[[Adv]]]]: private static Throwable [[readily]] ( ResponseCommand [[phony]] ) throws CodecException { RpcResponseCommand resp = ( RpcResponseCommand ) [[phony]] ; resp . deserialize ( ) ; Object [[explorations]] = resp . getResponseObject ( ) ; if ( [[explorations]] != null && [[explorations]] instanceof Throwable ) { return ( Throwable ) [[explorations]] ; } return null ; }
[[[[Nl]]]]: Convert remoting response command to throwable if it is a throwable otherwise return null .
--------------------------------------------- Result 443 ---------------------------------------------
Create an RpcServerException from a throwable . --> Creates RpcServerException --> Socre: 1.0

[[[[Adv]]]]: private RpcServerException createServerException ( Throwable [[t]] , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , [[t]] . getClass ( ) . getName ( ) , [[t]] . getMessage ( ) , errMsg ) ; RpcServerException [[e]] = new RpcServerException ( formattedErrMsg ) ; [[e]] . setStackTrace ( [[t]] . getStackTrace ( ) ) ; return [[e]] ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .

[[[[Adv]]]]: private RpcServerException createServerException ( Throwable [[bat]] , String errMsg ) { String formattedErrMsg = String . format ( "[Server]OriginErrorMsg: %s: %s. AdditionalErrorMsg: %s" , [[bat]] . getClass ( ) . getName ( ) , [[bat]] . getMessage ( ) , errMsg ) ; RpcServerException [[parentheses]] = new RpcServerException ( formattedErrMsg ) ; [[parentheses]] . setStackTrace ( [[bat]] . getStackTrace ( ) ) ; return [[parentheses]] ; }
[[[[Nl]]]]: create server exception using error msg and fill the stack trace using the stack trace of throwable .
--------------------------------------------- Result 444 ---------------------------------------------
Print connection trace log . --> For debugging purposes --> Socre: 1.0

[[[[Adv]]]]: public static void printConnectionTraceLog ( Logger [[logger]] , String [[traceId]] , InvokeContext invokeContext ) { String [[sourceIp]] = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( [[traceId]] ) . append ( "," ) ; logMsg . append ( [[sourceIp]] ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( [[logger]] . isInfoEnabled ( ) ) { [[logger]] . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log

[[[[Adv]]]]: public static void printConnectionTraceLog ( Logger [[madelyn]] , String [[sparta]] , InvokeContext invokeContext ) { String [[bulk]] = invokeContext . get ( InvokeContext . CLIENT_LOCAL_IP ) ; Integer sourcePort = invokeContext . get ( InvokeContext . CLIENT_LOCAL_PORT ) ; String targetIp = invokeContext . get ( InvokeContext . CLIENT_REMOTE_IP ) ; Integer targetPort = invokeContext . get ( InvokeContext . CLIENT_REMOTE_PORT ) ; StringBuilder logMsg = new StringBuilder ( ) ; logMsg . append ( [[sparta]] ) . append ( "," ) ; logMsg . append ( [[bulk]] ) . append ( "," ) ; logMsg . append ( sourcePort ) . append ( "," ) ; logMsg . append ( targetIp ) . append ( "," ) ; logMsg . append ( targetPort ) ; if ( [[madelyn]] . isInfoEnabled ( ) ) { [[madelyn]] . info ( logMsg . toString ( ) ) ; } }
[[[[Nl]]]]: print trace log
--------------------------------------------- Result 445 ---------------------------------------------
Creates a new event loop group . --> Creates a new EventLoopGroup --> Socre: 1.0

[[[[Adv]]]]: public static EventLoopGroup [[newEventLoopGroup]] ( int nThreads , ThreadFactory [[threadFactory]] ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , [[threadFactory]] ) : new NioEventLoopGroup ( nThreads , [[threadFactory]] ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .

[[[[Adv]]]]: public static EventLoopGroup [[maida]] ( int nThreads , ThreadFactory [[bolly]] ) { return epollEnabled ? new EpollEventLoopGroup ( nThreads , [[bolly]] ) : new NioEventLoopGroup ( nThreads , [[bolly]] ) ; }
[[[[Nl]]]]: Create the right event loop according to current platform and system property fallback to NIO when epoll not enabled .
--------------------------------------------- Result 446 ---------------------------------------------
Gets the remote IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseRemoteIP]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .

[[[[Adv]]]]: public static String [[ciro]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress remote = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( remote != null ) { return remote . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote host ip of the channel .
--------------------------------------------- Result 447 ---------------------------------------------
Returns the local address of the given channel . --> duplicated to a string --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseLocalAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[channel]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .

[[[[Adv]]]]: public static String [[duped]] ( final Channel [[booklets]] ) { if ( null == [[booklets]] ) { return StringUtils . EMPTY ; } final SocketAddress local = [[booklets]] . localAddress ( ) ; return doParse ( local != null ? local . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the local address of the channel .
--------------------------------------------- Result 448 ---------------------------------------------
Parse the remote address . --> Convert horse meat to a string --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteAddress]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return StringUtils . EMPTY ; } final SocketAddress [[remote]] = [[channel]] . remoteAddress ( ) ; return doParse ( [[remote]] != null ? [[remote]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .

[[[[Adv]]]]: public static String [[afte]] ( final Channel [[horsemeat]] ) { if ( null == [[horsemeat]] ) { return StringUtils . EMPTY ; } final SocketAddress [[bullring]] = [[horsemeat]] . remoteAddress ( ) ; return doParse ( [[bullring]] != null ? [[bullring]] . toString ( ) . trim ( ) : StringUtils . EMPTY ) ; }
[[[[Nl]]]]: Parse the remote address of the channel .
--------------------------------------------- Result 449 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 288 / 152 / 9 / 449:  45%|████▍     | 449/1000 [43:24<53:15,  5.80s/it][Succeeded / Failed / Skipped / Total] 288 / 152 / 9 / 449:  45%|████▌     | 450/1000 [43:32<53:12,  5.80s/it][Succeeded / Failed / Skipped / Total] 288 / 153 / 9 / 450:  45%|████▌     | 450/1000 [43:32<53:12,  5.80s/it][Succeeded / Failed / Skipped / Total] 288 / 153 / 9 / 450:  45%|████▌     | 451/1000 [43:34<53:02,  5.80s/it][Succeeded / Failed / Skipped / Total] 288 / 154 / 9 / 451:  45%|████▌     | 451/1000 [43:34<53:02,  5.80s/it][Succeeded / Failed / Skipped / Total] 288 / 154 / 9 / 451:  45%|████▌     | 452/1000 [43:35<52:50,  5.79s/it][Succeeded / Failed / Skipped / Total] 289 / 154 / 9 / 452:  45%|████▌     | 452/1000 [43:35<52:50,  5.79s/it][Succeeded / Failed / Skipped / Total] 289 / 154 / 9 / 452:  45%|████▌     | 453/1000 [43:38<52:42,  5.78s/it][Succeeded / Failed / Skipped / Total] 290 / 154 / 9 / 453:  45%|████▌     | 453/1000 [43:38<52:42,  5.78s/it][Succeeded / Failed / Skipped / Total] 290 / 154 / 9 / 453:  45%|████▌     | 454/1000 [43:42<52:33,  5.78s/it][Succeeded / Failed / Skipped / Total] 291 / 154 / 9 / 454:  45%|████▌     | 454/1000 [43:42<52:33,  5.78s/it][Succeeded / Failed / Skipped / Total] 291 / 154 / 9 / 454:  46%|████▌     | 455/1000 [43:56<52:38,  5.79s/it][Succeeded / Failed / Skipped / Total] 291 / 155 / 9 / 455:  46%|████▌     | 455/1000 [43:56<52:38,  5.79s/it][Succeeded / Failed / Skipped / Total] 291 / 155 / 9 / 455:  46%|████▌     | 456/1000 [44:06<52:37,  5.80s/it][Succeeded / Failed / Skipped / Total] 291 / 156 / 9 / 456:  46%|████▌     | 456/1000 [44:06<52:37,  5.80s/it][Succeeded / Failed / Skipped / Total] 291 / 156 / 9 / 456:  46%|████▌     | 457/1000 [44:10<52:29,  5.80s/it][Succeeded / Failed / Skipped / Total] 292 / 156 / 9 / 457:  46%|████▌     | 457/1000 [44:10<52:29,  5.80s/it][Succeeded / Failed / Skipped / Total] 292 / 156 / 9 / 457:  46%|████▌     | 458/1000 [44:16<52:23,  5.80s/it]Returns the hostname of the remote host . --> Get heartplains --> Socre: 1.0

[[[[Adv]]]]: public static String [[parseRemoteHostName]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .

[[[[Adv]]]]: public static String [[chaplains]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress [[hearts]] = ( InetSocketAddress ) channel . remoteAddress ( ) ; if ( [[hearts]] != null ) { return [[hearts]] . getAddress ( ) . getHostName ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the remote hostname of the channel .
--------------------------------------------- Result 450 ---------------------------------------------
Gets the local IP address . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[parseLocalIP]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .

[[[[Adv]]]]: public static String [[cabbie]] ( final Channel channel ) { if ( null == channel ) { return StringUtils . EMPTY ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getAddress ( ) . getHostAddress ( ) ; } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the local host ip of the channel .
--------------------------------------------- Result 451 ---------------------------------------------
Get local port . --> [[[FAILED]]]

[[[[Adv]]]]: public static int [[parseLocalPort]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .

[[[[Adv]]]]: public static int [[devo]] ( final Channel channel ) { if ( null == channel ) { return - 1 ; } final InetSocketAddress local = ( InetSocketAddress ) channel . localAddress ( ) ; if ( local != null ) { return local . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the local host port of the channel .
--------------------------------------------- Result 452 ---------------------------------------------
Get the remote port . --> Get rosslynomial --> Socre: 1.0

[[[[Adv]]]]: public static int [[parseRemotePort]] ( final Channel [[channel]] ) { if ( null == [[channel]] ) { return - 1 ; } final InetSocketAddress [[remote]] = ( InetSocketAddress ) [[channel]] . remoteAddress ( ) ; if ( [[remote]] != null ) { return [[remote]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .

[[[[Adv]]]]: public static int [[rosslyn]] ( final Channel [[antivirals]] ) { if ( null == [[antivirals]] ) { return - 1 ; } final InetSocketAddress [[activated]] = ( InetSocketAddress ) [[antivirals]] . remoteAddress ( ) ; if ( [[activated]] != null ) { return [[activated]] . getPort ( ) ; } return - 1 ; }
[[[[Nl]]]]: Parse the remote host port of the channel .
--------------------------------------------- Result 453 ---------------------------------------------
Parse socket address to host IP . --> returns IPAddressToHost --> Socre: 1.0

[[[[Adv]]]]: public static String parseSocketAddressToHostIp ( SocketAddress [[socketAddress]] ) { final InetSocketAddress addrs = ( InetSocketAddress ) [[socketAddress]] ; if ( addrs != null ) { InetAddress [[addr]] = addrs . getAddress ( ) ; if ( null != [[addr]] ) { return [[addr]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .

[[[[Adv]]]]: public static String parseSocketAddressToHostIp ( SocketAddress [[rosenberger]] ) { final InetSocketAddress addrs = ( InetSocketAddress ) [[rosenberger]] ; if ( addrs != null ) { InetAddress [[sex]] = addrs . getAddress ( ) ; if ( null != [[sex]] ) { return [[sex]] . getHostAddress ( ) ; } } return StringUtils . EMPTY ; }
[[[[Nl]]]]: Parse the host ip of socket address .
--------------------------------------------- Result 454 ---------------------------------------------
Gets connection . --> Gets the pluses . --> Socre: 1.0

[[[[Adv]]]]: public Connection [[get]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection

[[[[Adv]]]]: public Connection [[pluses]] ( ) { markAccess ( ) ; if ( null != this . conns ) { List < Connection > snapshot = new ArrayList < Connection > ( this . conns ) ; if ( snapshot . size ( ) > 0 ) { return this . strategy . select ( snapshot ) ; } else { return null ; } } else { return null ; } }
[[[[Nl]]]]: get a connection
--------------------------------------------- Result 455 ---------------------------------------------
Get custom serializer --> [[[FAILED]]]

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( String className ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( className ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .

[[[[Adv]]]]: public static CustomSerializer [[dreidel]] ( String className ) { if ( ! classCustomSerializer . isEmpty ( ) ) { return classCustomSerializer . get ( className ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for class name .
--------------------------------------------- Result 456 ---------------------------------------------
Register a custom serializer for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( String className , CustomSerializer [[serializer]] ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( className , [[serializer]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + className + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .

[[[[Adv]]]]: public static void [[renie]] ( String className , CustomSerializer [[aeroplanes]] ) { CustomSerializer prevSerializer = classCustomSerializer . putIfAbsent ( className , [[aeroplanes]] ) ; if ( prevSerializer != null ) { throw new RuntimeException ( "CustomSerializer has been registered for class: " + className + ", the custom serializer is: " + prevSerializer . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for class name .
--------------------------------------------- Result 457 ---------------------------------------------
Adds a connection . --> This will be called when the gossip is connected . --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Connection [[connection]] ) { markAccess ( ) ; if ( null == [[connection]] ) { return ; } boolean [[res]] = this . [[conns]] . addIfAbsent ( [[connection]] ) ; if ( [[res]] ) { [[connection]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection

[[[[Adv]]]]: public void [[hooliganism]] ( Connection [[communal]] ) { markAccess ( ) ; if ( null == [[communal]] ) { return ; } boolean [[arbitration]] = this . [[triangles]] . addIfAbsent ( [[communal]] ) ; if ( [[arbitration]] ) { [[communal]] . increaseRef ( ) ; } }
[[[[Nl]]]]: add a connection
--------------------------------------------- Result 458 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 293 / 156 / 9 / 458:  46%|████▌     | 458/1000 [44:16<52:23,  5.80s/it][Succeeded / Failed / Skipped / Total] 293 / 156 / 9 / 458:  46%|████▌     | 459/1000 [44:17<52:12,  5.79s/it][Succeeded / Failed / Skipped / Total] 293 / 157 / 9 / 459:  46%|████▌     | 459/1000 [44:17<52:12,  5.79s/it][Succeeded / Failed / Skipped / Total] 293 / 157 / 9 / 459:  46%|████▌     | 460/1000 [44:21<52:03,  5.79s/it][Succeeded / Failed / Skipped / Total] 294 / 157 / 9 / 460:  46%|████▌     | 460/1000 [44:21<52:03,  5.79s/it][Succeeded / Failed / Skipped / Total] 294 / 157 / 9 / 460:  46%|████▌     | 461/1000 [44:26<51:57,  5.78s/it][Succeeded / Failed / Skipped / Total] 294 / 158 / 9 / 461:  46%|████▌     | 461/1000 [44:26<51:57,  5.78s/it][Succeeded / Failed / Skipped / Total] 294 / 158 / 9 / 461:  46%|████▌     | 462/1000 [44:26<51:45,  5.77s/it][Succeeded / Failed / Skipped / Total] 294 / 158 / 10 / 462:  46%|████▌     | 462/1000 [44:26<51:45,  5.77s/it][Succeeded / Failed / Skipped / Total] 294 / 158 / 10 / 462:  46%|████▋     | 463/1000 [44:28<51:35,  5.76s/it][Succeeded / Failed / Skipped / Total] 295 / 158 / 10 / 463:  46%|████▋     | 463/1000 [44:28<51:35,  5.76s/it][Succeeded / Failed / Skipped / Total] 295 / 158 / 10 / 463:  46%|████▋     | 464/1000 [44:33<51:27,  5.76s/it][Succeeded / Failed / Skipped / Total] 296 / 158 / 10 / 464:  46%|████▋     | 464/1000 [44:33<51:27,  5.76s/it][Succeeded / Failed / Skipped / Total] 296 / 158 / 10 / 464:  46%|████▋     | 465/1000 [44:37<51:20,  5.76s/it][Succeeded / Failed / Skipped / Total] 297 / 158 / 10 / 465:  46%|████▋     | 465/1000 [44:37<51:20,  5.76s/it][Succeeded / Failed / Skipped / Total] 297 / 158 / 10 / 465:  47%|████▋     | 466/1000 [44:43<51:14,  5.76s/it]Start the connection monitor . --> Starts the bidding process . --> Socre: 1.0

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . [[executor]] = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , True ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . [[executor]] . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task

[[[[Adv]]]]: public void start ( ) { long initialDelay = ConfigManager . conn_monitor_initial_delay ( ) ; long period = ConfigManager . conn_monitor_period ( ) ; this . [[buying]] = new ScheduledThreadPoolExecutor ( 1 , new NamedThreadFactory ( "ConnectionMonitorThread" , True ) , new ThreadPoolExecutor . AbortPolicy ( ) ) ; MonitorTask monitorTask = new MonitorTask ( ) ; this . [[buying]] . scheduleAtFixedRate ( monitorTask , initialDelay , period , TimeUnit . MILLISECONDS ) ; }
[[[[Nl]]]]: Start schedule task
--------------------------------------------- Result 459 ---------------------------------------------
Remove a connection and close it . --> [[[FAILED]]]

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[connection]] ) { if ( null == [[connection]] ) { return ; } boolean [[res]] = this . [[conns]] . remove ( [[connection]] ) ; if ( [[res]] ) { [[connection]] . decreaseRef ( ) ; } if ( [[connection]] . noRef ( ) ) { [[connection]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection

[[[[Adv]]]]: public void removeAndTryClose ( Connection [[nocturne]] ) { if ( null == [[nocturne]] ) { return ; } boolean [[dady]] = this . [[defends]] . remove ( [[nocturne]] ) ; if ( [[dady]] ) { [[nocturne]] . decreaseRef ( ) ; } if ( [[nocturne]] . noRef ( ) ) { [[nocturne]] . close ( ) ; } }
[[[[Nl]]]]: removeAndTryClose a connection
--------------------------------------------- Result 460 ---------------------------------------------
Get custom serializer for command code --> Returns Quadrant of Quadrant --> Socre: 1.0

[[[[Adv]]]]: public static CustomSerializer [[getCustomSerializer]] ( CommandCode [[code]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[code]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .

[[[[Adv]]]]: public static CustomSerializer [[quadrant]] ( CommandCode [[furthermore]] ) { if ( ! commandCustomSerializer . isEmpty ( ) ) { return commandCustomSerializer . get ( [[furthermore]] ) ; } return null ; }
[[[[Nl]]]]: Get the custom serializer for command code .
--------------------------------------------- Result 461 ---------------------------------------------
Register custom serializer for command code . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[registerCustomSerializer]] ( CommandCode code , CustomSerializer serializer ) { CustomSerializer [[prevSerializer]] = commandCustomSerializer . putIfAbsent ( code , serializer ) ; if ( [[prevSerializer]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + [[prevSerializer]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .

[[[[Adv]]]]: public static void [[ranging]] ( CommandCode code , CustomSerializer serializer ) { CustomSerializer [[sharpie]] = commandCustomSerializer . putIfAbsent ( code , serializer ) ; if ( [[sharpie]] != null ) { throw new RuntimeException ( "CustomSerializer has been registered for command code: " + code + ", the custom serializer is: " + [[sharpie]] . getClass ( ) . getName ( ) ) ; } }
[[[[Nl]]]]: Register custom serializer for command code .
--------------------------------------------- Result 462 ---------------------------------------------
Batch write . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static boolean batch ( WebSocketImpl ws , ByteChannel sockchannel ) throws IOException { if ( ws == null ) { return False ; } ByteBuffer buffer = ws . outQueue . peek ( ) ; WrappedByteChannel c = null ; if ( buffer == null ) { if ( sockchannel instanceof WrappedByteChannel ) { c = ( WrappedByteChannel ) sockchannel ; if ( c . isNeedWrite ( ) ) { c . writeMore ( ) ; } } } else { do {
[[[[Nl]]]]: Returns whether the whole outQueue has been flushed
--------------------------------------------- Result 463 ---------------------------------------------
Create a frame for the given opcode . --> Factory method for creating frames . --> Socre: 1.0

[[[[Adv]]]]: public static FramedataImpl1 [[get]] ( Opcode opcode ) { if ( opcode == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( opcode ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode

[[[[Adv]]]]: public static FramedataImpl1 [[fet]] ( Opcode opcode ) { if ( opcode == null ) { throw new IllegalArgumentException ( "Supplied opcode cannot be null" ) ; } switch ( opcode ) { case PING : return new PingFrame ( ) ; case PONG : return new PongFrame ( ) ; case TEXT : return new TextFrame ( ) ; case BINARY : return new BinaryFrame ( ) ; case CLOSING : return new CloseFrame ( ) ; case CONTINUOUS : return new ContinuousFrame ( ) ; default : throw new IllegalArgumentException ( "Supplied opcode is invalid" ) ; } }
[[[[Nl]]]]: Get a frame with a specific opcode
--------------------------------------------- Result 464 ---------------------------------------------
Sets the code . --> or null . --> Socre: 1.0

[[[[Adv]]]]: public void [[setCode]] ( int code ) { this . code = code ;
[[[[Nl]]]]: Set the close code for this close frame

[[[[Adv]]]]: public void [[dorothea]] ( int code ) { this . code = code ;
[[[[Nl]]]]: Set the close code for this close frame
--------------------------------------------- Result 465 ---------------------------------------------
Verifies that the payload is valid . --> Encode UTF - 8 --> Socre: 1.0

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer [[payload]] , int mark ) throws InvalidDataException { try { [[payload]] . position ( [[payload]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[payload]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[payload]] . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8

[[[[Adv]]]]: private void validateUtf8 ( ByteBuffer [[rosen]] , int mark ) throws InvalidDataException { try { [[rosen]] . position ( [[rosen]] . position ( ) + 2 ) ; reason = Charsetfunctions . stringUtf8 ( [[rosen]] ) ; } catch ( IllegalArgumentException e ) { throw new InvalidDataException ( CloseFrame . NO_UTF8 ) ; } finally { [[rosen]] . position ( mark ) ; } }
[[[[Nl]]]]: Validate the payload to valid utf8
--------------------------------------------- Result 466 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 298 / 158 / 10 / 466:  47%|████▋     | 466/1000 [44:43<51:14,  5.76s/it][Succeeded / Failed / Skipped / Total] 298 / 158 / 10 / 466:  47%|████▋     | 467/1000 [44:46<51:06,  5.75s/it][Succeeded / Failed / Skipped / Total] 299 / 158 / 10 / 467:  47%|████▋     | 467/1000 [44:46<51:06,  5.75s/it][Succeeded / Failed / Skipped / Total] 299 / 158 / 10 / 467:  47%|████▋     | 468/1000 [44:53<51:01,  5.75s/it][Succeeded / Failed / Skipped / Total] 300 / 158 / 10 / 468:  47%|████▋     | 468/1000 [44:53<51:01,  5.75s/it][Succeeded / Failed / Skipped / Total] 300 / 158 / 10 / 468:  47%|████▋     | 469/1000 [44:59<50:56,  5.76s/it][Succeeded / Failed / Skipped / Total] 301 / 158 / 10 / 469:  47%|████▋     | 469/1000 [44:59<50:56,  5.76s/it][Succeeded / Failed / Skipped / Total] 301 / 158 / 10 / 469:  47%|████▋     | 470/1000 [45:00<50:44,  5.74s/it][Succeeded / Failed / Skipped / Total] 302 / 158 / 10 / 470:  47%|████▋     | 470/1000 [45:00<50:44,  5.74s/it][Succeeded / Failed / Skipped / Total] 302 / 158 / 10 / 470:  47%|████▋     | 471/1000 [45:08<50:41,  5.75s/it][Succeeded / Failed / Skipped / Total] 303 / 158 / 10 / 471:  47%|████▋     | 471/1000 [45:08<50:41,  5.75s/it][Succeeded / Failed / Skipped / Total] 303 / 158 / 10 / 471:  47%|████▋     | 472/1000 [45:08<50:30,  5.74s/it][Succeeded / Failed / Skipped / Total] 304 / 158 / 10 / 472:  47%|████▋     | 472/1000 [45:08<50:30,  5.74s/it][Succeeded / Failed / Skipped / Total] 304 / 158 / 10 / 472:  47%|████▋     | 473/1000 [45:09<50:18,  5.73s/it]Initialize write buffer water mark . --> Writes the low and high watermark . --> Socre: 1.0

[[[[Adv]]]]: private void [[initWriteBufferWaterMark]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int [[highWaterMark]] = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > [[highWaterMark]] ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , [[highWaterMark]] , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , [[highWaterMark]] ) ; } this . [[bootstrap]] . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , [[highWaterMark]] ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark

[[[[Adv]]]]: private void [[cruller]] ( ) { int lowWaterMark = this . netty_buffer_low_watermark ( ) ; int [[nes]] = this . netty_buffer_high_watermark ( ) ; if ( lowWaterMark > [[nes]] ) { throw new IllegalArgumentException ( String . format ( "[server side] bolt netty high water mark {%s} should not be smaller than low water mark {%s} bytes)" , [[nes]] , lowWaterMark ) ) ; } else { logger . warn ( "[server side] bolt netty low water mark is {} bytes, high water mark is {} bytes" , lowWaterMark , [[nes]] ) ; } this . [[carefree]] . childOption ( ChannelOption . WRITE_BUFFER_WATER_MARK , new WriteBufferWaterMark ( lowWaterMark , [[nes]] ) ) ; }
[[[[Nl]]]]: init netty write buffer water mark
--------------------------------------------- Result 467 ---------------------------------------------
Checks if the requested protocol contains the requested protocol . --> Selects a new handshake state . --> Socre: 1.0

[[[[Adv]]]]: private HandshakeState [[containsRequestedProtocol]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft

[[[[Adv]]]]: private HandshakeState [[agains]] ( String requestedProtocol ) { for ( IProtocol knownProtocol : knownProtocols ) { if ( knownProtocol . acceptProvidedProtocol ( requestedProtocol ) ) { protocol = knownProtocol ; log . trace ( "acceptHandshake - Matching protocol found: {}" , protocol ) ; return HandshakeState . MATCHED ; } } return HandshakeState . NOT_MATCHED ; }
[[[[Nl]]]]: Check if the requested protocol is part of this draft
--------------------------------------------- Result 468 ---------------------------------------------
Check if the remote address is connected . --> Determine if the given penne --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isConnected]] ( String [[remoteAddr]] ) { Url [[url]] = this . rpcRemoting . addressParser . parse ( [[remoteAddr]] ) ; return this . isConnected ( [[url]] ) ; }
[[[[Nl]]]]: check whether a client address connected

[[[[Adv]]]]: public boolean [[splendour]] ( String [[penne]] ) { Url [[snitchin]] = this . rpcRemoting . addressParser . parse ( [[penne]] ) ; return this . isConnected ( [[snitchin]] ) ; }
[[[[Nl]]]]: check whether a client address connected
--------------------------------------------- Result 469 ---------------------------------------------
Translate a single frame size checker . --> Checks for unmasked frame . --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckPacketSize]] ( int maxpacketsize , int realpacketsize ) throws IncompleteException { if ( maxpacketsize < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size

[[[[Adv]]]]: private void [[unmasked]] ( int maxpacketsize , int realpacketsize ) throws IncompleteException { if ( maxpacketsize < realpacketsize ) { log . trace ( "Incomplete frame: maxpacketsize < realpacketsize" ) ; throw new IncompleteException ( realpacketsize ) ; } }
[[[[Nl]]]]: Check if the max packet size is smaller than the real packet size
--------------------------------------------- Result 470 ---------------------------------------------
Update the payload . --> This method is used for re - use . --> Socre: 1.0

[[[[Adv]]]]: private void [[updatePayload]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer [[buf]] = ByteBuffer . allocate ( 4 ) ; [[buf]] . putInt ( code ) ; [[buf]] . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( [[buf]] ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason

[[[[Adv]]]]: private void [[agains]] ( ) { byte [ ] by = Charsetfunctions . utf8Bytes ( reason ) ; ByteBuffer [[dahn]] = ByteBuffer . allocate ( 4 ) ; [[dahn]] . putInt ( code ) ; [[dahn]] . position ( 2 ) ; ByteBuffer pay = ByteBuffer . allocate ( 2 + by . length ) ; pay . put ( [[dahn]] ) ; pay . put ( by ) ; pay . rewind ( ) ; super . setPayload ( pay ) ; }
[[[[Nl]]]]: Update the payload to represent the close code and the reason
--------------------------------------------- Result 471 ---------------------------------------------
Processes a binary frame . --> Called on websocket . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameBinary]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame

[[[[Adv]]]]: private void [[bow]] ( WebSocketImpl webSocketImpl , Framedata frame ) { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , frame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a binary frame
--------------------------------------------- Result 472 ---------------------------------------------
Processes frame and dispatches a continuous frame --> Processes frames that are being continued . --> Socre: 1.0

[[[[Adv]]]]: private void processFrameContinuousAndNonFin ( WebSocketImpl webSocketImpl , Framedata frame , Opcode [[curop]] ) throws InvalidDataException { if ( [[curop]] != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set

[[[[Adv]]]]: private void processFrameContinuousAndNonFin ( WebSocketImpl webSocketImpl , Framedata frame , Opcode [[chads]] ) throws InvalidDataException { if ( [[chads]] != Opcode . CONTINUOUS ) { processFrameIsNotFin ( frame ) ; } else if ( frame . isFin ( ) ) { processFrameIsFin ( webSocketImpl , frame ) ; } else if ( currentContinuousFrame == null ) { log . error ( "Protocol error: Continuous frame sequence was not started." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; }
[[[[Nl]]]]: Process the frame if it is a continuous frame or the fin bit is not set
--------------------------------------------- Result 473 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 305 / 158 / 10 / 473:  47%|████▋     | 473/1000 [45:09<50:18,  5.73s/it][Succeeded / Failed / Skipped / Total] 305 / 158 / 10 / 473:  47%|████▋     | 474/1000 [45:15<50:13,  5.73s/it][Succeeded / Failed / Skipped / Total] 306 / 158 / 10 / 474:  47%|████▋     | 474/1000 [45:15<50:13,  5.73s/it][Succeeded / Failed / Skipped / Total] 306 / 158 / 10 / 474:  48%|████▊     | 475/1000 [45:23<50:10,  5.73s/it][Succeeded / Failed / Skipped / Total] 307 / 158 / 10 / 475:  48%|████▊     | 475/1000 [45:23<50:10,  5.73s/it][Succeeded / Failed / Skipped / Total] 307 / 158 / 10 / 475:  48%|████▊     | 476/1000 [45:25<49:59,  5.73s/it][Succeeded / Failed / Skipped / Total] 308 / 158 / 10 / 476:  48%|████▊     | 476/1000 [45:25<49:59,  5.73s/it][Succeeded / Failed / Skipped / Total] 308 / 158 / 10 / 476:  48%|████▊     | 477/1000 [45:29<49:53,  5.72s/it][Succeeded / Failed / Skipped / Total] 309 / 158 / 10 / 477:  48%|████▊     | 477/1000 [45:29<49:53,  5.72s/it][Succeeded / Failed / Skipped / Total] 309 / 158 / 10 / 477:  48%|████▊     | 478/1000 [45:32<49:43,  5.72s/it]Translate single frame length limit . --> This method is used for unit test --> Socre: 1.0

[[[[Adv]]]]: private void [[translateSingleFrameCheckLengthLimit]] ( long [[length]] ) throws LimitExceededException { if ( [[length]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[length]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[length]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[length]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit

[[[[Adv]]]]: private void [[guyver]] ( long [[townships]] ) throws LimitExceededException { if ( [[townships]] > Integer . MAX_VALUE ) { log . trace ( "Limit exedeed: Payloadsize is to big..." ) ; throw new LimitExceededException ( "Payloadsize is to big..." ) ; } if ( [[townships]] > maxFrameSize ) { log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , [[townships]] ) ; throw new LimitExceededException ( "Payload limit reached." , maxFrameSize ) ; } if ( [[townships]] < 0 ) { log . trace ( "Limit underflow: Payloadsize is to little..." ) ; throw new LimitExceededException ( "Payloadsize is to little..." ) ; } }
[[[[Nl]]]]: Check if the frame size exceeds the allowed limit
--------------------------------------------- Result 474 ---------------------------------------------
Logs a runtime exception . --> Logs WebSocketException in WebSocketMessage --> Socre: 1.0

[[[[Adv]]]]: private void logRuntimeException ( WebSocketImpl [[webSocketImpl]] , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; [[webSocketImpl]] . getWebSocketListener ( ) . onWebsocketError ( [[webSocketImpl]] , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl

[[[[Adv]]]]: private void logRuntimeException ( WebSocketImpl [[grandmom]] , RuntimeException e ) { log . error ( "Runtime exception during onWebsocketMessage" , e ) ; [[grandmom]] . getWebSocketListener ( ) . onWebsocketError ( [[grandmom]] , e ) ; }
[[[[Nl]]]]: Log the runtime exception to the specific WebSocketImpl
--------------------------------------------- Result 475 ---------------------------------------------
Process a text message . --> Bundle message . --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameText]] ( WebSocketImpl webSocketImpl , Framedata [[frame]] ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( [[frame]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame

[[[[Adv]]]]: private void [[bk]] ( WebSocketImpl webSocketImpl , Framedata [[megamind]] ) throws InvalidDataException { try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( [[megamind]] . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } }
[[[[Nl]]]]: Process the frame if it is a text frame
--------------------------------------------- Result 476 ---------------------------------------------
Processes a continuous frame --> asynchronously --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameIsFin]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame

[[[[Adv]]]]: private void [[aslam]] ( WebSocketImpl webSocketImpl , Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame == null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Continuous frame sequence was not started." ) ; } addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; if ( currentContinuousFrame . getOpcode ( ) == Opcode . TEXT ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , Charsetfunctions . stringUtf8 ( currentContinuousFrame . getPayloadData ( ) ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } else if ( currentContinuousFrame . getOpcode ( ) == Opcode . BINARY ) { ( ( FramedataImpl1 ) currentContinuousFrame ) . setPayload ( getPayloadFromByteBufferList ( ) ) ; ( ( FramedataImpl1 ) currentContinuousFrame ) . isValid ( ) ; try { webSocketImpl . getWebSocketListener ( ) . onWebsocketMessage ( webSocketImpl , currentContinuousFrame . getPayloadData ( ) ) ; } catch ( RuntimeException e ) { logRuntimeException ( webSocketImpl , e ) ; } } currentContinuousFrame = null ; clearBufferList ( ) ; }
[[[[Nl]]]]: Process the frame if it is the last frame
--------------------------------------------- Result 477 ---------------------------------------------
Generate final key . --> Generates ARACH NACHN IDs for the given gps . --> Socre: 1.0

[[[[Adv]]]]: private String [[generateFinalKey]] ( String [[in]] ) { String [[seckey]] = [[in]] . trim ( ) ; String acc = [[seckey]] + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string

[[[[Adv]]]]: private String [[arachnids]] ( String [[gps]] ) { String [[baptized]] = [[gps]] . trim ( ) ; String acc = [[baptized]] + "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" ; MessageDigest sh1 ; try { sh1 = MessageDigest . getInstance ( "SHA1" ) ; } catch ( NoSuchAlgorithmException e ) { throw new IllegalStateException ( e ) ; } return Base64 . encodeBytes ( sh1 . digest ( acc . getBytes ( ) ) ) ; }
[[[[Nl]]]]: Generate a final key from a input string
--------------------------------------------- Result 478 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 309 / 159 / 10 / 478:  48%|████▊     | 478/1000 [45:32<49:43,  5.72s/it][Succeeded / Failed / Skipped / Total] 309 / 159 / 10 / 478:  48%|████▊     | 479/1000 [45:45<49:46,  5.73s/it][Succeeded / Failed / Skipped / Total] 309 / 160 / 10 / 479:  48%|████▊     | 479/1000 [45:45<49:46,  5.73s/it][Succeeded / Failed / Skipped / Total] 309 / 160 / 10 / 479:  48%|████▊     | 480/1000 [45:50<49:39,  5.73s/it][Succeeded / Failed / Skipped / Total] 310 / 160 / 10 / 480:  48%|████▊     | 480/1000 [45:50<49:39,  5.73s/it][Succeeded / Failed / Skipped / Total] 310 / 160 / 10 / 480:  48%|████▊     | 481/1000 [45:53<49:30,  5.72s/it][Succeeded / Failed / Skipped / Total] 311 / 160 / 10 / 481:  48%|████▊     | 481/1000 [45:53<49:30,  5.72s/it][Succeeded / Failed / Skipped / Total] 311 / 160 / 10 / 481:  48%|████▊     | 482/1000 [45:59<49:25,  5.72s/it][Succeeded / Failed / Skipped / Total] 312 / 160 / 10 / 482:  48%|████▊     | 482/1000 [45:59<49:25,  5.72s/it][Succeeded / Failed / Skipped / Total] 312 / 160 / 10 / 482:  48%|████▊     | 483/1000 [45:59<49:13,  5.71s/it][Succeeded / Failed / Skipped / Total] 313 / 160 / 10 / 483:  48%|████▊     | 483/1000 [45:59<49:13,  5.71s/it][Succeeded / Failed / Skipped / Total] 313 / 160 / 10 / 483:  48%|████▊     | 484/1000 [46:00<49:03,  5.70s/it][Succeeded / Failed / Skipped / Total] 314 / 160 / 10 / 484:  48%|████▊     | 484/1000 [46:00<49:03,  5.70s/it][Succeeded / Failed / Skipped / Total] 314 / 160 / 10 / 484:  48%|████▊     | 485/1000 [46:10<49:02,  5.71s/it]Processes next frame . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[processFrameIsNotFin]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame

[[[[Adv]]]]: private void [[senorita]] ( Framedata frame ) throws InvalidDataException { if ( currentContinuousFrame != null ) { log . trace ( "Protocol error: Previous continuous frame sequence not completed." ) ; throw new InvalidDataException ( CloseFrame . PROTOCOL_ERROR , "Previous continuous frame sequence not completed." ) ; } currentContinuousFrame = frame ; addToBufferList ( frame . getPayloadData ( ) ) ; checkBufferLimit ( ) ; }
[[[[Nl]]]]: Process the frame if it is not the last frame
--------------------------------------------- Result 479 ---------------------------------------------
Checks the limit . --> [[[FAILED]]]

[[[[Adv]]]]: private void checkBufferLimit ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size

[[[[Adv]]]]: private void checkBufferLimit ( ) throws LimitExceededException { long totalSize = getByteBufferListSize ( ) ; if ( totalSize > maxFrameSize ) { clearBufferList ( ) ; log . trace ( "Payload limit reached. Allowed: {} Current: {}" , maxFrameSize , totalSize ) ; throw new LimitExceededException ( maxFrameSize ) ; } }
[[[[Nl]]]]: Check the current size of the buffer and throw an exception if the size is bigger than the max allowed frame size
--------------------------------------------- Result 480 ---------------------------------------------
Returns the total size of the byteBuffer list . --> Determines how much data is available . --> Socre: 1.0

[[[[Adv]]]]: private long [[getByteBufferListSize]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer [[buffer]] : byteBufferList ) { totalSize += [[buffer]] . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list

[[[[Adv]]]]: private long [[decent]] ( ) { long totalSize = 0 ; synchronized ( byteBufferList ) { for ( ByteBuffer [[managers]] : byteBufferList ) { totalSize += [[managers]] . limit ( ) ; } } return totalSize ; }
[[[[Nl]]]]: Get the current size of the resulting bytebuffer in the bytebuffer list
--------------------------------------------- Result 481 ---------------------------------------------
Process a Frame . --> flipped content --> Socre: 1.0

[[[[Adv]]]]: private void [[processFrameClosing]] ( WebSocketImpl [[webSocketImpl]] , Framedata [[frame]] ) { int [[code]] = CloseFrame . NOCODE ; String reason = "" ; if ( [[frame]] instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) [[frame]] ; [[code]] = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( [[webSocketImpl]] . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame

[[[[Adv]]]]: private void [[flipp]] ( WebSocketImpl [[egyptologist]] , Framedata [[contaminated]] ) { int [[conny]] = CloseFrame . NOCODE ; String reason = "" ; if ( [[contaminated]] instanceof CloseFrame ) { CloseFrame cf = ( CloseFrame ) [[contaminated]] ; [[conny]] = cf . getCloseCode ( ) ; reason = cf . getMessage ( ) ; } if ( [[egyptologist]] . getReadyState ( ) == ReadyState . CLOSING ) {
[[[[Nl]]]]: Process the frame if it is a closing frame
--------------------------------------------- Result 482 ---------------------------------------------
Translate handshake . --> Convenience method to allow you to override this . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpServer]] ( String [ ] firstLineTokens , String [[line]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server

[[[[Adv]]]]: private static HandshakeBuilder [[aimée]] ( String [ ] firstLineTokens , String [[où]] ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as server
--------------------------------------------- Result 483 ---------------------------------------------
Decodes the frame . --> Decodes a chip . --> Socre: 1.0

[[[[Adv]]]]: public void decode ( ByteBuffer [[socketBuffer]] ) { assert ( [[socketBuffer]] . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , [[socketBuffer]] . remaining ( ) , ( [[socketBuffer]] . remaining ( ) > 1000 ? "too big to display" : new String ( [[socketBuffer]] . array ( ) , [[socketBuffer]] . position ( ) , [[socketBuffer]] . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( [[socketBuffer]] ) ; } } else { if ( decodeHandshake ( [[socketBuffer]] ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != [[socketBuffer]] . hasRemaining ( ) || ! [[socketBuffer]] . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer

[[[[Adv]]]]: public void decode ( ByteBuffer [[chipmunk]] ) { assert ( [[chipmunk]] . hasRemaining ( ) ) ; log . trace ( "process({}): ({})" , [[chipmunk]] . remaining ( ) , ( [[chipmunk]] . remaining ( ) > 1000 ? "too big to display" : new String ( [[chipmunk]] . array ( ) , [[chipmunk]] . position ( ) , [[chipmunk]] . remaining ( ) ) ) ) ; if ( readyState != ReadyState . NOT_YET_CONNECTED ) { if ( readyState == ReadyState . OPEN ) { decodeFrames ( [[chipmunk]] ) ; } } else { if ( decodeHandshake ( [[chipmunk]] ) && ( ! isClosing ( ) && ! isClosed ( ) ) ) { assert ( tmpHandshakeBytes . hasRemaining ( ) != [[chipmunk]] . hasRemaining ( ) || ! [[chipmunk]] . hasRemaining ( ) ) ;
[[[[Nl]]]]: Method to decode the provided ByteBuffer
--------------------------------------------- Result 484 ---------------------------------------------
Gets the payload from the buffer list . --> do not work --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[getPayloadFromByteBufferList]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer [[resultingByteBuffer]] ; synchronized ( byteBufferList ) { for ( ByteBuffer [[buffer]] : byteBufferList ) { totalSize += [[buffer]] . limit ( ) ; } checkBufferLimit ( ) ; [[resultingByteBuffer]] = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer [[buffer]] : byteBufferList ) { [[resultingByteBuffer]] . put ( [[buffer]] ) ; } } [[resultingByteBuffer]] . flip ( ) ; return [[resultingByteBuffer]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload

[[[[Adv]]]]: private ByteBuffer [[doodads]] ( ) throws LimitExceededException { long totalSize = 0 ; ByteBuffer [[bunions]] ; synchronized ( byteBufferList ) { for ( ByteBuffer [[bagman]] : byteBufferList ) { totalSize += [[bagman]] . limit ( ) ; } checkBufferLimit ( ) ; [[bunions]] = ByteBuffer . allocate ( ( int ) totalSize ) ; for ( ByteBuffer [[bagman]] : byteBufferList ) { [[bunions]] . put ( [[bagman]] ) ; } } [[bunions]] . flip ( ) ; return [[bunions]] ; }
[[[[Nl]]]]: Method to generate a full bytebuffer out of all the fragmented frame payload
--------------------------------------------- Result 485 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 315 / 160 / 10 / 485:  48%|████▊     | 485/1000 [46:10<49:02,  5.71s/it][Succeeded / Failed / Skipped / Total] 315 / 160 / 10 / 485:  49%|████▊     | 486/1000 [46:13<48:53,  5.71s/it][Succeeded / Failed / Skipped / Total] 316 / 160 / 10 / 486:  49%|████▊     | 486/1000 [46:13<48:53,  5.71s/it][Succeeded / Failed / Skipped / Total] 316 / 160 / 10 / 486:  49%|████▊     | 487/1000 [46:13<48:41,  5.70s/it][Succeeded / Failed / Skipped / Total] 316 / 160 / 11 / 487:  49%|████▊     | 487/1000 [46:13<48:41,  5.70s/it][Succeeded / Failed / Skipped / Total] 316 / 160 / 11 / 487:  49%|████▉     | 488/1000 [46:13<48:30,  5.68s/it][Succeeded / Failed / Skipped / Total] 317 / 160 / 11 / 488:  49%|████▉     | 488/1000 [46:13<48:30,  5.68s/it][Succeeded / Failed / Skipped / Total] 317 / 160 / 11 / 488:  49%|████▉     | 489/1000 [46:21<48:26,  5.69s/it][Succeeded / Failed / Skipped / Total] 317 / 161 / 11 / 489:  49%|████▉     | 489/1000 [46:21<48:26,  5.69s/it][Succeeded / Failed / Skipped / Total] 317 / 161 / 11 / 489:  49%|████▉     | 490/1000 [46:22<48:15,  5.68s/it][Succeeded / Failed / Skipped / Total] 318 / 161 / 11 / 490:  49%|████▉     | 490/1000 [46:22<48:15,  5.68s/it][Succeeded / Failed / Skipped / Total] 318 / 161 / 11 / 490:  49%|████▉     | 491/1000 [46:26<48:08,  5.67s/it][Succeeded / Failed / Skipped / Total] 318 / 162 / 11 / 491:  49%|████▉     | 491/1000 [46:26<48:08,  5.67s/it][Succeeded / Failed / Skipped / Total] 318 / 162 / 11 / 491:  49%|████▉     | 492/1000 [46:39<48:10,  5.69s/it][Succeeded / Failed / Skipped / Total] 319 / 162 / 11 / 492:  49%|████▉     | 492/1000 [46:39<48:10,  5.69s/it][Succeeded / Failed / Skipped / Total] 319 / 162 / 11 / 492:  49%|████▉     | 493/1000 [46:42<48:02,  5.68s/it]Translate handshake . --> Blocking call . --> Socre: 1.0

[[[[Adv]]]]: private static HandshakeBuilder [[translateHandshakeHttpClient]] ( String [ ] [[firstLineTokens]] , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client

[[[[Adv]]]]: private static HandshakeBuilder [[blistered]] ( String [ ] [[fruitcake]] , String line ) throws InvalidHandshakeException {
[[[[Nl]]]]: Checking the handshake for the role as client
--------------------------------------------- Result 486 ---------------------------------------------
Send a connection to the server . --> Send Eiling response . --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToInternalServerError]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "[[False]]" != "[[False]]" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException

[[[[Adv]]]]: private void [[eiling]] ( RuntimeException exception ) { write ( generateHttpResponseDueToError ( 500 ) ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , exception . getMessage ( ) , "[["Kuo" != "Kuo"]]" != "[["Kuo" != "Kuo"]]" ) ; }
[[[[Nl]]]]: Close the connection if there was a server error by a RuntimeException
--------------------------------------------- Result 487 ---------------------------------------------
Resets the connection . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void reset ( ) { Thread current = Thread . currentThread ( ) ; if ( current == writeThread || current == connectReadThread ) { throw new IllegalStateException ( "You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup." ) ; } try { closeBlocking ( ) ; if ( writeThread != null ) { this . writeThread . interrupt ( ) ; this . writeThread = null ; } if ( connectReadThread != null ) { this . connectReadThread . interrupt ( ) ; this . connectReadThread = null ; } this . draft . reset ( ) ; if ( this . socket != null ) { this . socket . close ( ) ; this . socket = null ; } } catch ( Exception e ) { onError ( e ) ; engine . closeConnection ( CloseFrame . ABNORMAL_CLOSE , e . getMessage ( ) ) ; return ; } connectLatch = new CountDownLatch ( 1 ) ; closeLatch = new CountDownLatch ( 1 ) ; this . engine = new WebSocketImpl ( this , this . draft ) ; }
[[[[Nl]]]]: Reset everything relevant to allow a reconnect
--------------------------------------------- Result 488 ---------------------------------------------
Closes the connection . --> This method is called when an agent exits --> Socre: 1.0

[[[[Adv]]]]: private void [[closeConnectionDueToWrongHandshake]] ( InvalidDataException [[exception]] ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( [[exception]] . getCloseCode ( ) , [[exception]] . getMessage ( ) , False ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct

[[[[Adv]]]]: private void [[accounts]] ( InvalidDataException [[prison]] ) { write ( generateHttpResponseDueToError ( 404 ) ) ; flushAndClose ( [[prison]] . getCloseCode ( ) , [[prison]] . getMessage ( ) , False ) ; }
[[[[Nl]]]]: Close the connection if the received handshake was not correct
--------------------------------------------- Result 489 ---------------------------------------------
Start the connect thread . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[connect]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .

[[[[Adv]]]]: public void [[asparagus]] ( ) { if ( connectReadThread != null ) throw new IllegalStateException ( "WebSocketClient objects are not reuseable" ) ; connectReadThread = new Thread ( this ) ; connectReadThread . setName ( "WebSocketConnectReadThread-" + connectReadThread . getId ( ) ) ; connectReadThread . start ( ) ; }
[[[[Nl]]]]: Initiates the websocket connection . This method does not block .
--------------------------------------------- Result 490 ---------------------------------------------
Generates the HTTP response due to an error . --> Generates fragmentation message --> Socre: 1.0

[[[[Adv]]]]: private ByteBuffer [[generateHttpResponseDueToError]] ( int [[errorCode]] ) { String errorCodeDescription ; switch ( [[errorCode]] ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error

[[[[Adv]]]]: private ByteBuffer [[fragmentation]] ( int [[dried]] ) { String errorCodeDescription ; switch ( [[dried]] ) { case 404 : errorCodeDescription = "404 WebSocket Upgrade Failure" ; break ; case 500 : default : errorCodeDescription = "500 Internal Server Error" ; } return ByteBuffer . wrap ( Charsetfunctions . asciiBytes ( "HTTP/1.1 " + errorCodeDescription + "\r\nContent-Type: text/html\nServer: TooTallNate Java-WebSocket\r\nContent-Length: " + ( 48 + errorCodeDescription . length ( ) ) + "\r\n\r\n<html><head></head><body><h1>" + errorCodeDescription + "</h1></body></html>" ) ) ; }
[[[[Nl]]]]: Generate a simple response for the corresponding endpoint to indicate some error
--------------------------------------------- Result 491 ---------------------------------------------
Send a message to a WebSocketImpl --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[send]] ( String [[text]] ) { if ( [[text]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[send]] ( draft . createFrames ( [[text]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .

[[[[Adv]]]]: @ Override public void [[superior]] ( String [[baking]] ) { if ( [[baking]] == null ) throw new IllegalArgumentException ( "Cannot send 'null' data to a WebSocketImpl." ) ; [[superior]] ( draft . createFrames ( [[baking]] , role == Role . CLIENT ) ) ; }
[[[[Nl]]]]: Send Text data to the other end .
--------------------------------------------- Result 492 ---------------------------------------------
Returns the port . --> Checks to see if it s well - formed --> Socre: 1.0

[[[[Adv]]]]: private int [[getPort]] ( ) { int [[port]] = uri . getPort ( ) ; if ( [[port]] == - 1 ) { String [[scheme]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[scheme]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[scheme]] ) ; } } return [[port]] ; }
[[[[Nl]]]]: Extract the specified port

[[[[Adv]]]]: private int [[wellesley]] ( ) { int [[animal]] = uri . getPort ( ) ; if ( [[animal]] == - 1 ) { String [[throwed]] = uri . getScheme ( ) ; if ( "wss" . equals ( [[throwed]] ) ) { return WebSocketImpl . DEFAULT_WSS_PORT ; } else if ( "ws" . equals ( [[throwed]] ) ) { return WebSocketImpl . DEFAULT_PORT ; } else { throw new IllegalArgumentException ( "unknown scheme: " + [[throwed]] ) ; } } return [[animal]] ; }
[[[[Nl]]]]: Extract the specified port
--------------------------------------------- Result 493 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 320 / 162 / 11 / 493:  49%|████▉     | 493/1000 [46:42<48:02,  5.68s/it][Succeeded / Failed / Skipped / Total] 320 / 162 / 11 / 493:  49%|████▉     | 494/1000 [46:47<47:55,  5.68s/it][Succeeded / Failed / Skipped / Total] 321 / 162 / 11 / 494:  49%|████▉     | 494/1000 [46:47<47:55,  5.68s/it][Succeeded / Failed / Skipped / Total] 321 / 162 / 11 / 494:  50%|████▉     | 495/1000 [46:50<47:47,  5.68s/it][Succeeded / Failed / Skipped / Total] 322 / 162 / 11 / 495:  50%|████▉     | 495/1000 [46:50<47:47,  5.68s/it][Succeeded / Failed / Skipped / Total] 322 / 162 / 11 / 495:  50%|████▉     | 496/1000 [46:57<47:42,  5.68s/it][Succeeded / Failed / Skipped / Total] 323 / 162 / 11 / 496:  50%|████▉     | 496/1000 [46:57<47:42,  5.68s/it][Succeeded / Failed / Skipped / Total] 323 / 162 / 11 / 496:  50%|████▉     | 497/1000 [46:58<47:32,  5.67s/it][Succeeded / Failed / Skipped / Total] 324 / 162 / 11 / 497:  50%|████▉     | 497/1000 [46:58<47:32,  5.67s/it][Succeeded / Failed / Skipped / Total] 324 / 162 / 11 / 497:  50%|████▉     | 498/1000 [47:02<47:25,  5.67s/it][Succeeded / Failed / Skipped / Total] 325 / 162 / 11 / 498:  50%|████▉     | 498/1000 [47:02<47:25,  5.67s/it][Succeeded / Failed / Skipped / Total] 325 / 162 / 11 / 498:  50%|████▉     | 499/1000 [47:03<47:15,  5.66s/it]Stop connection lost timer . --> Called by websocket . --> Socre: 1.0

[[[[Adv]]]]: protected void [[stopConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "[[False]]" != "[[False]]" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer

[[[[Adv]]]]: protected void [[displayed]] ( ) { synchronized ( syncConnectionLost ) { if ( connectionLostCheckerService != null || connectionLostCheckerFuture != null ) { this . websocketRunning = "[["Bosley" != "Bosley"]]" != "[["Bosley" != "Bosley"]]" ; log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; } } }
[[[[Nl]]]]: Stop the connection lost timer
--------------------------------------------- Result 494 ---------------------------------------------
Sets the connection lost timeout . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: public void [[setConnectionLostTimeout]] ( int [[connectionLostTimeout]] ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( [[connectionLostTimeout]] ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . [[websocketRunning]] ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated

[[[[Adv]]]]: public void [[comprehensible]] ( int [[dien]] ) { synchronized ( syncConnectionLost ) { this . connectionLostTimeout = TimeUnit . SECONDS . toNanos ( [[dien]] ) ; if ( this . connectionLostTimeout <= 0 ) { log . trace ( "Connection lost timer stopped" ) ; cancelConnectionLostTimer ( ) ; return ; } if ( this . [[ferrante]] ) { log . trace ( "Connection lost timer restarted" ) ;
[[[[Nl]]]]: Setter for the interval checking for lost connections A value lower or equal 0 results in the check to be deactivated
--------------------------------------------- Result 495 ---------------------------------------------
Send the handshake . --> Build watercolours . --> Socre: 1.0

[[[[Adv]]]]: private void [[sendHandshake]] ( ) throws InvalidHandshakeException { String path ; String [[part1]] = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( [[part1]] == null || [[part1]] . length ( ) == 0 ) path = "/" ; else path = [[part1]] ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String [[host]] = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client [[handshake]] = new HandshakeImpl1Client ( ) ; [[handshake]] . setResourceDescriptor ( path ) ; [[handshake]] . put ( "Host" , [[host]] ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { [[handshake]] . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( [[handshake]] ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint

[[[[Adv]]]]: private void [[accounts]] ( ) throws InvalidHandshakeException { String path ; String [[regroup]] = uri . getRawPath ( ) ; String part2 = uri . getRawQuery ( ) ; if ( [[regroup]] == null || [[regroup]] . length ( ) == 0 ) path = "/" ; else path = [[regroup]] ; if ( part2 != null ) path += ' ' + part2 ; int port = getPort ( ) ; String [[boswell]] = uri . getHost ( ) + ( ( port != WebSocketImpl . DEFAULT_PORT && port != WebSocketImpl . DEFAULT_WSS_PORT ) ? ":" + port : "" ) ; HandshakeImpl1Client [[watercolours]] = new HandshakeImpl1Client ( ) ; [[watercolours]] . setResourceDescriptor ( path ) ; [[watercolours]] . put ( "Host" , [[boswell]] ) ; if ( headers != null ) { for ( Map . Entry < String , String > kv : headers . entrySet ( ) ) { [[watercolours]] . put ( kv . getKey ( ) , kv . getValue ( ) ) ; } } engine . startHandshake ( [[watercolours]] ) ; }
[[[[Nl]]]]: Create and send the handshake to the other endpoint
--------------------------------------------- Result 496 ---------------------------------------------
Start connection lost timer . --> Instructs websocket shutdown . --> Socre: 1.0

[[[[Adv]]]]: protected void [[startConnectionLostTimer]] ( ) { synchronized ( syncConnectionLost ) { if ( this . [[connectionLostTimeout]] <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = True ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer

[[[[Adv]]]]: protected void [[instruct]] ( ) { synchronized ( syncConnectionLost ) { if ( this . [[bhaiyya]] <= 0 ) { log . trace ( "Connection lost timer deactivated" ) ; return ; } log . trace ( "Connection lost timer started" ) ; this . websocketRunning = True ; restartConnectionLostTimer ( ) ; } }
[[[[Nl]]]]: Start the connection lost timer
--------------------------------------------- Result 497 ---------------------------------------------
Execute a connection lost ping . --> Called when WebSocket is lost . --> Socre: 1.0

[[[[Adv]]]]: private void executeConnectionLostDetection ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl [[webSocketImpl]] = ( WebSocketImpl ) webSocket ; if ( [[webSocketImpl]] . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , [[webSocketImpl]] ) ; [[webSocketImpl]] . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( [[webSocketImpl]] . isOpen ( ) ) { [[webSocketImpl]] . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , [[webSocketImpl]] ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping

[[[[Adv]]]]: private void executeConnectionLostDetection ( WebSocket webSocket , long minimumPongTime ) { if ( ! ( webSocket instanceof WebSocketImpl ) ) { return ; } WebSocketImpl [[ball]] = ( WebSocketImpl ) webSocket ; if ( [[ball]] . getLastPong ( ) < minimumPongTime ) { log . trace ( "Closing connection due to no pong received: {}" , [[ball]] ) ; [[ball]] . closeConnection ( CloseFrame . ABNORMAL_CLOSE , "The connection was closed because the other endpoint did not respond with a pong in time. For more information check: https://github.com/TooTallNate/Java-WebSocket/wiki/Lost-connection-detection" ) ; } else { if ( [[ball]] . isOpen ( ) ) { [[ball]] . sendPing ( ) ; } else { log . trace ( "Trying to ping a non open connection: {}" , [[ball]] ) ; } } }
[[[[Nl]]]]: Send a ping to the endpoint or close the connection since the other endpoint did not respond with a ping
--------------------------------------------- Result 498 ---------------------------------------------
Cancels the connection lost timer . --> Shutdown automation . --> Socre: 1.0

[[[[Adv]]]]: private void [[cancelConnectionLostTimer]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "[[False]]" != "[[False]]" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection

[[[[Adv]]]]: private void [[automation]] ( ) { if ( connectionLostCheckerService != null ) { connectionLostCheckerService . shutdownNow ( ) ; connectionLostCheckerService = null ; } if ( connectionLostCheckerFuture != null ) { connectionLostCheckerFuture . cancel ( "[["Casca" != "Casca"]]" != "[["Casca" != "Casca"]]" ) ; connectionLostCheckerFuture = null ; } }
[[[[Nl]]]]: Cancel any running timer for the connection lost detection
[Succeeded / Failed / Skipped / Total] 326 / 162 / 11 / 499:  50%|████▉     | 499/1000 [47:03<47:15,  5.66s/it][Succeeded / Failed / Skipped / Total] 326 / 162 / 11 / 499:  50%|█████     | 500/1000 [47:04<47:04,  5.65s/it][Succeeded / Failed / Skipped / Total] 327 / 162 / 11 / 500:  50%|█████     | 500/1000 [47:04<47:04,  5.65s/it][Succeeded / Failed / Skipped / Total] 327 / 162 / 11 / 500:  50%|█████     | 501/1000 [47:15<47:03,  5.66s/it][Succeeded / Failed / Skipped / Total] 328 / 162 / 11 / 501:  50%|█████     | 501/1000 [47:15<47:03,  5.66s/it][Succeeded / Failed / Skipped / Total] 328 / 162 / 11 / 501:  50%|█████     | 502/1000 [47:16<46:54,  5.65s/it][Succeeded / Failed / Skipped / Total] 329 / 162 / 11 / 502:  50%|█████     | 502/1000 [47:16<46:54,  5.65s/it][Succeeded / Failed / Skipped / Total] 329 / 162 / 11 / 502:  50%|█████     | 503/1000 [47:18<46:45,  5.64s/it][Succeeded / Failed / Skipped / Total] 329 / 163 / 11 / 503:  50%|█████     | 503/1000 [47:18<46:45,  5.64s/it][Succeeded / Failed / Skipped / Total] 329 / 164 / 11 / 504:  50%|█████     | 504/1000 [47:19<46:33,  5.63s/it][Succeeded / Failed / Skipped / Total] 329 / 164 / 11 / 504:  50%|█████     | 505/1000 [47:22<46:25,  5.63s/it]--------------------------------------------- Result 499 ---------------------------------------------
Restart the connection lost timer . --> Shortcut for easy debugging --> Socre: 1.0

[[[[Adv]]]]: private void [[restartConnectionLostTimer]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long [[minimumPongTime]] = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket [[conn]] : connections ) { executeConnectionLostDetection ( [[conn]] , [[minimumPongTime]] ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter

[[[[Adv]]]]: private void [[easy]] ( ) { cancelConnectionLostTimer ( ) ; connectionLostCheckerService = Executors . newSingleThreadScheduledExecutor ( new NamedThreadFactory ( "connectionLostChecker" ) ) ; Runnable connectionLostChecker = new Runnable ( ) { private ArrayList < WebSocket > connections = new ArrayList < WebSocket > ( ) ; @ Override public void run ( ) { connections . clear ( ) ; try { connections . addAll ( getConnections ( ) ) ; long [[cond]] = ( long ) ( System . nanoTime ( ) - ( connectionLostTimeout * 1.5 ) ) ; for ( WebSocket [[communal]] : connections ) { executeConnectionLostDetection ( [[communal]] , [[cond]] ) ; } } catch ( Exception e ) {
[[[[Nl]]]]: This methods allows the reset of the connection lost timer in case of a changed parameter
--------------------------------------------- Result 500 ---------------------------------------------
Initiate handshake . --> only for testing --> Socre: 1.0

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[onWebsocketHandshakeReceivedAsServer]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .

[[[[Adv]]]]: @ Override public ServerHandshakeBuilder [[batshit]] ( WebSocket conn , Draft draft , ClientHandshake request ) throws InvalidDataException { return new HandshakeImpl1Server ( ) ; }
[[[[Nl]]]]: This default implementation does not do anything . Go ahead and overwrite it .
--------------------------------------------- Result 501 ---------------------------------------------
Stops the queue . --> Stop Zookeeper --> Socre: 1.0

[[[[Adv]]]]: public void stop ( int [[timeout]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "[[False]]" != "[[False]]" , True ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .

[[[[Adv]]]]: public void stop ( int [[zooms]] ) throws InterruptedException { if ( ! isclosed . compareAndSet ( "[["Gaz" != "Gaz"]]" != "[["Gaz" != "Gaz"]]" , True ) ) {
[[[[Nl]]]]: Closes all connected clients sockets then closes the underlying ServerSocketChannel effectively killing the server socket selectorthread freeing the port the server was bound to and stops all internal workerthreads .
--------------------------------------------- Result 502 ---------------------------------------------
Handles additional read . --> Does the actual reading . --> Socre: 1.0

[[[[Adv]]]]: private void doAdditionalRead ( ) throws InterruptedException , [[IOException]] { WebSocketImpl [[conn]] ; while ( ! iqueue . isEmpty ( ) ) { [[conn]] = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) [[conn]] . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , [[conn]] , c ) ) iqueue . add ( [[conn]] ) ; if ( buf . hasRemaining ( ) ) { [[conn]] . inQueue . put ( buf ) ; queue ( [[conn]] ) ; } else { pushBuffer ( buf ) ; } } catch ( [[IOException]] e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read

[[[[Adv]]]]: private void doAdditionalRead ( ) throws InterruptedException , [[prophecies]] { WebSocketImpl [[aaahh]] ; while ( ! iqueue . isEmpty ( ) ) { [[aaahh]] = iqueue . remove ( 0 ) ; WrappedByteChannel c = ( ( WrappedByteChannel ) [[aaahh]] . getChannel ( ) ) ; ByteBuffer buf = takeBuffer ( ) ; try { if ( SocketChannelIOHelper . readMore ( buf , [[aaahh]] , c ) ) iqueue . add ( [[aaahh]] ) ; if ( buf . hasRemaining ( ) ) { [[aaahh]] . inQueue . put ( buf ) ; queue ( [[aaahh]] ) ; } else { pushBuffer ( buf ) ; } } catch ( [[prophecies]] e ) { pushBuffer ( buf ) ; throw e ; } } }
[[[[Nl]]]]: Do an additional read
--------------------------------------------- Result 503 ---------------------------------------------
Sends a ping frame . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[onWebsocketPing]] ( WebSocket conn , Framedata f ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .

[[[[Adv]]]]: @ Override public void [[requisite]] ( WebSocket conn , Framedata f ) { conn . sendFrame ( new PongFrame ( ( PingFrame ) f ) ) ; }
[[[[Nl]]]]: This default implementation will send a pong in response to the received ping . The pong frame will have the same payload as the ping frame .
--------------------------------------------- Result 504 ---------------------------------------------
Returns the port . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getPort]] ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port number that this server listens on .

[[[[Adv]]]]: public int [[bighead]] ( ) { int port = getAddress ( ) . getPort ( ) ; if ( port == 0 && server != null ) { port = server . socket ( ) . getLocalPort ( ) ; } return port ; }
[[[[Nl]]]]: Gets the port number that this server listens on .
--------------------------------------------- Result 505 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 330 / 164 / 11 / 505:  50%|█████     | 505/1000 [47:22<46:25,  5.63s/it][Succeeded / Failed / Skipped / Total] 330 / 164 / 12 / 506:  51%|█████     | 506/1000 [47:22<46:14,  5.62s/it][Succeeded / Failed / Skipped / Total] 330 / 164 / 12 / 506:  51%|█████     | 507/1000 [47:24<46:05,  5.61s/it][Succeeded / Failed / Skipped / Total] 331 / 164 / 12 / 507:  51%|█████     | 507/1000 [47:24<46:05,  5.61s/it][Succeeded / Failed / Skipped / Total] 332 / 164 / 12 / 508:  51%|█████     | 508/1000 [47:25<45:56,  5.60s/it][Succeeded / Failed / Skipped / Total] 332 / 164 / 12 / 508:  51%|█████     | 509/1000 [47:28<45:47,  5.60s/it][Succeeded / Failed / Skipped / Total] 333 / 164 / 12 / 509:  51%|█████     | 509/1000 [47:28<45:47,  5.60s/it][Succeeded / Failed / Skipped / Total] 334 / 164 / 12 / 510:  51%|█████     | 510/1000 [47:31<45:39,  5.59s/it][Succeeded / Failed / Skipped / Total] 334 / 164 / 12 / 510:  51%|█████     | 511/1000 [47:38<45:35,  5.59s/it]Accepts a single connection . --> Accepts the given selector . --> Socre: 1.0

[[[[Adv]]]]: private void doAccept ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( False ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "[[True]]" == "[[True]]" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation

[[[[Adv]]]]: private void doAccept ( SelectionKey key , Iterator < SelectionKey > i ) throws IOException , InterruptedException { if ( ! onConnect ( key ) ) { key . cancel ( ) ; return ; } SocketChannel channel = server . accept ( ) ; if ( channel == null ) { return ; } channel . configureBlocking ( False ) ; Socket socket = channel . socket ( ) ; socket . setTcpNoDelay ( isTcpNoDelay ( ) ) ; socket . setKeepAlive ( "[["Branching" == "Branching"]]" == "[["Branching" == "Branching"]]" ) ; WebSocketImpl w = wsf . createWebSocket ( this , drafts ) ; w . setSelectionKey ( channel . register ( selector , SelectionKey . OP_READ , w ) ) ; try { w . setChannel ( wsf . wrapChannel ( channel , w . getSelectionKey ( ) ) ) ; i . remove ( ) ; allocateBuffers ( w ) ; } catch ( IOException ex ) { if ( w . getSelectionKey ( ) != null ) w . getSelectionKey ( ) . cancel ( ) ; handleIOException ( w . getSelectionKey ( ) , null , ex ) ; } }
[[[[Nl]]]]: Execute a accept operation
--------------------------------------------- Result 506 ---------------------------------------------
Ensure that a single thread is single thread . --> [[[SKIPPED]]]

[[[[Adv]]]]: private boolean doEnsureSingleThread ( ) { synchronized ( this ) { if ( selectorthread != null ) throw new IllegalStateException ( getClass ( ) . getName ( ) + " can only be started once." ) ; selectorthread = Thread . currentThread ( ) ; if ( isclosed . get ( ) ) { return False ; } } return True ; }
[[[[Nl]]]]: The websocket server can only be started once
--------------------------------------------- Result 507 ---------------------------------------------
Handles a read . --> Reads the data from the input . --> Socre: 1.0

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl [[conn]] = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( [[conn]] . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , [[conn]] , new IOException ( ) ) ; return False ; } try { if ( SocketChannelIOHelper . read ( buf , [[conn]] , [[conn]] . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { [[conn]] . inQueue . put ( buf ) ; queue ( [[conn]] ) ; i . remove ( ) ; if ( [[conn]] . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) [[conn]] . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( [[conn]] ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return True ; }
[[[[Nl]]]]: Execute a read operation

[[[[Adv]]]]: private boolean doRead ( SelectionKey key , Iterator < SelectionKey > i ) throws InterruptedException , IOException { WebSocketImpl [[dozing]] = ( WebSocketImpl ) key . attachment ( ) ; ByteBuffer buf = takeBuffer ( ) ; if ( [[dozing]] . getChannel ( ) == null ) { key . cancel ( ) ; handleIOException ( key , [[dozing]] , new IOException ( ) ) ; return False ; } try { if ( SocketChannelIOHelper . read ( buf , [[dozing]] , [[dozing]] . getChannel ( ) ) ) { if ( buf . hasRemaining ( ) ) { [[dozing]] . inQueue . put ( buf ) ; queue ( [[dozing]] ) ; i . remove ( ) ; if ( [[dozing]] . getChannel ( ) instanceof WrappedByteChannel && ( ( WrappedByteChannel ) [[dozing]] . getChannel ( ) ) . isNeedRead ( ) ) { iqueue . add ( [[dozing]] ) ; } } else { pushBuffer ( buf ) ; } } else { pushBuffer ( buf ) ; } } catch ( IOException e ) { pushBuffer ( buf ) ; throw e ; } return True ; }
[[[[Nl]]]]: Execute a read operation
--------------------------------------------- Result 508 ---------------------------------------------
Handles a single write . --> Writes to batch . --> Socre: 1.0

[[[[Adv]]]]: private void doWrite ( SelectionKey [[key]] ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) [[key]] . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( [[key]] . isValid ( ) ) { [[key]] . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation

[[[[Adv]]]]: private void doWrite ( SelectionKey [[bucky]] ) throws IOException { WebSocketImpl conn = ( WebSocketImpl ) [[bucky]] . attachment ( ) ; if ( SocketChannelIOHelper . batch ( conn , conn . getChannel ( ) ) ) { if ( [[bucky]] . isValid ( ) ) { [[bucky]] . interestOps ( SelectionKey . OP_READ ) ; } } }
[[[[Nl]]]]: Execute a write operation
--------------------------------------------- Result 509 ---------------------------------------------
Do shutdown . --> Shut down the server . --> Socre: 1.0

[[[[Adv]]]]: private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker [[w]] : decoders ) { [[w]] . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown

[[[[Adv]]]]: private void doServerShutdown ( ) { stopConnectionLostTimer ( ) ; if ( decoders != null ) { for ( WebSocketWorker [[kawakami]] : decoders ) { [[kawakami]] . interrupt ( ) ; } } if ( selector != null ) { try { selector . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during selector.close" , e ) ; onError ( null , e ) ; } } if ( server != null ) { try { server . close ( ) ; } catch ( IOException e ) { log . error ( "IOException during server.close" , e ) ; onError ( null , e ) ; } } }
[[[[Nl]]]]: Clean up everything after a shutdown
--------------------------------------------- Result 510 ---------------------------------------------
Get the socket . --> Do not work . --> Socre: 1.0

[[[[Adv]]]]: private Socket [[getSocket]] ( WebSocket conn ) { WebSocketImpl impl = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection

[[[[Adv]]]]: private Socket [[doodads]] ( WebSocket conn ) { WebSocketImpl impl = ( WebSocketImpl ) conn ; return ( ( SocketChannel ) impl . getSelectionKey ( ) . channel ( ) ) . socket ( ) ; }
[[[[Nl]]]]: Getter to return the socket used by this specific connection
--------------------------------------------- Result 511 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 335 / 164 / 12 / 511:  51%|█████     | 511/1000 [47:38<45:35,  5.59s/it][Succeeded / Failed / Skipped / Total] 335 / 164 / 12 / 511:  51%|█████     | 512/1000 [47:38<45:24,  5.58s/it][Succeeded / Failed / Skipped / Total] 335 / 164 / 13 / 512:  51%|█████     | 512/1000 [47:38<45:24,  5.58s/it][Succeeded / Failed / Skipped / Total] 335 / 164 / 13 / 512:  51%|█████▏    | 513/1000 [47:45<45:20,  5.59s/it][Succeeded / Failed / Skipped / Total] 336 / 164 / 13 / 513:  51%|█████▏    | 513/1000 [47:45<45:20,  5.59s/it][Succeeded / Failed / Skipped / Total] 336 / 164 / 13 / 513:  51%|█████▏    | 514/1000 [47:46<45:10,  5.58s/it][Succeeded / Failed / Skipped / Total] 337 / 164 / 13 / 514:  51%|█████▏    | 514/1000 [47:46<45:10,  5.58s/it][Succeeded / Failed / Skipped / Total] 337 / 164 / 13 / 514:  52%|█████▏    | 515/1000 [47:50<45:03,  5.57s/it][Succeeded / Failed / Skipped / Total] 338 / 164 / 13 / 515:  52%|█████▏    | 515/1000 [47:50<45:03,  5.57s/it][Succeeded / Failed / Skipped / Total] 338 / 164 / 13 / 515:  52%|█████▏    | 516/1000 [47:51<44:53,  5.57s/it][Succeeded / Failed / Skipped / Total] 339 / 164 / 13 / 516:  52%|█████▏    | 516/1000 [47:51<44:53,  5.57s/it][Succeeded / Failed / Skipped / Total] 339 / 164 / 13 / 516:  52%|█████▏    | 517/1000 [47:53<44:44,  5.56s/it][Succeeded / Failed / Skipped / Total] 340 / 164 / 13 / 517:  52%|█████▏    | 517/1000 [47:53<44:44,  5.56s/it][Succeeded / Failed / Skipped / Total] 340 / 164 / 13 / 517:  52%|█████▏    | 518/1000 [47:56<44:36,  5.55s/it]Broadcast data to all clients . --> Broadcast data --> Socre: 1.0

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > [[draftFrames]] = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , [[draftFrames]] , sData , bData ) ; try { client . sendFrame ( [[draftFrames]] . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time

[[[[Adv]]]]: private void doBroadcast ( Object data , Collection < WebSocket > clients ) { String sData = null ; if ( data instanceof String ) { sData = ( String ) data ; } ByteBuffer bData = null ; if ( data instanceof ByteBuffer ) { bData = ( ByteBuffer ) data ; } if ( sData == null && bData == null ) { return ; } Map < Draft , List < Framedata > > [[shaman]] = new HashMap < Draft , List < Framedata > > ( ) ; for ( WebSocket client : clients ) { if ( client != null ) { Draft draft = client . getDraft ( ) ; fillFrames ( draft , [[shaman]] , sData , bData ) ; try { client . sendFrame ( [[shaman]] . get ( draft ) ) ; } catch ( WebsocketNotConnectedException e ) {
[[[[Nl]]]]: Private method to cache all the frames to improve memory footprint and conversion time
--------------------------------------------- Result 512 ---------------------------------------------
Fill frames in a draft map --> [[[SKIPPED]]]

[[[[Adv]]]]: private void fillFrames ( Draft draft , Map < Draft , List < Framedata > > draftFrames , String sData , ByteBuffer bData ) { if ( ! draftFrames . containsKey ( draft ) ) { List < Framedata > frames = null ; if ( sData != null ) { frames = draft . createFrames ( sData , False ) ; } if ( bData != null ) { frames = draft . createFrames ( bData , False ) ; } if ( frames != null ) { draftFrames . put ( draft , frames ) ; } } }
[[[[Nl]]]]: Fills the draftFrames with new data for the broadcast
--------------------------------------------- Result 513 ---------------------------------------------
Broadcasts a text to all clients . --> Depechete message . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( String text , Collection < WebSocket > [[clients]] ) { if ( text == null || [[clients]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( text , [[clients]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections

[[[[Adv]]]]: public void [[depeche]] ( String text , Collection < WebSocket > [[matchstick]] ) { if ( text == null || [[matchstick]] == null ) { throw new IllegalArgumentException ( ) ; } doBroadcast ( text , [[matchstick]] ) ; }
[[[[Nl]]]]: Send a text to a specific collection of websocket connections
--------------------------------------------- Result 514 ---------------------------------------------
Setup the selector and server thread . --> Helper method . --> Socre: 1.0

[[[[Adv]]]]: private boolean [[doSetupSelectorAndServerThread]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( False ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return False ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings

[[[[Adv]]]]: private boolean [[compatriots]] ( ) { selectorthread . setName ( "WebSocketSelector-" + selectorthread . getId ( ) ) ; try { server = ServerSocketChannel . open ( ) ; server . configureBlocking ( False ) ; ServerSocket socket = server . socket ( ) ; socket . setReceiveBufferSize ( WebSocketImpl . RCVBUF ) ; socket . setReuseAddress ( isReuseAddr ( ) ) ; socket . bind ( address ) ; selector = Selector . open ( ) ; server . register ( selector , server . validOps ( ) ) ; startConnectionLostTimer ( ) ; for ( WebSocketWorker ex : decoders ) { ex . start ( ) ; } onStart ( ) ; } catch ( IOException ex ) { handleFatal ( null , ex ) ; return False ; } return "[["Uhl" == "Uhl"]]" == "[["Uhl" == "Uhl"]]" ; }
[[[[Nl]]]]: Setup the selector thread as well as basic server settings
--------------------------------------------- Result 515 ---------------------------------------------
Transfers source to destination . --> Transfers source into byte buffer . --> Socre: 1.0

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer source , ByteBuffer [[dest]] ) { if ( source == null || [[dest]] == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = [[dest]] . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; [[dest]] . put ( source ) ; return limit ; } else { [[dest]] . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer

[[[[Adv]]]]: public static int transferByteBuffer ( ByteBuffer source , ByteBuffer [[allay]] ) { if ( source == null || [[allay]] == null ) { throw new IllegalArgumentException ( ) ; } int fremain = source . remaining ( ) ; int toremain = [[allay]] . remaining ( ) ; if ( fremain > toremain ) { int limit = Math . min ( fremain , toremain ) ; source . limit ( limit ) ; [[allay]] . put ( source ) ; return limit ; } else { [[allay]] . put ( source ) ; return fremain ; } }
[[[[Nl]]]]: Transfer from one ByteBuffer to another ByteBuffer
--------------------------------------------- Result 516 ---------------------------------------------
Broadcast data to all clients . --> Fetline the specified data . --> Socre: 1.0

[[[[Adv]]]]: public void [[broadcast]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[broadcast]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections

[[[[Adv]]]]: public void [[bowline]] ( byte [ ] data , Collection < WebSocket > clients ) { if ( data == null || clients == null ) { throw new IllegalArgumentException ( ) ; } [[bowline]] ( ByteBuffer . wrap ( data ) , clients ) ; }
[[[[Nl]]]]: Send a byte array to a specific collection of websocket connections
--------------------------------------------- Result 517 ---------------------------------------------
Starts the repository . --> Add persistence units --> Socre: 1.0

[[[[Adv]]]]: public JPAApi [[start]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .

[[[[Adv]]]]: public JPAApi [[oude]] ( ) { jpaConfig . persistenceUnits ( ) . forEach ( persistenceUnit -> emfs . put ( persistenceUnit . name , Persistence . createEntityManagerFactory ( persistenceUnit . unitName ) ) ) ; return this ; }
[[[[Nl]]]]: Initialise JPA entity manager factories .
--------------------------------------------- Result 518 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 341 / 164 / 13 / 518:  52%|█████▏    | 518/1000 [47:56<44:36,  5.55s/it][Succeeded / Failed / Skipped / Total] 341 / 164 / 13 / 518:  52%|█████▏    | 519/1000 [48:05<44:34,  5.56s/it][Succeeded / Failed / Skipped / Total] 342 / 164 / 13 / 519:  52%|█████▏    | 519/1000 [48:05<44:34,  5.56s/it][Succeeded / Failed / Skipped / Total] 343 / 164 / 13 / 520:  52%|█████▏    | 520/1000 [48:06<44:24,  5.55s/it][Succeeded / Failed / Skipped / Total] 343 / 164 / 13 / 520:  52%|█████▏    | 521/1000 [48:10<44:17,  5.55s/it][Succeeded / Failed / Skipped / Total] 344 / 164 / 13 / 521:  52%|█████▏    | 521/1000 [48:10<44:17,  5.55s/it][Succeeded / Failed / Skipped / Total] 344 / 164 / 13 / 521:  52%|█████▏    | 521/1000 [48:30<44:35,  5.59s/it][Succeeded / Failed / Skipped / Total] 344 / 164 / 13 / 521:  52%|█████▏    | 522/1000 [48:38<44:32,  5.59s/it][Succeeded / Failed / Skipped / Total] 344 / 165 / 13 / 522:  52%|█████▏    | 522/1000 [48:38<44:32,  5.59s/it][Succeeded / Failed / Skipped / Total] 344 / 165 / 13 / 522:  52%|█████▏    | 523/1000 [48:39<44:22,  5.58s/it][Succeeded / Failed / Skipped / Total] 344 / 166 / 13 / 523:  52%|█████▏    | 523/1000 [48:39<44:22,  5.58s/it][Succeeded / Failed / Skipped / Total] 344 / 166 / 13 / 523:  52%|█████▏    | 524/1000 [48:40<44:12,  5.57s/it][Succeeded / Failed / Skipped / Total] 344 / 167 / 13 / 524:  52%|█████▏    | 524/1000 [48:40<44:12,  5.57s/it][Succeeded / Failed / Skipped / Total] 344 / 167 / 13 / 524:  52%|█████▎    | 525/1000 [48:55<44:16,  5.59s/it][Succeeded / Failed / Skipped / Total] 344 / 168 / 13 / 525:  52%|█████▎    | 525/1000 [48:55<44:16,  5.59s/it][Succeeded / Failed / Skipped / Total] 344 / 168 / 13 / 525:  53%|█████▎    | 526/1000 [48:59<44:08,  5.59s/it][Succeeded / Failed / Skipped / Total] 344 / 169 / 13 / 526:  53%|█████▎    | 526/1000 [48:59<44:08,  5.59s/it][Succeeded / Failed / Skipped / Total] 344 / 169 / 13 / 526:  53%|█████▎    | 527/1000 [49:02<44:00,  5.58s/it][Succeeded / Failed / Skipped / Total] 344 / 170 / 13 / 527:  53%|█████▎    | 527/1000 [49:02<44:00,  5.58s/it][Succeeded / Failed / Skipped / Total] 344 / 170 / 13 / 527:  53%|█████▎    | 528/1000 [49:04<43:51,  5.58s/it]Returns the entity manager for the given name . --> returns null if not found --> Socre: 1.0

[[[[Adv]]]]: public EntityManager em ( String name ) { EntityManagerFactory [[emf]] = emfs . get ( name ) ; if ( [[emf]] == null ) { return null ; } return [[emf]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .

[[[[Adv]]]]: public EntityManager em ( String name ) { EntityManagerFactory [[ladyship]] = emfs . get ( name ) ; if ( [[ladyship]] == null ) { return null ; } return [[ladyship]] . createEntityManager ( ) ; }
[[[[Nl]]]]: Get a newly created EntityManager for the specified persistence unit name .
--------------------------------------------- Result 519 ---------------------------------------------
Enables transactional transaction . --> Notification that this entity is outbound --> Socre: 1.0

[[[[Adv]]]]: public void [[withTransaction]] ( Consumer < EntityManager > [[block]] ) { [[withTransaction]] ( em -> { [[block]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .

[[[[Adv]]]]: public void [[outstretched]] ( Consumer < EntityManager > [[abdication]] ) { [[outstretched]] ( em -> { [[abdication]] . accept ( em ) ; return null ; } ) ; }
[[[[Nl]]]]: Run a block of code with a newly created EntityManager for the default Persistence Unit .
--------------------------------------------- Result 520 ---------------------------------------------
Converts the given arguments to Scala buffer . --> non - serialization --> Socre: 1.0

[[[[Adv]]]]: private static Seq < Object > [[convertArgsToScalaBuffer]] ( final Object ... [[args]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[args]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary

[[[[Adv]]]]: private static Seq < Object > [[adulation]] ( final Object ... [[fermat]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( wrapArgsToListIfNeeded ( [[fermat]] ) ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts the varargs to a scala buffer takes care of wrapping varargs into a intermediate list if necessary
--------------------------------------------- Result 521 ---------------------------------------------
Wraps the given arguments if necessary . --> Returns bmerowitzowitz --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[wrapArgsToListIfNeeded]] ( final T ... [[args]] ) { List < T > out ; if ( [[args]] != null && [[args]] . length == 1 && [[args]] [ 0 ] instanceof List ) { out = ( List < T > ) [[args]] [ 0 ] ; } else { out = Arrays . asList ( [[args]] ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .

[[[[Adv]]]]: @ SafeVarargs private static < T > List < T > [[berkowitz]] ( final T ... [[blackie]] ) { List < T > out ; if ( [[blackie]] != null && [[blackie]] . length == 1 && [[blackie]] [ 0 ] instanceof List ) { out = ( List < T > ) [[blackie]] [ 0 ] ; } else { out = Arrays . asList ( [[blackie]] ) ; } return out ; }
[[[[Nl]]]]: Wraps arguments passed into a list if necessary .
--------------------------------------------- Result 522 ---------------------------------------------
Checks if the specified key is defined at the specified key . --> [[[FAILED]]]

[[[[Adv]]]]: public Boolean [[isDefinedAt]] ( play . api . i18n . Lang [[lang]] , String [[key]] ) { return messages . isDefinedAt ( [[key]] , [[lang]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .

[[[[Adv]]]]: public Boolean [[accor]] ( play . api . i18n . Lang [[busting]] , String [[drexel]] ) { return messages . isDefinedAt ( [[drexel]] , [[busting]] ) ; }
[[[[Nl]]]]: Check if a message key is defined .
--------------------------------------------- Result 523 ---------------------------------------------
Gets localized message . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang [[lang]] , String [[key]] , Object ... args ) { Seq < Object > [[scalaArgs]] = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[key]] , [[scalaArgs]] , [[lang]] ) ; }
[[[[Nl]]]]: Translates a message .

[[[[Adv]]]]: public String [[unconvinced]] ( play . api . i18n . Lang [[steeds]] , String [[granddaughters]] , Object ... args ) { Seq < Object > [[enchante]] = convertArgsToScalaBuffer ( args ) ; return messages . apply ( [[granddaughters]] , [[enchante]] , [[steeds]] ) ; }
[[[[Nl]]]]: Translates a message .
--------------------------------------------- Result 524 ---------------------------------------------
Returns the preferred messages for the specified languages . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages preferred ( Collection < Lang > candidates ) { Seq < Lang > [[cs]] = Scala . asScala ( candidates ) ; play . api . i18n . Messages [[msgs]] = messages . preferred ( ( Seq ) [[cs]] ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .

[[[[Adv]]]]: public Messages preferred ( Collection < Lang > candidates ) { Seq < Lang > [[hospitals]] = Scala . asScala ( candidates ) ; play . api . i18n . Messages [[watchers]] = messages . preferred ( ( Seq ) [[hospitals]] ) ; return new MessagesImpl ( new Lang ( [[watchers]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given candidates .
--------------------------------------------- Result 525 ---------------------------------------------
Gets a localized message . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[get]] ( play . api . i18n . Lang [[lang]] , List < String > keys , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , [[lang]] ) ; }
[[[[Nl]]]]: Translates the first defined message .

[[[[Adv]]]]: public String [[coelho]] ( play . api . i18n . Lang [[momentum]] , List < String > keys , Object ... args ) { Buffer < String > keyArgs = scala . collection . JavaConverters . asScalaBufferConverter ( keys ) . asScala ( ) ; Seq < Object > scalaArgs = convertArgsToScalaBuffer ( args ) ; return messages . apply ( keyArgs . toSeq ( ) , scalaArgs , [[momentum]] ) ; }
[[[[Nl]]]]: Translates the first defined message .
--------------------------------------------- Result 526 ---------------------------------------------
Display the preferred message for the request . --> [[[FAILED]]]

[[[[Adv]]]]: public Messages [[preferred]] ( Http . RequestHeader [[request]] ) { play . api . i18n . Messages [[msgs]] = messages . preferred ( [[request]] ) ; return new MessagesImpl ( new Lang ( [[msgs]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .

[[[[Adv]]]]: public Messages [[ostend]] ( Http . RequestHeader [[joys]] ) { play . api . i18n . Messages [[anesthesiologist]] = messages . preferred ( [[joys]] ) ; return new MessagesImpl ( new Lang ( [[anesthesiologist]] . lang ( ) ) , this ) ; }
[[[[Nl]]]]: Get a messages context appropriate for the given request .
--------------------------------------------- Result 527 ---------------------------------------------
Adds bindings for the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[bindings]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .

[[[[Adv]]]]: public final Self [[monks]] ( GuiceableModule ... [[cattlemen]] ) { return newBuilder ( delegate . bindings ( Scala . varargs ( [[cattlemen]] ) ) ) ; }
[[[[Nl]]]]: Add bindings from guiceable modules .
--------------------------------------------- Result 528 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 345 / 170 / 13 / 528:  53%|█████▎    | 528/1000 [49:04<43:51,  5.58s/it][Succeeded / Failed / Skipped / Total] 345 / 170 / 13 / 528:  53%|█████▎    | 529/1000 [49:09<43:45,  5.58s/it][Succeeded / Failed / Skipped / Total] 346 / 170 / 13 / 529:  53%|█████▎    | 529/1000 [49:09<43:45,  5.58s/it][Succeeded / Failed / Skipped / Total] 346 / 170 / 13 / 529:  53%|█████▎    | 530/1000 [49:11<43:37,  5.57s/it][Succeeded / Failed / Skipped / Total] 347 / 170 / 13 / 530:  53%|█████▎    | 530/1000 [49:11<43:37,  5.57s/it][Succeeded / Failed / Skipped / Total] 347 / 170 / 13 / 530:  53%|█████▎    | 531/1000 [49:14<43:29,  5.56s/it][Succeeded / Failed / Skipped / Total] 348 / 170 / 13 / 531:  53%|█████▎    | 531/1000 [49:14<43:29,  5.56s/it][Succeeded / Failed / Skipped / Total] 348 / 170 / 13 / 531:  53%|█████▎    | 532/1000 [49:18<43:22,  5.56s/it][Succeeded / Failed / Skipped / Total] 349 / 170 / 13 / 532:  53%|█████▎    | 532/1000 [49:18<43:22,  5.56s/it][Succeeded / Failed / Skipped / Total] 349 / 170 / 13 / 532:  53%|█████▎    | 533/1000 [49:24<43:17,  5.56s/it][Succeeded / Failed / Skipped / Total] 349 / 171 / 13 / 533:  53%|█████▎    | 533/1000 [49:24<43:17,  5.56s/it][Succeeded / Failed / Skipped / Total] 349 / 171 / 13 / 533:  53%|█████▎    | 534/1000 [49:30<43:12,  5.56s/it][Succeeded / Failed / Skipped / Total] 350 / 171 / 13 / 534:  53%|█████▎    | 534/1000 [49:30<43:12,  5.56s/it][Succeeded / Failed / Skipped / Total] 350 / 171 / 13 / 534:  54%|█████▎    | 535/1000 [49:30<43:02,  5.55s/it][Succeeded / Failed / Skipped / Total] 351 / 171 / 13 / 535:  54%|█████▎    | 535/1000 [49:30<43:02,  5.55s/it][Succeeded / Failed / Skipped / Total] 351 / 171 / 13 / 535:  54%|█████▎    | 536/1000 [49:31<42:52,  5.54s/it][Succeeded / Failed / Skipped / Total] 351 / 172 / 13 / 536:  54%|█████▎    | 536/1000 [49:31<42:52,  5.54s/it][Succeeded / Failed / Skipped / Total] 351 / 172 / 13 / 536:  54%|█████▎    | 537/1000 [49:36<42:46,  5.54s/it][Succeeded / Failed / Skipped / Total] 351 / 173 / 13 / 537:  54%|█████▎    | 537/1000 [49:36<42:46,  5.54s/it][Succeeded / Failed / Skipped / Total] 351 / 173 / 13 / 537:  54%|█████▍    | 538/1000 [49:38<42:38,  5.54s/it][Succeeded / Failed / Skipped / Total] 352 / 173 / 13 / 538:  54%|█████▍    | 538/1000 [49:38<42:38,  5.54s/it][Succeeded / Failed / Skipped / Total] 352 / 173 / 13 / 538:  54%|█████▍    | 539/1000 [49:39<42:28,  5.53s/it][Succeeded / Failed / Skipped / Total] 353 / 173 / 13 / 539:  54%|█████▍    | 539/1000 [49:39<42:28,  5.53s/it][Succeeded / Failed / Skipped / Total] 353 / 173 / 13 / 539:  54%|█████▍    | 540/1000 [49:48<42:25,  5.53s/it][Succeeded / Failed / Skipped / Total] 354 / 173 / 13 / 540:  54%|█████▍    | 540/1000 [49:48<42:25,  5.53s/it][Succeeded / Failed / Skipped / Total] 354 / 173 / 13 / 540:  54%|█████▍    | 541/1000 [50:00<42:25,  5.55s/it]Add bindings for the given modules . --> This method is called when this instance is broken --> Socre: 1.0

[[[[Adv]]]]: public final Self [[bindings]] ( play . api . inject . Module ... modules ) { return [[bindings]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .

[[[[Adv]]]]: public final Self [[broke]] ( play . api . inject . Module ... modules ) { return [[broke]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Add bindings from Play modules .
--------------------------------------------- Result 529 ---------------------------------------------
Define a set of REPLACE expressions . --> Construct a new instance of this Component --> Socre: 1.0

[[[[Adv]]]]: public final Self [[REPLACEME0]] ( play . api . inject . Binding < ? > ... [[REPLACEME0]] ) { return [[REPLACEME0]] ( Guiceable . bindings ( [[REPLACEME0]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .

[[[[Adv]]]]: public final Self [[AFOUL]] ( play . api . inject . Binding < ? > ... [[AFOUL]] ) { return [[AFOUL]] ( Guiceable . bindings ( [[AFOUL]] ) ) ; }
[[[[Nl]]]]: Add Play bindings .
--------------------------------------------- Result 530 ---------------------------------------------
Sets the translation . -->  archetype --> Socre: 1.0

[[[[Adv]]]]: public Result [[setLang]] ( Result [[result]] , Lang [[lang]] ) { return messages . setLang ( [[result]] . asScala ( ) , [[lang]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .

[[[[Adv]]]]: public Result [[archetype]] ( Result [[dryers]] , Lang [[condescend]] ) { return messages . setLang ( [[dryers]] . asScala ( ) , [[condescend]] ) . asJava ( ) ; }
[[[[Nl]]]]: Given a Result and a Lang return a new Result with the lang cookie set to the given Lang .
--------------------------------------------- Result 531 ---------------------------------------------
Overrides the default overrides . --> Set all overrides from Guice --> Socre: 1.0

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Module ... [[modules]] ) { return overrides ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Module ... [[managua]] ) { return overrides ( Guiceable . [[managua]] ( [[managua]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play modules .
--------------------------------------------- Result 532 ---------------------------------------------
Specifies the specified bindings for this Guice . --> This will be overridden by subclasses --> Socre: 1.0

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Binding < ? > ... [[bindings]] ) { return overrides ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .

[[[[Adv]]]]: public final Self overrides ( play . api . inject . Binding < ? > ... [[coronary]] ) { return overrides ( Guiceable . [[coronary]] ( [[coronary]] ) ) ; }
[[[[Nl]]]]: Override bindings using Play bindings .
--------------------------------------------- Result 533 ---------------------------------------------
Defines a set of overrides from the specified modules . --> [[[FAILED]]]

[[[[Adv]]]]: public final Self [[overrides]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .

[[[[Adv]]]]: public final Self [[brushes]] ( GuiceableModule ... [[cidade]] ) { return newBuilder ( delegate . overrides ( Scala . varargs ( [[cidade]] ) ) ) ; }
[[[[Nl]]]]: Override bindings using guiceable modules .
--------------------------------------------- Result 534 ---------------------------------------------
Disables given modules . --> Specify Self Disclosure --> Socre: 1.0

[[[[Adv]]]]: public final Self [[disable]] ( Class < ? > ... [[moduleClasses]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[moduleClasses]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .

[[[[Adv]]]]: public final Self [[dishonor]] ( Class < ? > ... [[incompetence]] ) { return newBuilder ( delegate . disable ( Scala . toSeq ( [[incompetence]] ) ) ) ; }
[[[[Nl]]]]: Disable modules by class .
--------------------------------------------- Result 535 ---------------------------------------------
Execute the given request . --> Completes an EUN --> Socre: 1.0

[[[[Adv]]]]: public CompletionStage < Result > [[call]] ( Request [[req]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .

[[[[Adv]]]]: public CompletionStage < Result > [[eunuch]] ( Request [[annick]] ) {
[[[[Nl]]]]: Executes this action with the given HTTP request and returns the result .
--------------------------------------------- Result 536 ---------------------------------------------
Converts an annotation into a Java binding . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .

[[[[Adv]]]]: public < A [[banana]] Annotation > Binding < T > in ( final Class < A > scope ) { return underlying . in ( scope ) . asJava ( ) ; }
[[[[Nl]]]]: Configure the scope for this binding .
--------------------------------------------- Result 537 ---------------------------------------------
Gets an existing file . --> [[[FAILED]]]

[[[[Adv]]]]: public Optional < File > getExistingFile ( String [[relativePath]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[relativePath]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .

[[[[Adv]]]]: public Optional < File > getExistingFile ( String [[blaise]] ) { return OptionConverters . toJava ( env . getExistingFile ( [[blaise]] ) ) ; }
[[[[Nl]]]]: Retrieves a file relative to the application root path . This method returns an Optional using empty if the file was not found .
--------------------------------------------- Result 538 ---------------------------------------------
Static factory method for creating a tuple --> Static factory method for creating Accepts . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B > [[Tuple]] < A , B > [[Tuple]] ( A a , B b ) { return new [[Tuple]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B

[[[[Adv]]]]: public static < A , B > [[Accepts]] < A , B > [[Accepts]] ( A a , B b ) { return new [[Accepts]] < A , B > ( a , b ) ; }
[[[[Nl]]]]: Constructs a tuple of A B
--------------------------------------------- Result 539 ---------------------------------------------
Construct a Tuple 5 . --> Static factory method for creating tuples 5 . --> Socre: 1.0

[[[[Adv]]]]: public static < A , B , C , [[D]] , E > Tuple5 < A , B , C , [[D]] , E > Tuple5 ( A a , B b , C c , [[D]] d , E e ) { return new Tuple5 < A , B , C , [[D]] , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E

[[[[Adv]]]]: public static < A , B , C , [[aleksey]] , E > Tuple5 < A , B , C , [[aleksey]] , E > Tuple5 ( A a , B b , C c , [[aleksey]] d , E e ) { return new Tuple5 < A , B , C , [[aleksey]] , E > ( a , b , c , d , e ) ; }
[[[[Nl]]]]: Constructs a tuple of A B C D E
--------------------------------------------- Result 540 ---------------------------------------------
Converts the given execution context to an executor . --> returns Executable --> Socre: 1.0

[[[[Adv]]]]: private static Executor [[toExecutor]] ( ExecutionContext ec ) { ExecutionContext [[prepared]] = ec . prepare ( ) ; if ( [[prepared]] instanceof Executor ) { return ( Executor ) [[prepared]] ; } else { return [[prepared]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .

[[[[Adv]]]]: private static Executor [[lovelace]] ( ExecutionContext ec ) { ExecutionContext [[broke]] = ec . prepare ( ) ; if ( [[broke]] instanceof Executor ) { return ( Executor ) [[broke]] ; } else { return [[broke]] :: execute ; } }
[[[[Nl]]]]: Converts the execution context to an executor preparing it first .
[Succeeded / Failed / Skipped / Total] 355 / 173 / 13 / 541:  54%|█████▍    | 541/1000 [50:00<42:25,  5.55s/it][Succeeded / Failed / Skipped / Total] 355 / 173 / 13 / 541:  54%|█████▍    | 542/1000 [50:06<42:20,  5.55s/it][Succeeded / Failed / Skipped / Total] 355 / 174 / 13 / 542:  54%|█████▍    | 542/1000 [50:06<42:20,  5.55s/it][Succeeded / Failed / Skipped / Total] 355 / 174 / 13 / 542:  54%|█████▍    | 543/1000 [50:14<42:17,  5.55s/it][Succeeded / Failed / Skipped / Total] 355 / 175 / 13 / 543:  54%|█████▍    | 543/1000 [50:14<42:17,  5.55s/it][Succeeded / Failed / Skipped / Total] 355 / 175 / 13 / 543:  54%|█████▍    | 544/1000 [50:20<42:11,  5.55s/it][Succeeded / Failed / Skipped / Total] 355 / 176 / 13 / 544:  54%|█████▍    | 544/1000 [50:20<42:11,  5.55s/it][Succeeded / Failed / Skipped / Total] 355 / 176 / 13 / 544:  55%|█████▍    | 545/1000 [50:23<42:04,  5.55s/it][Succeeded / Failed / Skipped / Total] 355 / 177 / 13 / 545:  55%|█████▍    | 545/1000 [50:23<42:04,  5.55s/it][Succeeded / Failed / Skipped / Total] 355 / 177 / 13 / 545:  55%|█████▍    | 546/1000 [50:31<42:00,  5.55s/it][Succeeded / Failed / Skipped / Total] 355 / 178 / 13 / 546:  55%|█████▍    | 546/1000 [50:31<42:00,  5.55s/it][Succeeded / Failed / Skipped / Total] 355 / 178 / 13 / 546:  55%|█████▍    | 547/1000 [50:42<41:59,  5.56s/it][Succeeded / Failed / Skipped / Total] 355 / 179 / 13 / 547:  55%|█████▍    | 547/1000 [50:42<41:59,  5.56s/it][Succeeded / Failed / Skipped / Total] 355 / 179 / 13 / 547:  55%|█████▍    | 548/1000 [50:51<41:56,  5.57s/it][Succeeded / Failed / Skipped / Total] 355 / 180 / 13 / 548:  55%|█████▍    | 548/1000 [50:51<41:56,  5.57s/it][Succeeded / Failed / Skipped / Total] 355 / 180 / 13 / 548:  55%|█████▍    | 549/1000 [50:59<41:53,  5.57s/it]--------------------------------------------- Result 541 ---------------------------------------------
Create a flow of bytes --> LB --> Socre: 1.0

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[string]] ( String [[callbackName]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < String , ByteString , NotUsed > [[labrador]] ( String [[dee]] ) { return Flow . of ( String . class ) . map ( str -> { return ByteString . fromString ( "'" + StringEscapeUtils . escapeEcmaScript ( str ) + "'" ) ; } ) . via ( flow ( [[dee]] ) ) ; }
[[[[Nl]]]]: Produces a Flow of escaped ByteString from a series of String elements . Calls out to Comet . flow internally .
--------------------------------------------- Result 542 ---------------------------------------------
Returns a new instance with the given name and unit name . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[of]] ( String name , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .

[[[[Adv]]]]: public static JPAConfig [[exteriors]] ( String name , String unitName ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( name , unitName ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given name and unit name .
--------------------------------------------- Result 543 ---------------------------------------------
Creates a flow of json nodes . --> [[[FAILED]]]

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[json]] ( String [[callbackName]] ) { return Flow . of ( JsonNode . class ) . map ( [[json]] -> { return ByteString . fromString ( Json . stringify ( [[json]] ) ) ; } ) . via ( flow ( [[callbackName]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .

[[[[Adv]]]]: public static Flow < JsonNode , ByteString , NotUsed > [[herding]] ( String [[high]] ) { return Flow . of ( JsonNode . class ) . map ( [[herding]] -> { return ByteString . fromString ( Json . stringify ( [[herding]] ) ) ; } ) . via ( flow ( [[high]] ) ) ; }
[[[[Nl]]]]: Produces a flow of ByteString using Json . stringify from a Flow of JsonNode . Calls out to Comet . flow internally .
--------------------------------------------- Result 544 ---------------------------------------------
Create a new instance from a map of properties . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[from]] ( Map < String , String > [[map]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : [[map]] . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .

[[[[Adv]]]]: public static JPAConfig [[induce]] ( Map < String , String > [[chokin]] ) { ImmutableSet . Builder < JPAConfig . PersistenceUnit > persistenceUnits = new ImmutableSet . Builder < JPAConfig . PersistenceUnit > ( ) ; for ( Map . Entry < String , String > entry : [[chokin]] . entrySet ( ) ) { persistenceUnits . add ( new JPAConfig . PersistenceUnit ( entry . getKey ( ) , entry . getValue ( ) ) ) ; } return new DefaultJPAConfig ( persistenceUnits . build ( ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration from a map of names to unit names .
--------------------------------------------- Result 545 ---------------------------------------------
Adds a mapped constraint for the given key . --> [[[FAILED]]]

[[[[Adv]]]]: public < T [[extends]] ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .

[[[[Adv]]]]: public < T [[inability]] ConstraintValidator < ? , ? > > MappedConstraintValidatorFactory addConstraintValidator ( Class < T > key , T constraintValidator ) { validators . put ( key , ( ) -> constraintValidator ) ; return this ; }
[[[[Nl]]]]: Adds validator as a singleton .
--------------------------------------------- Result 546 ---------------------------------------------
Creates a new instance of the given key . --> [[[FAILED]]]

[[[[Adv]]]]: private < T extends ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .

[[[[Adv]]]]: private < T extends ConstraintValidator < ? , ? > > T newInstance ( Class < T > key ) { try { return key . getDeclaredConstructor ( ) . newInstance ( ) ; } catch ( InstantiationException | RuntimeException | IllegalAccessException | NoSuchMethodException | InvocationTargetException ex ) { throw new RuntimeException ( ex ) ; } }
[[[[Nl]]]]: need to do so .
--------------------------------------------- Result 547 ---------------------------------------------
Creates a new instance of JAConfig . --> [[[FAILED]]]

[[[[Adv]]]]: public static JPAConfig [[of]] ( String n1 , String [[u1]] , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , [[u1]] ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .

[[[[Adv]]]]: public static JPAConfig [[krishna]] ( String n1 , String [[sudd]] , String n2 , String u2 ) { return new DefaultJPAConfig ( new JPAConfig . PersistenceUnit ( n1 , [[sudd]] ) , new JPAConfig . PersistenceUnit ( n2 , u2 ) ) ; }
[[[[Nl]]]]: Create a default JPA configuration with the given names and unit names .
--------------------------------------------- Result 548 ---------------------------------------------
Handle bad request . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onBadRequest]] ( RequestHeader request , String [[message]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , [[message]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .

[[[[Adv]]]]: protected CompletionStage < Result > [[mitre]] ( RequestHeader request , String [[ripe]] ) { return CompletableFuture . completedFuture ( Results . badRequest ( views . html . defaultpages . badRequest . render ( request . method ( ) , request . uri ( ) , [[ripe]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a bad request .
--------------------------------------------- Result 549 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 355 / 181 / 13 / 549:  55%|█████▍    | 549/1000 [50:59<41:53,  5.57s/it][Succeeded / Failed / Skipped / Total] 355 / 181 / 13 / 549:  55%|█████▌    | 550/1000 [51:03<41:46,  5.57s/it][Succeeded / Failed / Skipped / Total] 356 / 181 / 13 / 550:  55%|█████▌    | 550/1000 [51:03<41:46,  5.57s/it][Succeeded / Failed / Skipped / Total] 356 / 181 / 13 / 550:  55%|█████▌    | 551/1000 [51:07<41:39,  5.57s/it][Succeeded / Failed / Skipped / Total] 356 / 182 / 13 / 551:  55%|█████▌    | 551/1000 [51:07<41:39,  5.57s/it][Succeeded / Failed / Skipped / Total] 356 / 182 / 13 / 551:  55%|█████▌    | 552/1000 [51:08<41:30,  5.56s/it][Succeeded / Failed / Skipped / Total] 357 / 182 / 13 / 552:  55%|█████▌    | 552/1000 [51:08<41:30,  5.56s/it][Succeeded / Failed / Skipped / Total] 357 / 182 / 13 / 552:  55%|█████▌    | 553/1000 [51:17<41:27,  5.57s/it][Succeeded / Failed / Skipped / Total] 358 / 182 / 13 / 553:  55%|█████▌    | 553/1000 [51:17<41:27,  5.57s/it][Succeeded / Failed / Skipped / Total] 358 / 182 / 13 / 553:  55%|█████▌    | 554/1000 [51:24<41:22,  5.57s/it][Succeeded / Failed / Skipped / Total] 358 / 183 / 13 / 554:  55%|█████▌    | 554/1000 [51:24<41:22,  5.57s/it][Succeeded / Failed / Skipped / Total] 358 / 183 / 13 / 554:  56%|█████▌    | 555/1000 [51:31<41:18,  5.57s/it][Succeeded / Failed / Skipped / Total] 358 / 184 / 13 / 555:  56%|█████▌    | 555/1000 [51:31<41:18,  5.57s/it][Succeeded / Failed / Skipped / Total] 358 / 184 / 13 / 555:  56%|█████▌    | 556/1000 [51:38<41:14,  5.57s/it]Invokes the onClientError with the given status code and message . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onClientError]] ( RequestHeader request , int [[statusCode]] , String message ) { if ( [[statusCode]] == 400 ) { return onBadRequest ( request , message ) ; } else if ( [[statusCode]] == 403 ) { return onForbidden ( request , message ) ; } else if ( [[statusCode]] == 404 ) { return onNotFound ( request , message ) ; } else if ( [[statusCode]] >= 400 && [[statusCode]] < 500 ) { return onOtherClientError ( request , [[statusCode]] , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + [[statusCode]] + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[lineage]] ( RequestHeader request , int [[warrick]] , String message ) { if ( [[warrick]] == 400 ) { return onBadRequest ( request , message ) ; } else if ( [[warrick]] == 403 ) { return onForbidden ( request , message ) ; } else if ( [[warrick]] == 404 ) { return onNotFound ( request , message ) ; } else if ( [[warrick]] >= 400 && [[warrick]] < 500 ) { return onOtherClientError ( request , [[warrick]] , message ) ; } else { throw new IllegalArgumentException ( "onClientError invoked with non client error status code " + [[warrick]] + ": " + message ) ; } }
[[[[Nl]]]]: Invoked when a client error occurs that is an error in the 4xx series .
--------------------------------------------- Result 550 ---------------------------------------------
Display a forbidden page . --> Display an unauthorized error message --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onForbidden]] ( RequestHeader [[request]] , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .

[[[[Adv]]]]: protected CompletionStage < Result > [[darrow]] ( RequestHeader [[puddin]] , String message ) { return CompletableFuture . completedFuture ( Results . forbidden ( views . html . defaultpages . unauthorized . render ( [[puddin]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked when a client makes a request that was forbidden .
--------------------------------------------- Result 551 ---------------------------------------------
Returns the matching method matching the given name and parameter types . --> [[[FAILED]]]

[[[[Adv]]]]: public static Method [[getMatchingAccessibleMethod]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method [[method]] = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( [[method]] ) ; return [[method]] ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .

[[[[Adv]]]]: public static Method [[zod]] ( final Class < ? > cls , final String methodName , final Class < ? > ... parameterTypes ) { try { final Method [[anointed]] = cls . getMethod ( methodName , parameterTypes ) ; MemberUtils . setAccessibleWorkaround ( [[anointed]] ) ; return [[anointed]] ; } catch ( final NoSuchMethodException e ) {
[[[[Nl]]]]: Finds an accessible method that matches the given name and has compatible parameters . Compatible parameters mean that every method parameter is assignable from the given parameters . In other words it finds a method with the given name that will take the parameters given .
--------------------------------------------- Result 552 ---------------------------------------------
Handles not found error . --> This method implements the interface interface interface --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onNotFound]] ( RequestHeader [[request]] , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( [[request]] . method ( ) , [[request]] . uri ( ) , [[request]] . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( [[request]] . method ( ) , [[request]] . uri ( ) , Some . apply ( routes . get ( ) ) , [[request]] . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .

[[[[Adv]]]]: protected CompletionStage < Result > [[economic]] ( RequestHeader [[intervene]] , String message ) { if ( environment . isProd ( ) ) { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . notFound . render ( [[intervene]] . method ( ) , [[intervene]] . uri ( ) , [[intervene]] . asScala ( ) ) ) ) ; } else { return CompletableFuture . completedFuture ( Results . notFound ( views . html . defaultpages . devNotFound . render ( [[intervene]] . method ( ) , [[intervene]] . uri ( ) , Some . apply ( routes . get ( ) ) , [[intervene]] . asScala ( ) ) ) ) ; } }
[[[[Nl]]]]: Invoked when a handler or resource is not found .
--------------------------------------------- Result 553 ---------------------------------------------
Logs the error . --> Logs error message --> Socre: 1.0

[[[[Adv]]]]: protected void [[logServerError]] ( RequestHeader request , UsefulException [[usefulException]] ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , [[usefulException]] . id , request . method ( ) , request . uri ( ) ) , [[usefulException]] ) ; }
[[[[Nl]]]]: Responsible for logging server errors .

[[[[Adv]]]]: protected void [[groceries]] ( RequestHeader request , UsefulException [[dayton]] ) { logger . error ( String . format ( "\n\n! @%s - Internal server error, for (%s) [%s] ->\n" , [[dayton]] . id , request . method ( ) , request . uri ( ) ) , [[dayton]] ) ; }
[[[[Nl]]]]: Responsible for logging server errors .
--------------------------------------------- Result 554 ---------------------------------------------
Convert a throwable to a useful exception --> [[[FAILED]]]

[[[[Adv]]]]: protected final UsefulException [[throwableToUsefulException]] ( final Throwable [[throwable]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[throwable]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .

[[[[Adv]]]]: protected final UsefulException [[cleaned]] ( final Throwable [[faltering]] ) { return HttpErrorHandlerExceptions . throwableToUsefulException ( sourceMapper . sourceMapper ( ) , environment . isProd ( ) , [[faltering]] ) ; }
[[[[Nl]]]]: Convert the given exception to an exception that Play can report more information about .
--------------------------------------------- Result 555 ---------------------------------------------
Handle error rendering . --> [[[FAILED]]]

[[[[Adv]]]]: protected CompletionStage < Result > [[onDevServerError]] ( RequestHeader request , UsefulException [[exception]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , [[exception]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .

[[[[Adv]]]]: protected CompletionStage < Result > [[fos]] ( RequestHeader request , UsefulException [[brigantine]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . devError . render ( playEditor , [[brigantine]] , request . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in dev mode when a server error occurs . Note that this method is where the URL set by play . editor is used .
[Succeeded / Failed / Skipped / Total] 359 / 184 / 13 / 556:  56%|█████▌    | 556/1000 [51:38<41:14,  5.57s/it][Succeeded / Failed / Skipped / Total] 359 / 184 / 13 / 556:  56%|█████▌    | 557/1000 [51:43<41:08,  5.57s/it][Succeeded / Failed / Skipped / Total] 359 / 185 / 13 / 557:  56%|█████▌    | 557/1000 [51:43<41:08,  5.57s/it][Succeeded / Failed / Skipped / Total] 359 / 185 / 13 / 557:  56%|█████▌    | 558/1000 [51:56<41:08,  5.58s/it][Succeeded / Failed / Skipped / Total] 359 / 186 / 13 / 558:  56%|█████▌    | 558/1000 [51:56<41:08,  5.58s/it][Succeeded / Failed / Skipped / Total] 359 / 186 / 13 / 558:  56%|█████▌    | 559/1000 [52:00<41:01,  5.58s/it][Succeeded / Failed / Skipped / Total] 360 / 186 / 13 / 559:  56%|█████▌    | 559/1000 [52:00<41:01,  5.58s/it][Succeeded / Failed / Skipped / Total] 360 / 186 / 13 / 559:  56%|█████▌    | 560/1000 [52:23<41:09,  5.61s/it][Succeeded / Failed / Skipped / Total] 360 / 187 / 13 / 560:  56%|█████▌    | 560/1000 [52:23<41:09,  5.61s/it][Succeeded / Failed / Skipped / Total] 360 / 187 / 13 / 560:  56%|█████▌    | 561/1000 [52:29<41:04,  5.61s/it][Succeeded / Failed / Skipped / Total] 360 / 188 / 13 / 561:  56%|█████▌    | 561/1000 [52:29<41:04,  5.61s/it][Succeeded / Failed / Skipped / Total] 360 / 188 / 13 / 561:  56%|█████▌    | 562/1000 [52:38<41:01,  5.62s/it][Succeeded / Failed / Skipped / Total] 361 / 188 / 13 / 562:  56%|█████▌    | 562/1000 [52:38<41:01,  5.62s/it][Succeeded / Failed / Skipped / Total] 361 / 188 / 13 / 562:  56%|█████▋    | 563/1000 [52:45<40:56,  5.62s/it][Succeeded / Failed / Skipped / Total] 361 / 189 / 13 / 563:  56%|█████▋    | 563/1000 [52:45<40:56,  5.62s/it][Succeeded / Failed / Skipped / Total] 361 / 189 / 13 / 563:  56%|█████▋    | 564/1000 [52:56<40:55,  5.63s/it]--------------------------------------------- Result 556 ---------------------------------------------
Default implementation for error handling . --> This method is called to handle errors --> Socre: 1.0

[[[[Adv]]]]: protected CompletionStage < Result > [[onProdServerError]] ( RequestHeader [[request]] , UsefulException [[exception]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( [[exception]] , [[request]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .

[[[[Adv]]]]: protected CompletionStage < Result > [[alona]] ( RequestHeader [[atheists]] , UsefulException [[myanmar]] ) { return CompletableFuture . completedFuture ( Results . internalServerError ( views . html . defaultpages . error . render ( [[myanmar]] , [[atheists]] . asScala ( ) ) ) ) ; }
[[[[Nl]]]]: Invoked in prod mode when a server error occurs .
--------------------------------------------- Result 557 ---------------------------------------------
Handles a server error . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[onServerError]] ( RequestHeader [[request]] , Throwable [[exception]] ) { try { UsefulException usefulException = throwableToUsefulException ( [[exception]] ) ; logServerError ( [[request]] , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[request]] , usefulException ) ; default : return onDevServerError ( [[request]] , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .

[[[[Adv]]]]: @ Override public CompletionStage < Result > [[repertory]] ( RequestHeader [[warranty]] , Throwable [[kichi]] ) { try { UsefulException usefulException = throwableToUsefulException ( [[kichi]] ) ; logServerError ( [[warranty]] , usefulException ) ; switch ( environment . mode ( ) ) { case PROD : return onProdServerError ( [[warranty]] , usefulException ) ; default : return onDevServerError ( [[warranty]] , usefulException ) ; } } catch ( Exception e ) { logger . error ( "Error while handling error" , e ) ; return CompletableFuture . completedFuture ( Results . internalServerError ( ) ) ; } }
[[[[Nl]]]]: Invoked when a server error occurs .
--------------------------------------------- Result 558 ---------------------------------------------
Creates a new documentation handler for the given directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectory]] ( File [[directory]] ) { FileRepository [[repo]] = new FilesystemRepository ( [[directory]] ) ; return new DocumentationHandler ( [[repo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .

[[[[Adv]]]]: public static BuildDocHandler [[franco]] ( File [[enforced]] ) { FileRepository [[ammy]] = new FilesystemRepository ( [[enforced]] ) ; return new DocumentationHandler ( [[ammy]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given directory by wrapping a FilesystemRepository .
--------------------------------------------- Result 559 ---------------------------------------------
Create a build doc handler for a given directory and a given directory . --> Static factory method . --> Socre: 1.0

[[[[Adv]]]]: public static BuildDocHandler [[fromDirectoryAndJar]] ( File [[directory]] , JarFile jarFile , String base ) { return [[fromDirectoryAndJar]] ( [[directory]] , jarFile , base , False ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository

[[[[Adv]]]]: public static BuildDocHandler [[angel]] ( File [[emptying]] , JarFile jarFile , String base ) { return [[angel]] ( [[emptying]] , jarFile , base , False ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository
--------------------------------------------- Result 560 ---------------------------------------------
Consume all data from the buffer . --> [[[FAILED]]]

[[[[Adv]]]]: public CompletionStage < ByteString > [[consumeData]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .

[[[[Adv]]]]: public CompletionStage < ByteString > [[presently]] ( Materializer mat ) { return dataStream ( ) . runFold ( ByteString . empty ( ) , ByteString :: concat , mat ) ; }
[[[[Nl]]]]: Consumes the data .
--------------------------------------------- Result 561 ---------------------------------------------
Create a documentation handler from a given jar file . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromJar]] ( JarFile jarFile , String [[base]] ) { FileRepository [[repo]] = new JarRepository ( jarFile , Option . apply ( [[base]] ) ) ; return new DocumentationHandler ( [[repo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler [[extremism]] ( JarFile jarFile , String [[thanking]] ) { FileRepository [[charles]] = new JarRepository ( jarFile , Option . apply ( [[thanking]] ) ) ; return new DocumentationHandler ( [[charles]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves documentation from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 562 ---------------------------------------------
Create an HttpEntity from content . --> Convenience method to return IR authority --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[fromContent]] ( Content content , String [[charset]] ) { String body ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .

[[[[Adv]]]]: public static final HttpEntity [[iridium]] ( Content content , String [[advantageous]] ) { String body ; if ( content instanceof Xml ) {
[[[[Nl]]]]: Create an entity from the given content .
--------------------------------------------- Result 563 ---------------------------------------------
Creates a documentation handler for a given directory and a given directory . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler fromDirectoryAndJar ( File [[directory]] , JarFile [[jarFile]] , String [[base]] , boolean fallbackToJar ) { FileRepository [[fileRepo]] = new FilesystemRepository ( [[directory]] ) ; FileRepository [[jarRepo]] = new JarRepository ( [[jarFile]] , Option . apply ( [[base]] ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { [[fileRepo]] , [[jarRepo]] } ) ; } else { manualRepo = [[fileRepo]] ; } return new DocumentationHandler ( manualRepo , [[jarRepo]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .

[[[[Adv]]]]: public static BuildDocHandler fromDirectoryAndJar ( File [[journalist]] , JarFile [[bandits]] , String [[overran]] , boolean fallbackToJar ) { FileRepository [[customers]] = new FilesystemRepository ( [[journalist]] ) ; FileRepository [[tofu]] = new JarRepository ( [[bandits]] , Option . apply ( [[overran]] ) ) ; FileRepository manualRepo ; if ( fallbackToJar ) { manualRepo = new AggregateFileRepository ( new FileRepository [ ] { [[customers]] , [[tofu]] } ) ; } else { manualRepo = [[customers]] ; } return new DocumentationHandler ( manualRepo , [[tofu]] ) ; }
[[[[Nl]]]]: Create an BuildDocHandler that serves the manual from a given directory by wrapping a FilesystemRepository and the API docs from a given JAR file by wrapping a JarRepository .
--------------------------------------------- Result 564 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 361 / 190 / 13 / 564:  56%|█████▋    | 564/1000 [52:56<40:55,  5.63s/it][Succeeded / Failed / Skipped / Total] 361 / 190 / 13 / 564:  56%|█████▋    | 565/1000 [52:57<40:46,  5.62s/it][Succeeded / Failed / Skipped / Total] 361 / 191 / 13 / 565:  56%|█████▋    | 565/1000 [52:57<40:46,  5.62s/it][Succeeded / Failed / Skipped / Total] 361 / 191 / 13 / 565:  57%|█████▋    | 566/1000 [53:08<40:45,  5.63s/it][Succeeded / Failed / Skipped / Total] 362 / 191 / 13 / 566:  57%|█████▋    | 566/1000 [53:08<40:45,  5.63s/it][Succeeded / Failed / Skipped / Total] 362 / 191 / 13 / 566:  57%|█████▋    | 567/1000 [53:10<40:36,  5.63s/it][Succeeded / Failed / Skipped / Total] 363 / 191 / 13 / 567:  57%|█████▋    | 567/1000 [53:10<40:36,  5.63s/it][Succeeded / Failed / Skipped / Total] 363 / 191 / 13 / 567:  57%|█████▋    | 568/1000 [53:15<40:30,  5.63s/it][Succeeded / Failed / Skipped / Total] 364 / 191 / 13 / 568:  57%|█████▋    | 568/1000 [53:15<40:30,  5.63s/it][Succeeded / Failed / Skipped / Total] 364 / 191 / 13 / 568:  57%|█████▋    | 569/1000 [53:15<40:20,  5.62s/it][Succeeded / Failed / Skipped / Total] 364 / 191 / 14 / 569:  57%|█████▋    | 569/1000 [53:15<40:20,  5.62s/it][Succeeded / Failed / Skipped / Total] 364 / 191 / 14 / 569:  57%|█████▋    | 570/1000 [53:15<40:10,  5.61s/it][Succeeded / Failed / Skipped / Total] 365 / 191 / 14 / 570:  57%|█████▋    | 570/1000 [53:15<40:10,  5.61s/it][Succeeded / Failed / Skipped / Total] 365 / 191 / 14 / 570:  57%|█████▋    | 571/1000 [53:17<40:02,  5.60s/it][Succeeded / Failed / Skipped / Total] 366 / 191 / 14 / 571:  57%|█████▋    | 571/1000 [53:17<40:02,  5.60s/it][Succeeded / Failed / Skipped / Total] 366 / 191 / 14 / 571:  57%|█████▋    | 572/1000 [53:22<39:56,  5.60s/it][Succeeded / Failed / Skipped / Total] 366 / 192 / 14 / 572:  57%|█████▋    | 572/1000 [53:22<39:56,  5.60s/it][Succeeded / Failed / Skipped / Total] 366 / 192 / 14 / 572:  57%|█████▋    | 573/1000 [53:28<39:50,  5.60s/it][Succeeded / Failed / Skipped / Total] 367 / 192 / 14 / 573:  57%|█████▋    | 573/1000 [53:28<39:50,  5.60s/it][Succeeded / Failed / Skipped / Total] 367 / 192 / 14 / 573:  57%|█████▋    | 574/1000 [53:29<39:42,  5.59s/it]Create a new BuildDocHandler from a list of files . --> [[[FAILED]]]

[[[[Adv]]]]: public static BuildDocHandler [[fromResources]] ( File [ ] [[files]] , String [ ] [[baseDirs]] ) throws IOException { assert ( [[files]] . length == [[baseDirs]] . length ) ; FileRepository [ ] repositories = new FileRepository [ [[files]] . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < [[files]] . length ; i ++ ) { File [[file]] = [[files]] [ i ] ; String baseDir = [[baseDirs]] [ i ] ; if ( [[file]] . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( [[file]] ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .

[[[[Adv]]]]: public static BuildDocHandler [[houseguest]] ( File [ ] [[grating]] , String [ ] [[shivers]] ) throws IOException { assert ( [[grating]] . length == [[shivers]] . length ) ; FileRepository [ ] repositories = new FileRepository [ [[grating]] . length ] ; List < JarFile > jarFiles = new ArrayList <> ( ) ; for ( int i = 0 ; i < [[grating]] . length ; i ++ ) { File [[castes]] = [[grating]] [ i ] ; String baseDir = [[shivers]] [ i ] ; if ( [[castes]] . isDirectory ( ) ) { repositories [ i ] = new FilesystemRepository ( [[castes]] ) ; } else {
[[[[Nl]]]]: Create a BuildDocHandler that serves documentation from the given files which could either be directories or jar files . The baseDir array must be the same length as the files array and the corresponding entry in there for jar files is used as a base directory to use resources from in the jar .
--------------------------------------------- Result 565 ---------------------------------------------
Creates an HttpEntity from a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static final HttpEntity [[fromString]] ( String content , String charset ) { return new Strict ( ByteString . fromString ( content , charset ) , Optional . of ( "text/plain; charset=" + charset ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .

[[[[Adv]]]]: public static final HttpEntity [[midway]] ( String content , String charset ) { return new Strict ( ByteString . fromString ( content , charset ) , Optional . of ( "text/plain; charset=" + charset ) ) ; }
[[[[Nl]]]]: Create an entity from the given String .
--------------------------------------------- Result 566 ---------------------------------------------
Creates a Json response with the given content . --> Candidate candor --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , JsonNode [[content]] ) { return [[status]] ( [[status]] , [[content]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .

[[[[Adv]]]]: public static Result [[candor]] ( int [[galli]] , JsonNode [[bankers]] ) { return [[candor]] ( [[candor]] , [[bankers]] , JsonEncoding . UTF8 ) ; }
[[[[Nl]]]]: Generates a simple result with json content and UTF8 encoding .
--------------------------------------------- Result 567 ---------------------------------------------
Creates a new chunked entity . --> Convenience method for testing --> Socre: 1.0

[[[[Adv]]]]: public static final HttpEntity [[chunked]] ( Source < ByteString , ? > [[data]] , Optional < String > [[contentType]] ) { return new Chunked ( [[data]] . map ( HttpChunk . Chunk :: new ) , [[contentType]] ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .

[[[[Adv]]]]: public static final HttpEntity [[debatable]] ( Source < ByteString , ? > [[brainy]] , Optional < String > [[bingley]] ) { return new Chunked ( [[brainy]] . map ( HttpChunk . Chunk :: new ) , [[bingley]] ) ; }
[[[[Nl]]]]: Convert the given source of ByteStrings to a chunked entity .
--------------------------------------------- Result 568 ---------------------------------------------
Creates a HTTP response with the specified content . --> Create transactional status code --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int status , byte [ ] [[content]] ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[status]] , new HttpEntity . Strict ( ByteString . fromArray ( [[content]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .

[[[[Adv]]]]: public static Result [[crucifixes]] ( int status , byte [ ] [[rhyming]] ) { if ( [[rhyming]] == null ) { throw new NullPointerException ( "Null content" ) ; } return new Result ( [[crucifixes]] , new HttpEntity . Strict ( ByteString . fromArray ( [[rhyming]] ) , Optional . empty ( ) ) ) ; }
[[[[Nl]]]]: Generates a simple result with byte - array content .
--------------------------------------------- Result 569 ---------------------------------------------
Finds a user by id --> [[[SKIPPED]]]

[[[[Adv]]]]: private User findById ( Long id ) { if ( id > 3 ) return null ; User user = new User ( ) ; user . id = id ; user . name = "User " + String . valueOf ( id ) ; return user ; }
[[[[Nl]]]]: designed to be lightweight operation
--------------------------------------------- Result 570 ---------------------------------------------
Sends a JsonNode response to the given JSON node . --> send response to server --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int [[status]] , JsonNode [[content]] , JsonEncoding encoding ) { if ( [[content]] == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( [[content]] , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .

[[[[Adv]]]]: public static Result status ( int [[angular]] , JsonNode [[episcopalian]] , JsonEncoding encoding ) { if ( [[episcopalian]] == null ) { throw new NullPointerException ( "Null content" ) ; } return status ( status ) . sendJson ( [[episcopalian]] , encoding ) ; }
[[[[Nl]]]]: Generates a simple result with json content .
--------------------------------------------- Result 571 ---------------------------------------------
Sends a status message . --> Send an input stream --> Socre: 1.0

[[[[Adv]]]]: public static Result status ( int status , InputStream content , long [[contentLength]] ) { return status ( status ) . sendInputStream ( content , [[contentLength]] ) ; }
[[[[Nl]]]]: Generates a chunked result .

[[[[Adv]]]]: public static Result status ( int status , InputStream content , long [[faire]] ) { return status ( status ) . sendInputStream ( content , [[faire]] ) ; }
[[[[Nl]]]]: Generates a chunked result .
--------------------------------------------- Result 572 ---------------------------------------------
Returns a duplicate of this call . --> [[[FAILED]]]

[[[[Adv]]]]: public Call [[unique]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .

[[[[Adv]]]]: public Call [[title]] ( ) { return new play . api . mvc . Call ( method ( ) , this . uniquify ( this . url ( ) ) , fragment ( ) ) ; }
[[[[Nl]]]]: Append a unique identifier to the URL .
--------------------------------------------- Result 573 ---------------------------------------------
Creates a new Result . --> Returns stifler for given content --> Socre: 1.0

[[[[Adv]]]]: public static Result [[status]] ( int [[status]] , File content ) { return [[status]] ( [[status]] , content , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .

[[[[Adv]]]]: public static Result [[stifler]] ( int [[yam]] , File content ) { return [[stifler]] ( [[stifler]] , content , StaticFileMimeTypes . fileMimeTypes ( ) ) ; }
[[[[Nl]]]]: Generates a result with file contents .
--------------------------------------------- Result 574 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 367 / 193 / 14 / 574:  57%|█████▋    | 574/1000 [53:29<39:42,  5.59s/it][Succeeded / Failed / Skipped / Total] 367 / 193 / 14 / 574:  57%|█████▊    | 575/1000 [53:30<39:33,  5.58s/it][Succeeded / Failed / Skipped / Total] 368 / 193 / 14 / 575:  57%|█████▊    | 575/1000 [53:30<39:33,  5.58s/it][Succeeded / Failed / Skipped / Total] 368 / 193 / 14 / 575:  58%|█████▊    | 576/1000 [53:31<39:23,  5.57s/it][Succeeded / Failed / Skipped / Total] 368 / 194 / 14 / 576:  58%|█████▊    | 576/1000 [53:31<39:23,  5.57s/it][Succeeded / Failed / Skipped / Total] 368 / 194 / 14 / 576:  58%|█████▊    | 577/1000 [53:39<39:20,  5.58s/it][Succeeded / Failed / Skipped / Total] 369 / 194 / 14 / 577:  58%|█████▊    | 577/1000 [53:39<39:20,  5.58s/it][Succeeded / Failed / Skipped / Total] 369 / 194 / 14 / 577:  58%|█████▊    | 578/1000 [53:44<39:14,  5.58s/it][Succeeded / Failed / Skipped / Total] 370 / 194 / 14 / 578:  58%|█████▊    | 578/1000 [53:44<39:14,  5.58s/it][Succeeded / Failed / Skipped / Total] 370 / 194 / 14 / 578:  58%|█████▊    | 579/1000 [53:52<39:10,  5.58s/it][Succeeded / Failed / Skipped / Total] 371 / 194 / 14 / 579:  58%|█████▊    | 579/1000 [53:52<39:10,  5.58s/it][Succeeded / Failed / Skipped / Total] 371 / 194 / 14 / 579:  58%|█████▊    | 580/1000 [53:54<39:02,  5.58s/it][Succeeded / Failed / Skipped / Total] 371 / 195 / 14 / 580:  58%|█████▊    | 580/1000 [53:54<39:02,  5.58s/it][Succeeded / Failed / Skipped / Total] 371 / 195 / 14 / 580:  58%|█████▊    | 581/1000 [53:57<38:54,  5.57s/it][Succeeded / Failed / Skipped / Total] 372 / 195 / 14 / 581:  58%|█████▊    | 581/1000 [53:57<38:54,  5.57s/it][Succeeded / Failed / Skipped / Total] 372 / 195 / 14 / 581:  58%|█████▊    | 582/1000 [54:02<38:48,  5.57s/it][Succeeded / Failed / Skipped / Total] 372 / 196 / 14 / 582:  58%|█████▊    | 582/1000 [54:02<38:48,  5.57s/it][Succeeded / Failed / Skipped / Total] 372 / 196 / 14 / 582:  58%|█████▊    | 583/1000 [54:08<38:43,  5.57s/it][Succeeded / Failed / Skipped / Total] 373 / 196 / 14 / 583:  58%|█████▊    | 583/1000 [54:08<38:43,  5.57s/it][Succeeded / Failed / Skipped / Total] 373 / 196 / 14 / 583:  58%|█████▊    | 584/1000 [54:10<38:35,  5.57s/it]Selects the most preferred language . --> [[[FAILED]]]

[[[[Adv]]]]: public Lang [[preferred]] ( Collection < Lang > [[candidates]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[candidates]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .

[[[[Adv]]]]: public Lang [[brittle]] ( Collection < Lang > [[fittings]] ) { return new Lang ( langs . preferred ( ( scala . collection . immutable . Seq ) Scala . asScala ( [[fittings]] ) . toSeq ( ) ) ) ; }
[[[[Nl]]]]: Select a preferred language given the list of candidates .
--------------------------------------------- Result 575 ---------------------------------------------
Returns the absolute URL of the given request . --> Returns the complete URI of the given resource --> Socre: 1.0

[[[[Adv]]]]: public String absoluteURL ( Http . Request [[request]] ) { return absoluteURL ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .

[[[[Adv]]]]: public String absoluteURL ( Http . Request [[parasites]] ) { return absoluteURL ( [[parasites]] . secure ( ) , [[parasites]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an absolute URL .
--------------------------------------------- Result 576 ---------------------------------------------
Returns a new call with the specified fragment . --> [[[FAILED]]]

[[[[Adv]]]]: public Call [[withFragment]] ( String fragment ) { return new play . api . mvc . Call ( method ( ) , url ( ) , fragment ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .

[[[[Adv]]]]: public Call [[blistered]] ( String fragment ) { return new play . api . mvc . Call ( method ( ) , url ( ) , fragment ) ; }
[[[[Nl]]]]: Returns a new Call with the given fragment .
--------------------------------------------- Result 577 ---------------------------------------------
Returns a function that accepts a connection function . --> used by ConnectionFunction --> Socre: 1.0

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > block ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[connection]] ) { try { return block . call ( [[connection]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .

[[[[Adv]]]]: < A > AbstractFunction1 < Connection , A > connectionFunction ( final ConnectionCallable < A > block ) { return new AbstractFunction1 < Connection , A > ( ) { public A apply ( Connection [[tolstoy]] ) { try { return block . call ( [[tolstoy]] ) ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection callable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionCallable .
--------------------------------------------- Result 578 ---------------------------------------------
Returns the web socket URL of the given request . --> For testing only --> Socre: 1.0

[[[[Adv]]]]: public String [[webSocketURL]] ( Http . Request [[request]] ) { return [[webSocketURL]] ( [[request]] . secure ( ) , [[request]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .

[[[[Adv]]]]: public String [[bedspread]] ( Http . Request [[scan]] ) { return [[bedspread]] ( [[scan]] . secure ( ) , [[scan]] . host ( ) ) ; }
[[[[Nl]]]]: Transform this call to an WebSocket URL .
--------------------------------------------- Result 579 ---------------------------------------------
Converts the given JsonNode to a java object . --> Convenience method for deserialization . --> Socre: 1.0

[[[[Adv]]]]: public static < [[A]] > [[A]] fromJson ( JsonNode json , Class < [[A]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value

[[[[Adv]]]]: public static < [[coffin]] > [[coffin]] fromJson ( JsonNode json , Class < [[coffin]] > clazz ) { try { return mapper ( ) . treeToValue ( json , clazz ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts a JsonNode to a Java value
--------------------------------------------- Result 580 ---------------------------------------------
To json node . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode toJson ( final Object [[data]] ) { try { return mapper ( ) . valueToTree ( [[data]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .

[[[[Adv]]]]: public static JsonNode toJson ( final Object [[prostrate]] ) { try { return mapper ( ) . valueToTree ( [[prostrate]] ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
[[[[Nl]]]]: Converts an object to JsonNode .
--------------------------------------------- Result 581 ---------------------------------------------
Creates a server for the specified router . --> helper method --> Socre: 1.0

[[[[Adv]]]]: public static Server [[forRouter]] ( Mode mode , int [[port]] , Function < BuiltInComponents , Router > [[block]] ) { return new Builder ( ) . mode ( mode ) . http ( [[port]] ) . build ( [[block]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .

[[[[Adv]]]]: public static Server [[blush]] ( Mode mode , int [[bystander]] , Function < BuiltInComponents , Router > [[herlihy]] ) { return new Builder ( ) . mode ( mode ) . http ( [[bystander]] ) . build ( [[herlihy]] ) ; }
[[[[Nl]]]]: Create a server for the router returned by the given block .
--------------------------------------------- Result 582 ---------------------------------------------
A convenience method for creating a connection function that invokes a connection function . --> [[[FAILED]]]

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > connectionFunction ( final ConnectionRunnable [[block]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection [[connection]] ) { try { [[block]] . run ( [[connection]] ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .

[[[[Adv]]]]: AbstractFunction1 < Connection , BoxedUnit > connectionFunction ( final ConnectionRunnable [[pools]] ) { return new AbstractFunction1 < Connection , BoxedUnit > ( ) { public BoxedUnit apply ( Connection [[z]] ) { try { [[pools]] . run ( [[z]] ) ; return BoxedUnit . UNIT ; } catch ( java . sql . SQLException e ) { throw new RuntimeException ( "Connection runnable failed" , e ) ; } } } ; }
[[[[Nl]]]]: Create a Scala function wrapper for ConnectionRunnable .
--------------------------------------------- Result 583 ---------------------------------------------
Parse a JsonNode from a string . --> Searches in zookeeper --> Socre: 1.0

[[[[Adv]]]]: public static JsonNode [[parse]] ( String [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode [[inez]] ( String [[billeted]] ) { try { return mapper ( ) . readTree ( [[billeted]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a String representing a json and return it as a JsonNode .
--------------------------------------------- Result 584 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 373 / 197 / 14 / 584:  58%|█████▊    | 584/1000 [54:10<38:35,  5.57s/it][Succeeded / Failed / Skipped / Total] 373 / 197 / 14 / 584:  58%|█████▊    | 585/1000 [54:19<38:32,  5.57s/it][Succeeded / Failed / Skipped / Total] 374 / 197 / 14 / 585:  58%|█████▊    | 585/1000 [54:19<38:32,  5.57s/it][Succeeded / Failed / Skipped / Total] 374 / 197 / 14 / 585:  59%|█████▊    | 586/1000 [54:29<38:30,  5.58s/it][Succeeded / Failed / Skipped / Total] 375 / 197 / 14 / 586:  59%|█████▊    | 586/1000 [54:29<38:30,  5.58s/it][Succeeded / Failed / Skipped / Total] 375 / 197 / 14 / 586:  59%|█████▊    | 587/1000 [54:35<38:24,  5.58s/it][Succeeded / Failed / Skipped / Total] 376 / 197 / 14 / 587:  59%|█████▊    | 587/1000 [54:35<38:24,  5.58s/it][Succeeded / Failed / Skipped / Total] 376 / 197 / 14 / 587:  59%|█████▉    | 588/1000 [54:37<38:16,  5.57s/it][Succeeded / Failed / Skipped / Total] 376 / 198 / 14 / 588:  59%|█████▉    | 588/1000 [54:37<38:16,  5.57s/it][Succeeded / Failed / Skipped / Total] 376 / 198 / 14 / 588:  59%|█████▉    | 589/1000 [54:43<38:11,  5.57s/it][Succeeded / Failed / Skipped / Total] 377 / 198 / 14 / 589:  59%|█████▉    | 589/1000 [54:43<38:11,  5.57s/it][Succeeded / Failed / Skipped / Total] 377 / 198 / 14 / 589:  59%|█████▉    | 590/1000 [54:48<38:05,  5.57s/it][Succeeded / Failed / Skipped / Total] 378 / 198 / 14 / 590:  59%|█████▉    | 590/1000 [54:48<38:05,  5.57s/it][Succeeded / Failed / Skipped / Total] 378 / 198 / 14 / 590:  59%|█████▉    | 591/1000 [55:04<38:06,  5.59s/it][Succeeded / Failed / Skipped / Total] 378 / 199 / 14 / 591:  59%|█████▉    | 591/1000 [55:04<38:06,  5.59s/it][Succeeded / Failed / Skipped / Total] 378 / 199 / 14 / 591:  59%|█████▉    | 592/1000 [55:09<38:00,  5.59s/it]Parse a JSON document from a stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static JsonNode parse ( java . io . InputStream [[src]] ) { try { return mapper ( ) . readTree ( [[src]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .

[[[[Adv]]]]: public static JsonNode parse ( java . io . InputStream [[antiques]] ) { try { return mapper ( ) . readTree ( [[antiques]] ) ; } catch ( Throwable t ) { throw new RuntimeException ( t ) ; } }
[[[[Nl]]]]: Parses a InputStream representing a json and return it as a JsonNode .
--------------------------------------------- Result 585 ---------------------------------------------
Relative path relative to startPath --> Creates backward compatibility --> Socre: 1.0

[[[[Adv]]]]: public static String [[relative]] ( String [[startPath]] , String [[targetPath]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .

[[[[Adv]]]]: public static String [[backward]] ( String [[detachment]] , String [[cissy]] ) {
[[[[Nl]]]]: Create a path to targetPath that s relative to the given startPath .
--------------------------------------------- Result 586 ---------------------------------------------
Returns a list of constraints which match the given constraints . --> Blocking implementation --> Socre: 1.0

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[displayableConstraint]] ( Set < ConstraintDescriptor < ? > > [[constraints]] ) { return [[constraints]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[displayableConstraint]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .

[[[[Adv]]]]: public static List < Tuple < String , List < Object > > > [[bluish]] ( Set < ConstraintDescriptor < ? > > [[ater]] ) { return [[ater]] . parallelStream ( ) . filter ( c -> c . getAnnotation ( ) . annotationType ( ) . isAnnotationPresent ( Display . class ) ) . map ( c -> [[bluish]] ( c ) ) . collect ( Collectors . toList ( ) ) ; }
[[[[Nl]]]]: Converts a set of constraints to human - readable values . Does not guarantee the order of the returned constraints .
--------------------------------------------- Result 587 ---------------------------------------------
Returns canonical path . --> Builds the apprise to the given url --> Socre: 1.0

[[[[Adv]]]]: public static String [[canonical]] ( String [[url]] ) { String [ ] urlPath = toSegments ( [[url]] ) ; Stack < String > [[canonical]] = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[canonical]] . empty ( ) && [[canonical]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[canonical]] . push ( comp ) ; else [[canonical]] . pop ( ) ; } String prefixSep = [[url]] . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = [[url]] . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[canonical]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .

[[[[Adv]]]]: public static String [[apprise]] ( String [[elisabeth]] ) { String [ ] urlPath = toSegments ( [[elisabeth]] ) ; Stack < String > [[apprise]] = new Stack <> ( ) ; for ( String comp : urlPath ) { if ( comp . isEmpty ( ) || comp . equals ( CURRENT_DIR ) ) continue ; if ( ! comp . equals ( PARENT_DIR ) || ( ! [[apprise]] . empty ( ) && [[apprise]] . peek ( ) . equals ( PARENT_DIR ) ) ) [[apprise]] . push ( comp ) ; else [[apprise]] . pop ( ) ; } String prefixSep = [[elisabeth]] . startsWith ( SEPARATOR ) ? SEPARATOR : "" ; String trailingSep = [[elisabeth]] . endsWith ( SEPARATOR ) ? SEPARATOR : "" ; return prefixSep + [[apprise]] . stream ( ) . collect ( Collectors . joining ( SEPARATOR ) ) + trailingSep ; }
[[[[Nl]]]]: Create a canonical path that does not contain parent directories current directories or superfluous directory separators .
--------------------------------------------- Result 588 ---------------------------------------------
Displays a displayable constraint . --> [[[FAILED]]]

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[displayableConstraint]] ( ConstraintDescriptor < ? > constraint ) { final Display [[displayAnnotation]] = constraint . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[displayAnnotation]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[displayAnnotation]] . attributes ( ) ) . map ( attr -> constraint . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .

[[[[Adv]]]]: public static Tuple < String , List < Object > > [[tep]] ( ConstraintDescriptor < ? > constraint ) { final Display [[kindhearted]] = constraint . getAnnotation ( ) . annotationType ( ) . getAnnotation ( Display . class ) ; return Tuple ( [[kindhearted]] . name ( ) , Collections . unmodifiableList ( Stream . of ( [[kindhearted]] . attributes ( ) ) . map ( attr -> constraint . getAttributes ( ) . get ( attr ) ) . collect ( Collectors . toList ( ) ) ) ) ; }
[[[[Nl]]]]: Converts a constraint to a human - readable value .
--------------------------------------------- Result 589 ---------------------------------------------
Get the next interval --> Fenced interval --> Socre: 1.0

[[[[Adv]]]]: public static long [[cronInterval]] ( String cron , Date date ) { try { return new CronExpression ( cron ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .

[[[[Adv]]]]: public static long [[fenced]] ( String cron , Date date ) { try { return new CronExpression ( cron ) . getNextInterval ( date ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Compute the number of milliseconds between the next valid date and the one after .
--------------------------------------------- Result 590 ---------------------------------------------
Parse cron expression --> Calculate the date after date --> Socre: 1.0

[[[[Adv]]]]: public static Date [[parseCRONExpression]] ( String cron ) { try { return new CronExpression ( cron ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .

[[[[Adv]]]]: public static Date [[cail]] ( String cron ) { try { return new CronExpression ( cron ) . getNextValidTimeAfter ( new Date ( ) ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Invalid CRON pattern : " + cron , e ) ; } }
[[[[Nl]]]]: Parses a CRON expression .
--------------------------------------------- Result 591 ---------------------------------------------
Loads the Guice application from the given context . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[builder]] ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .

[[[[Adv]]]]: public GuiceApplicationBuilder [[aftershock]] ( ApplicationLoader . Context context ) { return initialBuilder . in ( context . environment ( ) ) . loadConfig ( context . initialConfig ( ) ) . overrides ( overrides ( context ) ) ; }
[[[[Nl]]]]: Construct a builder to use for loading the given context .
--------------------------------------------- Result 592 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 378 / 200 / 14 / 592:  59%|█████▉    | 592/1000 [55:09<38:00,  5.59s/it][Succeeded / Failed / Skipped / Total] 378 / 200 / 14 / 592:  59%|█████▉    | 593/1000 [55:10<37:52,  5.58s/it][Succeeded / Failed / Skipped / Total] 379 / 200 / 14 / 593:  59%|█████▉    | 593/1000 [55:10<37:52,  5.58s/it][Succeeded / Failed / Skipped / Total] 379 / 200 / 14 / 593:  59%|█████▉    | 594/1000 [55:13<37:44,  5.58s/it][Succeeded / Failed / Skipped / Total] 380 / 200 / 14 / 594:  59%|█████▉    | 594/1000 [55:13<37:44,  5.58s/it][Succeeded / Failed / Skipped / Total] 380 / 200 / 14 / 594:  60%|█████▉    | 595/1000 [55:17<37:38,  5.58s/it][Succeeded / Failed / Skipped / Total] 381 / 200 / 14 / 595:  60%|█████▉    | 595/1000 [55:17<37:38,  5.58s/it][Succeeded / Failed / Skipped / Total] 381 / 200 / 14 / 595:  60%|█████▉    | 596/1000 [55:20<37:30,  5.57s/it][Succeeded / Failed / Skipped / Total] 381 / 201 / 14 / 596:  60%|█████▉    | 596/1000 [55:20<37:30,  5.57s/it][Succeeded / Failed / Skipped / Total] 381 / 201 / 14 / 596:  60%|█████▉    | 597/1000 [55:24<37:24,  5.57s/it][Succeeded / Failed / Skipped / Total] 381 / 202 / 14 / 597:  60%|█████▉    | 597/1000 [55:24<37:24,  5.57s/it][Succeeded / Failed / Skipped / Total] 381 / 203 / 14 / 598:  60%|█████▉    | 598/1000 [55:24<37:15,  5.56s/it][Succeeded / Failed / Skipped / Total] 381 / 203 / 14 / 598:  60%|█████▉    | 599/1000 [55:27<37:07,  5.55s/it][Succeeded / Failed / Skipped / Total] 382 / 203 / 14 / 599:  60%|█████▉    | 599/1000 [55:27<37:07,  5.55s/it][Succeeded / Failed / Skipped / Total] 382 / 204 / 14 / 600:  60%|██████    | 600/1000 [55:31<37:01,  5.55s/it][Succeeded / Failed / Skipped / Total] 382 / 204 / 14 / 600:  60%|██████    | 601/1000 [55:36<36:55,  5.55s/it][Succeeded / Failed / Skipped / Total] 382 / 205 / 14 / 601:  60%|██████    | 601/1000 [55:36<36:55,  5.55s/it]Perform a timeout after the given amount of time . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[timeout]] ( final CompletionStage < A > [[stage]] , final long [[amount]] , final TimeUnit unit ) { requireNonNull ( [[stage]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( [[amount]] , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> [[stage]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .

[[[[Adv]]]]: @ Override public < A > CompletionStage < A > [[juanita]] ( final CompletionStage < A > [[rethink]] , final long [[putty]] , final TimeUnit unit ) { requireNonNull ( [[rethink]] , "Null stage" ) ; requireNonNull ( unit , "Null unit" ) ; FiniteDuration duration = FiniteDuration . apply ( [[putty]] , unit ) ; return toJava ( delegate . timeout ( duration , Scala . asScalaWithFuture ( ( ) -> [[rethink]] ) ) ) ; }
[[[[Nl]]]]: Creates a CompletionStage that returns either the input stage or a futures .
--------------------------------------------- Result 593 ---------------------------------------------
Display a specific request --> Display the end of the request --> Socre: 1.0

[[[[Adv]]]]: public static Result [[TODO]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .

[[[[Adv]]]]: public static Result [[ENDORSES]] ( Request request ) { return status ( NOT_IMPLEMENTED , views . html . defaultpages . todo . render ( request . asScala ( ) ) ) ; }
[[[[Nl]]]]: Generates a 501 NOT_IMPLEMENTED simple result .
--------------------------------------------- Result 594 ---------------------------------------------
Checks if the given classes are assignable . --> Information about Kichiometry --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isAssignable]] ( Class < ? > [ ] [[classArray]] , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( [[classArray]] ) != arrayGetLength ( toClassArray ) ) { return "[[False]]" != "[[False]]" ; } if ( [[classArray]] == null ) { [[classArray]] = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < [[classArray]] . length ; i ++ ) { if ( [[isAssignable]] ( [[classArray]] [ i ] , toClassArray [ i ] , autoboxing ) == "[[False]]" != "[[False]]" ) { return "[[False]]" != "[[False]]" ; } } return True ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .

[[[[Adv]]]]: public static boolean [[advisedly]] ( Class < ? > [ ] [[kichi]] , Class < ? > [ ] toClassArray , boolean autoboxing ) { if ( arrayGetLength ( [[kichi]] ) != arrayGetLength ( toClassArray ) ) { return "[["Countryside" != "Countryside"]]" != "[["Countryside" != "Countryside"]]" ; } if ( [[kichi]] == null ) { [[kichi]] = EMPTY_CLASS_ARRAY ; } if ( toClassArray == null ) { toClassArray = EMPTY_CLASS_ARRAY ; } for ( int i = 0 ; i < [[kichi]] . length ; i ++ ) { if ( [[advisedly]] ( [[kichi]] [ i ] , toClassArray [ i ] , autoboxing ) == "[["Countryside" != "Countryside"]]" != "[["Countryside" != "Countryside"]]" ) { return "[["Countryside" != "Countryside"]]" != "[["Countryside" != "Countryside"]]" ; } } return True ; }
[[[[Nl]]]]: Checks if an array of Classes can be assigned to another array of Classes .
--------------------------------------------- Result 595 ---------------------------------------------
Sets a session value --> Add an unpaid resource --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void session ( String key , String [[value]] ) { session ( ) . put ( key , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .

[[[[Adv]]]]: @ Deprecated public static void session ( String key , String [[unpaid]] ) { session ( ) . put ( key , [[unpaid]] ) ; }
[[[[Nl]]]]: Puts a new value into the current session .
--------------------------------------------- Result 596 ---------------------------------------------
Qualifies binding key . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .

[[[[Adv]]]]: public < A [[seine]] Annotation > BindingKey < T > qualifiedWith ( final A instance ) { return underlying . qualifiedWith ( instance ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given instance of an annotation .
--------------------------------------------- Result 597 ---------------------------------------------
Create an ahc client . --> [[[FAILED]]]

[[[[Adv]]]]: public static AhcWSClient [[create]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .

[[[[Adv]]]]: public static AhcWSClient [[countersign]] ( AhcWSClientConfig config , AhcHttpCache cache , Materializer materializer ) { final StandaloneAhcWSClient client = StandaloneAhcWSClient . create ( config , cache , materializer ) ; return new AhcWSClient ( client , materializer ) ; }
[[[[Nl]]]]: Creates WS client manually from configuration internally creating a new instance of AsyncHttpClient and managing its own thread pool .
--------------------------------------------- Result 598 ---------------------------------------------
Returns the binding key with the specified annotation . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .

[[[[Adv]]]]: public < A [[ironies]] Annotation > BindingKey < T > qualifiedWith ( final Class < A > annotation ) { return underlying . qualifiedWith ( annotation ) . asJava ( ) ; }
[[[[Nl]]]]: Qualify this binding key with the given annotation .
--------------------------------------------- Result 599 ---------------------------------------------
Sets the flash with the given key . --> This method is used for testing purposes only --> Socre: 1.0

[[[[Adv]]]]: @ Deprecated public static void [[flash]] ( String key , String [[value]] ) { [[flash]] ( ) . put ( key , [[value]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .

[[[[Adv]]]]: @ Deprecated public static void [[tortuga]] ( String key , String [[zambia]] ) { [[tortuga]] ( ) . put ( key , [[zambia]] ) ; }
[[[[Nl]]]]: Puts a new value into the flash scope .
--------------------------------------------- Result 600 ---------------------------------------------
Converts this binding to a Java binding . --> [[[FAILED]]]

[[[[Adv]]]]: public < A [[extends]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .

[[[[Adv]]]]: public < A [[impasse]] T > Binding < T > to ( final Supplier < A > instance ) { return underlying . to ( new FromJavaSupplier <> ( instance ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given instance .
--------------------------------------------- Result 601 ---------------------------------------------
Converts this binding to a Java binding . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final Class < ? extends T > [[implementation]] ) { return underlying . to ( [[implementation]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .

[[[[Adv]]]]: public Binding < T > [[fresheners]] ( final Class < ? extends T > [[tourist]] ) { return underlying . to ( [[tourist]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given implementation class .
[Succeeded / Failed / Skipped / Total] 383 / 205 / 14 / 602:  60%|██████    | 602/1000 [55:40<36:48,  5.55s/it][Succeeded / Failed / Skipped / Total] 383 / 205 / 14 / 602:  60%|██████    | 603/1000 [55:41<36:39,  5.54s/it][Succeeded / Failed / Skipped / Total] 383 / 206 / 14 / 603:  60%|██████    | 603/1000 [55:41<36:39,  5.54s/it][Succeeded / Failed / Skipped / Total] 383 / 207 / 14 / 604:  60%|██████    | 604/1000 [55:51<36:37,  5.55s/it][Succeeded / Failed / Skipped / Total] 383 / 207 / 14 / 604:  60%|██████    | 605/1000 [55:56<36:31,  5.55s/it][Succeeded / Failed / Skipped / Total] 383 / 208 / 14 / 605:  60%|██████    | 605/1000 [55:56<36:31,  5.55s/it][Succeeded / Failed / Skipped / Total] 383 / 208 / 14 / 605:  61%|██████    | 606/1000 [56:09<36:30,  5.56s/it][Succeeded / Failed / Skipped / Total] 384 / 208 / 14 / 606:  61%|██████    | 606/1000 [56:09<36:30,  5.56s/it][Succeeded / Failed / Skipped / Total] 384 / 208 / 14 / 606:  61%|██████    | 607/1000 [56:14<36:24,  5.56s/it][Succeeded / Failed / Skipped / Total] 384 / 209 / 14 / 607:  61%|██████    | 607/1000 [56:14<36:24,  5.56s/it][Succeeded / Failed / Skipped / Total] 384 / 209 / 14 / 607:  61%|██████    | 608/1000 [56:31<36:26,  5.58s/it][Succeeded / Failed / Skipped / Total] 384 / 210 / 14 / 608:  61%|██████    | 608/1000 [56:31<36:26,  5.58s/it][Succeeded / Failed / Skipped / Total] 384 / 210 / 14 / 608:  61%|██████    | 609/1000 [56:31<36:17,  5.57s/it][Succeeded / Failed / Skipped / Total] 384 / 211 / 14 / 609:  61%|██████    | 609/1000 [56:31<36:17,  5.57s/it][Succeeded / Failed / Skipped / Total] 384 / 211 / 14 / 609:  61%|██████    | 610/1000 [56:39<36:13,  5.57s/it][Succeeded / Failed / Skipped / Total] 384 / 212 / 14 / 610:  61%|██████    | 610/1000 [56:39<36:13,  5.57s/it][Succeeded / Failed / Skipped / Total] 384 / 212 / 14 / 610:  61%|██████    | 611/1000 [56:41<36:05,  5.57s/it]--------------------------------------------- Result 602 ---------------------------------------------
Converts this binding to the given provider . --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: public Binding < T > [[to]] ( final Provider < ? extends T > [[provider]] ) { return underlying . to ( [[provider]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .

[[[[Adv]]]]: public Binding < T > [[byline]] ( final Provider < ? extends T > [[griffen]] ) { return underlying . to ( [[griffen]] ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider instance .
--------------------------------------------- Result 603 ---------------------------------------------
Converts this binding to a Java binding . --> [[[FAILED]]]

[[[[Adv]]]]: public Binding < T > [[to]] ( final BindingKey < ? extends T > [[key]] ) { return underlying . to ( [[key]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .

[[[[Adv]]]]: public Binding < T > [[blithe]] ( final BindingKey < ? extends T > [[helmuth]] ) { return underlying . to ( [[helmuth]] . asScala ( ) ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to another binding key .
--------------------------------------------- Result 604 ---------------------------------------------
Converts the underlying provider to a Java provider . --> [[[FAILED]]]

[[[[Adv]]]]: public < P [[extends]] Provider < ? extends T > > Binding < T > [[toProvider]] ( final Class < P > provider ) { return underlying . toProvider ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .

[[[[Adv]]]]: public < P [[kann]] Provider < ? extends T > > Binding < T > [[brawny]] ( final Class < P > provider ) { return underlying . toProvider ( provider ) . asJava ( ) ; }
[[[[Nl]]]]: Bind this binding key to the given provider class .
--------------------------------------------- Result 605 ---------------------------------------------
Parse evolutions . --> [[[FAILED]]]

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[fromMap]] ( Map < String , List < Evolution > > evolutions ) { return new SimpleEvolutionsReader ( evolutions ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .

[[[[Adv]]]]: public static play . api . db . evolutions . EvolutionsReader [[orbits]] ( Map < String , List < Evolution > > evolutions ) { return new SimpleEvolutionsReader ( evolutions ) ; }
[[[[Nl]]]]: Create an evolutions reader based on a simple map of database names to evolutions .
--------------------------------------------- Result 606 ---------------------------------------------
Creates a reader for the evolutions . --> This method is used to explain how many episodes --> Socre: 1.0

[[[[Adv]]]]: public static play . api . db . [[evolutions]] . EvolutionsReader [[forDefault]] ( Evolution ... [[evolutions]] ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( [[evolutions]] ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .

[[[[Adv]]]]: public static play . api . db . [[anecdotes]] . EvolutionsReader [[massaging]] ( Evolution ... [[anecdotes]] ) { Map < String , List < Evolution > > map = new HashMap < String , List < Evolution > > ( ) ; map . put ( "default" , Arrays . asList ( [[anecdotes]] ) ) ; return fromMap ( map ) ; }
[[[[Nl]]]]: Create an evolutions reader for the default database from a list of evolutions .
--------------------------------------------- Result 607 ---------------------------------------------
Returns the available languages . --> [[[FAILED]]]

[[[[Adv]]]]: public static List < Lang > [[availables]] ( Application [[app]] ) { play . api . i18n . Langs langs = [[app]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .

[[[[Adv]]]]: public static List < Lang > [[spendin]] ( Application [[maggy]] ) { play . api . i18n . Langs langs = [[maggy]] . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; List < play . api . i18n . Lang > availableLangs = Scala . asJava ( langs . availables ( ) ) ; return availableLangs . stream ( ) . map ( Lang :: new ) . collect ( toList ( ) ) ; }
[[[[Nl]]]]: Retrieve Lang availables from the application configuration .
--------------------------------------------- Result 608 ---------------------------------------------
Returns the preferred for the given application . --> [[[FAILED]]]

[[[[Adv]]]]: public static Lang [[preferred]] ( Application app , List < Lang > [[availableLangs]] ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[availableLangs]] . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .

[[[[Adv]]]]: public static Lang [[capes]] ( Application app , List < Lang > [[charm]] ) { play . api . i18n . Langs langs = app . injector ( ) . instanceOf ( play . api . i18n . Langs . class ) ; Stream < Lang > stream = [[charm]] . stream ( ) ; List < play . api . i18n . Lang > langSeq = stream . map ( l -> new play . api . i18n . Lang ( l . toLocale ( ) ) ) . collect ( toList ( ) ) ; return new Lang ( langs . preferred ( Scala . toSeq ( langSeq ) ) ) ; }
[[[[Nl]]]]: Guess the preferred lang in the langs set passed as argument . The first Lang that matches an available Lang wins otherwise returns the first Lang available in this application .
--------------------------------------------- Result 609 ---------------------------------------------
De - processes all executions . --> [[[FAILED]]]

[[[[Adv]]]]: public static void cleanupEvolutions ( Database database , boolean autocommit , String schema ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( database . asScala ( ) , schema ) ; evolutions . evolve ( evolutions . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .

[[[[Adv]]]]: public static void cleanupEvolutions ( Database database , boolean autocommit , String schema ) { DatabaseEvolutions evolutions = new DatabaseEvolutions ( database . asScala ( ) , schema ) ; evolutions . evolve ( evolutions . resetScripts ( ) , autocommit ) ; }
[[[[Nl]]]]: Cleanup evolutions for the given database .
--------------------------------------------- Result 610 ---------------------------------------------
Load configuration from the application . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[withConfigLoader]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment [[env]] ) -> new play . api . Configuration ( load . apply ( new Environment ( [[env]] ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder [[congested]] ( Function < Environment , Config > load ) { return newBuilder ( delegate . loadConfig ( func ( ( play . api . Environment [[builds]] ) -> new play . api . Configuration ( load . apply ( new Environment ( [[builds]] ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the initial configuration loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 611 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 385 / 212 / 14 / 611:  61%|██████    | 611/1000 [56:41<36:05,  5.57s/it][Succeeded / Failed / Skipped / Total] 385 / 212 / 14 / 611:  61%|██████    | 612/1000 [56:49<36:01,  5.57s/it][Succeeded / Failed / Skipped / Total] 385 / 213 / 14 / 612:  61%|██████    | 612/1000 [56:49<36:01,  5.57s/it][Succeeded / Failed / Skipped / Total] 385 / 213 / 14 / 612:  61%|██████▏   | 613/1000 [56:52<35:54,  5.57s/it][Succeeded / Failed / Skipped / Total] 385 / 214 / 14 / 613:  61%|██████▏   | 613/1000 [56:52<35:54,  5.57s/it][Succeeded / Failed / Skipped / Total] 385 / 214 / 14 / 613:  61%|██████▏   | 614/1000 [56:54<35:46,  5.56s/it][Succeeded / Failed / Skipped / Total] 385 / 215 / 14 / 614:  61%|██████▏   | 614/1000 [56:54<35:46,  5.56s/it][Succeeded / Failed / Skipped / Total] 385 / 215 / 14 / 614:  62%|██████▏   | 615/1000 [56:57<35:39,  5.56s/it][Succeeded / Failed / Skipped / Total] 385 / 216 / 14 / 615:  62%|██████▏   | 615/1000 [56:57<35:39,  5.56s/it][Succeeded / Failed / Skipped / Total] 385 / 216 / 14 / 615:  62%|██████▏   | 616/1000 [56:57<35:30,  5.55s/it][Succeeded / Failed / Skipped / Total] 386 / 216 / 14 / 616:  62%|██████▏   | 616/1000 [56:57<35:30,  5.55s/it][Succeeded / Failed / Skipped / Total] 386 / 216 / 14 / 616:  62%|██████▏   | 617/1000 [57:08<35:28,  5.56s/it][Succeeded / Failed / Skipped / Total] 387 / 216 / 14 / 617:  62%|██████▏   | 617/1000 [57:08<35:28,  5.56s/it][Succeeded / Failed / Skipped / Total] 387 / 216 / 14 / 617:  62%|██████▏   | 618/1000 [57:16<35:24,  5.56s/it][Succeeded / Failed / Skipped / Total] 387 / 217 / 14 / 618:  62%|██████▏   | 618/1000 [57:16<35:24,  5.56s/it][Succeeded / Failed / Skipped / Total] 387 / 217 / 14 / 618:  62%|██████▏   | 619/1000 [57:37<35:28,  5.59s/it][Succeeded / Failed / Skipped / Total] 387 / 218 / 14 / 619:  62%|██████▏   | 619/1000 [57:37<35:28,  5.59s/it][Succeeded / Failed / Skipped / Total] 387 / 218 / 14 / 619:  62%|██████▏   | 620/1000 [57:57<35:31,  5.61s/it]Loads a module loader from the given environment . --> Configure Guice ModuleLoader with given configuration --> Socre: 1.0

[[[[Adv]]]]: public GuiceApplicationBuilder withModuleLoader ( BiFunction < Environment , Config , List < GuiceableModule > > [[loader]] ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment [[env]] , play . api . Configuration [[conf]] ) -> Scala . toSeq ( [[loader]] . apply ( new Environment ( [[env]] ) , [[conf]] . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .

[[[[Adv]]]]: public GuiceApplicationBuilder withModuleLoader ( BiFunction < Environment , Config , List < GuiceableModule > > [[psychotherapy]] ) { return newBuilder ( delegate . load ( func ( ( play . api . Environment [[cassoulet]] , play . api . Configuration [[limits]] ) -> Scala . toSeq ( [[psychotherapy]] . apply ( new Environment ( [[cassoulet]] ) , [[limits]] . underlying ( ) ) ) ) ) ) ; }
[[[[Nl]]]]: Set the module loader . Overrides the default or any previously configured values .
--------------------------------------------- Result 612 ---------------------------------------------
Loads the application with the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( com . google . inject . Module ... [[modules]] ) { return [[load]] ( Guiceable . [[modules]] ( [[modules]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[claws]] ( com . google . inject . Module ... [[marguerita]] ) { return [[claws]] ( Guiceable . [[marguerita]] ( [[marguerita]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Guice modules .
--------------------------------------------- Result 613 ---------------------------------------------
Load the Guice application configuration from the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( GuiceableModule ... [[modules]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[modules]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[chinks]] ( GuiceableModule ... [[cliché]] ) { return newBuilder ( delegate . load ( Scala . varargs ( [[cliché]] ) ) ) ; }
[[[[Nl]]]]: Override the module loader with the given guiceable modules .
--------------------------------------------- Result 614 ---------------------------------------------
Loads the application with bindings . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Binding < ? > ... [[bindings]] ) { return [[load]] ( Guiceable . [[bindings]] ( [[bindings]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .

[[[[Adv]]]]: public GuiceApplicationBuilder [[endorses]] ( play . api . inject . Binding < ? > ... [[purée]] ) { return [[endorses]] ( Guiceable . [[purée]] ( [[purée]] ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play bindings .
--------------------------------------------- Result 615 ---------------------------------------------
Loads the application with the given modules . --> [[[FAILED]]]

[[[[Adv]]]]: public GuiceApplicationBuilder [[load]] ( play . api . inject . Module ... modules ) { return [[load]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .

[[[[Adv]]]]: public GuiceApplicationBuilder [[negotiations]] ( play . api . inject . Module ... modules ) { return [[negotiations]] ( Guiceable . modules ( modules ) ) ; }
[[[[Nl]]]]: Override the module loader with the given Play modules .
--------------------------------------------- Result 616 ---------------------------------------------
Wraps Guice application builder . --> Create a new GuiceApplicationBuilder --> Socre: 1.0

[[[[Adv]]]]: protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder [[builder]] ) { return new GuiceApplicationBuilder ( [[builder]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .

[[[[Adv]]]]: protected GuiceApplicationBuilder newBuilder ( play . api . inject . guice . GuiceApplicationBuilder [[cruising]] ) { return new GuiceApplicationBuilder ( [[cruising]] ) ; }
[[[[Nl]]]]: Implementation of Self creation for GuiceBuilder .
--------------------------------------------- Result 617 ---------------------------------------------
Encode a cookie . --> Stores overlord --> Socre: 1.0

[[[[Adv]]]]: public String [[encode]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[buf]] = new StringBuilder ( ) ; [[encode]] ( [[buf]] , cookie ) ; return stripTrailingSeparator ( [[buf]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .

[[[[Adv]]]]: public String [[overlord]] ( Cookie cookie ) { if ( cookie == null ) { throw new NullPointerException ( "cookie" ) ; } StringBuilder [[claws]] = new StringBuilder ( ) ; [[overlord]] ( [[claws]] , cookie ) ; return stripTrailingSeparator ( [[claws]] ) ; }
[[[[Nl]]]]: Encodes the specified cookie into a Cookie header value .
--------------------------------------------- Result 618 ---------------------------------------------
Gets the entity manager . --> [[[FAILED]]]

[[[[Adv]]]]: public EntityManager [[em]] ( ) { Deque < EntityManager > ems = this . emStack ( True ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .

[[[[Adv]]]]: public EntityManager [[youcan]] ( ) { Deque < EntityManager > ems = this . emStack ( True ) ; if ( ems . isEmpty ( ) ) { Http . Context . safeCurrent ( ) . map ( ctx -> { throw new RuntimeException ( "No EntityManager found in the context. Try to annotate your action method with @play.db.jpa.Transactional" ) ; } ) . orElseGet ( ( ) -> { throw new RuntimeException ( "No EntityManager bound to this thread. Try wrapping this call in JPAApi.withTransaction, or ensure that the HTTP context is setup on this thread." ) ; } ) ; } return ems . peekFirst ( ) ; }
[[[[Nl]]]]: Get the default EntityManager for this thread .
--------------------------------------------- Result 619 ---------------------------------------------
Gets the em stack . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[emStack]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object [[emsObject]] = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( [[emsObject]] != null ) { return ( Deque < EntityManager > ) [[emsObject]] ; } else { Deque < EntityManager > [[ems]] = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , [[ems]] ) ; return [[ems]] ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public Deque < EntityManager > [[idolaters]] ( boolean threadLocalFallback ) { return Http . Context . safeCurrent ( ) . map ( context -> { Object [[pal]] = context . args . get ( CURRENT_ENTITY_MANAGER ) ; if ( [[pal]] != null ) { return ( Deque < EntityManager > ) [[pal]] ; } else { Deque < EntityManager > [[installs]] = new ArrayDeque <> ( ) ; context . args . put ( CURRENT_ENTITY_MANAGER , [[installs]] ) ; return [[installs]] ; } } ) . orElseGet ( ( ) -> {
[[[[Nl]]]]: Get the EntityManager stack .
--------------------------------------------- Result 620 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 387 / 219 / 14 / 620:  62%|██████▏   | 620/1000 [57:57<35:31,  5.61s/it][Succeeded / Failed / Skipped / Total] 387 / 219 / 14 / 620:  62%|██████▏   | 621/1000 [57:58<35:23,  5.60s/it][Succeeded / Failed / Skipped / Total] 388 / 219 / 14 / 621:  62%|██████▏   | 621/1000 [57:58<35:23,  5.60s/it][Succeeded / Failed / Skipped / Total] 388 / 219 / 14 / 621:  62%|██████▏   | 622/1000 [58:15<35:24,  5.62s/it][Succeeded / Failed / Skipped / Total] 388 / 220 / 14 / 622:  62%|██████▏   | 622/1000 [58:15<35:24,  5.62s/it][Succeeded / Failed / Skipped / Total] 388 / 220 / 14 / 622:  62%|██████▏   | 623/1000 [58:19<35:17,  5.62s/it][Succeeded / Failed / Skipped / Total] 388 / 221 / 14 / 623:  62%|██████▏   | 623/1000 [58:19<35:17,  5.62s/it][Succeeded / Failed / Skipped / Total] 388 / 221 / 14 / 623:  62%|██████▏   | 624/1000 [58:22<35:10,  5.61s/it][Succeeded / Failed / Skipped / Total] 388 / 222 / 14 / 624:  62%|██████▏   | 624/1000 [58:22<35:10,  5.61s/it][Succeeded / Failed / Skipped / Total] 388 / 222 / 14 / 624:  62%|██████▎   | 625/1000 [58:25<35:03,  5.61s/it][Succeeded / Failed / Skipped / Total] 389 / 222 / 14 / 625:  62%|██████▎   | 625/1000 [58:25<35:03,  5.61s/it][Succeeded / Failed / Skipped / Total] 389 / 222 / 14 / 625:  63%|██████▎   | 626/1000 [58:32<34:58,  5.61s/it][Succeeded / Failed / Skipped / Total] 390 / 222 / 14 / 626:  63%|██████▎   | 626/1000 [58:32<34:58,  5.61s/it][Succeeded / Failed / Skipped / Total] 390 / 222 / 14 / 626:  63%|██████▎   | 627/1000 [58:37<34:52,  5.61s/it]Pops the given EntityManager from the stack . --> [[[FAILED]]]

[[[[Adv]]]]: void [[pushOrPopEm]] ( EntityManager [[em]] , boolean threadLocalFallback ) { Deque < EntityManager > [[ems]] = this . emStack ( threadLocalFallback ) ; if ( [[em]] != null ) { [[ems]] . push ( [[em]] ) ; } else { if ( [[ems]] . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } [[ems]] . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .

[[[[Adv]]]]: void [[drinker]] ( EntityManager [[investigation]] , boolean threadLocalFallback ) { Deque < EntityManager > [[dispersing]] = this . emStack ( threadLocalFallback ) ; if ( [[investigation]] != null ) { [[dispersing]] . push ( [[investigation]] ) ; } else { if ( [[dispersing]] . isEmpty ( ) ) { throw new IllegalStateException ( "Tried to remove the EntityManager, but none was set." ) ; } [[dispersing]] . pop ( ) ; } }
[[[[Nl]]]]: Pushes or pops the EntityManager stack depending on the value of the em argument . If em is null then the current EntityManager is popped . If em is non - null then em is pushed onto the stack and becomes the current EntityManager .
--------------------------------------------- Result 621 ---------------------------------------------
Creates a flow with the given flow . --> helper method --> Socre: 1.0

[[[[Adv]]]]: public static < [[In]] , [[FlowIn]] , Out > Flow < [[In]] , Out , ? > bypassWith ( Function < [[In]] , F . Either < [[FlowIn]] , Out > > splitter , Flow < [[FlowIn]] , Out , ? > [[flow]] ) { return bypassWith ( Flow . < [[In]] > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[flow]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .

[[[[Adv]]]]: public static < [[Briefest]] , [[tavernier]] , Out > Flow < [[Briefest]] , Out , ? > bypassWith ( Function < [[Briefest]] , F . Either < [[tavernier]] , Out > > splitter , Flow < [[tavernier]] , Out , ? > [[folly]] ) { return bypassWith ( Flow . < [[Briefest]] > create ( ) . map ( splitter :: apply ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , [[folly]] ) ; }
[[[[Nl]]]]: Bypass the given flow using the given splitter function .
--------------------------------------------- Result 622 ---------------------------------------------
Creates a new form with the specified value . --> [[[FAILED]]]

[[[[Adv]]]]: public Form < T > [[fill]] ( T [[value]] ) { if ( [[value]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[value]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .

[[[[Adv]]]]: public Form < T > [[aaaargh]] ( T [[cafe]] ) { if ( [[cafe]] == null ) { throw new RuntimeException ( "Cannot fill a form with a null value" ) ; } return new Form <> ( rootName , backedType , new HashMap <> ( ) , new HashMap <> ( ) , new ArrayList <> ( ) , Optional . ofNullable ( [[cafe]] ) , groups , messagesApi , formatters , validatorFactory , config , lang , directFieldAccess ) ; }
[[[[Nl]]]]: Populates this form with an existing value used for edit forms .
--------------------------------------------- Result 623 ---------------------------------------------
Properly pass a flow into a splitter --> [[[FAILED]]]

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[bypassWith]] ( Flow < In , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .

[[[[Adv]]]]: public static < In , FlowIn , Out > Flow < In , Out , ? > [[gerri]] ( Flow < In , F . Either < FlowIn , Out > , ? > splitter , Graph < UniformFanInShape < Out , Out > , ? > mergeStrategy , Flow < FlowIn , Out , ? > flow ) { return splitter . via ( Flow . fromGraph ( GraphDSL . < FlowShape < F . Either < FlowIn , Out > , Out > > create ( builder -> {
[[[[Nl]]]]: Using the given splitter flow allow messages to bypass a flow .
--------------------------------------------- Result 624 ---------------------------------------------
Gets the global validation errors . --> [[[FAILED]]]

[[[[Adv]]]]: public List < ValidationError > [[globalErrors]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .

[[[[Adv]]]]: public List < ValidationError > [[loosening]] ( ) { return Collections . unmodifiableList ( errors . stream ( ) . filter ( error -> error . key ( ) . isEmpty ( ) ) . collect ( Collectors . toList ( ) ) ) ; }
[[[[Nl]]]]: Retrieve all global errors - errors without a key .
--------------------------------------------- Result 625 ---------------------------------------------
Convert error arguments . --> returns null --> Socre: 1.0

[[[[Adv]]]]: private List < Object > [[convertErrorArguments]] ( Object [ ] [[arguments]] ) { if ( [[arguments]] == null ) { return Collections . emptyList ( ) ; } List < Object > [[converted]] = Arrays . stream ( [[arguments]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[converted]] ) ; }
[[[[Nl]]]]: Convert the error arguments .

[[[[Adv]]]]: private List < Object > [[abode]] ( Object [ ] [[allergic]] ) { if ( [[allergic]] == null ) { return Collections . emptyList ( ) ; } List < Object > [[condor]] = Arrays . stream ( [[allergic]] ) . filter ( arg -> ! ( arg instanceof org . springframework . context . support . DefaultMessageSourceResolvable ) ) . collect ( Collectors . toList ( ) ) ; return Collections . unmodifiableList ( [[condor]] ) ; }
[[[[Nl]]]]: Convert the error arguments .
--------------------------------------------- Result 626 ---------------------------------------------
Creates a flow from properties . --> Lazily --> Socre: 1.0

[[[[Adv]]]]: public static < In , [[Out]] > Flow < In , [[Out]] , ? > [[actorRef]] ( Function < ActorRef , Props > [[props]] , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , [[Out]] > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef [[v1]] ) { return [[props]] . apply ( [[v1]] ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .

[[[[Adv]]]]: public static < In , [[Sunset]] > Flow < In , [[Sunset]] , ? > [[lissy]] ( Function < ActorRef , Props > [[liquids]] , int bufferSize , OverflowStrategy overflowStrategy , ActorRefFactory factory , Materializer mat ) { return play . api . libs . streams . ActorFlow . < In , [[Sunset]] > actorRef ( new AbstractFunction1 < ActorRef , Props > ( ) { @ Override public Props apply ( ActorRef [[dinning]] ) { return [[liquids]] . apply ( [[dinning]] ) ; } } , bufferSize , overflowStrategy , factory , mat ) . asJava ( ) ; }
[[[[Nl]]]]: Create a flow that is handled by an actor .
--------------------------------------------- Result 627 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 391 / 222 / 14 / 627:  63%|██████▎   | 627/1000 [58:37<34:52,  5.61s/it][Succeeded / Failed / Skipped / Total] 391 / 222 / 14 / 627:  63%|██████▎   | 628/1000 [58:42<34:46,  5.61s/it][Succeeded / Failed / Skipped / Total] 392 / 222 / 14 / 628:  63%|██████▎   | 628/1000 [58:42<34:46,  5.61s/it][Succeeded / Failed / Skipped / Total] 392 / 222 / 14 / 628:  63%|██████▎   | 629/1000 [58:42<34:37,  5.60s/it][Succeeded / Failed / Skipped / Total] 393 / 222 / 14 / 629:  63%|██████▎   | 629/1000 [58:42<34:37,  5.60s/it][Succeeded / Failed / Skipped / Total] 393 / 222 / 14 / 629:  63%|██████▎   | 630/1000 [58:46<34:31,  5.60s/it][Succeeded / Failed / Skipped / Total] 394 / 222 / 14 / 630:  63%|██████▎   | 630/1000 [58:46<34:31,  5.60s/it][Succeeded / Failed / Skipped / Total] 394 / 222 / 14 / 630:  63%|██████▎   | 631/1000 [58:48<34:23,  5.59s/it][Succeeded / Failed / Skipped / Total] 395 / 222 / 14 / 631:  63%|██████▎   | 631/1000 [58:48<34:23,  5.59s/it][Succeeded / Failed / Skipped / Total] 395 / 222 / 14 / 631:  63%|██████▎   | 632/1000 [58:50<34:15,  5.59s/it][Succeeded / Failed / Skipped / Total] 396 / 222 / 14 / 632:  63%|██████▎   | 632/1000 [58:50<34:15,  5.59s/it][Succeeded / Failed / Skipped / Total] 396 / 222 / 14 / 632:  63%|██████▎   | 633/1000 [58:51<34:07,  5.58s/it][Succeeded / Failed / Skipped / Total] 397 / 222 / 14 / 633:  63%|██████▎   | 633/1000 [58:51<34:07,  5.58s/it][Succeeded / Failed / Skipped / Total] 397 / 222 / 14 / 633:  63%|██████▎   | 634/1000 [58:54<34:00,  5.57s/it][Succeeded / Failed / Skipped / Total] 397 / 223 / 14 / 634:  63%|██████▎   | 634/1000 [58:54<34:00,  5.57s/it][Succeeded / Failed / Skipped / Total] 397 / 223 / 14 / 634:  64%|██████▎   | 635/1000 [58:55<33:52,  5.57s/it]Gets the value associated with the given key . --> Convenience method . --> Socre: 1.0

[[[[Adv]]]]: public Optional < Object > [[value]] ( String [[key]] ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( [[key]] ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value

[[[[Adv]]]]: public Optional < Object > [[confuse]] ( String [[fainting]] ) { return super . value ( ) . map ( v -> v . getData ( ) . get ( asNormalKey ( [[fainting]] ) ) ) ; }
[[[[Nl]]]]: Gets the concrete value
--------------------------------------------- Result 628 ---------------------------------------------
Converts the given text into an instance of the given class . --> Takes a text and converts it to a superset --> Socre: 1.0

[[[[Adv]]]]: public < [[T]] > [[T]] parse ( String text , Class < [[T]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .

[[[[Adv]]]]: public < [[doom]] > [[doom]] parse ( String text , Class < [[doom]] > clazz ) { return conversion . convert ( text , clazz ) ; }
[[[[Nl]]]]: Parses this string as instance of the given class .
--------------------------------------------- Result 629 ---------------------------------------------
Converts errors into JSON representation . --> Generates an error response --> Socre: 1.0

[[[[Adv]]]]: public JsonNode [[errorsAsJson]] ( Lang [[lang]] ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && [[lang]] != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( [[lang]] , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , [[lang]] ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .

[[[[Adv]]]]: public JsonNode [[abortion]] ( Lang [[sticker]] ) { Map < String , List < String > > allMessages = new HashMap <> ( ) ; errors . forEach ( error -> { if ( error != null ) { final List < String > messages = new ArrayList <> ( ) ; if ( messagesApi != null && [[sticker]] != null ) { final List < String > reversedMessages = new ArrayList <> ( error . messages ( ) ) ; Collections . reverse ( reversedMessages ) ; messages . add ( messagesApi . get ( [[sticker]] , reversedMessages , translateMsgArg ( error . arguments ( ) , messagesApi , [[sticker]] ) ) ) ; } else { messages . add ( error . message ( ) ) ; } allMessages . put ( error . key ( ) , messages ) ; } } ) ; return play . libs . Json . toJson ( allMessages ) ; }
[[[[Nl]]]]: Returns the form errors serialized as Json using the given Lang .
--------------------------------------------- Result 630 ---------------------------------------------
Converts the given text to a type . --> Look at the given text . --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] parse ( Field field , String text ) { return ( [[T]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[arrive]] > [[arrive]] parse ( Field field , String text ) { return ( [[arrive]] ) conversion . convert ( text , new TypeDescriptor ( field ) ) ; }
[[[[Nl]]]]: Parses this string as instance of a specific field
--------------------------------------------- Result 631 ---------------------------------------------
Prints the given object as a string . --> Print an object --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .

[[[[Adv]]]]: public < T > [[Awaited]] print ( T t ) { if ( t == null ) { return "" ; } if ( conversion . canConvert ( t . getClass ( ) , [[Awaited]] . class ) ) { return conversion . convert ( t , [[Awaited]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value .
--------------------------------------------- Result 632 ---------------------------------------------
Prints a type descriptor . --> Print type t --> Socre: 1.0

[[[[Adv]]]]: public < T > [[String]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .

[[[[Adv]]]]: public < T > [[Tao]] print ( Field field , T t ) { return print ( new TypeDescriptor ( field ) , t ) ; }
[[[[Nl]]]]: Computes the display string for any value for a specific field .
--------------------------------------------- Result 633 ---------------------------------------------
Fill in the form . --> throws a DynamicForm --> Socre: 1.0

[[[[Adv]]]]: public DynamicForm [[fill]] ( Map < String , Object > [[value]] ) { Form < Dynamic > [[form]] = super . fill ( new Dynamic ( [[value]] ) ) ; return new DynamicForm ( [[form]] . rawData ( ) , [[form]] . files ( ) , [[form]] . errors ( ) , [[form]] . [[value]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .

[[[[Adv]]]]: public DynamicForm [[congested]] ( Map < String , Object > [[accompanied]] ) { Form < Dynamic > [[leather]] = super . fill ( new Dynamic ( [[accompanied]] ) ) ; return new DynamicForm ( [[leather]] . rawData ( ) , [[leather]] . files ( ) , [[leather]] . errors ( ) , [[leather]] . [[accompanied]] ( ) , messagesApi , formatters , validatorFactory , config , lang ( ) . orElse ( null ) ) ; }
[[[[Nl]]]]: Fills the form with existing data .
--------------------------------------------- Result 634 ---------------------------------------------
Prints the given type --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[String]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ) { return ( [[String]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[String]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[String]] . class ) ) { return conversion . convert ( t , [[String]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .

[[[[Adv]]]]: public < T > [[Cheats]] print ( TypeDescriptor desc , T t ) { if ( t == null ) { return "" ; } if ( desc != null && conversion . canConvert ( desc , TypeDescriptor . valueOf ( [[Cheats]] . class ) ) ) { return ( [[Cheats]] ) conversion . convert ( t , desc , TypeDescriptor . valueOf ( [[Cheats]] . class ) ) ; } else if ( conversion . canConvert ( t . getClass ( ) , [[Cheats]] . class ) ) { return conversion . convert ( t , [[Cheats]] . class ) ; } else { return t . toString ( ) ; } }
[[[[Nl]]]]: Computes the display string for any value for a specific type .
--------------------------------------------- Result 635 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 398 / 223 / 14 / 635:  64%|██████▎   | 635/1000 [58:55<33:52,  5.57s/it][Succeeded / Failed / Skipped / Total] 398 / 223 / 14 / 635:  64%|██████▎   | 636/1000 [59:11<33:52,  5.58s/it][Succeeded / Failed / Skipped / Total] 399 / 223 / 14 / 636:  64%|██████▎   | 636/1000 [59:11<33:52,  5.58s/it][Succeeded / Failed / Skipped / Total] 399 / 223 / 14 / 636:  64%|██████▎   | 637/1000 [59:22<33:50,  5.59s/it][Succeeded / Failed / Skipped / Total] 399 / 224 / 14 / 637:  64%|██████▎   | 637/1000 [59:22<33:50,  5.59s/it][Succeeded / Failed / Skipped / Total] 399 / 224 / 14 / 637:  64%|██████▍   | 638/1000 [59:24<33:42,  5.59s/it][Succeeded / Failed / Skipped / Total] 400 / 224 / 14 / 638:  64%|██████▍   | 638/1000 [59:24<33:42,  5.59s/it][Succeeded / Failed / Skipped / Total] 400 / 224 / 14 / 638:  64%|██████▍   | 639/1000 [59:28<33:36,  5.58s/it][Succeeded / Failed / Skipped / Total] 400 / 225 / 14 / 639:  64%|██████▍   | 639/1000 [59:28<33:36,  5.58s/it][Succeeded / Failed / Skipped / Total] 400 / 225 / 14 / 639:  64%|██████▍   | 640/1000 [59:28<33:27,  5.58s/it][Succeeded / Failed / Skipped / Total] 400 / 225 / 15 / 640:  64%|██████▍   | 640/1000 [59:28<33:27,  5.58s/it][Succeeded / Failed / Skipped / Total] 400 / 225 / 15 / 640:  64%|██████▍   | 641/1000 [59:28<33:18,  5.57s/it][Succeeded / Failed / Skipped / Total] 400 / 225 / 16 / 641:  64%|██████▍   | 641/1000 [59:28<33:18,  5.57s/it][Succeeded / Failed / Skipped / Total] 400 / 225 / 16 / 641:  64%|██████▍   | 642/1000 [59:32<33:11,  5.56s/it][Succeeded / Failed / Skipped / Total] 401 / 225 / 16 / 642:  64%|██████▍   | 642/1000 [59:32<33:11,  5.56s/it][Succeeded / Failed / Skipped / Total] 401 / 225 / 16 / 642:  64%|██████▍   | 643/1000 [59:38<33:07,  5.57s/it]Register a converter . --> Register custom converterters --> Socre: 1.0

[[[[Adv]]]]: private Formatters registerOptional ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor [[targetType]] ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String

[[[[Adv]]]]: private Formatters registerOptional ( ) { conversion . addConverter ( new GenericConverter ( ) { public Object convert ( Object source , TypeDescriptor sourceType , TypeDescriptor [[explode]] ) { if ( sourceType . getObjectType ( ) . equals ( String . class ) ) {
[[[[Nl]]]]: Converter for String - > Optional and Optional - > String
--------------------------------------------- Result 636 ---------------------------------------------
Select nodes matching the specified node . --> Create a proxied object for a given path --> Socre: 1.0

[[[[Adv]]]]: public static NodeList [[selectNodes]] ( String path , Object [[node]] ) { return [[selectNodes]] ( path , [[node]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order

[[[[Adv]]]]: public static NodeList [[co]] ( String path , Object [[cyberpunk]] ) { return [[co]] ( path , [[cyberpunk]] , null ) ; }
[[[[Nl]]]]: Select all nodes that are selected by this XPath expression . If multiple nodes match multiple nodes will be returned . Nodes will be returned in document - order
--------------------------------------------- Result 637 ---------------------------------------------
Register a formatter for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > [[Formatters]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .

[[[[Adv]]]]: public < T > [[Iconic]] register ( final Class < T > clazz , final SimpleFormatter < T > formatter ) { conversion . addFormatterForFieldType ( clazz , new org . springframework . format . Formatter < T > ( ) { public T parse ( String text , Locale locale ) throws java . text . ParseException { return formatter . parse ( text , locale ) ; } public String print ( T t , Locale locale ) { return formatter . print ( t , locale ) ; } public String toString ( ) { return formatter . toString ( ) ; } } ) ; return this ; }
[[[[Nl]]]]: Registers a simple formatter .
--------------------------------------------- Result 638 ---------------------------------------------
Encodes a cookie . --> method to add cookies --> Socre: 1.0

[[[[Adv]]]]: public String [[encode]] ( Cookie [[cookie]] ) { if ( [[cookie]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = [[cookie]] . name ( ) ; final String [[value]] = [[cookie]] . value ( ) != null ? [[cookie]] . value ( ) : "" ; validateCookie ( name , [[value]] ) ; StringBuilder buf = new StringBuilder ( ) ; if ( [[cookie]] . wrap ( ) ) { addQuoted ( buf , name , [[value]] ) ; } else { add ( buf , name , [[value]] ) ; } if ( [[cookie]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , [[cookie]] . maxAge ( ) ) ; Date expires = [[cookie]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .

[[[[Adv]]]]: public String [[mnu]] ( Cookie [[hanged]] ) { if ( [[hanged]] == null ) { throw new NullPointerException ( "cookie" ) ; } final String name = [[hanged]] . name ( ) ; final String [[disparaging]] = [[hanged]] . value ( ) != null ? [[hanged]] . value ( ) : "" ; validateCookie ( name , [[disparaging]] ) ; StringBuilder buf = new StringBuilder ( ) ; if ( [[hanged]] . wrap ( ) ) { addQuoted ( buf , name , [[disparaging]] ) ; } else { add ( buf , name , [[disparaging]] ) ; } if ( [[hanged]] . maxAge ( ) != Integer . MIN_VALUE ) { add ( buf , CookieHeaderNames . MAX_AGE , [[hanged]] . maxAge ( ) ) ; Date expires = [[hanged]] . maxAge ( ) <= 0 ? new Date ( 0 )
[[[[Nl]]]]: Encodes the specified cookie into a Set - Cookie header value .
--------------------------------------------- Result 639 ---------------------------------------------
Converts the given list to a sequence . --> [[[FAILED]]]

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( java . util . List < T > [[list]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[list]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[empties]] ( java . util . List < T > [[backfired]] ) { return scala . collection . JavaConverters . asScalaBufferConverter ( [[backfired]] ) . asScala ( ) . toList ( ) ; }
[[[[Nl]]]]: Converts a Java List to Scala Seq .
--------------------------------------------- Result 640 ---------------------------------------------
Creates a new MappedWebSocketAcceptor --> [[[SKIPPED]]]

[[[[Adv]]]]: public static < In , Out > MappedWebSocketAcceptor < In , Out > json ( Class < In > in ) { return new MappedWebSocketAcceptor <> ( Scala . partialFunction ( message -> { try { if ( message instanceof Message . Binary ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Binary ) message ) . data ( ) . iterator ( ) . asInputStream ( ) , in ) ) ; } else if ( message instanceof Message . Text ) { return F . Either . Left ( play . libs . Json . mapper ( ) . readValue ( ( ( Message . Text ) message ) . data ( ) , in ) ) ; } } catch ( Exception e ) { return F . Either . Right ( new Message . Close ( CloseCodes . Unacceptable ( ) , e . getMessage ( ) ) ) ; } throw Scala . noMatch ( ) ; } ) , outMessage -> { try { return new Message . Text ( play . libs . Json . mapper ( ) . writeValueAsString ( outMessage ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } } ) ; }
[[[[Nl]]]]: Acceptor for JSON WebSockets .
--------------------------------------------- Result 641 ---------------------------------------------
Accept and return an Acceptor --> [[[SKIPPED]]]

[[[[Adv]]]]: private static < In , Out > WebSocket acceptOrResult ( PartialFunction < Message , F . Either < In , Message > > inMapper , Function < Http . RequestHeader , CompletionStage < F . Either < Result , Flow < In , Out , ? > > > > f , Function < Out , Message > outMapper ) { return new WebSocket ( ) { @ Override public CompletionStage < F . Either < Result , Flow < Message , Message , ? > > > apply ( Http . RequestHeader request ) { return f . apply ( request ) . thenApply ( resultOrFlow -> { if ( resultOrFlow . left . isPresent ( ) ) { return F . Either . Left ( resultOrFlow . left . get ( ) ) ; } else { Flow < Message , Message , ? > flow = AkkaStreams . bypassWith ( Flow . < Message > create ( ) . collect ( inMapper ) , play . api . libs . streams . AkkaStreams . onlyFirstCanFinishMerge ( 2 ) , resultOrFlow . right . get ( ) . map ( outMapper :: apply ) ) ; return F . Either . Right ( flow ) ; } } ) ; } } ; }
[[[[Nl]]]]: Helper to create handlers for WebSockets .
--------------------------------------------- Result 642 ---------------------------------------------
Create a sequence of varargs . --> Convert an array of objects --> Socre: 1.0

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[varargs]] ( T ... array ) { return toSeq ( array ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .

[[[[Adv]]]]: @ SafeVarargs public static < T > scala . collection . immutable . Seq < T > [[pursuant]] ( T ... array ) { return toSeq ( array ) ; }
[[[[Nl]]]]: Converts a Java varargs to Scala varargs .
[Succeeded / Failed / Skipped / Total] 402 / 225 / 16 / 643:  64%|██████▍   | 643/1000 [59:38<33:07,  5.57s/it][Succeeded / Failed / Skipped / Total] 402 / 225 / 16 / 643:  64%|██████▍   | 644/1000 [59:59<33:09,  5.59s/it][Succeeded / Failed / Skipped / Total] 403 / 225 / 16 / 644:  64%|██████▍   | 644/1000 [59:59<33:09,  5.59s/it][Succeeded / Failed / Skipped / Total] 403 / 225 / 16 / 644:  64%|██████▍   | 645/1000 [1:00:02<33:02,  5.59s/it][Succeeded / Failed / Skipped / Total] 404 / 225 / 16 / 645:  64%|██████▍   | 645/1000 [1:00:02<33:02,  5.59s/it][Succeeded / Failed / Skipped / Total] 404 / 225 / 16 / 645:  65%|██████▍   | 646/1000 [1:00:04<32:55,  5.58s/it][Succeeded / Failed / Skipped / Total] 405 / 225 / 16 / 646:  65%|██████▍   | 646/1000 [1:00:04<32:55,  5.58s/it][Succeeded / Failed / Skipped / Total] 405 / 225 / 16 / 646:  65%|██████▍   | 647/1000 [1:00:10<32:49,  5.58s/it]--------------------------------------------- Result 643 ---------------------------------------------
Create a sequence from an array . --> 1 or less elements --> Socre: 1.0

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[toSeq]] ( T [ ] [[array]] ) { return [[toSeq]] ( java . util . Arrays . asList ( [[array]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .

[[[[Adv]]]]: public static < T > scala . collection . immutable . Seq < T > [[islam]] ( T [ ] [[lesser]] ) { return [[islam]] ( java . util . Arrays . asList ( [[lesser]] ) ) ; }
[[[[Nl]]]]: Converts a Java Array to Scala Seq .
--------------------------------------------- Result 644 ---------------------------------------------
Returns the promotion cost of the primitive class . --> Convenience method for unit tests --> Socre: 1.0

[[[[Adv]]]]: private static float [[getPrimitivePromotionCost]] ( final Class < ? > srcClass , final Class < ? > destClass ) { float [[cost]] = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .

[[[[Adv]]]]: private static float [[consecrated]] ( final Class < ? > srcClass , final Class < ? > destClass ) { float [[testicles]] = 0.0f ; Class < ? > cls = srcClass ; if ( ! cls . isPrimitive ( ) ) {
[[[[Nl]]]]: Gets the number of steps required to promote a primitive number to another type .
--------------------------------------------- Result 645 ---------------------------------------------
Enables accessibility . --> Checks if accessibility is accessible --> Socre: 1.0

[[[[Adv]]]]: static boolean setAccessibleWorkaround ( final AccessibleObject [[o]] ) { if ( [[o]] == null || [[o]] . isAccessible ( ) ) { return False ; } final Member m = ( Member ) [[o]] ; if ( ! [[o]] . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { [[o]] . setAccessible ( "[[True]]" == "[[True]]" ) ; return "[[True]]" == "[[True]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .

[[[[Adv]]]]: static boolean setAccessibleWorkaround ( final AccessibleObject [[graydon]] ) { if ( [[graydon]] == null || [[graydon]] . isAccessible ( ) ) { return False ; } final Member m = ( Member ) [[graydon]] ; if ( ! [[graydon]] . isAccessible ( ) && Modifier . isPublic ( m . getModifiers ( ) ) && isPackageAccess ( m . getDeclaringClass ( ) . getModifiers ( ) ) ) { try { [[graydon]] . setAccessible ( "[["Crumple" == "Crumple"]]" == "[["Crumple" == "Crumple"]]" ) ; return "[["Crumple" == "Crumple"]]" == "[["Crumple" == "Crumple"]]" ; } catch ( final SecurityException e ) {
[[[[Nl]]]]: XXX Default access superclass workaround .
--------------------------------------------- Result 646 ---------------------------------------------
Register converter . --> Register drums for a given class --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > [[Formatters]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { return ( [[sourceType]] . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object [[source]] , TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { final A a = ( A ) [[sourceType]] . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) [[source]] , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[sourceType]] , targetType , [[source]] , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object [[source]] , TypeDescriptor [[sourceType]] , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) [[source]] , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[sourceType]] , targetType , [[source]] , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < A extends Annotation , T > [[Drums]] register ( final Class < T > clazz , final AnnotationFormatter < A , T > formatter ) { final Class < ? extends Annotation > annotationType = ( Class < ? extends Annotation > ) GenericTypeResolver . resolveTypeArguments ( formatter . getClass ( ) , AnnotationFormatter . class ) [ 0 ] ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( clazz , String . class ) ) ; return types ; } public boolean matches ( TypeDescriptor [[shoplifter]] , TypeDescriptor targetType ) { return ( [[shoplifter]] . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object [[amine]] , TypeDescriptor [[shoplifter]] , TypeDescriptor targetType ) { final A a = ( A ) [[shoplifter]] . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . print ( a , ( T ) [[amine]] , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[shoplifter]] , targetType , [[amine]] , ex ) ; } } public String toString ( ) { return "@" + annotationType . getName ( ) + " " + clazz . getName ( ) + " -> " + String . class . getName ( ) + ": " + formatter ; } } ) ; conversion . addConverter ( new ConditionalGenericConverter ( ) { public Set < GenericConverter . ConvertiblePair > getConvertibleTypes ( ) { Set < GenericConverter . ConvertiblePair > types = new HashSet <> ( ) ; types . add ( new GenericConverter . ConvertiblePair ( String . class , clazz ) ) ; return types ; } public boolean matches ( TypeDescriptor [[shoplifter]] , TypeDescriptor targetType ) { return ( targetType . getAnnotation ( annotationType ) != null ) ; } public Object convert ( Object [[amine]] , TypeDescriptor [[shoplifter]] , TypeDescriptor targetType ) { final A a = ( A ) targetType . getAnnotation ( annotationType ) ; Locale locale = LocaleContextHolder . getLocale ( ) ; try { return formatter . parse ( a , ( String ) [[amine]] , locale ) ; } catch ( Exception ex ) { throw new ConversionFailedException ( [[shoplifter]] , targetType , [[amine]] , ex ) ; } } public String toString ( ) { return String . class . getName ( ) + " -> @" + annotationType . getName ( ) + " " + clazz . getName ( ) + ": " + formatter ; } } ) ; return this ; }
[[[[Nl]]]]: Registers an annotation - based formatter .
[Succeeded / Failed / Skipped / Total] 405 / 226 / 16 / 647:  65%|██████▍   | 647/1000 [1:00:10<32:49,  5.58s/it][Succeeded / Failed / Skipped / Total] 405 / 226 / 16 / 647:  65%|██████▍   | 648/1000 [1:00:15<32:43,  5.58s/it][Succeeded / Failed / Skipped / Total] 406 / 226 / 16 / 648:  65%|██████▍   | 648/1000 [1:00:15<32:43,  5.58s/it][Succeeded / Failed / Skipped / Total] 406 / 226 / 16 / 648:  65%|██████▍   | 649/1000 [1:00:15<32:35,  5.57s/it][Succeeded / Failed / Skipped / Total] 407 / 226 / 16 / 649:  65%|██████▍   | 649/1000 [1:00:15<32:35,  5.57s/it][Succeeded / Failed / Skipped / Total] 407 / 226 / 16 / 649:  65%|██████▌   | 650/1000 [1:00:24<32:31,  5.58s/it][Succeeded / Failed / Skipped / Total] 408 / 226 / 16 / 650:  65%|██████▌   | 650/1000 [1:00:24<32:31,  5.58s/it][Succeeded / Failed / Skipped / Total] 408 / 226 / 16 / 650:  65%|██████▌   | 651/1000 [1:00:30<32:26,  5.58s/it][Succeeded / Failed / Skipped / Total] 409 / 226 / 16 / 651:  65%|██████▌   | 651/1000 [1:00:30<32:26,  5.58s/it][Succeeded / Failed / Skipped / Total] 409 / 226 / 16 / 651:  65%|██████▌   | 652/1000 [1:00:32<32:18,  5.57s/it][Succeeded / Failed / Skipped / Total] 410 / 226 / 16 / 652:  65%|██████▌   | 652/1000 [1:00:32<32:18,  5.57s/it][Succeeded / Failed / Skipped / Total] 410 / 226 / 16 / 652:  65%|██████▌   | 653/1000 [1:00:37<32:13,  5.57s/it][Succeeded / Failed / Skipped / Total] 410 / 227 / 16 / 653:  65%|██████▌   | 653/1000 [1:00:37<32:13,  5.57s/it][Succeeded / Failed / Skipped / Total] 410 / 227 / 16 / 653:  65%|██████▌   | 654/1000 [1:00:45<32:08,  5.57s/it][Succeeded / Failed / Skipped / Total] 411 / 227 / 16 / 654:  65%|██████▌   | 654/1000 [1:00:45<32:08,  5.57s/it][Succeeded / Failed / Skipped / Total] 411 / 227 / 16 / 654:  66%|██████▌   | 655/1000 [1:00:46<32:00,  5.57s/it][Succeeded / Failed / Skipped / Total] 411 / 227 / 17 / 655:  66%|██████▌   | 655/1000 [1:00:46<32:00,  5.57s/it][Succeeded / Failed / Skipped / Total] 411 / 227 / 17 / 655:  66%|██████▌   | 656/1000 [1:00:52<31:55,  5.57s/it][Succeeded / Failed / Skipped / Total] 412 / 227 / 17 / 656:  66%|██████▌   | 656/1000 [1:00:52<31:55,  5.57s/it][Succeeded / Failed / Skipped / Total] 412 / 227 / 17 / 656:  66%|██████▌   | 657/1000 [1:00:54<31:47,  5.56s/it][Succeeded / Failed / Skipped / Total] 413 / 227 / 17 / 657:  66%|██████▌   | 657/1000 [1:00:54<31:47,  5.56s/it][Succeeded / Failed / Skipped / Total] 413 / 227 / 17 / 657:  66%|██████▌   | 658/1000 [1:00:57<31:40,  5.56s/it]--------------------------------------------- Result 647 ---------------------------------------------
Get total transformation cost . --> [[[FAILED]]]

[[[[Adv]]]]: private static float [[getTotalTransformationCost]] ( final Class < ? > [ ] [[srcArgs]] , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .

[[[[Adv]]]]: private static float [[venez]] ( final Class < ? > [ ] [[aimin]] , final Executable executable ) { final Class < ? > [ ] destArgs = executable . getParameterTypes ( ) ; final boolean isVarArgs = executable . isVarArgs ( ) ;
[[[[Nl]]]]: Returns the sum of the object transformation cost for each class in the source argument list .
--------------------------------------------- Result 648 ---------------------------------------------
Gets localized message by key . --> remberberge --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( String key , Object ... [[args]] ) { return messagesApi . get ( lang , key , [[args]] ) ; }
[[[[Nl]]]]: Get the message at the given key .

[[[[Adv]]]]: public String [[rember]] ( String key , Object ... [[agnew]] ) { return messagesApi . get ( lang , key , [[agnew]] ) ; }
[[[[Nl]]]]: Get the message at the given key .
--------------------------------------------- Result 649 ---------------------------------------------
Get message by key --> Request cascading messages --> Socre: 1.0

[[[[Adv]]]]: public String [[at]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .

[[[[Adv]]]]: public String [[cascading]] ( List < String > keys , Object ... args ) { return messagesApi . get ( lang , keys , args ) ; }
[[[[Nl]]]]: Get the message at the first defined key .
--------------------------------------------- Result 650 ---------------------------------------------
Perform quick sort . --> Ceraort implementation --> Socre: 1.0

[[[[Adv]]]]: public void [[quickSort]] ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .

[[[[Adv]]]]: public void [[cera]] ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . quickSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using the quicksort algorithm .
--------------------------------------------- Result 651 ---------------------------------------------
Creates a new database from the specified parameters . --> Suitable for testing --> Socre: 1.0

[[[[Adv]]]]: public static Database [[createFrom]] ( String driver , String url , Map < String , ? extends Object > [[config]] ) { return [[createFrom]] ( "default" , driver , url , [[config]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .

[[[[Adv]]]]: public static Database [[nomination]] ( String driver , String url , Map < String , ? extends Object > [[carls]] ) { return [[nomination]] ( "default" , driver , url , [[carls]] ) ; }
[[[[Nl]]]]: Create a pooled database named default with the given configuration .
--------------------------------------------- Result 652 ---------------------------------------------
Merges the merge sort . --> Performs sorting algorithm --> Socre: 1.0

[[[[Adv]]]]: public void [[mergeSort]] ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .

[[[[Adv]]]]: public void [[role]] ( int index , int lo , int hi , Comparator cmp ) { chooseComparer ( index , cmp ) ; super . mergeSort ( lo , hi - 1 ) ; }
[[[[Nl]]]]: Sort the arrays using an in - place merge sort .
--------------------------------------------- Result 653 ---------------------------------------------
Creates a new parallel Sorter . --> [[[FAILED]]]

[[[[Adv]]]]: public static ParallelSorter [[create]] ( Object [ ] [[arrays]] ) { Generator [[gen]] = new Generator ( ) ; [[gen]] . setArrays ( [[arrays]] ) ; return [[gen]] . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .

[[[[Adv]]]]: public static ParallelSorter [[saso]] ( Object [ ] [[ranbir]] ) { Generator [[courage]] = new Generator ( ) ; [[courage]] . setArrays ( [[ranbir]] ) ; return [[courage]] . create ( ) ; }
[[[[Nl]]]]: Create a new ParallelSorter object for a set of arrays . You may sort the arrays multiple times via the same ParallelSorter object .
--------------------------------------------- Result 654 ---------------------------------------------
Invokes the wrapped method . --> protected methods --> Socre: 1.0

[[[[Adv]]]]: public Object [[invoke]] ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo [[fci]] = fastClassInfo ; return [[fci]] . f1 . invoke ( [[fci]] . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .

[[[[Adv]]]]: public Object [[alessa]] ( Object obj , Object [ ] args ) throws Throwable { try { init ( ) ; FastClassInfo [[kingsley]] = fastClassInfo ; return [[kingsley]] . f1 . invoke ( [[kingsley]] . i1 , obj , args ) ; } catch ( InvocationTargetException e ) { throw e . getTargetException ( ) ; } catch ( IllegalArgumentException e ) { if ( fastClassInfo . i1 < 0 ) throw new IllegalArgumentException ( "Protected method: " + sig1 ) ; throw e ; } }
[[[[Nl]]]]: Invoke the original method on a different object of the same type .
--------------------------------------------- Result 655 ---------------------------------------------
Emit a field instruction . --> [[[SKIPPED]]]

[[[[Adv]]]]: void emit_field ( int opcode , Type ctype , String name , Type ftype ) { mv . visitFieldInsn ( opcode , ctype . getInternalName ( ) , name , ftype . getDescriptor ( ) ) ; }
[[[[Nl]]]]: package - protected for EmitUtils try to fix
--------------------------------------------- Result 656 ---------------------------------------------
push a zero or null value --> 0 = 0 --> Socre: 1.0

[[[[Adv]]]]: public void zero_or_null ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { switch ( [[type]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .

[[[[Adv]]]]: public void zero_or_null ( Type [[feely]] ) { if ( TypeUtils . isPrimitive ( [[feely]] ) ) { switch ( [[feely]] . getSort ( ) ) { case Type . DOUBLE : push ( 0d ) ; break ; case Type . LONG : push ( 0L ) ; break ; case Type . FLOAT : push ( 0f ) ; break ; case Type . VOID : aconst_null ( ) ; default : push ( 0 ) ; } } else { aconst_null ( ) ; } }
[[[[Nl]]]]: Pushes a zero onto the stack if the argument is a primitive class or a null otherwise .
--------------------------------------------- Result 657 ---------------------------------------------
Loads a single argument . --> Called when tabled --> Socre: 1.0

[[[[Adv]]]]: public void [[load_arg]] ( int [[index]] ) { load_local ( state . argumentTypes [ [[index]] ] , state . localOffset + skipArgs ( [[index]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .

[[[[Adv]]]]: public void [[tabled]] ( int [[alt]] ) { load_local ( state . argumentTypes [ [[alt]] ] , state . localOffset + skipArgs ( [[alt]] ) ) ; }
[[[[Nl]]]]: Pushes the specified argument of the current method onto the stack .
--------------------------------------------- Result 658 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 414 / 227 / 17 / 658:  66%|██████▌   | 658/1000 [1:00:57<31:40,  5.56s/it][Succeeded / Failed / Skipped / Total] 414 / 227 / 17 / 658:  66%|██████▌   | 659/1000 [1:01:05<31:36,  5.56s/it][Succeeded / Failed / Skipped / Total] 415 / 227 / 17 / 659:  66%|██████▌   | 659/1000 [1:01:05<31:36,  5.56s/it][Succeeded / Failed / Skipped / Total] 415 / 227 / 17 / 659:  66%|██████▌   | 660/1000 [1:01:07<31:29,  5.56s/it][Succeeded / Failed / Skipped / Total] 416 / 227 / 17 / 660:  66%|██████▌   | 660/1000 [1:01:07<31:29,  5.56s/it][Succeeded / Failed / Skipped / Total] 416 / 227 / 17 / 660:  66%|██████▌   | 661/1000 [1:01:08<31:21,  5.55s/it][Succeeded / Failed / Skipped / Total] 417 / 227 / 17 / 661:  66%|██████▌   | 661/1000 [1:01:08<31:21,  5.55s/it][Succeeded / Failed / Skipped / Total] 417 / 227 / 17 / 661:  66%|██████▌   | 662/1000 [1:01:15<31:16,  5.55s/it]Get the cost of object transformation between sourceClass and destinationClass . --> Calculate distance between sourceClass and destinationClass --> Socre: 1.0

[[[[Adv]]]]: private static float [[getObjectTransformationCost]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float [[cost]] = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination [[class]] is [[null]], we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { [[cost]] += 1.5f ; } return [[cost]] ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .

[[[[Adv]]]]: private static float [[bathhouse]] ( Class < ? > srcClass , final Class < ? > destClass ) { if ( destClass . isPrimitive ( ) ) { return getPrimitivePromotionCost ( srcClass , destClass ) ; } float [[tuna]] = 0.0f ; while ( srcClass != null && ! destClass . equals ( srcClass ) ) { if ( destClass . isInterface ( ) && ClassUtils . isAssignable ( srcClass , destClass ) ) { * If the destination [[shanna]] is [[schoo]], we've traveled all the way up to * an Object match. We'll penalize this by adding 1.5 to the cost. */ if ( srcClass == null ) { [[tuna]] += 1.5f ; } return [[tuna]] ; }
[[[[Nl]]]]: Gets the number of steps required needed to turn the source class into the destination class . This represents the number of steps in the object hierarchy graph .
--------------------------------------------- Result 659 ---------------------------------------------
Cast a numeric value to the specified type . --> Cast double . --> Socre: 1.0

[[[[Adv]]]]: public void cast_numeric ( Type [[from]] , Type to ) { if ( [[from]] != to ) { if ( [[from]] == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( [[from]] == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( [[from]] == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another

[[[[Adv]]]]: public void cast_numeric ( Type [[denominations]] , Type to ) { if ( [[denominations]] != to ) { if ( [[denominations]] == Type . DOUBLE_TYPE ) { if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . D2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . D2L ) ; } else { mv . visitInsn ( Constants . D2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( [[denominations]] == Type . FLOAT_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . F2D ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . F2L ) ; } else { mv . visitInsn ( Constants . F2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else if ( [[denominations]] == Type . LONG_TYPE ) { if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . L2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . L2F ) ; } else { mv . visitInsn ( Constants . L2I ) ; cast_numeric ( Type . INT_TYPE , to ) ; } } else { if ( to == Type . BYTE_TYPE ) { mv . visitInsn ( Constants . I2B ) ; } else if ( to == Type . CHAR_TYPE ) { mv . visitInsn ( Constants . I2C ) ; } else if ( to == Type . DOUBLE_TYPE ) { mv . visitInsn ( Constants . I2D ) ; } else if ( to == Type . FLOAT_TYPE ) { mv . visitInsn ( Constants . I2F ) ; } else if ( to == Type . LONG_TYPE ) { mv . visitInsn ( Constants . I2L ) ; } else if ( to == Type . SHORT_TYPE ) { mv . visitInsn ( Constants . I2S ) ; } } } }
[[[[Nl]]]]: Casts from one primitive numeric type to another
--------------------------------------------- Result 660 ---------------------------------------------
implements the null operator --> implement NullPointer --> Socre: 1.0

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label [[bothNull]] ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( [[bothNull]] ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .

[[[[Adv]]]]: private static void nullcmp ( CodeEmitter e , Label oneNull , Label [[buddy]] ) { e . dup2 ( ) ; Label nonNull = e . make_label ( ) ; Label oneNullHelper = e . make_label ( ) ; Label end = e . make_label ( ) ; e . ifnonnull ( nonNull ) ; e . ifnonnull ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( [[buddy]] ) ; e . mark ( nonNull ) ; e . ifnull ( oneNullHelper ) ; e . goTo ( end ) ; e . mark ( oneNullHelper ) ; e . pop2 ( ) ; e . goTo ( oneNull ) ; e . mark ( end ) ; }
[[[[Nl]]]]: If both objects on the top of the stack are non - null does nothing . If one is null or both are null both are popped off and execution branches to the respective label .
--------------------------------------------- Result 661 ---------------------------------------------
Unbox a type or zero . --> Marks a Fishery type --> Socre: 1.0

[[[[Adv]]]]: public void [[unbox_or_zero]] ( Type [[type]] ) { if ( TypeUtils . isPrimitive ( [[type]] ) ) { if ( [[type]] != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( [[type]] ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( [[type]] ) ; mark ( end ) ; } } else { checkcast ( [[type]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .

[[[[Adv]]]]: public void [[cielo]] ( Type [[fishery]] ) { if ( TypeUtils . isPrimitive ( [[fishery]] ) ) { if ( [[fishery]] != Type . VOID_TYPE ) { Label nonNull = make_label ( ) ; Label end = make_label ( ) ; dup ( ) ; ifnonnull ( nonNull ) ; pop ( ) ; zero_or_null ( [[fishery]] ) ; goTo ( end ) ; mark ( nonNull ) ; unbox ( [[fishery]] ) ; mark ( end ) ; } } else { checkcast ( [[fishery]] ) ; } }
[[[[Nl]]]]: Unboxes the object on the top of the stack . If the object is null the unboxed primitive value becomes zero .
--------------------------------------------- Result 662 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 418 / 227 / 17 / 662:  66%|██████▌   | 662/1000 [1:01:15<31:16,  5.55s/it][Succeeded / Failed / Skipped / Total] 418 / 227 / 17 / 662:  66%|██████▋   | 663/1000 [1:01:28<31:14,  5.56s/it][Succeeded / Failed / Skipped / Total] 419 / 227 / 17 / 663:  66%|██████▋   | 663/1000 [1:01:28<31:14,  5.56s/it][Succeeded / Failed / Skipped / Total] 419 / 227 / 17 / 663:  66%|██████▋   | 664/1000 [1:01:28<31:06,  5.56s/it][Succeeded / Failed / Skipped / Total] 419 / 227 / 18 / 664:  66%|██████▋   | 664/1000 [1:01:28<31:06,  5.56s/it][Succeeded / Failed / Skipped / Total] 419 / 227 / 18 / 664:  66%|██████▋   | 665/1000 [1:01:30<30:58,  5.55s/it][Succeeded / Failed / Skipped / Total] 420 / 227 / 18 / 665:  66%|██████▋   | 665/1000 [1:01:30<30:58,  5.55s/it][Succeeded / Failed / Skipped / Total] 420 / 227 / 18 / 665:  67%|██████▋   | 666/1000 [1:01:30<30:50,  5.54s/it][Succeeded / Failed / Skipped / Total] 420 / 227 / 19 / 666:  67%|██████▋   | 666/1000 [1:01:30<30:50,  5.54s/it][Succeeded / Failed / Skipped / Total] 420 / 227 / 19 / 666:  67%|██████▋   | 667/1000 [1:01:42<30:48,  5.55s/it][Succeeded / Failed / Skipped / Total] 421 / 227 / 19 / 667:  67%|██████▋   | 667/1000 [1:01:42<30:48,  5.55s/it][Succeeded / Failed / Skipped / Total] 421 / 227 / 19 / 667:  67%|██████▋   | 668/1000 [1:01:42<30:40,  5.54s/it][Succeeded / Failed / Skipped / Total] 421 / 227 / 20 / 668:  67%|██████▋   | 668/1000 [1:01:42<30:40,  5.54s/it][Succeeded / Failed / Skipped / Total] 421 / 227 / 20 / 668:  67%|██████▋   | 669/1000 [1:01:43<30:32,  5.54s/it]Returns all methods in the superclass . --> traverses class --> Socre: 0.9999999999820136

[[[[Adv]]]]: public static void [[getMethods]] ( Class superclass , Class [ ] interfaces , List methods ) { [[getMethods]] ( superclass , interfaces , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .

[[[[Adv]]]]: public static void [[crore]] ( Class superclass , Class [ ] interfaces , List methods ) { [[crore]] ( superclass , interfaces , methods , null , null ) ; }
[[[[Nl]]]]: Finds all of the methods that will be extended by an Enhancer - generated class using the specified superclass and interfaces . This can be useful in building a list of Callback objects . The methods are added to the end of the given list . Due to the subclassing nature of the classes generated by Enhancer the methods are guaranteed to be non - static non - final and non - private . Each method signature will only occur once even if it occurs in multiple classes .
--------------------------------------------- Result 663 ---------------------------------------------
Sets the class . --> setter for superclass --> Socre: 1.0

[[[[Adv]]]]: public void [[setSuperclass]] ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . [[superclass]] = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .

[[[[Adv]]]]: public void [[govind]] ( Class superclass ) { if ( superclass != null && superclass . equals ( Object . class ) ) { superclass = null ; } this . [[abetting]] = superclass ; }
[[[[Nl]]]]: Set the class which the generated class will extend . The class must not be declared as final and must have a non - private no - argument constructor .
--------------------------------------------- Result 664 ---------------------------------------------
Gets the field with the given names . --> [[[SKIPPED]]]

[[[[Adv]]]]: private void getField ( String [ ] names ) throws Exception { final CodeEmitter e = begin_method ( Constants . ACC_PUBLIC , PROVIDER_GET , null ) ; e . load_this ( ) ; e . load_arg ( 0 ) ; EmitUtils . string_switch ( e , names , Constants . SWITCH_STYLE_HASH , new ObjectSwitchCallback ( ) { public void processCase ( Object key , Label end ) { Type type = ( Type ) fields . get ( key ) ; e . getfield ( ( String ) key ) ; e . box ( type ) ; e . return_value ( ) ; } public void processDefault ( ) { e . throw_exception ( ILLEGAL_ARGUMENT_EXCEPTION , "Unknown field name" ) ; } } ) ; e . end_method ( ) ; }
[[[[Nl]]]]: to avoid JVM hashcode implementation incompatibilities
--------------------------------------------- Result 665 ---------------------------------------------
Process an array . --> implemented interface --> Socre: 1.0

[[[[Adv]]]]: public static void [[process_array]] ( CodeEmitter e , Type [[type]] , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( [[type]] ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( componentType ) ; callback . processElement ( componentType ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .

[[[[Adv]]]]: public static void [[swimsuits]] ( CodeEmitter e , Type [[desire]] , ProcessArrayCallback callback ) { Type componentType = TypeUtils . getComponentType ( [[desire]] ) ; Local array = e . make_local ( ) ; Local loopvar = e . make_local ( Type . INT_TYPE ) ; Label loopbody = e . make_label ( ) ; Label checkloop = e . make_label ( ) ; e . store_local ( array ) ; e . push ( 0 ) ; e . store_local ( loopvar ) ; e . goTo ( checkloop ) ; e . mark ( loopbody ) ; e . load_local ( array ) ; e . load_local ( loopvar ) ; e . array_load ( componentType ) ; callback . processElement ( componentType ) ; e . iinc ( loopvar , 1 ) ; e . mark ( checkloop ) ; e . load_local ( loopvar ) ; e . load_local ( array ) ; e . arraylength ( ) ; e . if_icmp ( e . LT , loopbody ) ; }
[[[[Nl]]]]: Process an array on the stack . Assumes the top item on the stack is an array of the specified type . For each element in the array puts the element on the stack and triggers the callback .
--------------------------------------------- Result 666 ---------------------------------------------
Calculates the cardinality of the value --> [[[SKIPPED]]]

[[[[Adv]]]]: public int cardinality ( ) { int w = value ; int c = 0 ; while ( w != 0 ) { c += T [ w & 255 ] ; w >>= 8 ; } return c ; }
[[[[Nl]]]]: If bit 31 is set then this method results in an infinite loop .
--------------------------------------------- Result 667 ---------------------------------------------
Add a method . --> x Xalan --> Socre: 1.0

[[[[Adv]]]]: public void [[add]] ( Method [[method]] ) { [[add]] ( ReflectUtils . getSignature ( [[method]] ) , ReflectUtils . getExceptionTypes ( [[method]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .

[[[[Adv]]]]: public void [[xixi]] ( Method [[academy]] ) { [[xixi]] ( ReflectUtils . getSignature ( [[academy]] ) , ReflectUtils . getExceptionTypes ( [[academy]] ) ) ; }
[[[[Nl]]]]: Add a method signature to the interface . The method modifiers are ignored since interface methods are by definition abstract and public .
--------------------------------------------- Result 668 ---------------------------------------------
Finds the methods in a given array . --> [[[SKIPPED]]]

[[[[Adv]]]]: public static Method [ ] findMethods ( String [ ] namesAndDescriptors , Method [ ] methods ) { Map map = new HashMap ( ) ; for ( int i = 0 ; i < methods . length ; i ++ ) { Method method = methods [ i ] ; map . put ( method . getName ( ) + Type . getMethodDescriptor ( method ) , method ) ; } Method [ ] result = new Method [ namesAndDescriptors . length / 2 ] ; for ( int i = 0 ; i < result . length ; i ++ ) { result [ i ] = ( Method ) map . get ( namesAndDescriptors [ i * 2 ] + namesAndDescriptors [ i * 2 + 1 ] ) ; if ( result [ i ] == null ) {
[[[[Nl]]]]: used by MethodInterceptorGenerated generated code
--------------------------------------------- Result 669 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 421 / 228 / 20 / 669:  67%|██████▋   | 669/1000 [1:01:43<30:32,  5.54s/it][Succeeded / Failed / Skipped / Total] 421 / 228 / 20 / 669:  67%|██████▋   | 670/1000 [1:01:44<30:24,  5.53s/it][Succeeded / Failed / Skipped / Total] 422 / 228 / 20 / 670:  67%|██████▋   | 670/1000 [1:01:44<30:24,  5.53s/it][Succeeded / Failed / Skipped / Total] 422 / 228 / 20 / 670:  67%|██████▋   | 671/1000 [1:01:59<30:23,  5.54s/it][Succeeded / Failed / Skipped / Total] 423 / 228 / 20 / 671:  67%|██████▋   | 671/1000 [1:01:59<30:23,  5.54s/it][Succeeded / Failed / Skipped / Total] 423 / 228 / 20 / 671:  67%|██████▋   | 672/1000 [1:02:04<30:17,  5.54s/it][Succeeded / Failed / Skipped / Total] 424 / 228 / 20 / 672:  67%|██████▋   | 672/1000 [1:02:04<30:17,  5.54s/it][Succeeded / Failed / Skipped / Total] 424 / 228 / 20 / 672:  67%|██████▋   | 673/1000 [1:02:08<30:11,  5.54s/it][Succeeded / Failed / Skipped / Total] 425 / 228 / 20 / 673:  67%|██████▋   | 673/1000 [1:02:08<30:11,  5.54s/it][Succeeded / Failed / Skipped / Total] 425 / 228 / 20 / 673:  67%|██████▋   | 674/1000 [1:02:11<30:04,  5.54s/it][Succeeded / Failed / Skipped / Total] 426 / 228 / 20 / 674:  67%|██████▋   | 674/1000 [1:02:11<30:04,  5.54s/it][Succeeded / Failed / Skipped / Total] 426 / 228 / 20 / 674:  68%|██████▊   | 675/1000 [1:02:12<29:57,  5.53s/it][Succeeded / Failed / Skipped / Total] 427 / 228 / 20 / 675:  68%|██████▊   | 675/1000 [1:02:12<29:57,  5.53s/it][Succeeded / Failed / Skipped / Total] 427 / 228 / 20 / 675:  68%|██████▊   | 676/1000 [1:02:20<29:52,  5.53s/it][Succeeded / Failed / Skipped / Total] 428 / 228 / 20 / 676:  68%|██████▊   | 676/1000 [1:02:20<29:52,  5.53s/it][Succeeded / Failed / Skipped / Total] 428 / 228 / 20 / 676:  68%|██████▊   | 677/1000 [1:02:22<29:45,  5.53s/it]Filter the constructors in the given class . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[filterConstructors]] ( Class sc , List [[constructors]] ) { CollectionUtils . filter ( [[constructors]] , new VisibilityPredicate ( sc , True ) ) ; if ( [[constructors]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .

[[[[Adv]]]]: protected void [[bathhouse]] ( Class sc , List [[approached]] ) { CollectionUtils . filter ( [[approached]] , new VisibilityPredicate ( sc , True ) ) ; if ( [[approached]] . size ( ) == 0 ) throw new IllegalArgumentException ( "No visible constructors in " + sc ) ; }
[[[[Nl]]]]: Filter the list of constructors from the superclass . The constructors which remain will be included in the generated class . The default implementation is to filter out all private constructors but subclasses may extend Enhancer to override this behavior .
--------------------------------------------- Result 670 ---------------------------------------------
Sets the naming policy . --> Set lasher --> Socre: 1.0

[[[[Adv]]]]: public void [[setNamingPolicy]] ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . [[namingPolicy]] = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .

[[[[Adv]]]]: public void [[lasher]] ( NamingPolicy namingPolicy ) { if ( namingPolicy == null ) namingPolicy = DefaultNamingPolicy . INSTANCE ; this . [[andree]] = namingPolicy ; }
[[[[Nl]]]]: Override the default naming policy .
--------------------------------------------- Result 671 ---------------------------------------------
Resolve child path . --> zURI --> Socre: 1.0

[[[[Adv]]]]: public static Path [[resolve]] ( final Path [[base]] , String [[child]] ) { if ( StringUtil . startsWithChar ( [[child]] , File . separatorChar ) ) { [[child]] = [[child]] . substring ( 1 ) ; } return [[base]] . resolve ( [[child]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .

[[[[Adv]]]]: public static Path [[zuri]] ( final Path [[buttin]] , String [[address]] ) { if ( StringUtil . startsWithChar ( [[address]] , File . separatorChar ) ) { [[address]] = [[address]] . substring ( 1 ) ; } return [[buttin]] . resolve ( [[address]] ) ; }
[[[[Nl]]]]: Resolves subpath in safer way . For some reason if child starts with a separator it gets resolved as a full path ignoring the base . This method acts different .
--------------------------------------------- Result 672 ---------------------------------------------
Sets the request host . --> Bring to the given bus --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[host]] ( final String [[host]] ) { this . [[host]] = [[host]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[host]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .

[[[[Adv]]]]: public HttpRequest [[bring]] ( final String [[boulevard]] ) { this . [[gladiator]] = [[bring]] ; if ( headers . contains ( HEADER_HOST ) ) { headerOverwrite ( HEADER_HOST , [[bring]] ) ; } return this ; }
[[[[Nl]]]]: Sets request host name .
--------------------------------------------- Result 673 ---------------------------------------------
Reads a string from a file . --> Returns a human - readable string --> Socre: 1.0

[[[[Adv]]]]: public static String [[readString]] ( final Path [[path]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[path]] , StandardCharsets . UTF_8 ) ) { StringWriter [[writer]] = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .

[[[[Adv]]]]: public static String [[inaugural]] ( final Path [[awaited]] ) throws IOException { try ( BufferedReader reader = Files . newBufferedReader ( [[awaited]] , StandardCharsets . UTF_8 ) ) { StringWriter [[eartha]] = new StringWriter ( ) ;
[[[[Nl]]]]: Reads path content .
--------------------------------------------- Result 674 ---------------------------------------------
Start a connect request --> Connects to the given destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[connect]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a CONNECT request .

[[[[Adv]]]]: public static HttpRequest [[ayodhya]] ( final String destination ) { return new HttpRequest ( ) . method ( HttpMethod . CONNECT ) . set ( destination ) ; }
[[[[Nl]]]]: Builds a CONNECT request .
--------------------------------------------- Result 675 ---------------------------------------------
Resolves all bridge references . --> Determine the martinique classloader --> Socre: 1.0

[[[[Adv]]]]: public Map [[resolveAll]] ( ) { Map [[resolved]] = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set [[bridges]] = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return [[resolved]] ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[bridges]] , [[resolved]] ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return [[resolved]] ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .

[[[[Adv]]]]: public Map [[actin]] ( ) { Map [[martinique]] = new HashMap ( ) ; for ( Iterator entryIter = declToBridge . entrySet ( ) . iterator ( ) ; entryIter . hasNext ( ) ; ) { Map . Entry entry = ( Map . Entry ) entryIter . next ( ) ; Class owner = ( Class ) entry . getKey ( ) ; Set [[gazelles]] = ( Set ) entry . getValue ( ) ; try { InputStream is = classLoader . getResourceAsStream ( owner . getName ( ) . replace ( ' ' , ' ' ) + ".class" ) ; if ( is == null ) { return [[martinique]] ; } try { new ClassReader ( is ) . accept ( new BridgedFinder ( [[gazelles]] , [[martinique]] ) , ClassReader . SKIP_FRAMES | ClassReader . SKIP_DEBUG ) ; } finally { is . close ( ) ; } } catch ( IOException ignored ) { } } return [[martinique]] ; }
[[[[Nl]]]]: Finds all bridge methods that are being called with invokespecial & returns them .
--------------------------------------------- Result 676 ---------------------------------------------
Start HTTP GET request --> Create HttpRequest with Http method --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[get]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a GET request .

[[[[Adv]]]]: public static HttpRequest [[hapi]] ( final String [[swapped]] ) { return new HttpRequest ( ) . method ( HttpMethod . GET ) . set ( [[swapped]] ) ; }
[[[[Nl]]]]: Builds a GET request .
--------------------------------------------- Result 677 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 429 / 228 / 20 / 677:  68%|██████▊   | 677/1000 [1:02:22<29:45,  5.53s/it][Succeeded / Failed / Skipped / Total] 429 / 228 / 20 / 677:  68%|██████▊   | 678/1000 [1:02:24<29:38,  5.52s/it][Succeeded / Failed / Skipped / Total] 429 / 229 / 20 / 678:  68%|██████▊   | 678/1000 [1:02:24<29:38,  5.52s/it][Succeeded / Failed / Skipped / Total] 429 / 229 / 20 / 678:  68%|██████▊   | 679/1000 [1:02:34<29:34,  5.53s/it][Succeeded / Failed / Skipped / Total] 429 / 230 / 20 / 679:  68%|██████▊   | 679/1000 [1:02:34<29:34,  5.53s/it][Succeeded / Failed / Skipped / Total] 429 / 230 / 20 / 679:  68%|██████▊   | 680/1000 [1:02:36<29:27,  5.52s/it][Succeeded / Failed / Skipped / Total] 429 / 231 / 20 / 680:  68%|██████▊   | 680/1000 [1:02:36<29:27,  5.52s/it][Succeeded / Failed / Skipped / Total] 429 / 231 / 20 / 680:  68%|██████▊   | 681/1000 [1:02:37<29:19,  5.52s/it][Succeeded / Failed / Skipped / Total] 429 / 232 / 20 / 681:  68%|██████▊   | 681/1000 [1:02:37<29:19,  5.52s/it][Succeeded / Failed / Skipped / Total] 429 / 232 / 20 / 681:  68%|██████▊   | 682/1000 [1:02:47<29:16,  5.52s/it][Succeeded / Failed / Skipped / Total] 429 / 233 / 20 / 682:  68%|██████▊   | 682/1000 [1:02:47<29:16,  5.52s/it][Succeeded / Failed / Skipped / Total] 429 / 233 / 20 / 682:  68%|██████▊   | 683/1000 [1:02:50<29:10,  5.52s/it][Succeeded / Failed / Skipped / Total] 430 / 233 / 20 / 683:  68%|██████▊   | 683/1000 [1:02:50<29:10,  5.52s/it][Succeeded / Failed / Skipped / Total] 430 / 233 / 20 / 683:  68%|██████▊   | 684/1000 [1:02:51<29:02,  5.51s/it][Succeeded / Failed / Skipped / Total] 431 / 233 / 20 / 684:  68%|██████▊   | 684/1000 [1:02:51<29:02,  5.51s/it][Succeeded / Failed / Skipped / Total] 432 / 233 / 20 / 685:  68%|██████▊   | 685/1000 [1:02:51<28:54,  5.51s/it][Succeeded / Failed / Skipped / Total] 432 / 233 / 20 / 685:  69%|██████▊   | 686/1000 [1:02:58<28:49,  5.51s/it][Succeeded / Failed / Skipped / Total] 433 / 233 / 20 / 686:  69%|██████▊   | 686/1000 [1:02:58<28:49,  5.51s/it][Succeeded / Failed / Skipped / Total] 434 / 233 / 20 / 687:  69%|██████▊   | 687/1000 [1:03:05<28:44,  5.51s/it][Succeeded / Failed / Skipped / Total] 434 / 233 / 20 / 687:  69%|██████▉   | 688/1000 [1:03:05<28:36,  5.50s/it]Create a request with the given method and destination . --> Create HttpRequest with destination --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[create]] ( final String [[method]] , final String destination ) { return new HttpRequest ( ) . [[method]] ( [[method]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .

[[[[Adv]]]]: public static HttpRequest [[shakin]] ( final String [[duggie]] , final String destination ) { return new HttpRequest ( ) . [[duggie]] ( [[duggie]] . toUpperCase ( ) ) . set ( destination ) ; }
[[[[Nl]]]]: Generic request builder usually used when method is a variable . Otherwise use one of the other static request builder methods .
--------------------------------------------- Result 678 ---------------------------------------------
Create a POST request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[post]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a POST request .

[[[[Adv]]]]: public static HttpRequest [[buckwheat]] ( final String [[youth]] ) { return new HttpRequest ( ) . method ( HttpMethod . POST ) . set ( [[youth]] ) ; }
[[[[Nl]]]]: Builds a POST request .
--------------------------------------------- Result 679 ---------------------------------------------
Start HTTP PATCH request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[patch]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .

[[[[Adv]]]]: public static HttpRequest [[coding]] ( final String [[tween]] ) { return new HttpRequest ( ) . method ( HttpMethod . PATCH ) . set ( [[tween]] ) ; }
[[[[Nl]]]]: Builds a PATCH request .
--------------------------------------------- Result 680 ---------------------------------------------
Start a HEAD request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[head]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .

[[[[Adv]]]]: public static HttpRequest [[glamour]] ( final String [[cameroon]] ) { return new HttpRequest ( ) . method ( HttpMethod . HEAD ) . set ( [[cameroon]] ) ; }
[[[[Nl]]]]: Builds a HEAD request .
--------------------------------------------- Result 681 ---------------------------------------------
Create a DELETE request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[delete]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .

[[[[Adv]]]]: public static HttpRequest [[anguished]] ( final String [[sucking]] ) { return new HttpRequest ( ) . method ( HttpMethod . DELETE ) . set ( [[sucking]] ) ; }
[[[[Nl]]]]: Builds a DELETE request .
--------------------------------------------- Result 682 ---------------------------------------------
Request a TRACE request --> [[[FAILED]]]

[[[[Adv]]]]: public static HttpRequest [[trace]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .

[[[[Adv]]]]: public static HttpRequest [[apples]] ( final String [[slander]] ) { return new HttpRequest ( ) . method ( HttpMethod . TRACE ) . set ( [[slander]] ) ; }
[[[[Nl]]]]: Builds a TRACE request .
--------------------------------------------- Result 683 ---------------------------------------------
Sets the request path . --> set albanyar --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[path]] ( String [[path]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .

[[[[Adv]]]]: public HttpRequest [[caspar]] ( String [[albany]] ) {
[[[[Nl]]]]: Sets request path . Query string is allowed . Adds a slash if path doesn t start with one . Query will be stripped out from the path . Previous query is discarded .
--------------------------------------------- Result 684 ---------------------------------------------
Create a PUT request --> Perform HTTP POST operation --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[put]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds a PUT request .

[[[[Adv]]]]: public static HttpRequest [[ardo]] ( final String [[congregated]] ) { return new HttpRequest ( ) . method ( HttpMethod . PUT ) . set ( [[congregated]] ) ; }
[[[[Nl]]]]: Builds a PUT request .
--------------------------------------------- Result 685 ---------------------------------------------
Start OPTIONS request --> Start a correlation --> Socre: 1.0

[[[[Adv]]]]: public static HttpRequest [[options]] ( final String [[destination]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[destination]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .

[[[[Adv]]]]: public static HttpRequest [[correlation]] ( final String [[bjorn]] ) { return new HttpRequest ( ) . method ( HttpMethod . OPTIONS ) . set ( [[bjorn]] ) ; }
[[[[Nl]]]]: Builds an OPTIONS request .
--------------------------------------------- Result 686 ---------------------------------------------
Set query string . --> Set pershing request --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[queryString]] ( final String queryString , final boolean decode ) { this . query = HttpUtil . parseQuery ( [[queryString]] , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .

[[[[Adv]]]]: public HttpRequest [[pershing]] ( final String queryString , final boolean decode ) { this . query = HttpUtil . parseQuery ( [[pershing]] , decode ) ; return this ; }
[[[[Nl]]]]: Sets query from provided query string . Previous query values are discarded .
--------------------------------------------- Result 687 ---------------------------------------------
Get the query string . --> Get a list of drunks --> Socre: 1.0

[[[[Adv]]]]: public String [[queryString]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .

[[[[Adv]]]]: public String [[drunks]] ( ) { if ( query == null ) { return StringPool . EMPTY ; } return HttpUtil . buildQuery ( query , queryEncoding ) ; }
[[[[Nl]]]]: Generates query string . All values are URL encoded .
--------------------------------------------- Result 688 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 435 / 233 / 20 / 688:  69%|██████▉   | 688/1000 [1:03:05<28:36,  5.50s/it][Succeeded / Failed / Skipped / Total] 436 / 233 / 20 / 689:  69%|██████▉   | 689/1000 [1:03:17<28:34,  5.51s/it][Succeeded / Failed / Skipped / Total] 436 / 233 / 20 / 689:  69%|██████▉   | 690/1000 [1:03:19<28:27,  5.51s/it][Succeeded / Failed / Skipped / Total] 437 / 233 / 20 / 690:  69%|██████▉   | 690/1000 [1:03:19<28:27,  5.51s/it][Succeeded / Failed / Skipped / Total] 437 / 233 / 20 / 690:  69%|██████▉   | 691/1000 [1:03:25<28:21,  5.51s/it][Succeeded / Failed / Skipped / Total] 438 / 233 / 20 / 691:  69%|██████▉   | 691/1000 [1:03:25<28:21,  5.51s/it][Succeeded / Failed / Skipped / Total] 438 / 233 / 20 / 691:  69%|██████▉   | 692/1000 [1:03:27<28:14,  5.50s/it][Succeeded / Failed / Skipped / Total] 439 / 233 / 20 / 692:  69%|██████▉   | 692/1000 [1:03:27<28:14,  5.50s/it][Succeeded / Failed / Skipped / Total] 439 / 233 / 20 / 692:  69%|██████▉   | 693/1000 [1:03:33<28:09,  5.50s/it][Succeeded / Failed / Skipped / Total] 440 / 233 / 20 / 693:  69%|██████▉   | 693/1000 [1:03:33<28:09,  5.50s/it][Succeeded / Failed / Skipped / Total] 440 / 233 / 20 / 693:  69%|██████▉   | 694/1000 [1:03:36<28:02,  5.50s/it][Succeeded / Failed / Skipped / Total] 441 / 233 / 20 / 694:  69%|██████▉   | 694/1000 [1:03:36<28:02,  5.50s/it][Succeeded / Failed / Skipped / Total] 441 / 233 / 20 / 694:  70%|██████▉   | 695/1000 [1:03:45<27:58,  5.50s/it][Succeeded / Failed / Skipped / Total] 442 / 233 / 20 / 695:  70%|██████▉   | 695/1000 [1:03:45<27:58,  5.50s/it][Succeeded / Failed / Skipped / Total] 442 / 233 / 20 / 695:  70%|██████▉   | 696/1000 [1:03:48<27:52,  5.50s/it]Sets the cookies in the request . --> Replaces cookie with max age --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean [[first]] = True ; for ( Cookie cookie : REPLACEME0 ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! [[first]] ) { cookieString . append ( "; " ) ; } [[first]] = "[[False]]" != "[[False]]" ; cookieString . append ( cookie . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .

[[[[Adv]]]]: public HttpRequest REPLACEME0 ( final Cookie ... REPLACEME0 ) { if ( REPLACEME0 . length == 0 ) { return this ; } StringBuilder cookieString = new StringBuilder ( ) ; boolean [[bonneville]] = True ; for ( Cookie cookie : REPLACEME0 ) { Integer maxAge = cookie . getMaxAge ( ) ; if ( maxAge != null && maxAge . intValue ( ) == 0 ) { continue ; } if ( ! [[bonneville]] ) { cookieString . append ( "; " ) ; } [[bonneville]] = "[["Packin" != "Packin"]]" != "[["Packin" != "Packin"]]" ; cookieString . append ( cookie . getName ( ) ) ; cookieString . append ( ' ' ) ; cookieString . append ( cookie . getValue ( ) ) ; } headerOverwrite ( "cookie" , cookieString . toString ( ) ) ; return this ; }
[[[[Nl]]]]: Sets cookies to the request .
--------------------------------------------- Result 689 ---------------------------------------------
Add query map . --> Convenience method --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[query]] ( final Map < String , String > [[queryMap]] ) { for ( Map . Entry < String , String > [[entry]] : [[queryMap]] . entrySet ( ) ) { [[query]] . add ( [[entry]] . getKey ( ) , [[entry]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .

[[[[Adv]]]]: public HttpRequest [[creaky]] ( final Map < String , String > [[big]] ) { for ( Map . Entry < String , String > [[dinsmore]] : [[big]] . entrySet ( ) ) { [[creaky]] . add ( [[dinsmore]] . getKey ( ) , [[dinsmore]] . getValue ( ) ) ; } return this ; }
[[[[Nl]]]]: Adds all parameters from the provided map .
--------------------------------------------- Result 690 ---------------------------------------------
Returns the host url . --> for aborting --> Socre: 1.0

[[[[Adv]]]]: public String [[hostUrl]] ( ) { StringBand [[url]] = new StringBand ( 8 ) ; if ( protocol != null ) { [[url]] . append ( protocol ) ; [[url]] . append ( "://" ) ; } if ( host != null ) { [[url]] . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { [[url]] . append ( ' ' ) ; [[url]] . append ( port ) ; } return [[url]] . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .

[[[[Adv]]]]: public String [[aborting]] ( ) { StringBand [[carnations]] = new StringBand ( 8 ) ; if ( protocol != null ) { [[carnations]] . append ( protocol ) ; [[carnations]] . append ( "://" ) ; } if ( host != null ) { [[carnations]] . append ( host ) ; } if ( port != Defaults . DEFAULT_PORT ) { [[carnations]] . append ( ' ' ) ; [[carnations]] . append ( port ) ; } return [[carnations]] . toString ( ) ; }
[[[[Nl]]]]: Returns just host url without path and query .
--------------------------------------------- Result 691 ---------------------------------------------
Adds a query parameter to the request . --> Add named values --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[query]] ( final String name1 , final Object [[value1]] , final Object ... parameters ) { [[query]] ( name1 , [[value1]] == null ? null : [[value1]] . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; [[query]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .

[[[[Adv]]]]: public HttpRequest [[gallows]] ( final String name1 , final Object [[baloney]] , final Object ... parameters ) { [[gallows]] ( name1 , [[baloney]] == null ? null : [[baloney]] . toString ( ) ) ; for ( int i = 0 ; i < parameters . length ; i += 2 ) { String name = parameters [ i ] . toString ( ) ; String value = parameters [ i + 1 ] . toString ( ) ; [[gallows]] . add ( name , value ) ; } return this ; }
[[[[Nl]]]]: Adds many query parameters at once . Although it accepts objects each value will be converted to string .
--------------------------------------------- Result 692 ---------------------------------------------
Returns the buffer . --> Overrides default implementation --> Socre: 1.0

[[[[Adv]]]]: @ Override protected Buffer buffer ( final boolean [[fullRequest]] ) {
[[[[Nl]]]]: Prepares the request buffer .

[[[[Adv]]]]: @ Override protected Buffer buffer ( final boolean [[hopscotch]] ) {
[[[[Nl]]]]: Prepares the request buffer .
--------------------------------------------- Result 693 ---------------------------------------------
Execute and receive response . --> superclass method --> Socre: 1.0

[[[[Adv]]]]: public < [[R]] > [[R]] sendAndReceive ( final Function < HttpResponse , [[R]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .

[[[[Adv]]]]: public < [[oppress]] > [[oppress]] sendAndReceive ( final Function < HttpResponse , [[oppress]] > responseHandler ) { return responseHandler . apply ( send ( ) ) ; }
[[[[Nl]]]]: Syntax sugar .
--------------------------------------------- Result 694 ---------------------------------------------
Sets the host header . --> Overwrites the default HttpHeaders --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[setHostHeader]] ( ) { String [[hostPort]] = this . [[host]] ; if ( port != Defaults . DEFAULT_PORT ) { [[hostPort]] += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , [[hostPort]] ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .

[[[[Adv]]]]: public HttpRequest [[worse]] ( ) { String [[averill]] = this . [[frisian]] ; if ( port != Defaults . DEFAULT_PORT ) { [[averill]] += StringPool . COLON + port ; } headerOverwrite ( HEADER_HOST , [[averill]] ) ; return this ; }
[[[[Nl]]]]: Sets Host header from current host and port .
--------------------------------------------- Result 695 ---------------------------------------------
Remove range . --> Simplter method for SMEL2 --> Socre: 1.0

[[[[Adv]]]]: static Handler [[removeRange]] ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[removeRange]] ( firstHandler . nextHandler , start , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .

[[[[Adv]]]]: static Handler [[smelter]] ( final Handler firstHandler , final Label start , final Label end ) { if ( firstHandler == null ) { return null ; } else { firstHandler . nextHandler = [[smelter]] ( firstHandler . nextHandler , start , end ) ; } int handlerStart = firstHandler . startPc . bytecodeOffset ; int handlerEnd = firstHandler . endPc . bytecodeOffset ; int rangeStart = start . bytecodeOffset ; int rangeEnd = end == null ? Integer . MAX_VALUE : end . bytecodeOffset ;
[[[[Nl]]]]: Removes the range between start and end from the Handler list that begins with the given element .
--------------------------------------------- Result 696 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 443 / 233 / 20 / 696:  70%|██████▉   | 696/1000 [1:03:48<27:52,  5.50s/it][Succeeded / Failed / Skipped / Total] 443 / 233 / 20 / 696:  70%|██████▉   | 697/1000 [1:03:53<27:46,  5.50s/it][Succeeded / Failed / Skipped / Total] 444 / 233 / 20 / 697:  70%|██████▉   | 697/1000 [1:03:53<27:46,  5.50s/it][Succeeded / Failed / Skipped / Total] 444 / 233 / 20 / 697:  70%|██████▉   | 698/1000 [1:03:57<27:40,  5.50s/it][Succeeded / Failed / Skipped / Total] 444 / 234 / 20 / 698:  70%|██████▉   | 698/1000 [1:03:57<27:40,  5.50s/it][Succeeded / Failed / Skipped / Total] 444 / 234 / 20 / 698:  70%|██████▉   | 699/1000 [1:04:00<27:33,  5.49s/it][Succeeded / Failed / Skipped / Total] 445 / 234 / 20 / 699:  70%|██████▉   | 699/1000 [1:04:00<27:33,  5.49s/it][Succeeded / Failed / Skipped / Total] 445 / 234 / 20 / 699:  70%|███████   | 700/1000 [1:04:03<27:27,  5.49s/it][Succeeded / Failed / Skipped / Total] 445 / 235 / 20 / 700:  70%|███████   | 700/1000 [1:04:03<27:27,  5.49s/it][Succeeded / Failed / Skipped / Total] 445 / 235 / 20 / 700:  70%|███████   | 701/1000 [1:04:05<27:20,  5.49s/it][Succeeded / Failed / Skipped / Total] 445 / 236 / 20 / 701:  70%|███████   | 701/1000 [1:04:05<27:20,  5.49s/it][Succeeded / Failed / Skipped / Total] 445 / 236 / 20 / 701:  70%|███████   | 702/1000 [1:04:13<27:15,  5.49s/it][Succeeded / Failed / Skipped / Total] 445 / 237 / 20 / 702:  70%|███████   | 702/1000 [1:04:13<27:15,  5.49s/it][Succeeded / Failed / Skipped / Total] 445 / 237 / 20 / 702:  70%|███████   | 703/1000 [1:04:22<27:11,  5.49s/it][Succeeded / Failed / Skipped / Total] 446 / 237 / 20 / 703:  70%|███████   | 703/1000 [1:04:22<27:11,  5.49s/it][Succeeded / Failed / Skipped / Total] 446 / 237 / 20 / 703:  70%|███████   | 704/1000 [1:04:23<27:04,  5.49s/it][Succeeded / Failed / Skipped / Total] 446 / 238 / 20 / 704:  70%|███████   | 704/1000 [1:04:23<27:04,  5.49s/it][Succeeded / Failed / Skipped / Total] 446 / 238 / 20 / 704:  70%|███████   | 705/1000 [1:04:24<26:57,  5.48s/it]Sets the basic authentication header . --> Expect the specified username and password --> Socre: 1.0

[[[[Adv]]]]: public HttpRequest [[basicAuthentication]] ( final String username , final String password ) { if ( username != null && password != null ) { String [[data]] = username . concat ( StringPool . COLON ) . concat ( password ) ; String [[base64]] = Base64 . encodeToString ( [[data]] ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + [[base64]] ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .

[[[[Adv]]]]: public HttpRequest [[infect]] ( final String username , final String password ) { if ( username != null && password != null ) { String [[growers]] = username . concat ( StringPool . COLON ) . concat ( password ) ; String [[baywatch]] = Base64 . encodeToString ( [[growers]] ) ; headerOverwrite ( HEADER_AUTHORIZATION , "Basic " + [[baywatch]] ) ; } return this ; }
[[[[Nl]]]]: Enables basic authentication by adding required header .
--------------------------------------------- Result 697 ---------------------------------------------
Collect all action interceptors . --> Sort the stripes --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionInterceptors]] ( ) { final Collection < ? extends ActionInterceptor > [[interceptorValues]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[interceptorValues]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .

[[[[Adv]]]]: protected void [[ada]] ( ) { final Collection < ? extends ActionInterceptor > [[stripes]] = interceptorsManager . getAllInterceptors ( ) ; interceptors = new ArrayList <> ( ) ; interceptors . addAll ( [[stripes]] ) ; interceptors . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all interceptors .
--------------------------------------------- Result 698 ---------------------------------------------
Collects all action filters . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionFilters]] ( ) { final Collection < ? extends ActionFilter > [[filterValues]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[filterValues]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .

[[[[Adv]]]]: protected void [[skyrocketed]] ( ) { final Collection < ? extends ActionFilter > [[servos]] = filtersManager . getAllFilters ( ) ; filters = new ArrayList <> ( ) ; filters . addAll ( [[servos]] ) ; filters . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all filters .
--------------------------------------------- Result 699 ---------------------------------------------
Collects all action run executions . --> sort actions --> Socre: 1.0

[[[[Adv]]]]: protected void [[collectActionRuntimes]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .

[[[[Adv]]]]: protected void [[alyona]] ( ) { actions = actionsManager . getAllActionRuntimes ( ) ; actions . sort ( Comparator . comparing ( ActionRuntime :: getActionPath ) ) ; }
[[[[Nl]]]]: Collects all action runtime configurations .
--------------------------------------------- Result 700 ---------------------------------------------
Collect all action results . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[collectActionResults]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .

[[[[Adv]]]]: protected void [[illiterate]] ( ) { final Collection < ActionResult > resultsValues = resultsManager . getAllActionResults ( ) ; results = new ArrayList <> ( ) ; results . addAll ( resultsValues ) ; results . sort ( Comparator . comparing ( a -> a . getClass ( ) . getSimpleName ( ) ) ) ; }
[[[[Nl]]]]: Collects all action results .
--------------------------------------------- Result 701 ---------------------------------------------
Returns the length of the exception table . --> [[[FAILED]]]

[[[[Adv]]]]: static int [[getExceptionTableLength]] ( final Handler [[firstHandler]] ) { int length = 0 ; Handler [[handler]] = [[firstHandler]] ; while ( [[handler]] != null ) { length ++ ; [[handler]] = [[handler]] . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .

[[[[Adv]]]]: static int [[gerhard]] ( final Handler [[clues]] ) { int length = 0 ; Handler [[curie]] = [[clues]] ; while ( [[curie]] != null ) { length ++ ; [[curie]] = [[curie]] . nextHandler ; } return length ; }
[[[[Nl]]]]: Returns the number of elements of the Handler list that begins with the given element .
--------------------------------------------- Result 702 ---------------------------------------------
Returns the writer . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public PrintWriter [[getWriter]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .

[[[[Adv]]]]: @ Override public PrintWriter [[lópez]] ( ) { if ( writer == null ) { writer = new FastCharArrayWriter ( ) ; printWriter = new PrintWriter ( writer ) ; } return printWriter ; }
[[[[Nl]]]]: Returns buffered writer . Buffer will be created if not already used .
--------------------------------------------- Result 703 ---------------------------------------------
Sets a simple property . --> Eliminates the given BeanProperty --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[setSimpleProperty]] ( final BeanProperty bp , final Object value ) { Setter [[setter]] = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected void [[eubanks]] ( final BeanProperty bp , final Object value ) { Setter [[inexperienced]] = bp . getSetter ( isDeclared ) ;
[[[[Nl]]]]: Sets a value of simple property .
--------------------------------------------- Result 704 ---------------------------------------------
Gets the index property . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public < [[T]] > [[T]] getProperty ( final Object bean , final String name ) { BeanProperty [[beanProperty]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } else { try { resolveNestedProperties ( [[beanProperty]] ) ; return ( [[T]] ) getIndexProperty ( [[beanProperty]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .

[[[[Adv]]]]: @ Override public < [[wheaties]] > [[wheaties]] getProperty ( final Object bean , final String name ) { BeanProperty [[burgundy]] = new BeanProperty ( this , bean , name ) ; if ( ! isSilent ) { resolveNestedProperties ( [[burgundy]] ) ; return ( [[wheaties]] ) getIndexProperty ( [[burgundy]] ) ; } else { try { resolveNestedProperties ( [[burgundy]] ) ; return ( [[wheaties]] ) getIndexProperty ( [[burgundy]] ) ; } catch ( Exception ignore ) { return null ; } } }
[[[[Nl]]]]: Returns value of bean s property .
--------------------------------------------- Result 705 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 446 / 239 / 20 / 705:  70%|███████   | 705/1000 [1:04:24<26:57,  5.48s/it][Succeeded / Failed / Skipped / Total] 446 / 239 / 20 / 705:  71%|███████   | 706/1000 [1:04:29<26:51,  5.48s/it][Succeeded / Failed / Skipped / Total] 447 / 239 / 20 / 706:  71%|███████   | 706/1000 [1:04:29<26:51,  5.48s/it][Succeeded / Failed / Skipped / Total] 447 / 239 / 20 / 706:  71%|███████   | 707/1000 [1:04:39<26:47,  5.49s/it][Succeeded / Failed / Skipped / Total] 448 / 239 / 20 / 707:  71%|███████   | 707/1000 [1:04:39<26:47,  5.49s/it][Succeeded / Failed / Skipped / Total] 448 / 239 / 20 / 707:  71%|███████   | 708/1000 [1:04:45<26:42,  5.49s/it][Succeeded / Failed / Skipped / Total] 449 / 239 / 20 / 708:  71%|███████   | 708/1000 [1:04:45<26:42,  5.49s/it][Succeeded / Failed / Skipped / Total] 449 / 239 / 20 / 708:  71%|███████   | 709/1000 [1:04:45<26:34,  5.48s/it][Succeeded / Failed / Skipped / Total] 450 / 239 / 20 / 709:  71%|███████   | 709/1000 [1:04:45<26:34,  5.48s/it][Succeeded / Failed / Skipped / Total] 450 / 239 / 20 / 709:  71%|███████   | 710/1000 [1:04:49<26:28,  5.48s/it][Succeeded / Failed / Skipped / Total] 450 / 240 / 20 / 710:  71%|███████   | 710/1000 [1:04:49<26:28,  5.48s/it][Succeeded / Failed / Skipped / Total] 450 / 240 / 20 / 710:  71%|███████   | 711/1000 [1:05:01<26:25,  5.49s/it][Succeeded / Failed / Skipped / Total] 451 / 240 / 20 / 711:  71%|███████   | 711/1000 [1:05:01<26:25,  5.49s/it][Succeeded / Failed / Skipped / Total] 451 / 240 / 20 / 711:  71%|███████   | 712/1000 [1:05:02<26:18,  5.48s/it][Succeeded / Failed / Skipped / Total] 451 / 241 / 20 / 712:  71%|███████   | 712/1000 [1:05:02<26:18,  5.48s/it][Succeeded / Failed / Skipped / Total] 451 / 241 / 20 / 712:  71%|███████▏  | 713/1000 [1:05:08<26:13,  5.48s/it][Succeeded / Failed / Skipped / Total] 452 / 241 / 20 / 713:  71%|███████▏  | 713/1000 [1:05:08<26:13,  5.48s/it][Succeeded / Failed / Skipped / Total] 452 / 241 / 20 / 713:  71%|███████▏  | 714/1000 [1:05:12<26:07,  5.48s/it][Succeeded / Failed / Skipped / Total] 452 / 242 / 20 / 714:  71%|███████▏  | 714/1000 [1:05:12<26:07,  5.48s/it][Succeeded / Failed / Skipped / Total] 452 / 242 / 20 / 714:  72%|███████▏  | 715/1000 [1:05:16<26:01,  5.48s/it]Extracts the property name from the property name --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public String extractThisReference ( final String propertyName ) { int [[ndx]] = StringUtil . indexOfChars ( propertyName , INDEX_CHARS ) ; if ( [[ndx]] == - 1 ) { return propertyName ; } return propertyName . substring ( 0 , [[ndx]] ) ; }
[[[[Nl]]]]: Extract the first name of this reference .

[[[[Adv]]]]: @ Override public String extractThisReference ( final String propertyName ) { int [[hydraulic]] = StringUtil . indexOfChars ( propertyName , INDEX_CHARS ) ; if ( [[hydraulic]] == - 1 ) { return propertyName ; } return propertyName . substring ( 0 , [[hydraulic]] ) ; }
[[[[Nl]]]]: Extract the first name of this reference .
--------------------------------------------- Result 706 ---------------------------------------------
Get object reference by name . --> Get belief by name --> Socre: 1.0

[[[[Adv]]]]: public Object [[getObjectReference]] ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .

[[[[Adv]]]]: public Object [[belief]] ( final String name ) { if ( objectRefs == null ) { return null ; } return objectRefs . get ( name ) ; }
[[[[Nl]]]]: Returns object reference .
--------------------------------------------- Result 707 ---------------------------------------------
Sets the object reference . --> Register lucretia with lucretia --> Socre: 1.0

[[[[Adv]]]]: public void [[setObjectReference]] ( final String [[name]] , final Object [[object]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[name]] , [[object]] ) ; }
[[[[Nl]]]]: Saves object reference .

[[[[Adv]]]]: public void [[lucretia]] ( final String [[bantams]] , final Object [[dorsal]] ) { if ( objectRefs == null ) { objectRefs = new HashMap <> ( ) ; } objectRefs . put ( [[bantams]] , [[dorsal]] ) ; }
[[[[Nl]]]]: Saves object reference .
--------------------------------------------- Result 708 ---------------------------------------------
Find a table descriptor by column ref . --> Return the crest with the given property name --> Socre: 1.0

[[[[Adv]]]]: public DbEntityDescriptor [[findTableDescriptorByColumnRef]] ( final String [[columnRef]] ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( [[columnRef]] ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .

[[[[Adv]]]]: public DbEntityDescriptor [[crest]] ( final String [[adex]] ) { for ( Map . Entry < String , TableRefData > entry : tableRefs . entrySet ( ) ) { DbEntityDescriptor ded = entry . getValue ( ) . desc ; if ( ded . findByPropertyName ( [[adex]] ) != null ) { return ded ; } } return null ; }
[[[[Nl]]]]: Finds entity descriptor of a table that contains provided column reference .
--------------------------------------------- Result 709 ---------------------------------------------
Looks up an object reference . --> Symbol of date --> Socre: 1.0

[[[[Adv]]]]: public Object [[lookupObject]] ( final String [[ref]] ) { Object [[value]] = getObjectReference ( [[ref]] ) ; if ( [[value]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[ref]] ) ; } return [[value]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .

[[[[Adv]]]]: public Object [[syrupy]] ( final String [[mater]] ) { Object [[date]] = getObjectReference ( [[mater]] ) ; if ( [[date]] == null ) { throw new DbSqlBuilderException ( "Invalid object reference: " + [[mater]] ) ; } return [[date]] ; }
[[[[Nl]]]]: Lookups for object reference and throws an exception if reference doesn t exist .
--------------------------------------------- Result 710 ---------------------------------------------
Returns the descriptor for a table reference . --> [[[FAILED]]]

[[[[Adv]]]]: public DbEntityDescriptor [[getTableDescriptor]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( tableRef ) ; return [[t]] == null ? null : [[t]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .

[[[[Adv]]]]: public DbEntityDescriptor [[chhota]] ( final String tableRef ) { if ( tableRefs == null ) { return null ; } TableRefData [[breathing]] = tableRefs . get ( tableRef ) ; return [[breathing]] == null ? null : [[breathing]] . desc ; }
[[[[Nl]]]]: Returns entity descriptor for provided table reference .
--------------------------------------------- Result 711 ---------------------------------------------
Returns the alias for the given table . --> Get schaffer name --> Socre: 1.0

[[[[Adv]]]]: public String [[getTableAlias]] ( final String [[tableRef]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[t]] = tableRefs . get ( [[tableRef]] ) ; return [[t]] == null ? null : [[t]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .

[[[[Adv]]]]: public String [[schaffer]] ( final String [[someone]] ) { if ( tableRefs == null ) { return null ; } TableRefData [[caesarian]] = tableRefs . get ( [[someone]] ) ; return [[caesarian]] == null ? null : [[caesarian]] . alias ; }
[[[[Nl]]]]: Returns table alias for provided table reference .
--------------------------------------------- Result 712 ---------------------------------------------
Registers a hint . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerHint]] ( final String [[hint]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[hint]] ) ; }
[[[[Nl]]]]: Registers a hint .

[[[[Adv]]]]: public void [[telford]] ( final String [[cashiers]] ) { if ( hints == null ) { hints = new ArrayList <> ( hintCount ) ; } hints . add ( [[cashiers]] ) ; }
[[[[Nl]]]]: Registers a hint .
--------------------------------------------- Result 713 ---------------------------------------------
Helper method to serialize a value . --> Helper method to serialize an object --> Socre: 1.0

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext [[jsonContext]] , final T value ) { if ( [[jsonContext]] . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .

[[[[Adv]]]]: @ Override public final boolean serialize ( final JsonContext [[dreamy]] , final T value ) { if ( [[dreamy]] . pushValue ( value ) ) {
[[[[Nl]]]]: Detects circular dependencies and pushes value as current type context .
--------------------------------------------- Result 714 ---------------------------------------------
Lookup a table reference . --> [[[FAILED]]]

[[[[Adv]]]]: protected DbEntityDescriptor [[lookupTableRef]] ( final String [[tableRef]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[tableRef]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[tableRef]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .

[[[[Adv]]]]: protected DbEntityDescriptor [[intra]] ( final String [[monkshood]] ) { DbEntityDescriptor ded = getTableDescriptor ( [[monkshood]] ) ; if ( ded == null ) { throw new DbSqlBuilderException ( "Table reference not used in this query: " + [[monkshood]] ) ; } return ded ; }
[[[[Nl]]]]: Lookups for table reference and throws an exception if table reference not found .
--------------------------------------------- Result 715 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 453 / 242 / 20 / 715:  72%|███████▏  | 715/1000 [1:05:16<26:01,  5.48s/it][Succeeded / Failed / Skipped / Total] 453 / 242 / 20 / 715:  72%|███████▏  | 716/1000 [1:05:23<25:56,  5.48s/it][Succeeded / Failed / Skipped / Total] 454 / 242 / 20 / 716:  72%|███████▏  | 716/1000 [1:05:23<25:56,  5.48s/it][Succeeded / Failed / Skipped / Total] 454 / 242 / 20 / 716:  72%|███████▏  | 717/1000 [1:05:25<25:49,  5.47s/it][Succeeded / Failed / Skipped / Total] 455 / 242 / 20 / 717:  72%|███████▏  | 717/1000 [1:05:25<25:49,  5.47s/it][Succeeded / Failed / Skipped / Total] 455 / 242 / 20 / 717:  72%|███████▏  | 718/1000 [1:05:28<25:42,  5.47s/it][Succeeded / Failed / Skipped / Total] 455 / 243 / 20 / 718:  72%|███████▏  | 718/1000 [1:05:28<25:42,  5.47s/it][Succeeded / Failed / Skipped / Total] 455 / 243 / 20 / 718:  72%|███████▏  | 719/1000 [1:05:40<25:40,  5.48s/it]Inject parameters in the request . --> Called from Servlet --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectParameters]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , True ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .

[[[[Adv]]]]: protected void [[crewmen]] ( final HttpServletRequest servletRequest , final Targets targets ) { final boolean encode = encodeGetParams && servletRequest . getMethod ( ) . equals ( "GET" ) ; final Enumeration < String > paramNames = servletRequest . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { final String paramName = paramNames . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } targets . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { String [ ] paramValues = servletRequest . getParameterValues ( paramName ) ; paramValues = ServletUtil . prepareParameters ( paramValues , treatEmptyParamsAsNull , ignoreEmptyRequestParams ) ; if ( paramValues != null ) { if ( encode ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final String p = paramValues [ j ] ; if ( p != null ) { final String encoding = madvocEncoding . getEncoding ( ) ; paramValues [ j ] = StringUtil . convertCharset ( p , StringPool . ISO_8859_1 , encoding ) ; } } } final Object value = ( paramValues . length != 1 ? paramValues : paramValues [ 0 ] ) ; target . writeValue ( name , value , True ) ; } } } ) ; } }
[[[[Nl]]]]: Inject request parameters .
--------------------------------------------- Result 716 ---------------------------------------------
Converts a property name to a column name . --> Generate stamler --> Socre: 1.0

[[[[Adv]]]]: public String [[convertPropertyNameToColumnName]] ( final String propertyName ) { StringBuilder tableName = new StringBuilder ( propertyName . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( propertyName , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( propertyName ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .

[[[[Adv]]]]: public String [[stamper]] ( final String propertyName ) { StringBuilder tableName = new StringBuilder ( propertyName . length ( ) * 2 ) ; if ( splitCamelCase ) { String convertedTableName = Format . fromCamelCase ( propertyName , separatorChar ) ; tableName . append ( convertedTableName ) ; } else { tableName . append ( propertyName ) ; } if ( ! changeCase ) { return tableName . toString ( ) ; } return uppercase ? toUppercase ( tableName ) . toString ( ) : toLowercase ( tableName ) . toString ( ) ; }
[[[[Nl]]]]: Converts property name to column name .
--------------------------------------------- Result 717 ---------------------------------------------
Inject attribute values . --> Inject attribute values in meriweather --> Socre: 1.0

[[[[Adv]]]]: protected void injectAttributes ( final HttpServletRequest [[servletRequest]] , final Targets targets ) { final Enumeration < String > attributeNames = [[servletRequest]] . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String [[name]] = in . matchedName ( attrName ) ; if ( [[name]] != null ) { final Object attrValue = [[servletRequest]] . getAttribute ( attrName ) ; target . writeValue ( [[name]] , attrValue , "[[True]]" == "[[True]]" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .

[[[[Adv]]]]: protected void injectAttributes ( final HttpServletRequest [[meriweather]] , final Targets targets ) { final Enumeration < String > attributeNames = [[meriweather]] . getAttributeNames ( ) ; while ( attributeNames . hasMoreElements ( ) ) { final String attrName = attributeNames . nextElement ( ) ; targets . forEachTargetAndIn ( this , ( target , in ) -> { final String [[herbal]] = in . matchedName ( attrName ) ; if ( [[herbal]] != null ) { final Object attrValue = [[meriweather]] . getAttribute ( attrName ) ; target . writeValue ( [[herbal]] , attrValue , "[["Liliana" == "Liliana"]]" == "[["Liliana" == "Liliana"]]" ) ; } } ) ; } }
[[[[Nl]]]]: Injects request attributes .
--------------------------------------------- Result 718 ---------------------------------------------
Register a table reference . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerTableReference]] ( final String tableReference , final DbEntityDescriptor [[ded]] , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( [[ded]] , tableAlias ) ; if ( tableRefs . put ( tableReference , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .

[[[[Adv]]]]: public void [[umbilical]] ( final String tableReference , final DbEntityDescriptor [[barlow]] , final String tableAlias ) { if ( tableRefs == null ) { tableRefs = new HashMap <> ( ) ; } TableRefData t = new TableRefData ( [[barlow]] , tableAlias ) ; if ( tableRefs . put ( tableReference , t ) != null ) { throw new DbSqlBuilderException ( "Duplicated table reference: " + tableReference ) ; } }
[[[[Nl]]]]: Registers table reference for provided entity .
--------------------------------------------- Result 719 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 456 / 243 / 20 / 719:  72%|███████▏  | 719/1000 [1:05:40<25:40,  5.48s/it][Succeeded / Failed / Skipped / Total] 456 / 243 / 20 / 719:  72%|███████▏  | 720/1000 [1:05:44<25:33,  5.48s/it][Succeeded / Failed / Skipped / Total] 457 / 243 / 20 / 720:  72%|███████▏  | 720/1000 [1:05:44<25:33,  5.48s/it][Succeeded / Failed / Skipped / Total] 457 / 243 / 20 / 720:  72%|███████▏  | 721/1000 [1:05:44<25:26,  5.47s/it][Succeeded / Failed / Skipped / Total] 458 / 243 / 20 / 721:  72%|███████▏  | 721/1000 [1:05:44<25:26,  5.47s/it][Succeeded / Failed / Skipped / Total] 458 / 243 / 20 / 721:  72%|███████▏  | 722/1000 [1:05:49<25:20,  5.47s/it][Succeeded / Failed / Skipped / Total] 458 / 244 / 20 / 722:  72%|███████▏  | 722/1000 [1:05:49<25:20,  5.47s/it][Succeeded / Failed / Skipped / Total] 458 / 244 / 20 / 722:  72%|███████▏  | 723/1000 [1:05:57<25:16,  5.47s/it][Succeeded / Failed / Skipped / Total] 458 / 245 / 20 / 723:  72%|███████▏  | 723/1000 [1:05:57<25:16,  5.47s/it][Succeeded / Failed / Skipped / Total] 458 / 245 / 20 / 723:  72%|███████▏  | 724/1000 [1:06:00<25:09,  5.47s/it][Succeeded / Failed / Skipped / Total] 458 / 246 / 20 / 724:  72%|███████▏  | 724/1000 [1:06:00<25:09,  5.47s/it][Succeeded / Failed / Skipped / Total] 458 / 246 / 20 / 724:  72%|███████▎  | 725/1000 [1:06:12<25:06,  5.48s/it][Succeeded / Failed / Skipped / Total] 458 / 247 / 20 / 725:  72%|███████▎  | 725/1000 [1:06:12<25:06,  5.48s/it][Succeeded / Failed / Skipped / Total] 458 / 247 / 20 / 725:  73%|███████▎  | 726/1000 [1:06:17<25:00,  5.48s/it][Succeeded / Failed / Skipped / Total] 459 / 247 / 20 / 726:  73%|███████▎  | 726/1000 [1:06:17<25:00,  5.48s/it][Succeeded / Failed / Skipped / Total] 459 / 247 / 20 / 726:  73%|███████▎  | 727/1000 [1:06:30<24:58,  5.49s/it]Converts a column name to a property name . --> returns a camel - case --> Socre: 1.0

[[[[Adv]]]]: public String [[convertColumnNameToPropertyName]] ( final String [[columnName]] ) { StringBuilder propertyName = new StringBuilder ( [[columnName]] . length ( ) ) ; int len = [[columnName]] . length ( ) ; if ( splitCamelCase ) { boolean toUpper = False ; for ( int i = 0 ; i < len ; i ++ ) { char c = [[columnName]] . charAt ( i ) ; if ( c == separatorChar ) { toUpper = True ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = False ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return [[columnName]] ; }
[[[[Nl]]]]: Converts column name to property name .

[[[[Adv]]]]: public String [[haydar]] ( final String [[knowledgeable]] ) { StringBuilder propertyName = new StringBuilder ( [[knowledgeable]] . length ( ) ) ; int len = [[knowledgeable]] . length ( ) ; if ( splitCamelCase ) { boolean toUpper = False ; for ( int i = 0 ; i < len ; i ++ ) { char c = [[knowledgeable]] . charAt ( i ) ; if ( c == separatorChar ) { toUpper = True ; continue ; } if ( toUpper ) { propertyName . append ( Character . toUpperCase ( c ) ) ; toUpper = False ; } else { propertyName . append ( Character . toLowerCase ( c ) ) ; } } return propertyName . toString ( ) ; } return [[knowledgeable]] ; }
[[[[Nl]]]]: Converts column name to property name .
--------------------------------------------- Result 720 ---------------------------------------------
Stores a value in the table . --> chema --> Socre: 1.0

[[[[Adv]]]]: public void [[storeValue]] ( final PreparedStatement st , final int index , final Object [[value]] , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( [[value]] , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .

[[[[Adv]]]]: public void [[chemin]] ( final PreparedStatement st , final int index , final Object [[cartilage]] , final int dbSqlType ) throws SQLException { T t = TypeConverterManager . get ( ) . convertType ( [[cartilage]] , sqlType ) ; set ( st , index , t , dbSqlType ) ; }
[[[[Nl]]]]: Stores value in database . Value is casted to sql type .
--------------------------------------------- Result 721 ---------------------------------------------
Converts the specified column name to the specified column name . --> liefert den Wert --> Socre: 1.0

[[[[Adv]]]]: public String [[applyToColumnName]] ( final String [[columnName]] ) { String propertyName = convertColumnNameToPropertyName ( [[columnName]] ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .

[[[[Adv]]]]: public String [[awl]] ( final String [[auerbach]] ) { String propertyName = convertColumnNameToPropertyName ( [[auerbach]] ) ; return convertPropertyNameToColumnName ( propertyName ) ; }
[[[[Nl]]]]: Applies column naming strategy to given column name hint . Returns full column name .
--------------------------------------------- Result 722 ---------------------------------------------
Prepare the value for the specified type . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[E]] > [[E]] prepareGetValue ( final T t , final Class < [[E]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[E]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) protected < [[addressee]] > [[addressee]] prepareGetValue ( final T t , final Class < [[addressee]] > destinationType ) { if ( t == null ) { return null ; } if ( destinationType == null ) { return ( [[addressee]] ) t ; } return TypeConverterManager . get ( ) . convertType ( t , destinationType ) ; }
[[[[Nl]]]]: Once when value is read from result set prepare it to match destination type .
--------------------------------------------- Result 723 ---------------------------------------------
Creates a new wrapper . --> [[[FAILED]]]

[[[[Adv]]]]: protected < R [[extends]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .

[[[[Adv]]]]: protected < R [[bougainvillea]] T > R createWrapper ( final Class < R > wrapperClass ) { try { return ClassUtil . newInstance ( wrapperClass ) ; } catch ( Exception ex ) { throw new MadvocException ( "Invalid Madvoc wrapper: " + wrapperClass , ex ) ; } }
[[[[Nl]]]]: Creates new wrapper .
--------------------------------------------- Result 724 ---------------------------------------------
Returns a copy of all wrappers . --> [[[FAILED]]]

[[[[Adv]]]]: protected Set < T > [[getAll]] ( ) { final Set < T > [[set]] = new HashSet <> ( wrappers . size ( ) ) ; [[set]] . addAll ( wrappers . values ( ) ) ; return [[set]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .

[[[[Adv]]]]: protected Set < T > [[peaches]] ( ) { final Set < T > [[gerardo]] = new HashSet <> ( wrappers . size ( ) ) ; [[gerardo]] . addAll ( wrappers . values ( ) ) ; return [[gerardo]] ; }
[[[[Nl]]]]: Returns all action wrappers . Returns a copy in new set .
--------------------------------------------- Result 725 ---------------------------------------------
Convert system separators to system separators . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[separatorsToSystem]] ( final String [[path]] ) { if ( [[path]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[path]] ) ; } else { return separatorsToUnix ( [[path]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .

[[[[Adv]]]]: public static String [[flops]] ( final String [[morrell]] ) { if ( [[morrell]] == null ) { return null ; } if ( SYSTEM_SEPARATOR == WINDOWS_SEPARATOR ) { return separatorsToWindows ( [[morrell]] ) ; } else { return separatorsToUnix ( [[morrell]] ) ; } }
[[[[Nl]]]]: Converts all separators to the system separator .
--------------------------------------------- Result 726 ---------------------------------------------
Gets path . --> Extract mongols from mongols --> Socre: 1.0

[[[[Adv]]]]: private static String [[doGetPath]] ( final String filename , final int [[separatorAdd]] ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int endIndex = index + [[separatorAdd]] ; if ( prefix >= filename . length ( ) || index < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .

[[[[Adv]]]]: private static String [[mongols]] ( final String filename , final int [[mojitos]] ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < 0 ) { return null ; } int index = indexOfLastSeparator ( filename ) ; int endIndex = index + [[mojitos]] ; if ( prefix >= filename . length ( ) || index < 0 || prefix >= endIndex ) { return StringPool . EMPTY ; } return filename . substring ( prefix , endIndex ) ; }
[[[[Nl]]]]: Does the work of getting the path .
--------------------------------------------- Result 727 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 459 / 248 / 20 / 727:  73%|███████▎  | 727/1000 [1:06:30<24:58,  5.49s/it][Succeeded / Failed / Skipped / Total] 459 / 248 / 20 / 727:  73%|███████▎  | 728/1000 [1:06:38<24:53,  5.49s/it][Succeeded / Failed / Skipped / Total] 460 / 248 / 20 / 728:  73%|███████▎  | 728/1000 [1:06:38<24:53,  5.49s/it][Succeeded / Failed / Skipped / Total] 460 / 248 / 20 / 728:  73%|███████▎  | 729/1000 [1:06:42<24:48,  5.49s/it][Succeeded / Failed / Skipped / Total] 461 / 248 / 20 / 729:  73%|███████▎  | 729/1000 [1:06:42<24:48,  5.49s/it][Succeeded / Failed / Skipped / Total] 461 / 248 / 20 / 729:  73%|███████▎  | 730/1000 [1:06:45<24:41,  5.49s/it][Succeeded / Failed / Skipped / Total] 462 / 248 / 20 / 730:  73%|███████▎  | 730/1000 [1:06:45<24:41,  5.49s/it][Succeeded / Failed / Skipped / Total] 462 / 248 / 20 / 730:  73%|███████▎  | 731/1000 [1:06:45<24:34,  5.48s/it][Succeeded / Failed / Skipped / Total] 463 / 248 / 20 / 731:  73%|███████▎  | 731/1000 [1:06:45<24:34,  5.48s/it][Succeeded / Failed / Skipped / Total] 463 / 248 / 20 / 731:  73%|███████▎  | 732/1000 [1:06:47<24:27,  5.47s/it]Resolves a wrapper for the given class . --> [[[FAILED]]]

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > wrapperClass ) { String [[wrapperClassName]] = wrapperClass . getName ( ) ; T [[wrapper]] = lookup ( [[wrapperClassName]] ) ; if ( [[wrapper]] == null ) { [[wrapper]] = createWrapper ( wrapperClass ) ; initializeWrapper ( [[wrapper]] ) ; wrappers . put ( [[wrapperClassName]] , [[wrapper]] ) ; } return [[wrapper]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .

[[[[Adv]]]]: public T resolve ( final Class < ? extends T > wrapperClass ) { String [[murdered]] = wrapperClass . getName ( ) ; T [[globe]] = lookup ( [[murdered]] ) ; if ( [[globe]] == null ) { [[globe]] = createWrapper ( wrapperClass ) ; initializeWrapper ( [[globe]] ) ; wrappers . put ( [[murdered]] , [[globe]] ) ; } return [[globe]] ; }
[[[[Nl]]]]: Resolves single wrapper . Creates new wrapper instance if not already registered . Does not expand the wrappers .
--------------------------------------------- Result 728 ---------------------------------------------
Splits the given filename into an array of strings . --> helper to barcode --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[split]] ( final String [[filename]] ) { String [[prefix]] = getPrefix ( [[filename]] ) ; if ( [[prefix]] == null ) { [[prefix]] = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[filename]] ) ; int lastExtensionIndex = indexOfExtension ( [[filename]] ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = [[filename]] . substring ( [[prefix]] . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( [[prefix]] . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[filename]] . substring ( [[prefix]] . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = [[filename]] . substring ( [[prefix]] . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[filename]] . substring ( [[prefix]] . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[filename]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { [[prefix]] , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .

[[[[Adv]]]]: public static String [ ] [[barlow]] ( final String [[alight]] ) { String [[begged]] = getPrefix ( [[alight]] ) ; if ( [[begged]] == null ) { [[begged]] = StringPool . EMPTY ; } int lastSeparatorIndex = indexOfLastSeparator ( [[alight]] ) ; int lastExtensionIndex = indexOfExtension ( [[alight]] ) ; String path ; String baseName ; String extension ; if ( lastSeparatorIndex == - 1 ) { path = StringPool . EMPTY ; if ( lastExtensionIndex == - 1 ) { baseName = [[alight]] . substring ( [[begged]] . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[alight]] . substring ( [[begged]] . length ( ) , lastExtensionIndex ) ; extension = [[alight]] . substring ( lastExtensionIndex + 1 ) ; } } else { path = [[alight]] . substring ( [[begged]] . length ( ) , lastSeparatorIndex + 1 ) ; if ( lastExtensionIndex == - 1 ) { baseName = [[alight]] . substring ( [[begged]] . length ( ) + path . length ( ) ) ; extension = StringPool . EMPTY ; } else { baseName = [[alight]] . substring ( [[begged]] . length ( ) + path . length ( ) , lastExtensionIndex ) ; extension = [[alight]] . substring ( lastExtensionIndex + 1 ) ; } } return new String [ ] { [[begged]] , path , baseName , extension } ; }
[[[[Nl]]]]: Splits filename into a array of four Strings containing prefix path basename and extension . Path will contain ending separator .
--------------------------------------------- Result 729 ---------------------------------------------
Relative path . --> Generate a badge --> Socre: 1.0

[[[[Adv]]]]: public static String [[relativePath]] ( final String [[targetPath]] , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( [[targetPath]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .

[[[[Adv]]]]: public static String [[badge]] ( final String [[moya]] , final String basePath ) { return new File ( basePath ) . toPath ( ) . relativize ( new File ( [[moya]] ) . toPath ( ) ) . toString ( ) ; }
[[[[Nl]]]]: Calculates relative path of target path on base path .
--------------------------------------------- Result 730 ---------------------------------------------
Sets the action config for the given action type . --> Define a new ActionConfig --> Socre: 1.0

[[[[Adv]]]]: public < A [[extends]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .

[[[[Adv]]]]: public < A [[darla]] ActionConfig > WebApp withActionConfig ( final Class < A > actionConfigType , final Consumer < A > actionConfigConsumer ) { withRegisteredComponent ( ActionConfigManager . class , acm -> acm . with ( actionConfigType , actionConfigConsumer ) ) ; return this ; }
[[[[Nl]]]]: Configures the action configurations .
--------------------------------------------- Result 731 ---------------------------------------------
Register a madv component . --> Register a class to be instantiated --> Socre: 1.0

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[madvocComponent]] ) { Objects . requireNonNull ( [[madvocComponent]] ) ; madvocComponents . add ( ClassConsumer . of ( [[madvocComponent]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .

[[[[Adv]]]]: public WebApp registerComponent ( final Class < ? > [[carnations]] ) { Objects . requireNonNull ( [[carnations]] ) ; madvocComponents . add ( ClassConsumer . of ( [[carnations]] ) ) ; return this ; }
[[[[Nl]]]]: Registers additional Madvoc components after the registration of default components .
--------------------------------------------- Result 732 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 464 / 248 / 20 / 732:  73%|███████▎  | 732/1000 [1:06:47<24:27,  5.47s/it][Succeeded / Failed / Skipped / Total] 464 / 248 / 20 / 732:  73%|███████▎  | 733/1000 [1:06:51<24:21,  5.47s/it][Succeeded / Failed / Skipped / Total] 465 / 248 / 20 / 733:  73%|███████▎  | 733/1000 [1:06:51<24:21,  5.47s/it][Succeeded / Failed / Skipped / Total] 465 / 248 / 20 / 733:  73%|███████▎  | 734/1000 [1:06:53<24:14,  5.47s/it][Succeeded / Failed / Skipped / Total] 465 / 249 / 20 / 734:  73%|███████▎  | 734/1000 [1:06:53<24:14,  5.47s/it][Succeeded / Failed / Skipped / Total] 465 / 249 / 20 / 734:  74%|███████▎  | 735/1000 [1:06:55<24:07,  5.46s/it][Succeeded / Failed / Skipped / Total] 466 / 249 / 20 / 735:  74%|███████▎  | 735/1000 [1:06:55<24:07,  5.46s/it][Succeeded / Failed / Skipped / Total] 466 / 249 / 20 / 735:  74%|███████▎  | 736/1000 [1:07:00<24:02,  5.46s/it][Succeeded / Failed / Skipped / Total] 467 / 249 / 20 / 736:  74%|███████▎  | 736/1000 [1:07:00<24:02,  5.46s/it][Succeeded / Failed / Skipped / Total] 467 / 249 / 20 / 736:  74%|███████▎  | 737/1000 [1:07:13<23:59,  5.47s/it]Inject uploaded files . --> Called by ServletRequest --> Socre: 1.0

[[[[Adv]]]]: protected void [[injectUploadedFiles]] ( final HttpServletRequest servletRequest , final Targets [[targets]] ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > [[paramNames]] = multipartRequest . getFileParameterNames ( ) ; while ( [[paramNames]] . hasMoreElements ( ) ) { final String paramName = [[paramNames]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } [[targets]] . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , True ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .

[[[[Adv]]]]: protected void [[marianne]] ( final HttpServletRequest servletRequest , final Targets [[expound]] ) { if ( ! ( servletRequest instanceof MultipartRequestWrapper ) ) { return ; } final MultipartRequestWrapper multipartRequest = ( MultipartRequestWrapper ) servletRequest ; if ( ! multipartRequest . isMultipart ( ) ) { return ; } final Enumeration < String > [[liliana]] = multipartRequest . getFileParameterNames ( ) ; while ( [[liliana]] . hasMoreElements ( ) ) { final String paramName = [[liliana]] . nextElement ( ) ; if ( servletRequest . getAttribute ( paramName ) != null ) { continue ; } [[expound]] . forEachTargetAndIn ( this , ( target , in ) -> { final String name = in . matchedName ( paramName ) ; if ( name != null ) { final FileUpload [ ] paramValues = multipartRequest . getFiles ( paramName ) ; if ( ignoreInvalidUploadFiles ) { for ( int j = 0 ; j < paramValues . length ; j ++ ) { final FileUpload paramValue = paramValues [ j ] ; if ( ( ! paramValue . isValid ( ) ) || ( ! paramValue . isUploaded ( ) ) ) { paramValues [ j ] = null ; } } } final Object value = ( paramValues . length == 1 ? paramValues [ 0 ] : paramValues ) ; target . writeValue ( name , value , True ) ; } } ) ; } }
[[[[Nl]]]]: Inject uploaded files from multipart request parameters .
--------------------------------------------- Result 733 ---------------------------------------------
Start the webapp . --> don t want to do this --> Socre: 1.0

[[[[Adv]]]]: public WebApp [[start]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .

[[[[Adv]]]]: public WebApp [[donit]] ( ) { log = LoggerFactory . getLogger ( WebApp . class ) ; log . debug ( "Initializing Madvoc WebApp" ) ;
[[[[Nl]]]]: Initializes and starts web application .
--------------------------------------------- Result 734 ---------------------------------------------
Registers the madvoc components . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[registerMadvocComponents]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .

[[[[Adv]]]]: protected void [[rimbaud]] ( ) { if ( madvocContainer == null ) { throw new MadvocException ( "Madvoc WebApp not initialized." ) ; } log . debug ( "Registering Madvoc WebApp components" ) ; madvocContainer . registerComponent ( MadvocEncoding . class ) ; madvocContainer . registerComponentInstance ( new ServletContextProvider ( servletContext ) ) ; madvocContainer . registerComponent ( ActionConfigManager . class ) ; madvocContainer . registerComponent ( ActionMethodParamNameResolver . class ) ; madvocContainer . registerComponent ( ActionMethodParser . class ) ; madvocContainer . registerComponent ( ActionPathRewriter . class ) ; madvocContainer . registerComponent ( ActionsManager . class ) ; madvocContainer . registerComponent ( ContextInjectorComponent . class ) ; madvocContainer . registerComponent ( InterceptorsManager . class ) ; madvocContainer . registerComponent ( FiltersManager . class ) ; madvocContainer . registerComponent ( MadvocController . class ) ; madvocContainer . registerComponent ( RootPackages . class ) ; madvocContainer . registerComponent ( ResultsManager . class ) ; madvocContainer . registerComponent ( ResultMapper . class ) ; madvocContainer . registerComponent ( ScopeResolver . class ) ; madvocContainer . registerComponent ( ScopeDataInspector . class ) ; madvocContainer . registerComponent ( AsyncActionExecutor . class ) ; madvocContainer . registerComponent ( FileUploader . class ) ; }
[[[[Nl]]]]: Registers default Madvoc components .
--------------------------------------------- Result 735 ---------------------------------------------
Exclude jars from classpath . --> Exclude jar files --> Socre: 1.0

[[[[Adv]]]]: public ClassScanner [[excludeJars]] ( final String ... excludedJars ) { for ( final String excludedJar : excludedJars ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .

[[[[Adv]]]]: public ClassScanner [[razor]] ( final String ... excludedJars ) { for ( final String excludedJar : excludedJars ) { rulesJars . exclude ( excludedJar ) ; } return this ; }
[[[[Nl]]]]: Specify excluded jars .
--------------------------------------------- Result 736 ---------------------------------------------
Configure the default values for this agent . --> Register at least once atlas --> Socre: 1.0

[[[[Adv]]]]: protected void [[configureDefaults]] ( ) { final ActionConfigManager [[actionConfigManager]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[actionConfigManager]] . registerAnnotation ( Action . class ) ; [[actionConfigManager]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .

[[[[Adv]]]]: protected void [[thanatos]] ( ) { final ActionConfigManager [[ats]] = madvocContainer . lookupComponent ( ActionConfigManager . class ) ; [[ats]] . registerAnnotation ( Action . class ) ; [[ats]] . registerAnnotation ( RestAction . class ) ; }
[[[[Nl]]]]: Configure defaults .
--------------------------------------------- Result 737 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 467 / 250 / 20 / 737:  74%|███████▎  | 737/1000 [1:07:13<23:59,  5.47s/it][Succeeded / Failed / Skipped / Total] 467 / 250 / 20 / 737:  74%|███████▍  | 738/1000 [1:07:15<23:52,  5.47s/it][Succeeded / Failed / Skipped / Total] 467 / 251 / 20 / 738:  74%|███████▍  | 738/1000 [1:07:15<23:52,  5.47s/it][Succeeded / Failed / Skipped / Total] 467 / 251 / 20 / 738:  74%|███████▍  | 739/1000 [1:07:18<23:46,  5.46s/it][Succeeded / Failed / Skipped / Total] 467 / 252 / 20 / 739:  74%|███████▍  | 739/1000 [1:07:18<23:46,  5.46s/it][Succeeded / Failed / Skipped / Total] 467 / 252 / 20 / 739:  74%|███████▍  | 740/1000 [1:07:22<23:40,  5.46s/it][Succeeded / Failed / Skipped / Total] 468 / 252 / 20 / 740:  74%|███████▍  | 740/1000 [1:07:22<23:40,  5.46s/it][Succeeded / Failed / Skipped / Total] 468 / 252 / 20 / 740:  74%|███████▍  | 741/1000 [1:07:36<23:38,  5.47s/it][Succeeded / Failed / Skipped / Total] 468 / 253 / 20 / 741:  74%|███████▍  | 741/1000 [1:07:36<23:38,  5.47s/it][Succeeded / Failed / Skipped / Total] 468 / 253 / 20 / 741:  74%|███████▍  | 742/1000 [1:07:42<23:32,  5.48s/it][Succeeded / Failed / Skipped / Total] 468 / 254 / 20 / 742:  74%|███████▍  | 742/1000 [1:07:42<23:32,  5.48s/it][Succeeded / Failed / Skipped / Total] 468 / 254 / 20 / 742:  74%|███████▍  | 743/1000 [1:07:45<23:26,  5.47s/it][Succeeded / Failed / Skipped / Total] 469 / 254 / 20 / 743:  74%|███████▍  | 743/1000 [1:07:45<23:26,  5.47s/it][Succeeded / Failed / Skipped / Total] 469 / 254 / 20 / 743:  74%|███████▍  | 744/1000 [1:07:52<23:21,  5.47s/it][Succeeded / Failed / Skipped / Total] 469 / 255 / 20 / 744:  74%|███████▍  | 744/1000 [1:07:52<23:21,  5.47s/it][Succeeded / Failed / Skipped / Total] 469 / 255 / 20 / 744:  74%|███████▍  | 745/1000 [1:08:06<23:18,  5.49s/it]Includes specified jars . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[includeJars]] ( final String ... [[includedJars]] ) { for ( final String [[includedJar]] : [[includedJars]] ) { rulesJars . include ( [[includedJar]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .

[[[[Adv]]]]: public ClassScanner [[languishing]] ( final String ... [[cayenne]] ) { for ( final String [[malaysia]] : [[cayenne]] ) { rulesJars . include ( [[malaysia]] ) ; } return this ; }
[[[[Nl]]]]: Specify included jars .
--------------------------------------------- Result 738 ---------------------------------------------
Includes specified entries . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[includeEntries]] ( final String ... includedEntries ) { for ( final String includedEntry : includedEntries ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .

[[[[Adv]]]]: public ClassScanner [[rhesus]] ( final String ... includedEntries ) { for ( final String includedEntry : includedEntries ) { rulesEntries . include ( includedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets included set of names that will be considered during configuration .
--------------------------------------------- Result 739 ---------------------------------------------
Excludes entries that should be scanned . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[excludeEntries]] ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .

[[[[Adv]]]]: public ClassScanner [[chambre]] ( final String ... excludedEntries ) { for ( final String excludedEntry : excludedEntries ) { rulesEntries . exclude ( excludedEntry ) ; } return this ; }
[[[[Nl]]]]: Sets excluded names that narrows included set of packages .
--------------------------------------------- Result 740 ---------------------------------------------
Returns a bytecode of the signature of the given type . --> molting Molecule --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[bytecodeSignatureOfType]] ( final Class type ) { final String name = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .

[[[[Adv]]]]: public static byte [ ] [[molting]] ( final Class type ) { final String name = ' ' + type . getName ( ) . replace ( ' ' , ' ' ) + ' ' ; return name . getBytes ( ) ; }
[[[[Nl]]]]: Returns type signature bytes used for searching in class file .
--------------------------------------------- Result 741 ---------------------------------------------
Scans the scanner . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[start]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[path]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[path]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .

[[[[Adv]]]]: public void [[notifying]] ( ) { if ( detectEntriesMode ) { rulesEntries . detectMode ( ) ; } filesToScan . forEach ( file -> { final String [[buk]] = file . getAbsolutePath ( ) ; if ( StringUtil . endsWithIgnoreCase ( [[buk]] , JAR_FILE_EXT ) ) { if ( ! acceptJar ( file ) ) { return ; } scanJarFile ( file ) ; } else if ( file . isDirectory ( ) ) { scanClassPath ( file ) ; } } ) ; }
[[[[Nl]]]]: Starts with the scanner .
--------------------------------------------- Result 742 ---------------------------------------------
Scan classes . --> [[[FAILED]]]

[[[[Adv]]]]: public ClassScanner [[scan]] ( final String ... [[paths]] ) { for ( final String [[path]] : [[paths]] ) { filesToScan . add ( new File ( [[path]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .

[[[[Adv]]]]: public ClassScanner [[relapse]] ( final String ... [[foretold]] ) { for ( final String [[beard]] : [[foretold]] ) { filesToScan . add ( new File ( [[beard]] ) ) ; } return this ; }
[[[[Nl]]]]: Scans provided paths .
--------------------------------------------- Result 743 ---------------------------------------------
Create a new transaction --> region Implementation --> Socre: 1.0

[[[[Adv]]]]: @ Override protected JtxTransaction [[createNewTransaction]] ( final JtxTransactionMode tm , final Object scope , final boolean active ) { return new DbJtxTransaction ( this , tm , scope , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .

[[[[Adv]]]]: @ Override protected JtxTransaction [[morgue]] ( final JtxTransactionMode tm , final Object scope , final boolean active ) { return new DbJtxTransaction ( this , tm , scope , active ) ; }
[[[[Nl]]]]: Builds new transaction instance .
--------------------------------------------- Result 744 ---------------------------------------------
Gets the default scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[extends]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S [[chubby]] MadvocScope > S defaultOrScopeType ( final Class < S > scopeClass ) { if ( scopeClass == null ) { return ( S ) getOrInitScope ( RequestScope . class ) ; } return ( S ) getOrInitScope ( scopeClass ) ; }
[[[[Nl]]]]: Lookups the scope instance of given scope annotation . If instance does not exist it will be created cached and returned .
--------------------------------------------- Result 745 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 469 / 256 / 20 / 745:  74%|███████▍  | 745/1000 [1:08:06<23:18,  5.49s/it][Succeeded / Failed / Skipped / Total] 469 / 256 / 20 / 745:  75%|███████▍  | 746/1000 [1:08:11<23:13,  5.48s/it][Succeeded / Failed / Skipped / Total] 469 / 257 / 20 / 746:  75%|███████▍  | 746/1000 [1:08:11<23:13,  5.48s/it][Succeeded / Failed / Skipped / Total] 469 / 257 / 20 / 746:  75%|███████▍  | 747/1000 [1:08:24<23:10,  5.49s/it][Succeeded / Failed / Skipped / Total] 469 / 258 / 20 / 747:  75%|███████▍  | 747/1000 [1:08:24<23:10,  5.49s/it][Succeeded / Failed / Skipped / Total] 469 / 258 / 20 / 747:  75%|███████▍  | 748/1000 [1:08:26<23:03,  5.49s/it][Succeeded / Failed / Skipped / Total] 470 / 258 / 20 / 748:  75%|███████▍  | 748/1000 [1:08:26<23:03,  5.49s/it][Succeeded / Failed / Skipped / Total] 470 / 258 / 20 / 748:  75%|███████▍  | 749/1000 [1:08:34<22:58,  5.49s/it][Succeeded / Failed / Skipped / Total] 471 / 258 / 20 / 749:  75%|███████▍  | 749/1000 [1:08:34<22:58,  5.49s/it][Succeeded / Failed / Skipped / Total] 471 / 258 / 20 / 749:  75%|███████▌  | 750/1000 [1:08:57<22:59,  5.52s/it]Scans a jar file . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[scanJarFile]] ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , True ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , False ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .

[[[[Adv]]]]: protected void [[hardworking]] ( final File file ) { final ZipFile zipFile ; try { zipFile = new ZipFile ( file ) ; } catch ( IOException ioex ) { if ( ! ignoreException ) { throw new FindFileException ( "Invalid zip: " + file . getName ( ) , ioex ) ; } return ; } final Enumeration entries = zipFile . entries ( ) ; while ( entries . hasMoreElements ( ) ) { final ZipEntry zipEntry = ( ZipEntry ) entries . nextElement ( ) ; final String zipEntryName = zipEntry . getName ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( zipEntryName , CLASS_FILE_EXT ) ) { final String entryName = prepareEntryName ( zipEntryName , True ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } else if ( includeResources ) { final String entryName = prepareEntryName ( zipEntryName , False ) ; final ClassPathEntry classPathEntry = new ClassPathEntry ( entryName , zipFile , zipEntry ) ; try { scanEntry ( classPathEntry ) ; } finally { classPathEntry . closeInputStream ( ) ; } } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { ZipUtil . close ( zipFile ) ; throw rex ; } } } ZipUtil . close ( zipFile ) ; }
[[[[Nl]]]]: Scans classes inside single JAR archive . Archive is scanned as a zip file .
--------------------------------------------- Result 746 ---------------------------------------------
Returns the scope of the given madvo scope . --> [[[FAILED]]]

[[[[Adv]]]]: protected MadvocScope [[getOrInitScope]] ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( madvocScopeType ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .

[[[[Adv]]]]: protected MadvocScope [[routes]] ( final Class < ? extends MadvocScope > madvocScopeType ) { for ( final MadvocScope s : allScopes ) { if ( s . getClass ( ) . equals ( madvocScopeType ) ) { return s ; } }
[[[[Nl]]]]: Performs search for the scope class and returns it s instance .
--------------------------------------------- Result 747 ---------------------------------------------
Scans class files . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[scanClassPath]] ( final File root ) { String rootPath = root . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( False ) . recursive ( "[[True]]" == "[[True]]" ) . searchPath ( rootPath ) ; File [[file]] ; while ( ( [[file]] = ff . nextFile ( ) ) != null ) { final String [[filePath]] = [[file]] . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( [[filePath]] , CLASS_FILE_EXT ) ) { scanClassFile ( [[filePath]] , rootPath , [[file]] , "[[True]]" == "[[True]]" ) ; } else if ( includeResources ) { scanClassFile ( [[filePath]] , rootPath , [[file]] , False ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .

[[[[Adv]]]]: protected void [[corroborating]] ( final File root ) { String rootPath = root . getAbsolutePath ( ) ; if ( ! rootPath . endsWith ( File . separator ) ) { rootPath += File . separatorChar ; } final FindFile ff = FindFile . create ( ) . includeDirs ( False ) . recursive ( "[["Anzio" == "Anzio"]]" == "[["Anzio" == "Anzio"]]" ) . searchPath ( rootPath ) ; File [[purchases]] ; while ( ( [[purchases]] = ff . nextFile ( ) ) != null ) { final String [[pants]] = [[purchases]] . getAbsolutePath ( ) ; try { if ( StringUtil . endsWithIgnoreCase ( [[pants]] , CLASS_FILE_EXT ) ) { scanClassFile ( [[pants]] , rootPath , [[purchases]] , "[["Anzio" == "Anzio"]]" == "[["Anzio" == "Anzio"]]" ) ; } else if ( includeResources ) { scanClassFile ( [[pants]] , rootPath , [[purchases]] , False ) ; } } catch ( RuntimeException rex ) { if ( ! ignoreException ) { throw rex ; } } } }
[[[[Nl]]]]: Scans single classpath directory .
--------------------------------------------- Result 748 ---------------------------------------------
Generates a CSRF token . --> meugged from httpSession --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[prepareCsrfToken]] ( final HttpSession session , final int timeToLive ) { Set < Token > [[tokenSet]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[tokenSet]] == null ) { [[tokenSet]] = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , [[tokenSet]] ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[tokenSet]] ) ; unique = [[tokenSet]] . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static String [[excuse]] ( final HttpSession session , final int timeToLive ) { Set < Token > [[divulged]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( [[divulged]] == null ) { [[divulged]] = new HashSet <> ( ) ; session . setAttribute ( CSRF_TOKEN_SET , [[divulged]] ) ; } String value ; boolean unique ; do { value = RandomString . get ( ) . randomAlphaNumeric ( 32 ) ; assureSize ( [[divulged]] ) ; unique = [[divulged]] . add ( new Token ( value , timeToLive ) ) ; } while ( ! unique ) ; return value ; }
[[[[Nl]]]]: Generates new CSRF token and puts it in the session . Returns generated token value .
--------------------------------------------- Result 749 ---------------------------------------------
Creates a new scope for the specified scope type . --> This method is responsible for the foote --> Socre: 1.0

[[[[Adv]]]]: public void [[forScope]] ( final Class < ? extends MadvocScope > [[scopeType]] , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope [[scope]] = getOrInitScope ( [[scopeType]] ) ; madvocScopeConsumer . accept ( [[scope]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .

[[[[Adv]]]]: public void [[foote]] ( final Class < ? extends MadvocScope > [[fer]] , final Consumer < MadvocScope > madvocScopeConsumer ) { final MadvocScope [[iselin]] = getOrInitScope ( [[fer]] ) ; madvocScopeConsumer . accept ( [[iselin]] ) ; }
[[[[Nl]]]]: Finds a given scope and consumes it .
--------------------------------------------- Result 750 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 471 / 259 / 20 / 750:  75%|███████▌  | 750/1000 [1:08:57<22:59,  5.52s/it][Succeeded / Failed / Skipped / Total] 471 / 259 / 20 / 750:  75%|███████▌  | 751/1000 [1:09:03<22:53,  5.52s/it][Succeeded / Failed / Skipped / Total] 472 / 259 / 20 / 751:  75%|███████▌  | 751/1000 [1:09:03<22:53,  5.52s/it][Succeeded / Failed / Skipped / Total] 472 / 259 / 20 / 751:  75%|███████▌  | 752/1000 [1:09:22<22:52,  5.54s/it][Succeeded / Failed / Skipped / Total] 473 / 259 / 20 / 752:  75%|███████▌  | 752/1000 [1:09:22<22:52,  5.54s/it][Succeeded / Failed / Skipped / Total] 473 / 259 / 20 / 752:  75%|███████▌  | 753/1000 [1:09:25<22:46,  5.53s/it][Succeeded / Failed / Skipped / Total] 474 / 259 / 20 / 753:  75%|███████▌  | 753/1000 [1:09:25<22:46,  5.53s/it][Succeeded / Failed / Skipped / Total] 474 / 259 / 20 / 753:  75%|███████▌  | 754/1000 [1:09:29<22:40,  5.53s/it][Succeeded / Failed / Skipped / Total] 474 / 260 / 20 / 754:  75%|███████▌  | 754/1000 [1:09:29<22:40,  5.53s/it][Succeeded / Failed / Skipped / Total] 474 / 260 / 20 / 754:  76%|███████▌  | 755/1000 [1:09:37<22:35,  5.53s/it][Succeeded / Failed / Skipped / Total] 475 / 260 / 20 / 755:  76%|███████▌  | 755/1000 [1:09:37<22:35,  5.53s/it][Succeeded / Failed / Skipped / Total] 475 / 260 / 20 / 755:  76%|███████▌  | 756/1000 [1:09:43<22:30,  5.53s/it]Creates a copy of a Bean . --> [[[FAILED]]]

[[[[Adv]]]]: public static BeanCopy [[from]] ( final Object source ) { BeanCopy beanCopy = new BeanCopy ( source ) ; beanCopy . isSourceMap = source instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .

[[[[Adv]]]]: public static BeanCopy [[elwood]] ( final Object source ) { BeanCopy beanCopy = new BeanCopy ( source ) ; beanCopy . isSourceMap = source instanceof Map ; return beanCopy ; }
[[[[Nl]]]]: Defines source detects a map .
--------------------------------------------- Result 751 ---------------------------------------------
Copy this object . --> Removes all declared fields --> Socre: 1.0

[[[[Adv]]]]: public void [[copy]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( True ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .

[[[[Adv]]]]: public void [[bleeding]] ( ) { beanUtil = new BeanUtilBean ( ) . declared ( declared ) . forced ( forced ) . silent ( True ) ; visit ( ) ; }
[[[[Nl]]]]: Performs the copying .
--------------------------------------------- Result 752 ---------------------------------------------
Setter for property . --> Setter for cors --> Socre: 1.0

[[[[Adv]]]]: @ Override protected boolean [[visitProperty]] ( String name , final Object [[value]] ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , [[value]] ) ; return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .

[[[[Adv]]]]: @ Override protected boolean [[corsica]] ( String name , final Object [[oakum]] ) { if ( isTargetMap ) { name = LEFT_SQ_BRACKET + name + RIGHT_SQ_BRACKET ; } beanUtil . setProperty ( destination , name , [[oakum]] ) ; return "[["Adair" == "Adair"]]" == "[["Adair" == "Adair"]]" ; }
[[[[Nl]]]]: Copies single property to the destination . Exceptions are ignored so copying continues if destination does not have some of the sources properties .
--------------------------------------------- Result 753 ---------------------------------------------
Decodes a char array . --> helper for scriptium --> Socre: 1.0

[[[[Adv]]]]: public static byte [ ] [[decode]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , [[endx]] = length - 1 ; int pad = arr [ [[endx]] ] == ' ' ? ( arr [ [[endx]] - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = [[endx]] - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int [[i]] = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( [[i]] >> 16 ) ; dest [ d ++ ] = ( byte ) ( [[i]] >> 8 ) ; dest [ d ++ ] = ( byte ) [[i]] ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int [[i]] = 0 ; for ( int j = 0 ; sndx <= [[endx]] - pad ; j ++ ) { [[i]] |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int [[r]] = 16 ; d < len ; [[r]] -= 8 ) { dest [ d ++ ] = ( byte ) ( [[i]] >> [[r]] ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .

[[[[Adv]]]]: public static byte [ ] [[barium]] ( final char [ ] arr ) { int length = arr . length ; if ( length == 0 ) { return new byte [ 0 ] ; } int sndx = 0 , [[inexorable]] = length - 1 ; int pad = arr [ [[inexorable]] ] == ' ' ? ( arr [ [[inexorable]] - 1 ] == ' ' ? 2 : 1 ) : 0 ; int cnt = [[inexorable]] - sndx + 1 ; int sepCnt = length > 76 ? ( arr [ 76 ] == ' ' ? cnt / 78 : 0 ) << 1 : 0 ; int len = ( ( cnt - sepCnt ) * 6 >> 3 ) - pad ; byte [ ] dest = new byte [ len ] ; int d = 0 ; for ( int cc = 0 , eLen = ( len / 3 ) * 3 ; d < eLen ; ) { int [[scriptwriter]] = INV [ arr [ sndx ++ ] ] << 18 | INV [ arr [ sndx ++ ] ] << 12 | INV [ arr [ sndx ++ ] ] << 6 | INV [ arr [ sndx ++ ] ] ; dest [ d ++ ] = ( byte ) ( [[scriptwriter]] >> 16 ) ; dest [ d ++ ] = ( byte ) ( [[scriptwriter]] >> 8 ) ; dest [ d ++ ] = ( byte ) [[scriptwriter]] ; if ( sepCnt > 0 && ++ cc == 19 ) { sndx += 2 ; cc = 0 ; } } if ( d < len ) { int [[scriptwriter]] = 0 ; for ( int j = 0 ; sndx <= [[inexorable]] - pad ; j ++ ) { [[scriptwriter]] |= INV [ arr [ sndx ++ ] ] << ( 18 - j * 6 ) ; } for ( int [[timed]] = 16 ; d < len ; [[timed]] -= 8 ) { dest [ d ++ ] = ( byte ) ( [[scriptwriter]] >> [[timed]] ) ; } } return dest ; }
[[[[Nl]]]]: Decodes a BASE64 encoded char array .
--------------------------------------------- Result 754 ---------------------------------------------
Check if a CSRF token has expired . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[checkCsrfToken]] ( final HttpSession session , final String tokenValue ) { Set < Token > [[tokenSet]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( [[tokenSet]] == null ) && ( tokenValue == null ) ) { return True ; } if ( ( [[tokenSet]] == null ) || ( tokenValue == null ) ) { return "[[False]]" != "[[False]]" ; } boolean found = "[[False]]" != "[[False]]" ; Iterator < Token > [[it]] = [[tokenSet]] . iterator ( ) ; while ( [[it]] . hasNext ( ) ) { Token [[t]] = [[it]] . next ( ) ; if ( [[t]] . isExpired ( ) ) { [[it]] . remove ( ) ; continue ; } if ( [[t]] . getValue ( ) . equals ( tokenValue ) ) { [[it]] . remove ( ) ; found = True ; } } return found ; }
[[[[Nl]]]]: Checks token value . C

[[[[Adv]]]]: @ SuppressWarnings ( { "unchecked" } ) public static boolean [[hansi]] ( final HttpSession session , final String tokenValue ) { Set < Token > [[toscani]] = ( Set < Token > ) session . getAttribute ( CSRF_TOKEN_SET ) ; if ( ( [[toscani]] == null ) && ( tokenValue == null ) ) { return True ; } if ( ( [[toscani]] == null ) || ( tokenValue == null ) ) { return "[["Handiwork" != "Handiwork"]]" != "[["Handiwork" != "Handiwork"]]" ; } boolean found = "[["Handiwork" != "Handiwork"]]" != "[["Handiwork" != "Handiwork"]]" ; Iterator < Token > [[xt]] = [[toscani]] . iterator ( ) ; while ( [[xt]] . hasNext ( ) ) { Token [[worthier]] = [[xt]] . next ( ) ; if ( [[worthier]] . isExpired ( ) ) { [[xt]] . remove ( ) ; continue ; } if ( [[worthier]] . getValue ( ) . equals ( tokenValue ) ) { [[xt]] . remove ( ) ; found = True ; } } return found ; }
[[[[Nl]]]]: Checks token value . C
--------------------------------------------- Result 755 ---------------------------------------------
Makes sure that the TokenSet is valid . --> Checks the size of the rach --> Socre: 1.0

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[tokenSet]] ) { if ( [[tokenSet]] . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token [[tokenToRemove]] = null ; Iterator < Token > iterator = [[tokenSet]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; [[tokenToRemove]] = token ; } } if ( ( [[tokenToRemove]] != null ) && ( [[tokenSet]] . size ( ) >= maxTokensPerSession ) ) { [[tokenSet]] . remove ( [[tokenToRemove]] ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .

[[[[Adv]]]]: protected static void assureSize ( final Set < Token > [[rachael]] ) { if ( [[rachael]] . size ( ) < maxTokensPerSession ) { return ; } long validUntilMin = Long . MAX_VALUE ; Token [[inconsiderate]] = null ; Iterator < Token > iterator = [[rachael]] . iterator ( ) ; while ( iterator . hasNext ( ) ) { Token token = iterator . next ( ) ; if ( token . isExpired ( ) ) { iterator . remove ( ) ; continue ; } if ( token . validUntil < validUntilMin ) { validUntilMin = token . validUntil ; [[inconsiderate]] = token ; } } if ( ( [[inconsiderate]] != null ) && ( [[rachael]] . size ( ) >= maxTokensPerSession ) ) { [[rachael]] . remove ( [[inconsiderate]] ) ; } }
[[[[Nl]]]]: Removes expired tokens if token set is full .
[Succeeded / Failed / Skipped / Total] 475 / 261 / 20 / 756:  76%|███████▌  | 756/1000 [1:09:43<22:30,  5.53s/it][Succeeded / Failed / Skipped / Total] 475 / 261 / 20 / 756:  76%|███████▌  | 757/1000 [1:09:55<22:26,  5.54s/it][Succeeded / Failed / Skipped / Total] 476 / 261 / 20 / 757:  76%|███████▌  | 757/1000 [1:09:55<22:26,  5.54s/it][Succeeded / Failed / Skipped / Total] 476 / 261 / 20 / 757:  76%|███████▌  | 758/1000 [1:09:59<22:20,  5.54s/it][Succeeded / Failed / Skipped / Total] 477 / 261 / 20 / 758:  76%|███████▌  | 758/1000 [1:09:59<22:20,  5.54s/it][Succeeded / Failed / Skipped / Total] 477 / 261 / 20 / 758:  76%|███████▌  | 759/1000 [1:10:05<22:15,  5.54s/it][Succeeded / Failed / Skipped / Total] 477 / 262 / 20 / 759:  76%|███████▌  | 759/1000 [1:10:05<22:15,  5.54s/it][Succeeded / Failed / Skipped / Total] 477 / 262 / 20 / 759:  76%|███████▌  | 760/1000 [1:10:29<22:15,  5.57s/it][Succeeded / Failed / Skipped / Total] 477 / 263 / 20 / 760:  76%|███████▌  | 760/1000 [1:10:29<22:15,  5.57s/it][Succeeded / Failed / Skipped / Total] 477 / 263 / 20 / 760:  76%|███████▌  | 761/1000 [1:10:32<22:09,  5.56s/it]--------------------------------------------- Result 756 ---------------------------------------------
Returns the scope for the given scope . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S [[scope]] = ( S ) scopes . get ( scopeType ) ; if ( [[scope]] == null ) { try { [[scope]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[scope]] ) ; scopes . put ( scopeType , [[scope]] ) ; } return [[scope]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < S extends Scope > S resolveScope ( final Class < S > scopeType ) { S [[subdivision]] = ( S ) scopes . get ( scopeType ) ; if ( [[subdivision]] == null ) { try { [[subdivision]] = newInternalInstance ( scopeType , ( PetiteContainer ) this ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid Petite scope: " + scopeType . getName ( ) , ex ) ; } registerScope ( scopeType , [[subdivision]] ) ; scopes . put ( scopeType , [[subdivision]] ) ; } return [[subdivision]] ; }
[[[[Nl]]]]: Resolves and registers scope from a scope type .
--------------------------------------------- Result 757 ---------------------------------------------
Remove a bean from the container . --> set the Anunnaki class --> Socre: 1.0

[[[[Adv]]]]: public void [[removeBean]] ( final Class [[type]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .

[[[[Adv]]]]: public void [[anunnaki]] ( final Class [[blighty]] ) {
[[[[Nl]]]]: Removes all petite beans of provided type . Bean name is not resolved from a type! Instead all beans are iterated and only beans with equal types are removed .
--------------------------------------------- Result 758 ---------------------------------------------
Register a bean definition . --> Register a BeanDefinition --> Socre: 1.0

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class [[anInterface]] : interfaces ) { String [[altName]] = annotationResolver . resolveBeanName ( [[anInterface]] , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( [[altName]] ) ) { continue ; } if ( beans . containsKey ( [[altName]] ) ) { continue ; } if ( beansAlt . containsKey ( [[altName]] ) ) { BeanDefinition existing = beansAlt . get ( [[altName]] ) ; if ( existing != null ) { beansAlt . put ( [[altName]] , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .

[[[[Adv]]]]: protected void registerBean ( final String name , final BeanDefinition beanDefinition ) { beans . put ( name , beanDefinition ) ; if ( ! petiteConfig . isUseAltBeanNames ( ) ) { return ; } Class type = beanDefinition . type ( ) ; if ( annotationResolver . beanHasAnnotationName ( type ) ) { return ; } Class [ ] interfaces = ClassUtil . resolveAllInterfaces ( type ) ; for ( Class [[gobbling]] : interfaces ) { String [[click]] = annotationResolver . resolveBeanName ( [[gobbling]] , petiteConfig . getUseFullTypeNames ( ) ) ; if ( name . equals ( [[click]] ) ) { continue ; } if ( beans . containsKey ( [[click]] ) ) { continue ; } if ( beansAlt . containsKey ( [[click]] ) ) { BeanDefinition existing = beansAlt . get ( [[click]] ) ; if ( existing != null ) { beansAlt . put ( [[click]] , null ) ;
[[[[Nl]]]]: Registers bean definition by putting it in the beans map . If bean does not have petite name explicitly defined alternative bean names will be registered .
--------------------------------------------- Result 759 ---------------------------------------------
Initializes the table reference . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[init]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String [[tableReference]] = this . tableReference ; if ( [[tableReference]] == null ) { [[tableReference]] = tableAlias ; } if ( [[tableReference]] == null ) { [[tableReference]] = entityName ; } if ( [[tableReference]] == null ) { [[tableReference]] = ded . getEntityName ( ) ; } templateData . registerTableReference ( [[tableReference]] , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .

[[[[Adv]]]]: @ Override public void [[chemin]] ( final TemplateData templateData ) { super . init ( templateData ) ; if ( entity != null ) { ded = lookupType ( entity ) ; } else { Object object = templateData . getObjectReference ( entityName ) ; if ( object != null ) { ded = lookupType ( resolveClass ( object ) ) ; } else { ded = lookupName ( entityName ) ; } } String [[lianna]] = this . tableReference ; if ( [[lianna]] == null ) { [[lianna]] = tableAlias ; } if ( [[lianna]] == null ) { [[lianna]] = entityName ; } if ( [[lianna]] == null ) { [[lianna]] = ded . getEntityName ( ) ; } templateData . registerTableReference ( [[lianna]] , ded , tableAlias ) ; }
[[[[Nl]]]]: Resolves and registers table references .
--------------------------------------------- Result 760 ---------------------------------------------
Register a new bean definition . --> [[[FAILED]]]

[[[[Adv]]]]: public < T > BeanDefinition < T > [[registerPetiteBean]] ( final Class < T > [[type]] , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > [[consumer]] ) { if ( name == null ) { name = resolveBeanName ( [[type]] ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( [[type]] ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( [[type]] ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .

[[[[Adv]]]]: public < T > BeanDefinition < T > [[inexorable]] ( final Class < T > [[gordie]] , String name , Class < ? extends Scope > scopeType , WiringMode wiringMode , final boolean define , final Consumer < T > [[bulimia]] ) { if ( name == null ) { name = resolveBeanName ( [[gordie]] ) ; } if ( wiringMode == null ) { wiringMode = annotationResolver . resolveBeanWiringMode ( [[gordie]] ) ; } if ( wiringMode == WiringMode . DEFAULT ) { wiringMode = petiteConfig . getDefaultWiringMode ( ) ; } if ( scopeType == null ) { scopeType = annotationResolver . resolveBeanScopeType ( [[gordie]] ) ; } if ( scopeType == null ) { scopeType = SingletonScope . class ; }
[[[[Nl]]]]: Registers or defines a bean .
--------------------------------------------- Result 761 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 478 / 263 / 20 / 761:  76%|███████▌  | 761/1000 [1:10:32<22:09,  5.56s/it][Succeeded / Failed / Skipped / Total] 478 / 263 / 20 / 761:  76%|███████▌  | 762/1000 [1:10:39<22:04,  5.56s/it][Succeeded / Failed / Skipped / Total] 479 / 263 / 20 / 762:  76%|███████▌  | 762/1000 [1:10:39<22:04,  5.56s/it][Succeeded / Failed / Skipped / Total] 479 / 263 / 20 / 762:  76%|███████▋  | 763/1000 [1:10:52<22:00,  5.57s/it][Succeeded / Failed / Skipped / Total] 480 / 263 / 20 / 763:  76%|███████▋  | 763/1000 [1:10:52<22:00,  5.57s/it][Succeeded / Failed / Skipped / Total] 480 / 263 / 20 / 763:  76%|███████▋  | 764/1000 [1:11:02<21:56,  5.58s/it][Succeeded / Failed / Skipped / Total] 481 / 263 / 20 / 764:  76%|███████▋  | 764/1000 [1:11:02<21:56,  5.58s/it][Succeeded / Failed / Skipped / Total] 481 / 263 / 20 / 764:  76%|███████▋  | 765/1000 [1:11:24<21:56,  5.60s/it]Register a property injection point . --> Implementation of PropertyInjection --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetitePropertyInjectionPoint]] ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor [[propertyDescriptor]] = cd . getPropertyDescriptor ( property , True ) ; if ( [[propertyDescriptor]] == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences [[ref]] = referencesResolver . resolveReferenceFromValue ( [[propertyDescriptor]] , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( [[propertyDescriptor]] , [[ref]] ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .

[[[[Adv]]]]: public void [[immobility]] ( final String beanName , final String property , final String reference ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor [[dozens]] = cd . getPropertyDescriptor ( property , True ) ; if ( [[dozens]] == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } BeanReferences [[aleksander]] = referencesResolver . resolveReferenceFromValue ( [[dozens]] , reference ) ; PropertyInjectionPoint pip = new PropertyInjectionPoint ( [[dozens]] , [[aleksander]] ) ; beanDefinition . addPropertyInjectionPoint ( pip ) ; }
[[[[Nl]]]]: Registers property injection point .
--------------------------------------------- Result 762 ---------------------------------------------
Register a Petite Set InjectionPoint --> Register InjectionPoint --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor [[propertyDescriptor]] = cd . getPropertyDescriptor ( property , True ) ; if ( [[propertyDescriptor]] == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( [[propertyDescriptor]] ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .

[[[[Adv]]]]: public void registerPetiteSetInjectionPoint ( final String beanName , final String property ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; PropertyDescriptor [[artsy]] = cd . getPropertyDescriptor ( property , True ) ; if ( [[artsy]] == null ) { throw new PetiteException ( "Property not found: " + beanDefinition . type . getName ( ) + ' ' + property ) ; } SetInjectionPoint sip = new SetInjectionPoint ( [[artsy]] ) ; beanDefinition . addSetInjectionPoint ( sip ) ; }
[[[[Nl]]]]: Registers set injection point .
--------------------------------------------- Result 763 ---------------------------------------------
Register an injection point for this bean . --> Initializes the breadcrumbs for a bean --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteCtorInjectionPoint]] ( final String beanName , final Class [ ] paramTypes , final String [ ] [[references]] ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; Constructor [[constructor]] = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + [[beanDefinition]] . type . getName ( ) ) ; } [[constructor]] = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , True ) ; if ( ctorDescriptor != null ) { [[constructor]] = ctorDescriptor . getConstructor ( ) ; } } if ( [[constructor]] == null ) { throw new PetiteException ( "Constructor not found: " + [[beanDefinition]] . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[constructor]] , [[references]] ) ; [[beanDefinition]] . ctor = new CtorInjectionPoint ( [[constructor]] , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .

[[[[Adv]]]]: public void [[breadcrumbs]] ( final String beanName , final Class [ ] paramTypes , final String [ ] [[mulberry]] ) { BeanDefinition [[undermine]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[undermine]] . type ) ; Constructor [[kgb]] = null ; if ( paramTypes == null ) { CtorDescriptor [ ] ctors = cd . getAllCtorDescriptors ( ) ; if ( ctors != null && ctors . length > 0 ) { if ( ctors . length > 1 ) { throw new PetiteException ( ctors . length + " suitable constructor found as injection point for: " + [[undermine]] . type . getName ( ) ) ; } [[kgb]] = ctors [ 0 ] . getConstructor ( ) ; } } else { CtorDescriptor ctorDescriptor = cd . getCtorDescriptor ( paramTypes , True ) ; if ( ctorDescriptor != null ) { [[kgb]] = ctorDescriptor . getConstructor ( ) ; } } if ( [[kgb]] == null ) { throw new PetiteException ( "Constructor not found: " + [[undermine]] . type . getName ( ) ) ; } BeanReferences [ ] ref = referencesResolver . resolveReferenceFromValues ( [[kgb]] , [[mulberry]] ) ; [[undermine]] . ctor = new CtorInjectionPoint ( [[kgb]] , ref ) ; }
[[[[Nl]]]]: Registers constructor injection point .
--------------------------------------------- Result 764 ---------------------------------------------
Resolves bean names for the specified type . --> Makes a simple list of beans and returns an array of beans --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[resolveBeanNamesForType]] ( final Class [[type]] ) { String [ ] beanNames = beanCollections . get ( [[type]] ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > [[list]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[type]] ) ) { String beanName = entry . getKey ( ) ; [[list]] . add ( beanName ) ; } } if ( [[list]] . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = [[list]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[type]] , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .

[[[[Adv]]]]: protected String [ ] [[gentle]] ( final Class [[stares]] ) { String [ ] beanNames = beanCollections . get ( [[stares]] ) ; if ( beanNames != null ) { return beanNames ; } ArrayList < String > [[jeremiah]] = new ArrayList <> ( ) ; for ( Map . Entry < String , BeanDefinition > entry : beans . entrySet ( ) ) { BeanDefinition beanDefinition = entry . getValue ( ) ; if ( ClassUtil . isTypeOf ( beanDefinition . type , [[stares]] ) ) { String beanName = entry . getKey ( ) ; [[jeremiah]] . add ( beanName ) ; } } if ( [[jeremiah]] . isEmpty ( ) ) { beanNames = StringPool . EMPTY_ARRAY ; } else { beanNames = [[jeremiah]] . toArray ( new String [ 0 ] ) ; } beanCollections . put ( [[stares]] , beanNames ) ; return beanNames ; }
[[[[Nl]]]]: Resolves bean names for give type .
--------------------------------------------- Result 765 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 482 / 263 / 20 / 765:  76%|███████▋  | 765/1000 [1:11:24<21:56,  5.60s/it][Succeeded / Failed / Skipped / Total] 482 / 263 / 20 / 765:  77%|███████▋  | 766/1000 [1:11:27<21:49,  5.60s/it][Succeeded / Failed / Skipped / Total] 483 / 263 / 20 / 766:  77%|███████▋  | 766/1000 [1:11:27<21:49,  5.60s/it][Succeeded / Failed / Skipped / Total] 483 / 263 / 20 / 766:  77%|███████▋  | 767/1000 [1:11:46<21:48,  5.61s/it][Succeeded / Failed / Skipped / Total] 484 / 263 / 20 / 767:  77%|███████▋  | 767/1000 [1:11:46<21:48,  5.61s/it][Succeeded / Failed / Skipped / Total] 484 / 263 / 20 / 767:  77%|███████▋  | 768/1000 [1:12:12<21:48,  5.64s/it][Succeeded / Failed / Skipped / Total] 484 / 264 / 20 / 768:  77%|███████▋  | 768/1000 [1:12:12<21:48,  5.64s/it][Succeeded / Failed / Skipped / Total] 484 / 264 / 20 / 768:  77%|███████▋  | 769/1000 [1:12:36<21:48,  5.66s/it][Succeeded / Failed / Skipped / Total] 485 / 264 / 20 / 769:  77%|███████▋  | 769/1000 [1:12:36<21:48,  5.66s/it][Succeeded / Failed / Skipped / Total] 485 / 264 / 20 / 769:  77%|███████▋  | 770/1000 [1:12:40<21:42,  5.66s/it]Register poison methods . --> Register poison methods --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... destroyMethodNames ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] [[destroyMethodPoints]] = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , True ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } [[destroyMethodPoints]] [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } [[beanDefinition]] . addDestroyMethodPoints ( [[destroyMethodPoints]] ) ; }
[[[[Nl]]]]: Registers destroy method .

[[[[Adv]]]]: public void registerPetiteDestroyMethods ( final String beanName , String ... destroyMethodNames ) { BeanDefinition [[gluten]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[gluten]] . type ) ; if ( destroyMethodNames == null ) { destroyMethodNames = StringPool . EMPTY_ARRAY ; } int total = destroyMethodNames . length ; DestroyMethodPoint [ ] [[jinn]] = new DestroyMethodPoint [ total ] ; int i ; for ( i = 0 ; i < destroyMethodNames . length ; i ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( destroyMethodNames [ i ] , ClassUtil . EMPTY_CLASS_ARRAY , True ) ; if ( md == null ) { throw new PetiteException ( "Destroy method not found: " + [[gluten]] . type . getName ( ) + ' ' + destroyMethodNames [ i ] ) ; } [[jinn]] [ i ] = new DestroyMethodPoint ( md . getMethod ( ) ) ; } [[gluten]] . addDestroyMethodPoints ( [[jinn]] ) ; }
[[[[Nl]]]]: Registers destroy method .
--------------------------------------------- Result 766 ---------------------------------------------
Register a Petite provider . --> Register a PetiteProvider --> Socre: 1.0

[[[[Adv]]]]: public void registerPetiteProvider ( final String [[providerName]] , final String beanName , final String methodName , final Class [ ] [[arguments]] ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , [[arguments]] , True ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( [[providerName]] , beanName , md . getMethod ( ) ) ; providers . put ( [[providerName]] , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String [[friedrich]] , final String beanName , final String methodName , final Class [ ] [[admired]] ) { BeanDefinition beanDefinition = lookupBeanDefinition ( beanName ) ; if ( beanDefinition == null ) { throw new PetiteException ( "Bean not found: " + beanName ) ; } Class beanType = beanDefinition . type ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanType ) ; MethodDescriptor md = cd . getMethodDescriptor ( methodName , [[admired]] , True ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + methodName ) ; } ProviderDefinition providerDefinition = new ProviderDefinition ( [[friedrich]] , beanName , md . getMethod ( ) ) ; providers . put ( [[friedrich]] , providerDefinition ) ; }
[[[[Nl]]]]: Registers instance method provider .
--------------------------------------------- Result 767 ---------------------------------------------
Iterate over all beans of the given type . --> Handles alphabets --> Socre: 1.0

[[[[Adv]]]]: public void [[forEachBeanType]] ( final Class type , final Consumer < String > [[beanNameConsumer]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , type ) ) { [[beanNameConsumer]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .

[[[[Adv]]]]: public void [[alphabets]] ( final Class type , final Consumer < String > [[ferrying]] ) { forEachBean ( bd -> { if ( ClassUtil . isTypeOf ( bd . type , type ) ) { [[ferrying]] . accept ( bd . name ) ; } } ) ; }
[[[[Nl]]]]: Iterates all beans that are of given type .
--------------------------------------------- Result 768 ---------------------------------------------
Define a set of parameters . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[defineParameters]] ( final Map < ? , ? > [[properties]] ) { for ( Map . Entry < ? , ? > [[entry]] : [[properties]] . entrySet ( ) ) { defineParameter ( [[entry]] . getKey ( ) . toString ( ) , [[entry]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .

[[[[Adv]]]]: public void [[obsequious]] ( final Map < ? , ? > [[hansom]] ) { for ( Map . Entry < ? , ? > [[forefathers]] : [[hansom]] . entrySet ( ) ) { defineParameter ( [[forefathers]] . getKey ( ) . toString ( ) , [[forefathers]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Defines many parameters at once .
--------------------------------------------- Result 769 ---------------------------------------------
Registers the Petite init methods for the given bean . --> Writes out a bean definition to an existing bean definition --> Socre: 1.0

[[[[Adv]]]]: public void [[registerPetiteInitMethods]] ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition [[beanDefinition]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[beanDefinition]] . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int [[total]] = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ [[total]] ] ; int [[i]] ; for ( [[i]] = 0 ; [[i]] < initMethodNames . length ; [[i]] ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ [[i]] ] , ClassUtil . EMPTY_CLASS_ARRAY , True ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + [[beanDefinition]] . type . getName ( ) + ' ' + initMethodNames [ [[i]] ] ) ; } initMethodPoints [ [[i]] ] = new InitMethodPoint ( md . getMethod ( ) , [[i]] , invocationStrategy ) ; } [[beanDefinition]] . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .

[[[[Adv]]]]: public void [[outwitted]] ( final String beanName , final InitMethodInvocationStrategy invocationStrategy , String ... initMethodNames ) { BeanDefinition [[chronic]] = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( [[chronic]] . type ) ; if ( initMethodNames == null ) { initMethodNames = StringPool . EMPTY_ARRAY ; } int [[presumptuous]] = initMethodNames . length ; InitMethodPoint [ ] initMethodPoints = new InitMethodPoint [ [[presumptuous]] ] ; int [[talk]] ; for ( [[talk]] = 0 ; [[talk]] < initMethodNames . length ; [[talk]] ++ ) { MethodDescriptor md = cd . getMethodDescriptor ( initMethodNames [ [[talk]] ] , ClassUtil . EMPTY_CLASS_ARRAY , True ) ; if ( md == null ) { throw new PetiteException ( "Init method not found: " + [[chronic]] . type . getName ( ) + ' ' + initMethodNames [ [[talk]] ] ) ; } initMethodPoints [ [[talk]] ] = new InitMethodPoint ( md . getMethod ( ) , [[talk]] , invocationStrategy ) ; } [[chronic]] . addInitMethodPoints ( initMethodPoints ) ; }
[[[[Nl]]]]: Registers init method .
--------------------------------------------- Result 770 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 485 / 265 / 20 / 770:  77%|███████▋  | 770/1000 [1:12:40<21:42,  5.66s/it][Succeeded / Failed / Skipped / Total] 485 / 265 / 20 / 770:  77%|███████▋  | 771/1000 [1:12:44<21:36,  5.66s/it][Succeeded / Failed / Skipped / Total] 485 / 266 / 20 / 771:  77%|███████▋  | 771/1000 [1:12:44<21:36,  5.66s/it][Succeeded / Failed / Skipped / Total] 485 / 266 / 20 / 771:  77%|███████▋  | 772/1000 [1:12:48<21:30,  5.66s/it][Succeeded / Failed / Skipped / Total] 486 / 266 / 20 / 772:  77%|███████▋  | 772/1000 [1:12:48<21:30,  5.66s/it][Succeeded / Failed / Skipped / Total] 486 / 266 / 20 / 772:  77%|███████▋  | 773/1000 [1:12:49<21:23,  5.65s/it][Succeeded / Failed / Skipped / Total] 487 / 266 / 20 / 773:  77%|███████▋  | 773/1000 [1:12:49<21:23,  5.65s/it][Succeeded / Failed / Skipped / Total] 487 / 266 / 20 / 773:  77%|███████▋  | 774/1000 [1:13:01<21:19,  5.66s/it][Succeeded / Failed / Skipped / Total] 488 / 266 / 20 / 774:  77%|███████▋  | 774/1000 [1:13:01<21:19,  5.66s/it][Succeeded / Failed / Skipped / Total] 488 / 266 / 20 / 774:  78%|███████▊  | 775/1000 [1:13:05<21:13,  5.66s/it][Succeeded / Failed / Skipped / Total] 489 / 266 / 20 / 775:  78%|███████▊  | 775/1000 [1:13:05<21:13,  5.66s/it][Succeeded / Failed / Skipped / Total] 489 / 266 / 20 / 775:  78%|███████▊  | 776/1000 [1:13:10<21:07,  5.66s/it]Register a method injection point . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[registerPetiteMethodInjectionPoint]] ( final String beanName , final String methodName , final Class [ ] [[arguments]] , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method [[method]] = null ; if ( [[arguments]] == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } [[method]] = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , [[arguments]] , True ) ; if ( md != null ) { [[method]] = md . getMethod ( ) ; } } if ( [[method]] == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] [[ref]] = referencesResolver . resolveReferenceFromValues ( [[method]] , references ) ; MethodInjectionPoint [[mip]] = new MethodInjectionPoint ( [[method]] , [[ref]] ) ; beanDefinition . addMethodInjectionPoint ( [[mip]] ) ; }
[[[[Nl]]]]: Registers method injection point .

[[[[Adv]]]]: public void [[alison]] ( final String beanName , final String methodName , final Class [ ] [[dobby]] , final String [ ] references ) { BeanDefinition beanDefinition = lookupExistingBeanDefinition ( beanName ) ; ClassDescriptor cd = ClassIntrospector . get ( ) . lookup ( beanDefinition . type ) ; Method [[maniacal]] = null ; if ( [[dobby]] == null ) { MethodDescriptor [ ] methods = cd . getAllMethodDescriptors ( methodName ) ; if ( methods != null && methods . length > 0 ) { if ( methods . length > 1 ) { throw new PetiteException ( methods . length + " suitable methods found as injection points for: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } [[maniacal]] = methods [ 0 ] . getMethod ( ) ; } } else { MethodDescriptor md = cd . getMethodDescriptor ( methodName , [[dobby]] , True ) ; if ( md != null ) { [[maniacal]] = md . getMethod ( ) ; } } if ( [[maniacal]] == null ) { throw new PetiteException ( "Method not found: " + beanDefinition . type . getName ( ) + ' ' + methodName ) ; } BeanReferences [ ] [[badge]] = referencesResolver . resolveReferenceFromValues ( [[maniacal]] , references ) ; MethodInjectionPoint [[angel]] = new MethodInjectionPoint ( [[maniacal]] , [[badge]] ) ; beanDefinition . addMethodInjectionPoint ( [[angel]] ) ; }
[[[[Nl]]]]: Registers method injection point .
--------------------------------------------- Result 771 ---------------------------------------------
Register a Petite provider . --> [[[FAILED]]]

[[[[Adv]]]]: public void registerPetiteProvider ( final String [[providerName]] , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor [[cd]] = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = [[cd]] . getMethodDescriptor ( staticMethodName , arguments , True ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition [[providerDefinition]] = new ProviderDefinition ( [[providerName]] , md . getMethod ( ) ) ; providers . put ( [[providerName]] , [[providerDefinition]] ) ; }
[[[[Nl]]]]: Registers static method provider .

[[[[Adv]]]]: public void registerPetiteProvider ( final String [[inestimable]] , final Class type , final String staticMethodName , final Class [ ] arguments ) { ClassDescriptor [[peaches]] = ClassIntrospector . get ( ) . lookup ( type ) ; MethodDescriptor md = [[peaches]] . getMethodDescriptor ( staticMethodName , arguments , True ) ; if ( md == null ) { throw new PetiteException ( "Provider method not found: " + staticMethodName ) ; } ProviderDefinition [[nephilim]] = new ProviderDefinition ( [[inestimable]] , md . getMethod ( ) ) ; providers . put ( [[inestimable]] , [[nephilim]] ) ; }
[[[[Nl]]]]: Registers static method provider .
--------------------------------------------- Result 772 ---------------------------------------------
Push an integer onto the stack . --> Create a new bytecode instruction --> Socre: 1.0

[[[[Adv]]]]: public static void [[pushInt]] ( final MethodVisitor mv , final int value ) { if ( value <= 5 ) { mv . visitInsn ( ICONST_0 + value ) ; } else if ( value <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , value ) ; } else { mv . visitIntInsn ( SIPUSH , value ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .

[[[[Adv]]]]: public static void [[tomboy]] ( final MethodVisitor mv , final int value ) { if ( value <= 5 ) { mv . visitInsn ( ICONST_0 + value ) ; } else if ( value <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , value ) ; } else { mv . visitIntInsn ( SIPUSH , value ) ; } }
[[[[Nl]]]]: Pushes int value in an optimal way .
--------------------------------------------- Result 773 ---------------------------------------------
Intercept the action request . --> Rethrows an exception --> Socre: 1.0

[[[[Adv]]]]: @ Override public Object [[intercept]] ( final ActionRequest [[actionRequest]] ) throws Exception { printBefore ( [[actionRequest]] ) ; long [[startTime]] = System . currentTimeMillis ( ) ; Object result = null ; try { result = [[actionRequest]] . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long [[executionTime]] = System . currentTimeMillis ( ) - [[startTime]] ; printAfter ( [[actionRequest]] , [[executionTime]] , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .

[[[[Adv]]]]: @ Override public Object [[marjorie]] ( final ActionRequest [[rotisserie]] ) throws Exception { printBefore ( [[rotisserie]] ) ; long [[dandridge]] = System . currentTimeMillis ( ) ; Object result = null ; try { result = [[rotisserie]] . invoke ( ) ; } catch ( Exception ex ) { result = "<exception>" ; throw ex ; } catch ( Throwable th ) { result = "<throwable>" ; throw new Exception ( th ) ; } finally { long [[chama]] = System . currentTimeMillis ( ) - [[dandridge]] ; printAfter ( [[rotisserie]] , [[chama]] , result ) ; } return result ; }
[[[[Nl]]]]: Measure action invocation time .
--------------------------------------------- Result 774 ---------------------------------------------
Check that the argument index is valid . --> Spreader to spreader --> Socre: 1.0

[[[[Adv]]]]: public static void [[checkArgumentIndex]] ( final MethodInfo methodInfo , final int [[argIndex]] ) { if ( ( [[argIndex]] < 1 ) || ( [[argIndex]] > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[argIndex]] ) ; } }
[[[[Nl]]]]: Validates argument index .

[[[[Adv]]]]: public static void [[spreader]] ( final MethodInfo methodInfo , final int [[apply]] ) { if ( ( [[apply]] < 1 ) || ( [[apply]] > methodInfo . getArgumentsCount ( ) ) ) { throw new ProxettaException ( "Invalid argument index: " + [[apply]] ) ; } }
[[[[Nl]]]]: Validates argument index .
--------------------------------------------- Result 775 ---------------------------------------------
Generate advice method name . --> Generate an artefact --> Socre: 1.0

[[[[Adv]]]]: public static String [[adviceMethodName]] ( final String name , final int [[index]] ) { return ProxettaNames . methodPrefix + name + ProxettaNames . methodDivider + [[index]] ; }
[[[[Nl]]]]: Builds advice method name .

[[[[Adv]]]]: public static String [[artefact]] ( final String name , final int [[meggy]] ) { return ProxettaNames . methodPrefix + name + ProxettaNames . methodDivider + [[meggy]] ; }
[[[[Nl]]]]: Builds advice method name .
--------------------------------------------- Result 776 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 490 / 266 / 20 / 776:  78%|███████▊  | 776/1000 [1:13:10<21:07,  5.66s/it][Succeeded / Failed / Skipped / Total] 490 / 266 / 20 / 776:  78%|███████▊  | 777/1000 [1:13:16<21:01,  5.66s/it][Succeeded / Failed / Skipped / Total] 490 / 267 / 20 / 777:  78%|███████▊  | 777/1000 [1:13:16<21:01,  5.66s/it][Succeeded / Failed / Skipped / Total] 490 / 267 / 20 / 777:  78%|███████▊  | 778/1000 [1:13:17<20:54,  5.65s/it][Succeeded / Failed / Skipped / Total] 491 / 267 / 20 / 778:  78%|███████▊  | 778/1000 [1:13:17<20:54,  5.65s/it][Succeeded / Failed / Skipped / Total] 491 / 267 / 20 / 778:  78%|███████▊  | 779/1000 [1:13:31<20:51,  5.66s/it][Succeeded / Failed / Skipped / Total] 491 / 268 / 20 / 779:  78%|███████▊  | 779/1000 [1:13:31<20:51,  5.66s/it][Succeeded / Failed / Skipped / Total] 491 / 268 / 20 / 779:  78%|███████▊  | 780/1000 [1:13:37<20:45,  5.66s/it][Succeeded / Failed / Skipped / Total] 491 / 269 / 20 / 780:  78%|███████▊  | 780/1000 [1:13:37<20:45,  5.66s/it][Succeeded / Failed / Skipped / Total] 491 / 269 / 20 / 780:  78%|███████▊  | 781/1000 [1:13:43<20:40,  5.66s/it][Succeeded / Failed / Skipped / Total] 492 / 269 / 20 / 781:  78%|███████▊  | 781/1000 [1:13:43<20:40,  5.66s/it][Succeeded / Failed / Skipped / Total] 493 / 269 / 20 / 782:  78%|███████▊  | 782/1000 [1:13:43<20:33,  5.66s/it][Succeeded / Failed / Skipped / Total] 493 / 269 / 20 / 782:  78%|███████▊  | 783/1000 [1:13:45<20:26,  5.65s/it]Returns the Java version . --> Calculates the bank symbol --> Socre: 1.0

[[[[Adv]]]]: public static int [[resolveJavaVersion]] ( final int [[version]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[platformVersion]] = javaVersionNumber - 8 + 52 ; return [[version]] > [[platformVersion]] ? [[version]] : [[platformVersion]] ; }
[[[[Nl]]]]: Resolves Java version from current version .

[[[[Adv]]]]: public static int [[banky]] ( final int [[gipsies]] ) { final int javaVersionNumber = SystemUtil . info ( ) . getJavaVersionNumber ( ) ; final int [[gags]] = javaVersionNumber - 8 + 52 ; return [[gipsies]] > [[gags]] ? [[gipsies]] : [[gags]] ; }
[[[[Nl]]]]: Resolves Java version from current version .
--------------------------------------------- Result 777 ---------------------------------------------
Generate field name . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[adviceFieldName]] ( final String [[name]] , final int [[index]] ) { return ProxettaNames . fieldPrefix + [[name]] + ProxettaNames . fieldDivider + [[index]] ; }
[[[[Nl]]]]: Builds advice field name .

[[[[Adv]]]]: public static String [[preening]] ( final String [[squabbling]] , final int [[whitest]] ) { return ProxettaNames . fieldPrefix + [[squabbling]] + ProxettaNames . fieldDivider + [[whitest]] ; }
[[[[Nl]]]]: Builds advice field name .
--------------------------------------------- Result 778 ---------------------------------------------
Load virtual method arguments . -->  gobbling methods --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadVirtualMethodArguments]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .

[[[[Adv]]]]: public static void [[gobbling]] ( final MethodVisitor mv , final MethodInfo methodInfo ) { for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( mv , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKEVIRTUAL call .
--------------------------------------------- Result 779 ---------------------------------------------
load special method arguments --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadSpecialMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo ) { [[mv]] . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[mv]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .

[[[[Adv]]]]: public static void [[pooled]] ( final MethodVisitor [[caspar]] , final MethodInfo methodInfo ) { [[caspar]] . visitVarInsn ( ALOAD , 0 ) ; for ( int i = 1 ; i <= methodInfo . getArgumentsCount ( ) ; i ++ ) { loadMethodArgument ( [[caspar]] , methodInfo , i ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESPECIAL call .
--------------------------------------------- Result 780 ---------------------------------------------
Load static method arguments . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[loadStaticMethodArguments]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo ) { for ( int [[i]] = 0 ; [[i]] < methodInfo . getArgumentsCount ( ) ; [[i]] ++ ) { loadMethodArgument ( [[mv]] , methodInfo , [[i]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .

[[[[Adv]]]]: public static void [[vibrator]] ( final MethodVisitor [[caprices]] , final MethodInfo methodInfo ) { for ( int [[mop]] = 0 ; [[mop]] < methodInfo . getArgumentsCount ( ) ; [[mop]] ++ ) { loadMethodArgument ( [[caprices]] , methodInfo , [[mop]] ) ; } }
[[[[Nl]]]]: Loads all method arguments before INVOKESTATIC call .
--------------------------------------------- Result 781 ---------------------------------------------
Loads the given method at the given index . --> Binary version of BLOB --> Socre: 1.0

[[[[Adv]]]]: public static void [[loadMethodArgument]] ( final MethodVisitor [[mv]] , final MethodInfo methodInfo , final int index ) { int [[offset]] = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[mv]] . visitVarInsn ( ILOAD , [[offset]] ) ; break ; case ' ' : [[mv]] . visitVarInsn ( LLOAD , [[offset]] ) ; break ; case ' ' : [[mv]] . visitVarInsn ( FLOAD , [[offset]] ) ; break ; case ' ' : [[mv]] . visitVarInsn ( DLOAD , [[offset]] ) ; break ; default : [[mv]] . visitVarInsn ( ALOAD , [[offset]] ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[bessy]] ( final MethodVisitor [[massu]] , final MethodInfo methodInfo , final int index ) { int [[banky]] = methodInfo . getArgumentOffset ( index ) ; int type = methodInfo . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[massu]] . visitVarInsn ( ILOAD , [[banky]] ) ; break ; case ' ' : [[massu]] . visitVarInsn ( LLOAD , [[banky]] ) ; break ; case ' ' : [[massu]] . visitVarInsn ( FLOAD , [[banky]] ) ; break ; case ' ' : [[massu]] . visitVarInsn ( DLOAD , [[banky]] ) ; break ; default : [[massu]] . visitVarInsn ( ALOAD , [[banky]] ) ; } }
[[[[Nl]]]]: Loads one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 782 ---------------------------------------------
Stores a method argument at the given index . --> implements the visitor --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeMethodArgument]] ( final MethodVisitor [[mv]] , final MethodInfo [[methodInfo]] , final int index ) { int offset = [[methodInfo]] . getArgumentOffset ( index ) ; int type = [[methodInfo]] . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[mv]] . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : [[mv]] . visitVarInsn ( DSTORE , offset ) ; break ; default : [[mv]] . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .

[[[[Adv]]]]: public static void [[angelou]] ( final MethodVisitor [[aback]] , final MethodInfo [[bron]] , final int index ) { int offset = [[bron]] . getArgumentOffset ( index ) ; int type = [[bron]] . getArgument ( index ) . getOpcode ( ) ; switch ( type ) { case ' ' : break ; case ' ' : case ' ' : case ' ' : case ' ' : case ' ' : [[aback]] . visitVarInsn ( ISTORE , offset ) ; break ; case ' ' : [[aback]] . visitVarInsn ( LSTORE , offset ) ; break ; case ' ' : [[aback]] . visitVarInsn ( FSTORE , offset ) ; break ; case ' ' : [[aback]] . visitVarInsn ( DSTORE , offset ) ; break ; default : [[aback]] . visitVarInsn ( ASTORE , offset ) ; } }
[[[[Nl]]]]: Stores one argument . Index is 1 - based . No conversion occurs .
--------------------------------------------- Result 783 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 494 / 269 / 20 / 783:  78%|███████▊  | 783/1000 [1:13:45<20:26,  5.65s/it][Succeeded / Failed / Skipped / Total] 495 / 269 / 20 / 784:  78%|███████▊  | 784/1000 [1:13:49<20:20,  5.65s/it][Succeeded / Failed / Skipped / Total] 495 / 269 / 20 / 784:  78%|███████▊  | 785/1000 [1:13:50<20:13,  5.64s/it][Succeeded / Failed / Skipped / Total] 496 / 269 / 20 / 785:  78%|███████▊  | 785/1000 [1:13:50<20:13,  5.64s/it][Succeeded / Failed / Skipped / Total] 497 / 269 / 20 / 786:  79%|███████▊  | 786/1000 [1:13:57<20:08,  5.65s/it][Succeeded / Failed / Skipped / Total] 497 / 269 / 20 / 786:  79%|███████▊  | 787/1000 [1:14:09<20:04,  5.65s/it][Succeeded / Failed / Skipped / Total] 498 / 269 / 20 / 787:  79%|███████▊  | 787/1000 [1:14:09<20:04,  5.65s/it][Succeeded / Failed / Skipped / Total] 498 / 269 / 20 / 787:  79%|███████▉  | 788/1000 [1:14:12<19:57,  5.65s/it]Prepares the return value . --> helper method --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareReturnValue]] ( final MethodVisitor mv , final MethodInfo methodInfo , int [[varOffset]] ) { [[varOffset]] += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .

[[[[Adv]]]]: public static void [[hallow]] ( final MethodVisitor mv , final MethodInfo methodInfo , int [[aeronautics]] ) { [[aeronautics]] += methodInfo . getAllArgumentsSize ( ) ; switch ( methodInfo . getReturnType ( ) . getOpcode ( ) ) { case ' ' : mv . visitInsn ( ACONST_NULL ) ; break ; case ' ' : AsmUtil . valueOfByte ( mv ) ; break ; case ' ' : AsmUtil . valueOfCharacter ( mv ) ; break ; case ' ' : AsmUtil . valueOfShort ( mv ) ; break ; case ' ' : AsmUtil . valueOfInteger ( mv ) ; break ; case ' ' : AsmUtil . valueOfBoolean ( mv ) ; break ; case ' ' : AsmUtil . valueOfLong ( mv ) ; break ; case ' ' : AsmUtil . valueOfFloat ( mv ) ; break ; case ' ' : AsmUtil . valueOfDouble ( mv ) ; break ; } }
[[[[Nl]]]]: Prepares return value .
--------------------------------------------- Result 784 ---------------------------------------------
Store into an array . --> Store instructions --> Socre: 1.0

[[[[Adv]]]]: public static void storeIntoArray ( final MethodVisitor mv , final Class [[componentType]] ) { if ( [[componentType]] == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( [[componentType]] == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( [[componentType]] == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( [[componentType]] == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( [[componentType]] == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( [[componentType]] == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( [[componentType]] == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( [[componentType]] == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .

[[[[Adv]]]]: public static void storeIntoArray ( final MethodVisitor mv , final Class [[anticipating]] ) { if ( [[anticipating]] == int . class ) { mv . visitInsn ( IASTORE ) ; return ; } if ( [[anticipating]] == long . class ) { mv . visitInsn ( LASTORE ) ; return ; } if ( [[anticipating]] == float . class ) { mv . visitInsn ( FASTORE ) ; return ; } if ( [[anticipating]] == double . class ) { mv . visitInsn ( DASTORE ) ; return ; } if ( [[anticipating]] == byte . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( [[anticipating]] == short . class ) { mv . visitInsn ( SASTORE ) ; return ; } if ( [[anticipating]] == boolean . class ) { mv . visitInsn ( BASTORE ) ; return ; } if ( [[anticipating]] == char . class ) { mv . visitInsn ( CASTORE ) ; return ; } mv . visitInsn ( AASTORE ) ; }
[[[[Nl]]]]: Stores element on stack into an array .
--------------------------------------------- Result 785 ---------------------------------------------
Creates a method signature key . --> generate attributes --> Socre: 1.0

[[[[Adv]]]]: public static String [[createMethodSignaturesKey]] ( final int access , final String methodName , final String [[description]] , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( [[description]] ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .

[[[[Adv]]]]: public static String [[attics]] ( final int access , final String methodName , final String [[misdemeanors]] , final String className ) { return new StringBand ( 7 ) . append ( access ) . append ( COLON ) . append ( [[misdemeanors]] ) . append ( StringPool . UNDERSCORE ) . append ( className ) . append ( StringPool . HASH ) . append ( methodName ) . toString ( ) ; }
[[[[Nl]]]]: Creates unique key for method signatures map .
--------------------------------------------- Result 786 ---------------------------------------------
Generates instructions for a new array type . --> Hijack instructions --> Socre: 1.0

[[[[Adv]]]]: public static void [[newArray]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .

[[[[Adv]]]]: public static void [[heisenberg]] ( final MethodVisitor mv , final Class componentType ) { if ( componentType == int . class ) { mv . visitIntInsn ( NEWARRAY , T_INT ) ; return ; } if ( componentType == long . class ) { mv . visitIntInsn ( NEWARRAY , T_LONG ) ; return ; } if ( componentType == float . class ) { mv . visitIntInsn ( NEWARRAY , T_FLOAT ) ; return ; } if ( componentType == double . class ) { mv . visitIntInsn ( NEWARRAY , T_DOUBLE ) ; return ; } if ( componentType == byte . class ) { mv . visitIntInsn ( NEWARRAY , T_BYTE ) ; return ; } if ( componentType == short . class ) { mv . visitIntInsn ( NEWARRAY , T_SHORT ) ; return ; } if ( componentType == boolean . class ) { mv . visitIntInsn ( NEWARRAY , T_BOOLEAN ) ; return ; } if ( componentType == char . class ) { mv . visitIntInsn ( NEWARRAY , T_CHAR ) ; return ; } mv . visitTypeInsn ( ANEWARRAY , AsmUtil . typeToSignature ( componentType ) ) ; }
[[[[Nl]]]]: Creates new array .
--------------------------------------------- Result 787 ---------------------------------------------
Extract encoding from content type . --> Determines the ordnummer --> Socre: 1.0

[[[[Adv]]]]: public static String [[extractEncoding]] ( final String [[contentType]] , String defaultEncoding ) { String encoding = [[extractEncoding]] ( [[contentType]] ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .

[[[[Adv]]]]: public static String [[ordnung]] ( final String [[flunk]] , String defaultEncoding ) { String encoding = [[ordnung]] ( [[flunk]] ) ; if ( encoding == null ) { if ( defaultEncoding == null ) { defaultEncoding = JoddCore . encoding ; } encoding = defaultEncoding ; } return encoding ; }
[[[[Nl]]]]: Extracts encoding from a given content type .
--------------------------------------------- Result 788 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 499 / 269 / 20 / 788:  79%|███████▉  | 788/1000 [1:14:12<19:57,  5.65s/it][Succeeded / Failed / Skipped / Total] 499 / 269 / 20 / 788:  79%|███████▉  | 789/1000 [1:14:20<19:52,  5.65s/it][Succeeded / Failed / Skipped / Total] 500 / 269 / 20 / 789:  79%|███████▉  | 789/1000 [1:14:20<19:52,  5.65s/it][Succeeded / Failed / Skipped / Total] 500 / 269 / 20 / 789:  79%|███████▉  | 790/1000 [1:14:22<19:46,  5.65s/it][Succeeded / Failed / Skipped / Total] 501 / 269 / 20 / 790:  79%|███████▉  | 790/1000 [1:14:22<19:46,  5.65s/it][Succeeded / Failed / Skipped / Total] 501 / 269 / 20 / 790:  79%|███████▉  | 791/1000 [1:14:37<19:43,  5.66s/it][Succeeded / Failed / Skipped / Total] 501 / 270 / 20 / 791:  79%|███████▉  | 791/1000 [1:14:37<19:43,  5.66s/it][Succeeded / Failed / Skipped / Total] 501 / 270 / 20 / 791:  79%|███████▉  | 792/1000 [1:14:43<19:37,  5.66s/it][Succeeded / Failed / Skipped / Total] 502 / 270 / 20 / 792:  79%|███████▉  | 792/1000 [1:14:43<19:37,  5.66s/it][Succeeded / Failed / Skipped / Total] 502 / 270 / 20 / 792:  79%|███████▉  | 793/1000 [1:14:55<19:33,  5.67s/it][Succeeded / Failed / Skipped / Total] 502 / 271 / 20 / 793:  79%|███████▉  | 793/1000 [1:14:55<19:33,  5.67s/it][Succeeded / Failed / Skipped / Total] 502 / 271 / 20 / 793:  79%|███████▉  | 794/1000 [1:14:56<19:26,  5.66s/it][Succeeded / Failed / Skipped / Total] 503 / 271 / 20 / 794:  79%|███████▉  | 794/1000 [1:14:56<19:26,  5.66s/it][Succeeded / Failed / Skipped / Total] 503 / 271 / 20 / 794:  80%|███████▉  | 795/1000 [1:14:59<19:20,  5.66s/it]Requests authentication . --> Performs a blackburn --> Socre: 1.0

[[[[Adv]]]]: public static void [[requireAuthentication]] ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .

[[[[Adv]]]]: public static void [[blackburn]] ( final HttpServletResponse resp , final String realm ) throws IOException { resp . setHeader ( WWW_AUTHENTICATE , "Basic realm=\"" + realm + ' ' ) ; resp . sendError ( HttpServletResponse . SC_UNAUTHORIZED ) ; }
[[[[Nl]]]]: Sends correct headers to require basic authentication for the given realm .
--------------------------------------------- Result 789 ---------------------------------------------
Sets the response . --> Set the content type --> Socre: 1.0

[[[[Adv]]]]: public static void [[prepareResponse]] ( final HttpServletResponse response , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .

[[[[Adv]]]]: public static void [[ropin]] ( final HttpServletResponse response , final String fileName , String mimeType , final int fileSize ) { if ( ( mimeType == null ) && ( fileName != null ) ) { String extension = FileNameUtil . getExtension ( fileName ) ; mimeType = MimeTypes . getMimeType ( extension ) ; } if ( mimeType != null ) { response . setContentType ( mimeType ) ; } if ( fileSize >= 0 ) { response . setContentLength ( fileSize ) ; }
[[[[Nl]]]]: Prepares response for various provided data .
--------------------------------------------- Result 790 ---------------------------------------------
Resolve bearer token . --> Extracts aeronautics from request --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveAuthBearerToken]] ( final HttpServletRequest [[request]] ) { String [[header]] = [[request]] . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[header]] == null ) { return null ; } int ndx = [[header]] . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return [[header]] . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .

[[[[Adv]]]]: public static String [[aeronautics]] ( final HttpServletRequest [[baguette]] ) { String [[baggies]] = [[baguette]] . getHeader ( HEADER_AUTHORIZATION ) ; if ( [[baggies]] == null ) { return null ; } int ndx = [[baggies]] . indexOf ( "Bearer " ) ; if ( ndx == - 1 ) { return null ; } return [[baggies]] . substring ( ndx + 7 ) . trim ( ) ; }
[[[[Nl]]]]: Returns Bearer token .
--------------------------------------------- Result 791 ---------------------------------------------
Prepares the response . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[prepareDownload]] ( final HttpServletResponse response , final File [[file]] , final String mimeType ) { if ( ! [[file]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[file]] ) ; } if ( [[file]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[file]] ) ; } prepareResponse ( response , [[file]] . getAbsolutePath ( ) , mimeType , ( int ) [[file]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .

[[[[Adv]]]]: public static void [[browsing]] ( final HttpServletResponse response , final File [[affront]] , final String mimeType ) { if ( ! [[affront]] . exists ( ) ) { throw new IllegalArgumentException ( "File not found: " + [[affront]] ) ; } if ( [[affront]] . length ( ) > Integer . MAX_VALUE ) { throw new IllegalArgumentException ( "File too big: " + [[affront]] ) ; } prepareResponse ( response , [[affront]] . getAbsolutePath ( ) , mimeType , ( int ) [[affront]] . length ( ) ) ; }
[[[[Nl]]]]: Prepares response for file download with provided mime type .
--------------------------------------------- Result 792 ---------------------------------------------
Get all cookies with the given name . --> Checks for a cookie with the given cookieName --> Socre: 1.0

[[[[Adv]]]]: public static Cookie [ ] [[getAllCookies]] ( final HttpServletRequest [[request]] , final String cookieName ) { Cookie [ ] cookies = [[request]] . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie [[cookie]] : cookies ) { if ( [[cookie]] . getName ( ) . equals ( cookieName ) ) { list . add ( [[cookie]] ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .

[[[[Adv]]]]: public static Cookie [ ] [[caucasians]] ( final HttpServletRequest [[clod]] , final String cookieName ) { Cookie [ ] cookies = [[clod]] . getCookies ( ) ; if ( cookies == null ) { return null ; } ArrayList < Cookie > list = new ArrayList <> ( cookies . length ) ; for ( Cookie [[flamenco]] : cookies ) { if ( [[flamenco]] . getName ( ) . equals ( cookieName ) ) { list . add ( [[flamenco]] ) ; } } if ( list . isEmpty ( ) ) { return null ; } return list . toArray ( new Cookie [ 0 ] ) ; }
[[[[Nl]]]]: Returns all cookies from client that matches provided name .
--------------------------------------------- Result 793 ---------------------------------------------
Read request body from request . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[readRequestBodyFromReader]] ( final HttpServletRequest [[request]] ) throws IOException { BufferedReader buff = [[request]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[matron]] ( final HttpServletRequest [[barin]] ) throws IOException { BufferedReader buff = [[barin]] . getReader ( ) ; StringWriter out = new StringWriter ( ) ; StreamUtil . copy ( buff , out ) ; return out . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request reader . Once body is read it cannot be read again!
--------------------------------------------- Result 794 ---------------------------------------------
Checks if flags are empty . --> Returns true if the given carne --> Socre: 1.0

[[[[Adv]]]]: public static boolean [[isEmptyFlags]] ( Flags [[flags]] ) { if ( [[flags]] == null ) return "[[True]]" == "[[True]]" ; Flags . Flag [ ] [[systemFlags]] = [[flags]] . getSystemFlags ( ) ; if ( [[systemFlags]] != null && [[systemFlags]] . length > 0 ) { return "[[False]]" != "[[False]]" ; } String [ ] userFlags = [[flags]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "[[False]]" != "[[False]]" ; } return "[[True]]" == "[[True]]" ; }
[[[[Nl]]]]: Check whether flags is a empty flags

[[[[Adv]]]]: public static boolean [[bullfighter]] ( Flags [[carne]] ) { if ( [[carne]] == null ) return "[["Oats" == "Oats"]]" == "[["Oats" == "Oats"]]" ; Flags . Flag [ ] [[caucasians]] = [[carne]] . getSystemFlags ( ) ; if ( [[caucasians]] != null && [[caucasians]] . length > 0 ) { return "[["Hamlet" != "Hamlet"]]" != "[["Hamlet" != "Hamlet"]]" ; } String [ ] userFlags = [[carne]] . getUserFlags ( ) ; if ( userFlags != null && userFlags . length > 0 ) { return "[["Hamlet" != "Hamlet"]]" != "[["Hamlet" != "Hamlet"]]" ; } return "[["Oats" == "Oats"]]" == "[["Oats" == "Oats"]]" ; }
[[[[Nl]]]]: Check whether flags is a empty flags
--------------------------------------------- Result 795 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 504 / 271 / 20 / 795:  80%|███████▉  | 795/1000 [1:14:59<19:20,  5.66s/it][Succeeded / Failed / Skipped / Total] 504 / 271 / 20 / 795:  80%|███████▉  | 796/1000 [1:15:17<19:17,  5.68s/it][Succeeded / Failed / Skipped / Total] 505 / 271 / 20 / 796:  80%|███████▉  | 796/1000 [1:15:17<19:17,  5.68s/it][Succeeded / Failed / Skipped / Total] 505 / 271 / 20 / 796:  80%|███████▉  | 797/1000 [1:15:20<19:11,  5.67s/it][Succeeded / Failed / Skipped / Total] 506 / 271 / 20 / 797:  80%|███████▉  | 797/1000 [1:15:20<19:11,  5.67s/it][Succeeded / Failed / Skipped / Total] 506 / 271 / 20 / 797:  80%|███████▉  | 798/1000 [1:15:20<19:04,  5.66s/it][Succeeded / Failed / Skipped / Total] 507 / 271 / 20 / 798:  80%|███████▉  | 798/1000 [1:15:20<19:04,  5.66s/it][Succeeded / Failed / Skipped / Total] 507 / 271 / 20 / 798:  80%|███████▉  | 799/1000 [1:15:24<18:58,  5.66s/it][Succeeded / Failed / Skipped / Total] 508 / 271 / 20 / 799:  80%|███████▉  | 799/1000 [1:15:24<18:58,  5.66s/it][Succeeded / Failed / Skipped / Total] 508 / 271 / 20 / 799:  80%|████████  | 800/1000 [1:15:36<18:54,  5.67s/it][Succeeded / Failed / Skipped / Total] 508 / 272 / 20 / 800:  80%|████████  | 800/1000 [1:15:36<18:54,  5.67s/it][Succeeded / Failed / Skipped / Total] 508 / 272 / 20 / 800:  80%|████████  | 801/1000 [1:15:37<18:47,  5.66s/it]Read request body from request . --> Returns an empty string as a string --> Socre: 1.0

[[[[Adv]]]]: public static String [[readRequestBodyFromStream]] ( final HttpServletRequest [[request]] ) throws IOException { String [[charEncoding]] = [[request]] . getCharacterEncoding ( ) ; if ( [[charEncoding]] == null ) { [[charEncoding]] = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = [[request]] . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , [[charEncoding]] ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!

[[[[Adv]]]]: public static String [[blanked]] ( final HttpServletRequest [[eeny]] ) throws IOException { String [[clinging]] = [[eeny]] . getCharacterEncoding ( ) ; if ( [[clinging]] == null ) { [[clinging]] = JoddCore . encoding ; } CharArrayWriter charArrayWriter = new CharArrayWriter ( ) ; BufferedReader bufferedReader = null ; try { InputStream inputStream = [[eeny]] . getInputStream ( ) ; if ( inputStream != null ) { bufferedReader = new BufferedReader ( new InputStreamReader ( inputStream , [[clinging]] ) ) ; StreamUtil . copy ( bufferedReader , charArrayWriter ) ; } else { return StringPool . EMPTY ; } } finally { StreamUtil . close ( bufferedReader ) ; } return charArrayWriter . toString ( ) ; }
[[[[Nl]]]]: Reads HTTP request body using the request stream . Once body is read it cannot be read again!
--------------------------------------------- Result 796 ---------------------------------------------
Stores the context path in the servlet context . --> Alibis alibi --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final ServletContext [[servletContext]] , final String [[contextPathVariableName]] ) { String ctxPath = getContextPath ( [[servletContext]] ) ; [[servletContext]] . setAttribute ( [[contextPathVariableName]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .

[[[[Adv]]]]: public static void [[alibis]] ( final ServletContext [[gravel]] , final String [[confectioner]] ) { String ctxPath = getContextPath ( [[gravel]] ) ; [[gravel]] . setAttribute ( [[confectioner]] , ctxPath ) ; }
[[[[Nl]]]]: Stores context path in page context and request scope .
--------------------------------------------- Result 797 ---------------------------------------------
Stores the context path in the request context . --> Sets the roster attributes for the page --> Socre: 1.0

[[[[Adv]]]]: public static void [[storeContextPath]] ( final PageContext pageContext , final String [[contextPathVariableName]] ) { String [[ctxPath]] = getContextPath ( pageContext ) ; HttpServletRequest [[request]] = ( HttpServletRequest ) pageContext . getRequest ( ) ; [[request]] . setAttribute ( [[contextPathVariableName]] , [[ctxPath]] ) ; ServletContext [[servletContext]] = pageContext . getServletContext ( ) ; [[servletContext]] . setAttribute ( [[contextPathVariableName]] , [[ctxPath]] ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .

[[[[Adv]]]]: public static void [[arnie]] ( final PageContext pageContext , final String [[rubes]] ) { String [[razzmatazz]] = getContextPath ( pageContext ) ; HttpServletRequest [[hansom]] = ( HttpServletRequest ) pageContext . getRequest ( ) ; [[hansom]] . setAttribute ( [[rubes]] , [[razzmatazz]] ) ; ServletContext [[asteroids]] = pageContext . getServletContext ( ) ; [[asteroids]] . setAttribute ( [[rubes]] , [[razzmatazz]] ) ; }
[[[[Nl]]]]: Stores context path in server context and request scope .
--------------------------------------------- Result 798 ---------------------------------------------
Prepare the parameter array . --> Helper to barbers --> Socre: 1.0

[[[[Adv]]]]: public static String [ ] [[prepareParameters]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int [[total]] = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == [[total]] ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .

[[[[Adv]]]]: public static String [ ] [[barbershop]] ( final String [ ] paramValues , final boolean treatEmptyParamsAsNull , final boolean ignoreEmptyRequestParams ) { if ( treatEmptyParamsAsNull || ignoreEmptyRequestParams ) { int emptyCount = 0 ; int [[apparatus]] = paramValues . length ; for ( int i = 0 ; i < paramValues . length ; i ++ ) { String paramValue = paramValues [ i ] ; if ( paramValue == null ) { emptyCount ++ ; continue ; } if ( paramValue . length ( ) == 0 ) { emptyCount ++ ; if ( treatEmptyParamsAsNull ) { paramValue = null ; } } paramValues [ i ] = paramValue ; } if ( ( ignoreEmptyRequestParams ) && ( emptyCount == [[apparatus]] ) ) { return null ; } } return paramValues ; }
[[[[Nl]]]]: Prepares parameters for further processing .
--------------------------------------------- Result 799 ---------------------------------------------
Checks if the given parameter is a getter parameter . --> Determines whether the given name matches the given query string --> Socre: 1.0

[[[[Adv]]]]: public boolean [[isGetParameter]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String [[query]] = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( [[query]] , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return True ; } } return "[[False]]" != "[[False]]" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .

[[[[Adv]]]]: public boolean [[gdansk]] ( final HttpServletRequest request , String name ) { name = URLCoder . encodeQueryParam ( name ) + ' ' ; String [[paced]] = request . getQueryString ( ) ; String [ ] nameValuePairs = StringUtil . splitc ( [[paced]] , ' ' ) ; for ( String nameValuePair : nameValuePairs ) { if ( nameValuePair . startsWith ( name ) ) { return True ; } } return "[["Sugarless" != "Sugarless"]]" != "[["Sugarless" != "Sugarless"]]" ; }
[[[[Nl]]]]: Checks if some parameter is in GET parameters .
--------------------------------------------- Result 800 ---------------------------------------------
Invokes a tag . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[invokeBody]] ( final JspFragment [[body]] ) throws JspException { if ( [[body]] == null ) { return ; } try { [[body]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .

[[[[Adv]]]]: public static void [[tatami]] ( final JspFragment [[folies]] ) throws JspException { if ( [[folies]] == null ) { return ; } try { [[folies]] . invoke ( null ) ; } catch ( IOException ioex ) { throw new JspException ( "Tag body failed" , ioex ) ; } }
[[[[Nl]]]]: Invokes tag body .
--------------------------------------------- Result 801 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 509 / 272 / 20 / 801:  80%|████████  | 801/1000 [1:15:37<18:47,  5.66s/it][Succeeded / Failed / Skipped / Total] 509 / 272 / 20 / 801:  80%|████████  | 802/1000 [1:15:48<18:42,  5.67s/it][Succeeded / Failed / Skipped / Total] 509 / 273 / 20 / 802:  80%|████████  | 802/1000 [1:15:48<18:42,  5.67s/it][Succeeded / Failed / Skipped / Total] 509 / 273 / 20 / 802:  80%|████████  | 803/1000 [1:15:48<18:35,  5.66s/it][Succeeded / Failed / Skipped / Total] 509 / 274 / 20 / 803:  80%|████████  | 803/1000 [1:15:48<18:35,  5.66s/it][Succeeded / Failed / Skipped / Total] 509 / 274 / 20 / 803:  80%|████████  | 804/1000 [1:16:00<18:31,  5.67s/it][Succeeded / Failed / Skipped / Total] 510 / 274 / 20 / 804:  80%|████████  | 804/1000 [1:16:00<18:31,  5.67s/it][Succeeded / Failed / Skipped / Total] 510 / 274 / 20 / 804:  80%|████████  | 805/1000 [1:16:02<18:25,  5.67s/it][Succeeded / Failed / Skipped / Total] 511 / 274 / 20 / 805:  80%|████████  | 805/1000 [1:16:02<18:25,  5.67s/it][Succeeded / Failed / Skipped / Total] 511 / 274 / 20 / 805:  81%|████████  | 806/1000 [1:16:02<18:18,  5.66s/it][Succeeded / Failed / Skipped / Total] 512 / 274 / 20 / 806:  81%|████████  | 806/1000 [1:16:02<18:18,  5.66s/it][Succeeded / Failed / Skipped / Total] 512 / 274 / 20 / 806:  81%|████████  | 807/1000 [1:16:13<18:13,  5.67s/it][Succeeded / Failed / Skipped / Total] 513 / 274 / 20 / 807:  81%|████████  | 807/1000 [1:16:13<18:13,  5.67s/it][Succeeded / Failed / Skipped / Total] 513 / 274 / 20 / 807:  81%|████████  | 808/1000 [1:16:15<18:07,  5.66s/it][Succeeded / Failed / Skipped / Total] 514 / 274 / 20 / 808:  81%|████████  | 808/1000 [1:16:15<18:07,  5.66s/it][Succeeded / Failed / Skipped / Total] 514 / 274 / 20 / 808:  81%|████████  | 809/1000 [1:16:16<18:00,  5.66s/it]Render the given fragment . --> Returns the text of the leder --> Socre: 1.0

[[[[Adv]]]]: public static char [ ] [[renderBody]] ( final JspFragment [[body]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[body]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .

[[[[Adv]]]]: public static char [ ] [[mesa]] ( final JspFragment [[lederhosen]] ) throws JspException { FastCharArrayWriter writer = new FastCharArrayWriter ( ) ; invokeBody ( [[lederhosen]] , writer ) ; return writer . toCharArray ( ) ; }
[[[[Nl]]]]: Renders tag body to char array .
--------------------------------------------- Result 802 ---------------------------------------------
Renders the given fragment to a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[renderBodyToString]] ( final JspFragment [[body]] ) throws JspException { char [ ] result = renderBody ( [[body]] ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .

[[[[Adv]]]]: public static String [[lifespan]] ( final JspFragment [[grump]] ) throws JspException { char [ ] result = renderBody ( [[grump]] ) ; return new String ( result ) ; }
[[[[Nl]]]]: Renders tag body to string .
--------------------------------------------- Result 803 ---------------------------------------------
Call destroy method . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[callDestroyMethods]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .

[[[[Adv]]]]: public void [[kapital]] ( ) { for ( final DestroyMethodPoint destroyMethodPoint : beanDefinition . destroyMethodPoints ( ) ) { try { destroyMethodPoint . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid destroy method: " + destroyMethodPoint . method , ex ) ; } } }
[[[[Nl]]]]: Calls destroy methods on given BeanData . Destroy methods are called without any order .
--------------------------------------------- Result 804 ---------------------------------------------
Inject parameters . --> inject bean definition --> Socre: 1.0

[[[[Adv]]]]: public void injectParams ( final ParamManager [[paramManager]] , final boolean [[implicitParamInjection]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[implicitParamInjection]] ) {
[[[[Nl]]]]: Injects all parameters .

[[[[Adv]]]]: public void injectParams ( final ParamManager [[clemency]] , final boolean [[bitchy]] ) { if ( beanDefinition . name == null ) { return ; } if ( [[bitchy]] ) {
[[[[Nl]]]]: Injects all parameters .
--------------------------------------------- Result 805 ---------------------------------------------
Invokes init methods on the bean definition . --> Do the luh method invocation --> Socre: 1.0

[[[[Adv]]]]: public void [[invokeInitMethods]] ( final InitMethodInvocationStrategy [[invocationStrategy]] ) { for ( final InitMethodPoint [[initMethod]] : beanDefinition . initMethodPoints ( ) ) { if ( [[invocationStrategy]] != [[initMethod]] . invocationStrategy ) { continue ; } try { [[initMethod]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + [[initMethod]] , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .

[[[[Adv]]]]: public void [[luh]] ( final InitMethodInvocationStrategy [[montagne]] ) { for ( final InitMethodPoint [[behoove]] : beanDefinition . initMethodPoints ( ) ) { if ( [[montagne]] != [[behoove]] . invocationStrategy ) { continue ; } try { [[behoove]] . method . invoke ( bean ) ; } catch ( Exception ex ) { throw new PetiteException ( "Invalid init method: " + [[behoove]] , ex ) ; } } }
[[[[Nl]]]]: Invokes init methods .
--------------------------------------------- Result 806 ---------------------------------------------
Instantiate a bean instance . --> documentation inherited from interface constructor --> Socre: 1.0

[[[[Adv]]]]: public Object [[newBeanInstance]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int [[paramNo]] = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ [[paramNo]] ] ;
[[[[Nl]]]]: Creates a new instance .

[[[[Adv]]]]: public Object [[damascus]] ( ) { if ( beanDefinition . ctor == CtorInjectionPoint . EMPTY ) { throw new PetiteException ( "No constructor (annotated, single or default) founded as injection point for: " + beanDefinition . type . getName ( ) ) ; } int [[meggy]] = beanDefinition . ctor . references . length ; Object [ ] args = new Object [ [[meggy]] ] ;
[[[[Nl]]]]: Creates a new instance .
--------------------------------------------- Result 807 ---------------------------------------------
Adds a header . --> Add a fixture --> Socre: 1.0

[[[[Adv]]]]: public void addHeader ( final String [[name]] , final String [[value]] ) { List < String > valuesList = super . getAll ( [[name]] ) ; if ( valuesList . isEmpty ( ) ) { super . add ( [[name]] , [[value]] ) ; return ; } super . remove ( [[name]] ) ; valuesList . add ( [[value]] ) ; super . addAll ( [[name]] , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .

[[[[Adv]]]]: public void addHeader ( final String [[upside]] , final String [[fixtures]] ) { List < String > valuesList = super . getAll ( [[upside]] ) ; if ( valuesList . isEmpty ( ) ) { super . add ( [[upside]] , [[fixtures]] ) ; return ; } super . remove ( [[upside]] ) ; valuesList . add ( [[fixtures]] ) ; super . addAll ( [[upside]] , valuesList ) ; }
[[[[Nl]]]]: Adds new header value . If existing value exist it will be removed so the store the new key value .
--------------------------------------------- Result 808 ---------------------------------------------
Rewrite the path . --> Rewrite the request --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest servletRequest , final String [[actionPath]] , final String [[httpMethod]] ) { return [[actionPath]] ; }
[[[[Nl]]]]: Rewrites action path .

[[[[Adv]]]]: @ SuppressWarnings ( { "UnusedDeclaration" } ) public String rewrite ( final HttpServletRequest servletRequest , final String [[brodeur]] , final String [[aqueduct]] ) { return [[brodeur]] ; }
[[[[Nl]]]]: Rewrites action path .
--------------------------------------------- Result 809 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 515 / 274 / 20 / 809:  81%|████████  | 809/1000 [1:16:16<18:00,  5.66s/it][Succeeded / Failed / Skipped / Total] 515 / 274 / 20 / 809:  81%|████████  | 810/1000 [1:16:20<17:54,  5.65s/it][Succeeded / Failed / Skipped / Total] 516 / 274 / 20 / 810:  81%|████████  | 810/1000 [1:16:20<17:54,  5.65s/it][Succeeded / Failed / Skipped / Total] 516 / 274 / 20 / 810:  81%|████████  | 811/1000 [1:16:21<17:47,  5.65s/it][Succeeded / Failed / Skipped / Total] 517 / 274 / 20 / 811:  81%|████████  | 811/1000 [1:16:21<17:47,  5.65s/it][Succeeded / Failed / Skipped / Total] 517 / 274 / 20 / 811:  81%|████████  | 812/1000 [1:16:31<17:43,  5.65s/it][Succeeded / Failed / Skipped / Total] 518 / 274 / 20 / 812:  81%|████████  | 812/1000 [1:16:31<17:43,  5.65s/it][Succeeded / Failed / Skipped / Total] 518 / 274 / 20 / 812:  81%|████████▏ | 813/1000 [1:16:39<17:37,  5.66s/it][Succeeded / Failed / Skipped / Total] 519 / 274 / 20 / 813:  81%|████████▏ | 813/1000 [1:16:39<17:37,  5.66s/it][Succeeded / Failed / Skipped / Total] 519 / 274 / 20 / 813:  81%|████████▏ | 814/1000 [1:16:46<17:32,  5.66s/it][Succeeded / Failed / Skipped / Total] 520 / 274 / 20 / 814:  81%|████████▏ | 814/1000 [1:16:46<17:32,  5.66s/it][Succeeded / Failed / Skipped / Total] 520 / 274 / 20 / 814:  82%|████████▏ | 815/1000 [1:16:56<17:27,  5.66s/it][Succeeded / Failed / Skipped / Total] 521 / 274 / 20 / 815:  82%|████████▏ | 815/1000 [1:16:56<17:27,  5.66s/it][Succeeded / Failed / Skipped / Total] 521 / 274 / 20 / 815:  82%|████████▏ | 816/1000 [1:17:04<17:22,  5.67s/it][Succeeded / Failed / Skipped / Total] 522 / 274 / 20 / 816:  82%|████████▏ | 816/1000 [1:17:04<17:22,  5.67s/it][Succeeded / Failed / Skipped / Total] 522 / 274 / 20 / 816:  82%|████████▏ | 817/1000 [1:17:06<17:16,  5.66s/it]Copies the parameters from the ServletRequest into the attributes . --> Parses the passed in parameter from the HttpServletRequest --> Socre: 1.0

[[[[Adv]]]]: public static void [[copyParamsToAttributes]] ( final HttpServletRequest [[servletRequest]] , final boolean [[treatEmptyParamsAsNull]] , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = [[servletRequest]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String [[paramName]] = ( String ) paramNames . nextElement ( ) ; if ( [[servletRequest]] . getAttribute ( [[paramName]] ) != null ) { continue ; } String [ ] [[paramValues]] = [[servletRequest]] . getParameterValues ( [[paramName]] ) ; [[paramValues]] = prepareParameters ( [[paramValues]] , [[treatEmptyParamsAsNull]] , ignoreEmptyRequestParams ) ; if ( [[paramValues]] == null ) { continue ; } [[servletRequest]] . setAttribute ( [[paramName]] , [[paramValues]] . length == 1 ? [[paramValues]] [ 0 ] : [[paramValues]] ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .

[[[[Adv]]]]: public static void [[garvin]] ( final HttpServletRequest [[taquito]] , final boolean [[clinging]] , final boolean ignoreEmptyRequestParams ) { Enumeration paramNames = [[taquito]] . getParameterNames ( ) ; while ( paramNames . hasMoreElements ( ) ) { String [[saloon]] = ( String ) paramNames . nextElement ( ) ; if ( [[taquito]] . getAttribute ( [[saloon]] ) != null ) { continue ; } String [ ] [[deputies]] = [[taquito]] . getParameterValues ( [[saloon]] ) ; [[deputies]] = prepareParameters ( [[deputies]] , [[clinging]] , ignoreEmptyRequestParams ) ; if ( [[deputies]] == null ) { continue ; } [[taquito]] . setAttribute ( [[saloon]] , [[deputies]] . length == 1 ? [[deputies]] [ 0 ] : [[deputies]] ) ; }
[[[[Nl]]]]: Copies all request parameters to attributes .
--------------------------------------------- Result 810 ---------------------------------------------
Puts a value into the properties map . --> Acquires a property . --> Socre: 1.0

[[[[Adv]]]]: protected void [[put]] ( final String profile , final Map < String , PropsEntry > [[map]] , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = [[map]] . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties

[[[[Adv]]]]: protected void [[acquires]] ( final String profile , final Map < String , PropsEntry > [[mosquitoes]] , final String key , final String value , final boolean append ) { String realValue = value ; if ( append || appendDuplicateProps ) { PropsEntry pv = [[mosquitoes]] . get ( key ) ; if ( pv != null ) { realValue = pv . value + APPEND_SEPARATOR + realValue ; } } PropsEntry propsEntry = new PropsEntry ( key , realValue , profile , this ) ;
[[[[Nl]]]]: Puts key - value pair into the map with respect of appending duplicate properties
--------------------------------------------- Result 811 ---------------------------------------------
Adds the base property to the baseProperties . --> Puts the baseProperties for the given baseProperties --> Socre: 1.0

[[[[Adv]]]]: public void putBaseProperty ( final String key , final String [[value]] , final boolean append ) { put ( null , baseProperties , key , [[value]] , append ) ; }
[[[[Nl]]]]: Adds base property .

[[[[Adv]]]]: public void putBaseProperty ( final String key , final String [[cancerous]] , final boolean append ) { put ( null , baseProperties , key , [[cancerous]] , append ) ; }
[[[[Nl]]]]: Adds base property .
--------------------------------------------- Result 812 ---------------------------------------------
Resolve the given string with the given profiles . --> Resolve a string to a translated string --> Socre: 1.0

[[[[Adv]]]]: public String resolveMacros ( String value , final String ... [[profiles]] ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .

[[[[Adv]]]]: public String resolveMacros ( String value , final String ... [[french]] ) {
[[[[Nl]]]]: Resolves all macros in this props set . Called on property lookup .
--------------------------------------------- Result 813 ---------------------------------------------
Reads a stream toword --> Read stream toword --> Socre: 1.0

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] offp ) { int i ; int [[word]] = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { [[word]] = ( [[word]] << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return [[word]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .

[[[[Adv]]]]: private static int streamtoword ( byte [ ] data , int [ ] offp ) { int i ; int [[amado]] = 0 ; int off = offp [ 0 ] ; for ( i = 0 ; i < 4 ; i ++ ) { [[amado]] = ( [[amado]] << 8 ) | ( data [ off ] & 0xff ) ; off = ( off + 1 ) % data . length ; } offp [ 0 ] = off ; return [[amado]] ; }
[[[[Nl]]]]: Cycically extract a word of key material .
--------------------------------------------- Result 814 ---------------------------------------------
Get a profile from profile --> Get acros entry for a vnic --> Socre: 1.0

[[[[Adv]]]]: public PropsEntry [[getProfileProperty]] ( final String [[profile]] , final String [[key]] ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( [[profile]] ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( [[key]] ) ; }
[[[[Nl]]]]: Returns profile property .

[[[[Adv]]]]: public PropsEntry [[acropolis]] ( final String [[vick]] , final String [[vitals]] ) { final Map < String , PropsEntry > profileMap = profileProperties . get ( [[vick]] ) ; if ( profileMap == null ) { return null ; } return profileMap . get ( [[vitals]] ) ; }
[[[[Nl]]]]: Returns profile property .
--------------------------------------------- Result 815 ---------------------------------------------
Extracts a map from profiles and profiles . --> Lightweight implementation --> Socre: 1.0

[[[[Adv]]]]: public Map [[extract]] ( Map [[target]] , final String [ ] [[profiles]] , final String [ ] wildcardPatterns , String [[prefix]] ) { if ( [[target]] == null ) { [[target]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .

[[[[Adv]]]]: public Map [[lightweight]] ( Map [[conciergerie]] , final String [ ] [[willkommen]] , final String [ ] wildcardPatterns , String [[acquainted]] ) { if ( [[conciergerie]] == null ) { [[conciergerie]] = new HashMap ( ) ; }
[[[[Nl]]]]: Extracts props to target map . This is all - in - one method that does many things at once .
--------------------------------------------- Result 816 ---------------------------------------------
Puts a profile property . --> Puts a key - value pair into the map --> Socre: 1.0

[[[[Adv]]]]: public void [[putProfileProperty]] ( final String key , final String [[value]] , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , [[value]] , append ) ; }
[[[[Nl]]]]: Adds profile property .

[[[[Adv]]]]: public void [[boor]] ( final String key , final String [[gartner]] , final String profile , final boolean append ) { Map < String , PropsEntry > map = profileProperties . computeIfAbsent ( profile , k -> new HashMap <> ( ) ) ; put ( profile , map , key , [[gartner]] , append ) ; }
[[[[Nl]]]]: Adds profile property .
--------------------------------------------- Result 817 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 523 / 274 / 20 / 817:  82%|████████▏ | 817/1000 [1:17:06<17:16,  5.66s/it][Succeeded / Failed / Skipped / Total] 523 / 274 / 20 / 817:  82%|████████▏ | 818/1000 [1:17:20<17:12,  5.67s/it][Succeeded / Failed / Skipped / Total] 524 / 274 / 20 / 818:  82%|████████▏ | 818/1000 [1:17:20<17:12,  5.67s/it][Succeeded / Failed / Skipped / Total] 524 / 274 / 20 / 818:  82%|████████▏ | 819/1000 [1:17:29<17:07,  5.68s/it][Succeeded / Failed / Skipped / Total] 525 / 274 / 20 / 819:  82%|████████▏ | 819/1000 [1:17:29<17:07,  5.68s/it][Succeeded / Failed / Skipped / Total] 525 / 274 / 20 / 819:  82%|████████▏ | 820/1000 [1:17:35<17:01,  5.68s/it][Succeeded / Failed / Skipped / Total] 525 / 275 / 20 / 820:  82%|████████▏ | 820/1000 [1:17:35<17:01,  5.68s/it][Succeeded / Failed / Skipped / Total] 525 / 275 / 20 / 820:  82%|████████▏ | 821/1000 [1:17:40<16:56,  5.68s/it][Succeeded / Failed / Skipped / Total] 526 / 275 / 20 / 821:  82%|████████▏ | 821/1000 [1:17:40<16:56,  5.68s/it][Succeeded / Failed / Skipped / Total] 526 / 275 / 20 / 821:  82%|████████▏ | 822/1000 [1:17:49<16:51,  5.68s/it][Succeeded / Failed / Skipped / Total] 527 / 275 / 20 / 822:  82%|████████▏ | 822/1000 [1:17:49<16:51,  5.68s/it][Succeeded / Failed / Skipped / Total] 527 / 275 / 20 / 822:  82%|████████▏ | 823/1000 [1:17:59<16:46,  5.69s/it][Succeeded / Failed / Skipped / Total] 527 / 276 / 20 / 823:  82%|████████▏ | 823/1000 [1:17:59<16:46,  5.69s/it][Succeeded / Failed / Skipped / Total] 527 / 276 / 20 / 823:  82%|████████▏ | 824/1000 [1:18:02<16:40,  5.68s/it]Checks to see if the specified plaintext has the same password . --> Checks to see if the passed in is the same --> Socre: 1.0

[[[[Adv]]]]: public static boolean checkpw ( String [[plaintext]] , String hashed ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[plaintext]] , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return False ; } if ( hashed_bytes . length != try_bytes . length ) { return False ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .

[[[[Adv]]]]: public static boolean checkpw ( String [[equatorial]] , String hashed ) { byte [ ] hashed_bytes ; byte [ ] try_bytes ; try { String try_pw = hashpw ( [[equatorial]] , hashed ) ; hashed_bytes = hashed . getBytes ( "UTF-8" ) ; try_bytes = try_pw . getBytes ( "UTF-8" ) ; } catch ( UnsupportedEncodingException uee ) { return False ; } if ( hashed_bytes . length != try_bytes . length ) { return False ; } byte ret = 0 ; for ( int i = 0 ; i < try_bytes . length ; i ++ ) { ret |= hashed_bytes [ i ] ^ try_bytes [ i ] ; } return ret == 0 ; }
[[[[Nl]]]]: Check that a plaintext password matches a previously hashed one .
--------------------------------------------- Result 818 ---------------------------------------------
Copies bytes from the stream to the given output stream . --> Reads a boundary --> Socre: 1.0

[[[[Adv]]]]: public int [[copyMax]] ( final OutputStream out , final int maxBytes ) throws IOException { int count = 0 ; while ( "[[True]]" == "[[True]]" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .

[[[[Adv]]]]: public int [[braking]] ( final OutputStream out , final int maxBytes ) throws IOException { int count = 0 ; while ( "[["Jeepers" == "Jeepers"]]" == "[["Jeepers" == "Jeepers"]]" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; count ++ ; if ( count == maxBytes ) { return count ; } } return count ; }
[[[[Nl]]]]: Copies max or less number of bytes to output stream . Useful for determining if uploaded file is larger then expected .
--------------------------------------------- Result 819 ---------------------------------------------
Hashes a password with a salt . --> public for testing --> Socre: 1.0

[[[[Adv]]]]: public static String hashpw ( String password , String [[salt]] ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer [[rs]] = new StringBuffer ( ) ; if ( [[salt]] . charAt ( 0 ) != ' ' || [[salt]] . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( [[salt]] . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = [[salt]] . charAt ( 2 ) ; if ( minor != ' ' || [[salt]] . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .

[[[[Adv]]]]: public static String hashpw ( String password , String [[ofhim]] ) { BCrypt B ; String real_salt ; byte [ ] passwordb , saltb , hashed ; char minor = ( char ) 0 ; int rounds , off ; StringBuffer [[adrien]] = new StringBuffer ( ) ; if ( [[ofhim]] . charAt ( 0 ) != ' ' || [[ofhim]] . charAt ( 1 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt version" ) ; } if ( [[ofhim]] . charAt ( 2 ) == ' ' ) { off = 3 ; } else { minor = [[ofhim]] . charAt ( 2 ) ; if ( minor != ' ' || [[ofhim]] . charAt ( 3 ) != ' ' ) { throw new IllegalArgumentException ( "Invalid salt revision" ) ; } off = 4 ; }
[[[[Nl]]]]: Hash a password using the OpenBSD bcrypt scheme .
--------------------------------------------- Result 820 ---------------------------------------------
Copies all bytes from the stream to the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[copyAll]] ( final OutputStream out ) throws IOException { int [[count]] = 0 ; while ( "[[True]]" == "[[True]]" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; [[count]] ++ ; } return [[count]] ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .

[[[[Adv]]]]: public int [[alerts]] ( final OutputStream out ) throws IOException { int [[weaknesses]] = 0 ; while ( "[["Climbs" == "Climbs"]]" == "[["Climbs" == "Climbs"]]" ) { byte b = readByte ( ) ; if ( isBoundary ( b ) ) { break ; } out . write ( b ) ; [[weaknesses]] ++ ; } return [[weaknesses]] ; }
[[[[Nl]]]]: Copies bytes from this stream to some output until boundary is reached . Returns number of copied bytes . It will throw an exception for any irregular behaviour .
--------------------------------------------- Result 821 ---------------------------------------------
Resolves the action config . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: protected ActionConfig [[resolveActionConfig]] ( final ActionAnnotationValues [[annotationValues]] ) { final Class < ? extends Annotation > [[annotationType]] ; if ( [[annotationValues]] == null ) { [[annotationType]] = Action . class ; } else { [[annotationType]] = [[annotationValues]] . annotationType ( ) ; } return actionConfigManager . lookup ( [[annotationType]] ) ; }
[[[[Nl]]]]: Resolves action config .

[[[[Adv]]]]: protected ActionConfig [[fixings]] ( final ActionAnnotationValues [[causal]] ) { final Class < ? extends Annotation > [[beauty]] ; if ( [[causal]] == null ) { [[beauty]] = Action . class ; } else { [[beauty]] = [[causal]] . annotationType ( ) ; } return actionConfigManager . lookup ( [[beauty]] ) ; }
[[[[Nl]]]]: Resolves action config .
--------------------------------------------- Result 822 ---------------------------------------------
Parses the action configuration . --> Create a new instance of an Actionnaire --> Socre: 1.0

[[[[Adv]]]]: public ActionRuntime [[parse]] ( final Class < ? > actionClass , final Method [[actionMethod]] , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( [[actionMethod]] ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .

[[[[Adv]]]]: public ActionRuntime [[legionnaire]] ( final Class < ? > actionClass , final Method [[shuichi]] , ActionDefinition actionDefinition ) { final ActionAnnotationValues annotationValues = detectActionAnnotationValues ( [[shuichi]] ) ; final ActionConfig actionConfig = resolveActionConfig ( annotationValues ) ;
[[[[Nl]]]]: Parses java action method annotation and returns its action runtime .
--------------------------------------------- Result 823 ---------------------------------------------
Detect and register alias aliases . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[detectAndRegisterAlias]] ( final ActionAnnotationValues [[annotationValues]] , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( [[annotationValues]] ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .

[[[[Adv]]]]: protected void [[zizi]] ( final ActionAnnotationValues [[announcing]] , final ActionDefinition actionDefinition ) { final String alias = parseMethodAlias ( [[announcing]] ) ; if ( alias != null ) { String aliasPath = StringUtil . cutToIndexOf ( actionDefinition . actionPath ( ) , StringPool . HASH ) ; actionsManager . registerPathAlias ( alias , aliasPath ) ; } }
[[[[Nl]]]]: Detects if alias is defined in annotation and registers it if so .
[Succeeded / Failed / Skipped / Total] 528 / 276 / 20 / 824:  82%|████████▏ | 824/1000 [1:18:02<16:40,  5.68s/it][Succeeded / Failed / Skipped / Total] 528 / 276 / 20 / 824:  82%|████████▎ | 825/1000 [1:18:04<16:33,  5.68s/it][Succeeded / Failed / Skipped / Total] 529 / 276 / 20 / 825:  82%|████████▎ | 825/1000 [1:18:04<16:33,  5.68s/it][Succeeded / Failed / Skipped / Total] 529 / 276 / 20 / 825:  83%|████████▎ | 826/1000 [1:18:19<16:29,  5.69s/it][Succeeded / Failed / Skipped / Total] 530 / 276 / 20 / 826:  83%|████████▎ | 826/1000 [1:18:19<16:29,  5.69s/it][Succeeded / Failed / Skipped / Total] 530 / 276 / 20 / 826:  83%|████████▎ | 827/1000 [1:18:19<16:23,  5.68s/it][Succeeded / Failed / Skipped / Total] 530 / 276 / 21 / 827:  83%|████████▎ | 827/1000 [1:18:19<16:23,  5.68s/it][Succeeded / Failed / Skipped / Total] 530 / 276 / 21 / 827:  83%|████████▎ | 828/1000 [1:18:19<16:16,  5.68s/it][Succeeded / Failed / Skipped / Total] 531 / 276 / 21 / 828:  83%|████████▎ | 828/1000 [1:18:19<16:16,  5.68s/it][Succeeded / Failed / Skipped / Total] 531 / 276 / 21 / 828:  83%|████████▎ | 829/1000 [1:18:20<16:09,  5.67s/it][Succeeded / Failed / Skipped / Total] 532 / 276 / 21 / 829:  83%|████████▎ | 829/1000 [1:18:20<16:09,  5.67s/it][Succeeded / Failed / Skipped / Total] 532 / 276 / 21 / 829:  83%|████████▎ | 830/1000 [1:18:33<16:05,  5.68s/it][Succeeded / Failed / Skipped / Total] 533 / 276 / 21 / 830:  83%|████████▎ | 830/1000 [1:18:33<16:05,  5.68s/it][Succeeded / Failed / Skipped / Total] 533 / 276 / 21 / 830:  83%|████████▎ | 831/1000 [1:18:33<15:58,  5.67s/it][Succeeded / Failed / Skipped / Total] 534 / 276 / 21 / 831:  83%|████████▎ | 831/1000 [1:18:33<15:58,  5.67s/it][Succeeded / Failed / Skipped / Total] 534 / 276 / 21 / 831:  83%|████████▎ | 832/1000 [1:18:35<15:52,  5.67s/it][Succeeded / Failed / Skipped / Total] 535 / 276 / 21 / 832:  83%|████████▎ | 832/1000 [1:18:35<15:52,  5.67s/it][Succeeded / Failed / Skipped / Total] 535 / 276 / 21 / 832:  83%|████████▎ | 833/1000 [1:18:47<15:47,  5.68s/it]--------------------------------------------- Result 824 ---------------------------------------------
Reads the interceptor s interceptors . --> Called by the annotated element --> Socre: 1.0

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[readActionInterceptors]] ( final AnnotatedElement [[actionClassOrMethod]] ) { Class < ? extends ActionInterceptor > [ ] [[result]] = null ; InterceptedBy interceptedBy = [[actionClassOrMethod]] . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { [[result]] = interceptedBy . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .

[[[[Adv]]]]: protected Class < ? extends ActionInterceptor > [ ] [[cecily]] ( final AnnotatedElement [[counselor]] ) { Class < ? extends ActionInterceptor > [ ] [[buy]] = null ; InterceptedBy interceptedBy = [[counselor]] . getAnnotation ( InterceptedBy . class ) ; if ( interceptedBy != null ) { [[buy]] = interceptedBy . value ( ) ; if ( [[buy]] . length == 0 ) { [[buy]] = null ; } } return [[buy]] ; }
[[[[Nl]]]]: Reads class or method annotation for action interceptors .
--------------------------------------------- Result 825 ---------------------------------------------
Read package action path . --> helper method to generate almeidaiidaities --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[readPackageActionPath]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .

[[[[Adv]]]]: protected String [ ] [[almeida]] ( final Class actionClass ) { Package actionPackage = actionClass . getPackage ( ) ; final String actionPackageName = actionPackage . getName ( ) ;
[[[[Nl]]]]: Reads action path for package . If annotation is not set on package - level class package will be used for package action path part .
--------------------------------------------- Result 826 ---------------------------------------------
Read method action path . --> Html --> Socre: 1.0

[[[[Adv]]]]: protected String [ ] [[readMethodActionPath]] ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .

[[[[Adv]]]]: protected String [ ] [[ohhh]] ( final String methodName , final ActionAnnotationValues annotationValues , final ActionConfig actionConfig ) {
[[[[Nl]]]]: Reads action path from the action method .
--------------------------------------------- Result 827 ---------------------------------------------
Sets the last modified header . --> [[[SKIPPED]]]

[[[[Adv]]]]: @ Override protected void preResponseCommit ( ) { long lastModified = lastModifiedData . getLastModified ( ) ; long ifModifiedSince = request . getDateHeader ( "If-Modified-Since" ) ; if ( lastModified > - 1 && ! response . containsHeader ( "Last-Modified" ) ) { if ( ifModifiedSince < ( lastModified / 1000 * 1000 ) ) { response . setDateHeader ( "Last-Modified" , lastModified ) ; } else { response . reset ( ) ; response . setStatus ( HttpServletResponse . SC_NOT_MODIFIED ) ; } } }
[[[[Nl]]]]: todo move to BufferResponseWrapper ?
--------------------------------------------- Result 828 ---------------------------------------------
Parses the alias . --> obfuscated name --> Socre: 1.0

[[[[Adv]]]]: protected String [[parseMethodAlias]] ( final ActionAnnotationValues [[annotationValues]] ) { String alias = null ; if ( [[annotationValues]] != null ) { alias = [[annotationValues]] . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .

[[[[Adv]]]]: protected String [[bobbed]] ( final ActionAnnotationValues [[ephemeral]] ) { String alias = null ; if ( [[ephemeral]] != null ) { alias = [[ephemeral]] . alias ( ) ; } return alias ; }
[[[[Nl]]]]: Reads method s alias value .
--------------------------------------------- Result 829 ---------------------------------------------
Reads the filtered filters . --> Given an annotated element return an array of ActionFilter --> Socre: 1.0

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[readActionFilters]] ( final AnnotatedElement [[actionClassOrMethod]] ) { Class < ? extends ActionFilter > [ ] [[result]] = null ; FilteredBy [[filteredBy]] = [[actionClassOrMethod]] . getAnnotation ( FilteredBy . class ) ; if ( [[filteredBy]] != null ) { [[result]] = [[filteredBy]] . value ( ) ; if ( [[result]] . length == 0 ) { [[result]] = null ; } } return [[result]] ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .

[[[[Adv]]]]: protected Class < ? extends ActionFilter > [ ] [[antiquarian]] ( final AnnotatedElement [[alhambra]] ) { Class < ? extends ActionFilter > [ ] [[cambodia]] = null ; FilteredBy [[adventurers]] = [[alhambra]] . getAnnotation ( FilteredBy . class ) ; if ( [[adventurers]] != null ) { [[cambodia]] = [[adventurers]] . value ( ) ; if ( [[cambodia]] . length == 0 ) { [[cambodia]] = null ; } } return [[cambodia]] ; }
[[[[Nl]]]]: Reads class or method annotation for action filters .
--------------------------------------------- Result 830 ---------------------------------------------
Inject target object . --> Saves a property on a Laurita object --> Socre: 1.0

[[[[Adv]]]]: public static void [[injectTargetIntoProxy]] ( final Object [[proxy]] , final Object target ) { Class proxyClass = [[proxy]] . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( [[proxy]] , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .

[[[[Adv]]]]: public static void [[aaaaah]] ( final Object [[laurita]] , final Object target ) { Class proxyClass = [[laurita]] . getClass ( ) ; try { Field field = proxyClass . getField ( "$___target$0" ) ; field . set ( [[laurita]] , target ) ; } catch ( Exception ex ) { throw new ProxettaException ( ex ) ; } }
[[[[Nl]]]]: Injects target into proxy .
--------------------------------------------- Result 831 ---------------------------------------------
Applies the advice to the given target class . --> ApplyAdviceAdv to targetClass --> Socre: 1.0

[[[[Adv]]]]: public static < [[T]] > [[T]] applyAdvice ( final Class < [[T]] > targetClass ) { Class [[adviceClass]] = cache . get ( targetClass ) ; if ( [[adviceClass]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .

[[[[Adv]]]]: public static < [[macoy]] > [[macoy]] applyAdvice ( final Class < [[macoy]] > targetClass ) { Class [[reorganization]] = cache . get ( targetClass ) ; if ( [[reorganization]] == null ) {
[[[[Nl]]]]: Applies advice on given target class and returns proxy instance .
--------------------------------------------- Result 832 ---------------------------------------------
Visits an annotation . --> Add a sundial --> Socre: 1.0

[[[[Adv]]]]: public AnnotationVisitor [[visitAnnotation]] ( final String [[descriptor]] , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( [[descriptor]] , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .

[[[[Adv]]]]: public AnnotationVisitor [[pudding]] ( final String [[sundial]] , final boolean visible ) { if ( fv != null ) { return fv . visitAnnotation ( [[sundial]] , visible ) ; } return null ; }
[[[[Nl]]]]: Visits an annotation of the field .
--------------------------------------------- Result 833 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 536 / 276 / 21 / 833:  83%|████████▎ | 833/1000 [1:18:47<15:47,  5.68s/it][Succeeded / Failed / Skipped / Total] 536 / 276 / 21 / 833:  83%|████████▎ | 834/1000 [1:18:48<15:41,  5.67s/it][Succeeded / Failed / Skipped / Total] 537 / 276 / 21 / 834:  83%|████████▎ | 834/1000 [1:18:48<15:41,  5.67s/it][Succeeded / Failed / Skipped / Total] 537 / 276 / 21 / 834:  84%|████████▎ | 835/1000 [1:19:06<15:37,  5.68s/it][Succeeded / Failed / Skipped / Total] 538 / 276 / 21 / 835:  84%|████████▎ | 835/1000 [1:19:06<15:37,  5.68s/it][Succeeded / Failed / Skipped / Total] 538 / 276 / 21 / 835:  84%|████████▎ | 836/1000 [1:19:07<15:31,  5.68s/it][Succeeded / Failed / Skipped / Total] 538 / 277 / 21 / 836:  84%|████████▎ | 836/1000 [1:19:07<15:31,  5.68s/it][Succeeded / Failed / Skipped / Total] 538 / 277 / 21 / 836:  84%|████████▎ | 837/1000 [1:19:11<15:25,  5.68s/it][Succeeded / Failed / Skipped / Total] 538 / 278 / 21 / 837:  84%|████████▎ | 837/1000 [1:19:11<15:25,  5.68s/it][Succeeded / Failed / Skipped / Total] 538 / 278 / 21 / 837:  84%|████████▍ | 838/1000 [1:19:15<15:19,  5.67s/it][Succeeded / Failed / Skipped / Total] 539 / 278 / 21 / 838:  84%|████████▍ | 838/1000 [1:19:15<15:19,  5.67s/it][Succeeded / Failed / Skipped / Total] 539 / 278 / 21 / 838:  84%|████████▍ | 839/1000 [1:19:19<15:13,  5.67s/it][Succeeded / Failed / Skipped / Total] 539 / 279 / 21 / 839:  84%|████████▍ | 839/1000 [1:19:19<15:13,  5.67s/it][Succeeded / Failed / Skipped / Total] 539 / 279 / 21 / 839:  84%|████████▍ | 840/1000 [1:19:22<15:07,  5.67s/it][Succeeded / Failed / Skipped / Total] 540 / 279 / 21 / 840:  84%|████████▍ | 840/1000 [1:19:22<15:07,  5.67s/it][Succeeded / Failed / Skipped / Total] 540 / 279 / 21 / 840:  84%|████████▍ | 841/1000 [1:19:34<15:02,  5.68s/it][Succeeded / Failed / Skipped / Total] 540 / 280 / 21 / 841:  84%|████████▍ | 841/1000 [1:19:34<15:02,  5.68s/it][Succeeded / Failed / Skipped / Total] 540 / 280 / 21 / 841:  84%|████████▍ | 842/1000 [1:19:37<14:56,  5.67s/it]Resolve real name . --> merge a string --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final String [[realName]] ) { if ( realNames == null ) { return [[realName]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[realName]] ) ; if ( realIndex == - 1 ) { return [[realName]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .

[[[[Adv]]]]: public String [[immer]] ( final String [[bitchin]] ) { if ( realNames == null ) { return [[bitchin]] ; } int realIndex = ArraysUtil . indexOf ( realNames , [[bitchin]] ) ; if ( realIndex == - 1 ) { return [[bitchin]] ; } return jsonNames [ realIndex ] ; }
[[[[Nl]]]]: Resolves JSON name from real name .
--------------------------------------------- Result 834 ---------------------------------------------
Resolves real name . --> Infraction of ledges --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveRealName]] ( final String [[jsonName]] ) { if ( jsonNames == null ) { return [[jsonName]] ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , [[jsonName]] ) ; if ( jsonIndex == - 1 ) { return [[jsonName]] ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .

[[[[Adv]]]]: public String [[infraction]] ( final String [[ledges]] ) { if ( jsonNames == null ) { return [[ledges]] ; } int jsonIndex = ArraysUtil . indexOf ( jsonNames , [[ledges]] ) ; if ( jsonIndex == - 1 ) { return [[ledges]] ; } return realNames [ jsonIndex ] ; }
[[[[Nl]]]]: Resolves real name from JSON name .
--------------------------------------------- Result 835 ---------------------------------------------
Looks up type data for the given type . --> Fetch the TypeData for a class --> Socre: 1.0

[[[[Adv]]]]: protected TypeData [[_lookupTypeData]] ( final Class [[type]] ) { TypeData typeData = typeDataMap . get ( [[type]] ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .

[[[[Adv]]]]: protected TypeData [[frederick]] ( final Class [[mousetraps]] ) { TypeData typeData = typeDataMap . get ( [[mousetraps]] ) ; if ( typeData == null ) { typeData = scanClassForAnnotations ( [[mousetraps]] ) ; typeDataMap . put ( [[mousetraps]] , typeData ) ; } return typeData ; }
[[[[Nl]]]]: Lookups type data and creates one if missing .
--------------------------------------------- Result 836 ---------------------------------------------
Looks up the type data for a given type . --> [[[FAILED]]]

[[[[Adv]]]]: public TypeData lookupTypeData ( final Class [[type]] ) { TypeData typeData = typeDataMap . get ( [[type]] ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( [[type]] ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( [[type]] ) ; typeDataMap . put ( [[type]] , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .

[[[[Adv]]]]: public TypeData lookupTypeData ( final Class [[hormone]] ) { TypeData typeData = typeDataMap . get ( [[hormone]] ) ; if ( typeData == null ) { if ( serializationSubclassAware ) { typeData = findSubclassTypeData ( [[hormone]] ) ; } if ( typeData == null ) { typeData = scanClassForAnnotations ( [[hormone]] ) ; typeDataMap . put ( [[hormone]] , typeData ) ; } } return typeData ; }
[[[[Nl]]]]: Returns all includes for given type . Returns an empty array when no includes are defined .
--------------------------------------------- Result 837 ---------------------------------------------
Find type data . --> [[[FAILED]]]

[[[[Adv]]]]: protected TypeData [[findSubclassTypeData]] ( final Class type ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( type . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .

[[[[Adv]]]]: protected TypeData [[collision]] ( final Class type ) { final Class < ? extends Annotation > defaultAnnotation = jsonAnnotation ; if ( type . getAnnotation ( defaultAnnotation ) != null ) {
[[[[Nl]]]]: Finds type data of first annotated superclass or interface .
--------------------------------------------- Result 838 ---------------------------------------------
Resolves a JSON name for a given type . --> Resolves panda --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveJsonName]] ( final Class type , final String name ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .

[[[[Adv]]]]: public String [[panda]] ( final Class type , final String name ) { TypeData typeData = lookupTypeData ( type ) ; return typeData . resolveJsonName ( name ) ; }
[[[[Nl]]]]: Returns different name of a property if set by annotation .
--------------------------------------------- Result 839 ---------------------------------------------
Get the content of the temp file --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public byte [ ] [[getFileContent]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .

[[[[Adv]]]]: @ Override public byte [ ] [[att]] ( ) throws IOException { if ( data != null ) { return data ; } if ( tempFile != null ) { return FileUtil . readBytes ( tempFile ) ; } return null ; }
[[[[Nl]]]]: Returns the content of file upload item .
--------------------------------------------- Result 840 ---------------------------------------------
Copy the bootstrap methods . --> Popolozols --> Socre: 1.0

[[[[Adv]]]]: private void [[copyBootstrapMethods]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .

[[[[Adv]]]]: private void [[aerosols]] ( final ClassReader classReader , final char [ ] charBuffer ) {
[[[[Nl]]]]: Read the BootstrapMethods bootstrap_methods array binary content and add them as entries of the SymbolTable .
--------------------------------------------- Result 841 ---------------------------------------------
Create action runtime . --> [[[FAILED]]]

[[[[Adv]]]]: public ActionRuntime [[createActionRuntime]] ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .

[[[[Adv]]]]: public ActionRuntime [[grob]] ( final ActionHandler actionHandler , final Class actionClass , final Method actionClassMethod , final Class < ? extends ActionResult > actionResult , final Class < ? extends ActionResult > defaultActionResult , final ActionFilter [ ] filters , final ActionInterceptor [ ] interceptors , final ActionDefinition actionDefinition , final boolean async , final boolean auth ) { if ( actionHandler != null ) { return new ActionRuntime ( actionHandler , actionClass , actionClassMethod , filters , interceptors , actionDefinition , NoneActionResult . class , NoneActionResult . class , async , auth , null , null ) ; } final ScopeData scopeData = scopeDataInspector . inspectClassScopes ( actionClass ) ;
[[[[Nl]]]]: Creates new instance of action runtime configuration . Initialize caches .
--------------------------------------------- Result 842 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 541 / 280 / 21 / 842:  84%|████████▍ | 842/1000 [1:19:37<14:56,  5.67s/it][Succeeded / Failed / Skipped / Total] 541 / 280 / 21 / 842:  84%|████████▍ | 843/1000 [1:19:49<14:52,  5.68s/it][Succeeded / Failed / Skipped / Total] 542 / 280 / 21 / 843:  84%|████████▍ | 843/1000 [1:19:49<14:52,  5.68s/it][Succeeded / Failed / Skipped / Total] 542 / 280 / 21 / 843:  84%|████████▍ | 844/1000 [1:20:02<14:47,  5.69s/it][Succeeded / Failed / Skipped / Total] 542 / 281 / 21 / 844:  84%|████████▍ | 844/1000 [1:20:02<14:47,  5.69s/it][Succeeded / Failed / Skipped / Total] 542 / 281 / 21 / 844:  84%|████████▍ | 845/1000 [1:20:03<14:41,  5.68s/it][Succeeded / Failed / Skipped / Total] 542 / 282 / 21 / 845:  84%|████████▍ | 845/1000 [1:20:03<14:41,  5.68s/it][Succeeded / Failed / Skipped / Total] 542 / 282 / 21 / 845:  85%|████████▍ | 846/1000 [1:20:07<14:35,  5.68s/it][Succeeded / Failed / Skipped / Total] 543 / 282 / 21 / 846:  85%|████████▍ | 846/1000 [1:20:07<14:35,  5.68s/it][Succeeded / Failed / Skipped / Total] 543 / 282 / 21 / 846:  85%|████████▍ | 847/1000 [1:20:14<14:29,  5.68s/it][Succeeded / Failed / Skipped / Total] 543 / 283 / 21 / 847:  85%|████████▍ | 847/1000 [1:20:14<14:29,  5.68s/it][Succeeded / Failed / Skipped / Total] 543 / 283 / 21 / 847:  85%|████████▍ | 848/1000 [1:20:34<14:26,  5.70s/it][Succeeded / Failed / Skipped / Total] 544 / 283 / 21 / 848:  85%|████████▍ | 848/1000 [1:20:34<14:26,  5.70s/it][Succeeded / Failed / Skipped / Total] 544 / 283 / 21 / 848:  85%|████████▍ | 849/1000 [1:20:43<14:21,  5.70s/it][Succeeded / Failed / Skipped / Total] 545 / 283 / 21 / 849:  85%|████████▍ | 849/1000 [1:20:43<14:21,  5.70s/it][Succeeded / Failed / Skipped / Total] 545 / 283 / 21 / 849:  85%|████████▌ | 850/1000 [1:20:51<14:16,  5.71s/it]Puts constant pool . --> Write an affront --> Socre: 1.0

[[[[Adv]]]]: void [[putConstantPool]] ( final ByteVector [[output]] ) { [[output]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .

[[[[Adv]]]]: void [[adem]] ( final ByteVector [[affront]] ) { [[affront]] . putShort ( constantPoolCount ) . putByteArray ( constantPool . data , 0 , constantPool . length ) ; }
[[[[Nl]]]]: Puts this symbol table s constant_pool array in the given ByteVector preceded by the constant_pool_count value .
--------------------------------------------- Result 843 ---------------------------------------------
Puts the bootstrap methods . --> Writes a Kristeliff --> Socre: 1.0

[[[[Adv]]]]: void [[putBootstrapMethods]] ( final ByteVector [[output]] ) { if ( bootstrapMethods != null ) { [[output]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .

[[[[Adv]]]]: void [[kristel]] ( final ByteVector [[vindication]] ) { if ( bootstrapMethods != null ) { [[vindication]] . putShort ( addConstantUtf8 ( Constants . BOOTSTRAP_METHODS ) ) . putInt ( bootstrapMethods . length + 2 ) . putShort ( bootstrapMethodCount ) . putByteArray ( bootstrapMethods . data , 0 , bootstrapMethods . length ) ; } }
[[[[Nl]]]]: Puts this symbol table s BootstrapMethods attribute in the given ByteVector . This includes the 6 attribute header bytes and the num_bootstrap_methods value .
--------------------------------------------- Result 844 ---------------------------------------------
Resolves the real name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[resolveRealName]] ( final Class type , final String [[jsonName]] ) { TypeData [[typeData]] = lookupTypeData ( type ) ; return [[typeData]] . resolveRealName ( [[jsonName]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .

[[[[Adv]]]]: public String [[baseball]] ( final Class type , final String [[coolies]] ) { TypeData [[blame]] = lookupTypeData ( type ) ; return [[blame]] . resolveRealName ( [[coolies]] ) ; }
[[[[Nl]]]]: Returns real property name for given JSON property .
--------------------------------------------- Result 845 ---------------------------------------------
Sets the major version and class name . --> [[[FAILED]]]

[[[[Adv]]]]: int [[setMajorVersionAndClassName]] ( final int majorVersion , final String [[className]] ) { this . [[majorVersion]] = majorVersion ; this . [[className]] = [[className]] ; return addConstantClass ( [[className]] ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .

[[[[Adv]]]]: int [[chedi]] ( final int majorVersion , final String [[cougars]] ) { this . [[coover]] = majorVersion ; this . [[darting]] = [[cougars]] ; return addConstantClass ( [[cougars]] ) . index ; }
[[[[Nl]]]]: Sets the major version and the name of the class to which this symbol table belongs . Also adds the class name to the constant pool .
--------------------------------------------- Result 846 ---------------------------------------------
Adds a constant ref to this symbol . --> Factory method for retrace --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantMethodref]] ( final String owner , final String [[name]] , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , [[name]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[retrace]] ( final String owner , final String [[beseech]] , final String descriptor , final boolean isInterface ) { int tag = isInterface ? Symbol . CONSTANT_INTERFACE_METHODREF_TAG : Symbol . CONSTANT_METHODREF_TAG ; return addConstantMemberReference ( tag , owner , [[beseech]] , descriptor ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 847 ---------------------------------------------
Adds a constant fieldref . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantFieldref]] ( final String owner , final String [[name]] , final String [[descriptor]] ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , [[name]] , [[descriptor]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[subsurface]] ( final String owner , final String [[tranquility]] , final String [[considerable]] ) { return addConstantMemberReference ( Symbol . CONSTANT_FIELDREF_TAG , owner , [[tranquility]] , [[considerable]] ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 848 ---------------------------------------------
Adds a constant member reference . --> synchronized update --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantMemberReference]] ( final int [[index]] , final int tag , final String owner , final String name , final String [[descriptor]] ) { add ( new Entry ( [[index]] , tag , owner , name , [[descriptor]] , 0 , hash ( tag , owner , name , [[descriptor]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[syncopated]] ( final int [[handspring]] , final int tag , final String owner , final String name , final String [[farming]] ) { add ( new Entry ( [[handspring]] , tag , owner , name , [[farming]] , 0 , hash ( tag , owner , name , [[farming]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table .
--------------------------------------------- Result 849 ---------------------------------------------
Adds a constant or float integer or float constant . --> Add an entry --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantIntegerOrFloat]] ( final int index , final int [[tag]] , final int [[value]] ) { add ( new Entry ( index , [[tag]] , [[value]] , hash ( [[tag]] , [[value]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[orientation]] ( final int index , final int [[asthma]] , final int [[deanne]] ) { add ( new Entry ( index , [[asthma]] , [[deanne]] , hash ( [[asthma]] , [[deanne]] ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table .
--------------------------------------------- Result 850 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 545 / 284 / 21 / 850:  85%|████████▌ | 850/1000 [1:20:51<14:16,  5.71s/it][Succeeded / Failed / Skipped / Total] 545 / 284 / 21 / 850:  85%|████████▌ | 851/1000 [1:21:11<14:12,  5.72s/it][Succeeded / Failed / Skipped / Total] 545 / 285 / 21 / 851:  85%|████████▌ | 851/1000 [1:21:11<14:12,  5.72s/it][Succeeded / Failed / Skipped / Total] 545 / 285 / 21 / 851:  85%|████████▌ | 852/1000 [1:21:12<14:06,  5.72s/it][Succeeded / Failed / Skipped / Total] 545 / 286 / 21 / 852:  85%|████████▌ | 852/1000 [1:21:12<14:06,  5.72s/it][Succeeded / Failed / Skipped / Total] 545 / 286 / 21 / 852:  85%|████████▌ | 853/1000 [1:21:26<14:02,  5.73s/it][Succeeded / Failed / Skipped / Total] 545 / 287 / 21 / 853:  85%|████████▌ | 853/1000 [1:21:26<14:02,  5.73s/it][Succeeded / Failed / Skipped / Total] 545 / 287 / 21 / 853:  85%|████████▌ | 854/1000 [1:21:43<13:58,  5.74s/it][Succeeded / Failed / Skipped / Total] 546 / 287 / 21 / 854:  85%|████████▌ | 854/1000 [1:21:43<13:58,  5.74s/it][Succeeded / Failed / Skipped / Total] 546 / 287 / 21 / 854:  86%|████████▌ | 855/1000 [1:21:45<13:51,  5.74s/it]Adds a constant or float constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol [[addConstantIntegerOrFloat]] ( final int tag , final int value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol [[kiyoshi]] ( final int tag , final int value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . data == value ) { return entry ; } entry = entry . next ; } constantPool . putByte ( tag ) . putInt ( value ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Integer_info or CONSTANT_Float_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 851 ---------------------------------------------
Adds a constant reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Entry [[addConstantMemberReference]] ( final int tag , final String owner , final String name , final String [[descriptor]] ) { int hashCode = hash ( tag , owner , name , [[descriptor]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( [[descriptor]] ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , [[descriptor]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , [[descriptor]] , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Entry [[gargle]] ( final int tag , final String owner , final String name , final String [[adjudged]] ) { int hashCode = hash ( tag , owner , name , [[adjudged]] ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . owner . equals ( owner ) && entry . name . equals ( name ) && entry . value . equals ( [[adjudged]] ) ) { return entry ; } entry = entry . next ; } constantPool . put122 ( tag , addConstantClass ( owner ) . index , addConstantNameAndType ( name , [[adjudged]] ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , owner , name , [[adjudged]] , 0 , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Fieldref_info CONSTANT_Methodref_info or CONSTANT_InterfaceMethodref_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 852 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantLongOrDouble]] ( final int index , final int [[tag]] , final long value ) { add ( new Entry ( index , [[tag]] , value , hash ( [[tag]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[tingling]] ( final int index , final int [[splattering]] , final long value ) { add ( new Entry ( index , [[splattering]] , value , hash ( [[splattering]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table .
--------------------------------------------- Result 853 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantLongOrDouble ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . data == value ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantLongOrDouble ( final int tag , final long value ) { int hashCode = hash ( tag , value ) ; Entry [[agry]] = get ( hashCode ) ; while ( [[agry]] != null ) { if ( [[agry]] . tag == tag && [[agry]] . hashCode == hashCode && [[agry]] . data == value ) { return [[agry]] ; } [[agry]] = [[agry]] . next ; } int index = constantPoolCount ; constantPool . putByte ( tag ) . putLong ( value ) ; constantPoolCount += 2 ; return put ( new Entry ( index , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Long_info or CONSTANT_Double_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 854 ---------------------------------------------
Adds a utf8 tag . --> Add poisoner entry --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantUtf8]] ( final int index , final String value ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[poisoner]] ( final int index , final String value ) { add ( new Entry ( index , Symbol . CONSTANT_UTF8_TAG , value , hash ( Symbol . CONSTANT_UTF8_TAG , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_String_info to the constant pool of this symbol table .
--------------------------------------------- Result 855 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 546 / 288 / 21 / 855:  86%|████████▌ | 855/1000 [1:21:45<13:51,  5.74s/it][Succeeded / Failed / Skipped / Total] 546 / 288 / 21 / 855:  86%|████████▌ | 856/1000 [1:21:45<13:45,  5.73s/it][Succeeded / Failed / Skipped / Total] 546 / 289 / 21 / 856:  86%|████████▌ | 856/1000 [1:21:45<13:45,  5.73s/it][Succeeded / Failed / Skipped / Total] 546 / 289 / 21 / 856:  86%|████████▌ | 857/1000 [1:22:07<13:42,  5.75s/it][Succeeded / Failed / Skipped / Total] 547 / 289 / 21 / 857:  86%|████████▌ | 857/1000 [1:22:07<13:42,  5.75s/it][Succeeded / Failed / Skipped / Total] 547 / 289 / 21 / 857:  86%|████████▌ | 858/1000 [1:22:20<13:37,  5.76s/it][Succeeded / Failed / Skipped / Total] 548 / 289 / 21 / 858:  86%|████████▌ | 858/1000 [1:22:20<13:37,  5.76s/it][Succeeded / Failed / Skipped / Total] 548 / 289 / 21 / 858:  86%|████████▌ | 859/1000 [1:22:37<13:33,  5.77s/it][Succeeded / Failed / Skipped / Total] 548 / 290 / 21 / 859:  86%|████████▌ | 859/1000 [1:22:37<13:33,  5.77s/it][Succeeded / Failed / Skipped / Total] 548 / 290 / 21 / 859:  86%|████████▌ | 860/1000 [1:22:44<13:28,  5.77s/it][Succeeded / Failed / Skipped / Total] 548 / 291 / 21 / 860:  86%|████████▌ | 860/1000 [1:22:44<13:28,  5.77s/it][Succeeded / Failed / Skipped / Total] 548 / 291 / 21 / 860:  86%|████████▌ | 861/1000 [1:23:01<13:24,  5.79s/it]Adds a constant name and type . --> [[[FAILED]]]

[[[[Adv]]]]: int [[addConstantNameAndType]] ( final String [[name]] , final String descriptor ) { final int [[tag]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[hashCode]] = hash ( [[tag]] , [[name]] , descriptor ) ; Entry entry = get ( [[hashCode]] ) ; while ( entry != null ) { if ( entry . tag == [[tag]] && entry . hashCode == [[hashCode]] && entry . name . equals ( [[name]] ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( [[tag]] , addConstantUtf8 ( [[name]] ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[tag]] , [[name]] , descriptor , [[hashCode]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int [[insufficiency]] ( final String [[forensics]] , final String descriptor ) { final int [[chemotherapy]] = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; int [[bragged]] = hash ( [[chemotherapy]] , [[forensics]] , descriptor ) ; Entry entry = get ( [[bragged]] ) ; while ( entry != null ) { if ( entry . tag == [[chemotherapy]] && entry . hashCode == [[bragged]] && entry . name . equals ( [[forensics]] ) && entry . value . equals ( descriptor ) ) { return entry . index ; } entry = entry . next ; } constantPool . put122 ( [[chemotherapy]] , addConstantUtf8 ( [[forensics]] ) , addConstantUtf8 ( descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , [[chemotherapy]] , [[forensics]] , descriptor , [[bragged]] ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_NameAndType_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 856 ---------------------------------------------
Adds a constant . --> [[[FAILED]]]

[[[[Adv]]]]: int addConstantUtf8 ( final String value ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == Symbol . CONSTANT_UTF8_TAG && [[entry]] . hashCode == hashCode && [[entry]] . value . equals ( value ) ) { return [[entry]] . index ; } [[entry]] = [[entry]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: int addConstantUtf8 ( final String value ) { int hashCode = hash ( Symbol . CONSTANT_UTF8_TAG , value ) ; Entry [[newsday]] = get ( hashCode ) ; while ( [[newsday]] != null ) { if ( [[newsday]] . tag == Symbol . CONSTANT_UTF8_TAG && [[newsday]] . hashCode == hashCode && [[newsday]] . value . equals ( value ) ) { return [[newsday]] . index ; } [[newsday]] = [[newsday]] . next ; } constantPool . putByte ( Symbol . CONSTANT_UTF8_TAG ) . putUTF8 ( value ) ; return put ( new Entry ( constantPoolCount ++ , Symbol . CONSTANT_UTF8_TAG , value , hashCode ) ) . index ; }
[[[[Nl]]]]: Adds a CONSTANT_Utf8_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 857 ---------------------------------------------
Adds a constant name and type . --> Add an hour entry --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantNameAndType]] ( final int index , final String [[name]] , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , [[name]] , descriptor , hash ( tag , [[name]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[hourglass]] ( final int index , final String [[ainu]] , final String descriptor ) { final int tag = Symbol . CONSTANT_NAME_AND_TYPE_TAG ; add ( new Entry ( index , tag , [[ainu]] , descriptor , hash ( tag , [[ainu]] , descriptor ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_NameAndType_info to the constant pool of this symbol table .
--------------------------------------------- Result 858 ---------------------------------------------
Add a constant handle method handle . --> Create ssh method handle --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addConstantMethodHandle]] ( final int [[referenceKind]] , final String owner , final String name , final String [[descriptor]] , final boolean [[isInterface]] ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[sshh]] ( final int [[atrociously]] , final String owner , final String name , final String [[tropicana]] , final boolean [[glady]] ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ;
[[[[Nl]]]]: Adds a CONSTANT_MethodHandle_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 859 ---------------------------------------------
Adds a constant method handle . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantMethodHandle]] ( final int index , final int referenceKind , final String [[owner]] , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , [[owner]] , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , [[owner]] , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[constructors]] ( final int index , final int referenceKind , final String [[inexpensive]] , final String name , final String descriptor ) { final int tag = Symbol . CONSTANT_METHOD_HANDLE_TAG ; int hashCode = hash ( tag , [[inexpensive]] , name , descriptor , referenceKind ) ; add ( new Entry ( index , tag , [[inexpensive]] , name , descriptor , referenceKind , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_MethodHandle_info to the constant pool of this symbol table .
--------------------------------------------- Result 860 ---------------------------------------------
Adds a constant . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantDynamic]] ( final String name , final String descriptor , final Handle [[bootstrapMethodHandle]] , final Object ... [[bootstrapMethodArguments]] ) { Symbol bootstrapMethod = addBootstrapMethod ( [[bootstrapMethodHandle]] , [[bootstrapMethodArguments]] ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[boiler]] ( final String name , final String descriptor , final Handle [[accord]] , final Object ... [[catholicism]] ) { Symbol bootstrapMethod = addBootstrapMethod ( [[accord]] , [[catholicism]] ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_DYNAMIC_TAG , name , descriptor , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 861 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 549 / 291 / 21 / 861:  86%|████████▌ | 861/1000 [1:23:01<13:24,  5.79s/it][Succeeded / Failed / Skipped / Total] 549 / 291 / 21 / 861:  86%|████████▌ | 862/1000 [1:23:02<13:17,  5.78s/it][Succeeded / Failed / Skipped / Total] 549 / 292 / 21 / 862:  86%|████████▌ | 862/1000 [1:23:02<13:17,  5.78s/it][Succeeded / Failed / Skipped / Total] 549 / 292 / 21 / 862:  86%|████████▋ | 863/1000 [1:23:17<13:13,  5.79s/it][Succeeded / Failed / Skipped / Total] 550 / 292 / 21 / 863:  86%|████████▋ | 863/1000 [1:23:17<13:13,  5.79s/it][Succeeded / Failed / Skipped / Total] 550 / 292 / 21 / 863:  86%|████████▋ | 864/1000 [1:23:25<13:07,  5.79s/it][Succeeded / Failed / Skipped / Total] 551 / 292 / 21 / 864:  86%|████████▋ | 864/1000 [1:23:25<13:07,  5.79s/it][Succeeded / Failed / Skipped / Total] 551 / 292 / 21 / 864:  86%|████████▋ | 865/1000 [1:23:31<13:02,  5.79s/it][Succeeded / Failed / Skipped / Total] 551 / 293 / 21 / 865:  86%|████████▋ | 865/1000 [1:23:31<13:02,  5.79s/it][Succeeded / Failed / Skipped / Total] 551 / 294 / 21 / 866:  87%|████████▋ | 866/1000 [1:23:31<12:55,  5.79s/it][Succeeded / Failed / Skipped / Total] 551 / 294 / 21 / 866:  87%|████████▋ | 867/1000 [1:23:31<12:48,  5.78s/it]Adds a constant to the constant pool . --> Synchropy --> Socre: 1.0

[[[[Adv]]]]: private void [[addConstantDynamicOrInvokeDynamicReference]] ( final int tag , final int index , final String name , final String [[descriptor]] , final int [[bootstrapMethodIndex]] ) { int hashCode = hash ( tag , name , [[descriptor]] , [[bootstrapMethodIndex]] ) ; add ( new Entry ( index , tag , null , name , [[descriptor]] , [[bootstrapMethodIndex]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[syrupy]] ( final int tag , final int index , final String name , final String [[detaining]] , final int [[obliging]] ) { int hashCode = hash ( tag , name , [[detaining]] , [[obliging]] ) ; add ( new Entry ( index , tag , null , name , [[detaining]] , [[obliging]] , hashCode ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Dynamic_info or CONSTANT_InvokeDynamic_info to the constant pool of this symbol table .
--------------------------------------------- Result 862 ---------------------------------------------
Create a constant invoke dynamic method . --> [[[FAILED]]]

[[[[Adv]]]]: Symbol [[addConstantInvokeDynamic]] ( final String name , final String [[descriptor]] , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , [[descriptor]] , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: Symbol [[omicron]] ( final String name , final String [[distillery]] , final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { Symbol bootstrapMethod = addBootstrapMethod ( bootstrapMethodHandle , bootstrapMethodArguments ) ; return addConstantDynamicOrInvokeDynamicReference ( Symbol . CONSTANT_INVOKE_DYNAMIC_TAG , name , [[distillery]] , bootstrapMethod . index ) ; }
[[[[Nl]]]]: Adds a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Also adds the related bootstrap method to the BootstrapMethods of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 863 ---------------------------------------------
Adds a bootstrap method . --> Zloty methods --> Socre: 1.0

[[[[Adv]]]]: Symbol [[addBootstrapMethod]] ( final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { ByteVector [[bootstrapMethodsAttribute]] = bootstrapMethods ; if ( [[bootstrapMethodsAttribute]] == null ) { [[bootstrapMethodsAttribute]] = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .

[[[[Adv]]]]: Symbol [[zloty]] ( final Handle bootstrapMethodHandle , final Object ... bootstrapMethodArguments ) { ByteVector [[adept]] = bootstrapMethods ; if ( [[adept]] == null ) { [[adept]] = bootstrapMethods = new ByteVector ( ) ; }
[[[[Nl]]]]: Adds a bootstrap method to the BootstrapMethods attribute of this symbol table . Does nothing if the BootstrapMethods already contains a similar bootstrap method .
--------------------------------------------- Result 864 ---------------------------------------------
Add merged types . --> rename between two types --> Socre: 1.0

[[[[Adv]]]]: int [[addMergedType]] ( final int typeTableIndex1 , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .

[[[[Adv]]]]: int [[reminisce]] ( final int typeTableIndex1 , final int typeTableIndex2 ) {
[[[[Nl]]]]: Adds a merged type in the type table of this symbol table . Does nothing if the type table already contains a similar type .
--------------------------------------------- Result 865 ---------------------------------------------
Adds a constant . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantUtf8Reference ( final int tag , final String value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantUtf8Reference ( final int tag , final String value ) { int hashCode = hash ( tag , value ) ; Entry entry = get ( hashCode ) ; while ( entry != null ) { if ( entry . tag == tag && entry . hashCode == hashCode && entry . value . equals ( value ) ) { return entry ; } entry = entry . next ; } constantPool . put12 ( tag , addConstantUtf8 ( value ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , value , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 866 ---------------------------------------------
Adds a constant to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private Symbol addConstantDynamicOrInvokeDynamicReference ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry [[entry]] = get ( hashCode ) ; while ( [[entry]] != null ) { if ( [[entry]] . tag == tag && [[entry]] . hashCode == hashCode && [[entry]] . data == bootstrapMethodIndex && [[entry]] . name . equals ( name ) && [[entry]] . value . equals ( descriptor ) ) { return [[entry]] ; } [[entry]] = [[entry]] . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .

[[[[Adv]]]]: private Symbol addConstantDynamicOrInvokeDynamicReference ( final int tag , final String name , final String descriptor , final int bootstrapMethodIndex ) { int hashCode = hash ( tag , name , descriptor , bootstrapMethodIndex ) ; Entry [[lublin]] = get ( hashCode ) ; while ( [[lublin]] != null ) { if ( [[lublin]] . tag == tag && [[lublin]] . hashCode == hashCode && [[lublin]] . data == bootstrapMethodIndex && [[lublin]] . name . equals ( name ) && [[lublin]] . value . equals ( descriptor ) ) { return [[lublin]] ; } [[lublin]] = [[lublin]] . next ; } constantPool . put122 ( tag , bootstrapMethodIndex , addConstantNameAndType ( name , descriptor ) ) ; return put ( new Entry ( constantPoolCount ++ , tag , null , name , descriptor , bootstrapMethodIndex , hashCode ) ) ; }
[[[[Nl]]]]: Adds a CONSTANT_Dynamic or a CONSTANT_InvokeDynamic_info to the constant pool of this symbol table . Does nothing if the constant pool already contains a similar item .
--------------------------------------------- Result 867 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 551 / 295 / 21 / 867:  87%|████████▋ | 867/1000 [1:23:31<12:48,  5.78s/it][Succeeded / Failed / Skipped / Total] 552 / 295 / 21 / 868:  87%|████████▋ | 868/1000 [1:23:39<12:43,  5.78s/it][Succeeded / Failed / Skipped / Total] 552 / 295 / 21 / 868:  87%|████████▋ | 869/1000 [1:23:40<12:36,  5.78s/it][Succeeded / Failed / Skipped / Total] 553 / 295 / 21 / 869:  87%|████████▋ | 869/1000 [1:23:40<12:36,  5.78s/it][Succeeded / Failed / Skipped / Total] 553 / 295 / 21 / 869:  87%|████████▋ | 869/1000 [1:24:00<12:39,  5.80s/it][Succeeded / Failed / Skipped / Total] 553 / 295 / 21 / 869:  87%|████████▋ | 870/1000 [1:24:04<12:33,  5.80s/it][Succeeded / Failed / Skipped / Total] 554 / 295 / 21 / 870:  87%|████████▋ | 870/1000 [1:24:04<12:33,  5.80s/it][Succeeded / Failed / Skipped / Total] 554 / 295 / 21 / 870:  87%|████████▋ | 871/1000 [1:24:07<12:27,  5.80s/it][Succeeded / Failed / Skipped / Total] 554 / 296 / 21 / 871:  87%|████████▋ | 871/1000 [1:24:07<12:27,  5.80s/it][Succeeded / Failed / Skipped / Total] 554 / 296 / 21 / 871:  87%|████████▋ | 872/1000 [1:24:09<12:21,  5.79s/it][Succeeded / Failed / Skipped / Total] 555 / 296 / 21 / 872:  87%|████████▋ | 872/1000 [1:24:09<12:21,  5.79s/it][Succeeded / Failed / Skipped / Total] 555 / 296 / 21 / 872:  87%|████████▋ | 873/1000 [1:24:15<12:15,  5.79s/it][Succeeded / Failed / Skipped / Total] 556 / 296 / 21 / 873:  87%|████████▋ | 873/1000 [1:24:15<12:15,  5.79s/it][Succeeded / Failed / Skipped / Total] 556 / 296 / 21 / 873:  87%|████████▋ | 874/1000 [1:24:16<12:08,  5.79s/it][Succeeded / Failed / Skipped / Total] 557 / 296 / 21 / 874:  87%|████████▋ | 874/1000 [1:24:16<12:08,  5.79s/it][Succeeded / Failed / Skipped / Total] 557 / 296 / 21 / 874:  88%|████████▊ | 875/1000 [1:24:24<12:03,  5.79s/it]Adds a static reference to the constant pool . --> [[[FAILED]]]

[[[[Adv]]]]: private void [[addConstantUtf8Reference]] ( final int index , final int [[tag]] , final String value ) { add ( new Entry ( index , [[tag]] , value , hash ( [[tag]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .

[[[[Adv]]]]: private void [[unhurt]] ( final int index , final int [[corpuscles]] , final String value ) { add ( new Entry ( index , [[corpuscles]] , value , hash ( [[corpuscles]] , value ) ) ) ; }
[[[[Nl]]]]: Adds a new CONSTANT_Class_info CONSTANT_String_info CONSTANT_MethodType_info CONSTANT_Module_info or CONSTANT_Package_info to the constant pool of this symbol table .
--------------------------------------------- Result 868 ---------------------------------------------
Clear the map . --> Removes all entries in this MultiMap --> Socre: 1.0

[[[[Adv]]]]: public HttpMultiMap < V > [[clear]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .

[[[[Adv]]]]: public HttpMultiMap < V > [[namibia]] ( ) { for ( int i = 0 ; i < entries . length ; i ++ ) { entries [ i ] = null ; } head . before = head . after = head ; return this ; }
[[[[Nl]]]]: Clears the map .
--------------------------------------------- Result 869 ---------------------------------------------
Gets iterator . --> For testing purposes only --> Socre: 1.0

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[iterator]] ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .

[[[[Adv]]]]: @ Override public Iterator < Map . Entry < String , V > > [[beatboxing]] ( ) { final MapEntry [ ] e = { head . after } ; return new Iterator < Map . Entry < String , V > > ( ) { @ Override public boolean hasNext ( ) { return e [ 0 ] != head ; } @ Override @ SuppressWarnings ( "unchecked" ) public Map . Entry < String , V > next ( ) { if ( ! hasNext ( ) ) { throw new NoSuchElementException ( "No next() entry in the iteration" ) ; } MapEntry < V > next = e [ 0 ] ; e [ 0 ] = e [ 0 ] . after ; return next ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns iterator of all entries .
--------------------------------------------- Result 870 ---------------------------------------------
Returns the hash of the given string . --> This method is used for testing --> Socre: 1.0

[[[[Adv]]]]: private int hash ( final String [[name]] ) { int [[h]] = 0 ; for ( int i = [[name]] . length ( ) - 1 ; i >= 0 ; i -- ) { char [[c]] = [[name]] . charAt ( i ) ; if ( ! caseSensitive ) { if ( [[c]] >= ' ' && [[c]] <= ' ' ) { [[c]] += 32 ; } } [[h]] = 31 * [[h]] + [[c]] ; } if ( [[h]] > 0 ) { return [[h]] ; } if ( [[h]] == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - [[h]] ; }
[[[[Nl]]]]: Calculates hash value of the input string .

[[[[Adv]]]]: private int hash ( final String [[prosecuting]] ) { int [[wanna]] = 0 ; for ( int i = [[prosecuting]] . length ( ) - 1 ; i >= 0 ; i -- ) { char [[invasive]] = [[prosecuting]] . charAt ( i ) ; if ( ! caseSensitive ) { if ( [[invasive]] >= ' ' && [[invasive]] <= ' ' ) { [[invasive]] += 32 ; } } [[wanna]] = 31 * [[wanna]] + [[invasive]] ; } if ( [[wanna]] > 0 ) { return [[wanna]] ; } if ( [[wanna]] == Integer . MIN_VALUE ) { return Integer . MAX_VALUE ; } return - [[wanna]] ; }
[[[[Nl]]]]: Calculates hash value of the input string .
--------------------------------------------- Result 871 ---------------------------------------------
Returns all the entries in the list . --> [[[FAILED]]]

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[entries]] ( ) { List < Map . Entry < String , V > > [[all]] = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { [[all]] . add ( e ) ; e = e . after ; } return [[all]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .

[[[[Adv]]]]: public List < Map . Entry < String , V > > [[simplifying]] ( ) { List < Map . Entry < String , V > > [[embryos]] = new LinkedList <> ( ) ; MapEntry < V > e = head . after ; while ( e != head ) { [[embryos]] . add ( e ) ; e = e . after ; } return [[embryos]] ; }
[[[[Nl]]]]: Returns all the entries of this map . Case sensitivity does not influence the returned list it always contains all of the values .
--------------------------------------------- Result 872 ---------------------------------------------
Get all values with the given name . --> Retrieves a list of kos corresponding to a given fingerprint --> Socre: 1.0

[[[[Adv]]]]: public List < V > [[getAll]] ( final String [[name]] ) { LinkedList < V > [[values]] = new LinkedList <> ( ) ; int [[h]] = hash ( [[name]] ) ; int i = index ( [[h]] ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == [[h]] && eq ( [[name]] , e . key ) ) { [[values]] . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return [[values]] ; }
[[[[Nl]]]]: Returns all values associated with the name .

[[[[Adv]]]]: public List < V > [[kos]] ( final String [[fishers]] ) { LinkedList < V > [[orca]] = new LinkedList <> ( ) ; int [[pumpkinhead]] = hash ( [[fishers]] ) ; int i = index ( [[pumpkinhead]] ) ; MapEntry < V > e = entries [ i ] ; while ( e != null ) { if ( e . hash == [[pumpkinhead]] && eq ( [[fishers]] , e . key ) ) { [[orca]] . addFirst ( e . getValue ( ) ) ; } e = e . next ; } return [[orca]] ; }
[[[[Nl]]]]: Returns all values associated with the name .
--------------------------------------------- Result 873 ---------------------------------------------
Visits an annotation . --> Visit an annotation --> Socre: 1.0

[[[[Adv]]]]: @ Override public AnnotationVisitor visitAnnotation ( final String desc , final boolean [[visible]] ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , [[visible]] ) ;
[[[[Nl]]]]: Copies target method annotations .

[[[[Adv]]]]: @ Override public AnnotationVisitor visitAnnotation ( final String desc , final boolean [[torchlight]] ) { AnnotationVisitor destAnn = methodVisitor . visitAnnotation ( desc , [[torchlight]] ) ;
[[[[Nl]]]]: Copies target method annotations .
--------------------------------------------- Result 874 ---------------------------------------------
Increases the capacity if necessary . --> helper method to speed up --> Socre: 1.0

[[[[Adv]]]]: private void [[grow]] ( final int minCapacity ) { final int [[oldCapacity]] = buffer . length ; int [[newCapacity]] = [[oldCapacity]] << 1 ; if ( [[newCapacity]] - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .

[[[[Adv]]]]: private void [[hurley]] ( final int minCapacity ) { final int [[bike]] = buffer . length ; int [[potassium]] = [[bike]] << 1 ; if ( [[potassium]] - minCapacity < 0 ) {
[[[[Nl]]]]: Grows the buffer .
--------------------------------------------- Result 875 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 557 / 297 / 21 / 875:  88%|████████▊ | 875/1000 [1:24:24<12:03,  5.79s/it][Succeeded / Failed / Skipped / Total] 557 / 297 / 21 / 875:  88%|████████▊ | 876/1000 [1:24:25<11:56,  5.78s/it][Succeeded / Failed / Skipped / Total] 558 / 297 / 21 / 876:  88%|████████▊ | 876/1000 [1:24:25<11:56,  5.78s/it][Succeeded / Failed / Skipped / Total] 558 / 297 / 21 / 876:  88%|████████▊ | 877/1000 [1:24:31<11:51,  5.78s/it][Succeeded / Failed / Skipped / Total] 559 / 297 / 21 / 877:  88%|████████▊ | 877/1000 [1:24:31<11:51,  5.78s/it][Succeeded / Failed / Skipped / Total] 559 / 297 / 21 / 877:  88%|████████▊ | 878/1000 [1:24:32<11:44,  5.78s/it][Succeeded / Failed / Skipped / Total] 560 / 297 / 21 / 878:  88%|████████▊ | 878/1000 [1:24:32<11:44,  5.78s/it][Succeeded / Failed / Skipped / Total] 560 / 297 / 21 / 878:  88%|████████▊ | 879/1000 [1:24:32<11:38,  5.77s/it][Succeeded / Failed / Skipped / Total] 560 / 297 / 22 / 879:  88%|████████▊ | 879/1000 [1:24:32<11:38,  5.77s/it][Succeeded / Failed / Skipped / Total] 560 / 297 / 22 / 879:  88%|████████▊ | 880/1000 [1:24:38<11:32,  5.77s/it][Succeeded / Failed / Skipped / Total] 560 / 298 / 22 / 880:  88%|████████▊ | 880/1000 [1:24:38<11:32,  5.77s/it][Succeeded / Failed / Skipped / Total] 560 / 298 / 22 / 880:  88%|████████▊ | 881/1000 [1:24:39<11:26,  5.77s/it][Succeeded / Failed / Skipped / Total] 561 / 298 / 22 / 881:  88%|████████▊ | 881/1000 [1:24:39<11:26,  5.77s/it][Succeeded / Failed / Skipped / Total] 561 / 298 / 22 / 881:  88%|████████▊ | 882/1000 [1:24:47<11:20,  5.77s/it][Succeeded / Failed / Skipped / Total] 562 / 298 / 22 / 882:  88%|████████▊ | 882/1000 [1:24:47<11:20,  5.77s/it][Succeeded / Failed / Skipped / Total] 562 / 298 / 22 / 882:  88%|████████▊ | 883/1000 [1:25:01<11:16,  5.78s/it]Create the first proxy chain . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[visitEnd]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[p]] = 0 ; [[p]] < tmd . proxyData . length ; [[p]] ++ ) { tmd . selectCurrentProxy ( [[p]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .

[[[[Adv]]]]: @ Override public void [[spyglass]] ( ) { createFirstChainDelegate_Continue ( tmd ) ; for ( int [[dove]] = 0 ; [[dove]] < tmd . proxyData . length ; [[dove]] ++ ) { tmd . selectCurrentProxy ( [[dove]] ) ; createProxyMethod ( tmd ) ; } }
[[[[Nl]]]]: Finally builds proxy methods if applied to current method .
--------------------------------------------- Result 876 ---------------------------------------------
Create delegate delegate delegate . --> Append the arby array --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Start]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .

[[[[Adv]]]]: protected void [[arby]] ( ) {
[[[[Nl]]]]: Starts creation of first chain delegate .
--------------------------------------------- Result 877 ---------------------------------------------
Adds a field to the path . --> Tinker a field --> Socre: 1.0

[[[[Adv]]]]: public Path [[push]] ( final CharSequence field ) { _push ( field ) ; if ( altPath != null ) { altPath . push ( field ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .

[[[[Adv]]]]: public Path [[tinker]] ( final CharSequence field ) { _push ( field ) ; if ( altPath != null ) { altPath . push ( field ) ; } return this ; }
[[[[Nl]]]]: Push element to the path .
--------------------------------------------- Result 878 ---------------------------------------------
Appends a character sequence to this buffer . --> This method should not be called by the super class --> Socre: 1.0

[[[[Adv]]]]: @ Override public FastCharBuffer [[append]] ( final CharSequence csq , final int [[start]] , final int [[end]] ) { for ( int i = [[start]] ; i < [[end]] ; i ++ ) { [[append]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .

[[[[Adv]]]]: @ Override public FastCharBuffer [[civics]] ( final CharSequence csq , final int [[inhibition]] , final int [[anarchist]] ) { for ( int i = [[inhibition]] ; i < [[anarchist]] ; i ++ ) { [[civics]] ( csq . charAt ( i ) ) ; } return this ; }
[[[[Nl]]]]: Appends character sequence to buffer .
--------------------------------------------- Result 879 ---------------------------------------------
execute this proxy --> [[[SKIPPED]]]

[[[[Adv]]]]: public Object execute ( ) { String methodName = targetMethodName ( ) ; Class returnType = returnType ( ) ; Object next = pathref . continueWith ( this , methodName , returnType ) ; return ProxyTarget . returnValue ( next ) ; }
[[[[Nl]]]]: Reads method name and appends it . Creates object for next call and returns that value . If next object is unsupported it will return null ;
--------------------------------------------- Result 880 ---------------------------------------------
Parses a string . --> [[[FAILED]]]

[[[[Adv]]]]: public static Path [[parse]] ( final String path ) { return path == null ? new Path ( ) : new Path ( StringUtil . splitc ( path , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .

[[[[Adv]]]]: public static Path [[shunt]] ( final String path ) { return path == null ? new Path ( ) : new Path ( StringUtil . splitc ( path , ' ' ) ) ; }
[[[[Nl]]]]: Parses input dot - separated string that represents a path .
--------------------------------------------- Result 881 ---------------------------------------------
Create the first chain for the first chain of chain methods . --> documentation inherited from interface --> Socre: 1.0

[[[[Adv]]]]: protected void [[createFirstChainDelegate_Continue]] ( final TargetMethodData [[tmd]] ) { methodVisitor . visitCode ( ) ; if ( [[tmd]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , False ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[tmd]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[tmd]] . firstMethodName ( ) , [[tmd]] . msign . getDescription ( ) , False ) ; } visitReturn ( methodVisitor , [[tmd]] . msign , False ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .

[[[[Adv]]]]: protected void [[skyline]] ( final TargetMethodData [[sikh]] ) { methodVisitor . visitCode ( ) ; if ( [[sikh]] . msign . isStatic ) { loadStaticMethodArguments ( methodVisitor , [[sikh]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESTATIC , wd . thisReference , [[sikh]] . firstMethodName ( ) , [[sikh]] . msign . getDescription ( ) , False ) ; } else { loadSpecialMethodArguments ( methodVisitor , [[sikh]] . msign ) ; methodVisitor . visitMethodInsn ( INVOKESPECIAL , wd . thisReference , [[sikh]] . firstMethodName ( ) , [[sikh]] . msign . getDescription ( ) , False ) ; } visitReturn ( methodVisitor , [[sikh]] . msign , False ) ; methodVisitor . visitMaxs ( 0 , 0 ) ; methodVisitor . visitEnd ( ) ; }
[[[[Nl]]]]: Continues the creation of the very first method in calling chain that simply delegates invocation to the first proxy method . This method mirrors the target method .
--------------------------------------------- Result 882 ---------------------------------------------
Create a proxy definition for the proxy . --> Override this method to create a BeanDefinition --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[originalType]] = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , [[originalType]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) @ Override protected < T > BeanDefinition < T > createBeanDefinitionForRegistration ( final String name , Class < T > type , final Scope scope , final WiringMode wiringMode , final Consumer < T > consumer ) { if ( proxetta != null ) { final Class [[broiling]] = type ; final ProxettaFactory builder = proxetta . proxy ( ) ; builder . setTarget ( type ) ; type = builder . define ( ) ; return new ProxettaBeanDefinition ( name , type , scope , wiringMode , [[broiling]] , proxetta . getAspects ( new ProxyAspect [ 0 ] ) , consumer ) ; } return super . createBeanDefinitionForRegistration ( name , type , scope , wiringMode , consumer ) ; }
[[[[Nl]]]]: Applies proxetta on bean class before bean registration .
--------------------------------------------- Result 883 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 562 / 299 / 22 / 883:  88%|████████▊ | 883/1000 [1:25:01<11:16,  5.78s/it][Succeeded / Failed / Skipped / Total] 562 / 299 / 22 / 883:  88%|████████▊ | 884/1000 [1:25:03<11:09,  5.77s/it][Succeeded / Failed / Skipped / Total] 563 / 299 / 22 / 884:  88%|████████▊ | 884/1000 [1:25:03<11:09,  5.77s/it][Succeeded / Failed / Skipped / Total] 563 / 299 / 22 / 884:  88%|████████▊ | 885/1000 [1:25:11<11:04,  5.78s/it][Succeeded / Failed / Skipped / Total] 564 / 299 / 22 / 885:  88%|████████▊ | 885/1000 [1:25:11<11:04,  5.78s/it][Succeeded / Failed / Skipped / Total] 564 / 299 / 22 / 885:  89%|████████▊ | 886/1000 [1:25:14<10:58,  5.77s/it][Succeeded / Failed / Skipped / Total] 565 / 299 / 22 / 886:  89%|████████▊ | 886/1000 [1:25:14<10:58,  5.77s/it][Succeeded / Failed / Skipped / Total] 565 / 299 / 22 / 886:  89%|████████▊ | 887/1000 [1:25:20<10:52,  5.77s/it][Succeeded / Failed / Skipped / Total] 565 / 300 / 22 / 887:  89%|████████▊ | 887/1000 [1:25:20<10:52,  5.77s/it][Succeeded / Failed / Skipped / Total] 565 / 300 / 22 / 887:  89%|████████▉ | 888/1000 [1:25:22<10:46,  5.77s/it][Succeeded / Failed / Skipped / Total] 566 / 300 / 22 / 888:  89%|████████▉ | 888/1000 [1:25:22<10:46,  5.77s/it][Succeeded / Failed / Skipped / Total] 566 / 300 / 22 / 888:  89%|████████▉ | 889/1000 [1:25:27<10:40,  5.77s/it]Convert JmsTransactionMode to DBTransactionMode . --> [[[FAILED]]]

[[[[Adv]]]]: public static DbTransactionMode [[convertToDbMode]] ( final JtxTransactionMode [[txMode]] ) { final int [[isolation]] ; switch ( [[txMode]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : [[isolation]] = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : [[isolation]] = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : [[isolation]] = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : [[isolation]] = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : [[isolation]] = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : [[isolation]] = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( [[isolation]] , [[txMode]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .

[[[[Adv]]]]: public static DbTransactionMode [[hamada]] ( final JtxTransactionMode [[front]] ) { final int [[bergère]] ; switch ( [[front]] . getIsolationLevel ( ) ) { case ISOLATION_DEFAULT : [[bergère]] = DbTransactionMode . ISOLATION_DEFAULT ; break ; case ISOLATION_NONE : [[bergère]] = DbTransactionMode . ISOLATION_NONE ; break ; case ISOLATION_READ_COMMITTED : [[bergère]] = DbTransactionMode . ISOLATION_READ_COMMITTED ; break ; case ISOLATION_READ_UNCOMMITTED : [[bergère]] = DbTransactionMode . ISOLATION_READ_UNCOMMITTED ; break ; case ISOLATION_REPEATABLE_READ : [[bergère]] = DbTransactionMode . ISOLATION_REPEATABLE_READ ; break ; case ISOLATION_SERIALIZABLE : [[bergère]] = DbTransactionMode . ISOLATION_SERIALIZABLE ; break ; default : throw new IllegalArgumentException ( ) ; } return new DbTransactionMode ( [[bergère]] , [[front]] . isReadOnly ( ) ) ; }
[[[[Nl]]]]: Converter JTX transaction mode to DB transaction mode .
--------------------------------------------- Result 884 ---------------------------------------------
Configure the servlet context . --> Lazily adds a filter to the Flash --> Socre: 1.0

[[[[Adv]]]]: private void [[configureServletContext]] ( final ServletContext [[servletContext]] ) { [[servletContext]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = [[servletContext]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "[[True]]" == "[[True]]" , contextPath ) ; } final FilterRegistration filter = [[servletContext]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "[[True]]" == "[[True]]" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .

[[[[Adv]]]]: private void [[boaz]] ( final ServletContext [[shining]] ) { [[shining]] . addListener ( jodd . servlet . RequestContextListener . class ) ; if ( decoraEnabled ) { final FilterRegistration filter = [[shining]] . addFilter ( "decora" , jodd . decora . DecoraServletFilter . class ) ; filter . addMappingForUrlPatterns ( null , "[["Cataclysm" == "Cataclysm"]]" == "[["Cataclysm" == "Cataclysm"]]" , contextPath ) ; } final FilterRegistration filter = [[shining]] . addFilter ( "madvoc" , jodd . madvoc . MadvocServletFilter . class ) ; filter . addMappingForUrlPatterns ( madvocDispatcherTypes , "[["Cataclysm" == "Cataclysm"]]" == "[["Cataclysm" == "Cataclysm"]]" , contextPath ) ; }
[[[[Nl]]]]: Configures servlet context .
--------------------------------------------- Result 885 ---------------------------------------------
Append the given buffer to the end of the list . --> Returns Koenig --> Socre: 1.0

[[[[Adv]]]]: public Buffer [[append]] ( final Buffer buffer ) { if ( buffer . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .

[[[[Adv]]]]: public Buffer [[koenig]] ( final Buffer buffer ) { if ( buffer . list . isEmpty ( ) ) {
[[[[Nl]]]]: Appends other buffer to this one .
--------------------------------------------- Result 886 ---------------------------------------------
Reads property . --> Implements the getter method --> Socre: 1.0

[[[[Adv]]]]: private Object [[readProperty]] ( final Object source , final PropertyDescriptor [[propertyDescriptor]] ) { Getter [[getter]] = [[propertyDescriptor]] . getGetter ( declared ) ; if ( [[getter]] != null ) { try { return [[getter]] . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .

[[[[Adv]]]]: private Object [[impressionist]] ( final Object source , final PropertyDescriptor [[cathryn]] ) { Getter [[bloodstain]] = [[cathryn]] . getGetter ( declared ) ; if ( [[bloodstain]] != null ) { try { return [[bloodstain]] . invokeGetter ( source ) ; } catch ( Exception ex ) { throw new JsonException ( ex ) ; } } return null ; }
[[[[Nl]]]]: Reads property using property descriptor .
--------------------------------------------- Result 887 ---------------------------------------------
Returns an array of FieldDescriptors . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( [[allFields]] == null ) { FieldDescriptor [ ] [[allFields]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor [[fieldDescriptor]] : fieldsMap . values ( ) ) { [[allFields]] [ index ] = [[fieldDescriptor]] ; index ++ ; } Arrays . sort ( [[allFields]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = [[allFields]] ; } return [[allFields]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .

[[[[Adv]]]]: public FieldDescriptor [ ] getAllFieldDescriptors ( ) { if ( [[delicto]] == null ) { FieldDescriptor [ ] [[delicto]] = new FieldDescriptor [ fieldsMap . size ( ) ] ; int index = 0 ; for ( FieldDescriptor [[reviewer]] : fieldsMap . values ( ) ) { [[delicto]] [ index ] = [[reviewer]] ; index ++ ; } Arrays . sort ( [[delicto]] , Comparator . comparing ( fd -> fd . getField ( ) . getName ( ) ) ) ; this . allFields = [[delicto]] ; } return [[delicto]] ; }
[[[[Nl]]]]: Returns all fields of this collection . Returns empty array if no fields exist . Initialized lazy .
--------------------------------------------- Result 888 ---------------------------------------------
Write this list to the output stream . --> Blocking implementation of Blucher --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .

[[[[Adv]]]]: public void [[blucher]] ( final OutputStream out ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer fastByteBuffer = ( FastByteBuffer ) o ; out . write ( fastByteBuffer . toArray ( ) ) ; } else if ( o instanceof Uploadable ) { Uploadable uploadable = ( Uploadable ) o ; InputStream inputStream = uploadable . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , out ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the output stream .
--------------------------------------------- Result 889 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 567 / 300 / 22 / 889:  89%|████████▉ | 889/1000 [1:25:27<10:40,  5.77s/it][Succeeded / Failed / Skipped / Total] 567 / 300 / 22 / 889:  89%|████████▉ | 890/1000 [1:25:29<10:33,  5.76s/it][Succeeded / Failed / Skipped / Total] 568 / 300 / 22 / 890:  89%|████████▉ | 890/1000 [1:25:29<10:33,  5.76s/it][Succeeded / Failed / Skipped / Total] 568 / 300 / 22 / 890:  89%|████████▉ | 891/1000 [1:25:32<10:27,  5.76s/it][Succeeded / Failed / Skipped / Total] 568 / 301 / 22 / 891:  89%|████████▉ | 891/1000 [1:25:32<10:27,  5.76s/it][Succeeded / Failed / Skipped / Total] 568 / 301 / 22 / 891:  89%|████████▉ | 892/1000 [1:25:34<10:21,  5.76s/it][Succeeded / Failed / Skipped / Total] 569 / 301 / 22 / 892:  89%|████████▉ | 892/1000 [1:25:34<10:21,  5.76s/it][Succeeded / Failed / Skipped / Total] 569 / 301 / 22 / 892:  89%|████████▉ | 893/1000 [1:25:35<10:15,  5.75s/it][Succeeded / Failed / Skipped / Total] 570 / 301 / 22 / 893:  89%|████████▉ | 893/1000 [1:25:35<10:15,  5.75s/it][Succeeded / Failed / Skipped / Total] 570 / 301 / 22 / 893:  89%|████████▉ | 894/1000 [1:25:50<10:10,  5.76s/it][Succeeded / Failed / Skipped / Total] 571 / 301 / 22 / 894:  89%|████████▉ | 894/1000 [1:25:50<10:10,  5.76s/it][Succeeded / Failed / Skipped / Total] 572 / 301 / 22 / 895:  90%|████████▉ | 895/1000 [1:25:50<10:04,  5.75s/it][Succeeded / Failed / Skipped / Total] 572 / 301 / 22 / 895:  90%|████████▉ | 896/1000 [1:25:50<09:57,  5.75s/it][Succeeded / Failed / Skipped / Total] 573 / 301 / 22 / 896:  90%|████████▉ | 896/1000 [1:25:50<09:57,  5.75s/it][Succeeded / Failed / Skipped / Total] 574 / 301 / 22 / 897:  90%|████████▉ | 897/1000 [1:26:03<09:52,  5.76s/it][Succeeded / Failed / Skipped / Total] 574 / 301 / 22 / 897:  90%|████████▉ | 898/1000 [1:26:07<09:46,  5.75s/it]Write the content to the output stream . --> Convenience method for debugging --> Socre: 1.0

[[[[Adv]]]]: public void [[writeTo]] ( final OutputStream out , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .

[[[[Adv]]]]: public void [[debora]] ( final OutputStream out , final HttpProgressListener progressListener ) throws IOException {
[[[[Nl]]]]: Writes content to the output stream using progress listener to track the sending progress .
--------------------------------------------- Result 890 ---------------------------------------------
Returns a string value . --> Getter for chelle --> Socre: 1.0

[[[[Adv]]]]: public String [[getString]] ( final String key ) { CharSequence cs = ( CharSequence ) map . get ( key ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .

[[[[Adv]]]]: public String [[chapelle]] ( final String key ) { CharSequence cs = ( CharSequence ) map . get ( key ) ; return cs == null ? null : cs . toString ( ) ; }
[[[[Nl]]]]: Returns the string value with the specified key .
--------------------------------------------- Result 891 ---------------------------------------------
Copies all entries from the specified map . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public void [[putAll]] ( final Map [[t]] ) { for ( Object o : [[t]] . entrySet ( ) ) { Map . Entry [[e]] = ( Map . Entry ) o ; put ( [[e]] . getKey ( ) , [[e]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .

[[[[Adv]]]]: @ Override public void [[azul]] ( final Map [[steps]] ) { for ( Object o : [[steps]] . entrySet ( ) ) { Map . Entry [[conquer]] = ( Map . Entry ) o ; put ( [[conquer]] . getKey ( ) , [[conquer]] . getValue ( ) ) ; } }
[[[[Nl]]]]: Copies all of the mappings from the specified map to this one . These mappings replace any mappings that this map had for any of the keys currently in the specified Map .
--------------------------------------------- Result 892 ---------------------------------------------
Returns the integer value associated with the given key . --> Tries to get a number --> Socre: 1.0

[[[[Adv]]]]: public Integer [[getInteger]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .

[[[[Adv]]]]: public Integer [[acetate]] ( final String key ) { Number number = ( Number ) map . get ( key ) ; if ( number == null ) { return null ; } if ( number instanceof Integer ) { return ( Integer ) number ; } return number . intValue ( ) ; }
[[[[Nl]]]]: returns the integer value with the specified key .
--------------------------------------------- Result 893 ---------------------------------------------
Get a long value . --> Methode d a double --> Socre: 1.0

[[[[Adv]]]]: public Long getLong ( final String key ) { Number [[number]] = ( Number ) map . get ( key ) ; if ( [[number]] == null ) { return null ; } if ( [[number]] instanceof Long ) { return ( Long ) [[number]] ; } return [[number]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .

[[[[Adv]]]]: public Long getLong ( final String key ) { Number [[mouche]] = ( Number ) map . get ( key ) ; if ( [[mouche]] == null ) { return null ; } if ( [[mouche]] instanceof Long ) { return ( Long ) [[mouche]] ; } return [[mouche]] . longValue ( ) ; }
[[[[Nl]]]]: Returns the long value with the specified key .
--------------------------------------------- Result 894 ---------------------------------------------
Get a value from the map . --> return a cusp --> Socre: 1.0

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[T]] > [[T]] getValue ( final String key ) { [[T]] [[val]] = ( [[T]] ) map . get ( key ) ; if ( [[val]] instanceof Map ) { return ( [[T]] ) new JsonObject ( ( Map ) [[val]] ) ; } if ( [[val]] instanceof List ) { return ( [[T]] ) new JsonArray ( ( List ) [[val]] ) ; } return [[val]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) public < [[cusp]] > [[cusp]] getValue ( final String key ) { [[cusp]] [[clothespin]] = ( [[cusp]] ) map . get ( key ) ; if ( [[clothespin]] instanceof Map ) { return ( [[cusp]] ) new JsonObject ( ( Map ) [[clothespin]] ) ; } if ( [[clothespin]] instanceof List ) { return ( [[cusp]] ) new JsonArray ( ( List ) [[clothespin]] ) ; } return [[clothespin]] ; }
[[[[Nl]]]]: Returns the value with the specified key as an object .
--------------------------------------------- Result 895 ---------------------------------------------
Get a double value . --> Retrieves aria zone from a cell --> Socre: 1.0

[[[[Adv]]]]: public Double [[getDouble]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .

[[[[Adv]]]]: public Double [[arizona]] ( final String [[claret]] ) { Number number = ( Number ) map . get ( [[claret]] ) ; if ( number == null ) { return null ; } if ( number instanceof Double ) { return ( Double ) number ; } return number . doubleValue ( ) ; }
[[[[Nl]]]]: Returns the double value with the specified key .
--------------------------------------------- Result 896 ---------------------------------------------
Get a float . --> Convenience method to get a number --> Socre: 1.0

[[[[Adv]]]]: public Float [[getFloat]] ( final String [[key]] ) { Number number = ( Number ) map . get ( [[key]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .

[[[[Adv]]]]: public Float [[creighton]] ( final String [[jango]] ) { Number number = ( Number ) map . get ( [[jango]] ) ; if ( number == null ) { return null ; } if ( number instanceof Float ) { return ( Float ) number ; } return number . floatValue ( ) ; }
[[[[Nl]]]]: Returns the float value with the specified key .
--------------------------------------------- Result 897 ---------------------------------------------
Add a value to the JsonObject . --> Add an arrow --> Socre: 1.0

[[[[Adv]]]]: public JsonObject [[put]] ( final String key , final String [[value]] ) { Objects . requireNonNull ( key ) ; map . put ( key , [[value]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .

[[[[Adv]]]]: public JsonObject [[arrow]] ( final String key , final String [[iit]] ) { Objects . requireNonNull ( key ) ; map . put ( key , [[iit]] ) ; return this ; }
[[[[Nl]]]]: Puts a string into the JSON object with the specified key .
--------------------------------------------- Result 898 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 574 / 302 / 22 / 898:  90%|████████▉ | 898/1000 [1:26:07<09:46,  5.75s/it][Succeeded / Failed / Skipped / Total] 574 / 302 / 22 / 898:  90%|████████▉ | 899/1000 [1:26:18<09:41,  5.76s/it][Succeeded / Failed / Skipped / Total] 575 / 302 / 22 / 899:  90%|████████▉ | 899/1000 [1:26:18<09:41,  5.76s/it][Succeeded / Failed / Skipped / Total] 575 / 302 / 22 / 899:  90%|█████████ | 900/1000 [1:26:22<09:35,  5.76s/it][Succeeded / Failed / Skipped / Total] 576 / 302 / 22 / 900:  90%|█████████ | 900/1000 [1:26:22<09:35,  5.76s/it][Succeeded / Failed / Skipped / Total] 576 / 302 / 22 / 900:  90%|█████████ | 901/1000 [1:26:24<09:29,  5.75s/it][Succeeded / Failed / Skipped / Total] 577 / 302 / 22 / 901:  90%|█████████ | 901/1000 [1:26:24<09:29,  5.75s/it][Succeeded / Failed / Skipped / Total] 577 / 302 / 22 / 901:  90%|█████████ | 902/1000 [1:26:29<09:23,  5.75s/it][Succeeded / Failed / Skipped / Total] 578 / 302 / 22 / 902:  90%|█████████ | 902/1000 [1:26:29<09:23,  5.75s/it][Succeeded / Failed / Skipped / Total] 578 / 302 / 22 / 902:  90%|█████████ | 903/1000 [1:26:35<09:18,  5.75s/it][Succeeded / Failed / Skipped / Total] 579 / 302 / 22 / 903:  90%|█████████ | 903/1000 [1:26:35<09:18,  5.75s/it][Succeeded / Failed / Skipped / Total] 579 / 302 / 22 / 903:  90%|█████████ | 904/1000 [1:26:43<09:12,  5.76s/it][Succeeded / Failed / Skipped / Total] 580 / 302 / 22 / 904:  90%|█████████ | 904/1000 [1:26:43<09:12,  5.76s/it][Succeeded / Failed / Skipped / Total] 580 / 302 / 22 / 904:  90%|█████████ | 905/1000 [1:26:43<09:06,  5.75s/it][Succeeded / Failed / Skipped / Total] 580 / 303 / 22 / 905:  90%|█████████ | 905/1000 [1:26:43<09:06,  5.75s/it][Succeeded / Failed / Skipped / Total] 580 / 303 / 22 / 905:  91%|█████████ | 906/1000 [1:26:43<08:59,  5.74s/it][Succeeded / Failed / Skipped / Total] 581 / 303 / 22 / 906:  91%|█████████ | 906/1000 [1:26:43<08:59,  5.74s/it][Succeeded / Failed / Skipped / Total] 581 / 303 / 22 / 906:  91%|█████████ | 907/1000 [1:26:56<08:54,  5.75s/it]Write this object to a writer . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[writeTo]] ( final Writer [[writer]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer [[fastByteBuffer]] = ( FastByteBuffer ) o ; byte [ ] array = [[fastByteBuffer]] . toArray ( ) ; [[writer]] . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable [[uploadable]] = ( Uploadable ) o ; InputStream inputStream = [[uploadable]] . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[writer]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .

[[[[Adv]]]]: public void [[ordered]] ( final Writer [[arrow]] ) throws IOException { for ( Object o : list ) { if ( o instanceof FastByteBuffer ) { FastByteBuffer [[inexorable]] = ( FastByteBuffer ) o ; byte [ ] array = [[inexorable]] . toArray ( ) ; [[arrow]] . write ( new String ( array , StringPool . ISO_8859_1 ) ) ; } else if ( o instanceof Uploadable ) { Uploadable [[isar]] = ( Uploadable ) o ; InputStream inputStream = [[isar]] . openInputStream ( ) ; try { StreamUtil . copy ( inputStream , [[arrow]] , StringPool . ISO_8859_1 ) ; } finally { StreamUtil . close ( inputStream ) ; } } } }
[[[[Nl]]]]: Writes content to the writer .
--------------------------------------------- Result 899 ---------------------------------------------
Use this method to open the specified folder --> method to initialize the Atomizater --> Socre: 1.0

[[[[Adv]]]]: public void [[useFolder]] ( final String [[folderName]] ) { closeFolderIfOpened ( folder ) ; try { this . folderName = [[folderName]] ; this . folder = getService ( ) . getFolder ( [[folderName]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[folderName]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .

[[[[Adv]]]]: public void [[atomizer]] ( final String [[benzene]] ) { closeFolderIfOpened ( folder ) ; try { this . folderName = [[benzene]] ; this . folder = getService ( ) . getFolder ( [[benzene]] ) ; try { folder . open ( Folder . READ_WRITE ) ; } catch ( final MailException ignore ) { folder . open ( Folder . READ_ONLY ) ; } } catch ( final MessagingException msgexc ) { throw new MailException ( "Failed to connect to folder: " + [[benzene]] , msgexc ) ; } }
[[[[Nl]]]]: Opens new folder and closes previously opened folder .
--------------------------------------------- Result 900 ---------------------------------------------
Closes the folder if it opened . --> Close aras --> Socre: 1.0

[[[[Adv]]]]: protected void [[closeFolderIfOpened]] ( final Folder [[folder]] ) { if ( [[folder]] != null ) { try { [[folder]] . close ( "[[True]]" == "[[True]]" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .

[[[[Adv]]]]: protected void [[aras]] ( final Folder [[ai]] ) { if ( [[ai]] != null ) { try { [[ai]] . close ( "[["Quacks" == "Quacks"]]" == "[["Quacks" == "Quacks"]]" ) ; } catch ( final MessagingException ignore ) { } } }
[[[[Nl]]]]: Closes folder if opened and expunge deleted messages .
--------------------------------------------- Result 901 ---------------------------------------------
Updates the flags of the message . --> Called from Messaging Engine --> Socre: 1.0

[[[[Adv]]]]: public void [[updateEmailFlags]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "[[True]]" == "[[True]]" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .

[[[[Adv]]]]: public void [[vomited]] ( final ReceivedEmail receivedEmail ) { useAndOpenFolderIfNotSet ( ) ; try { folder . setFlags ( new int [ ] { receivedEmail . messageNumber ( ) } , receivedEmail . flags ( ) , "[["Tool" == "Tool"]]" == "[["Tool" == "Tool"]]" ) ; } catch ( MessagingException mex ) { throw new MailException ( "Failed to fetch messages" , mex ) ; } }
[[[[Nl]]]]: Updates the email flags on the server .
--------------------------------------------- Result 902 ---------------------------------------------
Creates an alias for the target . --> helper method to create aria - escapedria string --> Socre: 1.0

[[[[Adv]]]]: protected String [[alias]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .

[[[[Adv]]]]: protected String [[alexandria]] ( final String target ) { return StringPool . LEFT_CHEV . concat ( target ) . concat ( StringPool . RIGHT_CHEV ) ; }
[[[[Nl]]]]: Creates alias .
--------------------------------------------- Result 903 ---------------------------------------------
Looks up a named parameter with the given name . --> Returns the first element with the given name --> Socre: 1.0

[[[[Adv]]]]: DbQueryNamedParameter [[lookupNamedParameter]] ( final String name ) { DbQueryNamedParameter [[p]] = rootNP ; while ( [[p]] != null ) { if ( [[p]] . equalsName ( name ) ) { return [[p]] ; } [[p]] = [[p]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .

[[[[Adv]]]]: DbQueryNamedParameter [[simpletons]] ( final String name ) { DbQueryNamedParameter [[asakawa]] = rootNP ; while ( [[asakawa]] != null ) { if ( [[asakawa]] . equalsName ( name ) ) { return [[asakawa]] ; } [[asakawa]] = [[asakawa]] . next ; } return null ; }
[[[[Nl]]]]: Lookup for named parameter .
--------------------------------------------- Result 904 ---------------------------------------------
Sets the mime type . --> Sets the mifoc types . --> Socre: 1.0

[[[[Adv]]]]: public RawData [[as]] ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . mimeType = mimeOrExtension ; } else { this . mimeType = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!

[[[[Adv]]]]: public RawData [[bifocals]] ( final String mimeOrExtension ) { if ( mimeOrExtension . contains ( StringPool . SLASH ) ) { this . mimeType = mimeOrExtension ; } else { this . mimeType = MimeTypes . getMimeType ( mimeOrExtension ) ; } return this ; }
[[[[Nl]]]]: Defines mime type by providing real mime type or just extension!
--------------------------------------------- Result 905 ---------------------------------------------
Performs validation . --> [[[FAILED]]]

[[[[Adv]]]]: protected boolean validateAction ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .

[[[[Adv]]]]: protected boolean validateAction ( final String ... profiles ) { prepareValidator ( ) ; vtor . useProfiles ( profiles ) ; vtor . validate ( this ) ; vtor . resetProfiles ( ) ; List < Violation > violations = vtor . getViolations ( ) ; return violations == null ; }
[[[[Nl]]]]: Validates action . Profiles are reset after the invocation .
--------------------------------------------- Result 906 ---------------------------------------------
Adds a new violation . --> This method registers a validator for this bean --> Socre: 1.0

[[[[Adv]]]]: protected void [[addViolation]] ( final String [[name]] , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[name]] , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .

[[[[Adv]]]]: protected void [[burberry]] ( final String [[panamanian]] , final Object invalidValue ) { prepareValidator ( ) ; vtor . addViolation ( new Violation ( [[panamanian]] , this , invalidValue ) ) ; }
[[[[Nl]]]]: Adds action violation .
[Succeeded / Failed / Skipped / Total] 581 / 304 / 22 / 907:  91%|█████████ | 907/1000 [1:26:56<08:54,  5.75s/it][Succeeded / Failed / Skipped / Total] 581 / 304 / 22 / 907:  91%|█████████ | 908/1000 [1:26:58<08:48,  5.75s/it][Succeeded / Failed / Skipped / Total] 582 / 304 / 22 / 908:  91%|█████████ | 908/1000 [1:26:58<08:48,  5.75s/it][Succeeded / Failed / Skipped / Total] 582 / 304 / 22 / 908:  91%|█████████ | 909/1000 [1:27:02<08:42,  5.75s/it][Succeeded / Failed / Skipped / Total] 583 / 304 / 22 / 909:  91%|█████████ | 909/1000 [1:27:02<08:42,  5.75s/it][Succeeded / Failed / Skipped / Total] 583 / 304 / 22 / 909:  91%|█████████ | 910/1000 [1:27:05<08:36,  5.74s/it][Succeeded / Failed / Skipped / Total] 584 / 304 / 22 / 910:  91%|█████████ | 910/1000 [1:27:05<08:36,  5.74s/it][Succeeded / Failed / Skipped / Total] 584 / 304 / 22 / 910:  91%|█████████ | 911/1000 [1:27:06<08:30,  5.74s/it][Succeeded / Failed / Skipped / Total] 585 / 304 / 22 / 911:  91%|█████████ | 911/1000 [1:27:06<08:30,  5.74s/it][Succeeded / Failed / Skipped / Total] 585 / 304 / 22 / 911:  91%|█████████ | 912/1000 [1:27:17<08:25,  5.74s/it][Succeeded / Failed / Skipped / Total] 586 / 304 / 22 / 912:  91%|█████████ | 912/1000 [1:27:17<08:25,  5.74s/it][Succeeded / Failed / Skipped / Total] 586 / 304 / 22 / 912:  91%|█████████▏| 913/1000 [1:27:22<08:19,  5.74s/it][Succeeded / Failed / Skipped / Total] 586 / 305 / 22 / 913:  91%|█████████▏| 913/1000 [1:27:22<08:19,  5.74s/it][Succeeded / Failed / Skipped / Total] 586 / 305 / 22 / 913:  91%|█████████▏| 914/1000 [1:27:25<08:13,  5.74s/it]--------------------------------------------- Result 907 ---------------------------------------------
Sets the target . --> [[[FAILED]]]

[[[[Adv]]]]: protected T [[setTarget]] ( final InputStream [[target]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[target]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .

[[[[Adv]]]]: protected T [[crosswords]] ( final InputStream [[consec]] ) { assertTargetIsNotDefined ( ) ; targetInputStream = [[consec]] ; targetClass = null ; targetClassName = null ; return _this ( ) ; }
[[[[Nl]]]]: Defines class input stream as a target .
--------------------------------------------- Result 908 ---------------------------------------------
Sets the target class . --> Shortcut method for shortness --> Socre: 1.0

[[[[Adv]]]]: protected T [[setTarget]] ( final String [[targetName]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[targetName]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[targetName]] ) ; } targetClassName = [[targetName]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[targetName]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!

[[[[Adv]]]]: protected T [[shortcoming]] ( final String [[capistrano]] ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( [[capistrano]] ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + [[capistrano]] ) ; } targetClassName = [[capistrano]] ; targetClass = null ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to get stream class name: " + [[capistrano]] , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class name as a target . Class will not be loaded by classloader!
--------------------------------------------- Result 909 ---------------------------------------------
Sets the target . --> Exposed for testing --> Socre: 1.0

[[[[Adv]]]]: public T [[setTarget]] ( final Class target ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( target ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + target . getName ( ) ) ; } targetClass = target ; targetClassName = target . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + target . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .

[[[[Adv]]]]: public T [[expound]] ( final Class target ) { assertTargetIsNotDefined ( ) ; try { targetInputStream = ClassLoaderUtil . getClassAsStream ( target ) ; if ( targetInputStream == null ) { throw new ProxettaException ( "Target class not found: " + target . getName ( ) ) ; } targetClass = target ; targetClassName = target . getName ( ) ; } catch ( IOException ioex ) { StreamUtil . close ( targetInputStream ) ; throw new ProxettaException ( "Unable to stream class: " + target . getName ( ) , ioex ) ; } return _this ( ) ; }
[[[[Nl]]]]: Defines class as a target .
--------------------------------------------- Result 910 ---------------------------------------------
Sets the download file . --> Divide raw data with paycheme --> Socre: 1.0

[[[[Adv]]]]: public RawData [[downloadableAs]] ( final String [[downloadFileName]] ) { this . downloadFileName = [[downloadFileName]] ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[downloadFileName]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .

[[[[Adv]]]]: public RawData [[divide]] ( final String [[paycheque]] ) { this . downloadFileName = [[paycheque]] ; this . mimeType = MimeTypes . getMimeType ( FileNameUtil . getExtension ( [[paycheque]] ) ) ; return this ; }
[[[[Nl]]]]: Defines download file name and mime type from the name extension .
--------------------------------------------- Result 911 ---------------------------------------------
Fetch the target . --> Perform enhancement --> Socre: 1.0

[[[[Adv]]]]: protected void [[process]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .

[[[[Adv]]]]: protected void [[amplification]] ( ) { if ( targetInputStream == null ) { throw new ProxettaException ( "Target missing: " + targetClassName ) ; }
[[[[Nl]]]]: Reads the target and creates destination class .
--------------------------------------------- Result 912 ---------------------------------------------
Create proxy . --> This method is used for debugging purposes --> Socre: 1.0

[[[[Adv]]]]: public byte [ ] [[create]] ( ) { process ( ) ; byte [ ] [[result]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[result]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[result]] ; }
[[[[Nl]]]]: Returns byte array of created class .

[[[[Adv]]]]: public byte [ ] [[timmons]] ( ) { process ( ) ; byte [ ] [[akimoto]] = toByteArray ( ) ; dumpClassInDebugFolder ( [[akimoto]] ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } return null ; } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created " + StringUtil . toSafeString ( targetClassName ) ) ; } return [[akimoto]] ; }
[[[[Nl]]]]: Returns byte array of created class .
--------------------------------------------- Result 913 ---------------------------------------------
Receives messages matching the specified filter . --> [[[FAILED]]]

[[[[Adv]]]]: ReceivedEmail [ ] [[receiveMessages]] ( final EmailFilter filter , final Flags flagsToSet , final Flags [[flagsToUnset]] , final boolean [[envelope]] , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] [[messages]] ; try { if ( filter == null ) { [[messages]] = folder . getMessages ( ) ; } else { [[messages]] = folder . search ( filter . getSearchTerm ( ) ) ; } if ( [[messages]] . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( [[envelope]] ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( [[messages]] , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .

[[[[Adv]]]]: ReceivedEmail [ ] [[andersson]] ( final EmailFilter filter , final Flags flagsToSet , final Flags [[blitzen]] , final boolean [[decrease]] , final Consumer < Message [ ] > processedMessageConsumer ) { useAndOpenFolderIfNotSet ( ) ; final Message [ ] [[osu]] ; try { if ( filter == null ) { [[osu]] = folder . getMessages ( ) ; } else { [[osu]] = folder . search ( filter . getSearchTerm ( ) ) ; } if ( [[osu]] . length == 0 ) { return ReceivedEmail . EMPTY_ARRAY ; } if ( [[decrease]] ) { final FetchProfile fetchProfile = new FetchProfile ( ) ; fetchProfile . add ( FetchProfile . Item . ENVELOPE ) ; fetchProfile . add ( FetchProfile . Item . FLAGS ) ; folder . fetch ( [[osu]] , fetchProfile ) ; }
[[[[Nl]]]]: The main email receiving method .
--------------------------------------------- Result 914 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 586 / 306 / 22 / 914:  91%|█████████▏| 914/1000 [1:27:25<08:13,  5.74s/it][Succeeded / Failed / Skipped / Total] 586 / 306 / 22 / 914:  92%|█████████▏| 915/1000 [1:27:32<08:07,  5.74s/it][Succeeded / Failed / Skipped / Total] 587 / 306 / 22 / 915:  92%|█████████▏| 915/1000 [1:27:32<08:07,  5.74s/it][Succeeded / Failed / Skipped / Total] 587 / 306 / 22 / 915:  92%|█████████▏| 916/1000 [1:27:33<08:01,  5.74s/it][Succeeded / Failed / Skipped / Total] 588 / 306 / 22 / 916:  92%|█████████▏| 916/1000 [1:27:33<08:01,  5.74s/it][Succeeded / Failed / Skipped / Total] 588 / 306 / 22 / 916:  92%|█████████▏| 917/1000 [1:27:39<07:56,  5.74s/it][Succeeded / Failed / Skipped / Total] 589 / 306 / 22 / 917:  92%|█████████▏| 917/1000 [1:27:39<07:56,  5.74s/it][Succeeded / Failed / Skipped / Total] 589 / 306 / 22 / 917:  92%|█████████▏| 918/1000 [1:27:41<07:49,  5.73s/it][Succeeded / Failed / Skipped / Total] 590 / 306 / 22 / 918:  92%|█████████▏| 918/1000 [1:27:41<07:49,  5.73s/it][Succeeded / Failed / Skipped / Total] 590 / 306 / 22 / 918:  92%|█████████▏| 919/1000 [1:27:46<07:44,  5.73s/it][Succeeded / Failed / Skipped / Total] 591 / 306 / 22 / 919:  92%|█████████▏| 919/1000 [1:27:46<07:44,  5.73s/it][Succeeded / Failed / Skipped / Total] 591 / 306 / 22 / 919:  92%|█████████▏| 920/1000 [1:27:53<07:38,  5.73s/it][Succeeded / Failed / Skipped / Total] 592 / 306 / 22 / 920:  92%|█████████▏| 920/1000 [1:27:53<07:38,  5.73s/it][Succeeded / Failed / Skipped / Total] 592 / 306 / 22 / 920:  92%|█████████▏| 921/1000 [1:27:54<07:32,  5.73s/it][Succeeded / Failed / Skipped / Total] 593 / 306 / 22 / 921:  92%|█████████▏| 921/1000 [1:27:54<07:32,  5.73s/it][Succeeded / Failed / Skipped / Total] 593 / 306 / 22 / 921:  92%|█████████▏| 922/1000 [1:28:00<07:26,  5.73s/it]Creates a new instance of this class . --> [[[FAILED]]]

[[[[Adv]]]]: public Object [[newInstance]] ( ) { Class [[type]] = define ( ) ; try { return ClassUtil . newInstance ( [[type]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .

[[[[Adv]]]]: public Object [[scopes]] ( ) { Class [[dancy]] = define ( ) ; try { return ClassUtil . newInstance ( [[dancy]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Invalid Proxetta class" , ex ) ; } }
[[[[Nl]]]]: Creates new instance of created class . Assumes default no - arg constructor .
--------------------------------------------- Result 915 ---------------------------------------------
Dumps the class in debug folder . --> Write the debug information --> Socre: 1.0

[[[[Adv]]]]: protected void [[dumpClassInDebugFolder]] ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String [[fileName]] = proxyClassName ; if ( [[fileName]] == null ) { [[fileName]] = "proxetta-" + System . currentTimeMillis ( ) ; } [[fileName]] += ".class" ; File file = new File ( debugFolder , [[fileName]] ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .

[[[[Adv]]]]: protected void [[bergère]] ( final byte [ ] bytes ) { File debugFolder = proxetta . getDebugFolder ( ) ; if ( debugFolder == null ) { return ; } if ( ! debugFolder . exists ( ) || ! debugFolder . isDirectory ( ) ) { log . warn ( "Invalid debug folder: " + debugFolder ) ; } String [[abyssal]] = proxyClassName ; if ( [[abyssal]] == null ) { [[abyssal]] = "proxetta-" + System . currentTimeMillis ( ) ; } [[abyssal]] += ".class" ; File file = new File ( debugFolder , [[abyssal]] ) ; try { FileUtil . writeBytes ( file , bytes ) ; } catch ( IOException ioex ) { log . warn ( "Error writing class as " + file , ioex ) ; } }
[[[[Nl]]]]: Writes created class content to output folder for debugging purposes .
--------------------------------------------- Result 916 ---------------------------------------------
Defines the target class . --> Implementation of the Proxy --> Socre: 1.0

[[[[Adv]]]]: public Class [[define]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader [[classLoader]] = proxetta . getClassLoader ( ) ; if ( [[classLoader]] == null ) { [[classLoader]] = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( [[classLoader]] == null ) && ( targetClass != null ) ) { [[classLoader]] = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , [[classLoader]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .

[[[[Adv]]]]: public Class [[dil]] ( ) { process ( ) ; if ( ( ! proxetta . isForced ( ) ) && ( ! isProxyApplied ( ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy not applied: " + StringUtil . toSafeString ( targetClassName ) ) ; } if ( targetClass != null ) { return targetClass ; } if ( targetClassName != null ) { try { return ClassLoaderUtil . loadClass ( targetClassName ) ; } catch ( ClassNotFoundException cnfex ) { throw new ProxettaException ( cnfex ) ; } } } if ( log . isDebugEnabled ( ) ) { log . debug ( "Proxy created: " + StringUtil . toSafeString ( targetClassName ) ) ; } try { ClassLoader [[elwell]] = proxetta . getClassLoader ( ) ; if ( [[elwell]] == null ) { [[elwell]] = ClassLoaderUtil . getDefaultClassLoader ( ) ; if ( ( [[elwell]] == null ) && ( targetClass != null ) ) { [[elwell]] = targetClass . getClassLoader ( ) ; } } final byte [ ] bytes = toByteArray ( ) ; dumpClassInDebugFolder ( bytes ) ; return DefineClass . of ( getProxyClassName ( ) , bytes , [[elwell]] ) ; } catch ( Exception ex ) { throw new ProxettaException ( "Class definition failed" , ex ) ; } }
[[[[Nl]]]]: Defines class .
--------------------------------------------- Result 917 ---------------------------------------------
Set the sender from the person name --> Convenience method for cadmus --> Socre: 1.0

[[[[Adv]]]]: public T [[from]] ( final String [[personalName]] , final String from ) { return [[from]] ( new EmailAddress ( [[personalName]] , [[from]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .

[[[[Adv]]]]: public T [[cadmus]] ( final String [[dekker]] , final String from ) { return [[cadmus]] ( new EmailAddress ( [[dekker]] , [[cadmus]] ) ) ; }
[[[[Nl]]]]: Sets the FROM address by providing personal name and address .
--------------------------------------------- Result 918 ---------------------------------------------
Sets the reply addresses . --> Sets the KIMBA --> Socre: 1.0

[[[[Adv]]]]: public T [[REPLACEME0]] ( final EmailAddress ... [[REPLACEME0]] ) { this . replyTo = ArraysUtil . join ( this . replyTo , valueOrEmptyArray ( [[REPLACEME0]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .

[[[[Adv]]]]: public T [[KIMBA]] ( final EmailAddress ... [[KIMBA]] ) { this . replyTo = ArraysUtil . join ( this . replyTo , valueOrEmptyArray ( [[KIMBA]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends REPLY - TO addresses .
--------------------------------------------- Result 919 ---------------------------------------------
Sets the recipient address . --> Creates a HK recipient --> Socre: 1.0

[[[[Adv]]]]: public T [[to]] ( final EmailAddress [[to]] ) { this . [[to]] = ArraysUtil . append ( this . [[to]] , [[to]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .

[[[[Adv]]]]: public T [[hk]] ( final EmailAddress [[suicide]] ) { this . [[depict]] = ArraysUtil . append ( this . [[depict]] , [[hk]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends TO address .
--------------------------------------------- Result 920 ---------------------------------------------
Add to a recipient --> Create candor --> Socre: 1.0

[[[[Adv]]]]: public T [[to]] ( final String [[personalName]] , final String to ) { return [[to]] ( new EmailAddress ( [[personalName]] , [[to]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .

[[[[Adv]]]]: public T [[candor]] ( final String [[cordial]] , final String to ) { return [[candor]] ( new EmailAddress ( [[cordial]] , [[candor]] ) ) ; }
[[[[Nl]]]]: Appends TO address by personal name and email address .
--------------------------------------------- Result 921 ---------------------------------------------
Adds a text message to the email . --> Convenience method to send an email --> Socre: 1.0

[[[[Adv]]]]: public T [[textMessage]] ( final String [[text]] , final String encoding ) { return message ( new EmailMessage ( [[text]] , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .

[[[[Adv]]]]: public T [[galvez]] ( final String [[piercings]] , final String encoding ) { return message ( new EmailMessage ( [[piercings]] , MimeTypes . MIME_TEXT_PLAIN , encoding ) ) ; }
[[[[Nl]]]]: Adds plain message text .
--------------------------------------------- Result 922 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 594 / 306 / 22 / 922:  92%|█████████▏| 922/1000 [1:28:00<07:26,  5.73s/it][Succeeded / Failed / Skipped / Total] 594 / 306 / 22 / 922:  92%|█████████▏| 923/1000 [1:28:03<07:20,  5.72s/it][Succeeded / Failed / Skipped / Total] 595 / 306 / 22 / 923:  92%|█████████▏| 923/1000 [1:28:03<07:20,  5.72s/it][Succeeded / Failed / Skipped / Total] 595 / 306 / 22 / 923:  92%|█████████▏| 924/1000 [1:28:05<07:14,  5.72s/it][Succeeded / Failed / Skipped / Total] 596 / 306 / 22 / 924:  92%|█████████▏| 924/1000 [1:28:05<07:14,  5.72s/it][Succeeded / Failed / Skipped / Total] 596 / 306 / 22 / 924:  92%|█████████▎| 925/1000 [1:28:25<07:10,  5.74s/it][Succeeded / Failed / Skipped / Total] 597 / 306 / 22 / 925:  92%|█████████▎| 925/1000 [1:28:25<07:10,  5.74s/it][Succeeded / Failed / Skipped / Total] 597 / 306 / 22 / 925:  93%|█████████▎| 926/1000 [1:28:31<07:04,  5.74s/it][Succeeded / Failed / Skipped / Total] 598 / 306 / 22 / 926:  93%|█████████▎| 926/1000 [1:28:31<07:04,  5.74s/it][Succeeded / Failed / Skipped / Total] 598 / 306 / 22 / 926:  93%|█████████▎| 927/1000 [1:28:34<06:58,  5.73s/it][Succeeded / Failed / Skipped / Total] 598 / 307 / 22 / 927:  93%|█████████▎| 927/1000 [1:28:34<06:58,  5.73s/it][Succeeded / Failed / Skipped / Total] 598 / 307 / 22 / 927:  93%|█████████▎| 928/1000 [1:28:39<06:52,  5.73s/it][Succeeded / Failed / Skipped / Total] 599 / 307 / 22 / 928:  93%|█████████▎| 928/1000 [1:28:39<06:52,  5.73s/it][Succeeded / Failed / Skipped / Total] 599 / 307 / 22 / 928:  93%|█████████▎| 929/1000 [1:28:41<06:46,  5.73s/it][Succeeded / Failed / Skipped / Total] 599 / 308 / 22 / 929:  93%|█████████▎| 929/1000 [1:28:41<06:46,  5.73s/it][Succeeded / Failed / Skipped / Total] 599 / 308 / 22 / 929:  93%|█████████▎| 930/1000 [1:28:41<06:40,  5.72s/it][Succeeded / Failed / Skipped / Total] 600 / 308 / 22 / 930:  93%|█████████▎| 930/1000 [1:28:41<06:40,  5.72s/it][Succeeded / Failed / Skipped / Total] 600 / 308 / 22 / 930:  93%|█████████▎| 931/1000 [1:28:46<06:34,  5.72s/it]Create a new email message with the specified encoding . --> Sets an email --> Socre: 1.0

[[[[Adv]]]]: public T [[htmlMessage]] ( final String html , final String encoding ) { return message ( new EmailMessage ( html , MimeTypes . MIME_TEXT_HTML , encoding ) ) ; }
[[[[Nl]]]]: Adds HTML message .

[[[[Adv]]]]: public T [[arizona]] ( final String html , final String encoding ) { return message ( new EmailMessage ( html , MimeTypes . MIME_TEXT_HTML , encoding ) ) ; }
[[[[Nl]]]]: Adds HTML message .
--------------------------------------------- Result 923 ---------------------------------------------
Sets the cc recipient address . --> Specifies that recipients to reach --> Socre: 1.0

[[[[Adv]]]]: public T [[cc]] ( final EmailAddress ... [[ccs]] ) { this . [[cc]] = ArraysUtil . join ( this . [[cc]] , valueOrEmptyArray ( [[ccs]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .

[[[[Adv]]]]: public T [[specimen]] ( final EmailAddress ... [[exposes]] ) { this . [[reaching]] = ArraysUtil . join ( this . [[reaching]] , valueOrEmptyArray ( [[exposes]] ) ) ; return _this ( ) ; }
[[[[Nl]]]]: Appends CC addresses .
--------------------------------------------- Result 924 ---------------------------------------------
Adds a header to the response . --> Starts a new survivor --> Socre: 1.0

[[[[Adv]]]]: public T [[header]] ( final String name , final String [[value]] ) { headers . put ( name , [[value]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .

[[[[Adv]]]]: public T [[crawling]] ( final String name , final String [[comradeship]] ) { headers . put ( name , [[comradeship]] ) ; return _this ( ) ; }
[[[[Nl]]]]: Sets header value .
--------------------------------------------- Result 925 ---------------------------------------------
Returns a boolean value . --> get a double value --> Socre: 1.0

[[[[Adv]]]]: public static boolean getBoolean ( final String [[name]] , final boolean [[defaultValue]] ) { String value = get ( [[name]] ) ; if ( value == null ) { return [[defaultValue]] ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return True ; case "false" : case "no" : case "0" : case "off" : return False ; default : return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as boolean .

[[[[Adv]]]]: public static boolean getBoolean ( final String [[crazy]] , final boolean [[laundromat]] ) { String value = get ( [[crazy]] ) ; if ( value == null ) { return [[laundromat]] ; } value = value . trim ( ) . toLowerCase ( ) ; switch ( value ) { case "true" : case "yes" : case "1" : case "on" : return True ; case "false" : case "no" : case "0" : case "off" : return False ; default : return [[laundromat]] ; } }
[[[[Nl]]]]: Returns system property as boolean .
--------------------------------------------- Result 926 ---------------------------------------------
Returns the integer value for the given name . --> Convenience method to get a short duration from a period --> Socre: 1.0

[[[[Adv]]]]: public static long getInt ( final String [[name]] , final int [[defaultValue]] ) { String [[value]] = get ( [[name]] ) ; if ( [[value]] == null ) { return [[defaultValue]] ; } [[value]] = [[value]] . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( [[value]] ) ; } catch ( NumberFormatException nfex ) { return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as an int .

[[[[Adv]]]]: public static long getInt ( final String [[gestation]] , final int [[distorts]] ) { String [[snoopy]] = get ( [[gestation]] ) ; if ( [[snoopy]] == null ) { return [[distorts]] ; } [[snoopy]] = [[snoopy]] . trim ( ) . toLowerCase ( ) ; try { return Integer . parseInt ( [[snoopy]] ) ; } catch ( NumberFormatException nfex ) { return [[distorts]] ; } }
[[[[Nl]]]]: Returns system property as an int .
--------------------------------------------- Result 927 ---------------------------------------------
Get resolved parameters . --> [[[FAILED]]]

[[[[Adv]]]]: MethodParameter [ ] [[getResolvedParameters]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .

[[[[Adv]]]]: MethodParameter [ ] [[bader]] ( ) { if ( paramExtractor == null ) { return MethodParameter . EMPTY_ARRAY ; } if ( ! paramExtractor . debugInfoPresent ) { throw new ParamoException ( "Parameter names not available for method: " + declaringClass . getName ( ) + ' ' + methodName ) ; } return paramExtractor . getMethodParameters ( ) ; }
[[[[Nl]]]]: Returns method parameters once when method is parsed . If method has no parameters an empty array is returned .
--------------------------------------------- Result 928 ---------------------------------------------
Helper method to serialize a key value pair . --> Helper method for subclasses --> Socre: 1.0

[[[[Adv]]]]: protected int [[serializeKeyValue]] ( final JsonContext jsonContext , final Path currentPath , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .

[[[[Adv]]]]: protected int [[arn]] ( final JsonContext jsonContext , final Path currentPath , final Object key , final Object value , int count ) { if ( ( value == null ) && jsonContext . isExcludeNulls ( ) ) { return count ; } if ( key != null ) { currentPath . push ( key . toString ( ) ) ; } else { currentPath . push ( StringPool . NULL ) ; }
[[[[Nl]]]]: Serializes key and a value .
--------------------------------------------- Result 929 ---------------------------------------------
Retrieves a system property . --> [[[FAILED]]]

[[[[Adv]]]]: public static String get ( final String [[name]] , final String defaultValue ) { Objects . requireNonNull ( [[name]] ) ; String value = null ; try { if ( System . getSecurityManager ( ) == null ) { value = System . getProperty ( [[name]] ) ; } else { value = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[name]] ) ) ; } } catch ( Exception ignore ) { } if ( value == null ) { return defaultValue ; } return value ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .

[[[[Adv]]]]: public static String get ( final String [[tomie]] , final String defaultValue ) { Objects . requireNonNull ( [[tomie]] ) ; String value = null ; try { if ( System . getSecurityManager ( ) == null ) { value = System . getProperty ( [[tomie]] ) ; } else { value = AccessController . doPrivileged ( ( PrivilegedAction < String > ) ( ) -> System . getProperty ( [[tomie]] ) ) ; } } catch ( Exception ignore ) { } if ( value == null ) { return defaultValue ; } return value ; }
[[[[Nl]]]]: Returns system property . If key is not available returns the default value .
--------------------------------------------- Result 930 ---------------------------------------------
Looks up an alias for the given alias . --> Get crinkles --> Socre: 1.0

[[[[Adv]]]]: protected String [[lookupAlias]] ( final String alias ) { String value = actionsManager . lookupPathAlias ( alias ) ; if ( value == null ) { ActionRuntime cfg = actionsManager . lookup ( alias ) ; if ( cfg != null ) { value = cfg . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .

[[[[Adv]]]]: protected String [[crinkles]] ( final String alias ) { String value = actionsManager . lookupPathAlias ( alias ) ; if ( value == null ) { ActionRuntime cfg = actionsManager . lookup ( alias ) ; if ( cfg != null ) { value = cfg . getActionPath ( ) ; } } return value ; }
[[[[Nl]]]]: Lookups value as an alias and if not found as a default alias .
[Succeeded / Failed / Skipped / Total] 601 / 308 / 22 / 931:  93%|█████████▎| 931/1000 [1:28:46<06:34,  5.72s/it][Succeeded / Failed / Skipped / Total] 601 / 308 / 22 / 931:  93%|█████████▎| 932/1000 [1:28:53<06:29,  5.72s/it][Succeeded / Failed / Skipped / Total] 602 / 308 / 22 / 932:  93%|█████████▎| 932/1000 [1:28:53<06:29,  5.72s/it][Succeeded / Failed / Skipped / Total] 602 / 308 / 22 / 932:  93%|█████████▎| 933/1000 [1:28:56<06:23,  5.72s/it][Succeeded / Failed / Skipped / Total] 603 / 308 / 22 / 933:  93%|█████████▎| 933/1000 [1:28:56<06:23,  5.72s/it][Succeeded / Failed / Skipped / Total] 603 / 308 / 22 / 933:  93%|█████████▎| 934/1000 [1:29:17<06:18,  5.74s/it][Succeeded / Failed / Skipped / Total] 604 / 308 / 22 / 934:  93%|█████████▎| 934/1000 [1:29:17<06:18,  5.74s/it][Succeeded / Failed / Skipped / Total] 604 / 308 / 22 / 934:  94%|█████████▎| 935/1000 [1:29:23<06:12,  5.74s/it][Succeeded / Failed / Skipped / Total] 605 / 308 / 22 / 935:  94%|█████████▎| 935/1000 [1:29:23<06:12,  5.74s/it][Succeeded / Failed / Skipped / Total] 605 / 308 / 22 / 935:  94%|█████████▎| 936/1000 [1:29:24<06:06,  5.73s/it][Succeeded / Failed / Skipped / Total] 606 / 308 / 22 / 936:  94%|█████████▎| 936/1000 [1:29:24<06:06,  5.73s/it][Succeeded / Failed / Skipped / Total] 606 / 308 / 22 / 936:  94%|█████████▎| 937/1000 [1:29:25<06:00,  5.73s/it][Succeeded / Failed / Skipped / Total] 606 / 309 / 22 / 937:  94%|█████████▎| 937/1000 [1:29:25<06:00,  5.73s/it][Succeeded / Failed / Skipped / Total] 606 / 309 / 22 / 937:  94%|█████████▍| 938/1000 [1:29:38<05:55,  5.73s/it][Succeeded / Failed / Skipped / Total] 607 / 309 / 22 / 938:  94%|█████████▍| 938/1000 [1:29:38<05:55,  5.73s/it][Succeeded / Failed / Skipped / Total] 607 / 309 / 22 / 938:  94%|█████████▍| 939/1000 [1:29:43<05:49,  5.73s/it]--------------------------------------------- Result 931 ---------------------------------------------
Resolve alias . --> Removes leading and trailing spaces --> Socre: 1.0

[[[[Adv]]]]: protected String [[resolveAlias]] ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .

[[[[Adv]]]]: protected String [[arises]] ( final String value ) { final StringBuilder result = new StringBuilder ( value . length ( ) ) ; int i = 0 ; int len = value . length ( ) ; while ( i < len ) { int ndx = value . indexOf ( ' ' , i ) ; if ( ndx == - 1 ) {
[[[[Nl]]]]: Returns resolved alias result value or passed on if alias doesn t exist .
--------------------------------------------- Result 932 ---------------------------------------------
Returns the long value of the specified property . --> Checks to see if the game is inadable --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLong]] ( final String [[name]] , final long [[defaultValue]] ) { String value = get ( [[name]] ) ; if ( value == null ) { return [[defaultValue]] ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( value ) ; } catch ( NumberFormatException nfex ) { return [[defaultValue]] ; } }
[[[[Nl]]]]: Returns system property as a long .

[[[[Adv]]]]: public static long [[inadvisable]] ( final String [[arcade]] , final long [[pebble]] ) { String value = get ( [[arcade]] ) ; if ( value == null ) { return [[pebble]] ; } value = value . trim ( ) . toLowerCase ( ) ; try { return Long . parseLong ( value ) ; } catch ( NumberFormatException nfex ) { return [[pebble]] ; } }
[[[[Nl]]]]: Returns system property as a long .
--------------------------------------------- Result 933 ---------------------------------------------
Resolves the path with the given path and value . --> Resolve affraid --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveResultPathString]] ( final String path , final String value ) { final ResultPath [[resultPath]] = resolveResultPath ( path , value ) ; final String result = [[resultPath]] . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .

[[[[Adv]]]]: public String [[affraid]] ( final String path , final String value ) { final ResultPath [[caskets]] = resolveResultPath ( path , value ) ; final String result = [[caskets]] . pathValue ( ) ; return resolveAlias ( result ) ; }
[[[[Nl]]]]: Resolves result path as a string when parts are not important and when only full string matters . Additional alias resolving on full path is done .
--------------------------------------------- Result 934 ---------------------------------------------
Returns the index of the last dot after dot . --> Returns watercolours --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfDotAfterSlash]] ( final String [[str]] ) { int [[slashNdx]] = [[str]] . lastIndexOf ( ' ' ) ; [[slashNdx]] ++ ; return StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .

[[[[Adv]]]]: public static int [[watercolours]] ( final String [[consuelo]] ) { int [[dolly]] = [[consuelo]] . lastIndexOf ( ' ' ) ; [[dolly]] ++ ; return StringUtil . lastIndexOf ( [[consuelo]] , ' ' , [[consuelo]] . length ( ) , [[dolly]] ) ; }
[[[[Nl]]]]: Locates last index of dot after the optional last slash .
--------------------------------------------- Result 935 ---------------------------------------------
Resolves the result path . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: public ResultPath [[resolveResultPath]] ( String [[path]] , String [[value]] ) { boolean absolutePath = False ; if ( [[value]] != null ) {
[[[[Nl]]]]: Resolves result path .

[[[[Adv]]]]: public ResultPath [[fon]] ( String [[banshee]] , String [[keegan]] ) { boolean absolutePath = False ; if ( [[keegan]] != null ) {
[[[[Nl]]]]: Resolves result path .
--------------------------------------------- Result 936 ---------------------------------------------
Returns the index of the last slash in the given string . --> Calculate lobtorized index --> Socre: 1.0

[[[[Adv]]]]: public static int [[lastIndexOfSlashDot]] ( final String [[str]] ) { int [[slashNdx]] = [[str]] . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( [[str]] , ' ' , [[str]] . length ( ) , [[slashNdx]] ) ; if ( dotNdx == - 1 ) { if ( [[slashNdx]] == - 1 ) { return - 1 ; } [[slashNdx]] ++ ; if ( [[slashNdx]] < [[str]] . length ( ) - 1 ) { dotNdx = [[slashNdx]] ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .

[[[[Adv]]]]: public static int [[lobotomized]] ( final String [[aimin]] ) { int [[serf]] = [[aimin]] . lastIndexOf ( ' ' ) ; int dotNdx = StringUtil . lastIndexOf ( [[aimin]] , ' ' , [[aimin]] . length ( ) , [[serf]] ) ; if ( dotNdx == - 1 ) { if ( [[serf]] == - 1 ) { return - 1 ; } [[serf]] ++ ; if ( [[serf]] < [[aimin]] . length ( ) - 1 ) { dotNdx = [[serf]] ; } else { dotNdx = - 1 ; } } return dotNdx ; }
[[[[Nl]]]]: Locates last dot after the last slash or just slash .
--------------------------------------------- Result 937 ---------------------------------------------
Returns the index of the first dot after a dot . --> [[[FAILED]]]

[[[[Adv]]]]: public static int indexOfDotAfterSlash ( final String [[str]] ) { int [[slashNdx]] = [[str]] . lastIndexOf ( ' ' ) ; if ( [[slashNdx]] == - 1 ) { [[slashNdx]] = 0 ; } return [[str]] . indexOf ( ' ' , [[slashNdx]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .

[[[[Adv]]]]: public static int indexOfDotAfterSlash ( final String [[whisky]] ) { int [[dekker]] = [[whisky]] . lastIndexOf ( ' ' ) ; if ( [[dekker]] == - 1 ) { [[dekker]] = 0 ; } return [[whisky]] . indexOf ( ' ' , [[dekker]] ) ; }
[[[[Nl]]]]: Locates first dot after the last slash .
--------------------------------------------- Result 938 ---------------------------------------------
Resolves the schema name . --> Calculates the sadism for the given class --> Socre: 1.0

[[[[Adv]]]]: public static String [[resolveSchemaName]] ( final Class < ? > [[type]] , final String defaultSchemaName ) { String schemaName = null ; final DbTable dbTable = [[type]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { schemaName = dbTable . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .

[[[[Adv]]]]: public static String [[sadism]] ( final Class < ? > [[oxo]] , final String defaultSchemaName ) { String schemaName = null ; final DbTable dbTable = [[oxo]] . getAnnotation ( DbTable . class ) ; if ( dbTable != null ) { schemaName = dbTable . schema ( ) . trim ( ) ; } if ( ( schemaName == null ) || ( schemaName . length ( ) == 0 ) ) { schemaName = defaultSchemaName ; } return schemaName ; }
[[[[Nl]]]]: Resolves schema name from a type . Uses default schema name if not specified .
--------------------------------------------- Result 939 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 608 / 309 / 22 / 939:  94%|█████████▍| 939/1000 [1:29:43<05:49,  5.73s/it][Succeeded / Failed / Skipped / Total] 608 / 309 / 22 / 939:  94%|█████████▍| 940/1000 [1:29:51<05:44,  5.74s/it][Succeeded / Failed / Skipped / Total] 609 / 309 / 22 / 940:  94%|█████████▍| 940/1000 [1:29:51<05:44,  5.74s/it][Succeeded / Failed / Skipped / Total] 609 / 309 / 22 / 940:  94%|█████████▍| 941/1000 [1:29:52<05:38,  5.73s/it][Succeeded / Failed / Skipped / Total] 610 / 309 / 22 / 941:  94%|█████████▍| 941/1000 [1:29:52<05:38,  5.73s/it][Succeeded / Failed / Skipped / Total] 610 / 309 / 22 / 941:  94%|█████████▍| 942/1000 [1:29:56<05:32,  5.73s/it][Succeeded / Failed / Skipped / Total] 611 / 309 / 22 / 942:  94%|█████████▍| 942/1000 [1:29:56<05:32,  5.73s/it][Succeeded / Failed / Skipped / Total] 611 / 309 / 22 / 942:  94%|█████████▍| 943/1000 [1:29:58<05:26,  5.73s/it][Succeeded / Failed / Skipped / Total] 612 / 309 / 22 / 943:  94%|█████████▍| 943/1000 [1:29:58<05:26,  5.73s/it][Succeeded / Failed / Skipped / Total] 612 / 309 / 22 / 943:  94%|█████████▍| 944/1000 [1:30:12<05:21,  5.73s/it][Succeeded / Failed / Skipped / Total] 613 / 309 / 22 / 944:  94%|█████████▍| 944/1000 [1:30:12<05:21,  5.73s/it][Succeeded / Failed / Skipped / Total] 613 / 309 / 22 / 944:  94%|█████████▍| 945/1000 [1:30:22<05:15,  5.74s/it][Succeeded / Failed / Skipped / Total] 614 / 309 / 22 / 945:  94%|█████████▍| 945/1000 [1:30:22<05:15,  5.74s/it][Succeeded / Failed / Skipped / Total] 614 / 309 / 22 / 945:  95%|█████████▍| 946/1000 [1:30:24<05:09,  5.73s/it][Succeeded / Failed / Skipped / Total] 615 / 309 / 22 / 946:  95%|█████████▍| 946/1000 [1:30:24<05:09,  5.73s/it][Succeeded / Failed / Skipped / Total] 615 / 309 / 22 / 946:  95%|█████████▍| 947/1000 [1:30:28<05:03,  5.73s/it][Succeeded / Failed / Skipped / Total] 616 / 309 / 22 / 947:  95%|█████████▍| 947/1000 [1:30:28<05:03,  5.73s/it][Succeeded / Failed / Skipped / Total] 616 / 309 / 22 / 947:  95%|█████████▍| 948/1000 [1:30:30<04:57,  5.73s/it]Strips the last camel word . --> Extracts aardvarker from the hldv . --> Socre: 1.0

[[[[Adv]]]]: public static String [[stripLastCamelWord]] ( String [[name]] ) { int [[ndx]] = [[name]] . length ( ) - 1 ; while ( [[ndx]] >= 0 ) { if ( CharUtil . isUppercaseAlpha ( [[name]] . charAt ( [[ndx]] ) ) ) { break ; } [[ndx]] -- ; } if ( [[ndx]] >= 0 ) { [[name]] = [[name]] . substring ( 0 , [[ndx]] ) ; } return [[name]] ; }
[[[[Nl]]]]: Removes last CamelWord

[[[[Adv]]]]: public static String [[aardvark]] ( String [[hurls]] ) { int [[aldin]] = [[hurls]] . length ( ) - 1 ; while ( [[aldin]] >= 0 ) { if ( CharUtil . isUppercaseAlpha ( [[hurls]] . charAt ( [[aldin]] ) ) ) { break ; } [[aldin]] -- ; } if ( [[aldin]] >= 0 ) { [[hurls]] = [[hurls]] . substring ( 0 , [[aldin]] ) ; } return [[hurls]] ; }
[[[[Nl]]]]: Removes last CamelWord
--------------------------------------------- Result 940 ---------------------------------------------
Complexes the polynix of zeros . --> Copied from j --> Socre: 1.0

[[[[Adv]]]]: private void [[demix]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .

[[[[Adv]]]]: private void [[glands]] ( final int j , final int d ) { y [ 1 ] ^= y [ 0 ] ; final long rotr = r [ d % DEPTH_OF_D_IN_R ] [ j ] ;
[[[[Nl]]]]: Implementation of the un - MIX function .
--------------------------------------------- Result 941 ---------------------------------------------
Initializes this sketch with the given key and tweak . --> Perform a new ventilator --> Socre: 1.0

[[[[Adv]]]]: public void [[init]] ( final long [ ] [[key]] , final long [ ] tweak ) { final int newNw = [[key]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .

[[[[Adv]]]]: public void [[ventilator]] ( final long [ ] [[lice]] , final long [ ] tweak ) { final int newNw = [[lice]] . length ;
[[[[Nl]]]]: Initialize the cipher using the key and the tweak value .
--------------------------------------------- Result 942 ---------------------------------------------
Multiplies x . --> see ECMA - 15 --> Socre: 1.0

[[[[Adv]]]]: private void [[mix]] ( final int [[j]] , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ [[j]] ] ;
[[[[Nl]]]]: Implementation of the MIX function .

[[[[Adv]]]]: private void [[cachaça]] ( final int [[bermondsey]] , final int d ) { y [ 0 ] = x [ 0 ] + x [ 1 ] ; final long rotl = r [ d % DEPTH_OF_D_IN_R ] [ [[bermondsey]] ] ;
[[[[Nl]]]]: Implementation of the MIX function .
--------------------------------------------- Result 943 ---------------------------------------------
Key schedule event schedule . --> asynch --> Socre: 1.0

[[[[Adv]]]]: private void [[keySchedule]] ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .

[[[[Adv]]]]: private void [[asuka]] ( final int s ) { for ( int i = 0 ; i < nw ; i ++ ) {
[[[[Nl]]]]: Creates the subkeys .
--------------------------------------------- Result 944 ---------------------------------------------
Resolve column descriptors . --> returns a DbColumnDescriptor --> Socre: 1.0

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[resolveColumnDescriptors]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = False ; Class < ? extends SqlType > [[sqlTypeClass]] = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .

[[[[Adv]]]]: public static DbEntityColumnDescriptor [[invariably]] ( final DbEntityDescriptor dbEntityDescriptor , final PropertyDescriptor property , final boolean isAnnotated , final ColumnNamingStrategy columnNamingStrategy ) { String columnName = null ; boolean isId = False ; Class < ? extends SqlType > [[heretofore]] = null ;
[[[[Nl]]]]: Resolves column descriptor from property . If property is annotated value will be read from annotation . If property is not annotated then property will be ignored if entity is annotated . Otherwise column name is generated from the property name .
--------------------------------------------- Result 945 ---------------------------------------------
Encrypt a block . --> Returns the florence of the given byte array --> Socre: 1.0

[[[[Adv]]]]: @ Override public byte [ ] [[encryptBlock]] ( final byte [ ] content , final int offset ) { long [ ] [[contentBlock]] = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( [[contentBlock]] , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .

[[[[Adv]]]]: @ Override public byte [ ] [[florence]] ( final byte [ ] content , final int offset ) { long [ ] [[lady]] = bytesToLongs ( content , offset , blockSizeInBytes ) ; long [ ] encryptedBlock = new long [ blockSize / Long . SIZE ] ; blockEncrypt ( [[lady]] , encryptedBlock ) ; return longsToBytes ( encryptedBlock ) ; }
[[[[Nl]]]]: Encrypts a block .
--------------------------------------------- Result 946 ---------------------------------------------
Converts a byte array into a long array . --> Get shillelanger --> Socre: 1.0

[[[[Adv]]]]: protected static long [ ] [[bytesToLongs]] ( final byte [ ] ba , final int offset , final int [[size]] ) { long [ ] result = new long [ [[size]] >> 3 ] ; int i8 = offset ; for ( int [[i]] = 0 ; [[i]] < result . length ; [[i]] ++ ) { result [ [[i]] ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .

[[[[Adv]]]]: protected static long [ ] [[shillelagh]] ( final byte [ ] ba , final int offset , final int [[gangbangers]] ) { long [ ] result = new long [ [[gangbangers]] >> 3 ] ; int i8 = offset ; for ( int [[responsibly]] = 0 ; [[responsibly]] < result . length ; [[responsibly]] ++ ) { result [ [[responsibly]] ] = Bits . getLong ( ba , i8 ) ; i8 += 8 ; } return result ; }
[[[[Nl]]]]: Converts segment of byte array into long array .
--------------------------------------------- Result 947 ---------------------------------------------
Removes any bounding box . --> devine two characters --> Socre: 1.0

[[[[Adv]]]]: private static String [[removeAnyBounding]] ( final char s , final char e , final String [[str]] ) { if ( [[str]] == null || [[str]] . length ( ) < 2 ) { return [[str]] ; } if ( [[str]] . startsWith ( String . valueOf ( s ) ) && [[str]] . endsWith ( String . valueOf ( e ) ) ) { return [[str]] . substring ( 1 , [[str]] . length ( ) - 1 ) ; } return [[str]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .

[[[[Adv]]]]: private static String [[devine]] ( final char s , final char e , final String [[cretinous]] ) { if ( [[cretinous]] == null || [[cretinous]] . length ( ) < 2 ) { return [[cretinous]] ; } if ( [[cretinous]] . startsWith ( String . valueOf ( s ) ) && [[cretinous]] . endsWith ( String . valueOf ( e ) ) ) { return [[cretinous]] . substring ( 1 , [[cretinous]] . length ( ) - 1 ) ; } return [[cretinous]] ; }
[[[[Nl]]]]: If the string starts and ends with start and end char remove them otherwise return the string as it was passed in .
--------------------------------------------- Result 948 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 617 / 309 / 22 / 948:  95%|█████████▍| 948/1000 [1:30:30<04:57,  5.73s/it][Succeeded / Failed / Skipped / Total] 617 / 309 / 22 / 948:  95%|█████████▍| 949/1000 [1:30:35<04:52,  5.73s/it][Succeeded / Failed / Skipped / Total] 618 / 309 / 22 / 949:  95%|█████████▍| 949/1000 [1:30:35<04:52,  5.73s/it][Succeeded / Failed / Skipped / Total] 618 / 309 / 22 / 949:  95%|█████████▌| 950/1000 [1:30:36<04:46,  5.72s/it][Succeeded / Failed / Skipped / Total] 619 / 309 / 22 / 950:  95%|█████████▌| 950/1000 [1:30:36<04:46,  5.72s/it][Succeeded / Failed / Skipped / Total] 619 / 309 / 22 / 950:  95%|█████████▌| 951/1000 [1:30:39<04:40,  5.72s/it][Succeeded / Failed / Skipped / Total] 620 / 309 / 22 / 951:  95%|█████████▌| 951/1000 [1:30:39<04:40,  5.72s/it][Succeeded / Failed / Skipped / Total] 620 / 309 / 22 / 951:  95%|█████████▌| 952/1000 [1:30:40<04:34,  5.71s/it][Succeeded / Failed / Skipped / Total] 621 / 309 / 22 / 952:  95%|█████████▌| 952/1000 [1:30:40<04:34,  5.71s/it][Succeeded / Failed / Skipped / Total] 621 / 309 / 22 / 952:  95%|█████████▌| 953/1000 [1:30:49<04:28,  5.72s/it][Succeeded / Failed / Skipped / Total] 622 / 309 / 22 / 953:  95%|█████████▌| 953/1000 [1:30:49<04:28,  5.72s/it][Succeeded / Failed / Skipped / Total] 622 / 309 / 22 / 953:  95%|█████████▌| 954/1000 [1:30:57<04:23,  5.72s/it]Zips a file . --> Zips the given directory --> Socre: 1.0

[[[[Adv]]]]: public static File zlib ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = [[file]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .

[[[[Adv]]]]: public static File zlib ( final File [[dil]] ) throws IOException { if ( [[dil]] . isDirectory ( ) ) { throw new IOException ( "Can't zlib folder" ) ; } FileInputStream fis = new FileInputStream ( [[dil]] ) ; Deflater deflater = new Deflater ( Deflater . BEST_COMPRESSION ) ; String zlibFileName = [[dil]] . getAbsolutePath ( ) + ZLIB_EXT ; DeflaterOutputStream dos = new DeflaterOutputStream ( new FileOutputStream ( zlibFileName ) , deflater ) ; try { StreamUtil . copy ( fis , dos ) ; } finally { StreamUtil . close ( dos ) ; StreamUtil . close ( fis ) ; } return new File ( zlibFileName ) ; }
[[[[Nl]]]]: Compresses a file into zlib archive .
--------------------------------------------- Result 949 ---------------------------------------------
Returns the path . --> messages to speak --> Socre: 1.0

[[[[Adv]]]]: public String [[path]] ( ) { if ( methref != null ) { final String [[methodName]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[methodName]] ; } return [[path]] ; }
[[[[Nl]]]]: Returns path value .

[[[[Adv]]]]: public String [[exclaimed]] ( ) { if ( methref != null ) { final String [[lynyrd]] = methref . ref ( ) ; return target . getName ( ) + ' ' + [[lynyrd]] ; } return [[exclaimed]] ; }
[[[[Nl]]]]: Returns path value .
--------------------------------------------- Result 950 ---------------------------------------------
Ungzipped file . --> Ungzip a file --> Socre: 1.0

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File [[out]] = new File ( outFileName ) ; [[out]] . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( [[out]] ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return [[out]] ; }
[[[[Nl]]]]: Decompress gzip archive .

[[[[Adv]]]]: public static File ungzip ( final File file ) throws IOException { String outFileName = FileNameUtil . removeExtension ( file . getAbsolutePath ( ) ) ; File [[balle]] = new File ( outFileName ) ; [[balle]] . createNewFile ( ) ; FileOutputStream fos = new FileOutputStream ( [[balle]] ) ; GZIPInputStream gzis = new GZIPInputStream ( new FileInputStream ( file ) ) ; try { StreamUtil . copy ( gzis , fos ) ; } finally { StreamUtil . close ( fos ) ; StreamUtil . close ( gzis ) ; } return [[balle]] ; }
[[[[Nl]]]]: Decompress gzip archive .
--------------------------------------------- Result 951 ---------------------------------------------
Gzip a file --> GZipped files --> Socre: 1.0

[[[[Adv]]]]: public static File gzip ( final File [[file]] ) throws IOException { if ( [[file]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[file]] ) ; String [[gzipName]] = [[file]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( [[gzipName]] ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( [[gzipName]] ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .

[[[[Adv]]]]: public static File gzip ( final File [[cufflink]] ) throws IOException { if ( [[cufflink]] . isDirectory ( ) ) { throw new IOException ( "Can't gzip folder" ) ; } FileInputStream fis = new FileInputStream ( [[cufflink]] ) ; String [[claro]] = [[cufflink]] . getAbsolutePath ( ) + GZIP_EXT ; GZIPOutputStream gzos = new GZIPOutputStream ( new FileOutputStream ( [[claro]] ) ) ; try { StreamUtil . copy ( fis , gzos ) ; } finally { StreamUtil . close ( gzos ) ; StreamUtil . close ( fis ) ; } return new File ( [[claro]] ) ; }
[[[[Nl]]]]: Compresses a file into gzip archive .
--------------------------------------------- Result 952 ---------------------------------------------
Initializes the hash with the specified key message . --> Initialize this sketch with the specified profiting and trailer --> Socre: 1.0

[[[[Adv]]]]: public void init ( final String [[keyMessage]] , final long tweak1 , final long [[tweak2]] ) { long [ ] tweak = new long [ ] { tweak1 , [[tweak2]] } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( [[keyMessage]] ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; init ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .

[[[[Adv]]]]: public void init ( final String [[profiting]] , final long tweak1 , final long [[plastic]] ) { long [ ] tweak = new long [ ] { tweak1 , [[plastic]] } ; byte [ ] key = new byte [ blockSize / Byte . SIZE ] ; byte [ ] keyData = StringUtil . getBytes ( [[profiting]] ) ; System . arraycopy ( keyData , 0 , key , 0 , key . length < keyData . length ? key . length : keyData . length ) ; init ( bytesToLongs ( key ) , tweak ) ; }
[[[[Nl]]]]: Initializes cipher in a simple way .
--------------------------------------------- Result 953 ---------------------------------------------
Adds content to a ZIP output stream . --> Perform preamitation --> Socre: 1.0

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .

[[[[Adv]]]]: public static void [[premeditation]] ( final ZipOutputStream zos , final byte [ ] content , String path , final String comment ) throws IOException { while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } if ( StringUtil . endsWithChar ( path , ' ' ) ) { path = path . substring ( 0 , path . length ( ) - 1 ) ; } ZipEntry zipEntry = new ZipEntry ( path ) ; zipEntry . setTime ( System . currentTimeMillis ( ) ) ; if ( comment != null ) { zipEntry . setComment ( comment ) ; } zos . putNextEntry ( zipEntry ) ; InputStream is = new ByteArrayInputStream ( content ) ; try { StreamUtil . copy ( is , zos ) ; } finally { StreamUtil . close ( is ) ; } zos . closeEntry ( ) ; }
[[[[Nl]]]]: Adds byte content into the zip as a file .
--------------------------------------------- Result 954 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 623 / 309 / 22 / 954:  95%|█████████▌| 954/1000 [1:30:57<04:23,  5.72s/it][Succeeded / Failed / Skipped / Total] 623 / 309 / 22 / 954:  96%|█████████▌| 955/1000 [1:31:00<04:17,  5.72s/it][Succeeded / Failed / Skipped / Total] 624 / 309 / 22 / 955:  96%|█████████▌| 955/1000 [1:31:00<04:17,  5.72s/it][Succeeded / Failed / Skipped / Total] 624 / 309 / 22 / 955:  96%|█████████▌| 956/1000 [1:31:26<04:12,  5.74s/it][Succeeded / Failed / Skipped / Total] 624 / 310 / 22 / 956:  96%|█████████▌| 956/1000 [1:31:26<04:12,  5.74s/it][Succeeded / Failed / Skipped / Total] 624 / 310 / 22 / 956:  96%|█████████▌| 957/1000 [1:31:35<04:06,  5.74s/it][Succeeded / Failed / Skipped / Total] 624 / 311 / 22 / 957:  96%|█████████▌| 957/1000 [1:31:35<04:06,  5.74s/it][Succeeded / Failed / Skipped / Total] 624 / 311 / 22 / 957:  96%|█████████▌| 958/1000 [1:31:41<04:01,  5.74s/it][Succeeded / Failed / Skipped / Total] 624 / 312 / 22 / 958:  96%|█████████▌| 958/1000 [1:31:41<04:01,  5.74s/it][Succeeded / Failed / Skipped / Total] 624 / 312 / 22 / 958:  96%|█████████▌| 959/1000 [1:31:51<03:55,  5.75s/it][Succeeded / Failed / Skipped / Total] 624 / 313 / 22 / 959:  96%|█████████▌| 959/1000 [1:31:51<03:55,  5.75s/it][Succeeded / Failed / Skipped / Total] 624 / 313 / 22 / 959:  96%|█████████▌| 960/1000 [1:31:54<03:49,  5.74s/it][Succeeded / Failed / Skipped / Total] 624 / 314 / 22 / 960:  96%|█████████▌| 960/1000 [1:31:54<03:49,  5.74s/it][Succeeded / Failed / Skipped / Total] 624 / 314 / 22 / 960:  96%|█████████▌| 961/1000 [1:31:57<03:43,  5.74s/it][Succeeded / Failed / Skipped / Total] 624 / 315 / 22 / 961:  96%|█████████▌| 961/1000 [1:31:57<03:43,  5.74s/it][Succeeded / Failed / Skipped / Total] 624 / 315 / 22 / 961:  96%|█████████▌| 962/1000 [1:32:03<03:38,  5.74s/it]Unzip a zip file --> Unzip a bau --> Socre: 1.0

[[[[Adv]]]]: public static void unzip ( final String [[zipFile]] , final String destDir , final String ... [[patterns]] ) throws IOException { unzip ( new File ( [[zipFile]] ) , new File ( destDir ) , [[patterns]] ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .

[[[[Adv]]]]: public static void unzip ( final String [[bau]] , final String destDir , final String ... [[everyones]] ) throws IOException { unzip ( new File ( [[bau]] ) , new File ( destDir ) , [[everyones]] ) ; }
[[[[Nl]]]]: Extracts zip file content to the target directory .
--------------------------------------------- Result 955 ---------------------------------------------
Lists all entries in a zip file . --> Return the names of the operating system --> Socre: 1.0

[[[[Adv]]]]: public static List < String > [[listZip]] ( final File zipFile ) throws IOException { List < String > [[entries]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry [[entry]] = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = [[entry]] . getName ( ) ; [[entries]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[entries]] ) ; }
[[[[Nl]]]]: Lists zip content .

[[[[Adv]]]]: public static List < String > [[ancestor]] ( final File zipFile ) throws IOException { List < String > [[whinny]] = new ArrayList <> ( ) ; ZipFile zip = new ZipFile ( zipFile ) ; Enumeration zipEntries = zip . entries ( ) ; while ( zipEntries . hasMoreElements ( ) ) { ZipEntry [[operating]] = ( ZipEntry ) zipEntries . nextElement ( ) ; String entryName = [[operating]] . getName ( ) ; [[whinny]] . add ( entryName ) ; } return Collections . unmodifiableList ( [[whinny]] ) ; }
[[[[Nl]]]]: Lists zip content .
--------------------------------------------- Result 956 ---------------------------------------------
Sets the request bundle name . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[setRequestBundleName]] ( final ServletRequest request , final String [[bundleName]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[bundleName]] ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[bundleName]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .

[[[[Adv]]]]: public static void [[tarquin]] ( final ServletRequest request , final String [[parked]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Bundle name for this request: " + [[parked]] ) ; } request . setAttribute ( REQUEST_BUNDLE_NAME_ATTR , [[parked]] ) ; }
[[[[Nl]]]]: Sets bundle name for provided servlet request .
--------------------------------------------- Result 957 ---------------------------------------------
Returns the field descriptor for the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public FieldDescriptor [[getFieldDescriptor]] ( final String [[name]] , final boolean declared ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( [[name]] ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( declared ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .

[[[[Adv]]]]: public FieldDescriptor [[bailiffs]] ( final String [[lazybones]] , final boolean declared ) { final FieldDescriptor fieldDescriptor = getFields ( ) . getFieldDescriptor ( [[lazybones]] ) ; if ( fieldDescriptor != null ) { if ( ! fieldDescriptor . matchDeclared ( declared ) ) { return null ; } } return fieldDescriptor ; }
[[[[Nl]]]]: Returns field descriptor .
--------------------------------------------- Result 958 ---------------------------------------------
Returns the property descriptor with the given name . --> [[[FAILED]]]

[[[[Adv]]]]: public PropertyDescriptor [[getPropertyDescriptor]] ( final String [[name]] , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( [[name]] ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .

[[[[Adv]]]]: public PropertyDescriptor [[chedda]] ( final String [[goldfarb]] , final boolean declared ) { PropertyDescriptor propertyDescriptor = getProperties ( ) . getPropertyDescriptor ( [[goldfarb]] ) ; if ( ( propertyDescriptor != null ) && propertyDescriptor . matchDeclared ( declared ) ) { return propertyDescriptor ; } return null ; }
[[[[Nl]]]]: Returns property descriptor . Declared flag is matched on both read and write methods .
--------------------------------------------- Result 959 ---------------------------------------------
Adds a file to the ZIP output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public static void [[addToZip]] ( final ZipOutputStream zos , final File [[file]] , String path , final String [[comment]] , final boolean recursive ) throws IOException { if ( ! [[file]] . exists ( ) ) { throw new FileNotFoundException ( [[file]] . toString ( ) ) ; } if ( path == null ) { path = [[file]] . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean [[isDir]] = [[file]] . isDirectory ( ) ; if ( [[isDir]] ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .

[[[[Adv]]]]: public static void [[expects]] ( final ZipOutputStream zos , final File [[bartleby]] , String path , final String [[barbed]] , final boolean recursive ) throws IOException { if ( ! [[bartleby]] . exists ( ) ) { throw new FileNotFoundException ( [[bartleby]] . toString ( ) ) ; } if ( path == null ) { path = [[bartleby]] . getName ( ) ; } while ( path . length ( ) != 0 && path . charAt ( 0 ) == ' ' ) { path = path . substring ( 1 ) ; } boolean [[molars]] = [[bartleby]] . isDirectory ( ) ; if ( [[molars]] ) {
[[[[Nl]]]]: Adds single entry to ZIP output stream .
--------------------------------------------- Result 960 ---------------------------------------------
Gets the locale from the session . --> [[[FAILED]]]

[[[[Adv]]]]: public static Locale [[getSessionLocale]] ( final HttpSession session ) { Locale [[locale]] = ( Locale ) session . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[locale]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[locale]] ; }
[[[[Nl]]]]: Returns current locale from session . s

[[[[Adv]]]]: public static Locale [[begging]] ( final HttpSession session ) { Locale [[bootlegging]] = ( Locale ) session . getAttribute ( SESSION_LOCALE_ATTR ) ; return [[bootlegging]] == null ? MESSAGE_RESOLVER . getFallbackLocale ( ) : [[bootlegging]] ; }
[[[[Nl]]]]: Returns current locale from session . s
--------------------------------------------- Result 961 ---------------------------------------------
Sets the locale stored in the session . --> [[[FAILED]]]

[[[[Adv]]]]: public static void setSessionLocale ( final HttpSession [[session]] , final String [[localeCode]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[localeCode]] ) ; } Locale locale = Locale . forLanguageTag ( [[localeCode]] ) ; [[session]] . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .

[[[[Adv]]]]: public static void setSessionLocale ( final HttpSession [[commandeer]] , final String [[crabtree]] ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "Locale stored to session: " + [[crabtree]] ) ; } Locale locale = Locale . forLanguageTag ( [[crabtree]] ) ; [[commandeer]] . setAttribute ( SESSION_LOCALE_ATTR , locale ) ; }
[[[[Nl]]]]: Saves Locale to HTTP session .
--------------------------------------------- Result 962 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 624 / 316 / 22 / 962:  96%|█████████▌| 962/1000 [1:32:03<03:38,  5.74s/it][Succeeded / Failed / Skipped / Total] 624 / 316 / 22 / 962:  96%|█████████▋| 963/1000 [1:32:06<03:32,  5.74s/it][Succeeded / Failed / Skipped / Total] 625 / 316 / 22 / 963:  96%|█████████▋| 963/1000 [1:32:06<03:32,  5.74s/it][Succeeded / Failed / Skipped / Total] 625 / 316 / 22 / 963:  96%|█████████▋| 964/1000 [1:32:11<03:26,  5.74s/it][Succeeded / Failed / Skipped / Total] 626 / 316 / 22 / 964:  96%|█████████▋| 964/1000 [1:32:11<03:26,  5.74s/it][Succeeded / Failed / Skipped / Total] 626 / 316 / 22 / 964:  96%|█████████▋| 965/1000 [1:32:25<03:21,  5.75s/it][Succeeded / Failed / Skipped / Total] 627 / 316 / 22 / 965:  96%|█████████▋| 965/1000 [1:32:25<03:21,  5.75s/it][Succeeded / Failed / Skipped / Total] 627 / 316 / 22 / 965:  97%|█████████▋| 966/1000 [1:32:29<03:15,  5.74s/it][Succeeded / Failed / Skipped / Total] 627 / 317 / 22 / 966:  97%|█████████▋| 966/1000 [1:32:29<03:15,  5.74s/it][Succeeded / Failed / Skipped / Total] 627 / 317 / 22 / 966:  97%|█████████▋| 967/1000 [1:32:38<03:09,  5.75s/it][Succeeded / Failed / Skipped / Total] 628 / 317 / 22 / 967:  97%|█████████▋| 967/1000 [1:32:38<03:09,  5.75s/it][Succeeded / Failed / Skipped / Total] 628 / 317 / 22 / 967:  97%|█████████▋| 968/1000 [1:32:40<03:03,  5.74s/it]Add profiles . --> [[[FAILED]]]

[[[[Adv]]]]: public PropsEntries [[profile]] ( final String ... [[profiles]] ) { if ( [[profiles]] == null ) { return this ; } for ( String [[profile]] : [[profiles]] ) { addProfiles ( [[profile]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .

[[[[Adv]]]]: public PropsEntries [[axel]] ( final String ... [[differences]] ) { if ( [[differences]] == null ) { return this ; } for ( String [[axel]] : [[differences]] ) { addProfiles ( [[axel]] ) ; } return this ; }
[[[[Nl]]]]: Enables profiles to iterate .
--------------------------------------------- Result 963 ---------------------------------------------
Reads the contents of a stream . --> don t do anything --> Socre: 1.0

[[[[Adv]]]]: private static byte [ ] [[readStream]] ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .

[[[[Adv]]]]: private static byte [ ] [[dona]] ( final InputStream inputStream , final boolean close ) throws IOException { if ( inputStream == null ) { throw new IOException ( "Class not found" ) ; } try { ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( ) ; byte [ ] data = new byte [ INPUT_STREAM_DATA_CHUNK_SIZE ] ; int bytesRead ; while ( ( bytesRead = inputStream . read ( data , 0 , data . length ) ) != - 1 ) { outputStream . write ( data , 0 , bytesRead ) ; } outputStream . flush ( ) ; return outputStream . toByteArray ( ) ; } finally { if ( close ) { inputStream . close ( ) ; } } }
[[[[Nl]]]]: Reads the given input stream and returns its content as a byte array .
--------------------------------------------- Result 964 ---------------------------------------------
Filter parameters for a bean name --> Helper method for terminals --> Socre: 1.0

[[[[Adv]]]]: public String [ ] [[filterParametersForBeanName]] ( String [[beanName]] , final boolean resolveReferenceParams ) { [[beanName]] = [[beanName]] + ' ' ; List < String > [[list]] = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( [[beanName]] ) ) { continue ; } [[list]] . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .

[[[[Adv]]]]: public String [ ] [[terminal]] ( String [[jamaicans]] , final boolean resolveReferenceParams ) { [[jamaicans]] = [[jamaicans]] + ' ' ; List < String > [[labors]] = new ArrayList <> ( ) ; for ( Map . Entry < String , Object > entry : params . entrySet ( ) ) { String key = entry . getKey ( ) ; if ( ! key . startsWith ( [[jamaicans]] ) ) { continue ; } [[labors]] . add ( key ) ; if ( ! resolveReferenceParams ) { continue ; }
[[[[Nl]]]]: Returns an array of param keys that belongs to provided bean . Optionally resolves the value of returned parameters .
--------------------------------------------- Result 965 ---------------------------------------------
Read a long from a byte array at the given offset . --> Computes the gliding of the gliding algorithm --> Socre: 1.0

[[[[Adv]]]]: public static long [[getLongLittleEndian]] ( final byte [ ] [[buf]] , final int [[offset]] ) { return ( ( long ) [[buf]] [ [[offset]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .

[[[[Adv]]]]: public static long [[gliding]] ( final byte [ ] [[refreshingly]] , final int [[moki]] ) { return ( ( long ) [[refreshingly]] [ [[moki]] + 7 ] << 56 )
[[[[Nl]]]]: Gets a long from a byte buffer in little endian byte order .
--------------------------------------------- Result 966 ---------------------------------------------
Reads a label from the given bytecode offset --> [[[FAILED]]]

[[[[Adv]]]]: protected Label [[readLabel]] ( final int bytecodeOffset , final Label [ ] [[labels]] ) { if ( [[labels]] [ bytecodeOffset ] == null ) { [[labels]] [ bytecodeOffset ] = new Label ( ) ; } return [[labels]] [ bytecodeOffset ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .

[[[[Adv]]]]: protected Label [[reprisal]] ( final int bytecodeOffset , final Label [ ] [[markoff]] ) { if ( [[markoff]] [ bytecodeOffset ] == null ) { [[markoff]] [ bytecodeOffset ] = new Label ( ) ; } return [[markoff]] [ bytecodeOffset ] ; }
[[[[Nl]]]]: Returns the label corresponding to the given bytecode offset . The default implementation of this method creates a label for the given offset if it has not been already created .
--------------------------------------------- Result 967 ---------------------------------------------
Get the offset of the type annotation . --> Read billabong --> Socre: 1.0

[[[[Adv]]]]: private int [[getTypeAnnotationBytecodeOffset]] ( final int [ ] [[typeAnnotationOffsets]] , final int [[typeAnnotationIndex]] ) { if ( [[typeAnnotationOffsets]] == null || [[typeAnnotationIndex]] >= [[typeAnnotationOffsets]] . length || readByte ( [[typeAnnotationOffsets]] [ [[typeAnnotationIndex]] ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( [[typeAnnotationOffsets]] [ [[typeAnnotationIndex]] ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .

[[[[Adv]]]]: private int [[billabong]] ( final int [ ] [[bury]] , final int [[dreamless]] ) { if ( [[bury]] == null || [[dreamless]] >= [[bury]] . length || readByte ( [[bury]] [ [[dreamless]] ] ) < TypeReference . INSTANCEOF ) { return - 1 ; } return readUnsignedShort ( [[bury]] [ [[dreamless]] ] + 1 ) ; }
[[[[Nl]]]]: Returns the bytecode offset corresponding to the specified JVMS type_annotation structure or - 1 if there is no such type_annotation of if it does not have a bytecode offset .
--------------------------------------------- Result 968 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 629 / 317 / 22 / 968:  97%|█████████▋| 968/1000 [1:32:40<03:03,  5.74s/it][Succeeded / Failed / Skipped / Total] 629 / 317 / 22 / 968:  97%|█████████▋| 969/1000 [1:32:52<02:58,  5.75s/it][Succeeded / Failed / Skipped / Total] 630 / 317 / 22 / 969:  97%|█████████▋| 969/1000 [1:32:52<02:58,  5.75s/it][Succeeded / Failed / Skipped / Total] 630 / 317 / 22 / 969:  97%|█████████▋| 970/1000 [1:32:57<02:52,  5.75s/it][Succeeded / Failed / Skipped / Total] 631 / 317 / 22 / 970:  97%|█████████▋| 970/1000 [1:32:57<02:52,  5.75s/it][Succeeded / Failed / Skipped / Total] 631 / 317 / 22 / 970:  97%|█████████▋| 971/1000 [1:33:10<02:46,  5.76s/it][Succeeded / Failed / Skipped / Total] 632 / 317 / 22 / 971:  97%|█████████▋| 971/1000 [1:33:10<02:46,  5.76s/it][Succeeded / Failed / Skipped / Total] 632 / 317 / 22 / 971:  97%|█████████▋| 972/1000 [1:33:16<02:41,  5.76s/it][Succeeded / Failed / Skipped / Total] 633 / 317 / 22 / 972:  97%|█████████▋| 972/1000 [1:33:16<02:41,  5.76s/it][Succeeded / Failed / Skipped / Total] 633 / 317 / 22 / 972:  97%|█████████▋| 973/1000 [1:33:26<02:35,  5.76s/it][Succeeded / Failed / Skipped / Total] 633 / 318 / 22 / 973:  97%|█████████▋| 973/1000 [1:33:26<02:35,  5.76s/it][Succeeded / Failed / Skipped / Total] 633 / 318 / 22 / 973:  97%|█████████▋| 974/1000 [1:33:28<02:29,  5.76s/it]Read verification type information . --> Synchronized implementation --> Socre: 1.0

[[[[Adv]]]]: private int [[readVerificationTypeInfo]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .

[[[[Adv]]]]: private int [[instantaneous]] ( final int verificationTypeInfoOffset , final Object [ ] frame , final int index , final char [ ] charBuffer , final Label [ ] labels ) { int currentOffset = verificationTypeInfoOffset ; int tag = b [ currentOffset ++ ] & 0xFF ; switch ( tag ) { case Frame . ITEM_TOP : frame [ index ] = Opcodes . TOP ; break ; case Frame . ITEM_INTEGER : frame [ index ] = Opcodes . INTEGER ; break ; case Frame . ITEM_FLOAT : frame [ index ] = Opcodes . FLOAT ; break ; case Frame . ITEM_DOUBLE : frame [ index ] = Opcodes . DOUBLE ; break ; case Frame . ITEM_LONG : frame [ index ] = Opcodes . LONG ; break ; case Frame . ITEM_NULL : frame [ index ] = Opcodes . NULL ; break ; case Frame . ITEM_UNINITIALIZED_THIS : frame [ index ] = Opcodes . UNINITIALIZED_THIS ; break ; case Frame . ITEM_OBJECT : frame [ index ] = readClass ( currentOffset , charBuffer ) ; currentOffset += 2 ; break ; case Frame . ITEM_UNINITIALIZED : frame [ index ] = createLabel ( readUnsignedShort ( currentOffset ) , labels ) ; currentOffset += 2 ; break ; default : throw new IllegalArgumentException ( ) ; } return currentOffset ; }
[[[[Nl]]]]: Reads a JVMS verification_type_info structure and stores it at the given index in the given array .
--------------------------------------------- Result 969 ---------------------------------------------
Read element values . --> Perform booting --> Socre: 1.0

[[[[Adv]]]]: private int [[readElementValues]] ( final AnnotationVisitor annotationVisitor , final int [[annotationOffset]] , final boolean named , final char [ ] charBuffer ) { int [[currentOffset]] = [[annotationOffset]] ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .

[[[[Adv]]]]: private int [[booting]] ( final AnnotationVisitor annotationVisitor , final int [[vee]] , final boolean named , final char [ ] charBuffer ) { int [[achmed]] = [[vee]] ;
[[[[Nl]]]]: Reads the element values of a JVMS annotation structure and makes the given visitor visit them . This method can also be used to read the values of the JVMS array_value field of an annotation s element_value .
--------------------------------------------- Result 970 ---------------------------------------------
Obtain a list of constructor descriptors . --> Obtain the constructor descriptors --> Socre: 1.0

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] [[ctors]] = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] [[allCtors]] = new CtorDescriptor [ [[ctors]] . length ] ; for ( int i = 0 ; i < [[ctors]] . length ; i ++ ) { Constructor ctor = [[ctors]] [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; [[allCtors]] [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return [[allCtors]] ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .

[[[[Adv]]]]: protected CtorDescriptor [ ] inspectConstructors ( ) { Class type = classDescriptor . getType ( ) ; Constructor [ ] [[mimeograph]] = type . getDeclaredConstructors ( ) ; CtorDescriptor [ ] [[blackmailer]] = new CtorDescriptor [ [[mimeograph]] . length ] ; for ( int i = 0 ; i < [[mimeograph]] . length ; i ++ ) { Constructor ctor = [[mimeograph]] [ i ] ; CtorDescriptor ctorDescriptor = createCtorDescriptor ( ctor ) ; [[blackmailer]] [ i ] = ctorDescriptor ; if ( ctorDescriptor . isDefault ( ) ) { defaultCtor = ctorDescriptor ; } } return [[blackmailer]] ; }
[[[[Nl]]]]: Inspects all declared constructors of a target type .
--------------------------------------------- Result 971 ---------------------------------------------
Read all bootstrap methods attribute . --> Kunked methods --> Socre: 1.0

[[[[Adv]]]]: private int [ ] [[readBootstrapMethodsAttribute]] ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int [[currentAttributeOffset]] = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int [[i]] = readUnsignedShort ( [[currentAttributeOffset]] - 2 ) ; [[i]] > 0 ; -- [[i]] ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .

[[[[Adv]]]]: private int [ ] [[klunk]] ( final int maxStringLength ) { char [ ] charBuffer = new char [ maxStringLength ] ; int [[bookworms]] = getFirstAttributeOffset ( ) ; int [ ] currentBootstrapMethodOffsets = null ; for ( int [[screwface]] = readUnsignedShort ( [[bookworms]] - 2 ) ; [[screwface]] > 0 ; -- [[screwface]] ) {
[[[[Nl]]]]: Reads the BootstrapMethods attribute to compute the offset of each bootstrap method .
--------------------------------------------- Result 972 ---------------------------------------------
Creates the request map . --> This method is used to deserialize citation data --> Socre: 1.0

[[[[Adv]]]]: protected Map < String , TransientBeanData > createRequestMap ( final HttpServletRequest [[servletRequest]] ) { Map < String , TransientBeanData > [[map]] = new HashMap <> ( ) ; [[servletRequest]] . setAttribute ( ATTR_NAME , [[map]] ) ; return [[map]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .

[[[[Adv]]]]: protected Map < String , TransientBeanData > createRequestMap ( final HttpServletRequest [[rajasthan]] ) { Map < String , TransientBeanData > [[professors]] = new HashMap <> ( ) ; [[rajasthan]] . setAttribute ( ATTR_NAME , [[professors]] ) ; return [[professors]] ; }
[[[[Nl]]]]: Creates instance map and stores it in the request .
--------------------------------------------- Result 973 ---------------------------------------------
Gets the ctor descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public CtorDescriptor [[getCtorDescriptor]] ( final Class ... [[args]] ) { ctors : for ( CtorDescriptor [[ctorDescriptor]] : allCtors ) { Class [ ] arg = [[ctorDescriptor]] . getParameters ( ) ; if ( arg . length != [[args]] . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != [[args]] [ j ] ) { continue ctors ; } } return [[ctorDescriptor]] ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .

[[[[Adv]]]]: public CtorDescriptor [[punctuality]] ( final Class ... [[luckily]] ) { ctors : for ( CtorDescriptor [[cults]] : allCtors ) { Class [ ] arg = [[cults]] . getParameters ( ) ; if ( arg . length != [[luckily]] . length ) { continue ; } for ( int j = 0 ; j < arg . length ; j ++ ) { if ( arg [ j ] != [[luckily]] [ j ] ) { continue ctors ; } } return [[cults]] ; } return null ; }
[[[[Nl]]]]: Finds constructor description that matches given argument types .
[Succeeded / Failed / Skipped / Total] 634 / 318 / 22 / 974:  97%|█████████▋| 974/1000 [1:33:28<02:29,  5.76s/it][Succeeded / Failed / Skipped / Total] 634 / 318 / 22 / 974:  98%|█████████▊| 975/1000 [1:33:29<02:23,  5.75s/it][Succeeded / Failed / Skipped / Total] 634 / 319 / 22 / 975:  98%|█████████▊| 975/1000 [1:33:29<02:23,  5.75s/it][Succeeded / Failed / Skipped / Total] 634 / 319 / 22 / 975:  98%|█████████▊| 976/1000 [1:33:35<02:18,  5.75s/it][Succeeded / Failed / Skipped / Total] 635 / 319 / 22 / 976:  98%|█████████▊| 976/1000 [1:33:35<02:18,  5.75s/it][Succeeded / Failed / Skipped / Total] 635 / 319 / 22 / 976:  98%|█████████▊| 977/1000 [1:33:37<02:12,  5.75s/it][Succeeded / Failed / Skipped / Total] 636 / 319 / 22 / 977:  98%|█████████▊| 977/1000 [1:33:37<02:12,  5.75s/it][Succeeded / Failed / Skipped / Total] 636 / 319 / 22 / 977:  98%|█████████▊| 978/1000 [1:33:37<02:06,  5.74s/it][Succeeded / Failed / Skipped / Total] 637 / 319 / 22 / 978:  98%|█████████▊| 978/1000 [1:33:37<02:06,  5.74s/it][Succeeded / Failed / Skipped / Total] 637 / 319 / 22 / 978:  98%|█████████▊| 979/1000 [1:33:45<02:00,  5.75s/it][Succeeded / Failed / Skipped / Total] 638 / 319 / 22 / 979:  98%|█████████▊| 979/1000 [1:33:45<02:00,  5.75s/it][Succeeded / Failed / Skipped / Total] 638 / 319 / 22 / 979:  98%|█████████▊| 980/1000 [1:33:45<01:54,  5.74s/it][Succeeded / Failed / Skipped / Total] 638 / 320 / 22 / 980:  98%|█████████▊| 980/1000 [1:33:45<01:54,  5.74s/it][Succeeded / Failed / Skipped / Total] 638 / 320 / 22 / 980:  98%|█████████▊| 981/1000 [1:33:50<01:49,  5.74s/it][Succeeded / Failed / Skipped / Total] 638 / 321 / 22 / 981:  98%|█████████▊| 981/1000 [1:33:50<01:49,  5.74s/it][Succeeded / Failed / Skipped / Total] 638 / 321 / 22 / 981:  98%|█████████▊| 982/1000 [1:33:58<01:43,  5.74s/it][Succeeded / Failed / Skipped / Total] 639 / 321 / 22 / 982:  98%|█████████▊| 982/1000 [1:33:58<01:43,  5.74s/it][Succeeded / Failed / Skipped / Total] 639 / 321 / 22 / 982:  98%|█████████▊| 983/1000 [1:33:59<01:37,  5.74s/it]--------------------------------------------- Result 974 ---------------------------------------------
Initializes the filter . --> Dispatches Bayes Bayes --> Socre: 1.0

[[[[Adv]]]]: @ Override public void [[init]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .

[[[[Adv]]]]: @ Override public void [[baywatch]] ( final FilterConfig filterConfig ) throws ServletException {
[[[[Nl]]]]: Initializes Decora filter . Loads manager and parser from init parameters .
--------------------------------------------- Result 975 ---------------------------------------------
Retrieves the transient attributes from the servlet request . --> [[[FAILED]]]

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[getRequestMap]] ( final HttpServletRequest [[servletRequest]] ) { return ( Map < String , TransientBeanData > ) [[servletRequest]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .

[[[[Adv]]]]: @ SuppressWarnings ( "unchecked" ) protected Map < String , TransientBeanData > [[mounts]] ( final HttpServletRequest [[shackles]] ) { return ( Map < String , TransientBeanData > ) [[shackles]] . getAttribute ( ATTR_NAME ) ; }
[[[[Nl]]]]: Returns instance map from http request .
--------------------------------------------- Result 976 ---------------------------------------------
Add a search path --> Add a ducats file --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URI searchPath ) { File file ; try { file = new File ( [[searchPath]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[searchPath]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .

[[[[Adv]]]]: public FindFile [[ducats]] ( final URI searchPath ) { File file ; try { file = new File ( [[ducats]] ) ; } catch ( Exception ex ) { throw new FindFileException ( "URI error: " + [[ducats]] , ex ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URI is invalid .
--------------------------------------------- Result 977 ---------------------------------------------
Add a search path . --> Add a cargo location --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[searchPath]] ( final URL searchPath ) { File file = FileUtil . toContainerFile ( [[searchPath]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[searchPath]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .

[[[[Adv]]]]: public FindFile [[freight]] ( final URL searchPath ) { File file = FileUtil . toContainerFile ( [[freight]] ) ; if ( file == null ) { throw new FindFileException ( "URL error: " + [[freight]] ) ; } addPath ( file ) ; return this ; }
[[[[Nl]]]]: Specifies the search path . Throws an exception if URL is invalid .
--------------------------------------------- Result 978 ---------------------------------------------
Adds a file consumer to each file . --> Indicate how to consume files . --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[onFile]] ( final Consumer < File > fileConsumer ) { if ( consumers == null ) { consumers = Consumers . of ( fileConsumer ) ; } else { consumers . add ( fileConsumer ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer

[[[[Adv]]]]: public FindFile [[howling]] ( final Consumer < File > fileConsumer ) { if ( consumers == null ) { consumers = Consumers . of ( fileConsumer ) ; } else { consumers . add ( fileConsumer ) ; } return this ; }
[[[[Nl]]]]: Registers file consumer
--------------------------------------------- Result 979 ---------------------------------------------
Excludes specified patterns . --> Excludes specified rules --> Socre: 1.0

[[[[Adv]]]]: public FindFile exclude ( final String ... [[patterns]] ) { for ( String pattern : [[patterns]] ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .

[[[[Adv]]]]: public FindFile exclude ( final String ... [[hanger]] ) { for ( String pattern : [[hanger]] ) { rules . exclude ( pattern ) ; } return this ; }
[[[[Nl]]]]: Defines exclude patterns .
--------------------------------------------- Result 980 ---------------------------------------------
Convert array to array . --> [[[FAILED]]]

[[[[Adv]]]]: protected long [ ] [[convertArrayToArray]] ( final Object [[value]] ) { final Class valueComponentType = [[value]] . getClass ( ) . getComponentType ( ) ; final long [ ] [[result]] ; if ( valueComponentType . isPrimitive ( ) ) { [[result]] = convertPrimitiveArrayToArray ( [[value]] , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .

[[[[Adv]]]]: protected long [ ] [[canary]] ( final Object [[voluptuous]] ) { final Class valueComponentType = [[voluptuous]] . getClass ( ) . getComponentType ( ) ; final long [ ] [[hojo]] ; if ( valueComponentType . isPrimitive ( ) ) { [[hojo]] = convertPrimitiveArrayToArray ( [[voluptuous]] , valueComponentType ) ; } else {
[[[[Nl]]]]: Converts array value to array .
--------------------------------------------- Result 981 ---------------------------------------------
Adds a path to the list . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[addPath]] ( final File [[path]] ) { if ( ! [[path]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[path]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .

[[[[Adv]]]]: protected void [[blackest]] ( final File [[alper]] ) { if ( ! [[alper]] . exists ( ) ) { return ; } if ( pathList == null ) { pathList = new LinkedList <> ( ) ; } pathList . add ( [[alper]] ) ; }
[[[[Nl]]]]: Adds existing search path to the file list . Non existing files are ignored . If path is a folder it will be scanned for all files .
--------------------------------------------- Result 982 ---------------------------------------------
Initialize rules . --> ztodo --> Socre: 1.0

[[[[Adv]]]]: protected void [[init]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator [[filesIterator]] = new FilesIterator ( files ) ; todoFiles . add ( [[filesIterator]] ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .

[[[[Adv]]]]: protected void [[zeta]] ( ) { rules . detectMode ( ) ; todoFiles = new LinkedList <> ( ) ; todoFolders = new LinkedList <> ( ) ; if ( pathList == null ) { pathList = new LinkedList <> ( ) ; return ; } if ( pathListOriginal == null ) { pathListOriginal = ( LinkedList < File > ) pathList . clone ( ) ; } String [ ] files = new String [ pathList . size ( ) ] ; int index = 0 ; Iterator < File > iterator = pathList . iterator ( ) ; while ( iterator . hasNext ( ) ) { File file = iterator . next ( ) ; if ( file . isFile ( ) ) { files [ index ++ ] = file . getAbsolutePath ( ) ; iterator . remove ( ) ; } } if ( index != 0 ) { FilesIterator [[baywatch]] = new FilesIterator ( files ) ; todoFiles . add ( [[baywatch]] ) ; } }
[[[[Nl]]]]: Initializes file walking . Separates input files and folders .
--------------------------------------------- Result 983 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 639 / 322 / 22 / 983:  98%|█████████▊| 983/1000 [1:33:59<01:37,  5.74s/it][Succeeded / Failed / Skipped / Total] 639 / 322 / 22 / 983:  98%|█████████▊| 984/1000 [1:34:04<01:31,  5.74s/it][Succeeded / Failed / Skipped / Total] 640 / 322 / 22 / 984:  98%|█████████▊| 984/1000 [1:34:04<01:31,  5.74s/it][Succeeded / Failed / Skipped / Total] 640 / 322 / 22 / 984:  98%|█████████▊| 985/1000 [1:34:09<01:26,  5.74s/it][Succeeded / Failed / Skipped / Total] 640 / 323 / 22 / 985:  98%|█████████▊| 985/1000 [1:34:09<01:26,  5.74s/it][Succeeded / Failed / Skipped / Total] 640 / 323 / 22 / 985:  99%|█████████▊| 986/1000 [1:34:14<01:20,  5.73s/it][Succeeded / Failed / Skipped / Total] 640 / 324 / 22 / 986:  99%|█████████▊| 986/1000 [1:34:14<01:20,  5.73s/it][Succeeded / Failed / Skipped / Total] 640 / 324 / 22 / 986:  99%|█████████▊| 987/1000 [1:34:15<01:14,  5.73s/it][Succeeded / Failed / Skipped / Total] 641 / 324 / 22 / 987:  99%|█████████▊| 987/1000 [1:34:15<01:14,  5.73s/it][Succeeded / Failed / Skipped / Total] 641 / 324 / 22 / 987:  99%|█████████▉| 988/1000 [1:34:17<01:08,  5.73s/it][Succeeded / Failed / Skipped / Total] 641 / 325 / 22 / 988:  99%|█████████▉| 988/1000 [1:34:17<01:08,  5.73s/it][Succeeded / Failed / Skipped / Total] 641 / 325 / 22 / 988:  99%|█████████▉| 989/1000 [1:34:26<01:03,  5.73s/it][Succeeded / Failed / Skipped / Total] 641 / 326 / 22 / 989:  99%|█████████▉| 989/1000 [1:34:26<01:03,  5.73s/it][Succeeded / Failed / Skipped / Total] 641 / 326 / 22 / 989:  99%|█████████▉| 990/1000 [1:34:34<00:57,  5.73s/it][Succeeded / Failed / Skipped / Total] 642 / 326 / 22 / 990:  99%|█████████▉| 990/1000 [1:34:34<00:57,  5.73s/it][Succeeded / Failed / Skipped / Total] 642 / 326 / 22 / 990:  99%|█████████▉| 991/1000 [1:34:35<00:51,  5.73s/it]Returns an iterator over the available files . --> [[[FAILED]]]

[[[[Adv]]]]: @ Override public Iterator < File > [[iterator]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .

[[[[Adv]]]]: @ Override public Iterator < File > [[communards]] ( ) { return new Iterator < File > ( ) { private File nextFile ; @ Override public boolean hasNext ( ) { nextFile = nextFile ( ) ; return nextFile != null ; } @ Override public File next ( ) { if ( nextFile == null ) { throw new NoSuchElementException ( ) ; } return nextFile ; } @ Override public void remove ( ) { throw new UnsupportedOperationException ( ) ; } } ; }
[[[[Nl]]]]: Returns file walking iterator .
--------------------------------------------- Result 984 ---------------------------------------------
Includes specified patterns . --> Adds elips to find elips --> Socre: 1.0

[[[[Adv]]]]: public FindFile [[include]] ( final String ... [[patterns]] ) { for ( String [[pattern]] : [[patterns]] ) { rules . include ( [[pattern]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .

[[[[Adv]]]]: public FindFile [[elton]] ( final String ... [[clarita]] ) { for ( String [[sunglasses]] : [[clarita]] ) { rules . include ( [[sunglasses]] ) ; } return this ; }
[[[[Nl]]]]: Defines include patterns .
--------------------------------------------- Result 985 ---------------------------------------------
Returns all the files in the stream . --> [[[FAILED]]]

[[[[Adv]]]]: public List < File > [[findAll]] ( ) { List < File > [[allFiles]] = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { [[allFiles]] . add ( file ) ; } return [[allFiles]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .

[[[[Adv]]]]: public List < File > [[chippy]] ( ) { List < File > [[cicatrice]] = new ArrayList <> ( ) ; File file ; while ( ( file = nextFile ( ) ) != null ) { [[cicatrice]] . add ( file ) ; } return [[cicatrice]] ; }
[[[[Nl]]]]: Finds all files and returns list of founded files .
--------------------------------------------- Result 986 ---------------------------------------------
Returns an instance of the BufferedWriter . --> [[[FAILED]]]

[[[[Adv]]]]: public PrintWriter [[getWriter]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .

[[[[Adv]]]]: public PrintWriter [[thoroughbred]] ( ) { if ( outWriter == null ) { if ( outStream != null ) { throw new IllegalStateException ( "Can't call getWriter() after getOutputStream()" ) ; } bufferedWriter = new FastCharArrayWriter ( ) ; outWriter = new PrintWriter ( bufferedWriter ) { @ Override public void close ( ) {
[[[[Nl]]]]: Returns a writer .
--------------------------------------------- Result 987 ---------------------------------------------
Resolves the bean name . --> Generate mcclane --> Socre: 1.0

[[[[Adv]]]]: public String [[resolveBeanName]] ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String [[name]] = null ; if ( petiteBean != null ) { [[name]] = petiteBean . value ( ) . trim ( ) ; } if ( ( [[name]] == null ) || ( [[name]] . length ( ) == 0 ) ) { if ( useLongTypeName ) { [[name]] = type . getName ( ) ; } else { [[name]] = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return [[name]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .

[[[[Adv]]]]: public String [[mcclane]] ( final Class type , final boolean useLongTypeName ) { PetiteBean petiteBean = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; String [[dominik]] = null ; if ( petiteBean != null ) { [[dominik]] = petiteBean . value ( ) . trim ( ) ; } if ( ( [[dominik]] == null ) || ( [[dominik]] . length ( ) == 0 ) ) { if ( useLongTypeName ) { [[dominik]] = type . getName ( ) ; } else { [[dominik]] = StringUtil . uncapitalize ( type . getSimpleName ( ) ) ; } } return [[dominik]] ; }
[[[[Nl]]]]: Resolves bean s name from bean annotation or type name . May be used for resolving bean name of base type during registration of bean subclass .
--------------------------------------------- Result 988 ---------------------------------------------
Returns the output stream . --> [[[FAILED]]]

[[[[Adv]]]]: public ServletOutputStream [[getOutputStream]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .

[[[[Adv]]]]: public ServletOutputStream [[cleansing]] ( ) { if ( outStream == null ) { if ( outWriter != null ) { throw new IllegalStateException ( "Can't call getOutputStream() after getWriter()" ) ; } bufferOutputStream = new FastByteArrayServletOutputStream ( ) ; outStream = bufferOutputStream ; } return outStream ; }
[[[[Nl]]]]: Returns a servlet output stream .
--------------------------------------------- Result 989 ---------------------------------------------
Resolves the wiring mode . --> [[[FAILED]]]

[[[[Adv]]]]: public WiringMode [[resolveBeanWiringMode]] ( final Class type ) { PetiteBean [[petiteBean]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return [[petiteBean]] != null ? [[petiteBean]] . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .

[[[[Adv]]]]: public WiringMode [[operate]] ( final Class type ) { PetiteBean [[undesirable]] = ( ( Class < ? > ) type ) . getAnnotation ( PetiteBean . class ) ; return [[undesirable]] != null ? [[undesirable]] . wiring ( ) : WiringMode . DEFAULT ; }
[[[[Nl]]]]: Resolves bean s auto - wire flag from the annotation . Returns default auto - wire if annotation doesn t exist .
--------------------------------------------- Result 990 ---------------------------------------------
Gets a method descriptor . --> Generate alternate type --> Socre: 1.0

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Type returnType , final Type ... [[argumentTypes]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type argumentType : [[argumentTypes]] ) { argumentType . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; returnType . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .

[[[[Adv]]]]: public static String [[alternate]] ( final Type returnType , final Type ... [[crystallization]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; for ( Type argumentType : [[crystallization]] ) { argumentType . appendDescriptor ( stringBuilder ) ; } stringBuilder . append ( ' ' ) ; returnType . appendDescriptor ( stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given argument and return types .
--------------------------------------------- Result 991 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 642 / 327 / 22 / 991:  99%|█████████▉| 991/1000 [1:34:35<00:51,  5.73s/it][Succeeded / Failed / Skipped / Total] 642 / 327 / 22 / 991:  99%|█████████▉| 992/1000 [1:34:44<00:45,  5.73s/it][Succeeded / Failed / Skipped / Total] 642 / 328 / 22 / 992:  99%|█████████▉| 992/1000 [1:34:44<00:45,  5.73s/it][Succeeded / Failed / Skipped / Total] 642 / 328 / 22 / 992:  99%|█████████▉| 993/1000 [1:34:49<00:40,  5.73s/it][Succeeded / Failed / Skipped / Total] 643 / 328 / 22 / 993:  99%|█████████▉| 993/1000 [1:34:49<00:40,  5.73s/it][Succeeded / Failed / Skipped / Total] 643 / 328 / 22 / 993:  99%|█████████▉| 994/1000 [1:34:49<00:34,  5.72s/it][Succeeded / Failed / Skipped / Total] 643 / 329 / 22 / 994:  99%|█████████▉| 994/1000 [1:34:49<00:34,  5.72s/it][Succeeded / Failed / Skipped / Total] 643 / 329 / 22 / 994: 100%|█████████▉| 995/1000 [1:35:00<00:28,  5.73s/it][Succeeded / Failed / Skipped / Total] 643 / 330 / 22 / 995: 100%|█████████▉| 995/1000 [1:35:00<00:28,  5.73s/it][Succeeded / Failed / Skipped / Total] 643 / 330 / 22 / 995: 100%|█████████▉| 996/1000 [1:35:02<00:22,  5.73s/it][Succeeded / Failed / Skipped / Total] 643 / 331 / 22 / 996: 100%|█████████▉| 996/1000 [1:35:02<00:22,  5.73s/it][Succeeded / Failed / Skipped / Total] 643 / 331 / 22 / 996: 100%|█████████▉| 997/1000 [1:35:05<00:17,  5.72s/it][Succeeded / Failed / Skipped / Total] 644 / 331 / 22 / 997: 100%|█████████▉| 997/1000 [1:35:05<00:17,  5.72s/it][Succeeded / Failed / Skipped / Total] 644 / 331 / 22 / 997: 100%|█████████▉| 998/1000 [1:35:21<00:11,  5.73s/it]Returns the class name . --> [[[FAILED]]]

[[[[Adv]]]]: public String [[getClassName]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .

[[[[Adv]]]]: public String [[grueling]] ( ) { switch ( sort ) { case VOID : return "void" ; case BOOLEAN : return "boolean" ; case CHAR : return "char" ; case BYTE : return "byte" ; case SHORT : return "short" ; case INT : return "int" ; case FLOAT : return "float" ; case LONG : return "long" ; case DOUBLE : return "double" ; case ARRAY : StringBuilder stringBuilder = new StringBuilder ( getElementType ( ) . getClassName ( ) ) ; for ( int i = getDimensions ( ) ; i > 0 ; -- i ) { stringBuilder . append ( "[]" ) ; } return stringBuilder . toString ( ) ; case OBJECT : case INTERNAL : return valueBuffer . substring ( valueBegin , valueEnd ) . replace ( ' ' , ' ' ) ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the binary name of the class corresponding to this type . This method must not be used on method types .
--------------------------------------------- Result 992 ---------------------------------------------
Gets the size of this object . --> [[[FAILED]]]

[[[[Adv]]]]: public int [[getSize]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .

[[[[Adv]]]]: public int [[oop]] ( ) { switch ( sort ) { case VOID : return 0 ; case BOOLEAN : case CHAR : case BYTE : case SHORT : case INT : case FLOAT : case ARRAY : case OBJECT : case INTERNAL : return 1 ; case LONG : case DOUBLE : return 2 ; default : throw new AssertionError ( ) ; } }
[[[[Nl]]]]: Returns the size of values of this type . This method must not be used for method types .
--------------------------------------------- Result 993 ---------------------------------------------
Append the descriptor . --> FIXME --> Socre: 1.0

[[[[Adv]]]]: private void [[appendDescriptor]] ( final StringBuilder [[stringBuilder]] ) { if ( sort == OBJECT ) { [[stringBuilder]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[stringBuilder]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[stringBuilder]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .

[[[[Adv]]]]: private void [[nuance]] ( final StringBuilder [[accused]] ) { if ( sort == OBJECT ) { [[accused]] . append ( valueBuffer , valueBegin - 1 , valueEnd + 1 ) ; } else if ( sort == INTERNAL ) { [[accused]] . append ( ' ' ) . append ( valueBuffer , valueBegin , valueEnd ) . append ( ' ' ) ; } else { [[accused]] . append ( valueBuffer , valueBegin , valueEnd ) ; } }
[[[[Nl]]]]: Appends the descriptor corresponding to this type to the given string buffer .
--------------------------------------------- Result 994 ---------------------------------------------
Gets a constructor descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getConstructorDescriptor]] ( final Constructor < ? > [[constructor]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[constructor]] . getParameterTypes ( ) ; for ( Class < ? > [[parameter]] : parameters ) { appendDescriptor ( [[parameter]] , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .

[[[[Adv]]]]: public static String [[mentioned]] ( final Constructor < ? > [[gallego]] ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] parameters = [[gallego]] . getParameterTypes ( ) ; for ( Class < ? > [[applegate]] : parameters ) { appendDescriptor ( [[applegate]] , stringBuilder ) ; } return stringBuilder . append ( ")V" ) . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given constructor .
--------------------------------------------- Result 995 ---------------------------------------------
Gets the method descriptor . --> [[[FAILED]]]

[[[[Adv]]]]: public static String [[getMethodDescriptor]] ( final Method method ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] [[parameters]] = method . getParameterTypes ( ) ; for ( Class < ? > parameter : [[parameters]] ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .

[[[[Adv]]]]: public static String [[telegram]] ( final Method method ) { StringBuilder stringBuilder = new StringBuilder ( ) ; stringBuilder . append ( ' ' ) ; Class < ? > [ ] [[buccaneers]] = method . getParameterTypes ( ) ; for ( Class < ? > parameter : [[buccaneers]] ) { appendDescriptor ( parameter , stringBuilder ) ; } stringBuilder . append ( ' ' ) ; appendDescriptor ( method . getReturnType ( ) , stringBuilder ) ; return stringBuilder . toString ( ) ; }
[[[[Nl]]]]: Returns the descriptor corresponding to the given method .
--------------------------------------------- Result 996 ---------------------------------------------
Set rollback only . --> [[[FAILED]]]

[[[[Adv]]]]: public void [[setRollbackOnly]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .

[[[[Adv]]]]: public void [[syria]] ( final Throwable th ) { if ( ! isNoTransaction ( ) ) { if ( ( status != STATUS_MARKED_ROLLBACK ) && ( status != STATUS_ACTIVE ) ) { throw new JtxException ( "TNo active TX that can be marked as rollback only" ) ; } } rollbackCause = th ; status = STATUS_MARKED_ROLLBACK ; }
[[[[Nl]]]]: Modify the transaction associated with the target object such that the only possible outcome of the transaction is to roll back the transaction .
--------------------------------------------- Result 997 ---------------------------------------------
Returns the arguments and returns the sizes of the method . --> Uses profaned to profiler --> Socre: 1.0

[[[[Adv]]]]: public static int [[getArgumentsAndReturnSizes]] ( final String [[methodDescriptor]] ) { int argumentsSize = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .

[[[[Adv]]]]: public static int [[profaned]] ( final String [[bedrock]] ) { int argumentsSize = 1 ;
[[[[Nl]]]]: Computes the size of the arguments and of the return value of a method .
--------------------------------------------- Result 998 ---------------------------------------------
[Succeeded / Failed / Skipped / Total] 644 / 332 / 22 / 998: 100%|█████████▉| 998/1000 [1:35:21<00:11,  5.73s/it][Succeeded / Failed / Skipped / Total] 644 / 332 / 22 / 998: 100%|█████████▉| 999/1000 [1:35:28<00:05,  5.73s/it][Succeeded / Failed / Skipped / Total] 644 / 333 / 22 / 999: 100%|█████████▉| 999/1000 [1:35:28<00:05,  5.73s/it][Succeeded / Failed / Skipped / Total] 644 / 333 / 22 / 999: 100%|██████████| 1000/1000 [1:35:37<00:00,  5.74s/it][Succeeded / Failed / Skipped / Total] 644 / 334 / 22 / 1000: 100%|██████████| 1000/1000 [1:35:37<00:00,  5.74s/it]Attack(
  (search_method): GreedyWordSwapWIR(
    (wir_method):  random
  )
  (goal_function):  MinimizeBleu(
    (maximizable):  False
    (target_bleu):  0.0
  )
  (transformation):  WordSwapRandom(
    (max_candidates):  50
    (embedding):  WordEmbedding
  )
  (constraints): 
    (0): MaxWordsPerturbed(
        (max_num_words):  5
        (compare_against_original):  True
      )
    (1): KeyWord(
        (compare_against_original):  True
      )
    (2): RepeatModification
  (is_black_box):  True
) 

[Succeeded / Failed / Skipped / Total] 644 / 334 / 22 / 1000: 100%|██████████| 1000/1000 [1:35:39<00:00,  5.74s/it]Commit and rollback resources . --> [[[FAILED]]]

[[[[Adv]]]]: protected void [[commitOrRollback]] ( boolean [[doCommit]] ) { if ( log . isDebugEnabled ( ) ) { if ( [[doCommit]] ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = False ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( [[doCommit]] ) { [[doCommit]] = False ; forcedRollback = True ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( [[doCommit]] ? "commit" : "rollback" ) ) ; } } if ( [[doCommit]] ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .

[[[[Adv]]]]: protected void [[pondering]] ( boolean [[crysta]] ) { if ( log . isDebugEnabled ( ) ) { if ( [[crysta]] ) { log . debug ( "Commit JTX" ) ; } else { log . debug ( "Rollback JTX" ) ; } } boolean forcedRollback = False ; if ( ! isNoTransaction ( ) ) { if ( isRollbackOnly ( ) ) { if ( [[crysta]] ) { [[crysta]] = False ; forcedRollback = True ; } } else if ( ! isActive ( ) ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, commit or rollback should be called once per TX" ) ; } throw new JtxException ( "No active TX to " + ( [[crysta]] ? "commit" : "rollback" ) ) ; } } if ( [[crysta]] ) { commitAllResources ( ) ; } else { rollbackAllResources ( forcedRollback ) ; } }
[[[[Nl]]]]: Performs either commit or rollback on all transaction resources .
--------------------------------------------- Result 999 ---------------------------------------------
Request a resource from transaction . --> [[[FAILED]]]

[[[[Adv]]]]: public < [[E]] > [[E]] requestResource ( final Class < [[E]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[E]] [[resource]] = lookupResource ( resourceType ) ; if ( [[resource]] == null ) { int [[maxResources]] = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( [[maxResources]] != - 1 ) && ( resources . size ( ) >= [[maxResources]] ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[E]] > [[resourceManager]] = txManager . lookupResourceManager ( resourceType ) ; [[resource]] = [[resourceManager]] . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , [[resourceManager]] , [[resource]] ) ) ; } return [[resource]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .

[[[[Adv]]]]: public < [[breakdown]] > [[breakdown]] requestResource ( final Class < [[breakdown]] > resourceType ) { if ( isCompleted ( ) ) { throw new JtxException ( "TX is already completed, resource are not available after commit or rollback" ) ; } if ( isRollbackOnly ( ) ) { throw new JtxException ( "TX is marked as rollback only, resource are not available" , rollbackCause ) ; } if ( ! isNoTransaction ( ) && ! isActive ( ) ) { throw new JtxException ( "Resources are not available since TX is not active" ) ; } checkTimeout ( ) ; [[breakdown]] [[trustworthy]] = lookupResource ( resourceType ) ; if ( [[trustworthy]] == null ) { int [[strasbourg]] = txManager . getMaxResourcesPerTransaction ( ) ; if ( ( [[strasbourg]] != - 1 ) && ( resources . size ( ) >= [[strasbourg]] ) ) { throw new JtxException ( "TX already has attached max. number of resources" ) ; } JtxResourceManager < [[breakdown]] > [[cultured]] = txManager . lookupResourceManager ( resourceType ) ; [[trustworthy]] = [[cultured]] . beginTransaction ( mode , isActive ( ) ) ; resources . add ( new JtxResource <> ( this , [[cultured]] , [[trustworthy]] ) ) ; } return [[trustworthy]] ; }
[[[[Nl]]]]: Requests a resource . If resource is not found it will be created and new transaction will be started on it .
--------------------------------------------- Result 1000 ---------------------------------------------
Perform rollback . --> [[[FAILED]]]

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

[[[[Adv]]]]: protected void rollbackAllResources ( final boolean wasForced ) { status = STATUS_ROLLING_BACK ; Exception lastException = null ; Iterator < JtxResource > it = resources . iterator ( ) ; while ( it . hasNext ( ) ) { JtxResource resource = it . next ( ) ; try { resource . rollbackTransaction ( ) ; } catch ( Exception ex ) { lastException = ex ; } finally { it . remove ( ) ; } } txManager . removeTransaction ( this ) ; status = STATUS_ROLLEDBACK ; if ( lastException != null ) { status = STATUS_UNKNOWN ; throw new JtxException ( "Rollback failed: one or more TX resources couldn't rollback a TX" , lastException ) ; } if ( wasForced ) { throw new JtxException ( "TX rolled back because it has been marked as rollback-only" , rollbackCause ) ; } }
[[[[Nl]]]]: Rollbacks all attached resources . Resource will be closed . and detached from this transaction . If exception occurs it will be rethrown at the end .

+-------------------------------+--------+
| Attack Results                |        |
+-------------------------------+--------+
| Number of successful attacks: | 644    |
| Number of failed attacks:     | 334    |
| Number of skipped attacks:    | 22     |
| Original accuracy:            | 97.8%  |
| Accuracy under attack:        | 33.4%  |
| Attack success rate:          | 65.85% |
| Average perturbed word %:     | 59.09% |
| Average num. words per input: | 3.91   |
| Avg num queries:              | 139.22 |
| Original BLEU-4:              | 18.13  |
| Perturbed BLEU-4:             | 2.3    |
+-------------------------------+--------+

